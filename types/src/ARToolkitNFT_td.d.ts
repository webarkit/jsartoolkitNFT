import { IARToolkitNFT } from "./abstractions/IARToolkitNFT";
import { INFTMarkerInfo } from "./abstractions/CommonInterfaces";
export declare class ARToolkitNFT implements IARToolkitNFT {
    static get UNKNOWN_MARKER(): number;
    static get NFT_MARKER(): number;
    static ERROR_MARKER_INDEX_OUT_OF_BOUNDS: number;
    static AR_DEBUG_DISABLE: number;
    static AR_DEBUG_ENABLE: number;
    static AR_DEFAULT_DEBUG_MODE: number;
    static AR_DEFAULT_LABELING_THRESH: number;
    static AR_IMAGE_PROC_FRAME_IMAGE: number;
    static AR_IMAGE_PROC_FIELD_IMAGE: number;
    static AR_DEFAULT_IMAGE_PROC_MODE: number;
    static AR_MAX_LOOP_COUNT: number;
    static AR_LOOP_BREAK_THRESH: number;
    static AR_LOG_LEVEL_DEBUG: number;
    static AR_LOG_LEVEL_INFO: number;
    static AR_LOG_LEVEL_WARN: number;
    static AR_LOG_LEVEL_ERROR: number;
    static AR_LOG_LEVEL_REL_INFO: number;
    static AR_LABELING_THRESH_MODE_MANUAL: number;
    static AR_LABELING_THRESH_MODE_AUTO_MEDIAN: number;
    static AR_LABELING_THRESH_MODE_AUTO_OTSU: number;
    static AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_NONE: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_PATTERN_EXTRACTION: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_MATCH_GENERIC: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONTRAST: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_NOT_FOUND: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_EDC_FAIL: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONFIDENCE: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR_MULTI: number;
    static AR_MARKER_INFO_CUTOFF_PHASE_HEURISTIC_TROUBLESOME_MATRIX_CODES: number;
    private instance;
    private markerNFTCount;
    private cameraCount;
    private version;
    NFTMarkerInfo: {
        error: number;
        found: number;
        id: number;
        pose: Float64Array;
    };
    FS: any;
    StringList: any;
    nftMarkers: any;
    constructor();
    init(): Promise<this>;
    setup(width: number, height: number, cameraId: number): number;
    teardown(): void;
    setupAR2(): void;
    setDebugMode(mode: boolean): number;
    getDebugMode(): boolean;
    getProcessingImage(): number;
    detectMarker(): number;
    detectNFTMarker(): number;
    getNFTMarker(markerIndex: number): INFTMarkerInfo;
    getNFTData(index: number): object;
    setLogLevel(mode: boolean): number;
    getLogLevel(): number;
    setProjectionNearPlane(value: number): void;
    getProjectionNearPlane(): number;
    setProjectionFarPlane(value: number): void;
    getProjectionFarPlane(): number;
    setThresholdMode(mode: number): number;
    getThresholdMode(): number;
    setThreshold(threshold: number): number;
    getThreshold(): number;
    setImageProcMode(mode: number): number;
    getImageProcMode(): number;
    getCameraLens(): any;
    passVideoData(videoFrame: Uint8ClampedArray, videoLuma: Uint8Array): void;
    loadCamera(urlOrData: Uint8Array | string): Promise<number>;
    addNFTMarkers(urls: Array<string | Array<string>>, callback: (filename: number[]) => void, onError2: (errorNumber: number) => void): Array<number>;
    private _storeDataFile;
    private ajax;
}
