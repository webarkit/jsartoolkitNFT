import { IARToolkitNFT } from "./abstractions/IARToolkitNFT_improved";
import { INFTMarkerInfo } from "./abstractions/CommonInterfaces";
export default class ARToolkitNFT implements IARToolkitNFT {
    static get UNKNOWN_MARKER(): number;
    static get NFT_MARKER(): number;
    FS: any;
    private instance;
    private markerNFTCount;
    private cameraCount;
    private version;
    setup: (width: number, height: number, cameraId: number) => number;
    teardown: () => void;
    setupAR2: () => void;
    setDebugMode: (mode: boolean) => number;
    getDebugMode: () => boolean;
    getProcessingImage: () => number;
    detectMarker: () => number;
    detectNFTMarker: () => number;
    getNFTMarker: (markerIndex: number) => INFTMarkerInfo;
    getNFTData: (index: number) => object;
    setLogLevel: (mode: boolean) => number;
    getLogLevel: () => number;
    NFTMarkerInfo: {
        error: number;
        found: number;
        id: number;
        pose: Float64Array;
    };
    setProjectionNearPlane: (value: number) => void;
    getProjectionNearPlane: () => number;
    setProjectionFarPlane: (value: number) => void;
    getProjectionFarPlane: () => number;
    setThresholdMode: (mode: number) => number;
    getThresholdMode: () => number;
    setThreshold: (threshold: number) => number;
    getThreshold: () => number;
    setImageProcMode: (mode: number) => number;
    getImageProcMode: () => number;
    getCameraLens: () => any;
    passVideoData: (videoFrame: Uint8ClampedArray, videoLuma: Uint8Array) => void;
    constructor();
    init(): Promise<this>;
    private _decorate;
    private converter;
    loadCamera(urlOrData: Uint8Array | string): Promise<number>;
    addNFTMarkers(urls: Array<string | Array<string>>, callback: (filename: number[]) => void, onError2: (errorNumber: number) => void): Array<number>;
    private _storeDataFile;
    private ajax;
}
