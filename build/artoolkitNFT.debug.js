// include: shell.js
// include: minimum_runtime_check.js
(function() {
  // "30.0.0" -> 300000
  function humanReadableVersionToPacked(str) {
    str = str.split("-")[0];
    // Remove any trailing part from e.g. "12.53.3-alpha"
    var vers = str.split(".").slice(0, 3);
    while (vers.length < 3) vers.push("00");
    vers = vers.map((n, i, arr) => n.padStart(2, "0"));
    return vers.join("");
  }
  // 300000 -> "30.0.0"
  var packedVersionToHumanReadable = n => [ n / 1e4 | 0, (n / 100 | 0) % 100, n % 100 ].join(".");
  var TARGET_NOT_SUPPORTED = 2147483647;
  var currentNodeVersion = typeof process !== "undefined" && process?.versions?.node ? humanReadableVersionToPacked(process.versions.node) : TARGET_NOT_SUPPORTED;
  if (currentNodeVersion < 16e4) {
    throw new Error(`This emscripten-generated code requires node v${packedVersionToHumanReadable(16e4)} (detected v${packedVersionToHumanReadable(currentNodeVersion)})`);
  }
  var currentSafariVersion = typeof navigator !== "undefined" && navigator?.userAgent?.includes("Safari/") && navigator.userAgent.match(/Version\/(\d+\.?\d*\.?\d*)/) ? humanReadableVersionToPacked(navigator.userAgent.match(/Version\/(\d+\.?\d*\.?\d*)/)[1]) : TARGET_NOT_SUPPORTED;
  if (currentSafariVersion < 15e4) {
    throw new Error(`This emscripten-generated code requires Safari v${packedVersionToHumanReadable(15e4)} (detected v${currentSafariVersion})`);
  }
  var currentFirefoxVersion = typeof navigator !== "undefined" && navigator?.userAgent?.match(/Firefox\/(\d+(?:\.\d+)?)/) ? parseFloat(navigator.userAgent.match(/Firefox\/(\d+(?:\.\d+)?)/)[1]) : TARGET_NOT_SUPPORTED;
  if (currentFirefoxVersion < 79) {
    throw new Error(`This emscripten-generated code requires Firefox v79 (detected v${currentFirefoxVersion})`);
  }
  var currentChromeVersion = typeof navigator !== "undefined" && navigator?.userAgent?.match(/Chrome\/(\d+(?:\.\d+)?)/) ? parseFloat(navigator.userAgent.match(/Chrome\/(\d+(?:\.\d+)?)/)[1]) : TARGET_NOT_SUPPORTED;
  if (currentChromeVersion < 85) {
    throw new Error(`This emscripten-generated code requires Chrome v85 (detected v${currentChromeVersion})`);
  }
})();

// end include: minimum_runtime_check.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != "undefined" ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).
// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = !!globalThis.window;

var ENVIRONMENT_IS_WORKER = !!globalThis.WorkerGlobalScope;

// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = globalThis.process?.versions?.node && globalThis.process?.type != "renderer";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = (status, toThrow) => {
  throw toThrow;
};

// In MODULARIZE mode _scriptName needs to be captured already at the very top of the page immediately when the page is parsed, so it is generated there
// before the page load. In non-MODULARIZE modes generate it here.
var _scriptName = globalThis.document?.currentScript?.src;

if (typeof __filename != "undefined") {
  // Node
  _scriptName = __filename;
} else if (ENVIRONMENT_IS_WORKER) {
  _scriptName = self.location.href;
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = "";

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  const isNode = globalThis.process?.versions?.node && globalThis.process?.type != "renderer";
  if (!isNode) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require("fs");
  scriptDirectory = __dirname + "/";
  // include: node_shell_read.js
  readBinary = filename => {
    // We need to re-wrap `file://` strings to URLs.
    filename = isFileURI(filename) ? new URL(filename) : filename;
    var ret = fs.readFileSync(filename);
    assert(Buffer.isBuffer(ret));
    return ret;
  };
  readAsync = async (filename, binary = true) => {
    // See the comment in the `readBinary` function.
    filename = isFileURI(filename) ? new URL(filename) : filename;
    var ret = fs.readFileSync(filename, binary ? undefined : "utf8");
    assert(binary ? Buffer.isBuffer(ret) : typeof ret == "string");
    return ret;
  };
  // end include: node_shell_read.js
  if (process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, "/");
  }
  arguments_ = process.argv.slice(2);
  // MODULARIZE will export the module in the proper place outside, we don't need to export here
  if (typeof module != "undefined") {
    module["exports"] = Module;
  }
  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };
} else if (ENVIRONMENT_IS_SHELL) {} else // Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  try {
    scriptDirectory = new URL(".", _scriptName).href;
  } catch {}
  if (!(globalThis.window || globalThis.WorkerGlobalScope)) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
  {
    // include: web_or_worker_shell_read.js
    if (ENVIRONMENT_IS_WORKER) {
      readBinary = url => {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, false);
        xhr.responseType = "arraybuffer";
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */ (xhr.response));
      };
    }
    readAsync = async url => {
      // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
      // See https://github.com/github/fetch/pull/92#issuecomment-140665932
      // Cordova or Electron apps are typically loaded from a file:// url.
      // So use XHR on webview if URL is a file URL.
      if (isFileURI(url)) {
        return new Promise((resolve, reject) => {
          var xhr = new XMLHttpRequest;
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = () => {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
              // file URLs can return 0
              resolve(xhr.response);
              return;
            }
            reject(xhr.status);
          };
          xhr.onerror = reject;
          xhr.send(null);
        });
      }
      var response = await fetch(url, {
        credentials: "same-origin"
      });
      if (response.ok) {
        return response.arrayBuffer();
      }
      throw new Error(response.status + " : " + response.url);
    };
  }
} else {
  throw new Error("environment detection error");
}

var out = console.log.bind(console);

var err = console.error.bind(console);

// perform assertions in shell.js after we set up out() and err(), as otherwise
// if an assertion fails it cannot print the message
assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");

// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===
// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
var wasmBinary;

// WASM == 2 includes wasm2js.js separately.
// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.
/** @suppress{duplicate, const, checkTypes} */ var WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */ Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts["initial"] * 65536);
  },
  Module: function(binary) {},
  /** @constructor */ Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 23684, "");
  base64DecodeToExistingUint8Array(bufferView, 35904, "yB8BAOCKAAA0IAEAmIoAAHZwcGlwAAAANCABAOCKAABpcHAAbIwAAJiKAACQIAEAdIwAAE4xMGVtc2NyaXB0ZW4zdmFsRQAAIIcAAOCKAAA0IAEAcHBwaQAAAAAAAAAA4B8BAOCKAAA0IAEAmIoAAGlwcGlwAAAAFCEBAOCMAAAAAAAAAwAAAPiMAAAAAAAANIoAAAAAAABkigAAAAAAAE5TdDNfXzI4b3B0aW9uYWxJaUVFAAAAALggAQAEjQAANI0AAE5TdDNfXzIyN19fb3B0aW9uYWxfbW92ZV9hc3NpZ25fYmFzZUlpTGIxRUVFAAAAALggAQBAjQAAcI0AAE5TdDNfXzIyN19fb3B0aW9uYWxfY29weV9hc3NpZ25fYmFzZUlpTGIxRUVFAAAAALggAQB8jQAApI0AAE5TdDNfXzIyMF9fb3B0aW9uYWxfbW92ZV9iYXNlSWlMYjFFRUUAAAC4IAEAsI0AANiNAABOU3QzX18yMjBfX29wdGlvbmFsX2NvcHlfYmFzZUlpTGIxRUVFAAAAuCABAOSNAAAQjgAATlN0M19fMjIzX19vcHRpb25hbF9zdG9yYWdlX2Jhc2VJaUxiMEVFRQAAAACQIAEAGI4AAE5TdDNfXzIyNF9fb3B0aW9uYWxfZGVzdHJ1Y3RfYmFzZUlpTGIxRUVFAAAAkCABAEyOAABOU3QzX18yNnZlY3RvcklpTlNfOWFsbG9jYXRvcklpRUVFRQBwIQEAgI4AAAAAAABEjgAAUE5TdDNfXzI2dmVjdG9ySWlOU185YWxsb2NhdG9ySWlFRUVFAAAAAHAhAQC4jgAAAQAAAESOAABQS05TdDNfXzI2dmVjdG9ySWlOU185YWxsb2NhdG9ySWlFRUVFAHBwAHZwAHCOAABwcAAAyB8BAESOAAAoIAEAdnBwaQAAAADIHwEARI4AADQgAQAoIAEAdnBwaWkAAAA0IAEARI4AAGlwcABsjAAAKCABALiMAABEjgAANCABAHBwcGkAAAAA4B8BAESOAAA0IAEAKCABAGlwcGlpAAAAFCEBAICPAAAAAAAAAwAAAKCPAAAAAAAANIoAAAAAAABkigAAAAAAAE5TdDNfXzI4b3B0aW9uYWxJOW5mdE1hcmtlckVFAAAAuCABAKyPAADkjwAATlN0M19fMjI3X19vcHRpb25hbF9tb3ZlX2Fzc2lnbl9iYXNlSTluZnRNYXJrZXJMYjFFRUUAAAC4IAEA8I8AACiQAABOU3QzX18yMjdfX29wdGlvbmFsX2NvcHlfYXNzaWduX2Jhc2VJOW5mdE1hcmtlckxiMUVFRQAAALggAQA0kAAAZJAAAE5TdDNfXzIyMF9fb3B0aW9uYWxfbW92ZV9iYXNlSTluZnRNYXJrZXJMYjFFRUUAALggAQBwkAAAoJAAAE5TdDNfXzIyMF9fb3B0aW9uYWxfY29weV9iYXNlSTluZnRNYXJrZXJMYjFFRUUAALggAQCskAAA4JAAAE5TdDNfXzIyM19fb3B0aW9uYWxfc3RvcmFnZV9iYXNlSTluZnRNYXJrZXJMYjBFRUUAAACQIAEA6JAAAE5TdDNfXzIyNF9fb3B0aW9uYWxfZGVzdHJ1Y3RfYmFzZUk5bmZ0TWFya2VyTGIxRUVFAACQIAEAJJEAADluZnRNYXJrZXIAAJAgAQA4kQAATlN0M19fMjZ2ZWN0b3JJOW5mdE1hcmtlck5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAcCEBAHiRAAAAAAAAMJEAAFBOU3QzX18yNnZlY3Rvckk5bmZ0TWFya2VyTlNfOWFsbG9jYXRvcklTMV9FRUVFAHAhAQC4kQAAAQAAADCRAABQS05TdDNfXzI2dmVjdG9ySTluZnRNYXJrZXJOU185YWxsb2NhdG9ySVMxX0VFRUUAcHAAdnAAAGiRAABwcAAAyB8BADCRAAAckQAAdnBwcAAAAAAAAAAAyB8BADCRAAA0IAEAHJEAAHZwcGlwAAAANCABADCRAABpcHAAbIwAAByRAABYjwAAMJEAADQgAQBwcHBpAAAAAOAfAQAwkQAANCABAByRAABpcHBpcA==");
  base64DecodeToExistingUint8Array(bufferView, 37488, "KCABACggAQAoIAEAKCABAOAfAQBpcGlpaWkAAMgfAQAoIAEA4B8BAHZwaWkAAAAAKCABACggAQBpcGkARI4AACggAQDgigAAcHBpcAAAAAAoIAEAmIoAAJiKAABpcHBwAAAAACggAQCYigAAaXBwAGyMAAAoIAEAKCABAHBwaWkAAAAAHJEAACggAQAoIAEAcHBpaQBwAHZwAGlwcAB2cHBpAAAoIAEAKCABACggAQBpcGlpAAAAAMgfAQAoIAEAdnBpACggAQBpcAAAyB8BACggAQB8IAEAdnBpZAAAAAB8IAEAKCABAGRwaQDIHwEAKCABACggAQB2cGlpAAAAAGyMAAAoIAEAcHBpAAAAAAAoIAEAKCABAGyMAABsjAAA4B8BAGlwaXBwaQAATCABAGyMAABsjAAArJMAAJAgAQC0kwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJaEVFAADIHwEAfCABAMgfAQBwIAEAbIwAACggAQBsjAAAcCABAGyMAAD8kwAAkCABAASUAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lmRUUAAMgfAQB8IAE=");
  base64DecodeToExistingUint8Array(bufferView, 37940, "");
  base64DecodeToExistingUint8Array(bufferView, 46432, "YAcAAAAIUAAACBAAFAhzABIHHwAACHAAAAgwAAAJwAAQBwoAAAhgAAAIIAAACaAAAAgAAAAIgAAACEAAAAngABAHBgAACFgAAAgYAAAJkAATBzsAAAh4AAAIOAAACdAAEQcRAAAIaAAACCgAAAmwAAAICAAACIgAAAhIAAAJ8AAQBwQAAAhUAAAIFAAVCOMAEwcrAAAIdAAACDQAAAnIABEHDQAACGQAAAgkAAAJqAAACAQAAAiEAAAIRAAACegAEAcIAAAIXAAACBwAAAmYABQHUwAACHwAAAg8AAAJ2AASBxcAAAhsAAAILAAACbgAAAgMAAAIjAAACEwAAAn4ABAHAwAACFIAAAgSABUIowATByMAAAhyAAAIMgAACcQAEQcLAAAIYgAACCIAAAmkAAAIAgAACIIAAAhCAAAJ5AAQBwcAAAhaAAAIGgAACZQAFAdDAAAIegAACDoAAAnUABIHEwAACGoAAAgqAAAJtAAACAoAAAiKAAAISgAACfQAEAcFAAAIVgAACBYAQAgAABMHMwAACHYAAAg2AAAJzAARBw8AAAhmAAAIJgAACawAAAgGAAAIhgAACEYAAAnsABAHCQAACF4AAAgeAAAJnAAUB2MAAAh+AAAIPgAACdwAEgcbAAAIbgAACC4AAAm8AAAIDgAACI4AAAhOAAAJ/ABgBwAAAAhRAAAIEQAVCIMAEgcfAAAIcQAACDEAAAnCABAHCgAACGEAAAghAAAJogAACAEAAAiBAAAIQQAACeIAEAcGAAAIWQAACBkAAAmSABMHOwAACHkAAAg5AAAJ0gARBxEAAAhpAAAIKQAACbIAAAgJAAAIiQAACEkAAAnyABAHBAAACFUAAAgVABAIAgETBysAAAh1AAAINQAACcoAEQcNAAAIZQAACCUAAAmqAAAIBQAACIUAAAhFAAAJ6gAQBwgAAAhdAAAIHQAACZoAFAdTAAAIfQAACD0AAAnaABIHFwAACG0AAAgtAAAJugAACA0AAAiNAAAITQAACfoAEAcDAAAIUwAACBMAFQjDABMHIwAACHMAAAgzAAAJxgARBwsAAAhjAAAIIwAACaYAAAgDAAAIgwAACEMAAAnmABAHBwAACFsAAAgbAAAJlgAUB0MAAAh7AAAIOwAACdYAEgcTAAAIawAACCsAAAm2AAAICwAACIsAAAhLAAAJ9gAQBwUAAAhXAAAIFwBACAAAEwczAAAIdwAACDcAAAnOABEHDwAACGcAAAgnAAAJrgAACAcAAAiHAAAIRwAACe4AEAcJAAAIXwAACB8AAAmeABQHYwAACH8AAAg/AAAJ3gASBxsAAAhvAAAILwAACb4AAAgPAAAIjwAACE8AAAn+AGAHAAAACFAAAAgQABQIcwASBx8AAAhwAAAIMAAACcEAEAcKAAAIYAAACCAAAAmhAAAIAAAACIAAAAhAAAAJ4QAQBwYAAAhYAAAIGAAACZEAEwc7AAAIeAAACDgAAAnRABEHEQAACGgAAAgoAAAJsQAACAgAAAiIAAAISAAACfEAEAcEAAAIVAAACBQAFQjjABMHKwAACHQAAAg0AAAJyQARBw0AAAhkAAAIJAAACakAAAgEAAAIhAAACEQAAAnpABAHCAAACFwAAAgcAAAJmQAUB1MAAAh8AAAIPAAACdkAEgcXAAAIbAAACCwAAAm5AAAIDAAACIwAAAhMAAAJ+QAQBwMAAAhSAAAIEgAVCKMAEwcjAAAIcgAACDIAAAnFABEHCwAACGIAAAgiAAAJpQAACAIAAAiCAAAIQgAACeUAEAcHAAAIWgAACBoAAAmVABQHQwAACHoAAAg6AAAJ1QASBxMAAAhqAAAIKgAACbUAAAgKAAAIigAACEoAAAn1ABAHBQAACFYAAAgWAEAIAAATBzMAAAh2AAAINgAACc0AEQcPAAAIZgAACCYAAAmtAAAIBgAACIYAAAhGAAAJ7QAQBwkAAAheAAAIHgAACZ0AFAdjAAAIfgAACD4AAAndABIHGwAACG4AAAguAAAJvQAACA4AAAiOAAAITgAACf0AYAcAAAAIUQAACBEAFQiDABIHHwAACHEAAAgxAAAJwwAQBwoAAAhhAAAIIQAACaMAAAgBAAAIgQAACEEAAAnjABAHBgAACFkAAAgZAAAJkwATBzsAAAh5AAAIOQAACdMAEQcRAAAIaQAACCkAAAmzAAAICQAACIkAAAhJAAAJ8wAQBwQAAAhVAAAIFQAQCAIBEwcrAAAIdQAACDUAAAnLABEHDQAACGUAAAglAAAJqwAACAUAAAiFAAAIRQAACesAEAcIAAAIXQAACB0AAAmbABQHUwAACH0AAAg9AAAJ2wASBxcAAAhtAAAILQAACbsAAAgNAAAIjQAACE0AAAn7ABAHAwAACFMAAAgTABUIwwATByMAAAhzAAAIMwAACccAEQcLAAAIYwAACCMAAAmnAAAIAwAACIMAAAhDAAAJ5wAQBwcAAAhbAAAIGwAACZcAFAdDAAAIewAACDsAAAnXABIHEwAACGsAAAgrAAAJtwAACAsAAAiLAAAISwAACfcAEAcFAAAIVwAACBcAQAgAABMHMwAACHcAAAg3AAAJzwARBw8AAAhnAAAIJwAACa8AAAgHAAAIhwAACEcAAAnvABAHCQAACF8AAAgfAAAJnwAUB2MAAAh/AAAIPwAACd8AEgcbAAAIbwAACC8AAAm/AAAIDwAACI8AAAhPAAAJ/wAQBQEAFwUBARMFEQAbBQEQEQUFABkFAQQVBUEAHQUBQBAFAwAYBQECFAUhABwFASASBQkAGgUBCBYFgQBABQAAEAUCABcFgQETBRkAGwUBGBEFBwAZBQEGFQVhAB0FAWAQBQQAGAUBAxQFMQAcBQEwEgUNABoFAQwWBcEAQAUAAJAgAQDovQAATlN0M19fMjEyYmFzaWNfc3RyaW5nSXdOU18xMWNoYXJfdHJhaXRzSXdFRU5TXzlhbGxvY2F0b3JJd0VFRUUAAJAgAQAwvgAATlN0M19fMjEyYmFzaWNfc3RyaW5nSURzTlNfMTFjaGFyX3RyYWl0c0lEc0VFTlNfOWFsbG9jYXRvcklEc0VFRUUAAACQIAEAfL4AAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0lEaU5TXzExY2hhcl90cmFpdHNJRGlFRU5TXzlhbGxvY2F0b3JJRGlFRUVFAAAAkCABAMi+AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ljRUUAAJAgAQDwvgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJYUVFAACQIAEAGL8AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXNFRQAAkCABAEC/AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0l0RUUAAJAgAQBovwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJaUVFAACQIAEAkL8AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWpFRQAAkCABALi/AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lsRUUAAJAgAQDgvwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJbUVFAACQIAEACMAAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXhFRQAAkCABADDAAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0l5RUUAAJAgAQBYwAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZEVF");
  base64DecodeToExistingUint8Array(bufferView, 49280, "gQEdWg4ChiUQAxQREgQLCBQF2AMXBtoBGQflABwIbwAeCTYAIQoaACMLDQAJDAYACg0DAAwNAQCPD39aJBAlPyYR8iwnEnwgKBO5FyoUghErFe8MLRahCS4XLwcwGFwFMRkGBDMaAwM0G0ACNhyxATgdRAE5HvUAOx+3ADwgigA+IWgAPyJOACAjOwAhCSwApSXhWkAmTEhBJw06QyjxLkQpHyZFKjMfRiuoGUgsGBVJLXcRSi50Dksv+wtNMPgJTjFhCE8yBgcwM80FMjTeBDI1DwQzNmMDNDfUAjU4XAI2OfgBNzqkATg7YAE5PCUBOj32ADs+ywA9P6sAPSCPAMFBEltQQgRNUUMsQVJE2DdTRegvVEY8KVZHeSNXSN8eV0mpGkhKThdISyQUSkycEUpNaw9LTlENTU+2C00wQArQUTJYWFIcTVlTjkNaVN07W1XuNFxWri5dV5opVkcWJdhZcFVfWqlMYFvZRGFcIj5jXSQ4Y160Ml1WFy7fYKhWZWFGT2Zi5UdnY89BaGQ9PGNdXjdpZjFSamcPTGtoOUZnY15B6WonVmxr51BtZ4VLbm2XVW9rT1DubxBacG0iVfBv61lxcR1a");
  base64DecodeToExistingUint8Array(bufferView, 49746, "AQUBAQEBAQE=");
  base64DecodeToExistingUint8Array(bufferView, 49778, "AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLAAAAAAACAQMDAgQDBQUEBAAAAX0=");
  base64DecodeToExistingUint8Array(bufferView, 49840, "AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6");
  base64DecodeToExistingUint8Array(bufferView, 50018, "AgECBAQDBAcFBAQAAQJ3");
  base64DecodeToExistingUint8Array(bufferView, 50049, "AQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fpTT1M=");
  base64DecodeToExistingUint8Array(bufferView, 50290, "TFNF");
  base64DecodeToExistingUint8Array(bufferView, 50385, "QMVYn1NCSwBASTKjIqgRxVghe/xzYmjFWL9FCzB+GJ9T/HNBbVRin1OzQUEtEhdCS2JoVGJ+WEJLITu6KMMUAEDFWJ9TQksAQEkyoyKoEUkyv0WzQSE7STKCJzcb4A2jIgswQS26KKMiNxu/Eo4JqBF+GBIXwxSoEeANjgnfBAAAAAAAAPA/72FIsVAx9j/Kb02Rruf0P6oRbO9i0PI/AAAAAAAA8D87v6fAaSTpP7sgx3t6UeE/Xaty3lWo0T/AAAAAwQAAAMI=");
  base64DecodeToExistingUint8Array(bufferView, 50596, "AQAAAAIAAAADAAAAAAAAAAEAAAAFAAAAAgAAAAQAAAAGAAAAAwAAAAcAAAAI");
  base64DecodeToExistingUint8Array(bufferView, 50660, "AQAAAAUAAAAGAAAAAgAAAAQAAAAHAAAADAAAAAMAAAAIAAAACwAAAA0AAAAJAAAACgAAAA4AAAAPAAAAAAAAAAEAAAAFAAAABgAAAA4AAAACAAAABAAAAAcAAAANAAAADwAAAAMAAAAIAAAADAAAABAAAAAVAAAACQAAAAsAAAARAAAAFAAAABYAAAAKAAAAEgAAABMAAAAXAAAAGA==");
  base64DecodeToExistingUint8Array(bufferView, 50836, "AQAAAAUAAAAGAAAADgAAAA8AAAACAAAABAAAAAcAAAANAAAAEAAAABkAAAADAAAACAAAAAwAAAARAAAAGAAAABoAAAAJAAAACwAAABIAAAAXAAAAGwAAACAAAAAKAAAAEwAAABYAAAAcAAAAHwAAACEAAAAUAAAAFQAAAB0AAAAeAAAAIgAAACMAAAAAAAAAAQAAAAUAAAAGAAAADgAAAA8AAAAbAAAAAgAAAAQAAAAHAAAADQAAABAAAAAaAAAAHAAAAAMAAAAIAAAADAAAABEAAAAZAAAAHQAAACYAAAAJAAAACwAAABIAAAAYAAAAHgAAACUAAAAnAAAACgAAABMAAAAXAAAAHwAAACQAAAAoAAAALQAAABQAAAAWAAAAIAAAACMAAAApAAAALAAAAC4AAAAVAAAAIQAAACIAAAAqAAAAKwAAAC8AAAAw");
  base64DecodeToExistingUint8Array(bufferView, 51188, "AQAAAAUAAAAGAAAADgAAAA8AAAAbAAAAHAAAAAIAAAAEAAAABwAAAA0AAAAQAAAAGgAAAB0AAAAqAAAAAwAAAAgAAAAMAAAAEQAAABkAAAAeAAAAKQAAACsAAAAJAAAACwAAABIAAAAYAAAAHwAAACgAAAAsAAAANQAAAAoAAAATAAAAFwAAACAAAAAnAAAALQAAADQAAAA2AAAAFAAAABYAAAAhAAAAJgAAAC4AAAAzAAAANwAAADwAAAAVAAAAIgAAACUAAAAvAAAAMgAAADgAAAA7AAAAPQAAACMAAAAkAAAAMAAAADEAAAA5AAAAOgAAAD4AAAA/AAAAAAAAAAEAAAADAAAABwAAAA8AAAAfAAAAPwAAAH8AAAD/AAAA/wEAAP8DAAD/BwAA/w8AAP8fAAD/PwAA/38AADl4AADRXwAArF8AAFZxAADPeQAADGQAAA9wAAADcwAAr3gAADBrAABLcgAAYnIAAGdtAABUdgAAw2sAAB14AADjdgAA4XQAAFx1AACAZgAAk3UAAI93AAB1YQAAZWYAAABsAACIbgAAxmQAAOx1AAAhZAAA2XUAABphAADGdQAAs3UAAIKDAADhcwAAzXMAAKJrAACwaQAAV34AAJ5kAAC3aAAAL18AABZoAACAbwAAkW8AALl3AAD6eAAALHAAAOtkAAAWbwAAfHMAANJyAABXcwAAU3AAAC1zAADxXwAAp4MAABpmAADSZgAA+mYAAHN8AABOZwAAxmkAAJBgAAAhZwAA+GgAAGJvAABEbwAAhn4AAI1oAABxYAAAnWoAAHNrAAC4cwAApHMAABZuAABRgQAANXwAADF3AABMYwAAIGMAANZgAAC6YAAABncAAMJhAAC4YwAAoWMAALhwAAD6cwAAYXgAAN1hAABAYgAAdXAAABliAABYYAAATWEAAJdmAAC6ZgAAT2sAAL52AACCdAAAlWcAAIh0AADCdAAAqXAAAEhmAAA1dQAAGHUAABtpAAA0aQAAqGIAAG5iAADqYgAAY2oAAI1jAAB2YwAA93cAAMZxAAASdgAAHGAAAGJkAABwcQAAInQAAK1vAABQdAAACnwAAGJoAAAAAAAAQAYAAIA+AAAAAAAAiBMAAADAMPAMzDz8A8Mz8w/PP/+AQLBwjEy8fINDs3OPT79/IOAQ0CzsHNwj4xPTL+8f36BgkFCsbJxco2OTU69vn18IyDj4BMQ09AvLO/sHxzf3iEi4eIREtHSLS7t7h0e3dyjoGNgk5BTUK+sb2yfnF9eoaJhYpGSUVKtrm1unZ5dXAsIy8g7OPv4BwTHxDc09/YJCsnKOTr5+gUGxcY1NvX0i4hLSLu4e3iHhEdEt7R3domKSUq5unl6hYZFRrW2dXQrKOvoGxjb2Cck5+QXFNfWKSrp6hka2dolJuXmFRbV1Kuoa2ibmFtYp6RnZJeUV1apqmlqmZpZWqWmZWaVllVUBAAAAAAAAAAI=");
  base64DecodeToExistingUint8Array(bufferView, 52308, "AQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAIAAAABkAAAASAAAACwAAAAQAAAAFAAAADAAAABMAAAAaAAAAIQAAACgAAAAwAAAAKQAAACIAAAAbAAAAFAAAAA0AAAAGAAAABwAAAA4AAAAVAAAAHAAAACMAAAAqAAAAMQAAADgAAAA5AAAAMgAAACsAAAAkAAAAHQAAABYAAAAPAAAAFwAAAB4AAAAlAAAALAAAADMAAAA6AAAAOwAAADQAAAAtAAAAJgAAAB8AAAAnAAAALgAAADUAAAA8AAAAPQAAADYAAAAvAAAANwAAAD4AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAAAAAAABAAAACAAAABAAAAAJAAAAAgAAAAMAAAAKAAAAEQAAABgAAAAgAAAAGQAAABIAAAALAAAABAAAAAUAAAAMAAAAEwAAABoAAAAhAAAAKAAAADAAAAApAAAAIgAAABsAAAAUAAAADQAAAAYAAAAOAAAAFQAAABwAAAAjAAAAKgAAADEAAAAyAAAAKwAAACQAAAAdAAAAFgAAAB4AAAAlAAAALAAAADMAAAA0AAAALQAAACYAAAAuAAAANQAAADYAAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/");
  base64DecodeToExistingUint8Array(bufferView, 52900, "AQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAIAAAABkAAAASAAAACwAAAAQAAAAFAAAADAAAABMAAAAaAAAAIQAAACgAAAApAAAAIgAAABsAAAAUAAAADQAAABUAAAAcAAAAIwAAACoAAAArAAAAJAAAAB0AAAAlAAAALAAAAC0AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAAAAAAAEAAAAIAAAAEAAAAAkAAAACAAAAAwAAAAoAAAARAAAAGAAAACAAAAAZAAAAEgAAAAsAAAAEAAAADAAAABMAAAAaAAAAIQAAACIAAAAbAAAAFAAAABwAAAAjAAAAJAAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8=");
  base64DecodeToExistingUint8Array(bufferView, 53284, "AQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAGQAAABIAAAALAAAAEwAAABoAAAAbAAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAAAAAAABAAAACAAAABAAAAAJAAAAAgAAAAoAAAARAAAAEgAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8=");
  base64DecodeToExistingUint8Array(bufferView, 53524, "AQAAAAgAAAAJAAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAANsPST/bD0m/5MsWQOTLFsAAAAAAAAAAgNsPSUDbD0nAOGPtPtoPST9emHs/2g/JP2k3rDFoISIztA8UM2ghojMDAAAABAAAAAQAAAAGAAAAg/miAERObgD8KRUA0VcnAN009QBi28AAPJmVAEGQQwBjUf4Au96rALdhxQA6biQA0k1CAEkG4AAJ6i4AHJLRAOsd/gApsRwA6D6nAPU1ggBEuy4AnOmEALQmcABBfl8A1pE5AFODOQCc9DkAi1+EACj5vQD4HzsA3v+XAA+YBQARL+8AClqLAG0fbQDPfjYACcsnAEZPtwCeZj8ALepfALondQDl68cAPXvxAPc5BwCSUooA+2vqAB+xXwAIXY0AMANWAHv8RgDwq2sAILzPADb0mgDjqR0AXmGRAAgb5gCFmWUAoBRfAI1AaACA2P8AJ3NNAAYGMQDKVhUAyahzAHviYABrjMAAGcRHAM1nwwAJ6NwAWYMqAIt2xACmHJYARK/dABlX0QClPgUABQf/ADN+PwDCMugAmE/eALt9MgAmPcMAHmvvAJ/4XgA1HzoAf/LKAPGHHQB8kCEAaiR8ANVu+gAwLXcAFTtDALUUxgDDGZ0ArcTCACxNQQAMAF0Ahn1GAONxLQCbxpoAM2IAALTSfAC0p5cAN1XVANc+9gCjEBgATXb8AGSdKgBw16sAY3z4AHqwVwAXFecAwElWADvW2QCnhDgAJCPLANaKdwBaVCMAAB+5APEKGwAZzt8AnzH/AGYeagCZV2EArPtHAH5/2AAiZbcAMuiJAOa/YADvxM0AbDYJAF0/1AAW3tcAWDveAN6bkgDSIigAKIboAOJYTQDGyjIACOMWAOB9ywAXwFAA8x2nABjgWwAuEzQAgxJiAINIAQD1jlsArbB/AB7p8gBISkMAEGfTAKrd2ACuX0IAamHOAAoopADTmbQABqbyAFx3fwCjwoMAYTyIAIpzeACvjFoAb9e9AC2mYwD0v8sAjYHvACbBZwBVykUAytk2ACio0gDCYY0AEsl3AAQmFAASRpsAxFnEAMjFRABNspEAABfzANRDrQApSeUA/dUQAAC+/AAelMwAcM7uABM+9QDs8YAAs+fDAMf4KACTBZQAwXE+AC4JswALRfMAiBKcAKsgewAutZ8AR5LCAHsyLwAMVW0AcqeQAGvnHwAxy5YAeRZKAEF54gD034kA6JSXAOLmhACZMZcAiO1rAF9fNgC7/Q4ASJq0AGekbABxckIAjV0yAJ8VuAC85QkAjTElAPd0OQAwBRwADQwBAEsIaAAs7lgAR6qQAHTnAgC91iQA932mAG5IcgCfFu8AjpSmALSR9gDRU1EAzwryACCYMwD1S34AsmNoAN0+XwBAXQMAhYl/AFVSKQA3ZMAAbdgQADJIMgBbTHUATnHUAEVUbgALCcEAKvVpABRm1QAnB50AXQRQALQ72wDqdsUAh/kXAElrfQAdJ7oAlmkpAMbMrACtFFQAkOJqAIjZiQAsclAABKS+AHcHlADzMHAAAPwnAOpxqABmwkkAZOA9AJfdgwCjP5cAQ5T9AA2GjAAxQd4AkjmdAN1wjAAXt+cACN87ABU3KwBcgKAAWoCTABARkgAP6NgAbICvANv/SwA4kA8AWRh2AGKlFQBhy7sAx4m5ABBAvQDS8gQASXUnAOu29gDbIrsAChSqAIkmLwBkg3YACTszAA6UGgBROqoAHaPCAK/trgBcJhIAbcJNAC16nADAVpcAAz+DAAnw9gArQIwAbTGZADm0BwAMIBUA2MNbAPWSxADGrUsATsqlAKc3zQDmqTYAq5KUAN1CaAAZY94AdozvAGiLUgD82zcArqGrAN8VMQAArqEADPvaAGRNZgDtBbcAKWUwAFdWvwBH/zoAavm5AHW+8wAok98Aq4AwAGaM9gAEyxUA+iIGANnkHQA9s6QAVxuPADbNCQBOQukAE76kADMjtQDwqhoAT2WoANLBpQALPw8AW3jNACP5dgB7iwQAiRdyAMamUwBvbuIA7+sAAJtKWADE2rcAqma6AHbPzwDRAh0AsfEtAIyZwQDDrXcAhkjaAPddoADGgPQArPAvAN3smgA/XLwA0N5tAJDHHwAq27YAoyU6AACvmgCtU5MAtlcEACkttABLgH4A2genAHaqDgB7WaEAFhIqANy3LQD65f0Aidv+AIm+/QDkdmwABqn8AD6AcACFbhUA/Yf/ACg+BwBhZzMAKhiGAE296gCz568Aj21uAJVnOQAxv1sAhNdIADDfFgDHLUMAJWE1AMlwzgAwy7gAv2z9AKQAogAFbOQAWt2gACFvRwBiEtIAuVyEAHBhSQBrVuAAmVIBAFBVNwAe1bcAM/HEABNuXwBdMOQAhS6pAB2ywwChMjYACLekAOqx1AAW9yEAj2nkACf/dwAMA4AAjUAtAE/NoAAgpZkAs6LTAC9dCgC0+UIAEdrLAH2+0ACb28EAqxe9AMqigQAIalwALlUXACcAVQB/FPAA4QeGABQLZACWQY0Ah77eANr9KgBrJbYAe4k0AAXz/gC5v54AaGpPAEoqqABPxFoALfi8ANdamAD0x5UADU2NACA6pgCkV18AFD+xAIA4lQDMIAEAcd2GAMnetgC/YPUATWURAAEHawCMsKwAssDQAFFVSAAe+w4AlXLDAKMGOwDAQDUABtx7AOBFzABOKfoA1srIAOjzQQB8ZN4Am2TYANm+MQCkl8MAd1jUAGnjxQDw2hMAujo8AEYYRgBVdV8A0r31AG6SxgCsLl0ADkTtABw+QgBhxIcAKf3pAOfW8wAifMoAb5E1AAjgxQD/140AbmriALD9xgCTCMEAfF10AGutsgDNbp0APnJ7AMYRagD3z6kAKXPfALXJugC3AFEA4rINAHS6JADlfWAAdNiKAA0VLACBGAwAfmaUAAEpFgCfenYA/f2+AFZF7wDZfjYA7NkTAIu6uQDEl/wAMagnAPFuwwCUxTYA2KhWALSotQDPzA4AEoktAG9XNAAsVokAmc7jANYguQBrXqoAPiqcABFfzAD9C0oA4fT7AI47bQDihiwA6dSEAPy0qQDv7tEALjXJAC85YQA4IUQAG9nIAIH8CgD7SmoALxzYAFO0hABOmYwAVCLMACpV3ADAxtYACxmWABpwuABplWQAJlpgAD9S7gB/EQ8A9LURAPzL9QA0vC0ANLzuAOhdzADdXmAAZ46bAJIz7wDJF7gAYVibAOFXvABRg8YA2D4QAN1xSAAtHN0ArxihACEsRgBZ89cA2XqYAJ5UwABPhvoAVgb8AOV5rgCJIjYAOK0iAGeT3ABV6KoAgiY4AMrnmwBRDaQAmTOxAKnXDgBpBUgAZbLwAH+IpwCITJcA+dE2ACGSswB7gkoAmM8hAECf3ADcR1UA4XQ6AGfrQgD+nd8AXtRfAHtnpAC6rHoAVfaiACuIIwBBulUAWW4IACEqhgA5R4MAiePmAOWe1ABJ+0AA/1bpABwPygDFWYoAlPorANPBxQAPxc8A21quAEfFhgCFQ2IAIYY7ACx5lAAQYYcAKkx7AIAsGgBDvxIAiCaQAHg8iQCoxOQA5dt7AMQ6wgAm9OoA92eKAA2SvwBloysAPZOxAL18CwCkUdwAJ91jAGnh3QCalBkAqCmVAGjOKAAJ7bQARJ8gAE6YygBwgmMAfnwjAA+5MgCn9Y4AFFbnACHxCAC1nSoAb35NAKUZUQC1+asAgt/WAJbdYQAWNgIAxDqfAIOioQBy7W0AOY16AIK4qQBrMlwARidbAAA07QDSAHcA/PRVAAFZTQDgcYA=");
  base64DecodeToExistingUint8Array(bufferView, 56451, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQAAAAAAAPA/dIUV07DZ7z8PiflsWLXvP1FbEtABk+8/e1F9PLhy7z+quWgxh1TvPzhidW56OO8/4d4f9Z0e7z8VtzEK/gbvP8upOjen8e4/IjQSTKbe7j8tiWFgCM7uPycqNtXav+4/gk+dViu07j8pVEjdB6vuP4VVOrB+pO4/zTt/Zp6g7j90X+zodZ/uP4cB63MUoe4/E85MmYml7j/boCpC5azuP+XFzbA3t+4/kPCjgpHE7j9dJT6yA9XuP63TWpmf6O4/R1778nb/7j+cUoXdmxnvP2mQ79wgN+8/h6T73BhY7z9fm3szl3zvP9qQpKKvpO8/QEVuW3bQ7z8AAAAAAADoQpQjkUv4aqw/88T6UM6/zj/WUgz/Qi7mPwAAAAAAADhD/oIrZUcVR0CUI5FL+Gq8PvPE+lDOvy4/1lIM/0Iulj++8/h57GH2P96qjID3e9W/PYivSu1x9T/bbcCn8L7Sv7AQ8PA5lfQ/ZzpRf64e0L+FA7iwlcnzP+kkgqbYMcu/pWSIDBkN8z9Yd8AKT1fGv6COC3siXvI/AIGcxyuqwb8/NBpKSrvxP14OjM52Trq/uuWK8Fgj8T/MHGFaPJexv6cAmUE/lfA/HgzhOPRSor8AAAAAAADwPwAAAAAAAAAArEea/Yxg7j+EWfJdqqWqP6BqAh+zpOw/tC42qlNevD/m/GpXNiDrPwjbIHflJsU/LaqhY9HC6T9wRyINhsLLP+1BeAPmhug/4X6gyIsF0T9iSFP13GfnPwnutlcwBNQ/7zn6/kIu5j80g7hIow7Qv2oL4AtbV9U/I0EK8v7/37++8/h57GH2PxkwllvG/t6/PYivSu1x9T+k/NQyaAvbv7AQ8PA5lfQ/e7cfCotB17+FA7iwlcnzP3vPbRrpndO/pWSIDBkN8z8xtvLzmx3Qv6COC3siXvI/8Ho7Gx18yb8/NBpKSrvxP588r5Pj+cK/uuWK8Fgj8T9cjXi/y2C5v6cAmUE/lfA/zl9Htp1vqr8AAAAAAADwPwAAAAAAAAAArEea/Yxg7j899SSfyjizP6BqAh+zpOw/upE4VKl2xD/m/GpXNiDrP9LkxEoLhM4/LaqhY9HC6T8cZcbwRQbUP+1BeAPmhug/+J8bLJyO2D9iSFP13GfnP8x7sU6k4Nw/C25JyRZ20j96xnWgaRnXv926p2wKx94/yPa+SEcV578ruCplRxX3P/giAQCQIwEAU3VjY2VzcwBJbGxlZ2FsIGJ5dGUgc2VxdWVuY2UARG9tYWluIGVycm9yAFJlc3VsdCBub3QgcmVwcmVzZW50YWJsZQBOb3QgYSB0dHkAUGVybWlzc2lvbiBkZW5pZWQAT3BlcmF0aW9uIG5vdCBwZXJtaXR0ZWQATm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQBObyBzdWNoIHByb2Nlc3MARmlsZSBleGlzdHMAVmFsdWUgdG9vIGxhcmdlIGZvciBkZWZpbmVkIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAT3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE11bHRpaG9wIGF0dGVtcHRlZABSZXF1aXJlZCBrZXkgbm90IGF2YWlsYWJsZQBLZXkgaGFzIGV4cGlyZWQAS2V5IGhhcyBiZWVuIHJldm9rZWQAS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNl");
  base64DecodeToExistingUint8Array(bufferView, 59346, "oAJOAOsBpwV+BSABdQYYA4YE+gC5AywD/QW3AYoBegO8BB4AzAaiAD0DSQPXAQAECACTBggBjwIGAioGXwK3AvoCWAPZBP0GygK9BeEFzQXcAhAGQAJ4AH0CZwNhBOwA5QMKBdQAzAM+Bk8CdgGYA68EAABEABACrgCuA2AA+gF3BCEF6wQrAGABQQGSAKkGowFuAk4B");
  base64DecodeToExistingUint8Array(bufferView, 59544, "EwQAAAAAAAAAACoC");
  base64DecodeToExistingUint8Array(bufferView, 59576, "JwQ5BEgE");
  base64DecodeToExistingUint8Array(bufferView, 59598, "kgQ=");
  base64DecodeToExistingUint8Array(bufferView, 59618, "OAVSBWAFUwYAAMoBAAAAAAAAAAC7BtsG6wYQBysHOwdQBw==");
  base64DecodeToExistingUint8Array(bufferView, 59668, "gN4oAIDITQAAp3YAADSeAIASxwCAn+4AAH4XAYBcQAGA6WcBAMiQAQBVuAEu");
  base64DecodeToExistingUint8Array(bufferView, 59728, "U3VuAE1vbgBUdWUAV2VkAFRodQBGcmkAU2F0AFN1bmRheQBNb25kYXkAVHVlc2RheQBXZWRuZXNkYXkAVGh1cnNkYXkARnJpZGF5AFNhdHVyZGF5AEphbgBGZWIATWFyAEFwcgBNYXkASnVuAEp1bABBdWcAU2VwAE9jdABOb3YARGVjAEphbnVhcnkARmVicnVhcnkATWFyY2gAQXByaWwATWF5AEp1bmUASnVseQBBdWd1c3QAU2VwdGVtYmVyAE9jdG9iZXIATm92ZW1iZXIARGVjZW1iZXIAQU0AUE0AJWEgJWIgJWUgJVQgJVkAJW0vJWQvJXkAJUg6JU06JVMAJUk6JU06JVMgJXAAAAAlbS8lZC8leQAwMTIzNDU2Nzg5ACVhICViICVlICVUICVZACVIOiVNOiVTAAAAAABeW3lZXQBeW25OXQB5ZXMAbm8=");
  base64DecodeToExistingUint8Array(bufferView, 60080, "GQALABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZAAoKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk=");
  base64DecodeToExistingUint8Array(bufferView, 60161, "DgAAAAAAAAAAGQALDRkZGQANAAACAAkOAAAACQAOAAAO");
  base64DecodeToExistingUint8Array(bufferView, 60219, "DA==");
  base64DecodeToExistingUint8Array(bufferView, 60231, "EwAAAAATAAAAAAkMAAAAAAAMAAAM");
  base64DecodeToExistingUint8Array(bufferView, 60277, "EA==");
  base64DecodeToExistingUint8Array(bufferView, 60289, "DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
  base64DecodeToExistingUint8Array(bufferView, 60335, "Eg==");
  base64DecodeToExistingUint8Array(bufferView, 60347, "EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
  base64DecodeToExistingUint8Array(bufferView, 60402, "GgAAABoaGgAAAAAAAAk=");
  base64DecodeToExistingUint8Array(bufferView, 60451, "FA==");
  base64DecodeToExistingUint8Array(bufferView, 60463, "FwAAAAAXAAAAAAkUAAAAAAAUAAAU");
  base64DecodeToExistingUint8Array(bufferView, 60509, "Fg==");
  base64DecodeToExistingUint8Array(bufferView, 60521, "FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG");
  base64DecodeToExistingUint8Array(bufferView, 60596, "FgE=");
  base64DecodeToExistingUint8Array(bufferView, 60636, "//////////8=");
  base64DecodeToExistingUint8Array(bufferView, 60704, "0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAAAAAAAIAAMADAADABAAAwAUAAMAGAADABwAAwAgAAMAJAADACgAAwAsAAMAMAADADQAAwA4AAMAPAADAEAAAwBEAAMASAADAEwAAwBQAAMAVAADAFgAAwBcAAMAYAADAGQAAwBoAAMAbAADAHAAAwB0AAMAeAADAHwAAwAAAALMBAADDAgAAwwMAAMMEAADDBQAAwwYAAMMHAADDCAAAwwkAAMMKAADDCwAAwwwAAMMNAADTDgAAww8AAMMAAAy7AQAMwwIADMMDAAzDBAAM2wAAAAAAAAAAAgAAAAMAAAAFAAAABwAAAAsAAAANAAAAEQAAABMAAAAXAAAAHQAAAB8AAAAlAAAAKQAAACsAAAAvAAAANQAAADsAAAA9AAAAQwAAAEcAAABJAAAATwAAAFMAAABZAAAAYQAAAGUAAABnAAAAawAAAG0AAABxAAAAfwAAAIMAAACJAAAAiwAAAJUAAACXAAAAnQAAAKMAAACnAAAArQAAALMAAAC1AAAAvwAAAMEAAADFAAAAxwAAANMAAAABAAAACwAAAA0AAAARAAAAEwAAABcAAAAdAAAAHwAAACUAAAApAAAAKwAAAC8AAAA1AAAAOwAAAD0AAABDAAAARwAAAEkAAABPAAAAUwAAAFkAAABhAAAAZQAAAGcAAABrAAAAbQAAAHEAAAB5AAAAfwAAAIMAAACJAAAAiwAAAI8AAACVAAAAlwAAAJ0AAACjAAAApwAAAKkAAACtAAAAswAAALUAAAC7AAAAvwAAAMEAAADFAAAAxwAAANEAAAAAAAAAWPIAABgBAAAZAQAAGgEAABsBAAAcAQAAHQEAAB4BAAAfAQAAIAEAACEBAAAiAQAAIwEAACQBAAAlAQAACAAAAAAAAACU8gAAJgEAACcBAAD4////+P///5TyAAAoAQAAKQEAABzxAAAw8QAABAAAAAAAAADc8gAAKgEAACsBAAD8/////P///9zyAAAsAQAALQEAAEzxAABg8QAAAAAAAGzzAAAuAQAALwEAADABAAAxAQAAMgEAADMBAAA0AQAANQEAADYBAAA3AQAAOAEAADkBAAA6AQAAOwEAAAgAAAAAAAAAqPMAADwBAAA9AQAA+P////j///+o8wAAPgEAAD8BAAC88QAA0PEAAAQAAAAAAAAA8PMAAEABAABBAQAA/P////z////w8wAAQgEAAEMBAADs8QAAAPIAAAAAAAAg8gAARAEAAEUBAAC4IAEALPIAAEj0AABOU3QzX18yOWJhc2ljX2lvc0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAAJAgAQBg8gAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAAAABQhAQCs8gAAAAAAAAEAAAAg8gAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAABQhAQD08gAAAAAAAAEAAAAg8gAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAAAAAAA08wAARgEAAEcBAAC4IAEAQPMAAEj0AABOU3QzX18yOWJhc2ljX2lvc0l3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAAJAgAQB08wAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFAAAAABQhAQDA8wAAAAAAAAEAAAA08wAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAABQhAQAI9AAAAAAAAAEAAAA08wAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAAAAAABI9AAASAEAAEkBAACQIAEAUPQAAE5TdDNfXzI4aW9zX2Jhc2VFAAAAKCQB");
  base64DecodeToExistingUint8Array(bufferView, 62576, "3hIElQAAAAD///////////////9w9AAAFAAAAEMuVVRGLTg=");
  base64DecodeToExistingUint8Array(bufferView, 62656, "hPQ=");
  base64DecodeToExistingUint8Array(bufferView, 62684, "GPUAABgBAABLAQAATAEAABsBAAAcAQAAHQEAAB4BAAAfAQAAIAEAAE0BAABOAQAATwEAACQBAAAlAQAAuCABACT1AABY8gAATlN0M19fMjEwX19zdGRpbmJ1ZkljRUUAAAAAAHz1AAAYAQAAUAEAAFEBAAAbAQAAHAEAAB0BAABSAQAAHwEAACABAAAhAQAAIgEAACMBAABTAQAAVAEAALggAQCI9QAAWPIAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSWNFRQAAAAAAAAAA5PUAAC4BAABVAQAAVgEAADEBAAAyAQAAMwEAADQBAAA1AQAANgEAAFcBAABYAQAAWQEAADoBAAA7AQAAuCABAPD1AABs8wAATlN0M19fMjEwX19zdGRpbmJ1Zkl3RUUAAAAAAEj2AAAuAQAAWgEAAFsBAAAxAQAAMgEAADMBAABcAQAANQEAADYBAAA3AQAAOAEAADkBAABdAQAAXgEAALggAQBU9gAAbPMAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSXdFRQAAAABMQ19DVFlQRQAAAABMQ19OVU1FUklDAABMQ19USU1FAAAAAABMQ19DT0xMQVRFAABMQ19NT05FVEFSWQBMQ19NRVNTQUdFUwDA+A==");
  base64DecodeToExistingUint8Array(bufferView, 63684, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
  base64DecodeToExistingUint8Array(bufferView, 64704, "0P4=");
  base64DecodeToExistingUint8Array(bufferView, 65236, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
  base64DecodeToExistingUint8Array(bufferView, 66256, "MDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJUk6JU06JVMgJXAlSDolTQ==");
  base64DecodeToExistingUint8Array(bufferView, 66320, "JQAAAG0AAAAvAAAAJQAAAGQAAAAvAAAAJQAAAHkAAAAlAAAAWQAAAC0AAAAlAAAAbQAAAC0AAAAlAAAAZAAAACUAAABJAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABwAAAAAAAAACUAAABIAAAAOgAAACUAAABN");
  base64DecodeToExistingUint8Array(bufferView, 66464, "JQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAAAAAAAA0BAHABAABxAQAAcgEAAAAAAABkDQEAcwEAAHQBAAByAQAAdQEAAHYBAAB3AQAAeAEAAHkBAAB6AQAAewEAAHwB");
  base64DecodeToExistingUint8Array(bufferView, 66576, "BAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABQIAAAUAAAAFAAAABQAAAAUAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAADAgAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAACCAAAAQgEAAEIBAABCAQAAQgEAAEIBAABCAQAAQgEAAEIBAABCAQAAQgEAAIIAAACCAAAAggAAAIIAAACCAAAAggAAAIIAAAAqAQAAKgEAACoBAAAqAQAAKgEAACoBAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAAIIAAACCAAAAggAAAIIAAACCAAAAggAAADIBAAAyAQAAMgEAADIBAAAyAQAAMgEAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAggAAAIIAAACCAAAAggAAAAQ=");
  base64DecodeToExistingUint8Array(bufferView, 67604, "vAwBAH0BAAB+AQAAcgEAAH8BAACAAQAAgQEAAIIBAACDAQAAhAEAAIUBAAAAAAAAmA0BAIYBAACHAQAAcgEAAIgBAACJAQAAigEAAIsBAACMAQAAAAAAALwNAQCNAQAAjgEAAHIBAACPAQAAkAEAAJEBAACSAQAAkwEAAHQAAAByAAAAdQAAAGUAAAAAAAAAZgAAAGEAAABsAAAAcwAAAGUAAAAAAAAAJQAAAG0AAAAvAAAAJQAAAGQAAAAvAAAAJQAAAHkAAAAAAAAAJQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAAAAAAJQAAAGEAAAAgAAAAJQAAAGIAAAAgAAAAJQAAAGQAAAAgAAAAJQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAgAAAAJQAAAFkAAAAAAAAAJQAAAEkAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAgAAAAJQAAAHA=");
  base64DecodeToExistingUint8Array(bufferView, 67980, "nAkBAJQBAACVAQAAcgEAALggAQCoCQEA7B0BAE5TdDNfXzI2bG9jYWxlNWZhY2V0RQAAAAAAAAAECgEAlAEAAJYBAAByAQAAlwEAAJgBAACZAQAAmgEAAJsBAACcAQAAnQEAAJ4BAACfAQAAoAEAAKEBAACiAQAAFCEBACQKAQAAAAAAAgAAAJwJAQACAAAAOAoBAAIAAABOU3QzX18yNWN0eXBlSXdFRQAAAJAgAQBACgEATlN0M19fMjEwY3R5cGVfYmFzZUUAAAAAAAAAAIgKAQCUAQAAowEAAHIBAACkAQAApQEAAKYBAACnAQAAqAEAAKkBAACqAQAAFCEBAKgKAQAAAAAAAgAAAJwJAQACAAAAzAoBAAIAAABOU3QzX18yN2NvZGVjdnRJY2MxMV9fbWJzdGF0ZV90RUUAAACQIAEA1AoBAE5TdDNfXzIxMmNvZGVjdnRfYmFzZUUAAAAAAAAcCwEAlAEAAKsBAAByAQAArAEAAK0BAACuAQAArwEAALABAACxAQAAsgEAABQhAQA8CwEAAAAAAAIAAACcCQEAAgAAAMwKAQACAAAATlN0M19fMjdjb2RlY3Z0SURzYzExX19tYnN0YXRlX3RFRQAAAAAAAJALAQCUAQAAswEAAHIBAAC0AQAAtQEAALYBAAC3AQAAuAEAALkBAAC6AQAAFCEBALALAQAAAAAAAgAAAJwJAQACAAAAzAoBAAIAAABOU3QzX18yN2NvZGVjdnRJRHNEdTExX19tYnN0YXRlX3RFRQAAAAAABAwBAJQBAAC7AQAAcgEAALwBAAC9AQAAvgEAAL8BAADAAQAAwQEAAMIBAAAUIQEAJAwBAAAAAAACAAAAnAkBAAIAAADMCgEAAgAAAE5TdDNfXzI3Y29kZWN2dElEaWMxMV9fbWJzdGF0ZV90RUUAAAAAAAB4DAEAlAEAAMMBAAByAQAAxAEAAMUBAADGAQAAxwEAAMgBAADJAQAAygEAABQhAQCYDAEAAAAAAAIAAACcCQEAAgAAAMwKAQACAAAATlN0M19fMjdjb2RlY3Z0SURpRHUxMV9fbWJzdGF0ZV90RUUAFCEBANwMAQAAAAAAAgAAAJwJAQACAAAAzAoBAAIAAABOU3QzX18yN2NvZGVjdnRJd2MxMV9fbWJzdGF0ZV90RUUAAAC4IAEADA0BAJwJAQBOU3QzX18yNmxvY2FsZTVfX2ltcEUAAAC4IAEAMA0BAJwJAQBOU3QzX18yN2NvbGxhdGVJY0VFALggAQBQDQEAnAkBAE5TdDNfXzI3Y29sbGF0ZUl3RUUAFCEBAIQNAQAAAAAAAgAAAJwJAQACAAAAOAoBAAIAAABOU3QzX18yNWN0eXBlSWNFRQAAALggAQCkDQEAnAkBAE5TdDNfXzI4bnVtcHVuY3RJY0VFAAAAALggAQDIDQEAnAkBAE5TdDNfXzI4bnVtcHVuY3RJd0VFAAAAAAAAAAAkDQEAywEAAMwBAAByAQAAzQEAAM4BAADPAQAAAAAAAEQNAQDQAQAA0QEAAHIBAADSAQAA0wEAANQBAAAAAAAAYA4BAJQBAADVAQAAcgEAANYBAADXAQAA2AEAANkBAADaAQAA2wEAANwBAADdAQAA3gEAAN8BAADgAQAAFCEBAIAOAQAAAAAAAgAAAJwJAQACAAAAxA4BAAAAAABOU3QzX18yN251bV9nZXRJY05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFABQhAQDcDgEAAAAAAAEAAAD0DgEAAAAAAE5TdDNfXzI5X19udW1fZ2V0SWNFRQAAAJAgAQD8DgEATlN0M19fMjE0X19udW1fZ2V0X2Jhc2VFAAAAAAAAAABYDwEAlAEAAOEBAAByAQAA4gEAAOMBAADkAQAA5QEAAOYBAADnAQAA6AEAAOkBAADqAQAA6wEAAOwBAAAUIQEAeA8BAAAAAAACAAAAnAkBAAIAAAC8DwEAAAAAAE5TdDNfXzI3bnVtX2dldEl3TlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFRUUAFCEBANQPAQAAAAAAAQAAAPQOAQAAAAAATlN0M19fMjlfX251bV9nZXRJd0VFAAAAAAAAACAQAQCUAQAA7QEAAHIBAADuAQAA7wEAAPABAADxAQAA8gEAAPMBAAD0AQAA9QEAABQhAQBAEAEAAAAAAAIAAACcCQEAAgAAAIQQAQAAAAAATlN0M19fMjdudW1fcHV0SWNOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQAUIQEAnBABAAAAAAABAAAAtBABAAAAAABOU3QzX18yOV9fbnVtX3B1dEljRUUAAACQIAEAvBABAE5TdDNfXzIxNF9fbnVtX3B1dF9iYXNlRQAAAAAAAAAADBEBAJQBAAD2AQAAcgEAAPcBAAD4AQAA+QEAAPoBAAD7AQAA/AEAAP0BAAD+AQAAFCEBACwRAQAAAAAAAgAAAJwJAQACAAAAcBEBAAAAAABOU3QzX18yN251bV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFABQhAQCIEQEAAAAAAAEAAAC0EAEAAAAAAE5TdDNfXzI5X19udW1fcHV0SXdFRQAAAAAAAAD0EQEA/wEAAAACAAByAQAAAQIAAAICAAADAgAABAIAAAUCAAAGAgAABwIAAPj////0EQEACAIAAAkCAAAKAgAACwIAAAwCAAANAgAADgIAABQhAQAcEgEAAAAAAAMAAACcCQEAAgAAAGQSAQACAAAAgBIBAAAIAABOU3QzX18yOHRpbWVfZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQAAAACQIAEAbBIBAE5TdDNfXzI5dGltZV9iYXNlRQAAkCABAIgSAQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUljRUUAAAAAAAAAABMBAA8CAAAQAgAAcgEAABECAAASAgAAEwIAABQCAAAVAgAAFgIAABcCAAD4////ABMBABgCAAAZAgAAGgIAABsCAAAcAgAAHQIAAB4CAAAUIQEAKBMBAAAAAAADAAAAnAkBAAIAAABkEgEAAgAAAHATAQAACAAATlN0M19fMjh0aW1lX2dldEl3TlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFRUUAAAAAkCABAHgTAQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUl3RUUAAAAAAAAAtBMBAB8CAAAgAgAAcgEAACECAAAUIQEA1BMBAAAAAAACAAAAnAkBAAIAAAAcFAEAAAgAAE5TdDNfXzI4dGltZV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAAAAAJAgAQAkFAEATlN0M19fMjEwX190aW1lX3B1dEUAAAAAAAAAAFQUAQAiAgAAIwIAAHIBAAAkAgAAFCEBAHQUAQAAAAAAAgAAAJwJAQACAAAAHBQBAAAIAABOU3QzX18yOHRpbWVfcHV0SXdOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQAAAAAAAAAA9BQBAJQBAAAlAgAAcgEAACYCAAAnAgAAKAIAACkCAAAqAgAAKwIAACwCAAAtAgAALgIAABQhAQAUFQEAAAAAAAIAAACcCQEAAgAAADAVAQACAAAATlN0M19fMjEwbW9uZXlwdW5jdEljTGIwRUVFAJAgAQA4FQEATlN0M19fMjEwbW9uZXlfYmFzZUUAAAAAAAAAAIgVAQCUAQAALwIAAHIBAAAwAgAAMQIAADICAAAzAgAANAIAADUCAAA2AgAANwIAADgCAAAUIQEAqBUBAAAAAAACAAAAnAkBAAIAAAAwFQEAAgAAAE5TdDNfXzIxMG1vbmV5cHVuY3RJY0xiMUVFRQAAAAAA/BUBAJQBAAA5AgAAcgEAADoCAAA7AgAAPAIAAD0CAAA+AgAAPwIAAEACAABBAgAAQgIAABQhAQAcFgEAAAAAAAIAAACcCQEAAgAAADAVAQACAAAATlN0M19fMjEwbW9uZXlwdW5jdEl3TGIwRUVFAAAAAABwFgEAlAEAAEMCAAByAQAARAIAAEUCAABGAgAARwIAAEgCAABJAgAASgIAAEsCAABMAgAAFCEBAJAWAQAAAAAAAgAAAJwJAQACAAAAMBUBAAIAAABOU3QzX18yMTBtb25leXB1bmN0SXdMYjFFRUUAAAAAAMgWAQCUAQAATQIAAHIBAABOAgAATwIAABQhAQDoFgEAAAAAAAIAAACcCQEAAgAAADAXAQAAAAAATlN0M19fMjltb25leV9nZXRJY05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAAAAkCABADgXAQBOU3QzX18yMTFfX21vbmV5X2dldEljRUUAAAAAAAAAAHAXAQCUAQAAUAIAAHIBAABRAgAAUgIAABQhAQCQFwEAAAAAAAIAAACcCQEAAgAAANgXAQAAAAAATlN0M19fMjltb25leV9nZXRJd05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAkCABAOAXAQBOU3QzX18yMTFfX21vbmV5X2dldEl3RUUAAAAAAAAAABgYAQCUAQAAUwIAAHIBAABUAgAAVQIAABQhAQA4GAEAAAAAAAIAAACcCQEAAgAAAIAYAQAAAAAATlN0M19fMjltb25leV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAAAAkCABAIgYAQBOU3QzX18yMTFfX21vbmV5X3B1dEljRUUAAAAAAAAAAMAYAQCUAQAAVgIAAHIBAABXAgAAWAIAABQhAQDgGAEAAAAAAAIAAACcCQEAAgAAACgZAQAAAAAATlN0M19fMjltb25leV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAkCABADAZAQBOU3QzX18yMTFfX21vbmV5X3B1dEl3RUUAAAAAAAAAAGwZAQCUAQAAWQIAAHIBAABaAgAAWwIAAFwCAAAUIQEAjBkBAAAAAAACAAAAnAkBAAIAAACkGQEAAgAAAE5TdDNfXzI4bWVzc2FnZXNJY0VFAAAAAJAgAQCsGQEATlN0M19fMjEzbWVzc2FnZXNfYmFzZUUAAAAAAOQZAQCUAQAAXQIAAHIBAABeAgAAXwIAAGACAAAUIQEABBoBAAAAAAACAAAAnAkBAAIAAACkGQEAAgAAAE5TdDNfXzI4bWVzc2FnZXNJd0VFAAAAAFMAAAB1AAAAbgAAAGQAAABhAAAAeQAAAAAAAABNAAAAbwAAAG4AAABkAAAAYQAAAHkAAAAAAAAAVAAAAHUAAABlAAAAcwAAAGQAAABhAAAAeQAAAAAAAABXAAAAZQAAAGQAAABuAAAAZQAAAHMAAABkAAAAYQAAAHkAAAAAAAAAVAAAAGgAAAB1AAAAcgAAAHMAAABkAAAAYQAAAHkAAAAAAAAARgAAAHIAAABpAAAAZAAAAGEAAAB5AAAAAAAAAFMAAABhAAAAdAAAAHUAAAByAAAAZAAAAGEAAAB5AAAAAAAAAFMAAAB1AAAAbgAAAAAAAABNAAAAbwAAAG4AAAAAAAAAVAAAAHUAAABlAAAAAAAAAFcAAABlAAAAZAAAAAAAAABUAAAAaAAAAHUAAAAAAAAARgAAAHIAAABpAAAAAAAAAFMAAABhAAAAdAAAAAAAAABKAAAAYQAAAG4AAAB1AAAAYQAAAHIAAAB5AAAAAAAAAEYAAABlAAAAYgAAAHIAAAB1AAAAYQAAAHIAAAB5AAAAAAAAAE0AAABhAAAAcgAAAGMAAABoAAAAAAAAAEEAAABwAAAAcgAAAGkAAABsAAAAAAAAAE0AAABhAAAAeQAAAAAAAABKAAAAdQAAAG4AAABlAAAAAAAAAEoAAAB1AAAAbAAAAHkAAAAAAAAAQQAAAHUAAABnAAAAdQAAAHMAAAB0AAAAAAAAAFMAAABlAAAAcAAAAHQAAABlAAAAbQAAAGIAAABlAAAAcgAAAAAAAABPAAAAYwAAAHQAAABvAAAAYgAAAGUAAAByAAAAAAAAAE4AAABvAAAAdgAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEQAAABlAAAAYwAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEoAAABhAAAAbgAAAAAAAABGAAAAZQAAAGIAAAAAAAAATQAAAGEAAAByAAAAAAAAAEEAAABwAAAAcgAAAAAAAABKAAAAdQAAAG4AAAAAAAAASgAAAHUAAABsAAAAAAAAAEEAAAB1AAAAZwAAAAAAAABTAAAAZQAAAHAAAAAAAAAATwAAAGMAAAB0AAAAAAAAAE4AAABvAAAAdgAAAAAAAABEAAAAZQAAAGMAAAAAAAAAQQAAAE0AAAAAAAAAUAAAAE0=");
  base64DecodeToExistingUint8Array(bufferView, 73108, "gBIBAAgCAAAJAgAACgIAAAsCAAAMAgAADQIAAA4CAAAAAAAAcBMBABgCAAAZAgAAGgIAABsCAAAcAgAAHQIAAB4CAAAAAAAA7B0BABYAAABhAgAAYgIAAJAgAQD0HQEATlN0M19fMjE0X19zaGFyZWRfY291bnRFAAAAABQhAQAoHgEAAAAAAAEAAADsHQEAAAAAAE5TdDNfXzIxOV9fc2hhcmVkX3dlYWtfY291bnRFAAAAuCABAFQeAQC0IgEATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAAuCABAIQeAQBIHgEATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAuCABALQeAQBIHgEATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAAuCABAOQeAQCoHgEATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UAuCABABQfAQBIHgEATjEwX19jeHhhYml2MTIwX19mdW5jdGlvbl90eXBlX2luZm9FAAAAALggAQBIHwEAqB4BAE4xMF9fY3h4YWJpdjEyOV9fcG9pbnRlcl90b19tZW1iZXJfdHlwZV9pbmZvRQAAAAAAAACUHwEAYwIAAGQCAABlAgAAZgIAAGcCAAC4IAEAoB8BAEgeAQBOMTBfX2N4eGFiaXYxMjNfX2Z1bmRhbWVudGFsX3R5cGVfaW5mb0UAgB8BANAfAQB2AAAAgB8BANwfAQBEbgAAgB8BAOgfAQBiAAAAgB8BAPQfAQBjAAAAgB8BAAAgAQBoAAAAgB8BAAwgAQBhAAAAgB8BABggAQBzAAAAgB8BACQgAQB0AAAAgB8BADAgAQBpAAAAgB8BADwgAQBqAAAAgB8BAEggAQBsAAAAgB8BAFQgAQBtAAAAgB8BAGAgAQB4AAAAgB8BAGwgAQB5AAAAgB8BAHggAQBmAAAAgB8BAIQgAQBkAAAAAAAAAHgeAQBjAgAAaAIAAGUCAABmAgAAaQIAAGoCAABrAgAAbAIAAAAAAADYIAEAYwIAAG0CAABlAgAAZgIAAGkCAABuAgAAbwIAAHACAAC4IAEA5CABAHgeAQBOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAAAAAAADQhAQBjAgAAcQIAAGUCAABmAgAAaQIAAHICAABzAgAAdAIAALggAQBAIQEAeB4BAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAAAAAAAA2B4BAGMCAAB1AgAAZQIAAGYCAAB2AgAAAAAAANghAQANAAAAdwIAAHgCAAAAAAAA9CEBAA0AAAB5AgAAegIAAAAAAADAIQEADQAAAHsCAAB8AgAAkCABAMghAQBTdDlleGNlcHRpb24AAAAAuCABAOQhAQDAIQEAU3Q5YmFkX2FsbG9jAAAAALggAQAAIgEA2CEBAFN0MjBiYWRfYXJyYXlfbmV3X2xlbmd0aAAAAAAAAAAAMCIBAAwAAAB9AgAAfgIAALggAQA8IgEAwCEBAFN0MTFsb2dpY19lcnJvcgAAAAAAYCIBAAwAAAB/AgAAfgIAALggAQBsIgEAMCIBAFN0MTJsZW5ndGhfZXJyb3IAAAAAAAAAAJQiAQAMAAAAgAIAAH4CAAC4IAEAoCIBADAiAQBTdDEyb3V0X29mX3JhbmdlAAAAAJAgAQC8IgEAU3Q5dHlwZV9pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 74448, "AQAAACEEAADoBgAAzQsAAK8NAAD//////f////7///8AIAAAAAAAAAU=");
  base64DecodeToExistingUint8Array(bufferView, 74500, "EAE=");
  base64DecodeToExistingUint8Array(bufferView, 74524, "DgEAAA0BAAAgMwE=");
  base64DecodeToExistingUint8Array(bufferView, 74548, "Ag==");
  base64DecodeToExistingUint8Array(bufferView, 74564, "//////////8=");
  base64DecodeToExistingUint8Array(bufferView, 74632, "+CIBAAAAAAAF");
  base64DecodeToExistingUint8Array(bufferView, 74652, "EgE=");
  base64DecodeToExistingUint8Array(bufferView, 74676, "DgEAABMBAAAoMwEAAAQ=");
  base64DecodeToExistingUint8Array(bufferView, 74700, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 74716, "/////wo=");
  base64DecodeToExistingUint8Array(bufferView, 74784, "kCMBAGBJAgAJ");
  base64DecodeToExistingUint8Array(bufferView, 74804, "EAE=");
  base64DecodeToExistingUint8Array(bufferView, 74824, "DwEAAAAAAAANAQAAODkBAAAE");
  base64DecodeToExistingUint8Array(bufferView, 74868, "/////w==");
  base64DecodeToExistingUint8Array(bufferView, 74936, "JW0vJWQvJXkAAAAIJUg6JU06JVMAAAAI");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(134217728);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var exit = env.exit;
 var emscripten_console_error = env.emscripten_console_error;
 var emscripten_console_warn = env.emscripten_console_warn;
 var invoke_ii = env.invoke_ii;
 var invoke_vi = env.invoke_vi;
 var invoke_viiii = env.invoke_viiii;
 var invoke_viii = env.invoke_viii;
 var invoke_vii = env.invoke_vii;
 var invoke_iii = env.invoke_iii;
 var invoke_iiii = env.invoke_iiii;
 var __cxa_throw = env.__cxa_throw;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var _emval_array_to_memory_view = env._emval_array_to_memory_view;
 var _emval_new_object = env._emval_new_object;
 var _emval_new_array = env._emval_new_array;
 var _emval_set_property = env._emval_set_property;
 var _emval_decref = env._emval_decref;
 var _embind_finalize_value_object = env._embind_finalize_value_object;
 var _embind_register_class = env._embind_register_class;
 var _embind_register_function = env._embind_register_function;
 var _embind_register_value_object = env._embind_register_value_object;
 var _embind_register_value_object_field = env._embind_register_value_object_field;
 var _embind_register_constant = env._embind_register_constant;
 var _embind_register_optional = env._embind_register_optional;
 var _embind_register_class_constructor = env._embind_register_class_constructor;
 var _embind_register_class_function = env._embind_register_class_function;
 var _emval_create_invoker = env._emval_create_invoker;
 var _emval_invoke = env._emval_invoke;
 var _emval_run_destructors = env._emval_run_destructors;
 var _emval_get_property = env._emval_get_property;
 var _emval_new_cstring = env._emval_new_cstring;
 var _emval_incref = env._emval_incref;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var _abort_js = env._abort_js;
 var emscripten_date_now = env.emscripten_date_now;
 var __syscall_openat = env.__syscall_openat;
 var __syscall_fcntl64 = env.__syscall_fcntl64;
 var __syscall_ioctl = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var __wasi_fd_read = wasi_snapshot_preview1.fd_read;
 var __wasi_fd_close = wasi_snapshot_preview1.fd_close;
 var __wasi_environ_sizes_get = wasi_snapshot_preview1.environ_sizes_get;
 var __wasi_environ_get = wasi_snapshot_preview1.environ_get;
 var _tzset_js = env._tzset_js;
 var __syscall_unlinkat = env.__syscall_unlinkat;
 var __syscall_rmdir = env.__syscall_rmdir;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var _emscripten_throw_longjmp = env._emscripten_throw_longjmp;
 var legalimport$_embind_register_bigint = env._embind_register_bigint;
 var legalimport$__wasi_fd_seek = wasi_snapshot_preview1.fd_seek;
 var legalimport$_localtime_js = env._localtime_js;
 var __stack_pointer = 149856;
 var tempRet0 = 0;
 var __stack_end = 0;
 var __stack_base = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  emscripten_stack_init();
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block : {
   if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0) | 0) {
    break block
   }
   $1 = emscripten_builtin_malloc((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
   HEAP32[19564] = $1;
   if (!$1) {
    break block
   }
   $1 = emscripten_builtin_malloc(HEAP32[$0 + 8 >> 2]);
   if ($1) {
    $2 = HEAP32[19564];
    HEAP32[$2 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] = 0;
    if (!(__wasi_environ_get($2 | 0, $1 | 0) | 0)) {
     break block
    }
   }
   HEAP32[19564] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
  if (!HEAPU8[82277]) {
   $1 = HEAP32[15641];
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   $0 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____basic_streambuf_28_29(81924);
   HEAP32[$0 + 40 >> 2] = 81980;
   HEAP32[$0 + 32 >> 2] = $1;
   HEAP32[$0 >> 2] = 62688;
   HEAP8[$0 + 52 | 0] = 0;
   HEAP32[$0 + 48 >> 2] = -1;
   $3 = $2 + 12 | 0;
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn200100_5d_28_29_20const($3, $0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3);
   std____2__locale___locale_28_29($3);
   __stack_pointer = $2 + 16 | 0;
   $0 = std____2__basic_ios_char_2c_20std____2__char_traits_char____basic_ios_5babi_nn200100_5d_28_29(81216);
   HEAP32[20302] = 61724;
   HEAP32[$0 >> 2] = 61744;
   HEAP32[20303] = 0;
   std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(HEAP32[15428] + 81208 | 0, 81924);
   $3 = HEAP32[14357];
   std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(81988, $3, 82036);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(81392, 81988);
   $4 = HEAP32[14356];
   std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(82044, $4, 82092);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(81568, 82044);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(81744, HEAP32[(HEAP32[HEAP32[20392] - 12 >> 2] + 81568 | 0) + 24 >> 2]);
   HEAP32[(HEAP32[HEAP32[20302] - 12 >> 2] + 81208 | 0) + 72 >> 2] = 81392;
   std____2__ios_base__setf_5babi_nn200100_5d_28unsigned_20int_29(HEAP32[HEAP32[20392] - 12 >> 2] + 81568 | 0);
   HEAP32[(HEAP32[HEAP32[20392] - 12 >> 2] + 81568 | 0) + 72 >> 2] = 81392;
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   $0 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____basic_streambuf_28_29(82100);
   HEAP32[$0 + 40 >> 2] = 82156;
   HEAP32[$0 + 32 >> 2] = $1;
   HEAP32[$0 >> 2] = 62892;
   HEAP8[$0 + 52 | 0] = 0;
   HEAP32[$0 + 48 >> 2] = -1;
   $1 = $2 + 12 | 0;
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn200100_5d_28_29_20const($1, $0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1);
   std____2__locale___locale_28_29($1);
   __stack_pointer = $2 + 16 | 0;
   $0 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ios_5babi_nn200100_5d_28_29(81308);
   HEAP32[20325] = 61884;
   HEAP32[$0 >> 2] = 61904;
   HEAP32[20326] = 0;
   std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(HEAP32[15468] + 81300 | 0, 82100);
   std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(82164, $3, 82212);
   std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29(81480, 82164);
   std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(82220, $4, 82268);
   std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29(81656, 82220);
   std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29(81832, HEAP32[(HEAP32[HEAP32[20414] - 12 >> 2] + 81656 | 0) + 24 >> 2]);
   HEAP32[(HEAP32[HEAP32[20325] - 12 >> 2] + 81300 | 0) + 72 >> 2] = 81480;
   std____2__ios_base__setf_5babi_nn200100_5d_28unsigned_20int_29(HEAP32[HEAP32[20414] - 12 >> 2] + 81656 | 0);
   HEAP32[(HEAP32[HEAP32[20414] - 12 >> 2] + 81656 | 0) + 72 >> 2] = 81480;
   HEAP8[82277] = 1;
  }
  HEAP32[19509] = 0;
  HEAP32[19510] = 0;
  HEAP32[19507] = 0;
  HEAP32[19508] = 0;
  HEAP32[19511] = 1065353216;
  HEAP32[19514] = 0;
  HEAP32[19515] = 0;
  HEAP32[19512] = 0;
  HEAP32[19513] = 0;
  HEAP32[19516] = 1065353216;
  HEAP32[19532] = 0;
  HEAP32[19531] = 37;
  embind_init_constant_bindings_28_29();
  HEAP32[19532] = HEAP32[19560];
  HEAP32[19560] = 78124;
  HEAP32[19561] = 134;
  HEAP32[19562] = 0;
  embind_init_builtin_28_29();
  HEAP32[19562] = HEAP32[19560];
  HEAP32[19560] = 78244;
  HEAP32[19643] = 78292;
  HEAP32[19633] = 65536;
  HEAP32[19632] = 149856;
  HEAP32[19625] = 42;
  HEAP32[19634] = HEAP32[18620];
 }
 
 function arSetDebugMode($0, $1) {
  if (!$0) {
   return
  }
  block : {
   if (HEAP32[$0 >> 2] == ($1 | 0)) {
    break block
   }
   HEAP32[$0 >> 2] = $1;
   if (!$1) {
    emscripten_builtin_free(HEAP32[$0 + 4834148 >> 2]);
    HEAP32[$0 + 4834148 >> 2] = 0;
    break block;
   }
   $1 = $0;
   $0 = emscripten_builtin_malloc(Math_imul(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 36 >> 2]));
   HEAP32[$1 + 4834148 >> 2] = $0;
   if ($0) {
    break block
   }
   arLog(0, 3, 1733, 0);
   exit(1);
   wasm2js_trap();
  }
 }
 
 function arSetLabelingThreshMode($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block : {
   if (!$0) {
    $4 = -1;
    break block;
   }
   if (HEAP32[$0 + 7062388 >> 2] == ($1 | 0)) {
    break block
   }
   $2 = HEAP32[$0 + 7062408 >> 2];
   if ($2) {
    arImageProcFinal($2);
    HEAP32[$0 + 7062408 >> 2] = 0;
   }
   block1 : {
    block4 : {
     switch ($1 | 0) {
     case 1:
     case 2:
     case 3:
      $5 = HEAP32[$0 + 36 >> 2];
      $6 = HEAP32[$0 + 40 >> 2];
      $2 = emscripten_builtin_malloc(2064);
      if ($2) {
       HEAP32[$2 + 8 >> 2] = $6;
       HEAP32[$2 + 4 >> 2] = $5;
       HEAP32[$2 >> 2] = 0;
      }
      HEAP32[$0 + 7062408 >> 2] = $2;
      break block1;
     case 4:
      HEAP32[$0 + 7062400 >> 2] = 1;
      HEAP32[$0 + 7062404 >> 2] = 1;
      $1 = 4;
      break block1;
     case 0:
      break block1;
     default:
      break block4;
     };
    }
    $1 = 0;
    arLog(0, 3, 2671, 0);
   }
   HEAP32[$0 + 7062388 >> 2] = $1;
   if (HEAP32[$0 >> 2] != 1) {
    break block
   }
   HEAP32[$3 >> 2] = HEAP32[($1 << 2) + 6272 >> 2];
   arLog(0, 3, 6838, $3);
  }
  __stack_pointer = $3 + 16 | 0;
  return $4;
 }
 
 function arImageProcFinal($0) {
  if ($0) {
   emscripten_builtin_free(HEAP32[$0 >> 2]);
   emscripten_builtin_free($0);
  }
 }
 
 function arUtilMatMul($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $8 = $1 - -64 | 0;
  $9 = $1 + 32 | 0;
  while (1) {
   if (($6 | 0) != 3) {
    $3 = $6 << 5;
    $7 = $3 + $2 | 0;
    $3 = $0 + $3 | 0;
    $4 = 0;
    while (1) {
     if (($4 | 0) != 4) {
      $5 = $4 << 3;
      HEAPF64[$5 + $7 >> 3] = HEAPF64[$3 + 16 >> 3] * HEAPF64[$5 + $8 >> 3] + (HEAPF64[$3 >> 3] * HEAPF64[$1 + $5 >> 3] + HEAPF64[$3 + 8 >> 3] * HEAPF64[$5 + $9 >> 3]);
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    };
    HEAPF64[$7 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] + HEAPF64[$7 + 24 >> 3];
    $6 = $6 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function arUtilMatMuldff($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  $8 = $1 + 32 | 0;
  $9 = $1 + 16 | 0;
  while (1) {
   if (($3 | 0) != 3) {
    $7 = ($3 << 4) + $2 | 0;
    $4 = ($3 << 5) + $0 | 0;
    $10 = Math_fround(HEAPF64[$4 + 16 >> 3]);
    $11 = Math_fround(HEAPF64[$4 + 8 >> 3]);
    $12 = Math_fround(HEAPF64[$4 >> 3]);
    $5 = 0;
    while (1) {
     if (($5 | 0) != 4) {
      $6 = $5 << 2;
      HEAPF32[$6 + $7 >> 2] = Math_fround($10 * HEAPF32[$6 + $8 >> 2]) + Math_fround(Math_fround($12 * HEAPF32[$1 + $6 >> 2]) + Math_fround(HEAPF32[$6 + $9 >> 2] * $11));
      $5 = $5 + 1 | 0;
      continue;
     }
     break;
    };
    HEAPF32[$7 + 12 >> 2] = HEAPF32[$7 + 12 >> 2] + Math_fround(HEAPF64[$4 + 24 >> 3]);
    $3 = $3 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function arUtilMatMulf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $8 = $1 + 32 | 0;
  $9 = $1 + 16 | 0;
  while (1) {
   if (($6 | 0) != 3) {
    $3 = $6 << 4;
    $7 = $3 + $2 | 0;
    $3 = $0 + $3 | 0;
    $4 = 0;
    while (1) {
     if (($4 | 0) != 4) {
      $5 = $4 << 2;
      HEAPF32[$5 + $7 >> 2] = Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$5 + $8 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$1 + $5 >> 2]) + Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$5 + $9 >> 2]));
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    };
    HEAPF32[$7 + 12 >> 2] = HEAPF32[$3 + 12 >> 2] + HEAPF32[$7 + 12 >> 2];
    $6 = $6 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function arUtilQuatNorm($0) {
  var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
  $1 = HEAPF64[$0 + 24 >> 3];
  $2 = HEAPF64[$0 + 16 >> 3];
  $3 = HEAPF64[$0 >> 3];
  $4 = HEAPF64[$0 + 8 >> 3];
  $5 = $1 * $1 + ($2 * $2 + ($3 * $3 + $4 * $4));
  if ($5 == 0.0) {
   return
  }
  $6 = $1;
  $1 = Math_sqrt($5);
  HEAPF64[$0 + 24 >> 3] = $6 / $1;
  HEAPF64[$0 + 16 >> 3] = $2 / $1;
  HEAPF64[$0 + 8 >> 3] = $4 / $1;
  HEAPF64[$0 >> 3] = $3 / $1;
 }
 
 function arUtilGetPixelSize($0) {
  return $0 >>> 0 <= 14 ? HEAP32[($0 << 2) + 17548 >> 2] : 0;
 }
 
 function arMatrixAlloc($0, $1) {
  return $1187($0, $1, 3);
 }
 
 function arMatrixAllocf($0, $1) {
  return $1187($0, $1, 2);
 }
 
 function arMatrixAllocMul($0, $1) {
  var $2 = 0;
  $2 = arMatrixAlloc(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  if ($2) {
   if ((arMatrixMul($2, $0, $1) | 0) >= 0) {
    return $2
   }
   arImageProcFinal($2);
  }
  return 0;
 }
 
 function arMatrixAllocMulf($0, $1) {
  var $2 = 0;
  $2 = arMatrixAllocf(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  if ($2) {
   if ((arMatrixMulf($2, $0, $1) | 0) >= 0) {
    return $2
   }
   arImageProcFinal($2);
  }
  return 0;
 }
 
 function arMatrixAllocTrans($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = arMatrixAlloc(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
  if ($2) {
   $7 = -1;
   block : {
    $3 = HEAP32[$2 + 4 >> 2];
    if (($3 | 0) != HEAP32[$0 + 8 >> 2]) {
     break block
    }
    $1 = HEAP32[$2 + 8 >> 2];
    if (($1 | 0) != HEAP32[$0 + 4 >> 2]) {
     break block
    }
    $7 = 0;
    $8 = ($3 | 0) > 0 ? $3 : 0;
    $9 = ($1 | 0) > 0 ? $1 : 0;
    $4 = HEAP32[$2 >> 2];
    $1 = 0;
    while (1) {
     if (($1 | 0) == ($8 | 0)) {
      break block
     }
     $5 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
     $6 = 0;
     while (1) {
      if (($6 | 0) != ($9 | 0)) {
       HEAPF64[$4 >> 3] = HEAPF64[$5 >> 3];
       $6 = $6 + 1 | 0;
       $4 = $4 + 8 | 0;
       $5 = ($3 << 3) + $5 | 0;
       continue;
      }
      break;
     };
     $1 = $1 + 1 | 0;
     continue;
    };
   }
   if (($7 | 0) >= 0) {
    return $2
   }
   arImageProcFinal($2);
  }
  return 0;
 }
 
 function arMatrixMul($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $11 = -1;
  block : {
   $4 = HEAP32[$1 + 8 >> 2];
   if (($4 | 0) != HEAP32[$2 + 4 >> 2]) {
    break block
   }
   $3 = HEAP32[$0 + 4 >> 2];
   if (($3 | 0) != HEAP32[$1 + 4 >> 2]) {
    break block
   }
   $5 = HEAP32[$0 + 8 >> 2];
   if (($5 | 0) != HEAP32[$2 + 8 >> 2]) {
    break block
   }
   $11 = 0;
   $12 = ($3 | 0) > 0 ? $3 : 0;
   $13 = ($5 | 0) > 0 ? $5 : 0;
   $14 = ($4 | 0) > 0 ? $4 : 0;
   $3 = HEAP32[$0 >> 2];
   while (1) {
    if (($7 | 0) == ($12 | 0)) {
     break block
    }
    $6 = 0;
    $15 = Math_imul($4, $7) << 3;
    while (1) {
     if (($6 | 0) != ($13 | 0)) {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $8 = HEAP32[$2 >> 2] + ($6 << 3) | 0;
      $9 = HEAP32[$1 >> 2] + $15 | 0;
      $0 = 0;
      $10 = 0.0;
      while (1) {
       if (($0 | 0) != ($14 | 0)) {
        $10 = HEAPF64[$9 >> 3] * HEAPF64[$8 >> 3] + $10;
        HEAPF64[$3 >> 3] = $10;
        $0 = $0 + 1 | 0;
        $9 = $9 + 8 | 0;
        $8 = ($5 << 3) + $8 | 0;
        continue;
       }
       break;
      };
      $6 = $6 + 1 | 0;
      $3 = $3 + 8 | 0;
      continue;
     }
     break;
    };
    $7 = $7 + 1 | 0;
    continue;
   };
  }
  return $11;
 }
 
 function arMatrixMulf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $11 = -1;
  block : {
   $4 = HEAP32[$1 + 8 >> 2];
   if (($4 | 0) != HEAP32[$2 + 4 >> 2]) {
    break block
   }
   $3 = HEAP32[$0 + 4 >> 2];
   if (($3 | 0) != HEAP32[$1 + 4 >> 2]) {
    break block
   }
   $5 = HEAP32[$0 + 8 >> 2];
   if (($5 | 0) != HEAP32[$2 + 8 >> 2]) {
    break block
   }
   $11 = 0;
   $12 = ($3 | 0) > 0 ? $3 : 0;
   $13 = ($5 | 0) > 0 ? $5 : 0;
   $14 = ($4 | 0) > 0 ? $4 : 0;
   $3 = HEAP32[$0 >> 2];
   while (1) {
    if (($7 | 0) == ($12 | 0)) {
     break block
    }
    $6 = 0;
    $15 = Math_imul($4, $7) << 2;
    while (1) {
     if (($6 | 0) != ($13 | 0)) {
      $0 = 0;
      HEAP32[$3 >> 2] = 0;
      $8 = HEAP32[$2 >> 2] + ($6 << 2) | 0;
      $9 = HEAP32[$1 >> 2] + $15 | 0;
      $10 = Math_fround(0.0);
      while (1) {
       if (($0 | 0) != ($14 | 0)) {
        $10 = Math_fround(Math_fround(HEAPF32[$9 >> 2] * HEAPF32[$8 >> 2]) + $10);
        HEAPF32[$3 >> 2] = $10;
        $0 = $0 + 1 | 0;
        $9 = $9 + 4 | 0;
        $8 = ($5 << 2) + $8 | 0;
        continue;
       }
       break;
      };
      $6 = $6 + 1 | 0;
      $3 = $3 + 4 | 0;
      continue;
     }
     break;
    };
    $7 = $7 + 1 | 0;
    continue;
   };
  }
  return $11;
 }
 
 function arMatrixSelfInv($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0;
  $7 = __stack_pointer - 2e3 | 0;
  __stack_pointer = $7;
  $1 = -1;
  block : {
   $3 = HEAP32[$0 + 4 >> 2];
   if (($3 | 0) > 500) {
    break block
   }
   $8 = HEAP32[$0 >> 2];
   block2 : {
    switch ($3 | 0) {
    case 1:
     HEAPF64[$8 >> 3] = 1.0 / HEAPF64[$8 >> 3];
     $1 = 0;
     break block;
    case 0:
     break block;
    default:
     break block2;
    };
   }
   $10 = ($3 | 0) > 0 ? $3 : 0;
   $1 = 0;
   while (1) if (($1 | 0) == ($10 | 0)) {
    while (1) {
     if (($5 | 0) == ($10 | 0)) {
      $5 = 0;
      while (1) {
       block3 : {
        $0 = $5;
        if (($10 | 0) != ($0 | 0)) {
         while (1) {
          if (($0 | 0) == ($3 | 0)) {
           $0 = $3;
           break block3;
          }
          if (HEAP32[($0 << 2) + $7 >> 2] == ($5 | 0)) {
           break block3
          }
          $0 = $0 + 1 | 0;
          continue;
         }
        }
        $1 = $8 ? 0 : -1;
        break block;
       }
       HEAP32[($0 << 2) + $7 >> 2] = HEAP32[($5 << 2) + $7 >> 2];
       $1 = ($5 << 3) + $8 | 0;
       $0 = ($0 << 3) + $8 | 0;
       $2 = 0;
       while (1) {
        if (($2 | 0) != ($10 | 0)) {
         $4 = HEAPF64[$0 >> 3];
         HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
         HEAPF64[$1 >> 3] = $4;
         $2 = $2 + 1 | 0;
         $9 = $3 << 3;
         $1 = $9 + $1 | 0;
         $0 = $0 + $9 | 0;
         continue;
        }
        break;
       };
       $5 = $5 + 1 | 0;
       continue;
      };
     }
     $4 = 0.0;
     $2 = -1;
     $1 = $5;
     $9 = (Math_imul($3, $1) << 3) + $8 | 0;
     $0 = $9;
     while (1) {
      if (($1 | 0) != ($3 | 0)) {
       $11 = Math_abs(HEAPF64[$0 >> 3]);
       $6 = $11 > $4;
       $4 = $6 ? $11 : $4;
       $2 = $6 ? $1 : $2;
       $1 = $1 + 1 | 0;
       $0 = ($3 << 3) + $0 | 0;
       continue;
      }
      break;
     };
     $1 = -1;
     if (($2 | 0) == -1 | $4 <= 1.0e-10) {
      break block
     }
     $0 = ($2 << 2) + $7 | 0;
     $1 = HEAP32[$0 >> 2];
     $6 = $0;
     $0 = ($5 << 2) + $7 | 0;
     HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
     HEAP32[$0 >> 2] = $1;
     $1 = (Math_imul($2, $3) << 3) + $8 | 0;
     $2 = 0;
     $0 = $9;
     while (1) {
      if (($2 | 0) != ($3 | 0)) {
       $4 = HEAPF64[$1 >> 3];
       HEAPF64[$1 >> 3] = HEAPF64[$0 >> 3];
       HEAPF64[$0 >> 3] = $4;
       $2 = $2 + 1 | 0;
       $0 = $0 + 8 | 0;
       $1 = $1 + 8 | 0;
       continue;
      }
      break;
     };
     $4 = HEAPF64[$9 >> 3];
     $0 = 1;
     $1 = $9;
     while (1) {
      if (($0 | 0) != ($3 | 0)) {
       HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3] / $4;
       $0 = $0 + 1 | 0;
       $1 = $1 + 8 | 0;
       continue;
      }
      break;
     };
     HEAPF64[$1 >> 3] = 1.0 / $4;
     $6 = 0;
     while (1) {
      if (($3 | 0) != ($6 | 0)) {
       if (($5 | 0) != ($6 | 0)) {
        $1 = (Math_imul($3, $6) << 3) + $8 | 0;
        $4 = -HEAPF64[$1 >> 3];
        $0 = 1;
        $2 = $9;
        while (1) {
         if (($0 | 0) != ($3 | 0)) {
          HEAPF64[$1 >> 3] = $4 * HEAPF64[$2 >> 3] + HEAPF64[$1 + 8 >> 3];
          $2 = $2 + 8 | 0;
          $0 = $0 + 1 | 0;
          $1 = $1 + 8 | 0;
          continue;
         }
         break;
        };
        HEAPF64[$1 >> 3] = HEAPF64[$2 >> 3] * $4;
       }
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     };
     $5 = $5 + 1 | 0;
     continue;
    }
   } else {
    HEAP32[($1 << 2) + $7 >> 2] = $1;
    $1 = $1 + 1 | 0;
    continue;
   };
  }
  __stack_pointer = $7 + 2e3 | 0;
  return $1;
 }
 
 function arParamObserv2Ideal($0, $1, $2, $3, $4, $5) {
  var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
  block4 : {
   block7 : {
    block2 : {
     switch ($5 - 1 | 0) {
     case 3:
      $12 = HEAPF64[$0 + 16 >> 3];
      $25 = $12 * 6.0;
      $10 = HEAPF64[$0 + 24 >> 3];
      $26 = $10 * 6.0;
      $17 = HEAPF64[$0 + 56 >> 3];
      $18 = HEAPF64[$0 + 40 >> 3];
      $13 = ($2 - $17) / $18;
      $2 = $13 * $13;
      $19 = HEAPF64[$0 + 48 >> 3];
      $20 = HEAPF64[$0 + 32 >> 3];
      $9 = ($1 - $19) / $20;
      $1 = $9 * $9;
      $21 = HEAPF64[$0 + 64 >> 3];
      $14 = HEAPF64[$0 + 8 >> 3];
      $15 = HEAPF64[$0 >> 3];
      $27 = $10 + $10;
      $22 = $12 + $12;
      $5 = 1;
      $7 = $13;
      $6 = $9;
      while (1) {
       block6 : {
        block5 : {
         if (!($1 != 0.0 | $2 != 0.0)) {
          $6 = 0.0;
          break block5;
         }
         $11 = $2 + $1;
         $23 = $14 * $11 * $11 + ($15 * $11 + 1.0);
         $16 = $6;
         $28 = $10 * ($1 + $1 + $11) + ($23 * $6 + $7 * ($22 * $6)) - $9;
         $29 = $26 * $6;
         $6 = $1 * 3.0;
         $24 = $2 * $6;
         $6 = $16 - $28 / ($29 + ($22 * $7 + ($14 * ($2 * $2 + ($1 * 5.0 * $1 + $24)) + ($15 * ($6 + $2) + 1.0))));
         $16 = $27 * $6;
         $7 = $7 - ($16 * $7 + ($23 * $7 + $12 * ($2 + $2 + $11)) - $13) / ($16 + ($25 * $7 + ($14 * ($2 * 5.0 * $2 + ($1 * $1 + $24)) + ($15 * ($2 * 3.0 + $1) + 1.0))));
         if (($5 | 0) != 4) {
          break block6
         }
         $8 = $7;
        }
        HEAPF64[$3 >> 3] = $19 + $20 * $6 / $21;
        $2 = $17 + $18 * $8 / $21;
        break block7;
       }
       $5 = $5 + 1 | 0;
       $2 = $7 * $7;
       $1 = $6 * $6;
       continue;
      };
     case 0:
      $9 = HEAPF64[$0 >> 3];
      $1 = $1 - $9;
      $7 = $2 - HEAPF64[$0 + 8 >> 3];
      $6 = $1 * $1 + $7 * $7;
      $2 = Math_sqrt($6);
      $11 = -$2;
      $8 = HEAPF64[$0 + 24 >> 3] / 1.0e8;
      $12 = $8 * -3.0;
      $10 = -$8;
      $5 = 1;
      while (1) {
       $8 = 0.0;
       block8 : {
        if ($2 != 0.0) {
         $8 = $2 - (($10 * $6 + 1.0) * $2 + $11) / ($12 * $6 + 1.0);
         $7 = $7 * $8 / $2;
         $1 = $1 * $8 / $2;
         if (($5 | 0) != 3) {
          break block8
         }
         $13 = $1;
         $8 = $7;
        }
        HEAPF64[$3 >> 3] = $9 + $13 / HEAPF64[$0 + 16 >> 3];
        $2 = $8 / HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 8 >> 3];
        break block7;
       }
       $5 = $5 + 1 | 0;
       $6 = $1 * $1 + $7 * $7;
       $2 = Math_sqrt($6);
       continue;
      };
     case 1:
      $9 = HEAPF64[$0 >> 3];
      $7 = $1 - $9;
      $6 = $2 - HEAPF64[$0 + 8 >> 3];
      $2 = $7 * $7 + $6 * $6;
      $1 = Math_sqrt($2);
      $11 = -$1;
      $8 = HEAPF64[$0 + 24 >> 3] / 1.0e8;
      $12 = $8 * -3.0;
      $10 = HEAPF64[$0 + 32 >> 3] / 1.0e8 / 1.0e5;
      $14 = $10 * 5.0;
      $15 = -$8;
      $5 = 1;
      while (1) {
       $8 = 0.0;
       block9 : {
        if ($1 != 0.0) {
         $2 = $1 - (($15 * $2 + 1.0 - $10 * $2 * $2) * $1 + $11) / ($12 * $2 + 1.0 - $14 * $2 * $2);
         $6 = $6 * $2 / $1;
         $7 = $7 * $2 / $1;
         if (($5 | 0) != 3) {
          break block9
         }
         $13 = $7;
         $8 = $6;
        }
        HEAPF64[$3 >> 3] = $9 + $13 / HEAPF64[$0 + 16 >> 3];
        $2 = $8 / HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 8 >> 3];
        break block7;
       }
       $5 = $5 + 1 | 0;
       $2 = $7 * $7 + $6 * $6;
       $1 = Math_sqrt($2);
       continue;
      };
     case 2:
      break block2;
     default:
      break block4;
     };
    }
    $9 = HEAPF64[$0 >> 3];
    $7 = ($1 - $9) / HEAPF64[$0 + 24 >> 3];
    $6 = $2 - HEAPF64[$0 + 8 >> 3];
    $2 = $7 * $7 + $6 * $6;
    $1 = Math_sqrt($2);
    $11 = -$1;
    $8 = HEAPF64[$0 + 32 >> 3] / 1.0e8;
    $12 = $8 * -3.0;
    $10 = HEAPF64[$0 + 40 >> 3] / 1.0e8 / 1.0e5;
    $14 = $10 * 5.0;
    $15 = -$8;
    $5 = 1;
    while (1) {
     $8 = 0.0;
     block10 : {
      if ($1 != 0.0) {
       $2 = $1 - (($15 * $2 + 1.0 - $10 * $2 * $2) * $1 + $11) / ($12 * $2 + 1.0 - $14 * $2 * $2);
       $6 = $6 * $2 / $1;
       $7 = $7 * $2 / $1;
       if (($5 | 0) != 3) {
        break block10
       }
       $13 = $7;
       $8 = $6;
      }
      HEAPF64[$3 >> 3] = $9 + $13 / HEAPF64[$0 + 16 >> 3];
      $2 = $8 / HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 8 >> 3];
      break block7;
     }
     $5 = $5 + 1 | 0;
     $2 = $7 * $7 + $6 * $6;
     $1 = Math_sqrt($2);
     continue;
    };
   }
   HEAPF64[$4 >> 3] = $2;
  }
 }
 
 function byteswap($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = __stack_pointer - 192 | 0;
  __stack_pointer = $2;
  $1 = $2 + 8 | 0;
  byteSwapInt($0, $1);
  byteSwapInt($0 + 4 | 0, $1 | 4);
  $3 = $0 + 8 | 0;
  $6 = $2 + 16 | 0;
  while (1) {
   if (($4 | 0) != 3) {
    $1 = $4 << 5;
    $7 = $1 + $6 | 0;
    $5 = $1 + $3 | 0;
    $1 = 0;
    while (1) {
     if (($1 | 0) != 4) {
      $8 = $1 << 3;
      byteSwapDouble($5 + $8 | 0, $7 + $8 | 0);
      $1 = $1 + 1 | 0;
      continue;
     }
     break;
    };
    $4 = $4 + 1 | 0;
    continue;
   }
   break;
  };
  $1 = 0;
  $4 = HEAP32[$0 + 176 >> 2];
  $3 = HEAP32[($4 << 3) + 17688 >> 2];
  $3 = ($3 | 0) > 0 ? $3 : 0;
  $6 = $0 + 104 | 0;
  $7 = $2 + 112 | 0;
  while (1) {
   if (($1 | 0) != ($3 | 0)) {
    $5 = $1 << 3;
    byteSwapDouble($5 + $6 | 0, $7 + $5 | 0);
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$2 + 184 >> 2] = $4;
  wasm2js_memory_copy($0, $2 + 8 | 0, 184);
  __stack_pointer = $2 + 192 | 0;
 }
 
 function byteSwapInt($0, $1) {
  var $2 = 0;
  while (1) {
   if (($2 | 0) != 4) {
    HEAP8[$1 + $2 | 0] = HEAPU8[($0 - $2 | 0) + 3 | 0];
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function byteSwapDouble($0, $1) {
  var $2 = 0;
  while (1) {
   if (($2 | 0) != 8) {
    HEAP8[$1 + $2 | 0] = HEAPU8[($0 - $2 | 0) + 7 | 0];
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function arglCameraFrustumRH($0, $1, $2, $3) {
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0;
  $4 = __stack_pointer - 400 | 0;
  __stack_pointer = $4;
  $17 = HEAP32[$0 + 4 >> 2];
  $20 = HEAP32[$0 >> 2];
  $7 = $4 + 304 | 0;
  $8 = __stack_pointer - 96 | 0;
  block : {
   $13 = $0 + 8 | 0;
   if (!(HEAPF64[$13 + 88 >> 3] >= 0.0)) {
    while (1) {
     if (($9 | 0) == 3) {
      break block
     }
     $0 = $9 << 5;
     $14 = $0 + $13 | 0;
     $18 = $0 + $8 | 0;
     $0 = 0;
     while (1) {
      if (($0 | 0) != 4) {
       $16 = $0 << 3;
       HEAPF64[$16 + $18 >> 3] = -HEAPF64[$14 + $16 >> 3];
       $0 = $0 + 1 | 0;
       continue;
      }
      break;
     };
     $9 = $9 + 1 | 0;
     continue;
    }
   }
   while (1) {
    if (($9 | 0) == 3) {
     break block
    }
    $0 = $9 << 5;
    $14 = $0 + $13 | 0;
    $18 = $0 + $8 | 0;
    $0 = 0;
    while (1) {
     if (($0 | 0) != 4) {
      $16 = $0 << 3;
      HEAPF64[$16 + $18 >> 3] = HEAPF64[$14 + $16 >> 3];
      $0 = $0 + 1 | 0;
      continue;
     }
     break;
    };
    $9 = $9 + 1 | 0;
    continue;
   };
  }
  $9 = 0;
  while (1) {
   block2 : {
    block1 : {
     if (($9 | 0) != 3) {
      $13 = $7 + ($9 << 5) | 0;
      $0 = 0;
      while (1) {
       if (($0 | 0) == 4) {
        break block1
       }
       $14 = $13 + ($0 << 3) | 0;
       HEAP32[$14 >> 2] = 0;
       HEAP32[$14 + 4 >> 2] = 0;
       $0 = $0 + 1 | 0;
       continue;
      };
     }
     $5 = HEAPF64[$8 + 80 >> 3];
     $6 = HEAPF64[$8 + 64 >> 3];
     $10 = HEAPF64[$8 + 72 >> 3];
     $11 = Math_sqrt($5 * $5 + ($6 * $6 + $10 * $10));
     HEAPF64[$7 + 80 >> 3] = $11;
     $6 = $6 / $11;
     HEAPF64[$4 + 272 >> 3] = $6;
     $10 = $10 / HEAPF64[$7 + 80 >> 3];
     HEAPF64[$4 + 280 >> 3] = $10;
     $5 = $5 / HEAPF64[$7 + 80 >> 3];
     HEAPF64[$4 + 288 >> 3] = $5;
     HEAPF64[$4 + 296 >> 3] = HEAPF64[$8 + 88 >> 3] / HEAPF64[$7 + 80 >> 3];
     $11 = HEAPF64[$8 + 48 >> 3];
     $15 = HEAPF64[$8 + 32 >> 3];
     $19 = HEAPF64[$8 + 40 >> 3];
     $5 = $5 * $11 + ($6 * $15 + $10 * $19);
     HEAPF64[$7 + 48 >> 3] = $5;
     $6 = $11 - $5 * HEAPF64[$4 + 288 >> 3];
     $10 = $15 - $5 * HEAPF64[$4 + 272 >> 3];
     $5 = $19 - $5 * HEAPF64[$4 + 280 >> 3];
     $11 = Math_sqrt($6 * $6 + ($10 * $10 + $5 * $5));
     HEAPF64[$7 + 40 >> 3] = $11;
     HEAPF64[$4 + 240 >> 3] = $10 / $11;
     HEAPF64[$4 + 248 >> 3] = $5 / HEAPF64[$7 + 40 >> 3];
     HEAPF64[$4 + 256 >> 3] = $6 / HEAPF64[$7 + 40 >> 3];
     $10 = HEAPF64[$8 + 16 >> 3];
     $11 = HEAPF64[$8 >> 3];
     $15 = HEAPF64[$8 + 8 >> 3];
     $5 = HEAPF64[$4 + 288 >> 3] * $10 + (HEAPF64[$4 + 272 >> 3] * $11 + HEAPF64[$4 + 280 >> 3] * $15);
     HEAPF64[$7 + 16 >> 3] = $5;
     $6 = $10 * HEAPF64[$4 + 256 >> 3] + ($11 * HEAPF64[$4 + 240 >> 3] + $15 * HEAPF64[$4 + 248 >> 3]);
     HEAPF64[$7 + 8 >> 3] = $6;
     $10 = $10 - $6 * HEAPF64[$4 + 256 >> 3] - $5 * HEAPF64[$4 + 288 >> 3];
     $11 = $11 - $6 * HEAPF64[$4 + 240 >> 3] - $5 * HEAPF64[$4 + 272 >> 3];
     $5 = $15 - $6 * HEAPF64[$4 + 248 >> 3] - $5 * HEAPF64[$4 + 280 >> 3];
     $6 = Math_sqrt($10 * $10 + ($11 * $11 + $5 * $5));
     HEAPF64[$7 >> 3] = $6;
     HEAPF64[$4 + 208 >> 3] = $11 / $6;
     HEAPF64[$4 + 216 >> 3] = $5 / HEAPF64[$7 >> 3];
     HEAPF64[$4 + 224 >> 3] = $10 / HEAPF64[$7 >> 3];
     $5 = HEAPF64[$4 + 296 >> 3];
     $6 = (HEAPF64[$8 + 56 >> 3] - HEAPF64[$7 + 48 >> 3] * $5) / HEAPF64[$7 + 40 >> 3];
     HEAPF64[$4 + 264 >> 3] = $6;
     HEAPF64[$4 + 232 >> 3] = (HEAPF64[$8 + 24 >> 3] - HEAPF64[$7 + 8 >> 3] * $6 - $5 * HEAPF64[$7 + 16 >> 3]) / HEAPF64[$7 >> 3];
     $9 = 0;
     while (1) {
      if (($9 | 0) != 3) {
       $8 = $7 + ($9 << 5) | 0;
       $0 = 0;
       while (1) {
        if (($0 | 0) != 3) {
         $13 = $8 + ($0 << 3) | 0;
         HEAPF64[$13 >> 3] = HEAPF64[$13 >> 3] / HEAPF64[$7 + 80 >> 3];
         $0 = $0 + 1 | 0;
         continue;
        }
        break;
       };
       $9 = $9 + 1 | 0;
       continue;
      }
      break;
     };
     break block2;
    }
    $9 = $9 + 1 | 0;
    continue;
   }
   break;
  };
  $5 = +($17 - 1 | 0);
  $0 = $4 + 336 | 0;
  $7 = $4 + 368 | 0;
  while (1) {
   if (($12 | 0) == 4) {
    block3 : {
     $0 = 0;
     $6 = HEAPF64[$4 + 384 >> 3];
     while (1) {
      if (($0 | 0) != 3) {
       $7 = ($4 + 128 | 0) + Math_imul($0, 24) | 0;
       $9 = ($4 + 304 | 0) + ($0 << 5) | 0;
       $12 = 0;
       while (1) {
        if (($12 | 0) != 3) {
         $8 = $12 << 3;
         HEAPF64[$8 + $7 >> 3] = HEAPF64[$9 + $8 >> 3] / $6;
         $12 = $12 + 1 | 0;
         continue;
        }
        break;
       };
       $0 = $0 + 1 | 0;
       continue;
      }
      break;
     };
     HEAP32[$4 + 24 >> 2] = 0;
     HEAP32[$4 + 28 >> 2] = 0;
     HEAP32[$4 + 32 >> 2] = 0;
     HEAP32[$4 + 36 >> 2] = 0;
     HEAP32[$4 + 56 >> 2] = 0;
     HEAP32[$4 + 60 >> 2] = 0;
     HEAP32[$4 + 64 >> 2] = 0;
     HEAP32[$4 + 68 >> 2] = 0;
     HEAP32[$4 + 72 >> 2] = 0;
     HEAP32[$4 + 76 >> 2] = 0;
     HEAP32[$4 + 104 >> 2] = 0;
     HEAP32[$4 + 108 >> 2] = 0;
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 100 >> 2] = 0;
     HEAPF64[$4 + 40 >> 3] = HEAPF64[$4 + 160 >> 3] * -2.0 / $5;
     $10 = $1 - $2;
     HEAPF64[$4 + 80 >> 3] = ($1 + $2) / $10;
     $6 = HEAPF64[$4 + 128 >> 3];
     $11 = $6 + $6;
     $6 = +($20 - 1 | 0);
     HEAPF64[$4 >> 3] = $11 / $6;
     $11 = HEAPF64[$4 + 136 >> 3];
     HEAPF64[$4 + 8 >> 3] = ($11 + $11) / $6;
     HEAPF64[$4 + 88 >> 3] = $1 * ($2 + $2) / $10;
     $1 = HEAPF64[$4 + 168 >> 3];
     HEAPF64[$4 + 48 >> 3] = -(($1 + $1) / $5 + -1.0);
     $1 = HEAPF64[$4 + 144 >> 3];
     HEAPF64[$4 + 16 >> 3] = -(($1 + $1) / $6 + -1.0);
     HEAP32[$4 + 120 >> 2] = 0;
     HEAP32[$4 + 124 >> 2] = 0;
     HEAP32[$4 + 112 >> 2] = 0;
     HEAP32[$4 + 116 >> 2] = -1074790400;
     $13 = $4 + 272 | 0;
     $17 = $4 + 240 | 0;
     $0 = 0;
     $6 = HEAPF64[$4 + 296 >> 3];
     $10 = HEAPF64[$4 + 264 >> 3];
     $11 = HEAPF64[$4 + 232 >> 3];
     while (1) {
      if (($0 | 0) == 4) {
       break block3
      }
      $9 = ($0 << 3) + $3 | 0;
      $7 = ($0 << 5) + $4 | 0;
      $1 = HEAPF64[$7 + 16 >> 3];
      $2 = HEAPF64[$7 + 8 >> 3];
      $5 = HEAPF64[$7 >> 3];
      $12 = 0;
      while (1) {
       if (($12 | 0) != 3) {
        $8 = $12 << 3;
        HEAPF64[$9 + ($12 << 5) >> 3] = $1 * HEAPF64[$8 + $13 >> 3] + ($5 * HEAPF64[$8 + ($4 + 208 | 0) >> 3] + $2 * HEAPF64[$8 + $17 >> 3]);
        $12 = $12 + 1 | 0;
        continue;
       }
       break;
      };
      HEAPF64[$9 + 96 >> 3] = $1 * $6 + ($5 * $11 + $2 * $10) + HEAPF64[$7 + 24 >> 3];
      $0 = $0 + 1 | 0;
      continue;
     };
    }
   } else {
    $9 = $12 << 3;
    $8 = $9 + $0 | 0;
    HEAPF64[$8 >> 3] = $5 * HEAPF64[$7 + $9 >> 3] - HEAPF64[$8 >> 3];
    $12 = $12 + 1 | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 400 | 0;
 }
 
 function arParamIdeal2ObservLTf($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = -1;
  $1 = Math_fround($1 + Math_fround(.5));
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   $5 = ~~$1
  } else {
   $5 = -2147483648
  }
  $5 = $5 + HEAP32[$0 + 16 >> 2] | 0;
  block : {
   if (($5 | 0) < 0) {
    break block
   }
   $8 = HEAP32[$0 + 8 >> 2];
   if (($8 | 0) <= ($5 | 0)) {
    break block
   }
   $1 = Math_fround($2 + Math_fround(.5));
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $6 = ~~$1
   } else {
    $6 = -2147483648
   }
   $6 = $6 + HEAP32[$0 + 20 >> 2] | 0;
   if (($6 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($6 | 0)) {
    break block
   }
   $0 = HEAP32[$0 >> 2] + (Math_imul($6, $8) + $5 << 3) | 0;
   HEAPF32[$3 >> 2] = HEAPF32[$0 >> 2];
   HEAPF32[$4 >> 2] = HEAPF32[$0 + 4 >> 2];
   $7 = 0;
  }
  return $7;
 }
 
 function arParamObserv2IdealLTf($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = -1;
  $1 = Math_fround($1 + Math_fround(.5));
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   $5 = ~~$1
  } else {
   $5 = -2147483648
  }
  $5 = $5 + HEAP32[$0 + 16 >> 2] | 0;
  block : {
   if (($5 | 0) < 0) {
    break block
   }
   $8 = HEAP32[$0 + 8 >> 2];
   if (($8 | 0) <= ($5 | 0)) {
    break block
   }
   $1 = Math_fround($2 + Math_fround(.5));
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $6 = ~~$1
   } else {
    $6 = -2147483648
   }
   $6 = $6 + HEAP32[$0 + 20 >> 2] | 0;
   if (($6 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($6 | 0)) {
    break block
   }
   $0 = HEAP32[$0 + 4 >> 2] + (Math_imul($6, $8) + $5 << 3) | 0;
   HEAPF32[$3 >> 2] = HEAPF32[$0 >> 2];
   HEAPF32[$4 >> 2] = HEAPF32[$0 + 4 >> 2];
   $7 = 0;
  }
  return $7;
 }
 
 function icpGetU_from_X_by_MatX2U($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  $3 = HEAPF64[$2 + 16 >> 3];
  $4 = HEAPF64[$2 >> 3];
  $5 = HEAPF64[$2 + 8 >> 3];
  $6 = HEAPF64[$1 + 88 >> 3] + (HEAPF64[$1 + 80 >> 3] * $3 + (HEAPF64[$1 + 64 >> 3] * $4 + $5 * HEAPF64[$1 + 72 >> 3]));
  if ($6 != 0.0) {
   $7 = HEAPF64[$1 + 24 >> 3];
   $8 = HEAPF64[$1 + 16 >> 3];
   $9 = HEAPF64[$1 >> 3];
   $10 = HEAPF64[$1 + 8 >> 3];
   HEAPF64[$0 + 8 >> 3] = (HEAPF64[$1 + 56 >> 3] + (HEAPF64[$1 + 48 >> 3] * $3 + (HEAPF64[$1 + 32 >> 3] * $4 + $5 * HEAPF64[$1 + 40 >> 3]))) / $6;
   HEAPF64[$0 >> 3] = ($7 + ($8 * $3 + ($9 * $4 + $5 * $10))) / $6;
   $0 = 0;
  } else {
   $0 = -1
  }
  return $0;
 }
 
 function icpGetJ_U_S($0, $1, $2, $3) {
  var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
  $4 = __stack_pointer - 1008 | 0;
  __stack_pointer = $4;
  $22 = HEAPF64[$2 + 88 >> 3];
  $18 = HEAPF64[$2 + 56 >> 3];
  $19 = HEAPF64[$2 + 24 >> 3];
  $5 = HEAPF64[$3 >> 3];
  $6 = HEAPF64[$3 + 8 >> 3];
  $7 = HEAPF64[$3 + 16 >> 3];
  $15 = HEAPF64[$2 >> 3];
  $16 = HEAPF64[$2 + 8 >> 3];
  $17 = HEAPF64[$2 + 16 >> 3];
  $8 = HEAPF64[$2 + 32 >> 3];
  $9 = HEAPF64[$2 + 40 >> 3];
  $10 = HEAPF64[$2 + 48 >> 3];
  $11 = HEAPF64[$2 + 64 >> 3];
  $12 = HEAPF64[$2 + 72 >> 3];
  $13 = HEAPF64[$2 + 80 >> 3];
  HEAPF64[$4 + 1e3 >> 3] = $13;
  HEAPF64[$4 + 992 >> 3] = $12;
  HEAPF64[$4 + 984 >> 3] = $11;
  HEAPF64[$4 + 904 >> 3] = $10;
  HEAPF64[$4 + 896 >> 3] = $9;
  HEAPF64[$4 + 888 >> 3] = $8;
  HEAPF64[$4 + 808 >> 3] = $17;
  HEAPF64[$4 + 800 >> 3] = $16;
  HEAPF64[$4 + 792 >> 3] = $15;
  $20 = $7 * $13;
  HEAPF64[$4 + 976 >> 3] = $20;
  HEAPF64[$4 + 968 >> 3] = $6 * $13;
  HEAPF64[$4 + 960 >> 3] = $5 * $13;
  HEAPF64[$4 + 952 >> 3] = $7 * $12;
  $13 = $6 * $12;
  HEAPF64[$4 + 944 >> 3] = $13;
  HEAPF64[$4 + 936 >> 3] = $5 * $12;
  HEAPF64[$4 + 928 >> 3] = $7 * $11;
  HEAPF64[$4 + 920 >> 3] = $6 * $11;
  $11 = $5 * $11;
  HEAPF64[$4 + 912 >> 3] = $11;
  $12 = $7 * $10;
  HEAPF64[$4 + 880 >> 3] = $12;
  HEAPF64[$4 + 872 >> 3] = $6 * $10;
  HEAPF64[$4 + 864 >> 3] = $5 * $10;
  HEAPF64[$4 + 856 >> 3] = $7 * $9;
  $10 = $6 * $9;
  HEAPF64[$4 + 848 >> 3] = $10;
  HEAPF64[$4 + 840 >> 3] = $5 * $9;
  HEAPF64[$4 + 832 >> 3] = $7 * $8;
  HEAPF64[$4 + 824 >> 3] = $6 * $8;
  $9 = $5 * $8;
  HEAPF64[$4 + 816 >> 3] = $9;
  $8 = $17 * $7;
  HEAPF64[$4 + 784 >> 3] = $8;
  HEAPF64[$4 + 776 >> 3] = $6 * $17;
  HEAPF64[$4 + 768 >> 3] = $5 * $17;
  HEAPF64[$4 + 760 >> 3] = $16 * $7;
  $26 = $16 * $6;
  HEAPF64[$4 + 752 >> 3] = $26;
  HEAPF64[$4 + 744 >> 3] = $5 * $16;
  HEAPF64[$4 + 736 >> 3] = $15 * $7;
  HEAPF64[$4 + 728 >> 3] = $15 * $6;
  $6 = $15 * $5;
  HEAPF64[$4 + 720 >> 3] = $6;
  $3 = 0;
  wasm2js_memory_fill($4 + 144 | 0, 0, 64);
  HEAP32[$4 + 216 >> 2] = 0;
  HEAP32[$4 + 220 >> 2] = 0;
  HEAP32[$4 + 208 >> 2] = 0;
  HEAP32[$4 + 212 >> 2] = -1074790400;
  HEAP32[$4 + 224 >> 2] = 0;
  HEAP32[$4 + 228 >> 2] = 0;
  HEAP32[$4 + 232 >> 2] = 0;
  HEAP32[$4 + 236 >> 2] = 0;
  HEAP32[$4 + 240 >> 2] = 0;
  HEAP32[$4 + 244 >> 2] = 0;
  HEAP32[$4 + 248 >> 2] = 0;
  HEAP32[$4 + 252 >> 2] = 1072693248;
  wasm2js_memory_fill($4 + 256 | 0, 0, 48);
  HEAP32[$4 + 304 >> 2] = 0;
  HEAP32[$4 + 308 >> 2] = 1072693248;
  wasm2js_memory_fill($4 + 312 | 0, 0, 72);
  HEAP32[$4 + 384 >> 2] = 0;
  HEAP32[$4 + 388 >> 2] = -1074790400;
  wasm2js_memory_fill($4 + 392 | 0, 0, 48);
  HEAP32[$4 + 448 >> 2] = 0;
  HEAP32[$4 + 452 >> 2] = 0;
  HEAP32[$4 + 440 >> 2] = 0;
  HEAP32[$4 + 444 >> 2] = -1074790400;
  HEAP32[$4 + 456 >> 2] = 0;
  HEAP32[$4 + 460 >> 2] = 0;
  HEAP32[$4 + 464 >> 2] = 0;
  HEAP32[$4 + 468 >> 2] = 0;
  HEAP32[$4 + 472 >> 2] = 0;
  HEAP32[$4 + 476 >> 2] = 0;
  HEAP32[$4 + 480 >> 2] = 0;
  HEAP32[$4 + 484 >> 2] = 1072693248;
  wasm2js_memory_fill($4 + 488 | 0, 0, 112);
  HEAP32[$4 + 600 >> 2] = 0;
  HEAP32[$4 + 604 >> 2] = 1072693248;
  wasm2js_memory_fill($4 + 608 | 0, 0, 48);
  HEAP32[$4 + 656 >> 2] = 0;
  HEAP32[$4 + 660 >> 2] = 1072693248;
  wasm2js_memory_fill($4 + 664 | 0, 0, 48);
  HEAP32[$4 + 712 >> 2] = 0;
  HEAP32[$4 + 716 >> 2] = 1072693248;
  while (1) {
   if (($3 | 0) != 3) {
    $23 = ($4 + 720 | 0) + Math_imul($3, 96) | 0;
    $24 = Math_imul($3, 48) + $4 | 0;
    $14 = 0;
    while (1) {
     if (($14 | 0) != 6) {
      $21 = $14 << 3;
      $25 = $21 + ($4 + 144 | 0) | 0;
      $2 = 0;
      $5 = 0.0;
      while (1) {
       if (($2 | 0) != 12) {
        $5 = HEAPF64[$23 + ($2 << 3) >> 3] * HEAPF64[$25 + Math_imul($2, 48) >> 3] + $5;
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      HEAPF64[$24 + $21 >> 3] = $5;
      $14 = $14 + 1 | 0;
      continue;
     }
     break;
    };
    $3 = $3 + 1 | 0;
    continue;
   }
   break;
  };
  $15 = HEAPF64[$1 + 80 >> 3];
  $16 = $22 + ($20 + ($11 + $13));
  $17 = HEAPF64[$1 + 64 >> 3];
  $8 = $8 + ($6 + $26) + $19;
  $9 = $18 + ($12 + ($9 + $10));
  $10 = HEAPF64[$1 + 72 >> 3];
  $5 = HEAPF64[$1 + 88 >> 3] + ($15 * $16 + ($17 * $8 + $9 * $10));
  block : {
   if ($5 != 0.0) {
    $22 = HEAPF64[$1 + 24 >> 3];
    $11 = HEAPF64[$1 + 16 >> 3];
    $12 = HEAPF64[$1 >> 3];
    $13 = HEAPF64[$1 + 8 >> 3];
    $6 = HEAPF64[$1 + 48 >> 3];
    $18 = HEAPF64[$1 + 32 >> 3];
    $19 = HEAPF64[$1 + 40 >> 3];
    $7 = HEAPF64[$1 + 56 >> 3] + ($6 * $16 + ($18 * $8 + $9 * $19));
    $20 = $6 * $5 - $15 * $7;
    $6 = $5 * $5;
    HEAPF64[$4 + 184 >> 3] = $20 / $6;
    HEAPF64[$4 + 176 >> 3] = ($19 * $5 - $10 * $7) / $6;
    HEAPF64[$4 + 168 >> 3] = ($18 * $5 - $17 * $7) / $6;
    $7 = $22 + ($11 * $16 + ($12 * $8 + $9 * $13));
    HEAPF64[$4 + 160 >> 3] = ($11 * $5 - $15 * $7) / $6;
    HEAPF64[$4 + 152 >> 3] = ($13 * $5 - $10 * $7) / $6;
    HEAPF64[$4 + 144 >> 3] = ($12 * $5 - $17 * $7) / $6;
    $1 = 0;
    $3 = 0;
    while (1) {
     if (($3 | 0) == 2) {
      break block
     }
     $23 = Math_imul($3, 48) + $0 | 0;
     $24 = ($4 + 144 | 0) + Math_imul($3, 24) | 0;
     $14 = 0;
     while (1) {
      if (($14 | 0) != 6) {
       $2 = $14 << 3;
       $21 = $2 + $23 | 0;
       $25 = $2 + $4 | 0;
       $2 = 0;
       $5 = 0.0;
       while (1) {
        if (($2 | 0) != 3) {
         $5 = HEAPF64[$24 + ($2 << 3) >> 3] * HEAPF64[$25 + Math_imul($2, 48) >> 3] + $5;
         $2 = $2 + 1 | 0;
         continue;
        }
        break;
       };
       HEAPF64[$21 >> 3] = $5;
       $14 = $14 + 1 | 0;
       continue;
      }
      break;
     };
     $3 = $3 + 1 | 0;
     continue;
    };
   }
   arLog(0, 3, 2463, 0);
   $1 = -1;
  }
  __stack_pointer = $4 + 1008 | 0;
  return $1;
 }
 
 function icpGetDeltaS($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 40 >> 2] = 6;
  HEAP32[$4 + 44 >> 2] = 1;
  HEAP32[$4 + 36 >> 2] = $0;
  HEAP32[$4 + 32 >> 2] = 1;
  HEAP32[$4 + 28 >> 2] = $3;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = 6;
  HEAP32[$4 + 16 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = $2;
  $3 = arMatrixAllocTrans($4 + 12 | 0);
  block : {
   if (!$3) {
    $0 = -1;
    break block;
   }
   $2 = arMatrixAllocMul($3, $4 + 12 | 0);
   block1 : {
    if (!$2) {
     $0 = -1;
     $1 = $3;
     break block1;
    }
    $1 = arMatrixAllocMul($3, $4 + 24 | 0);
    block2 : {
     if (!$1) {
      $0 = -1;
      $1 = $2;
      break block2;
     }
     $0 = 0;
     block3 : {
      if ((arMatrixSelfInv($2) | 0) < 0) {
       $0 = -1;
       break block3;
      }
      arMatrixMul($4 + 36 | 0, $2, $1);
     }
     arImageProcFinal($3);
     $3 = $2;
    }
    arImageProcFinal($3);
   }
   arImageProcFinal($1);
  }
  __stack_pointer = $4 + 48 | 0;
  return $0;
 }
 
 function icpUpdateMat($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0;
  $3 = __stack_pointer - 192 | 0;
  __stack_pointer = $3;
  $7 = 1.0;
  $2 = HEAPF64[$1 + 16 >> 3];
  $5 = HEAPF64[$1 >> 3];
  $10 = HEAPF64[$1 + 8 >> 3];
  $11 = $2 * $2 + ($5 * $5 + $10 * $10);
  if ($11 != 0.0) {
   $4 = Math_sqrt($11);
   $12 = $2 / $4;
   $8 = $10 / $4;
   $7 = $5 / $4;
  }
  $2 = HEAPF64[$1 + 24 >> 3];
  $5 = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$3 + 184 >> 3] = HEAPF64[$1 + 40 >> 3];
  HEAPF64[$3 + 152 >> 3] = $5;
  HEAPF64[$3 + 120 >> 3] = $2;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  wasm2js_scratch_store_f64(+$4);
  $6 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $6 = $6 & 2147483647;
  block : {
   if ($6 >>> 0 <= 1072243195) {
    $2 = 1.0;
    if ($6 >>> 0 < 1044816030) {
     break block
    }
    $2 = __cos($4, 0.0);
    break block;
   }
   $2 = $4 - $4;
   if ($6 >>> 0 >= 2146435072) {
    break block
   }
   $6 = __rem_pio2($4, $1);
   $2 = HEAPF64[$1 + 8 >> 3];
   $5 = HEAPF64[$1 >> 3];
   block3 : {
    switch (($6 & 3) - 1 | 0) {
    default:
     $2 = __cos($5, $2);
     break block;
    case 0:
     $2 = -__sin($5, $2, 1);
     break block;
    case 1:
     $2 = -__cos($5, $2);
     break block;
    case 2:
     break block3;
    };
   }
   $2 = __sin($5, $2, 1);
  }
  __stack_pointer = $1 + 16 | 0;
  $5 = 1.0 - $2;
  HEAPF64[$3 + 176 >> 3] = $12 * $12 * $5 + $2;
  $10 = $8 * $12 * $5;
  $4 = sin($4);
  $11 = $7 * $4;
  HEAPF64[$3 + 168 >> 3] = $10 + $11;
  $16 = $7 * $12 * $5;
  $17 = $8 * $4;
  HEAPF64[$3 + 160 >> 3] = $16 - $17;
  HEAPF64[$3 + 144 >> 3] = $10 - $11;
  HEAPF64[$3 + 136 >> 3] = $2 + $8 * $8 * $5;
  $8 = $8 * $7 * $5;
  $4 = $12 * $4;
  HEAPF64[$3 + 128 >> 3] = $8 + $4;
  HEAPF64[$3 + 112 >> 3] = $16 + $17;
  HEAPF64[$3 + 104 >> 3] = $8 - $4;
  HEAPF64[$3 + 96 >> 3] = $2 + $7 * $7 * $5;
  $18 = $3 + 160 | 0;
  $19 = $3 + 128 | 0;
  while (1) {
   if (($13 | 0) != 3) {
    $1 = $13 << 5;
    $6 = $1 + $3 | 0;
    $9 = $0 + $1 | 0;
    $2 = HEAPF64[$9 + 16 >> 3];
    $4 = HEAPF64[$9 + 8 >> 3];
    $7 = HEAPF64[$9 >> 3];
    $1 = 0;
    while (1) {
     if (($1 | 0) != 4) {
      $14 = $1 << 3;
      HEAPF64[$6 + $14 >> 3] = $2 * HEAPF64[$14 + $18 >> 3] + ($7 * HEAPF64[($3 + 96 | 0) + $14 >> 3] + $4 * HEAPF64[$14 + $19 >> 3]);
      $1 = $1 + 1 | 0;
      continue;
     }
     break;
    };
    HEAPF64[$6 + 24 >> 3] = HEAPF64[$9 + 24 >> 3] + HEAPF64[$6 + 24 >> 3];
    $13 = $13 + 1 | 0;
    continue;
   }
   break;
  };
  while (1) {
   block5 : {
    if (($15 | 0) != 3) {
     $1 = $15 << 5;
     $13 = $1 + $0 | 0;
     $6 = $1 + $3 | 0;
     $1 = 0;
     while (1) {
      if (($1 | 0) == 4) {
       break block5
      }
      $9 = $1 << 3;
      HEAPF64[$9 + $13 >> 3] = HEAPF64[$6 + $9 >> 3];
      $1 = $1 + 1 | 0;
      continue;
     };
    }
    __stack_pointer = $3 + 192 | 0;
    return;
   }
   $15 = $15 + 1 | 0;
   continue;
  };
 }
 
 function icpCreateHandle($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = emscripten_builtin_malloc(136);
  if ($1) {
   while (1) {
    if (($3 | 0) != 3) {
     $2 = $3 << 5;
     $5 = $2 + $1 | 0;
     $6 = $0 + $2 | 0;
     $2 = 0;
     while (1) {
      if (($2 | 0) != 4) {
       $4 = $2 << 3;
       HEAPF64[$4 + $5 >> 3] = HEAPF64[$6 + $4 >> 3];
       $2 = $2 + 1 | 0;
       continue;
      }
      break;
     };
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP32[$1 + 128 >> 2] = 0;
   HEAP32[$1 + 132 >> 2] = 1071644672;
   HEAP32[$1 + 120 >> 2] = 0;
   HEAP32[$1 + 124 >> 2] = 1074790400;
   HEAP32[$1 + 112 >> 2] = -2147483648;
   HEAP32[$1 + 116 >> 2] = 1072672276;
   HEAP32[$1 + 104 >> 2] = -1610612736;
   HEAP32[$1 + 108 >> 2] = 1069128089;
   HEAP32[$1 + 96 >> 2] = 10;
  }
  return $1;
 }
 
 function icpDeleteHandle($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if (!$1) {
   return
  }
  emscripten_builtin_free($1);
  HEAP32[$0 >> 2] = 0;
 }
 
 function icpSetInlierProbability($0, $1) {
  if (!$0) {
   return
  }
  HEAPF64[$0 + 128 >> 3] = $1;
 }
 
 function icpPoint($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0;
  $7 = __stack_pointer - 160 | 0;
  __stack_pointer = $7;
  $5 = -1;
  $8 = HEAP32[$1 + 8 >> 2];
  block : {
   if (($8 | 0) < 3) {
    break block
   }
   $10 = emscripten_builtin_malloc(Math_imul($8, 96));
   if (!$10) {
    arLog(0, 3, 1404, 0);
    break block;
   }
   block1 : {
    $8 = emscripten_builtin_malloc($8 << 4);
    if ($8) {
     while (1) {
      if (($6 | 0) != 3) {
       $5 = $6 << 5;
       $11 = $5 + $3 | 0;
       $15 = $2 + $5 | 0;
       $5 = 0;
       while (1) {
        if (($5 | 0) != 4) {
         $14 = $5 << 3;
         HEAPF64[$11 + $14 >> 3] = HEAPF64[$15 + $14 >> 3];
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       };
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     };
     $2 = 0;
     while (1) {
      arUtilMatMul($0, $3, $7 + 48 | 0);
      $9 = 0.0;
      $5 = 0;
      while (1) {
       $6 = HEAP32[$1 + 8 >> 2];
       if (($6 | 0) > ($5 | 0)) {
        if ((icpGetU_from_X_by_MatX2U($7 + 144 | 0, $7 + 48 | 0, HEAP32[$1 + 4 >> 2] + Math_imul($5, 24) | 0) | 0) < 0) {
         break block1
        }
        $6 = $5 << 4;
        $11 = $6 + HEAP32[$1 >> 2] | 0;
        $12 = HEAPF64[$11 >> 3];
        $16 = HEAPF64[$7 + 144 >> 3];
        $6 = $6 + $8 | 0;
        $13 = HEAPF64[$11 + 8 >> 3] - HEAPF64[$7 + 152 >> 3];
        HEAPF64[$6 + 8 >> 3] = $13;
        $12 = $12 - $16;
        HEAPF64[$6 >> 3] = $12;
        $9 = $9 + ($12 * $12 + $13 * $13);
        $5 = $5 + 1 | 0;
        continue;
       }
       break;
      };
      block2 : {
       $9 = $9 / +($6 | 0);
       if ($9 < HEAPF64[$0 + 104 >> 3] | !(!$2 | !($9 < HEAPF64[$0 + 120 >> 3])) & HEAPF64[$0 + 112 >> 3] < $9 / $17) {
        break block2
       }
       $5 = 0;
       if (HEAP32[$0 + 96 >> 2] == ($2 | 0)) {
        break block2
       }
       while (1) {
        $6 = HEAP32[$1 + 8 >> 2];
        if (($6 | 0) > ($5 | 0)) {
         $6 = Math_imul($5, 24);
         $11 = Math_imul($5, 96);
         $5 = $5 + 1 | 0;
         if ((icpGetJ_U_S($10 + $11 | 0, $0, $3, $6 + HEAP32[$1 + 4 >> 2] | 0) | 0) >= 0) {
          continue
         }
         break block1;
        }
        break;
       };
       if ((icpGetDeltaS($7, $8, $10, $6 << 1) | 0) < 0) {
        break block1
       }
       icpUpdateMat($3, $7);
       $2 = $2 + 1 | 0;
       $17 = $9;
       continue;
      }
      break;
     };
     HEAPF64[$4 >> 3] = $9;
     emscripten_builtin_free($10);
     emscripten_builtin_free($8);
     $5 = 0;
     break block;
    }
    arLog(0, 3, 1404, 0);
    emscripten_builtin_free($10);
    break block;
   }
   emscripten_builtin_free($10);
   emscripten_builtin_free($8);
   $5 = -1;
  }
  __stack_pointer = $7 + 160 | 0;
  return $5;
 }
 
 function compE($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0;
  $2 = HEAPF64[$0 >> 3] - HEAPF64[$1 >> 3];
  return ($2 < 0.0 ? -1 : $2 > 0.0) | 0;
 }
 
 function arLog($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  if (!(!HEAPU8[$2 | 0] | (!$2 | HEAP32[18612] > ($1 | 0)))) {
   HEAP32[$0 + 12 >> 2] = $3;
   $4 = __stack_pointer - 16 | 0;
   __stack_pointer = $4;
   HEAP32[$4 + 12 >> 2] = $3;
   block1 : {
    if (!HEAPU8[$2 | 0] | (!$2 | HEAP32[18612] > ($1 | 0))) {
     break block1
    }
    $3 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 8 >> 2] = $3;
    $6 = vsnprintf(0, 0, $2, $3);
    if (!$6) {
     break block1
    }
    if ($1 >>> 0 <= 3) {
     $5 = strlen(HEAP32[($1 << 2) + 17728 >> 2]) + 3 | 0
    }
    $7 = $5 + $6 | 0;
    $8 = $7 + 1 | 0;
    $3 = emscripten_builtin_malloc($8);
    if ($5) {
     HEAP32[$4 >> 2] = HEAP32[($1 << 2) + 17728 >> 2];
     snprintf($3, $5 + 1 | 0, 4323, $4);
    }
    vsnprintf($3 + $5 | 0, $6 + 1 | 0, $2, HEAP32[$4 + 12 >> 2]);
    block3 : {
     block2 : {
      $2 = HEAP32[19496];
      if ($2) {
       if (!HEAP32[19497]) {
        break block2
       }
       if (HEAP32[19498] != 78476) {
        $1 = HEAP32[19499];
        if (!$1) {
         break block3
        }
        $5 = HEAPU8[78e3] ? 4096 : 0;
        $2 = HEAP32[19501];
        if ($5 >>> 0 <= $2 >>> 0) {
         break block3
        }
        $1 = $1 + $2 | 0;
        if (($5 - $2 | 0) - 4 >>> 0 >= $7 >>> 0) {
         strncpy($1, $3, $8);
         HEAP32[19501] = $2 + $7;
         break block3;
        }
        HEAP8[$1 | 0] = 46;
        HEAP8[$1 + 1 | 0] = 46;
        HEAP8[$1 + 2 | 0] = 46;
        HEAP8[$1 + 3 | 0] = 0;
        HEAP32[19501] = $5;
        break block3;
       }
       if (!HEAP32[19501]) {
        break block2
       }
       FUNCTION_TABLE[$2 | 0](HEAP32[19499]);
       HEAP32[19501] = 0;
       $2 = HEAP32[19496];
       break block2;
      }
      if (($1 | 0) == 3) {
       emscripten_console_error($3 | 0);
       break block3;
      }
      emscripten_console_warn($3 | 0);
      break block3;
     }
     FUNCTION_TABLE[$2 | 0]($3);
    }
    emscripten_builtin_free($3);
   }
   __stack_pointer = $4 + 16 | 0;
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function my_error_exit($0) {
  $0 = $0 | 0;
  emscripten_longjmp(HEAP32[$0 >> 2] + 132 | 0, 1);
  wasm2js_trap();
 }
 
 function get_buff($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  while (1) {
   $3 = 255;
   $4 = $0;
   block4 : {
    while (1) {
     block2 : {
      block3 : {
       block : {
        $2 = HEAP32[$1 + 4 >> 2];
        $5 = HEAP32[$1 + 8 >> 2];
        if (($2 | 0) == ($5 | 0)) {
         break block
        }
        $6 = memchr($2, 10, $5 - $2 | 0);
        block1 : {
         if ($6) {
          $2 = HEAP32[$1 + 4 >> 2];
          $5 = ($6 - $2 | 0) + 1 | 0;
          break block1;
         }
         $2 = HEAP32[$1 + 4 >> 2];
         $5 = HEAP32[$1 + 8 >> 2] - $2 | 0;
        }
        $7 = $2;
        $2 = $3 >>> 0 > $5 >>> 0 ? $5 : $3;
        __memcpy($4, $7, $2);
        $5 = $2 + HEAP32[$1 + 4 >> 2] | 0;
        HEAP32[$1 + 4 >> 2] = $5;
        $4 = $2 + $4 | 0;
        if ($6) {
         break block2
        }
        $3 = $3 - $2 | 0;
        if (!$3) {
         break block2
        }
        if (($5 | 0) == HEAP32[$1 + 8 >> 2]) {
         break block
        }
        HEAP32[$1 + 4 >> 2] = $5 + 1;
        $2 = HEAPU8[$5 | 0];
        break block3;
       }
       $2 = __uflow($1);
       if (($2 | 0) >= 0) {
        break block3
       }
       $3 = 0;
       if (($0 | 0) == ($4 | 0)) {
        break block4
       }
       if (HEAPU8[$1 | 0] & 16) {
        break block2
       }
       break block4;
      }
      HEAP8[$4 | 0] = $2;
      $4 = $4 + 1 | 0;
      if (($2 & 255) == 10) {
       break block2
      }
      $3 = $3 - 1 | 0;
      if ($3) {
       continue
      }
     }
     break;
    };
    if (!$0) {
     $3 = 0;
     break block4;
    }
    HEAP8[$4 | 0] = 0;
    $3 = $0;
   }
   if ($3) {
    $4 = HEAPU8[$0 | 0];
    if (($4 | 0) == 10 | ($4 | 0) == 35) {
     continue
    }
   }
   break;
  };
  return $3;
 }
 
 function ar2GetResolution($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0);
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  block : {
   if ($0) {
    arUtilMatMuldff($0 + 8 | 0, $1, $6);
    $11 = HEAPF32[$6 + 28 >> 2];
    $13 = HEAPF32[$6 + 16 >> 2];
    $4 = HEAPF32[$2 >> 2];
    $14 = Math_fround($13 * $4);
    $5 = HEAPF32[$2 + 4 >> 2];
    $15 = HEAPF32[$6 + 20 >> 2];
    $16 = Math_fround($5 * $15);
    $7 = HEAPF32[$6 + 44 >> 2];
    $9 = HEAPF32[$6 + 32 >> 2];
    $10 = Math_fround($9 * $4);
    $17 = HEAPF32[$6 + 36 >> 2];
    $18 = Math_fround($5 * $17);
    $8 = Math_fround($7 + Math_fround($10 + $18));
    $23 = Math_fround(Math_fround($11 + Math_fround($14 + $16)) / $8);
    $12 = HEAPF32[$6 + 12 >> 2];
    $19 = HEAPF32[$6 >> 2];
    $20 = Math_fround($19 * $4);
    $21 = HEAPF32[$6 + 4 >> 2];
    $22 = Math_fround($5 * $21);
    $8 = Math_fround(Math_fround($12 + Math_fround($20 + $22)) / $8);
    break block;
   }
   $11 = HEAPF32[$1 + 28 >> 2];
   $13 = HEAPF32[$1 + 16 >> 2];
   $4 = HEAPF32[$2 >> 2];
   $14 = Math_fround($13 * $4);
   $5 = HEAPF32[$2 + 4 >> 2];
   $15 = HEAPF32[$1 + 20 >> 2];
   $16 = Math_fround($5 * $15);
   $7 = HEAPF32[$1 + 44 >> 2];
   $9 = HEAPF32[$1 + 32 >> 2];
   $10 = Math_fround($9 * $4);
   $17 = HEAPF32[$1 + 36 >> 2];
   $18 = Math_fround($5 * $17);
   $8 = Math_fround($7 + Math_fround($10 + $18));
   $23 = Math_fround(Math_fround($11 + Math_fround($14 + $16)) / $8);
   $12 = HEAPF32[$1 + 12 >> 2];
   $19 = HEAPF32[$1 >> 2];
   $20 = Math_fround($19 * $4);
   $21 = HEAPF32[$1 + 4 >> 2];
   $22 = Math_fround($5 * $21);
   $8 = Math_fround(Math_fround($12 + Math_fround($20 + $22)) / $8);
  }
  $5 = Math_fround($5 + Math_fround(10.0));
  $10 = Math_fround($7 + Math_fround($10 + Math_fround($5 * $17)));
  $4 = Math_fround($4 + Math_fround(10.0));
  $7 = Math_fround($7 + Math_fround(Math_fround($9 * $4) + $18));
  $9 = Math_fround(Math_fround(Math_fround($12 + Math_fround(Math_fround($19 * $4) + $22)) / $7) - $8);
  $4 = Math_fround(Math_fround(Math_fround($11 + Math_fround(Math_fround($13 * $4) + $16)) / $7) - $23);
  $4 = Math_fround(Math_fround($9 * $9) + Math_fround($4 * $4));
  $7 = Math_fround(Math_fround(Math_fround($12 + Math_fround($20 + Math_fround($5 * $21))) / $10) - $8);
  $5 = Math_fround(Math_fround(Math_fround($11 + Math_fround($14 + Math_fround($5 * $15))) / $10) - $23);
  $5 = Math_fround(Math_fround($7 * $7) + Math_fround($5 * $5));
  $0 = $4 < $5;
  HEAPF32[$3 + 4 >> 2] = Math_fround(Math_sqrt($0 ? $4 : $5)) * Math_fround(2.5399999618530273);
  HEAPF32[$3 >> 2] = Math_fround(Math_sqrt($0 ? $5 : $4)) * Math_fround(2.5399999618530273);
  __stack_pointer = $6 + 48 | 0;
 }
 
 function ar2SelectTemplate($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  block9 : {
   block : {
    if (($2 | 0) < 0) {
     break block
    }
    block5 : {
     switch ($2 | 0) {
     case 0:
      $11 = Math_fround(($5 | 0) / 2 | 0);
      $12 = Math_fround(($4 | 0) / 2 | 0);
      $13 = Math_fround(($5 | 0) / 8 | 0);
      $14 = Math_fround(($4 | 0) / 8 | 0);
      $16 = Math_fround((Math_imul($5, 7) | 0) / 8 | 0);
      $15 = Math_fround((Math_imul($4, 7) | 0) / 8 | 0);
      $2 = 0;
      $3 = -1;
      while (1) {
       block6 : {
        block8 : {
         block7 : {
          $1 = Math_imul($2, 24) + $0 | 0;
          switch (HEAP32[$1 + 12 >> 2] + 1 | 0) {
          case 0:
           break block6;
          case 1:
           break block7;
          default:
           break block8;
          };
         }
         $6 = HEAPF32[$1 + 16 >> 2];
         if ($6 < $14 | $6 > $15) {
          break block8
         }
         $7 = HEAPF32[$1 + 20 >> 2];
         if ($7 < $13 | $7 > $16) {
          break block8
         }
         $6 = Math_fround($6 - $12);
         $17 = Math_fround($6 * $6);
         $6 = Math_fround($7 - $11);
         $6 = Math_fround($17 + Math_fround($6 * $6));
         if (!($6 > $10)) {
          break block8
         }
         $3 = $2;
         $10 = $6;
        }
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      $2 = -1;
      if (($3 | 0) == -1) {
       break block9
      }
      HEAP32[(Math_imul($3, 24) + $0 | 0) + 12 >> 2] = 1;
      $2 = $3;
      break block9;
     case 1:
      $11 = Math_fround(($5 | 0) / 8 | 0);
      $12 = Math_fround(($4 | 0) / 8 | 0);
      $13 = Math_fround((Math_imul($5, 7) | 0) / 8 | 0);
      $14 = Math_fround((Math_imul($4, 7) | 0) / 8 | 0);
      $8 = -1;
      $2 = 0;
      while (1) {
       block10 : {
        block12 : {
         block11 : {
          $1 = Math_imul($2, 24) + $0 | 0;
          switch (HEAP32[$1 + 12 >> 2] + 1 | 0) {
          case 0:
           break block10;
          case 1:
           break block11;
          default:
           break block12;
          };
         }
         $6 = HEAPF32[$1 + 16 >> 2];
         if ($6 < $12 | $6 > $14) {
          break block12
         }
         $7 = HEAPF32[$1 + 20 >> 2];
         if ($7 < $11 | $7 > $13) {
          break block12
         }
         $6 = Math_fround($6 - HEAPF32[$3 >> 2]);
         $15 = Math_fround($6 * $6);
         $6 = Math_fround($7 - HEAPF32[$3 + 4 >> 2]);
         $6 = Math_fround($15 + Math_fround($6 * $6));
         if (!($6 > $10)) {
          break block12
         }
         $10 = $6;
         $8 = $2;
        }
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      $2 = -1;
      if (($8 | 0) == -1) {
       break block9
      }
      HEAP32[(Math_imul($8, 24) + $0 | 0) + 12 >> 2] = 1;
      $2 = $8;
      break block9;
     case 2:
      $11 = Math_fround(($5 | 0) / 8 | 0);
      $12 = Math_fround(($4 | 0) / 8 | 0);
      $13 = Math_fround((Math_imul($5, 7) | 0) / 8 | 0);
      $14 = Math_fround((Math_imul($4, 7) | 0) / 8 | 0);
      $8 = -1;
      $2 = 0;
      while (1) {
       block13 : {
        block15 : {
         block14 : {
          $1 = Math_imul($2, 24) + $0 | 0;
          switch (HEAP32[$1 + 12 >> 2] + 1 | 0) {
          case 0:
           break block13;
          case 1:
           break block14;
          default:
           break block15;
          };
         }
         $6 = HEAPF32[$1 + 16 >> 2];
         if ($6 < $12 | $6 > $14) {
          break block15
         }
         $7 = HEAPF32[$1 + 20 >> 2];
         if ($7 < $11 | $7 > $13) {
          break block15
         }
         $15 = $6;
         $6 = HEAPF32[$3 >> 2];
         $16 = HEAPF32[$3 + 4 >> 2];
         $6 = Math_fround(Math_fround(Math_fround($15 - $6) * Math_fround(HEAPF32[$3 + 12 >> 2] - $16)) - Math_fround(Math_fround($7 - $16) * Math_fround(HEAPF32[$3 + 8 >> 2] - $6)));
         $6 = Math_fround($6 * $6);
         if (!($6 > $10)) {
          break block15
         }
         $10 = $6;
         $8 = $2;
        }
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      $2 = -1;
      if (($8 | 0) == -1) {
       break block9
      }
      HEAP32[(Math_imul($8, 24) + $0 | 0) + 12 >> 2] = 1;
      $2 = $8;
      break block9;
     case 3:
      ar2GetVectorAngle($3, $3 + 8 | 0, $9 + 28 | 0, $9 + 24 | 0);
      ar2GetVectorAngle($3, $3 + 16 | 0, $9 + 20 | 0, $9 + 16 | 0);
      $13 = HEAPF32[$9 + 20 >> 2];
      $11 = HEAPF32[$9 + 24 >> 2];
      $10 = Math_fround($13 * $11);
      $14 = HEAPF32[$9 + 28 >> 2];
      $12 = HEAPF32[$9 + 16 >> 2];
      $6 = Math_fround($14 * $12);
      $18 = Math_fround($10 - $6) >= Math_fround(0.0);
      $19 = $18 ? 2 : 1;
      $20 = $18 ? 1 : 2;
      $17 = Math_fround($6 - $10);
      $21 = $3 + 24 | 0;
      $22 = Math_fround(($5 | 0) / 8 | 0);
      $23 = Math_fround(($4 | 0) / 8 | 0);
      $24 = Math_fround((Math_imul($5, 7) | 0) / 8 | 0);
      $25 = Math_fround((Math_imul($4, 7) | 0) / 8 | 0);
      $16 = Math_fround(-$13);
      $15 = Math_fround(-$14);
      $2 = -1;
      $5 = 0;
      $10 = Math_fround(0.0);
      while (1) {
       block16 : {
        block18 : {
         block17 : {
          $1 = Math_imul($5, 24) + $0 | 0;
          switch (HEAP32[$1 + 12 >> 2] + 1 | 0) {
          case 0:
           break block16;
          case 1:
           break block17;
          default:
           break block18;
          };
         }
         $6 = HEAPF32[$1 + 16 >> 2];
         if ($6 < $23 | $6 > $25) {
          break block18
         }
         $7 = HEAPF32[$1 + 20 >> 2];
         if ($7 < $22 | $7 > $24) {
          break block18
         }
         HEAPF32[$3 + 24 >> 2] = $6;
         HEAPF32[$3 + 28 >> 2] = HEAPF32[$1 + 20 >> 2];
         ar2GetVectorAngle($3, $21, $9 + 12 | 0, $9 + 8 | 0);
         $6 = HEAPF32[$9 + 12 >> 2];
         $7 = HEAPF32[$9 + 8 >> 2];
         block19 : {
          if (!(!$18 | !(Math_fround(Math_fround($6 * $11) + Math_fround($7 * $15)) >= Math_fround(0.0)))) {
           $1 = Math_fround(Math_fround($6 * $12) + Math_fround($7 * $16)) >= Math_fround(0.0);
           $8 = $1 ? 3 : 2;
           $4 = $1 ? 2 : 3;
           $1 = 1;
           break block19;
          }
          if (!(!(Math_fround(Math_fround($6 * $12) + Math_fround($7 * $16)) >= Math_fround(0.0)) | !($17 >= Math_fround(0.0)))) {
           $1 = Math_fround(Math_fround($6 * $11) + Math_fround($7 * $15)) >= Math_fround(0.0);
           $8 = $1 ? 3 : 1;
           $4 = $1 ? 1 : 3;
           $1 = 2;
           break block19;
          }
          if (!(Math_fround(Math_fround($14 * $7) - Math_fround($11 * $6)) >= Math_fround(0.0))) {
           break block18
          }
          $1 = 3;
          $4 = $20;
          $8 = $19;
          if (!(Math_fround(Math_fround($13 * $7) + Math_fround($12 * Math_fround(-$6))) >= Math_fround(0.0))) {
           break block18
          }
         }
         $26 = ($1 << 3) + $3 | 0;
         $1 = ($4 << 3) + $3 | 0;
         $6 = Math_fround(ar2GetTriangleArea($3, $26, $1) + ar2GetTriangleArea($3, $1, ($8 << 3) + $3 | 0));
         if (!($6 > $10)) {
          break block18
         }
         $10 = $6;
         $2 = $5;
        }
        $5 = $5 + 1 | 0;
        continue;
       }
       break;
      };
      if (($2 | 0) == -1) {
       break block9
      }
      HEAP32[(Math_imul($2, 24) + $0 | 0) + 12 >> 2] = 1;
      break block9;
     default:
      break block5;
     };
    }
    block25 : {
     while (1) {
      block20 : {
       block22 : {
        block21 : {
         $3 = Math_imul($8, 24) + $1 | 0;
         switch (HEAP32[$3 + 12 >> 2] + 1 | 0) {
         case 0:
          break block20;
         case 1:
          break block21;
         default:
          break block22;
         };
        }
        HEAP32[$3 + 12 >> 2] = 1;
        $2 = 0;
        while (1) {
         block24 : {
          block23 : {
           $4 = Math_imul($2, 24) + $0 | 0;
           switch (HEAP32[$4 + 12 >> 2] + 1 | 0) {
           case 0:
            break block22;
           case 1:
            break block23;
           default:
            break block24;
           };
          }
          if (HEAP32[$3 >> 2] != HEAP32[$4 >> 2] | HEAP32[$3 + 4 >> 2] != HEAP32[$4 + 4 >> 2]) {
           break block24
          }
          if (HEAP32[$3 + 8 >> 2] == HEAP32[$4 + 8 >> 2]) {
           break block25
          }
         }
         $2 = $2 + 1 | 0;
         continue;
        };
       }
       $8 = $8 + 1 | 0;
       continue;
      }
      break;
     };
     HEAP32[$1 + 12 >> 2] = -1;
     $2 = 0;
     $1 = HEAP32[19502];
     if (!$1) {
      (wasm2js_i32$0 = 78608, wasm2js_i32$1 = __time(0) - 1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      HEAP32[19653] = 0;
      $1 = HEAP32[19502];
     }
     $1 = $1 + 1 | 0;
     HEAP32[19502] = ($1 | 0) != 128 ? $1 : 0;
     $5 = 0;
     while (1) {
      block26 : {
       switch (HEAP32[(Math_imul($2, 24) + $0 | 0) + 12 >> 2] + 1 | 0) {
       case 1:
        $5 = $5 + 1 | 0;
       default:
        $2 = $2 + 1 | 0;
        continue;
       case 0:
        break block26;
       };
      }
      break;
     };
     if (!$5) {
      break block
     }
     $2 = __wasm_i64_mul(HEAP32[19652], HEAP32[19653], 1284865837, 1481765933);
     $1 = i64toi32_i32$HIGH_BITS;
     $2 = $2 + 1 | 0;
     $1 = $2 ? $1 : $1 + 1 | 0;
     HEAP32[19652] = $2;
     HEAP32[19653] = $1;
     $10 = Math_fround(Math_fround(Math_fround($5 | 0) * Math_fround($1 >>> 1 | 0)) * Math_fround(4.656612873077393e-10));
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
      $1 = ~~$10
     } else {
      $1 = -2147483648
     }
     $5 = 0;
     $3 = 0;
     while (1) {
      block30 : {
       block29 : {
        $4 = Math_imul($5, 24) + $0 | 0;
        $2 = HEAP32[$4 + 12 >> 2];
        switch ($2 + 1 | 0) {
        case 1:
         break block29;
        case 0:
         break block9;
        default:
         break block30;
        };
       }
       if (($1 | 0) == ($3 | 0)) {
        HEAP32[$4 + 12 >> 2] = 1;
        $2 = $5;
        break block9;
       }
       $3 = $3 + 1 | 0;
      }
      $5 = $5 + 1 | 0;
      continue;
     };
    }
    HEAP32[$4 + 12 >> 2] = 1;
    break block9;
   }
   $2 = -1;
  }
  __stack_pointer = $9 + 32 | 0;
  return $2;
 }
 
 function ar2GetVectorAngle($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
  $4 = Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$0 >> 2]);
  $5 = Math_fround($4 * $4);
  $4 = Math_fround(HEAPF32[$1 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]);
  $6 = Math_fround($5 + Math_fround($4 * $4));
  if ($6 != Math_fround(0.0)) {
   $5 = $4;
   $4 = Math_fround(Math_sqrt($6));
   HEAPF32[$2 >> 2] = $5 / $4;
   HEAPF32[$3 >> 2] = Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$0 >> 2]) / $4;
  }
 }
 
 function ar2GetTriangleArea($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0);
  $3 = HEAPF32[$0 >> 2];
  $4 = HEAPF32[$0 + 4 >> 2];
  $3 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2] - $3) * Math_fround(HEAPF32[$2 + 4 >> 2] - $4)) - Math_fround(Math_fround(HEAPF32[$2 >> 2] - $3) * Math_fround(HEAPF32[$1 + 4 >> 2] - $4))) * Math_fround(.5));
  return $3 < Math_fround(0.0) ? Math_fround(-$3) : $3;
 }
 
 function ar2GetBestMatchingSubFine($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0);
  $10 = HEAP32[$3 + 24 >> 2];
  block : {
   if (!(!(1 << $2 & 28704) | $2 >>> 0 > 14)) {
    $2 = HEAP32[$3 + 16 >> 2];
    $9 = 0 - $2 | 0;
    $8 = HEAP32[$3 + 20 >> 2] + 1 | 0;
    $15 = ($9 | 0) > ($8 | 0) ? $9 : $8;
    $8 = HEAP32[$3 + 8 >> 2];
    $7 = 0 - $8 | 0;
    $11 = HEAP32[$3 + 12 >> 2] + 1 | 0;
    $16 = ($7 | 0) > ($11 | 0) ? $7 : $11;
    $5 = ((Math_imul($5 - ($2 << 1) | 0, $1) + $0 | 0) + $4 | 0) - ($8 << 1) | 0;
    $1 = $1 << 1;
    $11 = 0;
    while (1) {
     $2 = $7;
     $8 = $5;
     if (($9 | 0) == ($15 | 0)) {
      break block
     }
     while (1) {
      if (($2 | 0) != ($16 | 0)) {
       $4 = HEAPU16[$10 >> 1];
       if (($4 | 0) != 4096) {
        $0 = HEAPU8[$8 | 0];
        $11 = $0 + $11 | 0;
        $14 = Math_imul($0, $4) + $14 | 0;
        $13 = Math_imul($0, $0) + $13 | 0;
       }
       $2 = $2 + 1 | 0;
       $10 = $10 + 2 | 0;
       $8 = $8 + 2 | 0;
       continue;
      }
      break;
     };
     $9 = $9 + 1 | 0;
     $5 = $1 + $5 | 0;
     continue;
    };
   }
   if ($2 >>> 0 <= 1) {
    $9 = 0 - HEAP32[$3 + 16 >> 2] | 0;
    $2 = HEAP32[$3 + 20 >> 2] + 1 | 0;
    $15 = ($2 | 0) < ($9 | 0) ? $9 : $2;
    while (1) {
     if (($9 | 0) == ($15 | 0)) {
      break block
     }
     $2 = HEAP32[$3 + 8 >> 2];
     $8 = 0 - $2 | 0;
     $7 = HEAP32[$3 + 12 >> 2] + 1 | 0;
     $16 = ($8 | 0) > ($7 | 0) ? $8 : $7;
     $2 = Math_imul((Math_imul(($9 << 1) + $5 | 0, $1) + $4 | 0) - ($2 << 1) | 0, 3) + $0 | 0;
     while (1) {
      if (($8 | 0) != ($16 | 0)) {
       $12 = HEAPU16[$10 >> 1];
       if (($12 | 0) != 4096) {
        $7 = (HEAPU8[$2 + 2 | 0] + (HEAPU8[$2 + 1 | 0] + HEAPU8[$2 | 0] | 0) >>> 0) / 3 | 0;
        $11 = $7 + $11 | 0;
        $14 = Math_imul($7, $12) + $14 | 0;
        $13 = Math_imul($7, $7) + $13 | 0;
       }
       $8 = $8 + 1 | 0;
       $10 = $10 + 2 | 0;
       $2 = $2 + 6 | 0;
       continue;
      }
      break;
     };
     $9 = $9 + 1 | 0;
     continue;
    };
   }
   if ($2 >>> 0 <= 3) {
    $9 = 0 - HEAP32[$3 + 16 >> 2] | 0;
    $2 = HEAP32[$3 + 20 >> 2] + 1 | 0;
    $15 = ($2 | 0) < ($9 | 0) ? $9 : $2;
    while (1) {
     if (($9 | 0) == ($15 | 0)) {
      break block
     }
     $2 = HEAP32[$3 + 8 >> 2];
     $8 = 0 - $2 | 0;
     $7 = HEAP32[$3 + 12 >> 2] + 1 | 0;
     $16 = ($8 | 0) > ($7 | 0) ? $8 : $7;
     $2 = ((Math_imul(($9 << 1) + $5 | 0, $1) + $4 << 2) - ($2 << 3) | 0) + $0 | 0;
     while (1) {
      if (($8 | 0) != ($16 | 0)) {
       $12 = HEAPU16[$10 >> 1];
       if (($12 | 0) != 4096) {
        $7 = (HEAPU8[$2 + 2 | 0] + (HEAPU8[$2 + 1 | 0] + HEAPU8[$2 | 0] | 0) >>> 0) / 3 | 0;
        $11 = $7 + $11 | 0;
        $14 = Math_imul($7, $12) + $14 | 0;
        $13 = Math_imul($7, $7) + $13 | 0;
       }
       $8 = $8 + 1 | 0;
       $10 = $10 + 2 | 0;
       $2 = $2 + 8 | 0;
       continue;
      }
      break;
     };
     $9 = $9 + 1 | 0;
     continue;
    };
   }
   if (($2 & -3) == 4) {
    $9 = 0 - HEAP32[$3 + 16 >> 2] | 0;
    $2 = HEAP32[$3 + 20 >> 2] + 1 | 0;
    $15 = ($2 | 0) < ($9 | 0) ? $9 : $2;
    while (1) {
     if (($9 | 0) == ($15 | 0)) {
      break block
     }
     $2 = HEAP32[$3 + 8 >> 2];
     $8 = 0 - $2 | 0;
     $7 = HEAP32[$3 + 12 >> 2] + 1 | 0;
     $16 = ($8 | 0) > ($7 | 0) ? $8 : $7;
     $2 = ((Math_imul(($9 << 1) + $5 | 0, $1) + $4 << 2) - ($2 << 3) | 0) + $0 | 0;
     while (1) {
      if (($8 | 0) != ($16 | 0)) {
       $12 = HEAPU16[$10 >> 1];
       if (($12 | 0) != 4096) {
        $7 = (HEAPU8[$2 + 3 | 0] + (HEAPU8[$2 + 2 | 0] + HEAPU8[$2 + 1 | 0] | 0) >>> 0) / 3 | 0;
        $11 = $7 + $11 | 0;
        $14 = Math_imul($7, $12) + $14 | 0;
        $13 = Math_imul($7, $7) + $13 | 0;
       }
       $8 = $8 + 1 | 0;
       $10 = $10 + 2 | 0;
       $2 = $2 + 8 | 0;
       continue;
      }
      break;
     };
     $9 = $9 + 1 | 0;
     continue;
    };
   }
   block2 : {
    switch ($2 - 7 | 0) {
    case 0:
     $9 = 0 - HEAP32[$3 + 16 >> 2] | 0;
     $2 = HEAP32[$3 + 20 >> 2] + 1 | 0;
     $15 = ($2 | 0) < ($9 | 0) ? $9 : $2;
     while (1) {
      if (($9 | 0) == ($15 | 0)) {
       break block
      }
      $8 = HEAP32[$3 + 8 >> 2];
      $2 = 0 - $8 | 0;
      $7 = HEAP32[$3 + 12 >> 2] + 1 | 0;
      $16 = ($2 | 0) > ($7 | 0) ? $2 : $7;
      $8 = ((Math_imul(($9 << 1) + $5 | 0, $1) + $4 << 1) - ($8 << 2) | 0) + $0 | 0;
      while (1) {
       if (($2 | 0) != ($16 | 0)) {
        $12 = HEAPU16[$10 >> 1];
        if (($12 | 0) != 4096) {
         $7 = HEAPU8[$8 + 1 | 0];
         $11 = $7 + $11 | 0;
         $14 = Math_imul($7, $12) + $14 | 0;
         $13 = Math_imul($7, $7) + $13 | 0;
        }
        $2 = $2 + 1 | 0;
        $10 = $10 + 2 | 0;
        $8 = $8 + 4 | 0;
        continue;
       }
       break;
      };
      $9 = $9 + 1 | 0;
      continue;
     };
    case 1:
     break block2;
    default:
     break block;
    };
   }
   $9 = 0 - HEAP32[$3 + 16 >> 2] | 0;
   $2 = HEAP32[$3 + 20 >> 2] + 1 | 0;
   $15 = ($2 | 0) < ($9 | 0) ? $9 : $2;
   while (1) {
    if (($9 | 0) == ($15 | 0)) {
     break block
    }
    $8 = HEAP32[$3 + 8 >> 2];
    $2 = 0 - $8 | 0;
    $7 = HEAP32[$3 + 12 >> 2] + 1 | 0;
    $16 = ($2 | 0) > ($7 | 0) ? $2 : $7;
    $8 = ((Math_imul(($9 << 1) + $5 | 0, $1) + $4 << 1) - ($8 << 2) | 0) + $0 | 0;
    while (1) {
     if (($2 | 0) != ($16 | 0)) {
      $12 = HEAPU16[$10 >> 1];
      if (($12 | 0) != 4096) {
       $7 = HEAPU8[$8 | 0];
       $11 = $7 + $11 | 0;
       $14 = Math_imul($7, $12) + $14 | 0;
       $13 = Math_imul($7, $7) + $13 | 0;
      }
      $2 = $2 + 1 | 0;
      $10 = $10 + 2 | 0;
      $8 = $8 + 4 | 0;
      continue;
     }
     break;
    };
    $9 = $9 + 1 | 0;
    continue;
   };
  }
  $0 = HEAP32[$3 + 36 >> 2];
  $1 = (Math_imul($11, $11) | 0) / ($0 | 0) | 0;
  if (($1 | 0) != ($13 | 0)) {
   $2 = Math_imul((Math_imul($14 - ((Math_imul(HEAP32[$3 + 32 >> 2], $11) | 0) / ($0 | 0) | 0) | 0, 100) | 0) / HEAP32[$3 + 28 >> 2] | 0, 100);
   $17 = Math_fround(Math_sqrt(Math_fround($13 - $1 | 0)));
   if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
    $0 = ~~$17
   } else {
    $0 = -2147483648
   }
   $0 = ($2 | 0) / ($0 | 0) | 0;
  } else {
   $0 = 0
  }
  HEAP32[$6 >> 2] = $0;
 }
 
 function ar2GetSearchPoint($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $10 = $5;
  block3 : {
   block2 : {
    block1 : {
     block : {
      if (!$1) {
       break block
      }
      $8 = HEAPF32[$4 + 8 >> 2];
      $9 = HEAPF32[$4 + 12 >> 2];
      if ((ar2MarkerCoord2ScreenCoord($0, $1, $8, $9, $7 + 28 | 0, $7 + 16 | 0) | 0) < 0) {
       break block
      }
      $6 = HEAPF32[$7 + 28 >> 2];
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $1 = ~~$6
      } else {
       $1 = -2147483648
      }
      HEAP32[$5 >> 2] = $1;
      $6 = HEAPF32[$7 + 16 >> 2];
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $1 = ~~$6
      } else {
       $1 = -2147483648
      }
      HEAP32[$5 + 4 >> 2] = $1;
      if (!$2) {
       break block1
      }
      if ((ar2MarkerCoord2ScreenCoord($0, $2, $8, $9, $7 + 24 | 0, $7 + 12 | 0) | 0) < 0) {
       break block1
      }
      $6 = HEAPF32[$7 + 28 >> 2];
      $6 = Math_fround(Math_fround($6 + $6) - HEAPF32[$7 + 24 >> 2]);
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $1 = ~~$6
      } else {
       $1 = -2147483648
      }
      HEAP32[$5 + 8 >> 2] = $1;
      $6 = HEAPF32[$7 + 16 >> 2];
      $6 = Math_fround(Math_fround($6 + $6) - HEAPF32[$7 + 12 >> 2]);
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $1 = ~~$6
      } else {
       $1 = -2147483648
      }
      HEAP32[$5 + 12 >> 2] = $1;
      if (!$3) {
       break block2
      }
      if ((ar2MarkerCoord2ScreenCoord($0, $3, $8, $9, $7 + 20 | 0, $7 + 8 | 0) | 0) < 0) {
       break block2
      }
      $6 = Math_fround(HEAPF32[$7 + 20 >> 2] + Math_fround(Math_fround(HEAPF32[$7 + 28 >> 2] * Math_fround(3.0)) + Math_fround(HEAPF32[$7 + 24 >> 2] * Math_fround(-3.0))));
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $0 = ~~$6
      } else {
       $0 = -2147483648
      }
      HEAP32[$5 + 16 >> 2] = $0;
      $6 = Math_fround(HEAPF32[$7 + 8 >> 2] + Math_fround(Math_fround(HEAPF32[$7 + 16 >> 2] * Math_fround(3.0)) + Math_fround(HEAPF32[$7 + 12 >> 2] * Math_fround(-3.0))));
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $0 = ~~$6
      } else {
       $0 = -2147483648
      }
      break block3;
     }
     HEAP32[$5 >> 2] = -1;
     HEAP32[$5 + 4 >> 2] = -1;
    }
    HEAP32[$5 + 8 >> 2] = -1;
    HEAP32[$5 + 12 >> 2] = -1;
   }
   HEAP32[$5 + 16 >> 2] = -1;
   $0 = -1;
  }
  HEAP32[$10 + 20 >> 2] = $0;
  __stack_pointer = $7 + 32 | 0;
 }
 
 function ar2MarkerCoord2ScreenCoord2($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  block : {
   if ($0) {
    arUtilMatMuldff($0 + 8 | 0, $1, $6 + 16 | 0);
    $1 = -1;
    $0 = $0 + 184 | 0;
    $7 = Math_fround(HEAPF32[$6 + 60 >> 2] + Math_fround(Math_fround(HEAPF32[$6 + 48 >> 2] * $2) + Math_fround($3 * HEAPF32[$6 + 52 >> 2])));
    $8 = Math_fround(Math_fround(HEAPF32[$6 + 28 >> 2] + Math_fround(Math_fround(HEAPF32[$6 + 16 >> 2] * $2) + Math_fround($3 * HEAPF32[$6 + 20 >> 2]))) / $7);
    $2 = Math_fround(Math_fround(HEAPF32[$6 + 44 >> 2] + Math_fround(Math_fround(HEAPF32[$6 + 32 >> 2] * $2) + Math_fround($3 * HEAPF32[$6 + 36 >> 2]))) / $7);
    if ((arParamIdeal2ObservLTf($0, $8, $2, $4, $5) | 0) < 0) {
     break block
    }
    if ((arParamObserv2IdealLTf($0, HEAPF32[$4 >> 2], HEAPF32[$5 >> 2], $6 + 12 | 0, $6 + 8 | 0) | 0) < 0) {
     break block
    }
    $3 = Math_fround($8 - HEAPF32[$6 + 12 >> 2]);
    $2 = Math_fround($2 - HEAPF32[$6 + 8 >> 2]);
    $1 = Math_fround(Math_fround($3 * $3) + Math_fround($2 * $2)) > Math_fround(1.0) ? -1 : 0;
    break block;
   }
   $7 = HEAPF32[$1 + 28 >> 2];
   $8 = HEAPF32[$1 + 16 >> 2];
   $10 = HEAPF32[$1 + 20 >> 2];
   $9 = Math_fround(HEAPF32[$1 + 44 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 32 >> 2] * $2) + Math_fround($3 * HEAPF32[$1 + 36 >> 2])));
   HEAPF32[$4 >> 2] = Math_fround(HEAPF32[$1 + 12 >> 2] + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $2) + Math_fround($3 * HEAPF32[$1 + 4 >> 2]))) / $9;
   HEAPF32[$5 >> 2] = Math_fround($7 + Math_fround(Math_fround($8 * $2) + Math_fround($3 * $10))) / $9;
   $1 = 0;
  }
  __stack_pointer = $6 - -64 | 0;
  return $1;
 }
 
 function ar2MarkerCoord2ScreenCoord($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  block : {
   if ($0) {
    arUtilMatMuldff($0 + 8 | 0, $1, $6);
    $7 = Math_fround(HEAPF32[$6 + 44 >> 2] + Math_fround(Math_fround(HEAPF32[$6 + 32 >> 2] * $2) + Math_fround($3 * HEAPF32[$6 + 36 >> 2])));
    $0 = arParamIdeal2ObservLTf($0 + 184 | 0, Math_fround(Math_fround(HEAPF32[$6 + 12 >> 2] + Math_fround(Math_fround(HEAPF32[$6 >> 2] * $2) + Math_fround($3 * HEAPF32[$6 + 4 >> 2]))) / $7), Math_fround(Math_fround(HEAPF32[$6 + 28 >> 2] + Math_fround(Math_fround(HEAPF32[$6 + 16 >> 2] * $2) + Math_fround($3 * HEAPF32[$6 + 20 >> 2]))) / $7), $4, $5) >> 31;
    break block;
   }
   $7 = HEAPF32[$1 + 28 >> 2];
   $9 = HEAPF32[$1 + 16 >> 2];
   $10 = HEAPF32[$1 + 20 >> 2];
   $8 = Math_fround(HEAPF32[$1 + 44 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 32 >> 2] * $2) + Math_fround($3 * HEAPF32[$1 + 36 >> 2])));
   HEAPF32[$4 >> 2] = Math_fround(HEAPF32[$1 + 12 >> 2] + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $2) + Math_fround($3 * HEAPF32[$1 + 4 >> 2]))) / $8;
   HEAPF32[$5 >> 2] = Math_fround($7 + Math_fround(Math_fround($9 * $2) + Math_fround($3 * $10))) / $8;
   $0 = 0;
  }
  __stack_pointer = $6 + 48 | 0;
  return $0;
 }
 
 function ar2GetImageValue($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $10 = -1;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  __stack_pointer = $5 - -64 | 0;
  $7 = HEAPF32[$0 + 44 >> 2];
  $11 = Math_fround(HEAPF32[$0 + 28 >> 2] - Math_fround($7 * $3));
  $7 = Math_fround(HEAPF32[$0 + 12 >> 2] - Math_fround($7 * $2));
  $8 = HEAPF32[$0 + 32 >> 2];
  $12 = Math_fround(Math_fround($8 * $3) - HEAPF32[$0 + 16 >> 2]);
  $8 = Math_fround(Math_fround($8 * $2) - HEAPF32[$0 >> 2]);
  $9 = HEAPF32[$0 + 36 >> 2];
  $3 = Math_fround(Math_fround($9 * $3) - HEAPF32[$0 + 20 >> 2]);
  $9 = Math_fround(Math_fround($9 * $2) - HEAPF32[$0 + 4 >> 2]);
  $2 = Math_fround(Math_fround($8 * $3) - Math_fround($9 * $12));
  block : {
   if ($2 != Math_fround(0.0)) {
    HEAPF32[$6 + 12 >> 2] = Math_fround(Math_fround($3 * $7) - Math_fround($9 * $11)) / $2;
    HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($8 * $11) - Math_fround($12 * $7)) / $2;
    $0 = 0;
    break block;
   }
   $0 = -1;
  }
  block1 : {
   if (($0 | 0) < 0) {
    break block1
   }
   $2 = HEAPF32[$1 + 12 >> 2];
   $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$6 + 12 >> 2] * $2) / Math_fround(25.399999618530273)) + Math_fround(.5));
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $0 = ~~$3
   } else {
    $0 = -2147483648
   }
   if (($0 | 0) < 0) {
    break block1
   }
   $13 = HEAP32[$1 + 4 >> 2];
   if (($0 | 0) >= ($13 | 0)) {
    break block1
   }
   $14 = HEAP32[$1 + 8 >> 2];
   $2 = Math_fround(Math_fround(Math_fround($14 | 0) + Math_fround(Math_fround($2 * HEAPF32[$6 + 8 >> 2]) / Math_fround(-25.399999618530273))) + Math_fround(.5));
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $5 = ~~$2
   } else {
    $5 = -2147483648
   }
   if (($5 | 0) < 0 | ($5 | 0) >= ($14 | 0)) {
    break block1
   }
   HEAP8[$4 | 0] = HEAPU8[$0 + (HEAP32[$1 >> 2] + Math_imul($5, $13) | 0) | 0];
   $10 = 0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $10;
 }
 
 function kpmDeleteHandle($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if (!$1) {
   return
  }
  $1 = HEAP32[$1 >> 2];
  if ($1) {
   std____2__unique_ptr_vision__VisualDatabaseImpl_2c_20std____2__default_delete_vision__VisualDatabaseImpl____reset_5babi_ne200100_5d_28vision__VisualDatabaseImpl__29($1, 0)
  }
  emscripten_builtin_free($1);
  emscripten_builtin_free(HEAP32[HEAP32[$0 >> 2] + 28 >> 2]);
  emscripten_builtin_free(HEAP32[HEAP32[$0 >> 2] + 36 >> 2]);
  emscripten_builtin_free(HEAP32[HEAP32[$0 >> 2] + 52 >> 2]);
  emscripten_builtin_free(HEAP32[HEAP32[$0 >> 2] + 44 >> 2]);
  emscripten_builtin_free(HEAP32[$0 >> 2]);
  HEAP32[$0 >> 2] = 0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______destroy_vector__operator_28_29_5babi_ne200100_5d_28_29($1 + 12 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______destroy_vector__operator_28_29_5babi_ne200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$1 >> 2];
  if ($0) {
   HEAP32[$1 + 4 >> 2] = $0;
   emscripten_builtin_free($0);
  }
 }
 
 function kpmDeleteRefDataSet($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if (!$0) {
   arLog(0, 3, 7497, 0);
   return;
  }
  $1 = HEAP32[$0 >> 2];
  if (!$1) {
   return
  }
  emscripten_builtin_free(HEAP32[$1 >> 2]);
  $1 = 0;
  while (1) {
   $2 = HEAP32[$0 >> 2];
   $3 = HEAP32[$2 + 8 >> 2];
   if (HEAP32[$2 + 12 >> 2] <= ($1 | 0)) {
    emscripten_builtin_free($3);
    emscripten_builtin_free(HEAP32[$0 >> 2]);
    HEAP32[$0 >> 2] = 0;
   } else {
    emscripten_builtin_free(HEAP32[Math_imul($1, 12) + $3 >> 2]);
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $3 = strlen($1);
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $11 = std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($7 + 8 | 0, $0);
  block : {
   if (HEAPU8[$11 | 0] != 1) {
    break block
   }
   $2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
   $4 = HEAP32[$2 + 24 >> 2];
   $8 = $1 + $3 | 0;
   $9 = (HEAP32[$2 + 4 >> 2] & 176) == 32 ? $8 : $1;
   $3 = $2;
   block1 : {
    if (HEAPU8[$3 + 80 | 0] == 1) {
     $2 = HEAP32[$3 + 76 >> 2];
     break block1;
    }
    $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char____widen_5babi_ne200100_5d_28char_29_20const($3, 32);
    HEAP32[$3 + 76 >> 2] = $2;
    HEAP8[$3 + 80 | 0] = 1;
   }
   $13 = $2 << 24 >> 24;
   $2 = 0;
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   block2 : {
    if (!$4) {
     break block2
    }
    $12 = HEAP32[$3 + 12 >> 2];
    $5 = $9 - $1 | 0;
    if (($5 | 0) > 0) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4, $1, $5) | 0) != ($5 | 0)) {
      break block2
     }
    }
    $1 = $8 - $1 | 0;
    if (($1 | 0) < ($12 | 0)) {
     $10 = $6 + 4 | 0;
     $5 = $12 - $1 | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28unsigned_20long_2c_20char_29($10, $5, $13);
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4, HEAP8[$6 + 15 | 0] < 0 ? HEAP32[$6 + 4 >> 2] : $10, $5) | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
     if (($1 | 0) != ($5 | 0)) {
      break block2
     }
    }
    $1 = $8 - $9 | 0;
    if (($1 | 0) > 0) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4, $9, $1) | 0) != ($1 | 0)) {
      break block2
     }
    }
    HEAP32[$3 + 12 >> 2] = 0;
    $2 = $4;
   }
   __stack_pointer = $6 + 16 | 0;
   if ($2) {
    break block
   }
   std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 5);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($11);
  __stack_pointer = $7 + 16 | 0;
  return $0;
 }
 
 function std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29($0, $1) {
  $1 = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | $1);
  HEAP32[$0 + 16 >> 2] = $1;
  if ($1 & HEAP32[$0 + 20 >> 2]) {
   $0 = __stack_pointer - 16 | 0;
   __stack_pointer = $0;
   HEAP32[$0 >> 2] = 27215;
   std____2____libcpp_verbose_abort_28char_20const__2c_20____29(33958, $0);
   wasm2js_trap();
  }
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____widen_5babi_ne200100_5d_28char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 12 | 0;
  std____2__ios_base__getloc_28_29_20const($3, $0);
  $0 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($3);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1) | 0;
  std____2__locale___locale_28_29($3);
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function std____2____throw_length_error_5babi_ne200100_5d_28char_20const__29($0) {
  $0 = std__logic_error__logic_error_28char_20const__29(__cxa_allocate_exception(8), $0);
  HEAP32[$0 >> 2] = 74324;
  __cxa_throw($0 | 0, 74336, 12);
  wasm2js_trap();
 }
 
 function std____throw_bad_array_new_length_5babi_ne200100_5d_28_29() {
  var $0 = 0;
  $0 = std__exception__exception_5babi_nn200100_5d_28_29(__cxa_allocate_exception(4));
  HEAP32[$0 >> 2] = 74124;
  HEAP32[$0 >> 2] = 74144;
  __cxa_throw($0 | 0, 74228, 13);
  wasm2js_trap();
 }
 
 function std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82768);
 }
 
 function std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 214748365) {
   std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = (HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0) / 20 | 0;
  $2 = $0 << 1;
  return $0 >>> 0 >= 107374182 ? 214748364 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__FeaturePoint___29($0, $1, $2, $3) {
  var $4 = 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   $4 = std____2__allocator_vision__FeaturePoint___allocate_5babi_ne200100_5d_28unsigned_20long_29($1)
  }
  HEAP32[$0 >> 2] = $4;
  $2 = Math_imul($2, 20) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = Math_imul($1, 20) + $4;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[$0 >> 2];
  $6 = HEAP32[$1 + 4 >> 2] + Math_imul(($5 - $2 | 0) / -20 | 0, 20) | 0;
  $3 = $6;
  while (1) {
   if (($2 | 0) != ($5 | 0)) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
    $4 = HEAP32[$2 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$3 + 12 >> 2] = $4;
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = $3 + 20 | 0;
    $2 = $2 + 20 | 0;
    continue;
   }
   break;
  };
  HEAP32[$1 + 4 >> 2] = $6;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 
 function std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint________split_buffer_28_29($0) {
  $1188($0, 20);
 }
 
 function std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29() {
  std____2____throw_length_error_5babi_ne200100_5d_28char_20const__29(12269);
  wasm2js_trap();
 }
 
 function std____2__allocator_vision__FeaturePoint___allocate_5babi_ne200100_5d_28unsigned_20long_29($0) {
  if ($0 >>> 0 >= 214748365) {
   std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  return operator_20new_28unsigned_20long_29(Math_imul($0, 20));
 }
 
 function std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 357913942) {
   std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = (HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
  $2 = $0 << 1;
  return $0 >>> 0 >= 178956970 ? 357913941 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__Point3d_float____29($0, $1, $2, $3) {
  var $4 = 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   $4 = std____2__allocator_vision__Point3d_float____allocate_5babi_ne200100_5d_28unsigned_20long_29($1)
  }
  HEAP32[$0 >> 2] = $4;
  $2 = Math_imul($2, 12) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = Math_imul($1, 12) + $4;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______swap_out_circular_buffer_28std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float______29($0, $1) {
  $1196($0, $1, 12, -12);
 }
 
 function std____2__allocator_vision__Point3d_float____allocate_5babi_ne200100_5d_28unsigned_20long_29($0) {
  if ($0 >>> 0 >= 357913942) {
   std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  return operator_20new_28unsigned_20long_29(Math_imul($0, 12));
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if (($1 | 0) < 0) {
   std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
  $2 = $0 << 1;
  return $0 >>> 0 >= 1073741823 ? 2147483647 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($0, $1, $2, $3) {
  HEAP32[$0 + 16 >> 2] = $3;
  $3 = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   $3 = operator_20new_28unsigned_20long_29($1)
  }
  HEAP32[$0 >> 2] = $3;
  $2 = $2 + $3 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1 + $3;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  $4 = HEAP32[$1 + 4 >> 2] + ($2 - $3 | 0) | 0;
  $3 = $3 - $2 | 0;
  if ($3) {
   wasm2js_memory_copy($4, $2, $3)
  }
  HEAP32[$1 + 4 >> 2] = $4;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 
 function std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($0) {
  $1188($0, 1);
 }
 
 function vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($0, $1, $2) {
  var $3 = 0;
  block : {
   if (HEAPU32[$0 + 16 >> 2] > $1 >>> 0) {
    $3 = HEAP32[$0 + 20 >> 2];
    if ($3 >>> 0 <= $2 >>> 0) {
     break block
    }
    return (HEAP32[$0 + 4 >> 2] + (Math_imul($1, $3) << 5) | 0) + ($2 << 5) | 0;
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18536), 18580), 3164), 218), 3735), 18698));
   abort();
   wasm2js_trap();
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18752), 18580), 3164), 219), 3735), 18803));
  abort();
  wasm2js_trap();
 }
 
 function std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image____resize_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2] - $4 >> 5;
  if ($3 >>> 0 < $1 >>> 0) {
   $7 = __stack_pointer - 32 | 0;
   __stack_pointer = $7;
   $3 = $1 - $3 | 0;
   $4 = HEAP32[$0 + 4 >> 2];
   block : {
    if ($3 >>> 0 <= HEAP32[$0 + 8 >> 2] - $4 >> 5 >>> 0) {
     $1 = HEAP32[$0 + 4 >> 2];
     $3 = $1 + ($3 << 5) | 0;
     while (1) {
      if (($1 | 0) == ($3 | 0)) {
       HEAP32[$0 + 4 >> 2] = $3
      } else {
       $1 = vision__Image__Image_28_29($1) + 32 | 0;
       continue;
      }
      break;
     };
     break block;
    }
    $1 = $3 + ($4 - HEAP32[$0 >> 2] >> 5) | 0;
    if ($1 >>> 0 >= 134217728) {
     std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
     wasm2js_trap();
    }
    $4 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
    $2 = $4 >> 4;
    $1 = $4 >>> 0 >= 2147483616 ? 134217727 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
    $4 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 5;
    $2 = $7 + 12 | 0;
    HEAP32[$2 + 16 >> 2] = $0;
    HEAP32[$2 + 12 >> 2] = 0;
    if ($1) {
     if ($1 >>> 0 >= 134217728) {
      std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
      wasm2js_trap();
     }
     $5 = operator_20new_28unsigned_20long_29($1 << 5);
    }
    HEAP32[$2 >> 2] = $5;
    $4 = ($4 << 5) + $5 | 0;
    HEAP32[$2 + 8 >> 2] = $4;
    HEAP32[$2 + 12 >> 2] = ($1 << 5) + $5;
    HEAP32[$2 + 4 >> 2] = $4;
    $1 = HEAP32[$2 + 8 >> 2];
    $3 = $1 + ($3 << 5) | 0;
    while (1) {
     if (($1 | 0) != ($3 | 0)) {
      $1 = vision__Image__Image_28_29($1) + 32 | 0;
      continue;
     }
     break;
    };
    HEAP32[$2 + 8 >> 2] = $3;
    $3 = $0;
    $6 = __stack_pointer - 32 | 0;
    __stack_pointer = $6;
    $5 = HEAP32[$0 >> 2];
    $1 = $5;
    $4 = HEAP32[$0 + 4 >> 2];
    $8 = HEAP32[$2 + 4 >> 2] + ($1 - $4 | 0) | 0;
    $0 = $8;
    HEAP32[$6 + 28 >> 2] = $0;
    HEAP32[$6 + 24 >> 2] = $0;
    HEAP32[$6 + 8 >> 2] = $3;
    HEAP32[$6 + 16 >> 2] = $6 + 28;
    HEAP32[$6 + 12 >> 2] = $6 + 24;
    while (1) {
     if (($5 | 0) != ($4 | 0)) {
      HEAP32[$0 + 24 >> 2] = 0;
      HEAP32[$0 + 28 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      HEAP32[$0 + 12 >> 2] = 0;
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[$5 + 16 >> 2];
      HEAP32[$0 + 20 >> 2] = HEAP32[$5 + 20 >> 2];
      std____2__shared_ptr_vision__Keyframe_96____operator__5babi_ne200100_5d_28std____2__shared_ptr_vision__Keyframe_96___20const__29($0 + 24 | 0, $5 + 24 | 0);
      $0 = HEAP32[$6 + 28 >> 2] + 32 | 0;
      HEAP32[$6 + 28 >> 2] = $0;
      $5 = $5 + 32 | 0;
      continue;
     }
     break;
    };
    HEAP8[$6 + 20 | 0] = 1;
    while (1) {
     if (($1 | 0) != ($4 | 0)) {
      $1 = vision__Image___Image_28_29($1) + 32 | 0;
      continue;
     }
     break;
    };
    if (!HEAPU8[$6 + 20 | 0]) {
     $1 = HEAP32[HEAP32[$6 + 16 >> 2] >> 2];
     $0 = HEAP32[HEAP32[$6 + 12 >> 2] >> 2];
     while (1) {
      if (($0 | 0) != ($1 | 0)) {
       $1 = vision__Image___Image_28_29($1 - 32 | 0);
       continue;
      }
      break;
     };
    }
    __stack_pointer = $6 + 32 | 0;
    HEAP32[$2 + 4 >> 2] = $8;
    $0 = HEAP32[$3 >> 2];
    HEAP32[$3 + 4 >> 2] = $0;
    HEAP32[$3 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$2 + 8 >> 2] = $0;
    $0 = HEAP32[$3 + 8 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $0;
    HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
    $0 = HEAP32[$2 + 4 >> 2];
    while (1) {
     $1 = HEAP32[$2 + 8 >> 2];
     if (($1 | 0) != ($0 | 0)) {
      $1 = $1 - 32 | 0;
      HEAP32[$2 + 8 >> 2] = $1;
      vision__Image___Image_28_29($1);
      continue;
     }
     break;
    };
    $0 = HEAP32[$2 >> 2];
    if ($0) {
     emscripten_builtin_free($0)
    }
   }
   __stack_pointer = $7 + 32 | 0;
   return;
  }
  if ($1 >>> 0 < $3 >>> 0) {
   std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image______base_destruct_at_end_5babi_ne200100_5d_28vision__Image__29($0, $4 + ($1 << 5) | 0)
  }
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char____widen_5babi_ne200100_5d_28char_29_20const(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 10);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = $1 + 8 | 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($2, $0);
  block : {
   if (!HEAPU8[$2 | 0]) {
    break block
   }
   $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____ostreambuf_iterator_5babi_nn200100_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($1 + 4 | 0, $0);
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28char_29($2, $3);
   if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____failed_5babi_nn200100_5d_28_29_20const($2)) {
    break block
   }
   std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 1);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29($0);
 }
 
 function std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image______base_destruct_at_end_5babi_ne200100_5d_28vision__Image__29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $2 = vision__Image___Image_28_29($2 - 32 | 0);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($0, $1) {
  if (HEAPU32[$0 + 8 >> 2] <= $1 >>> 0) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21818), 21855), 3164), 125), 3735), 21955));
   abort();
   wasm2js_trap();
  }
  return HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 12 >> 2], $1) | 0;
 }
 
 function vision__DoGScaleInvariantDetector__setMaxNumFeaturePoints_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 84 >> 2] = $1;
  std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____reserve_28unsigned_20long_29($0 + 60 | 0, $1);
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] - $3 >> 2;
  if ($2 >>> 0 < $1 >>> 0) {
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $1 = $1 - $2 | 0;
   $4 = HEAP32[$0 + 4 >> 2];
   block : {
    if ($1 >>> 0 <= HEAP32[$0 + 8 >> 2] - $4 >> 2 >>> 0) {
     std____2__vector_float_2c_20std____2__allocator_float______construct_at_end_28unsigned_20long_29($0, $1);
     break block;
    }
    $2 = $1 + ($4 - HEAP32[$0 >> 2] >> 2) | 0;
    if ($2 >>> 0 >= 1073741824) {
     std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
     wasm2js_trap();
    }
    $4 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
    $5 = $4 >> 1;
    $2 = std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($3 + 12 | 0, $4 >>> 0 >= 2147483644 ? 1073741823 : $2 >>> 0 < $5 >>> 0 ? $5 : $2, HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2, $0);
    std____2____split_buffer_float_2c_20std____2__allocator_float_______construct_at_end_28unsigned_20long_29($2, $1);
    std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $2);
    std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($2);
   }
   __stack_pointer = $3 + 32 | 0;
   return;
  }
  if ($1 >>> 0 < $2 >>> 0) {
   HEAP32[$0 + 4 >> 2] = $3 + ($1 << 2)
  }
 }
 
 function std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____reserve_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block : {
   $3 = HEAP32[$0 >> 2];
   if ((HEAP32[$0 + 8 >> 2] - $3 | 0) / 36 >>> 0 < $1 >>> 0) {
    if ($1 >>> 0 >= 119304648) {
     break block
    }
    $4 = $0;
    $0 = std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint___29($2 + 12 | 0, $1, (HEAP32[$0 + 4 >> 2] - $3 | 0) / 36 | 0, $0);
    std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_____29($4, $0);
    std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint________split_buffer_28_29($0);
   }
   __stack_pointer = $2 + 32 | 0;
   return;
  }
  std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
  wasm2js_trap();
 }
 
 function std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image_____vector_5babi_ne200100_5d_28_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  if (HEAP32[$0 >> 2]) {
   std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image______base_destruct_at_end_5babi_ne200100_5d_28vision__Image__29($0, HEAP32[$0 >> 2]);
   emscripten_builtin_free(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________base_destruct_at_end_5babi_ne200100_5d_28std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_______29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $2 = std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________vector_5babi_ne200100_5d_28_29($2 - 12 | 0);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________base_destruct_at_end_5babi_ne200100_5d_28std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_____29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $2 = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 - 12 | 0);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function vision__GaussianScaleSpacePyramid__effectiveSigma_28unsigned_20long_2c_20float_29_20const($0, $1, $2) {
  var $3 = 0.0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = 0.0, $9 = 0, $10 = 0, $11 = 0.0;
  block : {
   if ($2 >= Math_fround(0.0)) {
    if (!(Math_fround(HEAP32[$0 + 20 >> 2]) > $2)) {
     break block
    }
    $6 = HEAP32[$0 + 24 >> 2];
    $5 = HEAPF32[$0 + 24 >> 2];
    $4 = (wasm2js_scratch_store_f32($2), wasm2js_scratch_load_i32(2));
    $10 = zeroinfnan($4);
    block5 : {
     block4 : {
      block2 : {
       block3 : {
        $0 = $6;
        block1 : {
         if ($0 - 2139095040 >>> 0 >= 2164260864) {
          if ($10) {
           break block1
          }
          break block2;
         }
         if (!$10) {
          break block3
         }
        }
        $7 = Math_fround(1.0);
        if (($0 | 0) == 1065353216) {
         break block4
        }
        $6 = $4 << 1;
        if (!$6) {
         break block4
        }
        $0 = $0 << 1;
        $5 = Math_fround($5 + $2);
        if (!($6 >>> 0 < 4278190081 & $0 >>> 0 <= 4278190080)) {
         break block5
        }
        if (($0 | 0) == 2130706432) {
         break block4
        }
        $5 = ($4 | 0) < 0 ^ $0 >>> 0 < 2130706432 ? Math_fround(0.0) : Math_fround($2 * $2);
        break block5;
       }
       if (zeroinfnan($0)) {
        $7 = Math_fround($5 * $5);
        if (($0 | 0) < 0) {
         $7 = (checkint($4) | 0) == 1 ? Math_fround(-$7) : $7
        }
        if (($4 | 0) >= 0) {
         break block4
        }
        $5 = fp_barrierf(Math_fround(Math_fround(1.0) / $7));
        break block5;
       }
       if (($0 | 0) < 0) {
        $0 = checkint($4);
        if (!$0) {
         $5 = __math_invalidf($5);
         break block5;
        }
        $9 = ($0 | 0) == 1 ? 65536 : 0;
        $0 = $6 & 2147483647;
       }
       if ($0 >>> 0 > 8388607) {
        break block2
       }
       $0 = ((wasm2js_scratch_store_f32(Math_fround($5 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647) - 192937984 | 0;
      }
      $6 = $0 - 1060306944 | 0;
      $4 = $6 >>> 15 & 240;
      $3 = +(wasm2js_scratch_store_i32(2, $0 - ($6 & -8388608) | 0), wasm2js_scratch_load_f32()) * HEAPF64[$4 + 57128 >> 3] + -1.0;
      $8 = $3 * $3;
      $3 = ((HEAPF64[7173] * $3 + HEAPF64[7174]) * ($8 * $8) + ((HEAPF64[7175] * $3 + HEAPF64[7176]) * $8 + (HEAPF64[7177] * $3 + (HEAPF64[$4 + 57136 >> 3] + +($6 >> 23))))) * +$2;
      wasm2js_scratch_store_f64(+$3);
      $0 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
      block6 : {
       $0 = $0 & 2147450880;
       if (($0 | 0) == 1079967744 | $0 >>> 0 < 1079967744) {
        break block6
       }
       if ($3 > 127.99999995700433) {
        $5 = __math_xflowf($9, Math_fround(1584563250285286751870879.0e5));
        break block5;
       }
       if (!($3 <= -150.0)) {
        break block6
       }
       $5 = __math_xflowf($9, Math_fround(2.524354896707238e-29));
       break block5;
      }
      $11 = $3;
      $3 = HEAPF64[7096];
      $8 = $11 + $3;
      $3 = $11 - ($8 - $3);
      $3 = (HEAPF64[7097] * $3 + HEAPF64[7098]) * ($3 * $3) + (HEAPF64[7099] * $3 + 1.0);
      wasm2js_scratch_store_f64(+$8);
      wasm2js_scratch_load_i32(1) | 0;
      $4 = wasm2js_scratch_load_i32(0) | 0;
      $0 = $9 + $4 | 0;
      $4 = ($4 & 31) << 3;
      $9 = HEAP32[$4 + 56512 >> 2];
      $6 = $9;
      $0 = HEAP32[$4 + 56516 >> 2] + ($0 << 15) | 0;
      wasm2js_scratch_store_i32(0, $6 | 0);
      wasm2js_scratch_store_i32(1, ($6 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0) | 0);
      $7 = Math_fround($3 * +wasm2js_scratch_load_f64());
     }
     $5 = $7;
    }
    return Math_fround($5 * Math_fround(1 << $1));
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19065), 18580), 3164), 232), 3735), 19258));
   abort();
   wasm2js_trap();
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18752), 18580), 3164), 233), 3735), 19281));
  abort();
  wasm2js_trap();
 }
 
 function vision__DoGScaleInvariantDetector__FeaturePoint__20std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____emplace_back_vision__DoGScaleInvariantDetector__FeaturePoint_20const___28vision__DoGScaleInvariantDetector__FeaturePoint_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = $0;
  $2 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($2 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    wasm2js_memory_copy($2, $1, 36);
    $0 = $2 + 36 | 0;
    break block;
   }
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $2 = std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint___29($3 + 12 | 0, std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, ((HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 36 | 0) + 1 | 0), (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 36 | 0, $0);
   $4 = HEAP32[$2 + 8 >> 2];
   wasm2js_memory_copy($4, $1, 36);
   HEAP32[$2 + 8 >> 2] = $4 + 36;
   std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_____29($0, $2);
   $0 = HEAP32[$0 + 4 >> 2];
   std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint________split_buffer_28_29($2);
   __stack_pointer = $3 + 32 | 0;
  }
  HEAP32[$5 + 4 >> 2] = $0;
 }
 
 function float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0;
  $12 = HEAP32[$0 + 24 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $7 = HEAP32[$0 + 8 >> 2];
  $9 = HEAP32[$0 + 12 >> 2];
  block10 : {
   block11 : {
    block9 : {
     block8 : {
      block7 : {
       block6 : {
        block5 : {
         block4 : {
          block3 : {
           block2 : {
            block1 : {
             block : {
              $4 = Math_fround(Math_floor($1));
              if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
               $0 = ~~$4
              } else {
               $0 = -2147483648
              }
              if (($0 | 0) == ((Math_fround(Math_abs($1)) < Math_fround(2147483648.0) ? ~~$1 : -2147483648) | 0)) {
               $4 = Math_fround(Math_floor($2));
               if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
                $3 = ~~$4
               } else {
                $3 = -2147483648
               }
               if (($3 | 0) != ((Math_fround(Math_abs($2)) < Math_fround(2147483648.0) ? ~~$2 : -2147483648) | 0)) {
                break block
               }
               if (($3 | 0) < 0 | $3 >>> 0 >= $7 >>> 0) {
                break block1
               }
               $10 = $3 + 1 | 0;
               if ($7 >>> 0 <= $10 >>> 0) {
                break block2
               }
               if (($0 | 0) < 0 | $0 >>> 0 >= $6 >>> 0) {
                break block3
               }
               $7 = $6;
               $6 = $0 + 1 | 0;
               if ($7 >>> 0 <= $6 >>> 0) {
                break block4
               }
               $5 = Math_fround(Math_fround($6 >>> 0) - $1);
               $8 = Math_fround(Math_fround($10 >>> 0) - $2);
               $4 = Math_fround($5 * $8);
               if (!($4 >= Math_fround(0.0)) | !(+$4 <= 1.0001)) {
                break block5
               }
               $11 = Math_fround($1 - Math_fround($0 >>> 0));
               $1 = Math_fround($11 * $8);
               if (!($1 >= Math_fround(0.0)) | !(+$1 <= 1.0001)) {
                break block6
               }
               $8 = $5;
               $5 = Math_fround($2 - Math_fround($3 >>> 0));
               $2 = Math_fround($8 * $5);
               if (!($2 >= Math_fround(0.0)) | !(+$2 <= 1.0001)) {
                break block7
               }
               $5 = Math_fround($11 * $5);
               if (!($5 >= Math_fround(0.0)) | !(+$5 <= 1.0001)) {
                break block8
               }
               if (!(+Math_fround($5 + Math_fround($2 + Math_fround($4 + $1))) <= 1.0001)) {
                break block9
               }
               $3 = Math_imul($3, $9) + $12 | 0;
               $7 = $3 + $9 | 0;
               $6 = $6 << 2;
               $0 = $0 << 2;
               $1 = Math_fround(Math_fround($5 * HEAPF32[$7 + $6 >> 2]) + Math_fround(Math_fround($2 * HEAPF32[$0 + $7 >> 2]) + Math_fround(Math_fround($4 * HEAPF32[$0 + $3 >> 2]) + Math_fround($1 * HEAPF32[$3 + $6 >> 2]))));
               break block10;
              }
              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22066), 22118), 3164), 69), 3735), 22243));
              break block11;
             }
             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22273), 22118), 3164), 70), 3735), 22243));
             break block11;
            }
            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22383), 22118), 3164), 79), 3735), 22429));
            break block11;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22446), 22118), 3164), 80), 3735), 22506));
           break block11;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22530), 22118), 3164), 81), 3735), 22575));
          break block11;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22592), 22118), 3164), 82), 3735), 22651));
         break block11;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22675), 22118), 3164), 94), 3735), 22722));
        break block11;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22735), 22118), 3164), 95), 3735), 22722));
       break block11;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22782), 22118), 3164), 96), 3735), 22722));
      break block11;
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22829), 22118), 3164), 97), 3735), 22722));
     break block11;
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22876), 22118), 3164), 98), 3735), 22722));
   }
   abort();
   wasm2js_trap();
  }
  return $1;
 }
 
 function std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____swap_28std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
 }
 
 function std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint___29($0, $1, $2, $3) {
  var $4 = 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   if ($1 >>> 0 >= 119304648) {
    std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
    wasm2js_trap();
   }
   $4 = operator_20new_28unsigned_20long_29(Math_imul($1, 36));
  }
  HEAP32[$0 >> 2] = $4;
  $2 = Math_imul($2, 36) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = Math_imul($1, 36) + $4;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_____29($0, $1) {
  $1196($0, $1, 36, -36);
 }
 
 function std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint________split_buffer_28_29($0) {
  $1188($0, 36);
 }
 
 function std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29() {
  std____2____throw_length_error_5babi_ne200100_5d_28char_20const__29(21695);
  wasm2js_trap();
 }
 
 function vision__ComputeSubpixelDerivatives_28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20vision__Image_20const__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0;
  block1 : {
   if (!(($6 | 0) <= 0 | HEAPU32[$5 + 4 >> 2] <= $6 + 1 >>> 0)) {
    if (($7 | 0) <= 0) {
     break block1
    }
    $9 = $7 + 1 | 0;
    if ($9 >>> 0 >= HEAPU32[$5 + 8 >> 2]) {
     break block1
    }
    $10 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $7 - 1 | 0);
    $7 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $7);
    $9 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $9);
    $6 = $6 << 2;
    $5 = $6 + $7 | 0;
    $7 = $5 - 4 | 0;
    HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$5 + 4 >> 2] - HEAPF32[$7 >> 2]) * Math_fround(.5);
    $11 = $1;
    $0 = $6 + $9 | 0;
    $1 = $6 + $10 | 0;
    HEAPF32[$11 >> 2] = Math_fround(HEAPF32[$0 >> 2] - HEAPF32[$1 >> 2]) * Math_fround(.5);
    $8 = HEAPF32[$5 >> 2];
    HEAPF32[$2 >> 2] = Math_fround(HEAPF32[$7 >> 2] - Math_fround($8 + $8)) + HEAPF32[$5 + 4 >> 2];
    $8 = HEAPF32[$5 >> 2];
    HEAPF32[$3 >> 2] = Math_fround(HEAPF32[$1 >> 2] - Math_fround($8 + $8)) + HEAPF32[$0 >> 2];
    HEAPF32[$4 >> 2] = Math_fround(Math_fround(HEAPF32[$1 - 4 >> 2] + HEAPF32[$0 + 4 >> 2]) - Math_fround(HEAPF32[$1 + 4 >> 2] + HEAPF32[$0 - 4 >> 2])) * Math_fround(.25);
    return;
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20552), 18908), 3164), 284), 3735), 19893));
   abort();
   wasm2js_trap();
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20630), 18908), 3164), 285), 3735), 20020));
  abort();
  wasm2js_trap();
 }
 
 function std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________vector_5babi_ne200100_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  if (HEAP32[$2 >> 2]) {
   std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________base_destruct_at_end_5babi_ne200100_5d_28std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_____29($2, HEAP32[$2 >> 2]);
   emscripten_builtin_free(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float______construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $2 + ($1 << 2) | 0;
  while (1) {
   if (($1 | 0) == ($2 | 0)) {
    HEAP32[$0 + 4 >> 2] = $1
   } else {
    HEAP32[$2 >> 2] = 0;
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($0, $1, $2, $3) {
  var $4 = 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   $4 = std____2__allocator_float___allocate_5babi_ne200100_5d_28unsigned_20long_29($1)
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 2) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = ($1 << 2) + $4;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2____split_buffer_float_2c_20std____2__allocator_float_______construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 8 >> 2];
  $1 = $2 + ($1 << 2) | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$2 >> 2] = 0;
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 8 >> 2] = $1;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] - $3 | 0;
  $4 = HEAP32[$1 + 4 >> 2] - $2 | 0;
  if ($2) {
   wasm2js_memory_copy($4, $3, $2)
  }
  HEAP32[$1 + 4 >> 2] = $4;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 
 function std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($0) {
  $1188($0, 4);
 }
 
 function std____2__allocator_float___allocate_5babi_ne200100_5d_28unsigned_20long_29($0) {
  if ($0 >>> 0 >= 1073741824) {
   std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  return operator_20new_28unsigned_20long_29($0 << 2);
 }
 
 function std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $2 + Math_imul($1, 12) | 0;
  while (1) {
   if (($1 | 0) == ($2 | 0)) {
    HEAP32[$0 + 4 >> 2] = $1
   } else {
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $2 + 12 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 357913942) {
   std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = (HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
  $2 = $0 << 1;
  return $0 >>> 0 >= 178956970 ? 357913941 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____________construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 8 >> 2];
  $1 = $2 + Math_imul($1, 12) | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $2 + 12 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 8 >> 2] = $1;
 }
 
 function std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 119304648) {
   std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = (HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0) / 36 | 0;
  $2 = $0 << 1;
  return $0 >>> 0 >= 59652323 ? 119304647 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____29($0, $1, $2, $3) {
  var $4 = 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   $4 = std____2__allocator_std____2__pair_float_2c_20unsigned_20long____allocate_5babi_ne200100_5d_28unsigned_20long_29($1)
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 3) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = ($1 << 3) + $4;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________split_buffer_28_29($0) {
  $1188($0, 8);
 }
 
 function std____2__allocator_std____2__pair_float_2c_20unsigned_20long____allocate_5babi_ne200100_5d_28unsigned_20long_29($0) {
  if ($0 >>> 0 >= 536870912) {
   std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  return operator_20new_28unsigned_20long_29($0 << 3);
 }
 
 function bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0);
  $2 = HEAPF32[$0 >> 2];
  $3 = HEAPF32[$1 >> 2];
  if ($2 < $3) {
   return 1
  }
  if ($2 > $3) {
   return 0
  }
  return HEAPU32[$0 + 4 >> 2] < HEAPU32[$1 + 4 >> 2];
 }
 
 function bool_20std____2____sort3_5babi_ne200100_5d_std____2___ClassicAlgPolicy_2c_20std____2__greater_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_200__28std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__greater_std____2__pair_float_2c_20unsigned_20long____29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = 0;
  $3 = bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($0, $1);
  $5 = bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($1, $2);
  block : {
   if (!$3) {
    $3 = 0;
    if (!$5) {
     break block
    }
    $4 = HEAPF32[$1 >> 2];
    HEAPF32[$1 >> 2] = HEAPF32[$2 >> 2];
    HEAPF32[$2 >> 2] = $4;
    $3 = HEAP32[$1 + 4 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    $3 = 1;
    if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($0, $1)) {
     break block
    }
    $4 = HEAPF32[$0 >> 2];
    HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
    HEAPF32[$1 >> 2] = $4;
    $2 = HEAP32[$0 + 4 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    return 1;
   }
   $4 = HEAPF32[$0 >> 2];
   if ($5) {
    HEAPF32[$0 >> 2] = HEAPF32[$2 >> 2];
    HEAPF32[$2 >> 2] = $4;
    $1 = HEAP32[$0 + 4 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    return 1;
   }
   HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
   HEAPF32[$1 >> 2] = $4;
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $3 = 1;
   if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($1, $2)) {
    break block
   }
   $4 = HEAPF32[$1 >> 2];
   HEAPF32[$1 >> 2] = HEAPF32[$2 >> 2];
   HEAPF32[$2 >> 2] = $4;
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
  }
  return $3;
 }
 
 function vision__BinomialPyramid32f___BinomialPyramid32f_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 22948;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 56 | 0);
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 44 | 0);
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 32 | 0);
  return vision__GaussianScaleSpacePyramid___GaussianScaleSpacePyramid_28_29($0) | 0;
 }
 
 function vision__GaussianScaleSpacePyramid___GaussianScaleSpacePyramid_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 22932;
  std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image_____vector_5babi_ne200100_5d_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function vision__BinomialPyramid32f___BinomialPyramid32f_28_29_372($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(vision__BinomialPyramid32f___BinomialPyramid32f_28_29($0));
 }
 
 function vision__BinomialPyramid32f__apply_filter_28vision__Image__2c_20vision__Image_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0);
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  if (HEAP32[$1 >> 2] == 2) {
   block8 : {
    block1 : {
     switch (HEAP32[$2 >> 2]) {
     case 2:
      $12 = HEAP32[$1 + 24 >> 2];
      $0 = HEAP32[$0 + 44 >> 2];
      $9 = HEAP32[$2 + 24 >> 2];
      $11 = HEAP32[$2 + 8 >> 2];
      block7 : {
       $7 = HEAP32[$2 + 4 >> 2];
       if ($7 >>> 0 > 4) {
        if ($11 >>> 0 > 4) {
         $6 = $7 - 2 | 0;
         $1 = $0;
         label : while (1) {
          block4 : {
           if (($4 | 0) == ($11 | 0)) {
            $5 = 0;
            $2 = $12;
            $6 = $0;
            $3 = $7 << 2;
            $1 = $6 + $3 | 0;
            $4 = $1;
            $3 = $1 + $3 | 0;
            $9 = $3;
            break block4;
           }
           $5 = 2;
           $2 = $9 + (Math_imul($4, $7) << 2) | 0;
           $8 = HEAPF32[$2 >> 2];
           HEAPF32[$1 >> 2] = HEAPF32[$2 + 8 >> 2] + Math_fround($8 + Math_fround(Math_fround($8 * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$2 + 4 >> 2]) * Math_fround(4.0))));
           $8 = HEAPF32[$2 >> 2];
           HEAPF32[$1 + 4 >> 2] = HEAPF32[$2 + 12 >> 2] + Math_fround($8 + Math_fround(Math_fround(HEAPF32[$2 + 4 >> 2] * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$2 + 8 >> 2]) * Math_fround(4.0))));
           $3 = $1 + 8 | 0;
           while (1) if (($5 | 0) == ($6 | 0)) {
            $1 = $2 + ($7 << 2) | 0;
            $5 = $1 - 4 | 0;
            $8 = HEAPF32[$5 >> 2];
            $15 = Math_fround(HEAPF32[$2 + ($6 << 2) >> 2] * Math_fround(6.0));
            $2 = $1 - 12 | 0;
            HEAPF32[$3 >> 2] = $8 + Math_fround(HEAPF32[$1 - 16 >> 2] + Math_fround($15 + Math_fround(Math_fround($8 + HEAPF32[$2 >> 2]) * Math_fround(4.0))));
            $8 = HEAPF32[$5 >> 2];
            HEAPF32[$3 + 4 >> 2] = $8 + Math_fround(HEAPF32[$2 >> 2] + Math_fround(Math_fround($8 * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$1 - 8 >> 2]) * Math_fround(4.0))));
            $4 = $4 + 1 | 0;
            $1 = $3 + 8 | 0;
            continue label;
           } else {
            $1 = $2 + ($5 << 2) | 0;
            $5 = $5 + 1 | 0;
            HEAPF32[$3 >> 2] = HEAPF32[$1 + 8 >> 2] + Math_fround(HEAPF32[$1 - 8 >> 2] + Math_fround(Math_fround(HEAPF32[$1 >> 2] * Math_fround(6.0)) + Math_fround(Math_fround(HEAPF32[$1 - 4 >> 2] + HEAPF32[$2 + ($5 << 2) >> 2]) * Math_fround(4.0))));
            $3 = $3 + 4 | 0;
            continue;
           };
          }
          break;
         };
         while (1) {
          if (($5 | 0) != ($7 | 0)) {
           $8 = HEAPF32[$6 >> 2];
           HEAPF32[$2 >> 2] = Math_fround(HEAPF32[$9 >> 2] + Math_fround($8 + Math_fround(Math_fround($8 * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$4 >> 2]) * Math_fround(4.0))))) * Math_fround(.00390625);
           $9 = $9 + 4 | 0;
           $4 = $4 + 4 | 0;
           $6 = $6 + 4 | 0;
           $2 = $2 + 4 | 0;
           $5 = $5 + 1 | 0;
           continue;
          }
          break;
         };
         $4 = $7 << 2;
         $2 = $4 + $12 | 0;
         $6 = $4 + $3 | 0;
         $5 = 0;
         $4 = $0;
         while (1) {
          if (($5 | 0) == ($7 | 0)) {
           block6 : {
            $13 = $11 - 2 | 0;
            $10 = 2;
            label3 : while (1) {
             block5 : {
              if (($10 | 0) == ($13 | 0)) {
               $1 = $0 + (Math_imul($7, $11 - 4 | 0) << 2) | 0;
               $4 = $7 << 2;
               $3 = $1 + $4 | 0;
               $2 = $3 + $4 | 0;
               $6 = $2 + $4 | 0;
               $4 = $12 + (Math_imul($7, $13) << 2) | 0;
               $5 = 0;
               break block5;
              }
              $1 = $0 + (Math_imul($7, $10 - 2 | 0) << 2) | 0;
              $4 = $7 << 2;
              $3 = $1 + $4 | 0;
              $2 = $3 + $4 | 0;
              $6 = $2 + $4 | 0;
              $4 = $6 + $4 | 0;
              $9 = $12 + (Math_imul($7, $10) << 2) | 0;
              $5 = 0;
              while (1) if (($5 | 0) == ($7 | 0)) {
               $10 = $10 + 1 | 0;
               continue label3;
              } else {
               HEAPF32[$9 >> 2] = Math_fround(HEAPF32[$4 >> 2] + Math_fround(HEAPF32[$1 >> 2] + Math_fround(Math_fround(HEAPF32[$2 >> 2] * Math_fround(6.0)) + Math_fround(Math_fround(HEAPF32[$3 >> 2] + HEAPF32[$6 >> 2]) * Math_fround(4.0))))) * Math_fround(.00390625);
               $4 = $4 + 4 | 0;
               $6 = $6 + 4 | 0;
               $2 = $2 + 4 | 0;
               $3 = $3 + 4 | 0;
               $1 = $1 + 4 | 0;
               $9 = $9 + 4 | 0;
               $5 = $5 + 1 | 0;
               continue;
              };
             }
             break;
            };
            while (1) {
             if (($5 | 0) != ($7 | 0)) {
              $8 = HEAPF32[$6 >> 2];
              HEAPF32[$4 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$1 >> 2] + Math_fround(Math_fround(HEAPF32[$2 >> 2] * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$3 >> 2]) * Math_fround(4.0))))) * Math_fround(.00390625);
              $6 = $6 + 4 | 0;
              $2 = $2 + 4 | 0;
              $3 = $3 + 4 | 0;
              $1 = $1 + 4 | 0;
              $4 = $4 + 4 | 0;
              $5 = $5 + 1 | 0;
              continue;
             }
             break;
            };
            $1 = $0 + (Math_imul($7, $11 - 3 | 0) << 2) | 0;
            $0 = $7 << 2;
            $3 = $1 + $0 | 0;
            $2 = $3 + $0 | 0;
            $6 = $12 + (Math_imul($7, $11 - 1 | 0) << 2) | 0;
            $5 = 0;
            while (1) {
             if (($5 | 0) == ($7 | 0)) {
              break block6
             }
             $8 = HEAPF32[$2 >> 2];
             HEAPF32[$6 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$1 >> 2] + Math_fround(Math_fround($8 * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$3 >> 2]) * Math_fround(4.0))))) * Math_fround(.00390625);
             $2 = $2 + 4 | 0;
             $3 = $3 + 4 | 0;
             $1 = $1 + 4 | 0;
             $6 = $6 + 4 | 0;
             $5 = $5 + 1 | 0;
             continue;
            };
           }
          } else {
           $8 = HEAPF32[$4 >> 2];
           HEAPF32[$2 >> 2] = Math_fround(HEAPF32[$6 >> 2] + Math_fround($8 + Math_fround(Math_fround(HEAPF32[$1 >> 2] * Math_fround(6.0)) + Math_fround(Math_fround($8 + HEAPF32[$3 >> 2]) * Math_fround(4.0))))) * Math_fround(.00390625);
           $6 = $6 + 4 | 0;
           $3 = $3 + 4 | 0;
           $1 = $1 + 4 | 0;
           $4 = $4 + 4 | 0;
           $2 = $2 + 4 | 0;
           $5 = $5 + 1 | 0;
           continue;
          }
          break;
         };
         break block7;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 4923), 2287), 3164), 169), 3735), 4099));
        abort();
        wasm2js_trap();
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1147), 2287), 3164), 168), 3735), 4099));
       abort();
       wasm2js_trap();
      }
      break block8;
     case 0:
      __cxa_throw(vision__Exception__Exception_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29(__cxa_allocate_exception(16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($14 + 4 | 0, 11916)) | 0, 22956, 14);
      wasm2js_trap();
     default:
      __cxa_throw(vision__Exception__Exception_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29(__cxa_allocate_exception(16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($14 + 4 | 0, 12399)) | 0, 22956, 14);
      wasm2js_trap();
     case 1:
      break block1;
     };
    }
    $12 = HEAP32[$1 + 24 >> 2];
    $0 = HEAP32[$0 + 32 >> 2];
    $9 = HEAP32[$2 + 24 >> 2];
    $11 = HEAP32[$2 + 8 >> 2];
    block12 : {
     $7 = HEAP32[$2 + 4 >> 2];
     if ($7 >>> 0 > 4) {
      if ($11 >>> 0 > 4) {
       $6 = $7 - 2 | 0;
       $1 = $0;
       label8 : while (1) {
        block9 : {
         if (($4 | 0) == ($11 | 0)) {
          $5 = 0;
          $2 = $12;
          $6 = $0;
          $3 = $7 << 1;
          $1 = $6 + $3 | 0;
          $4 = $1;
          $3 = $1 + $3 | 0;
          $9 = $3;
          break block9;
         }
         $5 = 2;
         $2 = $9 + Math_imul($4, $7) | 0;
         $3 = HEAPU8[$2 | 0];
         HEAP16[$1 >> 1] = (Math_imul($3, 7) + HEAPU8[$2 + 2 | 0] | 0) + ($3 + HEAPU8[$2 + 1 | 0] << 2);
         $3 = HEAPU8[$2 | 0];
         HEAP16[$1 + 2 >> 1] = (HEAPU8[$2 + 3 | 0] + ($3 + Math_imul(HEAPU8[$2 + 1 | 0], 6) | 0) | 0) + ($3 + HEAPU8[$2 + 2 | 0] << 2);
         $3 = $1 + 4 | 0;
         while (1) if (($5 | 0) == ($6 | 0)) {
          $13 = Math_imul(HEAPU8[$2 + $6 | 0], 6);
          $1 = $2 + $7 | 0;
          $2 = $1 - 1 | 0;
          $5 = HEAPU8[$2 | 0];
          $10 = $1 - 3 | 0;
          HEAP16[$3 >> 1] = (($13 + $5 | 0) + HEAPU8[$1 - 4 | 0] | 0) + ($5 + HEAPU8[$10 | 0] << 2);
          $2 = HEAPU8[$2 | 0];
          HEAP16[$3 + 2 >> 1] = (HEAPU8[$10 | 0] + Math_imul($2, 7) | 0) + ($2 + HEAPU8[$1 - 2 | 0] << 2);
          $4 = $4 + 1 | 0;
          $1 = $3 + 4 | 0;
          continue label8;
         } else {
          $1 = $2 + $5 | 0;
          $5 = $5 + 1 | 0;
          HEAP16[$3 >> 1] = ((Math_imul(HEAPU8[$1 | 0], 6) + HEAPU8[$1 - 2 | 0] | 0) + (HEAPU8[$2 + $5 | 0] + HEAPU8[$1 - 1 | 0] << 2) | 0) + HEAPU8[$1 + 2 | 0];
          $3 = $3 + 2 | 0;
          continue;
         };
        }
        break;
       };
       while (1) {
        if (($5 | 0) != ($7 | 0)) {
         $10 = HEAPU16[$6 >> 1];
         HEAPF32[$2 >> 2] = Math_fround(HEAPU16[$9 >> 1] + (Math_imul($10, 7) + ($10 + HEAPU16[$4 >> 1] << 2) | 0) >>> 0) * Math_fround(.00390625);
         $9 = $9 + 2 | 0;
         $4 = $4 + 2 | 0;
         $6 = $6 + 2 | 0;
         $2 = $2 + 4 | 0;
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       };
       $2 = $12 + ($7 << 2) | 0;
       $6 = ($7 << 1) + $3 | 0;
       $5 = 0;
       $4 = $0;
       while (1) {
        if (($5 | 0) == ($7 | 0)) {
         block11 : {
          $13 = $11 - 2 | 0;
          $10 = 2;
          label11 : while (1) {
           block10 : {
            if (($10 | 0) == ($13 | 0)) {
             $1 = $0 + (Math_imul($7, $11 - 4 | 0) << 1) | 0;
             $4 = $7 << 1;
             $3 = $1 + $4 | 0;
             $2 = $3 + $4 | 0;
             $6 = $2 + $4 | 0;
             $4 = $12 + (Math_imul($7, $13) << 2) | 0;
             $5 = 0;
             break block10;
            }
            $1 = $0 + (Math_imul($7, $10 - 2 | 0) << 1) | 0;
            $4 = $7 << 1;
            $3 = $1 + $4 | 0;
            $2 = $3 + $4 | 0;
            $6 = $2 + $4 | 0;
            $4 = $6 + $4 | 0;
            $9 = $12 + (Math_imul($7, $10) << 2) | 0;
            $5 = 0;
            while (1) if (($5 | 0) == ($7 | 0)) {
             $10 = $10 + 1 | 0;
             continue label11;
            } else {
             HEAPF32[$9 >> 2] = Math_fround(HEAPU16[$4 >> 1] + ((HEAPU16[$1 >> 1] + Math_imul(HEAPU16[$2 >> 1], 6) | 0) + (HEAPU16[$6 >> 1] + HEAPU16[$3 >> 1] << 2) | 0) >>> 0) * Math_fround(.00390625);
             $4 = $4 + 2 | 0;
             $6 = $6 + 2 | 0;
             $2 = $2 + 2 | 0;
             $3 = $3 + 2 | 0;
             $1 = $1 + 2 | 0;
             $9 = $9 + 4 | 0;
             $5 = $5 + 1 | 0;
             continue;
            };
           }
           break;
          };
          while (1) {
           if (($5 | 0) != ($7 | 0)) {
            $9 = HEAPU16[$6 >> 1];
            HEAPF32[$4 >> 2] = Math_fround(((HEAPU16[$1 >> 1] + Math_imul(HEAPU16[$2 >> 1], 6) | 0) + ($9 + HEAPU16[$3 >> 1] << 2) | 0) + $9 >>> 0) * Math_fround(.00390625);
            $6 = $6 + 2 | 0;
            $2 = $2 + 2 | 0;
            $3 = $3 + 2 | 0;
            $1 = $1 + 2 | 0;
            $4 = $4 + 4 | 0;
            $5 = $5 + 1 | 0;
            continue;
           }
           break;
          };
          $1 = $0 + (Math_imul($7, $11 - 3 | 0) << 1) | 0;
          $0 = $7 << 1;
          $3 = $1 + $0 | 0;
          $2 = $3 + $0 | 0;
          $6 = $12 + (Math_imul($7, $11 - 1 | 0) << 2) | 0;
          $5 = 0;
          while (1) {
           if (($5 | 0) == ($7 | 0)) {
            break block11
           }
           $0 = HEAPU16[$2 >> 1];
           HEAPF32[$6 >> 2] = Math_fround(((HEAPU16[$1 >> 1] + Math_imul($0, 6) | 0) + ($0 + HEAPU16[$3 >> 1] << 2) | 0) + $0 >>> 0) * Math_fround(.00390625);
           $2 = $2 + 2 | 0;
           $3 = $3 + 2 | 0;
           $1 = $1 + 2 | 0;
           $6 = $6 + 4 | 0;
           $5 = $5 + 1 | 0;
           continue;
          };
         }
        } else {
         $9 = HEAPU16[$4 >> 1];
         HEAPF32[$2 >> 2] = Math_fround(HEAPU16[$6 >> 1] + (($9 + Math_imul(HEAPU16[$1 >> 1], 6) | 0) + ($9 + HEAPU16[$3 >> 1] << 2) | 0) >>> 0) * Math_fround(.00390625);
         $6 = $6 + 2 | 0;
         $3 = $3 + 2 | 0;
         $1 = $1 + 2 | 0;
         $4 = $4 + 2 | 0;
         $2 = $2 + 4 | 0;
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       };
       break block12;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 4923), 2287), 3164), 56), 3735), 4099));
      abort();
      wasm2js_trap();
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1147), 2287), 3164), 55), 3735), 4099));
     abort();
     wasm2js_trap();
    }
   }
   __stack_pointer = $14 + 16 | 0;
   return;
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11197), 2287), 3164), 357), 3735), 11518));
  abort();
  wasm2js_trap();
 }
 
 function vision__BinomialPyramid32f__apply_filter_twice_28vision__Image__2c_20vision__Image_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = vision__Image__Image_28unsigned_20char__2c_20vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29($3, HEAP32[$0 + 56 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  vision__BinomialPyramid32f__apply_filter_28vision__Image__2c_20vision__Image_20const__29($0, $4, $2);
  vision__BinomialPyramid32f__apply_filter_28vision__Image__2c_20vision__Image_20const__29($0, $1, $4);
  vision__Image___Image_28_29($4);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($0, $1) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
  return $0;
 }
 
 function vision__Exception__Exception_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1) {
  HEAP32[$0 >> 2] = 23040;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0 + 4 | 0, $1);
  return $0;
 }
 
 function vision__Exception___Exception_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 23040;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if (HEAP8[$1 + 11 | 0] >= 0) {
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   return $0;
  }
  $4 = HEAP32[$1 >> 2];
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block2 : {
   block1 : {
    $2 = HEAP32[$1 + 4 >> 2];
    block : {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($2)) {
      $1 = $0;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $2);
      break block;
     }
     if ($2 >>> 0 > 2147483639) {
      break block1
     }
     std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29($2) + 1 | 0);
     $1 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 >> 2] = $1;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
     HEAP32[$0 + 4 >> 2] = $2;
    }
    char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($1, $4, $2 + 1 | 0);
    __stack_pointer = $3 + 16 | 0;
    break block2;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
  return $0;
 }
 
 function vision__GaussianScaleSpacePyramid___GaussianScaleSpacePyramid_28_29_383($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(vision__GaussianScaleSpacePyramid___GaussianScaleSpacePyramid_28_29($0));
 }
 
 function vision__Exception___Exception_28_29_384($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(vision__Exception___Exception_28_29($0));
 }
 
 function vision__Exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return (HEAP8[$0 + 15 | 0] < 0 ? HEAP32[$0 + 4 >> 2] : $0 + 4 | 0) | 0;
 }
 
 function std____2__unique_ptr_vision__VisualDatabaseImpl_2c_20std____2__default_delete_vision__VisualDatabaseImpl____reset_5babi_ne200100_5d_28vision__VisualDatabaseImpl__29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1;
  if ($2) {
   if ($2) {
    std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float___________hash_table_28_29($2 + 4 | 0);
    std____2__unique_ptr_vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96___2c_20std____2__default_delete_vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96______reset_5babi_ne200100_5d_28vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96____29($2, 0);
   }
   emscripten_builtin_free($2);
  }
 }
 
 function std____2__unique_ptr_vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96___2c_20std____2__default_delete_vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96______reset_5babi_ne200100_5d_28vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96____29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1;
  if ($2) {
   if ($2) {
    $0 = $2 + 788 | 0;
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 24 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 12 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0);
    $0 = $2 + 652 | 0;
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 124 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 112 | 0);
    std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int________hash_table_28_29($0 + 92 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 + 636 | 0);
    $0 = $2 + 160 | 0;
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 144 | 0);
    $1 = $0 + 92 | 0;
    std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image_____vector_5babi_ne200100_5d_28_29($1 + 40 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($1 + 28 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 72 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 60 | 0);
    std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image_____vector_5babi_ne200100_5d_28_29($0 + 32 | 0);
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    HEAP32[$1 + 12 >> 2] = $0 + 16;
    $0 = HEAP32[$1 + 12 >> 2];
    if (HEAP32[$0 >> 2]) {
     std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________base_destruct_at_end_5babi_ne200100_5d_28std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_______29($0, HEAP32[$0 >> 2]);
     emscripten_builtin_free(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
    }
    __stack_pointer = $1 + 16 | 0;
    vision__BinomialPyramid32f___BinomialPyramid32f_28_29($2 + 92 | 0);
    $3 = $2 + 72 | 0;
    $0 = HEAP32[$3 + 8 >> 2];
    while (1) {
     if ($0) {
      $1 = HEAP32[$0 >> 2];
      std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($0 + 12 | 0);
      emscripten_builtin_free($0);
      $0 = $1;
      continue;
     }
     break;
    };
    std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($3);
    std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($2 - -64 | 0);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 + 12 | 0);
   }
   emscripten_builtin_free($2);
  }
 }
 
 function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  block : {
   $2 = HEAP32[$0 + 4 >> 2];
   if (!$2) {
    break block
   }
   $0 = HEAP32[$0 >> 2];
   $3 = HEAP32[$1 >> 2];
   $1 = $3 & $2 - 1;
   $4 = __wasm_popcnt_i32($2);
   block1 : {
    if ($4 >>> 0 <= 1) {
     break block1
    }
    $1 = $3;
    if ($1 >>> 0 < $2 >>> 0) {
     break block1
    }
    $1 = ($1 >>> 0) % ($2 >>> 0) | 0;
   }
   $0 = HEAP32[($1 << 2) + $0 >> 2];
   if (!$0) {
    break block
   }
   $5 = $1;
   $6 = $2 - 1 | 0;
   $4 = $4 >>> 0 > 1;
   while (1) {
    $0 = HEAP32[$0 >> 2];
    if (!$0) {
     break block
    }
    $1 = HEAP32[$0 + 4 >> 2];
    if (($3 | 0) != ($1 | 0)) {
     block2 : {
      if (!$4) {
       $1 = $1 & $6;
       break block2;
      }
      if ($1 >>> 0 < $2 >>> 0) {
       break block2
      }
      $1 = ($1 >>> 0) % ($2 >>> 0) | 0;
     }
     if (($1 | 0) != ($5 | 0)) {
      break block
     }
     continue;
    }
    if (HEAP32[$0 + 8 >> 2] != ($3 | 0)) {
     continue
    }
    break;
   };
   return $0;
  }
  return 0;
 }
 
 function vision__Keyframe_96___Keyframe_28_29($0) {
  var $1 = 0;
  wasm2js_memory_fill($0, 0, 36);
  $1 = $0 + 36 | 0;
  HEAP32[$1 + 100 >> 2] = 0;
  HEAP32[$1 + 104 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = 1234;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = $1;
  wasm2js_memory_fill($1 + 16 | 0, 0, 80);
  HEAP32[$1 + 108 >> 2] = 16;
  vision__BinarykMedoids_96___setk_28int_29($1 + 12 | 0);
  HEAP32[$1 + 20 >> 2] = 1;
  return $0;
 }
 
 function std____2__shared_ptr_vision__Keyframe_96____shared_ptr_5babi_ne200100_5d_vision__Keyframe_96__2c_200__28vision__Keyframe_96___29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$0 >> 2] = $1;
  $3 = operator_20new_28unsigned_20long_29(16);
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$3 >> 2] = 23076;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  if ($1) {
   std____2__default_delete_vision__Keyframe_96____operator_28_29_5babi_ne200100_5d_28vision__Keyframe_96___29_20const($1)
  }
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint____resize_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$0 >> 2];
  $2 = (HEAP32[$0 + 4 >> 2] - $3 | 0) / 20 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $2 = $1 - $2 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   block : {
    if ($2 >>> 0 <= (HEAP32[$0 + 8 >> 2] - $3 | 0) / 20 >>> 0) {
     std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______construct_at_end_28unsigned_20long_29($0, $2);
     break block;
    }
    $3 = std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__FeaturePoint___29($4 + 12 | 0, std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $2 + (($3 - HEAP32[$0 >> 2] | 0) / 20 | 0) | 0), (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 20 | 0, $0);
    $1 = HEAP32[$3 + 8 >> 2];
    $2 = $1 + Math_imul($2, 20) | 0;
    while (1) {
     if (($1 | 0) != ($2 | 0)) {
      HEAP32[$1 + 8 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      HEAP8[$1 + 16 | 0] = 1;
      $1 = $1 + 20 | 0;
      continue;
     }
     break;
    };
    HEAP32[$3 + 8 >> 2] = $2;
    std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint_____29($0, $3);
    std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint________split_buffer_28_29($3);
   }
   __stack_pointer = $4 + 32 | 0;
   return;
  }
  if ($1 >>> 0 < $2 >>> 0) {
   HEAP32[$0 + 4 >> 2] = $3 + Math_imul($1, 20)
  }
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char____resize_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] - $3 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $2 = $1 - $2 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   block : {
    if ($2 >>> 0 <= HEAP32[$0 + 8 >> 2] - $3 >>> 0) {
     $1 = HEAP32[$0 + 4 >> 2];
     $2 = $2 + $1 | 0;
     while (1) {
      if (($1 | 0) == ($2 | 0)) {
       HEAP32[$0 + 4 >> 2] = $2
      } else {
       HEAP8[$1 | 0] = 0;
       $1 = $1 + 1 | 0;
       continue;
      }
      break;
     };
     break block;
    }
    $3 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($4 + 12 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, ($2 + $3 | 0) - HEAP32[$0 >> 2] | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0, $0);
    $1 = HEAP32[$3 + 8 >> 2];
    $2 = $2 + $1 | 0;
    while (1) {
     if (($1 | 0) != ($2 | 0)) {
      HEAP8[$1 | 0] = 0;
      $1 = $1 + 1 | 0;
      continue;
     }
     break;
    };
    HEAP32[$3 + 8 >> 2] = $2;
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29($0, $3);
    std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($3);
   }
   __stack_pointer = $4 + 32 | 0;
   return;
  }
  if ($1 >>> 0 < $2 >>> 0) {
   HEAP32[$0 + 4 >> 2] = $1 + $3
  }
 }
 
 function std____2__unordered_map_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________operator_5b_5d_28int_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 4 >> 2] = $1;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $1 = HEAP32[$1 >> 2];
  block3 : {
   block : {
    $3 = HEAP32[$0 + 4 >> 2];
    if (!$3) {
     break block
    }
    $2 = HEAP32[$0 >> 2];
    $9 = __wasm_popcnt_i32($3);
    $4 = $1 & $3 - 1;
    block1 : {
     if ($9 >>> 0 <= 1) {
      break block1
     }
     $4 = $1;
     if ($1 >>> 0 < $3 >>> 0) {
      break block1
     }
     $4 = ($1 >>> 0) % ($3 >>> 0) | 0;
    }
    $5 = HEAP32[$2 + ($4 << 2) >> 2];
    if (!$5) {
     break block
    }
    $11 = $3 - 1 | 0;
    $9 = $9 >>> 0 > 1;
    while (1) {
     $5 = HEAP32[$5 >> 2];
     if (!$5) {
      break block
     }
     $2 = HEAP32[$5 + 4 >> 2];
     if (($1 | 0) != ($2 | 0)) {
      block2 : {
       if (!$9) {
        $2 = $2 & $11;
        break block2;
       }
       if ($3 >>> 0 > $2 >>> 0) {
        break block2
       }
       $2 = ($2 >>> 0) % ($3 >>> 0) | 0;
      }
      if (($2 | 0) != ($4 | 0)) {
       break block
      }
      continue;
     }
     if (($1 | 0) != HEAP32[$5 + 8 >> 2]) {
      continue
     }
     break;
    };
    $0 = 0;
    break block3;
   }
   $2 = operator_20new_28unsigned_20long_29(24);
   HEAP32[$6 + 8 >> 2] = $0;
   HEAP32[$6 + 4 >> 2] = $2;
   HEAP32[$2 + 4 >> 2] = $1;
   HEAP32[$2 >> 2] = 0;
   $5 = HEAP32[HEAP32[$7 + 4 >> 2] >> 2];
   HEAP32[$2 + 20 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = $5;
   HEAP8[$6 + 12 | 0] = 1;
   $8 = Math_fround(HEAP32[$0 + 12 >> 2] + 1 >>> 0);
   $10 = HEAPF32[$0 + 16 >> 2];
   block4 : {
    if ($8 > Math_fround($10 * Math_fround($3 >>> 0)) ? 0 : $3) {
     break block4
    }
    $3 = ($3 - 1 & $3) != 0 | $3 >>> 0 < 3 | $3 << 1;
    $8 = Math_fround(Math_ceil(Math_fround($8 / $10)));
    if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
     $4 = ~~$8 >>> 0
    } else {
     $4 = 0
    }
    void_20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_________rehash_true__28unsigned_20long_29($0, $3 >>> 0 > $4 >>> 0 ? $3 : $4);
    $3 = HEAP32[$0 + 4 >> 2];
    $4 = $3 - 1 | 0;
    if (!($3 & $4)) {
     $4 = $1 & $4;
     break block4;
    }
    if ($1 >>> 0 < $3 >>> 0) {
     $4 = $1;
     break block4;
    }
    $4 = ($1 >>> 0) % ($3 >>> 0) | 0;
   }
   $1 = $4 << 2;
   $4 = HEAP32[$0 >> 2];
   $2 = $1 + $4 | 0;
   $1 = HEAP32[$2 >> 2];
   block5 : {
    if (!$1) {
     $5 = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 8 >> 2] = $5;
     HEAP32[$2 >> 2] = $0 + 8;
     $1 = HEAP32[$5 >> 2];
     if (!$1) {
      break block5
     }
     $2 = HEAP32[$1 + 4 >> 2];
     $1 = $3 - 1 | 0;
     block6 : {
      if (!($1 & $3)) {
       $2 = $1 & $2;
       break block6;
      }
      if ($3 >>> 0 > $2 >>> 0) {
       break block6
      }
      $2 = ($2 >>> 0) % ($3 >>> 0) | 0;
     }
     HEAP32[$4 + ($2 << 2) >> 2] = $5;
     break block5;
    }
    $5 = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $5;
   }
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$6 + 4 >> 2] = 0;
   if ($0) {
    block8 : {
     block7 : {
      if (HEAPU8[$6 + 12 | 0] == 1) {
       std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 12 | 0);
       break block7;
      }
      if (!$0) {
       break block8
      }
     }
     emscripten_builtin_free($0);
    }
   }
   $0 = 1;
  }
  HEAP8[$7 + 12 | 0] = $0;
  HEAP32[$7 + 8 >> 2] = $5;
  __stack_pointer = $6 + 16 | 0;
  __stack_pointer = $7 + 16 | 0;
  return HEAP32[$7 + 8 >> 2] + 12 | 0;
 }
 
 function std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1) {
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$1 + 4 >> 2] = $2 - 1;
   if (!$2) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
    $2 = $1 + 8 | 0;
    block : {
     if (HEAP32[$2 >> 2]) {
      if ((long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn200100_5d_long__28long__29($2) | 0) != -1) {
       break block
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1);
    }
   }
  }
  return $0;
 }
 
 function vision__BinarykMedoids_96___setk_28int_29($0) {
  HEAP32[$0 + 4 >> 2] = 8;
  std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($0 + 12 | 0, 8);
 }
 
 function std____2__shared_ptr_vision__Keyframe_96____operator__5babi_ne200100_5d_28std____2__shared_ptr_vision__Keyframe_96___20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  if ($1) {
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1
  }
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($2 + 8 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function vision__VisualDatabaseFacade__getQueryFeaturePoints_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $0 = HEAP32[HEAP32[$0 >> 2] >> 2];
  $2 = HEAP32[$0 + 64 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $0 = HEAP32[$0 + 68 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  if ($0) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1
  }
  std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $2 + 24 | 0;
 }
 
 function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1) {
   emscripten_builtin_free($1)
  }
 }
 
 function std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $2 + Math_imul($1, 20) | 0;
  while (1) {
   if (($1 | 0) == ($2 | 0)) {
    HEAP32[$0 + 4 >> 2] = $1
   } else {
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP8[$2 + 16 | 0] = 1;
    $2 = $2 + 20 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______vdeallocate_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   HEAP32[$0 + 4 >> 2] = $1;
   emscripten_builtin_free($1);
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function void_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______construct_at_end_vision__FeaturePoint__2c_20vision__FeaturePoint___28vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
    $4 = HEAP32[$1 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$3 + 12 >> 2] = $4;
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = $3 + 20 | 0;
    $1 = $1 + 20 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $3;
 }
 
 function std____2__pair_vision__FeaturePoint__2c_20vision__FeaturePoint___20std____2____copy_move_unwrap_iters_5babi_ne200100_5d_std____2____copy_impl_2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__2c_200__28vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__29($0, $1, $2, $3) {
  var $4 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP8[$3 + 16 | 0] = HEAPU8[$1 + 16 | 0];
    $4 = HEAP32[$1 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$3 + 12 >> 2] = $4;
    $4 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = $3 + 20 | 0;
    $1 = $1 + 20 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = $2;
 }
 
 function std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______vallocate_5babi_ne200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 214748365) {
   std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $2 = std____2__allocator_vision__FeaturePoint___allocate_5babi_ne200100_5d_28unsigned_20long_29($1);
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = Math_imul($1, 20) + $2;
 }
 
 function std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = $2 + ($1 << 3) | 0;
  while (1) {
   if (($1 | 0) == ($2 | 0)) {
    HEAP32[$0 + 4 >> 2] = $1
   } else {
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $2 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 536870912) {
   std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
  $2 = $0 >> 2;
  return $0 >>> 0 >= 2147483640 ? 536870911 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29() {
  std____2____throw_length_error_5babi_ne200100_5d_28char_20const__29(1041);
  wasm2js_trap();
 }
 
 function std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float___________hash_table_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 8 >> 2];
  while (1) {
   if ($1) {
    $2 = HEAP32[$1 >> 2];
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($1 + 12 | 0);
    emscripten_builtin_free($1);
    $1 = $2;
    continue;
   }
   break;
  };
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0);
 }
 
 function vision__Logger__getInstance_28_29() {
  if (!(HEAP8[78024] & 1)) {
   HEAP32[19505] = 0;
   HEAP32[19503] = 0;
   HEAP32[19504] = 0;
   HEAP8[78024] = 1;
  }
  return 78012;
 }
 
 function __cxx_global_array_dtor($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 78012;
  $1 = HEAP32[$0 + 12 >> 2];
  if (HEAP32[$1 >> 2]) {
   $3 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   while (1) {
    if (($2 | 0) != ($3 | 0)) {
     $2 = std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($2 - 8 | 0);
     continue;
    }
    break;
   };
   HEAP32[$1 + 4 >> 2] = $3;
   emscripten_builtin_free(HEAP32[HEAP32[$0 + 12 >> 2] >> 2]);
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function std____2____exception_guard_exceptions_std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______destroy_vector______exception_guard_exceptions_5babi_ne200100_5d_28_29($0) {
  if (!HEAPU8[$0 + 4 | 0]) {
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______destroy_vector__operator_28_29_5babi_ne200100_5d_28_29($0)
  }
 }
 
 function void_20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_________rehash_true__28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0;
  block1 : {
   $2 = 2;
   block : {
    if (($1 | 0) == 1) {
     break block
    }
    $2 = $1;
    if (!($1 - 1 & $1)) {
     break block
    }
    $2 = std____2____next_prime_28unsigned_20long_29($1);
   }
   $1 = $2;
   $3 = HEAP32[$0 + 4 >> 2];
   if ($1 >>> 0 <= $3 >>> 0) {
    if ($1 >>> 0 >= $3 >>> 0) {
     break block1
    }
    $6 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[$0 + 12 >> 2]) / HEAPF32[$0 + 16 >> 2])));
    if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
     $2 = ~~$6 >>> 0
    } else {
     $2 = 0
    }
    if ($3 >>> 0 < 3 | __wasm_popcnt_i32($3) >>> 0 > 1) {
     $2 = std____2____next_prime_28unsigned_20long_29($2)
    } else {
     $2 = $2 >>> 0 < 2 ? $2 : 1 << 32 - Math_clz32($2 - 1 | 0)
    }
    $1 = $1 >>> 0 > $2 >>> 0 ? $1 : $2;
    if ($3 >>> 0 <= $1 >>> 0) {
     break block1
    }
   }
   block2 : {
    if ($1) {
     $3 = $1;
     void_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void__________reset_5babi_ne200100_5d_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______2c_200__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______29($0, std____2__allocator_float___allocate_5babi_ne200100_5d_28unsigned_20long_29($1));
     HEAP32[$0 + 4 >> 2] = $1;
     $7 = HEAP32[$0 >> 2];
     while (1) if (($4 | 0) == ($3 | 0)) {
      $1 = HEAP32[$0 + 8 >> 2];
      if (!$1) {
       break block2
      }
      $4 = $0 + 8 | 0;
      $2 = HEAP32[$1 + 4 >> 2];
      $0 = __wasm_popcnt_i32($3);
      block3 : {
       if ($0 >>> 0 <= 1) {
        $2 = $3 - 1 & $2;
        break block3;
       }
       if ($2 >>> 0 < $3 >>> 0) {
        break block3
       }
       $2 = ($2 >>> 0) % ($3 >>> 0) | 0;
      }
      HEAP32[($2 << 2) + $7 >> 2] = $4;
      $8 = $3 - 1 | 0;
      $9 = $0 >>> 0 > 1;
      while (1) {
       $0 = HEAP32[$1 >> 2];
       if (!$0) {
        break block2
       }
       $4 = HEAP32[$0 + 4 >> 2];
       block4 : {
        if (!$9) {
         $4 = $4 & $8;
         break block4;
        }
        if ($4 >>> 0 < $3 >>> 0) {
         break block4
        }
        $4 = ($4 >>> 0) % ($3 >>> 0) | 0;
       }
       block5 : {
        if (($2 | 0) == ($4 | 0)) {
         break block5
        }
        $5 = ($4 << 2) + $7 | 0;
        if (!HEAP32[$5 >> 2]) {
         HEAP32[$5 >> 2] = $1;
         $2 = $4;
         break block5;
        }
        HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
        HEAP32[$0 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
        HEAP32[HEAP32[$5 >> 2] >> 2] = $0;
        continue;
       }
       $1 = $0;
       continue;
      };
     } else {
      HEAP32[($4 << 2) + $7 >> 2] = 0;
      $4 = $4 + 1 | 0;
      continue;
     };
    }
    void_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void__________reset_5babi_ne200100_5d_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______2c_200__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______29($0, 0);
    HEAP32[$0 + 4 >> 2] = 0;
   }
  }
 }
 
 function void_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void__________reset_5babi_ne200100_5d_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______2c_200__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1;
  if ($2) {
   emscripten_builtin_free($2)
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] - $3 >> 2;
  if ($2 >>> 0 < $1 >>> 0) {
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $1 = $1 - $2 | 0;
   $2 = HEAP32[$0 + 4 >> 2];
   block : {
    if ($1 >>> 0 <= HEAP32[$0 + 8 >> 2] - $2 >> 2 >>> 0) {
     std____2__vector_float_2c_20std____2__allocator_float______construct_at_end_28unsigned_20long_29($0, $1);
     break block;
    }
    $2 = std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($3 + 12 | 0, std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1 + ($2 - HEAP32[$0 >> 2] >> 2) | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2, $0);
    std____2____split_buffer_float_2c_20std____2__allocator_float_______construct_at_end_28unsigned_20long_29($2, $1);
    std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $2);
    std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($2);
   }
   __stack_pointer = $3 + 32 | 0;
   return;
  }
  if ($1 >>> 0 < $2 >>> 0) {
   HEAP32[$0 + 4 >> 2] = $3 + ($1 << 2)
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 1073741824) {
   std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
  $2 = $0 >> 1;
  return $0 >>> 0 >= 2147483644 ? 1073741823 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  emscripten_builtin_free($0);
 }
 
 function std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96_______on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  std____2__default_delete_vision__Keyframe_96____operator_28_29_5babi_ne200100_5d_28vision__Keyframe_96___29_20const(HEAP32[$0 + 12 >> 2]);
 }
 
 function std____2__default_delete_vision__Keyframe_96____operator_28_29_5babi_ne200100_5d_28vision__Keyframe_96___29_20const($0) {
  var $1 = 0, $2 = 0;
  if ($0) {
   $1 = $0 + 36 | 0;
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($1 + 84 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($1 + 72 | 0);
   $2 = $1 + 12 | 0;
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 + 48 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 + 36 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 + 24 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($2 + 12 | 0);
   std____2__unique_ptr_vision__Node_96__2c_20std____2__default_delete_vision__Node_96_____reset_5babi_ne200100_5d_28vision__Node_96___29($1 + 8 | 0, 0);
   $1 = $0 + 8 | 0;
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($1 + 16 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($1 + 4 | 0);
  }
  emscripten_builtin_free($0);
 }
 
 function std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96_______get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (HEAP32[$1 + 4 >> 2] == 23244 ? $0 : 0) | 0;
 }
 
 function std____2__unique_ptr_vision__Node_96__2c_20std____2__default_delete_vision__Node_96_____reset_5babi_ne200100_5d_28vision__Node_96___29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1;
  if ($2) {
   if ($2) {
    vision__Node_96____Node_28_29($2)
   }
   emscripten_builtin_free($2);
  }
 }
 
 function vision__Node_96____Node_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $3 = $0 + 104 | 0;
  while (1) {
   $1 = HEAP32[$0 + 104 >> 2];
   if (HEAP32[$0 + 108 >> 2] - $1 >> 2 >>> 0 > $2 >>> 0) {
    $1 = HEAP32[$1 + ($2 << 2) >> 2];
    if ($1) {
     vision__Node_96____Node_28_29($1)
    }
    emscripten_builtin_free($1);
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 116 | 0);
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($3);
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int______vallocate_5babi_ne200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 1073741824) {
   std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $2 = std____2__allocator_float___allocate_5babi_ne200100_5d_28unsigned_20long_29($1);
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
 }
 
 function vision__BinaryHierarchicalClustering_96___build_28vision__Node_96___2c_20unsigned_20char_20const__2c_20int_2c_20int_20const__2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  block4 : {
   block18 : {
    block15 : {
     block14 : {
      block13 : {
       block10 : {
        $6 = HEAP32[$0 + 16 >> 2];
        $10 = HEAP32[$0 + 108 >> 2];
        block : {
         if (((($6 | 0) > ($10 | 0) ? $6 : $10) | 0) >= ($5 | 0)) {
          HEAP8[$1 + 100 | 0] = 1;
          std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($1 + 116 | 0, $5);
          $2 = 0;
          $0 = ($5 | 0) > 0 ? $5 : 0;
          while (1) {
           if (($0 | 0) == ($2 | 0)) {
            break block
           }
           $3 = $2 << 2;
           HEAP32[$3 + HEAP32[$1 + 116 >> 2] >> 2] = HEAP32[$3 + $4 >> 2];
           $2 = $2 + 1 | 0;
           continue;
          };
         }
         HEAP32[$8 + 16 >> 2] = 0;
         HEAP32[$8 + 20 >> 2] = 0;
         HEAP32[$8 + 8 >> 2] = 0;
         HEAP32[$8 + 12 >> 2] = 0;
         HEAP32[$8 + 24 >> 2] = 1065353216;
         $10 = $2;
         $11 = __stack_pointer - 16 | 0;
         __stack_pointer = $11;
         $7 = $0 + 12 | 0;
         $2 = HEAP32[$7 + 4 >> 2];
         block9 : {
          block3 : {
           block2 : {
            block1 : {
             if (($2 | 0) == HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 12 >> 2] >> 2) {
              if (($3 | 0) <= 0) {
               break block1
              }
              if (($3 | 0) < ($5 | 0)) {
               break block2
              }
              if (($2 | 0) > ($5 | 0)) {
               break block3
              }
              $2 = -1;
              HEAP32[$11 + 12 >> 2] = -1;
              $15 = $7 + 24 | 0;
              std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_2c_20int_20const__29($15, $5, $11 + 12 | 0);
              HEAP32[$11 + 8 >> 2] = -1;
              $12 = $7 + 36 | 0;
              std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_2c_20int_20const__29($12, $5, $11 + 8 | 0);
              std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($7 + 48 | 0, $5);
              $6 = HEAP32[$7 + 48 >> 2];
              void_20vision__SequentialVector_int__28int__2c_20int_2c_20int_29($6, HEAP32[$7 + 52 >> 2] - $6 >> 2);
              while (1) {
               if (HEAP32[$7 + 8 >> 2] <= ($16 | 0)) {
                if (HEAP32[$7 + 4 >> 2] != HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 12 >> 2] >> 2) {
                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15909), 15978), 9969), 187), 10441), 16180));
                 break block4;
                }
               } else {
                $6 = HEAP32[$7 + 48 >> 2];
                void_20vision__ArrayShuffle_int__28int__2c_20int_2c_20int_2c_20int__29($6, HEAP32[$7 + 52 >> 2] - $6 >> 2, HEAP32[$7 + 4 >> 2], HEAP32[$7 >> 2]);
                $21 = HEAP32[$7 + 48 >> 2];
                $17 = HEAP32[$7 + 4 >> 2];
                $13 = 0;
                $9 = 0;
                block8 : {
                 block7 : {
                  block6 : {
                   block5 : {
                    if (HEAP32[$12 + 4 >> 2] - HEAP32[$12 >> 2] >> 2 == ($5 | 0)) {
                     if (($3 | 0) <= 0) {
                      break block5
                     }
                     if (($3 | 0) < ($5 | 0)) {
                      break block6
                     }
                     if (($17 | 0) <= 0) {
                      break block7
                     }
                     $22 = ($5 | 0) > 0 ? $5 : 0;
                     label1 : while (1) {
                      if (($13 | 0) == ($22 | 0)) {
                       break block8
                      }
                      $18 = $13 << 2;
                      $23 = $18 + $4 | 0;
                      $14 = 0;
                      $6 = -1;
                      while (1) if (($14 | 0) == ($17 | 0)) {
                       $13 = $13 + 1 | 0;
                       $9 = $6 + $9 | 0;
                       continue label1;
                      } else {
                       $19 = ($14 << 2) + $21 | 0;
                       $20 = vision__HammingDistance768_28unsigned_20int_20const__2c_20unsigned_20int_20const__29($10 + Math_imul(HEAP32[$23 >> 2], 96) | 0, $10 + Math_imul(HEAP32[(HEAP32[$19 >> 2] << 2) + $4 >> 2], 96) | 0);
                       if ($20 >>> 0 < $6 >>> 0) {
                        HEAP32[HEAP32[$12 >> 2] + $18 >> 2] = HEAP32[$19 >> 2];
                        $6 = $20;
                       }
                       $14 = $14 + 1 | 0;
                       continue;
                      };
                     };
                    }
                    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13503), 15978), 9969), 198), 10441), 17953));
                    abort();
                    wasm2js_trap();
                   }
                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16438), 15978), 9969), 199), 10441), 16578));
                   abort();
                   wasm2js_trap();
                  }
                  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17022), 15978), 9969), 200), 10441), 17120));
                  abort();
                  wasm2js_trap();
                 }
                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18139), 15978), 9969), 201), 10441), 18207));
                 abort();
                 wasm2js_trap();
                }
                $6 = $9;
                if ($6 >>> 0 < $2 >>> 0) {
                 std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____swap_28std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____29($15, $12);
                 $2 = HEAP32[$7 + 4 >> 2] << 2;
                 if ($2) {
                  wasm2js_memory_copy(HEAP32[$7 + 12 >> 2], HEAP32[$7 + 48 >> 2], $2)
                 }
                 $2 = $6;
                }
                $16 = $16 + 1 | 0;
                continue;
               }
               break;
              };
              __stack_pointer = $11 + 16 | 0;
              break block9;
             }
             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15909), 15978), 9969), 154), 10441), 16180));
             break block4;
            }
            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16438), 15978), 9969), 155), 10441), 16578));
            break block4;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17022), 15978), 9969), 156), 10441), 17120));
           break block4;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17398), 15978), 9969), 157), 10441), 17825));
          break block4;
         }
         $6 = HEAP32[$0 + 40 >> 2];
         $9 = HEAP32[$0 + 36 >> 2];
         if ($6 - $9 >> 2 != ($5 | 0)) {
          break block10
         }
         $2 = 0;
         block12 : {
          while (1) {
           block11 : {
            if ($6 - $9 >> 2 >>> 0 <= $2 >>> 0) {
             $2 = HEAP32[$8 + 20 >> 2];
             if (($2 | 0) != 1) {
              break block11
             }
             HEAP8[$1 + 100 | 0] = 1;
             std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($1 + 116 | 0, $5);
             $2 = 0;
             $0 = ($5 | 0) > 0 ? $5 : 0;
             while (1) {
              if (($0 | 0) == ($2 | 0)) {
               break block12
              }
              $3 = $2 << 2;
              HEAP32[$3 + HEAP32[$1 + 116 >> 2] >> 2] = HEAP32[$3 + $4 >> 2];
              $2 = $2 + 1 | 0;
              continue;
             };
            }
            $6 = $9;
            $9 = $2 << 2;
            $6 = HEAP32[$6 + $9 >> 2];
            if (($6 | 0) == -1) {
             break block13
            }
            if (($5 | 0) <= ($6 | 0)) {
             break block14
            }
            $6 = ($6 << 2) + $4 | 0;
            if (HEAP32[$6 >> 2] >= ($3 | 0)) {
             break block15
            }
            int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29(std____2__unordered_map_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________operator_5b_5d_28int_20const__29($8 + 8 | 0, $6), $4 + $9 | 0);
            $2 = $2 + 1 | 0;
            $9 = HEAP32[$0 + 36 >> 2];
            $6 = HEAP32[$0 + 40 >> 2];
            continue;
           }
           break;
          };
          $4 = __stack_pointer - 32 | 0;
          __stack_pointer = $4;
          $5 = $1 + 104 | 0;
          $1 = $5;
          $6 = HEAP32[$1 >> 2];
          block17 : {
           block16 : {
            if ($2 >>> 0 > HEAP32[$1 + 8 >> 2] - $6 >> 2 >>> 0) {
             if ($2 >>> 0 >= 1073741824) {
              break block16
             }
             $1 = std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($4 + 12 | 0, $2, HEAP32[$1 + 4 >> 2] - $6 >> 2, $1);
             std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($5, $1);
             std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($1);
            }
            __stack_pointer = $4 + 32 | 0;
            break block17;
           }
           std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29();
           wasm2js_trap();
          }
          $2 = HEAP32[$8 + 16 >> 2];
          while (1) {
           if (!$2) {
            break block12
           }
           if (HEAP32[$2 + 16 >> 2] == HEAP32[$2 + 12 >> 2]) {
            break block18
           }
           $1 = operator_20new_28unsigned_20long_29(128);
           $4 = HEAP32[$0 + 4 >> 2];
           HEAP32[$0 + 4 >> 2] = $4 + 1;
           $6 = HEAP32[$2 + 8 >> 2];
           HEAP32[$1 + 104 >> 2] = 0;
           HEAP32[$1 + 108 >> 2] = 0;
           HEAP32[$1 >> 2] = $4;
           HEAP32[$1 + 112 >> 2] = 0;
           HEAP32[$1 + 116 >> 2] = 0;
           HEAP32[$1 + 120 >> 2] = 0;
           HEAP32[$1 + 124 >> 2] = 0;
           wasm2js_memory_copy($1 + 4 | 0, $10 + Math_imul($6, 96) | 0, 96);
           HEAP32[$8 + 4 >> 2] = $1;
           HEAP8[$1 + 100 | 0] = 0;
           int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29($5, $8 + 4 | 0);
           $1 = HEAP32[$2 + 12 >> 2];
           vision__BinaryHierarchicalClustering_96___build_28vision__Node_96___2c_20unsigned_20char_20const__2c_20int_2c_20int_20const__2c_20int_29($0, HEAP32[$8 + 4 >> 2], $10, $3, $1, HEAP32[$2 + 16 >> 2] - $1 >> 2);
           $2 = HEAP32[$2 >> 2];
           continue;
          };
         }
         std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float___________hash_table_28_29($8 + 8 | 0);
        }
        __stack_pointer = $8 + 32 | 0;
        return;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13503), 13644), 9969), 363), 10441), 13919));
       break block4;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14311), 13644), 9969), 365), 10441), 14374));
      break block4;
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14688), 13644), 9969), 366), 10441), 14791));
     break block4;
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15175), 13644), 9969), 367), 10441), 14791));
    break block4;
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15394), 13644), 9969), 387), 10441), 15538));
  }
  abort();
  wasm2js_trap();
 }
 
 function int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = $0;
  $2 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($2 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $0 = $2 + 4 | 0;
    break block;
   }
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $2 = std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($3 + 12 | 0, std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2) + 1 | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2, $0);
   $4 = HEAP32[$2 + 8 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 8 >> 2] = $4 + 4;
   std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $2);
   $0 = HEAP32[$0 + 4 >> 2];
   std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($2);
   __stack_pointer = $3 + 32 | 0;
  }
  HEAP32[$5 + 4 >> 2] = $0;
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2] - $4 >> 2;
  if ($3 >>> 0 < $1 >>> 0) {
   $5 = __stack_pointer - 32 | 0;
   __stack_pointer = $5;
   $3 = $1 - $3 | 0;
   $4 = HEAP32[$0 + 4 >> 2];
   block : {
    if ($3 >>> 0 <= HEAP32[$0 + 8 >> 2] - $4 >> 2 >>> 0) {
     $1 = HEAP32[$0 + 4 >> 2];
     $3 = $1 + ($3 << 2) | 0;
     while (1) {
      if (($1 | 0) == ($3 | 0)) {
       HEAP32[$0 + 4 >> 2] = $3
      } else {
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       $1 = $1 + 4 | 0;
       continue;
      }
      break;
     };
     break block;
    }
    $4 = std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($5 + 12 | 0, std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $3 + ($4 - HEAP32[$0 >> 2] >> 2) | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2, $0);
    $1 = HEAP32[$4 + 8 >> 2];
    $3 = $1 + ($3 << 2) | 0;
    while (1) {
     if (($1 | 0) != ($3 | 0)) {
      HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
      $1 = $1 + 4 | 0;
      continue;
     }
     break;
    };
    HEAP32[$4 + 8 >> 2] = $3;
    std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $4);
    std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($4);
   }
   __stack_pointer = $5 + 32 | 0;
   return;
  }
  if ($1 >>> 0 < $3 >>> 0) {
   HEAP32[$0 + 4 >> 2] = $4 + ($1 << 2)
  }
 }
 
 function void_20vision__SequentialVector_int__28int__2c_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0;
  block : {
   if (($1 | 0) <= 0) {
    break block
   }
   HEAP32[$0 >> 2] = 0;
   $2 = 1;
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break block
    }
    $3 = ($2 << 2) + $0 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 - 4 >> 2] + 1;
    $2 = $2 + 1 | 0;
    continue;
   };
  }
 }
 
 function void_20vision__ArrayShuffle_int__28int__2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = ($2 | 0) > 0 ? $2 : 0;
  while (1) {
   if (($2 | 0) != ($5 | 0)) {
    $4 = Math_imul(HEAP32[$3 >> 2], 214013) + 2531011 | 0;
    HEAP32[$3 >> 2] = $4;
    $6 = ($5 << 2) + $0 | 0;
    $7 = HEAP32[$6 >> 2];
    $4 = (($4 >>> 16 & 32767) % ($1 | 0) << 2) + $0 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $7;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function vision__HammingDistance768_28unsigned_20int_20const__2c_20unsigned_20int_20const__29($0, $1) {
  return __wasm_popcnt_i32(HEAP32[$1 + 92 >> 2] ^ HEAP32[$0 + 92 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 88 >> 2] ^ HEAP32[$0 + 88 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 84 >> 2] ^ HEAP32[$0 + 84 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 80 >> 2] ^ HEAP32[$0 + 80 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 76 >> 2] ^ HEAP32[$0 + 76 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 72 >> 2] ^ HEAP32[$0 + 72 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 68 >> 2] ^ HEAP32[$0 + 68 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 64 >> 2] ^ HEAP32[$0 + 64 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 60 >> 2] ^ HEAP32[$0 + 60 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 56 >> 2] ^ HEAP32[$0 + 56 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 52 >> 2] ^ HEAP32[$0 + 52 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 48 >> 2] ^ HEAP32[$0 + 48 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 44 >> 2] ^ HEAP32[$0 + 44 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 40 >> 2] ^ HEAP32[$0 + 40 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 36 >> 2] ^ HEAP32[$0 + 36 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 32 >> 2] ^ HEAP32[$0 + 32 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 28 >> 2] ^ HEAP32[$0 + 28 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 24 >> 2] ^ HEAP32[$0 + 24 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 20 >> 2] ^ HEAP32[$0 + 20 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 16 >> 2] ^ HEAP32[$0 + 16 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 12 >> 2] ^ HEAP32[$0 + 12 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 8 >> 2] ^ HEAP32[$0 + 8 >> 2]) + (__wasm_popcnt_i32(HEAP32[$1 + 4 >> 2] ^ HEAP32[$0 + 4 >> 2]) + __wasm_popcnt_i32(HEAP32[$1 >> 2] ^ HEAP32[$0 >> 2]) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0;
 }
 
 function vision__FindHoughSimilarity_28vision__HoughSimilarityVoting__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0.0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0;
  $15 = __stack_pointer - 32 | 0;
  __stack_pointer = $15;
  $27 = std____2__vector_float_2c_20std____2__allocator_float____vector_5babi_ne200100_5d_28unsigned_20long_29($15 + 20 | 0, HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 1);
  $28 = std____2__vector_float_2c_20std____2__allocator_float____vector_5babi_ne200100_5d_28unsigned_20long_29($15 + 8 | 0, HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 1);
  $11 = HEAP32[$3 >> 2];
  $14 = HEAP32[$3 + 4 >> 2] - $11 >> 3;
  $12 = HEAP32[$28 >> 2];
  $18 = HEAP32[$27 >> 2];
  $25 = HEAP32[$2 >> 2];
  $26 = HEAP32[$1 >> 2];
  $2 = 0;
  block3 : {
   while (1) {
    if (($2 | 0) == ($14 | 0)) {
     HEAP32[$0 + 64 >> 2] = 10;
     HEAP32[$0 + 60 >> 2] = 12;
     HEAP32[$0 + 56 >> 2] = 0;
     HEAP32[$0 + 52 >> 2] = 0;
     HEAP32[$0 + 36 >> 2] = -1082130432;
     HEAP32[$0 + 40 >> 2] = 1065353216;
     $8 = Math_fround($5 | 0);
     $8 = Math_fround(Math_fround($8 * Math_fround(.20000000298023224)) + $8);
     HEAPF32[$0 + 32 >> 2] = $8;
     HEAPF32[$0 + 28 >> 2] = -$8;
     $8 = Math_fround($4 | 0);
     $8 = Math_fround(Math_fround($8 * Math_fround(.20000000298023224)) + $8);
     HEAPF32[$0 + 24 >> 2] = $8;
     HEAPF32[$0 + 20 >> 2] = -$8;
     HEAP32[$0 + 44 >> 2] = 1092616192;
     HEAP32[$0 + 48 >> 2] = 1054759896;
     HEAP32[$0 + 84 >> 2] = 0;
     HEAP32[$0 + 88 >> 2] = 0;
     HEAP8[$0 + 16 | 0] = 1;
     $1 = $0 + 92 | 0;
     std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int_____clear_28_29($1);
     HEAPF32[$0 + 12 >> 2] = $7 >> 1;
     HEAPF32[$0 + 8 >> 2] = $6 >> 1;
     HEAP32[$0 + 4 >> 2] = $7;
     HEAP32[$0 >> 2] = $6;
     $25 = HEAP32[$27 >> 2];
     $26 = HEAP32[$28 >> 2];
     $11 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 3;
     $3 = 0;
     $9 = __stack_pointer - 16 | 0;
     __stack_pointer = $9;
     std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int_____clear_28_29($1);
     if ($11) {
      $23 = $0 + 112 | 0;
      std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($23, $11 << 2);
      $29 = $0 + 124 | 0;
      std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($29, $11);
      if (HEAPU8[$0 + 16 | 0] == 1) {
       $20 = __stack_pointer - 16 | 0;
       __stack_pointer = $20;
       $1 = HEAP32[$0 + 4 >> 2];
       $2 = HEAP32[$0 >> 2];
       $14 = std____2__vector_float_2c_20std____2__allocator_float____vector_5babi_ne200100_5d_28unsigned_20long_29($20 + 4 | 0, $11);
       block2 : {
        block1 : {
         block : {
          if (($11 | 0) > 0) {
           if (HEAP32[$0 >> 2] <= 0) {
            break block
           }
           if (HEAP32[$0 + 4 >> 2] <= 0) {
            break block1
           }
           $4 = HEAP32[$14 >> 2];
           $10 = Math_fround((($1 | 0) < ($2 | 0) ? $2 : $1) | 0);
           $6 = 0;
           while (1) {
            if (($6 | 0) == ($11 | 0)) {
             break block2
            }
            $1 = $6 << 4;
            $8 = HEAPF32[($1 + $26 | 0) + 12 >> 2];
            HEAPF32[$4 + ($6 << 2) >> 2] = Math_fround(HEAPF32[($1 + $25 | 0) + 12 >> 2] / ($8 == Math_fround(0.0) ? Math_fround(1.0) : $8)) * $10;
            $6 = $6 + 1 | 0;
            continue;
           };
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11360), 2124), 3164), 208), 3735), 11558));
          break block3;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12056), 2124), 3164), 209), 3735), 12376));
         break block3;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12674), 2124), 3164), 210), 3735), 12989));
        break block3;
       }
       $1 = HEAP32[$14 >> 2];
       $12 = $1;
       $1 = HEAP32[$14 + 4 >> 2] - $1 >> 2;
       $18 = $1 & 1 ? ($1 | 0) / 2 | 0 : ($1 >> 1) - 1 | 0;
       $6 = 0;
       block5 : {
        block4 : {
         if (($1 | 0) > 0) {
          if (($18 | 0) <= 0) {
           break block4
          }
          $7 = $1 - 1 | 0;
          $30 = $18 - 1 | 0;
          $36 = $12 + ($30 << 2) | 0;
          while (1) {
           $8 = HEAPF32[$36 >> 2];
           $1 = $7;
           $2 = $6;
           if (($1 | 0) > ($2 | 0)) {
            while (1) {
             $4 = $2;
             while (1) {
              $2 = $4;
              $4 = $2 + 1 | 0;
              $31 = $12 + ($2 << 2) | 0;
              $10 = HEAPF32[$31 >> 2];
              if ($10 < $8) {
               continue
              }
              break;
             };
             $5 = $1;
             while (1) {
              $1 = $5;
              $5 = $1 - 1 | 0;
              $32 = $12 + ($1 << 2) | 0;
              $13 = HEAPF32[$32 >> 2];
              if ($13 > $8) {
               continue
              }
              break;
             };
             if (($1 | 0) >= ($2 | 0)) {
              HEAPF32[$31 >> 2] = $13;
              HEAPF32[$32 >> 2] = $10;
              $2 = $4;
              $1 = $5;
             }
             if (($1 | 0) >= ($2 | 0)) {
              continue
             }
             break;
            };
            $7 = ($2 | 0) < ($18 | 0) ? $7 : $1;
            $6 = ($1 | 0) < ($30 | 0) ? $2 : $6;
            continue;
           }
           break;
          };
          break block5;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17486), 17845), 3164), 53), 3735), 17982));
         abort();
         wasm2js_trap();
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18178), 17845), 3164), 54), 3735), 18239));
        abort();
        wasm2js_trap();
       }
       $8 = Math_fround($8 * Math_fround(.25));
       $10 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPF32[$0 + 24 >> 2] - HEAPF32[$0 + 20 >> 2]) / $8)));
       if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
        $1 = ~~$10
       } else {
        $1 = -2147483648
       }
       $2 = ($1 | 0) <= 5 ? 5 : $1;
       HEAP32[$0 + 52 >> 2] = $2;
       $8 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] - HEAPF32[$0 + 28 >> 2]) / $8)));
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $1 = ~~$8
       } else {
        $1 = -2147483648
       }
       $1 = ($1 | 0) <= 5 ? 5 : $1;
       HEAP32[$0 + 56 >> 2] = $1;
       $1 = Math_imul($1, $2);
       HEAP32[$0 + 84 >> 2] = $1;
       HEAP32[$0 + 88 >> 2] = Math_imul($1, HEAP32[$0 + 60 >> 2]);
       std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($14);
       __stack_pointer = $20 + 16 | 0;
      }
      $20 = ($11 | 0) > 0 ? $11 : 0;
      $2 = 0;
      while (1) {
       if (($3 | 0) == ($20 | 0)) {
        std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($23, $2 << 2);
        std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($29, $2);
       } else {
        $4 = $3 << 4;
        $1 = $4 + $25 | 0;
        $17 = HEAPF32[$1 >> 2];
        $21 = HEAPF32[$1 + 4 >> 2];
        $19 = HEAPF32[$1 + 12 >> 2];
        $4 = $4 + $26 | 0;
        $13 = HEAPF32[$4 >> 2];
        $24 = HEAPF32[$4 + 4 >> 2];
        $10 = HEAPF32[$4 + 12 >> 2];
        $8 = Math_fround(HEAPF32[$1 + 8 >> 2] - HEAPF32[$4 + 8 >> 2]);
        HEAPF32[$9 + 4 >> 2] = $8;
        $16 = +$8;
        block6 : {
         if ($16 <= -3.141592653589793) {
          $33 = 6.283185307179586
         } else {
          if (!($16 > 3.141592653589793)) {
           break block6
          }
          $33 = -6.283185307179586;
         }
         $8 = Math_fround($33 + $16);
         HEAPF32[$9 + 4 >> 2] = $8;
        }
        block8 : {
         block7 : {
          $16 = +$8;
          if ($16 > -3.141592653589793) {
           if (!($16 <= 3.141592653589793)) {
            break block7
           }
           $8 = Math_fround($19 / ($10 == Math_fround(0.0) ? Math_fround(1.0) : $10));
           HEAPF32[$9 >> 2] = $8;
           $19 = HEAPF32[$0 + 48 >> 2];
           $22 = logf($8);
           $10 = HEAPF32[$9 + 4 >> 2];
           HEAPF32[$9 >> 2] = $22 * $19;
           $19 = sinf($10);
           $22 = HEAPF32[$0 + 12 >> 2];
           $10 = Math_fround($8 * cosf($10));
           $8 = Math_fround($8 * $19);
           HEAPF32[$9 + 12 >> 2] = Math_fround($17 - Math_fround(Math_fround($10 * $13) - Math_fround($24 * $8))) + Math_fround(Math_fround($10 * HEAPF32[$0 + 8 >> 2]) - Math_fround($22 * $8));
           HEAPF32[$9 + 8 >> 2] = Math_fround($21 - Math_fround(Math_fround($8 * $13) + Math_fround($24 * $10))) + Math_fround(Math_fround($8 * HEAPF32[$0 + 8 >> 2]) + Math_fround($10 * HEAPF32[$0 + 12 >> 2]));
           break block8;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7815), 13118), 3164), 468), 3735), 8359));
          break block3;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9091), 13118), 3164), 469), 3735), 8359));
         break block3;
        }
        $8 = HEAPF32[$9 + 8 >> 2];
        $24 = HEAPF32[$9 + 4 >> 2];
        $10 = HEAPF32[$9 >> 2];
        $6 = 0;
        block18 : {
         block17 : {
          block16 : {
           block15 : {
            block14 : {
             block13 : {
              block12 : {
               block11 : {
                block10 : {
                 $17 = HEAPF32[$0 + 20 >> 2];
                 $13 = HEAPF32[$9 + 12 >> 2];
                 block9 : {
                  if ($17 > $13) {
                   break block9
                  }
                  $21 = HEAPF32[$0 + 24 >> 2];
                  if ($21 <= $13) {
                   break block9
                  }
                  $19 = HEAPF32[$0 + 28 >> 2];
                  if ($19 > $8) {
                   break block9
                  }
                  $22 = HEAPF32[$0 + 32 >> 2];
                  if ($22 <= $8) {
                   break block9
                  }
                  $16 = +$24;
                  if ($16 <= -3.141592653589793 | $16 > 3.141592653589793) {
                   break block9
                  }
                  $34 = HEAPF32[$0 + 36 >> 2];
                  if ($10 < $34) {
                   break block9
                  }
                  $35 = HEAPF32[$0 + 40 >> 2];
                  if ($10 >= $35) {
                   break block9
                  }
                  if (!($13 >= $17)) {
                   break block10
                  }
                  if (!($13 < $21)) {
                   break block11
                  }
                  if (!($8 >= $19)) {
                   break block12
                  }
                  if (!($8 < $22)) {
                   break block13
                  }
                  if (!($16 > -3.141592653589793)) {
                   break block14
                  }
                  if (!($16 <= 3.141592653589793)) {
                   break block15
                  }
                  if (!($10 >= $34)) {
                   break block16
                  }
                  if (!($10 < $35)) {
                   break block17
                  }
                  $21 = HEAPF32[$0 + 20 >> 2];
                  $17 = Math_fround(HEAPF32[$0 + 24 >> 2] - $21);
                  HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($13 - $21) / ($17 == Math_fround(0.0) ? Math_fround(1.0) : $17)) * Math_fround(HEAP32[$0 + 52 >> 2]);
                  $17 = HEAPF32[$0 + 28 >> 2];
                  $13 = Math_fround(HEAPF32[$0 + 32 >> 2] - $17);
                  HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($8 - $17) / ($13 == Math_fround(0.0) ? Math_fround(1.0) : $13)) * Math_fround(HEAP32[$0 + 56 >> 2]);
                  HEAPF32[$0 + 76 >> 2] = (+$24 + 3.141592653589793) * .15915494309189535 * +HEAP32[$0 + 60 >> 2];
                  $13 = HEAPF32[$0 + 36 >> 2];
                  $8 = Math_fround(HEAPF32[$0 + 40 >> 2] - $13);
                  HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($10 - $13) / ($8 == Math_fround(0.0) ? Math_fround(1.0) : $8)) * Math_fround(HEAP32[$0 + 64 >> 2]);
                  $8 = Math_fround(Math_floor(Math_fround(HEAPF32[$0 + 76 >> 2] + Math_fround(-.5))));
                  if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                   $12 = ~~$8
                  } else {
                   $12 = -2147483648
                  }
                  $8 = Math_fround(Math_floor(Math_fround(HEAPF32[$0 + 68 >> 2] + Math_fround(-.5))));
                  if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                   $1 = ~~$8
                  } else {
                   $1 = -2147483648
                  }
                  if (($1 | 0) < 0) {
                   break block9
                  }
                  $7 = $1 + 1 | 0;
                  if (($7 | 0) >= HEAP32[$0 + 52 >> 2]) {
                   break block9
                  }
                  $8 = Math_fround(Math_floor(Math_fround(HEAPF32[$0 + 72 >> 2] + Math_fround(-.5))));
                  if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                   $4 = ~~$8
                  } else {
                   $4 = -2147483648
                  }
                  if (($4 | 0) < 0) {
                   break block9
                  }
                  $5 = 0;
                  $11 = $4 + 1 | 0;
                  if (($11 | 0) >= HEAP32[$0 + 56 >> 2]) {
                   break block18
                  }
                  $8 = Math_fround(Math_floor(Math_fround(HEAPF32[$0 + 80 >> 2] + Math_fround(-.5))));
                  if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                   $5 = ~~$8
                  } else {
                   $5 = -2147483648
                  }
                  if (($5 | 0) < 0) {
                   break block9
                  }
                  $14 = $5 + 1 | 0;
                  if (($14 | 0) >= HEAP32[$0 + 64 >> 2]) {
                   break block9
                  }
                  $18 = HEAP32[$0 + 60 >> 2];
                  $6 = ($12 + $18 | 0) % ($18 | 0) | 0;
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $4, $6, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $4, $6, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $11, $6, $5));
                  $12 = ($6 + 1 | 0) % ($18 | 0) | 0;
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $11, $12, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $11, $12, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $11, $6, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $4, $12, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $4, $12, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $7, $4, $6, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $11, $6, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $11, $12, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $11, $12, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $11, $6, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $4, $12, $5));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $4, $12, $14));
                  vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $4, $6, $14));
                  $6 = 1;
                 }
                 $5 = $6;
                 break block18;
                }
                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1113), 13118), 3164), 360), 3735), 4118));
                break block3;
               }
               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 4890), 13118), 3164), 361), 3735), 4118));
               break block3;
              }
              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 5762), 13118), 3164), 362), 3735), 6454));
              break block3;
             }
             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7305), 13118), 3164), 363), 3735), 6454));
             break block3;
            }
            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7815), 13118), 3164), 364), 3735), 8359));
            break block3;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9091), 13118), 3164), 365), 3735), 8359));
           break block3;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9867), 13118), 3164), 366), 3735), 10259));
          break block3;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 10772), 13118), 3164), 367), 3735), 10259));
         break block3;
        }
        if ($5) {
         $1 = HEAP32[$0 + 112 >> 2] + ($2 << 4) | 0;
         HEAPF32[$1 >> 2] = HEAPF32[$0 + 68 >> 2];
         HEAPF32[$1 + 4 >> 2] = HEAPF32[$0 + 72 >> 2];
         HEAPF32[$1 + 8 >> 2] = HEAPF32[$0 + 76 >> 2];
         HEAPF32[$1 + 12 >> 2] = HEAPF32[$0 + 80 >> 2];
         HEAP32[HEAP32[$0 + 124 >> 2] + ($2 << 2) >> 2] = $3;
         $2 = $2 + 1 | 0;
        }
        $3 = $3 + 1 | 0;
        continue;
       }
       break;
      };
     }
     __stack_pointer = $9 + 16 | 0;
     HEAP32[$15 + 4 >> 2] = 0;
     HEAP32[$15 >> 2] = -1;
     $0 = $0 + 100 | 0;
     $8 = HEAPF32[$15 + 4 >> 2];
     while (1) {
      $0 = HEAP32[$0 >> 2];
      if ($0) {
       if (!(Math_fround(HEAPU32[$0 + 12 >> 2]) > $8)) {
        continue
       }
       HEAP32[$15 >> 2] = HEAP32[$0 + 8 >> 2];
       $8 = Math_fround(HEAPU32[$0 + 12 >> 2]);
       HEAPF32[$15 + 4 >> 2] = $8;
       continue;
      }
      break;
     };
     $0 = HEAP32[$15 >> 2];
     $8 = HEAPF32[$15 + 4 >> 2];
     std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($28);
     std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($27);
     __stack_pointer = $15 + 32 | 0;
     $0 = $8 < Math_fround(3.0) ? -1 : $0;
    } else {
     $9 = $11 + ($2 << 3) | 0;
     $20 = HEAP32[$9 + 4 >> 2];
     $23 = $2 << 4;
     $1 = $23 + $18 | 0;
     $9 = $26 + Math_imul(HEAP32[$9 >> 2], 20) | 0;
     HEAPF32[$1 >> 2] = HEAPF32[$9 >> 2];
     HEAPF32[$1 + 4 >> 2] = HEAPF32[$9 + 4 >> 2];
     HEAPF32[$1 + 8 >> 2] = HEAPF32[$9 + 8 >> 2];
     HEAPF32[$1 + 12 >> 2] = HEAPF32[$9 + 12 >> 2];
     $1 = $12 + $23 | 0;
     $9 = $25 + Math_imul($20, 20) | 0;
     HEAPF32[$1 >> 2] = HEAPF32[$9 >> 2];
     HEAPF32[$1 + 4 >> 2] = HEAPF32[$9 + 4 >> 2];
     HEAPF32[$1 + 8 >> 2] = HEAPF32[$9 + 8 >> 2];
     HEAPF32[$1 + 12 >> 2] = HEAPF32[$9 + 12 >> 2];
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   };
   return $0;
  }
  abort();
  wasm2js_trap();
 }
 
 function vision__FindHoughMatches_28std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____2c_20vision__HoughSimilarityVoting_20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20int_2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0.0, $11 = 0.0, $12 = 0.0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = ((($3 | 0) % HEAP32[$1 + 88 >> 2] | 0) % HEAP32[$1 + 84 >> 2] | 0) % HEAP32[$1 + 52 >> 2] | 0;
  HEAP32[$4 + 12 >> 2] = $5;
  $5 = ((($3 - $5 | 0) % HEAP32[$1 + 88 >> 2] | 0) % HEAP32[$1 + 84 >> 2] | 0) / HEAP32[$1 + 52 >> 2] | 0;
  HEAP32[$4 + 8 >> 2] = $5;
  $5 = (($3 - (HEAP32[$4 + 12 >> 2] + Math_imul($5, HEAP32[$1 + 52 >> 2]) | 0) | 0) % HEAP32[$1 + 88 >> 2] | 0) / HEAP32[$1 + 84 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = $5;
  $3 = ($3 - (HEAP32[$4 + 12 >> 2] + (Math_imul($5, HEAP32[$1 + 84 >> 2]) + Math_imul(HEAP32[$1 + 52 >> 2], HEAP32[$4 + 8 >> 2]) | 0) | 0) | 0) / HEAP32[$1 + 88 >> 2] | 0;
  HEAP32[$4 >> 2] = $3;
  block7 : {
   block8 : {
    block6 : {
     block5 : {
      block4 : {
       block3 : {
        block2 : {
         block1 : {
          block : {
           $5 = HEAP32[$4 + 12 >> 2];
           if (($5 | 0) >= 0) {
            if (($5 | 0) >= HEAP32[$1 + 52 >> 2]) {
             break block
            }
            $5 = HEAP32[$4 + 8 >> 2];
            if (($5 | 0) < 0) {
             break block1
            }
            if (($5 | 0) >= HEAP32[$1 + 56 >> 2]) {
             break block2
            }
            $5 = HEAP32[$4 + 4 >> 2];
            if (($5 | 0) < 0) {
             break block3
            }
            if (($5 | 0) >= HEAP32[$1 + 60 >> 2]) {
             break block4
            }
            if (($3 | 0) < 0) {
             break block5
            }
            if (($3 | 0) >= HEAP32[$1 + 64 >> 2]) {
             break block6
            }
            break block7;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19928), 20036), 9969), 190), 10441), 20124));
           break block8;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20224), 20036), 9969), 191), 10441), 20124));
          break block8;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20264), 20036), 9969), 192), 10441), 20349));
         break block8;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20421), 20036), 9969), 193), 10441), 20349));
        break block8;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20515), 20036), 9969), 194), 10441), 20608));
       break block8;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20687), 20036), 9969), 195), 10441), 20608));
      break block8;
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20792), 20036), 9969), 196), 10441), 20888));
     break block8;
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21005), 20036), 9969), 197), 10441), 20888));
   }
   abort();
   wasm2js_trap();
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2];
  block9 : {
   $3 = HEAP32[$1 + 128 >> 2] - HEAP32[$1 + 124 >> 2] >> 2;
   if ($3 >>> 0 <= HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] >> 3 >>> 0) {
    $5 = ($3 | 0) > 0 ? $3 : 0;
    $3 = HEAP32[$1 + 112 >> 2];
    while (1) {
     if (($5 | 0) == ($8 | 0)) {
      break block9
     }
     $6 = HEAPF32[$3 + 4 >> 2];
     $7 = HEAPF32[$3 + 8 >> 2];
     $9 = HEAPF32[$3 + 12 >> 2];
     $10 = +HEAP32[$4 + 8 >> 2] + .5;
     $11 = +HEAP32[$4 + 4 >> 2] + .5;
     $12 = +HEAP32[$4 >> 2] + .5;
     HEAPF32[$4 + 28 >> 2] = Math_abs(Math_fround(HEAPF32[$3 >> 2] - Math_fround(+HEAP32[$4 + 12 >> 2] + .5)));
     HEAPF32[$4 + 24 >> 2] = Math_abs(Math_fround($6 - Math_fround($10)));
     HEAPF32[$4 + 16 >> 2] = Math_abs(Math_fround($9 - Math_fround($12)));
     $6 = Math_fround(Math_abs(Math_fround($7 - Math_fround($11))));
     $7 = Math_fround(Math_fround(HEAP32[$1 + 60 >> 2]) - $6);
     $6 = $6 < $7 ? $6 : $7;
     HEAPF32[$4 + 20 >> 2] = $6;
     if ($6 >= Math_fround(0.0)) {
      if (!(!(HEAPF32[$4 + 28 >> 2] < Math_fround(1.0)) | !(HEAPF32[$4 + 24 >> 2] < Math_fround(1.0)) | (!(HEAPF32[$4 + 20 >> 2] < Math_fround(1.0)) | !(HEAPF32[$4 + 16 >> 2] < Math_fround(1.0))))) {
       vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($0, HEAP32[$2 >> 2] + (HEAP32[HEAP32[$1 + 124 >> 2] + ($8 << 2) >> 2] << 3) | 0)
      }
      $3 = $3 + 16 | 0;
      $8 = $8 + 1 | 0;
      continue;
     } else {
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21094), 20036), 9969), 333), 10441), 21189));
      abort();
      wasm2js_trap();
     }
    };
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19847), 8983), 9969), 342), 10441), 19909));
   abort();
   wasm2js_trap();
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function vision__EstimateHomography_28float__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20vision__RobustHomography_float___2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = 0, $37 = 0, $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = 0, $45 = Math_fround(0), $46 = Math_fround(0), $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = Math_fround(0), $52 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $18 = __stack_pointer + -64 | 0;
  __stack_pointer = $18;
  $47 = std____2__vector_vision__Point2d_float__2c_20std____2__allocator_vision__Point2d_float_____vector_5babi_ne200100_5d_28unsigned_20long_29($18 + 52 | 0, HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 3);
  $48 = std____2__vector_vision__Point2d_float__2c_20std____2__allocator_vision__Point2d_float_____vector_5babi_ne200100_5d_28unsigned_20long_29($18 + 40 | 0, HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] >> 3);
  $11 = HEAP32[$3 >> 2];
  $27 = HEAP32[$3 + 4 >> 2] - $11 >> 3;
  $30 = HEAP32[$47 >> 2];
  $31 = HEAP32[$48 >> 2];
  $2 = HEAP32[$2 >> 2];
  $17 = HEAP32[$1 >> 2];
  $3 = 0;
  while (1) {
   if (($3 | 0) == ($27 | 0)) {
    $3 = 0;
    HEAP32[$18 + 24 >> 2] = 0;
    HEAP32[$18 + 12 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$18 + 4 >> 2] = 0;
    $9 = Math_fround($6 | 0);
    HEAPF32[$18 + 28 >> 2] = $9;
    HEAPF32[$18 + 20 >> 2] = $9;
    $9 = Math_fround($5 | 0);
    HEAPF32[$18 + 16 >> 2] = $9;
    HEAPF32[$18 + 8 >> 2] = $9;
    std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_29($4 + 12 | 0, $27);
    $17 = $0;
    $24 = HEAPF32[$4 + 36 >> 2];
    $50 = HEAP32[$4 + 44 >> 2];
    $42 = HEAP32[$4 + 48 >> 2];
    $35 = __stack_pointer - 16 | 0;
    __stack_pointer = $35;
    block6 : {
     block : {
      $43 = HEAP32[$4 + 40 >> 2];
      if (Math_imul($43, 9) >>> 0 <= HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] >> 2 >>> 0) {
       $22 = $4;
       $25 = HEAP32[$4 + 12 >> 2];
       if (HEAP32[$4 + 16 >> 2] - $25 >> 2 >>> 0 >= $27 >>> 0) {
        if (HEAP32[$4 + 28 >> 2] - HEAP32[$4 + 24 >> 2] >> 3 >>> 0 >= $43 >>> 0) {
         if (($27 | 0) < 4) {
          break block
         }
         HEAP32[$35 + 12 >> 2] = 1234;
         void_20vision__SequentialVector_int__28int__2c_20int_2c_20int_29($25, $27);
         void_20vision__ArrayShuffle_int__28int__2c_20int_2c_20int_2c_20int__29($25, $27, $27, $35 + 12 | 0);
         while (1) {
          if (!(($19 | 0) >= ($43 | 0) | ($16 | 0) >= ($50 | 0))) {
           void_20vision__ArrayShuffle_int__28int__2c_20int_2c_20int_2c_20int__29($25, $27, 4, $35 + 12 | 0);
           $1 = HEAP32[$25 + 12 >> 2] << 3;
           $0 = $1 + $30 | 0;
           $1 = $1 + $31 | 0;
           $2 = 0;
           $13 = HEAP32[$25 >> 2] << 3;
           $4 = $13 + $30 | 0;
           $12 = HEAP32[$25 + 4 >> 2] << 3;
           $11 = $12 + $30 | 0;
           $7 = HEAP32[$25 + 8 >> 2] << 3;
           $8 = $7 + $30 | 0;
           $13 = $13 + $31 | 0;
           $12 = $12 + $31 | 0;
           $7 = $7 + $31 | 0;
           block1 : {
            if (float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($4, $11, $8) > Math_fround(0.0) ^ float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($13, $12, $7) > Math_fround(0.0)) {
             break block1
            }
            if (float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($11, $8, $0) > Math_fround(0.0) ^ float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($12, $7, $1) > Math_fround(0.0)) {
             break block1
            }
            if (float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($8, $0, $4) > Math_fround(0.0) ^ float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($7, $1, $13) > Math_fround(0.0)) {
             break block1
            }
            $9 = float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($0, $4, $11);
            $2 = !(float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($1, $13, $12) > Math_fround(0.0) ^ $9 > Math_fround(0.0));
           }
           block2 : {
            if (!$2) {
             break block2
            }
            $49 = Math_imul($19, 36);
            $12 = $49 + HEAP32[$22 >> 2] | 0;
            $1 = HEAP32[$25 >> 2] << 3;
            $2 = $1 + $31 | 0;
            $4 = HEAP32[$25 + 4 >> 2] << 3;
            $8 = $4 + $31 | 0;
            $13 = HEAP32[$25 + 8 >> 2] << 3;
            $7 = $13 + $31 | 0;
            $21 = HEAP32[$25 + 12 >> 2] << 3;
            $36 = $21 + $31 | 0;
            $0 = 0;
            $11 = __stack_pointer - 144 | 0;
            __stack_pointer = $11;
            $37 = $11 - -64 | 0;
            $10 = $11 + 56 | 0;
            $14 = $11 + 48 | 0;
            $20 = $11 + 40 | 0;
            $26 = $11 + 80 | 0;
            block3 : {
             if (!bool_20vision__Condition4Points2d_float__28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($37, $10, $14, $20, $11 + 92 | 0, $26, $1 + $30 | 0, $4 + $30 | 0, $13 + $30 | 0, $21 + $30 | 0)) {
              break block3
             }
             $1 = $11 + 32 | 0;
             $4 = $11 + 24 | 0;
             $23 = $11 + 16 | 0;
             $28 = $11 + 8 | 0;
             $21 = $11 + 72 | 0;
             if (!bool_20vision__Condition4Points2d_float__28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($1, $4, $23, $28, $11 + 88 | 0, $21, $2, $8, $7, $36)) {
              break block3
             }
             $13 = $11 + 96 | 0;
             $2 = __stack_pointer - 288 | 0;
             __stack_pointer = $2;
             void_20vision__AddHomographyPointContraint_float__28float__2c_20float_20const__2c_20float_20const__29($2, $37, $1);
             $8 = $2 + 72 | 0;
             void_20vision__AddHomographyPointContraint_float__28float__2c_20float_20const__2c_20float_20const__29($8, $10, $4);
             $7 = $2 + 144 | 0;
             void_20vision__AddHomographyPointContraint_float__28float__2c_20float_20const__2c_20float_20const__29($7, $14, $23);
             $10 = $2 + 216 | 0;
             void_20vision__AddHomographyPointContraint_float__28float__2c_20float_20const__2c_20float_20const__29($10, $20, $28);
             $36 = 0;
             $37 = 0;
             $1 = __stack_pointer - 288 | 0;
             __stack_pointer = $1;
             $4 = __stack_pointer - 32 | 0;
             __stack_pointer = $4;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             $14 = $2 + 36 | 0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($14)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($8)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($2 + 108 | 0)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($7)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($2 + 180 | 0)), HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($10)), HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
             (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($2 + 252 | 0)), HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
             $8 = HEAPF32[$4 + 4 >> 2] > HEAPF32[$4 >> 2];
             $8 = HEAPF32[$4 + 8 >> 2] > HEAPF32[$4 + ($8 << 2) >> 2] ? 2 : $8;
             $8 = HEAPF32[$4 + 12 >> 2] > HEAPF32[$4 + ($8 << 2) >> 2] ? 3 : $8;
             $8 = HEAPF32[$4 + 16 >> 2] > HEAPF32[$4 + ($8 << 2) >> 2] ? 4 : $8;
             $8 = HEAPF32[$4 + 20 >> 2] > HEAPF32[$4 + ($8 << 2) >> 2] ? 5 : $8;
             $8 = HEAPF32[$4 + 24 >> 2] > HEAPF32[$4 + ($8 << 2) >> 2] ? 6 : $8;
             $8 = HEAPF32[$4 + 28 >> 2] > HEAPF32[$4 + ($8 << 2) >> 2] ? 7 : $8;
             $7 = $4 + ($8 << 2) | 0;
             $9 = HEAPF32[$7 >> 2];
             if ($9 != Math_fround(0.0)) {
              void_20vision__Swap9_float__28float__2c_20float__29($2, Math_imul($8, 36) + $2 | 0);
              void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($1, $2, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(HEAPF32[$7 >> 2]))));
              wasm2js_memory_copy($1 + 36 | 0, $14, 252);
             }
             __stack_pointer = $4 + 32 | 0;
             block4 : {
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = __stack_pointer - 32 | 0;
              __stack_pointer = $4;
              $8 = $1 + 36 | 0;
              $7 = $2 + 36 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($8, $1, $7);
              $10 = $1 + 72 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($10, $1, $2 + 72 | 0);
              $14 = $1 + 108 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($14, $1, $2 + 108 | 0);
              $20 = $1 + 144 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($20, $1, $2 + 144 | 0);
              $23 = $1 + 180 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($23, $1, $2 + 180 | 0);
              $28 = $1 + 216 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($28, $1, $2 + 216 | 0);
              $44 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($44, $1, $2 + 252 | 0);
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($8)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($10)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($14)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($20)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($23)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($28)), HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($44)), HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
              $10 = HEAPF32[$4 + 4 >> 2] > HEAPF32[$4 >> 2];
              $10 = HEAPF32[$4 + 8 >> 2] > HEAPF32[$4 + ($10 << 2) >> 2] ? 2 : $10;
              $10 = HEAPF32[$4 + 12 >> 2] > HEAPF32[$4 + ($10 << 2) >> 2] ? 3 : $10;
              $10 = HEAPF32[$4 + 16 >> 2] > HEAPF32[$4 + ($10 << 2) >> 2] ? 4 : $10;
              $10 = HEAPF32[$4 + 20 >> 2] > HEAPF32[$4 + ($10 << 2) >> 2] ? 5 : $10;
              $10 = HEAPF32[$4 + 24 >> 2] > HEAPF32[$4 + ($10 << 2) >> 2] ? 6 : $10;
              $14 = $4 + ($10 << 2) | 0;
              $9 = HEAPF32[$14 >> 2];
              if ($9 != Math_fround(0.0)) {
               $10 = Math_imul($10, 36);
               void_20vision__Swap9_float__28float__2c_20float__29($8, $10 + $8 | 0);
               void_20vision__Swap9_float__28float__2c_20float__29($7, $7 + $10 | 0);
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($8, $8, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(HEAPF32[$14 >> 2]))));
              }
              __stack_pointer = $4 + 32 | 0;
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = __stack_pointer - 32 | 0;
              __stack_pointer = $4;
              $8 = $1 + 72 | 0;
              $7 = $1 + 36 | 0;
              $10 = $2 + 72 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($8, $7, $10);
              $14 = $1 + 108 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($14, $7, $2 + 108 | 0);
              $20 = $1 + 144 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($20, $7, $2 + 144 | 0);
              $23 = $1 + 180 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($23, $7, $2 + 180 | 0);
              $28 = $1 + 216 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($28, $7, $2 + 216 | 0);
              $44 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($44, $7, $2 + 252 | 0);
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($8)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($14)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($20)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($23)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($28)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($44)), HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
              $7 = HEAPF32[$4 + 4 >> 2] > HEAPF32[$4 >> 2];
              $7 = HEAPF32[$4 + 8 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 2 : $7;
              $7 = HEAPF32[$4 + 12 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 3 : $7;
              $7 = HEAPF32[$4 + 16 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 4 : $7;
              $7 = HEAPF32[$4 + 20 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 5 : $7;
              $14 = $4 + ($7 << 2) | 0;
              $9 = HEAPF32[$14 >> 2];
              if ($9 != Math_fround(0.0)) {
               $7 = Math_imul($7, 36);
               void_20vision__Swap9_float__28float__2c_20float__29($8, $7 + $8 | 0);
               void_20vision__Swap9_float__28float__2c_20float__29($10, $7 + $10 | 0);
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($8, $8, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(HEAPF32[$14 >> 2]))));
              }
              __stack_pointer = $4 + 32 | 0;
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = __stack_pointer - 32 | 0;
              __stack_pointer = $4;
              $8 = $1 + 108 | 0;
              $7 = $1 + 72 | 0;
              $10 = $2 + 108 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($8, $7, $10);
              $14 = $1 + 144 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($14, $7, $2 + 144 | 0);
              $20 = $1 + 180 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($20, $7, $2 + 180 | 0);
              $23 = $1 + 216 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($23, $7, $2 + 216 | 0);
              $28 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($28, $7, $2 + 252 | 0);
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($8)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($14)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($20)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($23)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($28)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
              $7 = HEAPF32[$4 + 4 >> 2] > HEAPF32[$4 >> 2];
              $7 = HEAPF32[$4 + 8 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 2 : $7;
              $7 = HEAPF32[$4 + 12 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 3 : $7;
              $7 = HEAPF32[$4 + 16 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 4 : $7;
              $14 = $4 + ($7 << 2) | 0;
              $9 = HEAPF32[$14 >> 2];
              if ($9 != Math_fround(0.0)) {
               $7 = Math_imul($7, 36);
               void_20vision__Swap9_float__28float__2c_20float__29($8, $7 + $8 | 0);
               void_20vision__Swap9_float__28float__2c_20float__29($10, $7 + $10 | 0);
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($8, $8, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(HEAPF32[$14 >> 2]))));
              }
              __stack_pointer = $4 + 32 | 0;
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = __stack_pointer - 16 | 0;
              __stack_pointer = $4;
              $8 = $1 + 144 | 0;
              $7 = $1 + 108 | 0;
              $10 = $2 + 144 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($8, $7, $10);
              $14 = $1 + 180 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($14, $7, $2 + 180 | 0);
              $20 = $1 + 216 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($20, $7, $2 + 216 | 0);
              $23 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($23, $7, $2 + 252 | 0);
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($8)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($14)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($20)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($23)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
              $7 = HEAPF32[$4 + 4 >> 2] > HEAPF32[$4 >> 2];
              $7 = HEAPF32[$4 + 8 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 2 : $7;
              $7 = HEAPF32[$4 + 12 >> 2] > HEAPF32[$4 + ($7 << 2) >> 2] ? 3 : $7;
              $14 = $4 + ($7 << 2) | 0;
              $9 = HEAPF32[$14 >> 2];
              if ($9 != Math_fround(0.0)) {
               $7 = Math_imul($7, 36);
               void_20vision__Swap9_float__28float__2c_20float__29($8, $7 + $8 | 0);
               void_20vision__Swap9_float__28float__2c_20float__29($10, $7 + $10 | 0);
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($8, $8, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(HEAPF32[$14 >> 2]))));
              }
              __stack_pointer = $4 + 16 | 0;
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = __stack_pointer - 16 | 0;
              __stack_pointer = $4;
              $8 = $1 + 180 | 0;
              $7 = $1 + 144 | 0;
              $10 = $2 + 180 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($8, $7, $10);
              $14 = $1 + 216 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($14, $7, $2 + 216 | 0);
              $20 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($20, $7, $2 + 252 | 0);
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($8)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($14)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__SumSquares9_float__28float_20const__29($20)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
              $7 = $4 + 4 | 0;
              $14 = HEAPF32[$7 + 4 >> 2] > HEAPF32[$7 >> 2];
              $14 = HEAPF32[$7 + 8 >> 2] > HEAPF32[$7 + ($14 << 2) >> 2] ? 2 : $14;
              $7 = ($14 << 2) + $7 | 0;
              $9 = HEAPF32[$7 >> 2];
              if ($9 != Math_fround(0.0)) {
               $14 = Math_imul($14, 36);
               void_20vision__Swap9_float__28float__2c_20float__29($8, $14 + $8 | 0);
               void_20vision__Swap9_float__28float__2c_20float__29($10, $10 + $14 | 0);
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($8, $8, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(HEAPF32[$7 >> 2]))));
              }
              __stack_pointer = $4 + 16 | 0;
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = $1 + 216 | 0;
              $7 = $1 + 180 | 0;
              $8 = $2 + 216 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($4, $7, $8);
              $10 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($10, $7, $2 + 252 | 0);
              $9 = float_20vision__SumSquares9_float__28float_20const__29($4);
              $15 = float_20vision__SumSquares9_float__28float_20const__29($10);
              $7 = $9 < $15;
              $9 = $7 ? $15 : $9;
              if ($9 != Math_fround(0.0)) {
               $7 = $7 ? 36 : 0;
               void_20vision__Swap9_float__28float__2c_20float__29($4, $7 + $4 | 0);
               void_20vision__Swap9_float__28float__2c_20float__29($8, $7 + $8 | 0);
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($4, $4, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9))));
              }
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = $1 + 252 | 0;
              void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($4, $1 + 216 | 0, $2 + 252 | 0);
              $9 = float_20vision__SumSquares9_float__28float_20const__29($4);
              if ($9 != Math_fround(0.0)) {
               void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($4, $4, Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9))))
              }
              if ($9 == Math_fround(0.0)) {
               break block4
              }
              $4 = __stack_pointer - 384 | 0;
              __stack_pointer = $4;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4, $1, 0)), HEAPF32[wasm2js_i32$0 + 336 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 36 | 0, $1, 1)), HEAPF32[wasm2js_i32$0 + 340 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 72 | 0, $1, 2)), HEAPF32[wasm2js_i32$0 + 344 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 108 | 0, $1, 3)), HEAPF32[wasm2js_i32$0 + 348 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 144 | 0, $1, 4)), HEAPF32[wasm2js_i32$0 + 352 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 180 | 0, $1, 5)), HEAPF32[wasm2js_i32$0 + 356 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 216 | 0, $1, 6)), HEAPF32[wasm2js_i32$0 + 360 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 252 | 0, $1, 7)), HEAPF32[wasm2js_i32$0 + 364 >> 2] = wasm2js_f32$0;
              (wasm2js_i32$0 = $4, wasm2js_f32$0 = float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($4 + 288 | 0, $1, 8)), HEAPF32[wasm2js_i32$0 + 368 >> 2] = wasm2js_f32$0;
              $8 = $4 + 336 | 0;
              $7 = HEAPF32[$8 + 4 >> 2] > HEAPF32[$8 >> 2];
              $7 = HEAPF32[$8 + 8 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 2 : $7;
              $7 = HEAPF32[$8 + 12 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 3 : $7;
              $7 = HEAPF32[$8 + 16 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 4 : $7;
              $7 = HEAPF32[$8 + 20 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 5 : $7;
              $7 = HEAPF32[$8 + 24 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 6 : $7;
              $7 = HEAPF32[$8 + 28 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 7 : $7;
              $7 = HEAPF32[$8 + 32 >> 2] > HEAPF32[$8 + ($7 << 2) >> 2] ? 8 : $7;
              $9 = HEAPF32[($7 << 2) + $8 >> 2];
              if ($9 != Math_fround(0.0)) {
               wasm2js_memory_copy($13, $4 + Math_imul($7, 36) | 0, 36)
              }
              __stack_pointer = $4 + 384 | 0;
              $37 = $9 != Math_fround(0.0);
             }
             __stack_pointer = $1 + 288 | 0;
             if ($37) {
              $36 = !(+Math_fround(Math_abs(float_20vision__Determinant3x3_float__28float_20const__29($13))) < 1.0e-05)
             }
             __stack_pointer = $2 + 288 | 0;
             if (!$36) {
              break block3
             }
             $38 = HEAPF32[$26 + 4 >> 2];
             $39 = HEAPF32[$26 >> 2];
             $45 = HEAPF32[$13 + 12 >> 2];
             $29 = HEAPF32[$21 + 4 >> 2];
             $40 = HEAPF32[$13 + 16 >> 2];
             $34 = HEAPF32[$13 + 24 >> 2];
             $32 = HEAPF32[$13 >> 2];
             $9 = HEAPF32[$11 + 92 >> 2];
             $33 = HEAPF32[$21 >> 2];
             $41 = HEAPF32[$13 + 28 >> 2];
             $15 = HEAPF32[$11 + 88 >> 2];
             $46 = Math_fround(Math_fround($33 * $41) + Math_fround(HEAPF32[$13 + 4 >> 2] / $15));
             HEAPF32[$12 + 4 >> 2] = $9 * $46;
             $32 = Math_fround(Math_fround($34 * $33) + Math_fround($32 / $15));
             HEAPF32[$12 >> 2] = $9 * $32;
             $33 = HEAPF32[$21 >> 2];
             $51 = HEAPF32[$13 + 32 >> 2];
             $52 = HEAPF32[$13 + 8 >> 2];
             $40 = Math_fround(Math_fround($41 * $29) + Math_fround($40 / $15));
             HEAPF32[$12 + 16 >> 2] = $9 * $40;
             $29 = Math_fround(Math_fround($34 * $29) + Math_fround($45 / $15));
             HEAPF32[$12 + 12 >> 2] = $9 * $29;
             $34 = Math_fround($9 * Math_fround(-$38));
             $38 = Math_fround($9 * Math_fround(-$39));
             HEAPF32[$12 + 8 >> 2] = Math_fround($34 * $46) + Math_fround(Math_fround($38 * $32) + Math_fround(Math_fround($51 * $33) + Math_fround($52 / $15)));
             HEAPF32[$12 + 20 >> 2] = Math_fround($34 * $40) + Math_fround(Math_fround($38 * $29) + Math_fround(Math_fround(HEAPF32[$13 + 32 >> 2] * HEAPF32[$21 + 4 >> 2]) + Math_fround(HEAPF32[$13 + 20 >> 2] / $15)));
             $15 = Math_fround($9 * HEAPF32[$13 + 24 >> 2]);
             HEAPF32[$12 + 24 >> 2] = $15;
             $9 = Math_fround($9 * HEAPF32[$13 + 28 >> 2]);
             HEAPF32[$12 + 28 >> 2] = $9;
             HEAPF32[$12 + 32 >> 2] = Math_fround(HEAPF32[$13 + 32 >> 2] - Math_fround($15 * HEAPF32[$26 >> 2])) - Math_fround($9 * HEAPF32[$26 + 4 >> 2]);
             $0 = 1;
            }
            __stack_pointer = $11 + 144 | 0;
            if (!$0) {
             break block2
            }
            $36 = 0;
            $12 = __stack_pointer - 48 | 0;
            __stack_pointer = $12;
            $2 = $12 + 40 | 0;
            $26 = HEAP32[$22 >> 2] + $49 | 0;
            void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($2, $26, $18);
            $0 = $12 + 32 | 0;
            $8 = $18 + 8 | 0;
            void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($0, $26, $8);
            $4 = $12 + 24 | 0;
            $7 = $18 + 16 | 0;
            void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($4, $26, $7);
            $1 = HEAP32[$12 + 44 >> 2];
            HEAP32[$12 + 16 >> 2] = HEAP32[$12 + 40 >> 2];
            HEAP32[$12 + 20 >> 2] = $1;
            $1 = HEAP32[$12 + 36 >> 2];
            HEAP32[$12 + 8 >> 2] = HEAP32[$12 + 32 >> 2];
            HEAP32[$12 + 12 >> 2] = $1;
            block5 : {
             if (!bool_20vision__Homography3PointsGeometricallyConsistent_float__28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($18, $8, $7, $2, $0, $4)) {
              break block5
             }
             $21 = 3;
             $1 = $18;
             $13 = $8;
             while (1) {
              if (($21 | 0) != 4) {
               $11 = $2;
               $7 = $7 + 8 | 0;
               void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($2, $26, $7);
               $21 = $21 + 1 | 0;
               $1 = $1 + 8 | 0;
               $13 = $13 + 8 | 0;
               $37 = bool_20vision__Homography3PointsGeometricallyConsistent_float__28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($1, $13, $7, $0, $4, $2);
               $2 = $0;
               $0 = $4;
               $4 = $11;
               if ($37) {
                continue
               }
               break block5;
              }
              break;
             };
             $1 = $0;
             $0 = $12 + 16 | 0;
             if (!bool_20vision__Homography3PointsGeometricallyConsistent_float__28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($13, $7, $18, $1, $4, $0)) {
              break block5
             }
             $36 = bool_20vision__Homography3PointsGeometricallyConsistent_float__28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($7, $18, $8, $4, $0, $12 + 8 | 0);
            }
            __stack_pointer = $12 + 48 | 0;
            if (!$36) {
             break block2
            }
            $19 = $19 + 1 | 0;
           }
           $16 = $16 + 1 | 0;
           continue;
          }
          break;
         };
         if (!$19) {
          break block
         }
         $26 = ($27 | 0) > ($42 | 0) ? $42 : $27;
         $29 = Math_fround(Math_fround(1.0) / Math_fround($24 * $24));
         $0 = 0;
         $1 = ($19 | 0) > 0 ? $19 : 0;
         $2 = HEAP32[$22 + 24 >> 2];
         $16 = 0;
         while (1) if (($1 | 0) == ($16 | 0)) {
          label6 : while (1) {
           if (!(($0 | 0) < ($27 | 0) & ($19 | 0) > 2)) {
            $2 = ($19 | 0) <= 1 ? 1 : $19;
            $0 = HEAP32[$22 + 24 >> 2];
            $9 = HEAPF32[$0 >> 2];
            $1 = HEAP32[$0 + 4 >> 2];
            $16 = 1;
            while (1) if (($2 | 0) == ($16 | 0)) {
             wasm2js_memory_copy($17, HEAP32[$22 >> 2] + Math_imul($1, 36) | 0, 36);
             $9 = HEAPF32[$17 + 32 >> 2];
             HEAP32[$17 + 32 >> 2] = 1065353216;
             $9 = Math_fround(Math_fround(1.0) / $9);
             HEAPF32[$17 >> 2] = HEAPF32[$17 >> 2] * $9;
             HEAPF32[$17 + 4 >> 2] = $9 * HEAPF32[$17 + 4 >> 2];
             HEAPF32[$17 + 8 >> 2] = $9 * HEAPF32[$17 + 8 >> 2];
             HEAPF32[$17 + 12 >> 2] = $9 * HEAPF32[$17 + 12 >> 2];
             HEAPF32[$17 + 16 >> 2] = $9 * HEAPF32[$17 + 16 >> 2];
             HEAPF32[$17 + 20 >> 2] = $9 * HEAPF32[$17 + 20 >> 2];
             HEAPF32[$17 + 24 >> 2] = $9 * HEAPF32[$17 + 24 >> 2];
             HEAPF32[$17 + 28 >> 2] = $9 * HEAPF32[$17 + 28 >> 2];
             $0 = 1;
             break block6;
            } else {
             $4 = $0 + ($16 << 3) | 0;
             $15 = HEAPF32[$4 >> 2];
             if ($15 < $9) {
              $9 = $15;
              $1 = HEAP32[$4 + 4 >> 2];
             }
             $16 = $16 + 1 | 0;
             continue;
            };
           }
           $1 = $27 - $0 | 0;
           $2 = (($1 | 0) > ($26 | 0) ? $26 : $1) + $0 | 0;
           $11 = ($0 | 0) > ($2 | 0) ? $0 : $2;
           $4 = 0;
           label7 : while (1) {
            $16 = HEAP32[$22 + 24 >> 2];
            if (($4 | 0) == ($19 | 0)) {
             $7 = $19 & 1 ? ($19 | 0) / 2 | 0 : ($19 >> 1) - 1 | 0;
             $4 = 0;
             block10 : {
              block7 : {
               if (($19 | 0) > 0) {
                if (($7 | 0) <= 0) {
                 break block7
                }
                $0 = $19 - 1 | 0;
                $42 = $7 - 1 | 0;
                $8 = $16 + ($42 << 3) | 0;
                while (1) {
                 if (($0 | 0) > ($4 | 0)) {
                  $21 = HEAP32[$8 + 4 >> 2];
                  $9 = HEAPF32[$8 >> 2];
                  $1 = $0;
                  $11 = $4;
                  while (1) {
                   $13 = $16 + ($11 << 3) | 0;
                   $15 = HEAPF32[$13 >> 2];
                   if (!(!($15 < $9) & (($21 | 0) <= HEAP32[$13 + 4 >> 2] | $9 < $15))) {
                    $11 = $11 + 1 | 0;
                    continue;
                   }
                   while (1) {
                    $12 = $16 + ($1 << 3) | 0;
                    $24 = HEAPF32[$12 >> 2];
                    if (!(!($24 > $9) & (($21 | 0) >= HEAP32[$12 + 4 >> 2] | $9 > $24))) {
                     $1 = $1 - 1 | 0;
                     continue;
                    }
                    break;
                   };
                   if (($1 | 0) >= ($11 | 0)) {
                    HEAPF32[$13 >> 2] = $24;
                    HEAPF32[$12 >> 2] = $15;
                    $43 = HEAP32[$13 + 4 >> 2];
                    HEAP32[$13 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
                    HEAP32[$12 + 4 >> 2] = $43;
                    $11 = $11 + 1 | 0;
                    $1 = $1 - 1 | 0;
                   }
                   if (($1 | 0) >= ($11 | 0)) {
                    continue
                   }
                   break;
                  };
                  $0 = ($7 | 0) > ($11 | 0) ? $0 : $1;
                  $4 = ($1 | 0) < ($42 | 0) ? $11 : $4;
                  continue;
                 }
                 break;
                };
                $0 = HEAP32[$8 + 4 >> 2];
                HEAP32[$35 + 4 >> 2] = HEAP32[$8 >> 2];
                HEAP32[$35 + 8 >> 2] = $0;
                break block10;
               }
               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21926), 21973), 9969), 82), 10441), 22047));
               abort();
               wasm2js_trap();
              }
              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22195), 21973), 9969), 83), 10441), 22224));
              abort();
              wasm2js_trap();
             }
             $19 = $19 >>> 1 | 0;
             $0 = $2;
             continue label6;
            }
            $8 = $4 << 3;
            $13 = HEAP32[$22 >> 2] + Math_imul(HEAP32[($8 + $16 | 0) + 4 >> 2], 36) | 0;
            $16 = $0;
            while (1) if (($11 | 0) == ($16 | 0)) {
             $4 = $4 + 1 | 0;
             continue label7;
            } else {
             $1 = __stack_pointer - 16 | 0;
             __stack_pointer = $1;
             $12 = HEAP32[($16 << 2) + $25 >> 2] << 3;
             $7 = $12 + $30 | 0;
             void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float__2c_20float_20const__2c_20float_2c_20float_29($1 + 8 | 0, $1 + 12 | 0, $13, HEAPF32[$7 >> 2], HEAPF32[$7 + 4 >> 2]);
             $12 = $12 + $31 | 0;
             $9 = Math_fround(HEAPF32[$1 + 8 >> 2] - HEAPF32[$12 >> 2]);
             $15 = Math_fround($9 * $9);
             $9 = Math_fround(HEAPF32[$1 + 12 >> 2] - HEAPF32[$12 + 4 >> 2]);
             $9 = logf(Math_fround(Math_fround(Math_fround($15 + Math_fround($9 * $9)) * $29) + Math_fround(1.0)));
             __stack_pointer = $1 + 16 | 0;
             $1 = $8 + HEAP32[$22 + 24 >> 2] | 0;
             HEAPF32[$1 >> 2] = $9 + HEAPF32[$1 >> 2];
             $16 = $16 + 1 | 0;
             continue;
            };
           };
          }
         } else {
          $4 = $2 + ($16 << 3) | 0;
          HEAP32[$4 + 4 >> 2] = $16;
          HEAP32[$4 >> 2] = 0;
          $16 = $16 + 1 | 0;
          continue;
         };
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21702), 21332), 9969), 121), 10441), 21764));
        abort();
        wasm2js_trap();
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21586), 21332), 9969), 120), 10441), 23630));
       abort();
       wasm2js_trap();
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21223), 21332), 9969), 119), 10441), 21479));
      abort();
      wasm2js_trap();
     }
     $0 = 0;
    }
    __stack_pointer = $35 + 16 | 0;
    if ($0) {
     $0 = __stack_pointer - 112 | 0;
     __stack_pointer = $0;
     $16 = $0 + 32 | 0;
     $3 = 0;
     block11 : {
      if (!bool_20vision__MatrixInverse3x3_float__28float__2c_20float_20const__2c_20float_29($16, $17, Math_fround(9.999999747378752e-06))) {
       break block11
      }
      HEAP32[$0 + 24 >> 2] = 0;
      HEAP32[$0 + 28 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      $9 = Math_fround($5 | 0);
      HEAPF32[$0 + 16 >> 2] = $9;
      $15 = Math_fround($6 | 0);
      HEAPF32[$0 + 12 >> 2] = $15;
      HEAPF32[$0 + 8 >> 2] = $9;
      HEAPF32[$0 + 4 >> 2] = $15;
      HEAP32[$0 >> 2] = 0;
      $1 = $0 + 104 | 0;
      void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($1, $16, $0 + 24 | 0);
      $2 = $0 + 96 | 0;
      void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($2, $16, $0 + 16 | 0);
      $4 = $0 + 88 | 0;
      void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($4, $16, $0 + 8 | 0);
      $11 = $0 + 80 | 0;
      void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($11, $16, $0);
      $34 = HEAPF32[$2 >> 2];
      $9 = HEAPF32[$1 >> 2];
      $38 = Math_fround($34 - $9);
      $15 = HEAPF32[$4 + 4 >> 2];
      $24 = HEAPF32[$1 + 4 >> 2];
      $39 = Math_fround($15 - $24);
      $45 = HEAPF32[$2 + 4 >> 2];
      $40 = Math_fround($45 - $24);
      $29 = HEAPF32[$4 >> 2];
      $32 = Math_fround($29 - $9);
      $33 = Math_fround(Math_fround(Math_abs(Math_fround(Math_fround($38 * $39) - Math_fround($40 * $32)))) * Math_fround(.5));
      $41 = $32;
      $32 = HEAPF32[$11 + 4 >> 2];
      $24 = Math_fround($32 - $24);
      $46 = $39;
      $39 = HEAPF32[$11 >> 2];
      $9 = Math_fround($39 - $9);
      $41 = Math_fround(Math_fround(Math_abs(Math_fround(Math_fround($41 * $24) - Math_fround($46 * $9)))) * Math_fround(.5));
      $33 = $33 < $41 ? $33 : $41;
      $9 = Math_fround(Math_fround(Math_abs(Math_fround(Math_fround($38 * $24) - Math_fround($40 * $9)))) * Math_fround(.5));
      $9 = $9 > $33 ? $33 : $9;
      $15 = Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($34 - $29) * Math_fround($32 - $15)) - Math_fround(Math_fround($45 - $15) * Math_fround($39 - $29))))) * Math_fround(.5));
      $3 = 0;
      if (Math_fround(+(Math_imul($5, $6) | 0) * .0001) > ($9 < $15 ? $9 : $15)) {
       break block11
      }
      $9 = float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($1, $2, $4);
      $2 = (((float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($2, $4, $11) > Math_fround(0.0) ? 1 : -1) + ($9 > Math_fround(0.0) ? 1 : -1) | 0) + (float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($4, $11, $1) > Math_fround(0.0) ? 1 : -1) | 0) + (float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($11, $1, $2) > Math_fround(0.0) ? 1 : -1) | 0;
      $1 = $2 >> 31;
      $3 = (($1 ^ $2) - $1 | 0) == 4;
     }
     __stack_pointer = $0 + 112 | 0;
    }
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($48);
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($47);
    __stack_pointer = $18 - -64 | 0;
   } else {
    $1 = $3 << 3;
    $22 = $1 + $31 | 0;
    $8 = $1 + $11 | 0;
    $13 = $17 + Math_imul(HEAP32[$8 >> 2], 20) | 0;
    HEAPF32[$22 >> 2] = HEAPF32[$13 >> 2];
    HEAPF32[$22 + 4 >> 2] = HEAPF32[$13 + 4 >> 2];
    $1 = $1 + $30 | 0;
    $22 = $2 + Math_imul(HEAP32[$8 + 4 >> 2], 20) | 0;
    HEAPF32[$1 >> 2] = HEAPF32[$22 >> 2];
    HEAPF32[$1 + 4 >> 2] = HEAPF32[$22 + 4 >> 2];
    $3 = $3 + 1 | 0;
    continue;
   }
   break;
  };
  return $3;
 }
 
 function vision__FindInliers_28std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____2c_20float_20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0);
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____reserve_28unsigned_20long_29($0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] >> 3);
  $11 = $8 + 12 | 0;
  $5 = Math_fround($5 * $5);
  while (1) {
   $6 = HEAP32[$4 >> 2];
   if (HEAP32[$4 + 4 >> 2] - $6 >> 3 >>> 0 > $10 >>> 0) {
    $7 = $6;
    $6 = $10 << 3;
    $7 = HEAP32[$3 >> 2] + Math_imul(HEAP32[($7 + $6 | 0) + 4 >> 2], 20) | 0;
    void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float__2c_20float_20const__2c_20float_2c_20float_29($8 + 8 | 0, $11, $1, HEAPF32[$7 >> 2], HEAPF32[$7 + 4 >> 2]);
    $6 = $6 + HEAP32[$4 >> 2] | 0;
    $7 = HEAP32[$2 >> 2] + Math_imul(HEAP32[$6 >> 2], 20) | 0;
    $9 = Math_fround(HEAPF32[$8 + 8 >> 2] - HEAPF32[$7 >> 2]);
    $12 = Math_fround($9 * $9);
    $9 = Math_fround(HEAPF32[$8 + 12 >> 2] - HEAPF32[$7 + 4 >> 2]);
    if ($5 >= Math_fround($12 + Math_fround($9 * $9))) {
     vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($0, $6)
    }
    $10 = $10 + 1 | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $8 + 16 | 0;
 }
 
 function std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____reserve_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block : {
   $3 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 8 >> 2] - $3 >> 3 >>> 0 < $1 >>> 0) {
    if ($1 >>> 0 >= 536870912) {
     break block
    }
    $4 = $0;
    $0 = std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____29($2 + 12 | 0, $1, HEAP32[$0 + 4 >> 2] - $3 >> 3, $0);
    std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($4, $0);
    std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________split_buffer_28_29($0);
   }
   __stack_pointer = $2 + 32 | 0;
   return;
  }
  std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29();
  wasm2js_trap();
 }
 
 function vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = $0;
  $2 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($2 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = $2 + 8 | 0;
    break block;
   }
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $2 = std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____29($3 + 12 | 0, std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3) + 1 | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3, $0);
   $4 = HEAP32[$2 + 8 >> 2];
   $6 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 8;
   std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $2);
   $0 = HEAP32[$0 + 4 >> 2];
   std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________split_buffer_28_29($2);
   __stack_pointer = $3 + 32 | 0;
  }
  HEAP32[$5 + 4 >> 2] = $0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float____vector_5babi_ne200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = $0;
  if ($1) {
   if ($1 >>> 0 >= 1073741824) {
    std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
    wasm2js_trap();
   }
   $3 = std____2__allocator_float___allocate_5babi_ne200100_5d_28unsigned_20long_29($1);
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = ($1 << 2) + $3;
   std____2__vector_float_2c_20std____2__allocator_float______construct_at_end_28unsigned_20long_29($0, $1);
  }
  HEAP8[$2 + 12 | 0] = 1;
  std____2____exception_guard_exceptions_std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______destroy_vector______exception_guard_exceptions_5babi_ne200100_5d_28_29($2 + 8 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function std____2__vector_vision__Point2d_float__2c_20std____2__allocator_vision__Point2d_float_____vector_5babi_ne200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = $0;
  if ($1) {
   if ($1 >>> 0 >= 536870912) {
    std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______throw_length_error_5babi_ne200100_5d_28_29();
    wasm2js_trap();
   }
   $3 = std____2__allocator_std____2__pair_float_2c_20unsigned_20long____allocate_5babi_ne200100_5d_28unsigned_20long_29($1);
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = ($1 << 3) + $3;
   std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______construct_at_end_28unsigned_20long_29($0, $1);
  }
  HEAP8[$2 + 12 | 0] = 1;
  std____2____exception_guard_exceptions_std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______destroy_vector______exception_guard_exceptions_5babi_ne200100_5d_28_29($2 + 8 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float__2c_20float_20const__2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0);
  $5 = Math_fround(HEAPF32[$2 + 32 >> 2] + Math_fround(Math_fround(HEAPF32[$2 + 24 >> 2] * $3) + Math_fround($4 * HEAPF32[$2 + 28 >> 2])));
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$2 + 8 >> 2] + Math_fround(Math_fround(HEAPF32[$2 >> 2] * $3) + Math_fround($4 * HEAPF32[$2 + 4 >> 2]))) / $5;
  HEAPF32[$1 >> 2] = Math_fround(HEAPF32[$2 + 20 >> 2] + Math_fround(Math_fround(HEAPF32[$2 + 12 >> 2] * $3) + Math_fround($4 * HEAPF32[$2 + 16 >> 2]))) / $5;
 }
 
 function bool_20vision__MatrixInverse3x3_float__28float__2c_20float_20const__2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0);
  $4 = $2;
  $2 = float_20vision__Determinant3x3_float__28float_20const__29($1);
  $3 = $4 >= Math_fround(Math_abs($2));
  if (!$3) {
   $2 = Math_fround(Math_fround(1.0) / $2);
   HEAPF32[$0 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$1 + 32 >> 2]) - Math_fround(HEAPF32[$1 + 20 >> 2] * HEAPF32[$1 + 28 >> 2]));
   HEAPF32[$0 + 4 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$1 + 28 >> 2]) - Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[$1 + 32 >> 2]));
   HEAPF32[$0 + 8 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[$1 + 20 >> 2]) - Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$1 + 16 >> 2]));
   HEAPF32[$0 + 12 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 20 >> 2] * HEAPF32[$1 + 24 >> 2]) - Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[$1 + 32 >> 2]));
   HEAPF32[$0 + 16 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$1 + 32 >> 2]) - Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$1 + 24 >> 2]));
   HEAPF32[$0 + 20 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$1 + 12 >> 2]) - Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$1 + 20 >> 2]));
   HEAPF32[$0 + 24 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[$1 + 28 >> 2]) - Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$1 + 24 >> 2]));
   HEAPF32[$0 + 28 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[$1 + 24 >> 2]) - Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$1 + 28 >> 2]));
   HEAPF32[$0 + 32 >> 2] = $2 * Math_fround(Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$1 + 16 >> 2]) - Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[$1 + 12 >> 2]));
  }
  return !$3;
 }
 
 function std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____pop_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  $10 = HEAP32[$0 + 4 >> 2];
  $5 = HEAP32[$0 >> 2];
  $8 = $10 - $5 >> 3;
  if (($8 | 0) >= 2) {
   block1 : {
    $11 = HEAP32[$5 >> 2];
    $12 = HEAP32[$5 + 4 >> 2];
    $1 = $5;
    $13 = ($8 - 2 | 0) / 2 | 0;
    while (1) {
     $6 = $3 << 1;
     $4 = $6 | 1;
     $7 = ($3 << 3) + $1 | 0;
     $2 = $7 + 8 | 0;
     $3 = $6 + 2 | 0;
     block : {
      if (($3 | 0) >= ($8 | 0)) {
       $3 = $4;
       break block;
      }
      $6 = $4;
      $4 = HEAPU32[$7 + 12 >> 2] > HEAPU32[$7 + 20 >> 2];
      $3 = $4 ? $3 : $6;
      $2 = $4 ? $7 + 16 | 0 : $2;
     }
     $4 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $4;
     $1 = $2;
     if (($3 | 0) <= ($13 | 0)) {
      continue
     }
     break;
    };
    $2 = $10 - 8 | 0;
    if (($2 | 0) == ($1 | 0)) {
     HEAP32[$1 >> 2] = $11;
     HEAP32[$1 + 4 >> 2] = $12;
     break block1;
    }
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    HEAP32[$2 >> 2] = $11;
    HEAP32[$2 + 4 >> 2] = $12;
    $1 = $1 + 8 | 0;
    void_20std____2____sift_up_5babi_ne200100_5d_std____2___ClassicAlgPolicy_2c_20std____2__less_vision__PriorityQueueItem_96____2c_20std____2____wrap_iter_vision__PriorityQueueItem_96_____28std____2____wrap_iter_vision__PriorityQueueItem_96____2c_20std____2____wrap_iter_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96____2c_20std____2__iterator_traits_std____2____wrap_iter_vision__PriorityQueueItem_96______difference_type_29($5, $1, $1 - $5 >> 3);
   }
  }
  __stack_pointer = $9 + 16 | 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 8;
 }
 
 function vision__BinaryHierarchicalClustering_96___query_28std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____2c_20vision__Node_96__20const__2c_20unsigned_20char_20const__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  block1 : {
   if (HEAPU8[$2 + 100 | 0] == 1) {
    $1 = $0 + 72 | 0;
    $3 = HEAP32[$0 + 76 >> 2];
    $9 = __stack_pointer - 32 | 0;
    __stack_pointer = $9;
    $7 = HEAP32[$2 + 120 >> 2];
    $4 = HEAP32[$2 + 116 >> 2];
    $2 = $7 - $4 >> 2;
    block : {
     if (($2 | 0) <= 0) {
      break block
     }
     $0 = HEAP32[$1 + 4 >> 2];
     if (($2 | 0) <= HEAP32[$1 + 8 >> 2] - $0 >> 2) {
      $5 = $0 - $3 | 0;
      $11 = $5 >> 2;
      if (($11 | 0) < ($2 | 0)) {
       $8 = $4 + $5 | 0;
       $6 = HEAP32[$1 + 4 >> 2];
       while (1) {
        if (($7 | 0) != ($8 | 0)) {
         HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
         $6 = $6 + 4 | 0;
         $8 = $8 + 4 | 0;
         continue;
        }
        break;
       };
       HEAP32[$1 + 4 >> 2] = $6;
       if (($11 | 0) <= 0) {
        break block
       }
       std____2__vector_int_2c_20std____2__allocator_int______move_range_28int__2c_20int__2c_20int__29($1, $3, $0, $3 + ($2 << 2) | 0);
       if (!$5 | ($0 | 0) == ($3 | 0)) {
        break block
       }
       wasm2js_memory_copy($3, $4, $5);
       break block;
      }
      $5 = $0;
      $0 = $2 << 2;
      std____2__vector_int_2c_20std____2__allocator_int______move_range_28int__2c_20int__2c_20int__29($1, $3, $5, $0 + $3 | 0);
      if (!$0) {
       break block
      }
      wasm2js_memory_copy($3, $4, $0);
      break block;
     }
     $0 = std____2____split_buffer_float_2c_20std____2__allocator_float_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_float___29($9 + 12 | 0, std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($1, $2 + ($0 - HEAP32[$1 >> 2] >> 2) | 0), $3 - HEAP32[$1 >> 2] >> 2, $1);
     $6 = HEAP32[$0 + 8 >> 2];
     $2 = $6 + ($2 << 2) | 0;
     while (1) {
      if (($2 | 0) != ($6 | 0)) {
       HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
       $4 = $4 + 4 | 0;
       $6 = $6 + 4 | 0;
       continue;
      }
      break;
     };
     HEAP32[$0 + 8 >> 2] = $2;
     $2 = HEAP32[$1 + 4 >> 2] - $3 | 0;
     if ($2) {
      wasm2js_memory_copy(HEAP32[$0 + 8 >> 2], $3, $2)
     }
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + (HEAP32[$1 + 4 >> 2] - $3 | 0);
     HEAP32[$1 + 4 >> 2] = $3;
     $4 = HEAP32[$1 >> 2];
     $2 = $3 - $4 | 0;
     $3 = HEAP32[$0 + 4 >> 2] - $2 | 0;
     if ($2) {
      wasm2js_memory_copy($3, $4, $2)
     }
     HEAP32[$0 + 4 >> 2] = $3;
     $2 = HEAP32[$1 >> 2];
     HEAP32[$1 + 4 >> 2] = $2;
     HEAP32[$1 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$0 + 4 >> 2] = $2;
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 8 >> 2] = $2;
     $2 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
     std____2____split_buffer_float_2c_20std____2__allocator_float________split_buffer_28_29($0);
    }
    __stack_pointer = $9 + 32 | 0;
    break block1;
   }
   HEAP32[$10 + 12 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$10 + 8 >> 2] = 0;
   $15 = $10 + 4 | 0;
   $14 = __stack_pointer - 16 | 0;
   __stack_pointer = $14;
   $8 = -1;
   $9 = std____2__vector_vision__Point2d_float__2c_20std____2__allocator_vision__Point2d_float_____vector_5babi_ne200100_5d_28unsigned_20long_29($14 + 4 | 0, HEAP32[$2 + 108 >> 2] - HEAP32[$2 + 104 >> 2] >> 2);
   $4 = -1;
   block2 : {
    while (1) {
     if (HEAP32[$9 + 4 >> 2] - HEAP32[$9 >> 2] >> 3 >>> 0 <= $6 >>> 0) {
      if (($8 | 0) != -1) {
       int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29($15, HEAP32[$2 + 104 >> 2] + ($8 << 2) | 0);
       $6 = 0;
       while (1) {
        $5 = HEAP32[$9 >> 2];
        if (HEAP32[$9 + 4 >> 2] - $5 >> 3 >>> 0 <= $6 >>> 0) {
         break block2
        }
        block3 : {
         if (($6 | 0) == ($8 | 0)) {
          break block3
         }
         $4 = $5 + ($6 << 3) | 0;
         if (HEAP32[$4 + 4 >> 2] == HEAP32[($5 + ($8 << 3) | 0) + 4 >> 2]) {
          int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29($15, HEAP32[$2 + 104 >> 2] + ($6 << 2) | 0);
          break block3;
         }
         $5 = HEAP32[$1 + 4 >> 2];
         block4 : {
          if ($5 >>> 0 < HEAPU32[$1 + 8 >> 2]) {
           $7 = HEAP32[$4 + 4 >> 2];
           HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$5 + 4 >> 2] = $7;
           $4 = $5 + 8 | 0;
           break block4;
          }
          $12 = __stack_pointer - 32 | 0;
          __stack_pointer = $12;
          $5 = std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____29($12 + 12 | 0, std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($1, (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 3) + 1 | 0), HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >> 3, $1);
          $7 = HEAP32[$5 + 8 >> 2];
          $13 = HEAP32[$4 + 4 >> 2];
          HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$7 + 4 >> 2] = $13;
          HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 8;
          $4 = HEAP32[$1 >> 2];
          $13 = HEAP32[$1 + 4 >> 2];
          $16 = HEAP32[$5 + 4 >> 2] + ($4 - $13 | 0) | 0;
          $7 = $16;
          while (1) {
           if (($4 | 0) != ($13 | 0)) {
            $17 = HEAP32[$4 + 4 >> 2];
            HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$7 + 4 >> 2] = $17;
            $7 = $7 + 8 | 0;
            $4 = $4 + 8 | 0;
            continue;
           }
           break;
          };
          HEAP32[$5 + 4 >> 2] = $16;
          $4 = HEAP32[$1 >> 2];
          HEAP32[$1 + 4 >> 2] = $4;
          HEAP32[$1 >> 2] = HEAP32[$5 + 4 >> 2];
          HEAP32[$5 + 4 >> 2] = $4;
          $4 = HEAP32[$1 + 4 >> 2];
          HEAP32[$1 + 4 >> 2] = HEAP32[$5 + 8 >> 2];
          HEAP32[$5 + 8 >> 2] = $4;
          $4 = HEAP32[$1 + 8 >> 2];
          HEAP32[$1 + 8 >> 2] = HEAP32[$5 + 12 >> 2];
          HEAP32[$5 + 12 >> 2] = $4;
          HEAP32[$5 >> 2] = HEAP32[$5 + 4 >> 2];
          $4 = HEAP32[$1 + 4 >> 2];
          std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________split_buffer_28_29($5);
          __stack_pointer = $12 + 32 | 0;
         }
         HEAP32[$1 + 4 >> 2] = $4;
         $4 = __stack_pointer - 16 | 0;
         __stack_pointer = $4;
         $5 = HEAP32[$1 >> 2];
         $7 = HEAP32[$1 + 4 >> 2];
         void_20std____2____sift_up_5babi_ne200100_5d_std____2___ClassicAlgPolicy_2c_20std____2__less_vision__PriorityQueueItem_96____2c_20std____2____wrap_iter_vision__PriorityQueueItem_96_____28std____2____wrap_iter_vision__PriorityQueueItem_96____2c_20std____2____wrap_iter_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96____2c_20std____2__iterator_traits_std____2____wrap_iter_vision__PriorityQueueItem_96______difference_type_29($5, $7, $7 - $5 >> 3);
         __stack_pointer = $4 + 16 | 0;
        }
        $6 = $6 + 1 | 0;
        continue;
       };
      }
     } else {
      $7 = $6 << 2;
      $5 = vision__HammingDistance768_28unsigned_20int_20const__2c_20unsigned_20int_20const__29(HEAP32[$7 + HEAP32[$2 + 104 >> 2] >> 2] + 4 | 0, $3);
      $7 = HEAP32[$7 + HEAP32[$2 + 104 >> 2] >> 2];
      $12 = HEAP32[$9 >> 2] + ($6 << 3) | 0;
      HEAP32[$12 + 4 >> 2] = $5;
      HEAP32[$12 >> 2] = $7;
      $7 = $5;
      $5 = $4 >>> 0 > $5 >>> 0;
      $4 = $5 ? $7 : $4;
      $8 = $5 ? $6 : $8;
      $6 = $6 + 1 | 0;
      continue;
     }
     break;
    };
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19679), 13644), 9969), 155), 10441), 19767));
    abort();
    wasm2js_trap();
   }
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($9);
   __stack_pointer = $14 + 16 | 0;
   while (1) {
    $2 = HEAP32[$10 + 4 >> 2];
    if (HEAP32[$10 + 8 >> 2] - $2 >> 2 >>> 0 <= $11 >>> 0) {
     block5 : {
      if (HEAP32[$0 + 100 >> 2] >= HEAP32[$0 + 104 >> 2]) {
       break block5
      }
      $2 = HEAP32[$1 >> 2];
      if (($2 | 0) == HEAP32[$1 + 4 >> 2]) {
       break block5
      }
      $2 = HEAP32[$2 >> 2];
      std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____pop_28_29($1);
      HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + 1;
      vision__BinaryHierarchicalClustering_96___query_28std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____2c_20vision__Node_96__20const__2c_20unsigned_20char_20const__29_20const($0, $1, $2, $3);
     }
     std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($10 + 4 | 0);
    } else {
     vision__BinaryHierarchicalClustering_96___query_28std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____2c_20vision__Node_96__20const__2c_20unsigned_20char_20const__29_20const($0, $1, HEAP32[$2 + ($11 << 2) >> 2], $3);
     $11 = $11 + 1 | 0;
     continue;
    }
    break;
   };
  }
  __stack_pointer = $10 + 16 | 0;
 }
 
 function void_20std____2____sift_up_5babi_ne200100_5d_std____2___ClassicAlgPolicy_2c_20std____2__less_vision__PriorityQueueItem_96____2c_20std____2____wrap_iter_vision__PriorityQueueItem_96_____28std____2____wrap_iter_vision__PriorityQueueItem_96____2c_20std____2____wrap_iter_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96____2c_20std____2__iterator_traits_std____2____wrap_iter_vision__PriorityQueueItem_96______difference_type_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  block : {
   if (($2 | 0) < 2) {
    break block
   }
   $2 = $2 - 2 >>> 1 | 0;
   $3 = ($2 << 3) + $0 | 0;
   if (HEAPU32[$3 + 4 >> 2] <= HEAPU32[$1 - 4 >> 2]) {
    break block
   }
   $1 = $1 - 8 | 0;
   $6 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   while (1) {
    block1 : {
     $5 = $1;
     $1 = $3;
     $3 = HEAP32[$1 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     if (!$2) {
      break block1
     }
     $2 = $2 - 1 >>> 1 | 0;
     $3 = ($2 << 3) + $0 | 0;
     if (HEAPU32[$3 + 4 >> 2] > $4 >>> 0) {
      continue
     }
    }
    break;
   };
   HEAP32[$1 >> 2] = $6;
   HEAP32[$1 + 4 >> 2] = $4;
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int______move_range_28int__2c_20int__2c_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = HEAP32[$0 + 4 >> 2];
  $5 = $4 - $3 | 0;
  $6 = $5 + $1 | 0;
  $7 = $4;
  while (1) {
   if ($2 >>> 0 <= $6 >>> 0) {
    HEAP32[$0 + 4 >> 2] = $7;
    if (!(!$5 | ($3 | 0) == ($4 | 0))) {
     wasm2js_memory_copy($4 - $5 | 0, $1, $5)
    }
   } else {
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
    $7 = $7 + 4 | 0;
    $6 = $6 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function void_20vision__MultiplyPointHomographyInhomogenous_float__28float__2c_20float_20const__2c_20float_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  $3 = HEAPF32[$2 >> 2];
  $4 = HEAPF32[$2 + 4 >> 2];
  $5 = Math_fround(HEAPF32[$1 + 32 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 24 >> 2] * $3) + Math_fround(HEAPF32[$1 + 28 >> 2] * $4)));
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$1 + 8 >> 2] + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $3) + Math_fround($4 * HEAPF32[$1 + 4 >> 2]))) / $5;
  HEAPF32[$0 + 4 >> 2] = Math_fround(HEAPF32[$1 + 20 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[$2 >> 2]) + Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$2 + 4 >> 2]))) / $5;
 }
 
 function float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0);
  $3 = HEAPF32[$0 >> 2];
  $4 = HEAPF32[$0 + 4 >> 2];
  return Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2] - $3) * Math_fround(HEAPF32[$2 + 4 >> 2] - $4)) - Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] - $4) * Math_fround(HEAPF32[$2 >> 2] - $3)));
 }
 
 function bool_20vision__Condition4Points2d_float__28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
  $10 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6 >> 2] + HEAPF32[$7 >> 2]) + HEAPF32[$8 >> 2]) + HEAPF32[$9 >> 2]) * Math_fround(.25));
  HEAPF32[$5 >> 2] = $10;
  $11 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6 + 4 >> 2] + HEAPF32[$7 + 4 >> 2]) + HEAPF32[$8 + 4 >> 2]) + HEAPF32[$9 + 4 >> 2]) * Math_fround(.25));
  HEAPF32[$5 + 4 >> 2] = $11;
  $12 = Math_fround(HEAPF32[$6 >> 2] - $10);
  $13 = Math_fround(HEAPF32[$6 + 4 >> 2] - $11);
  $14 = Math_fround(HEAPF32[$7 >> 2] - $10);
  $15 = Math_fround(HEAPF32[$7 + 4 >> 2] - $11);
  $16 = Math_fround(HEAPF32[$8 >> 2] - $10);
  $17 = Math_fround(HEAPF32[$8 + 4 >> 2] - $11);
  $10 = Math_fround(HEAPF32[$9 >> 2] - $10);
  $11 = Math_fround(HEAPF32[$9 + 4 >> 2] - $11);
  $18 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($12 * $12) + Math_fround($13 * $13)))) + Math_fround(Math_sqrt(Math_fround(Math_fround($14 * $14) + Math_fround($15 * $15))))) + Math_fround(Math_sqrt(Math_fround(Math_fround($16 * $16) + Math_fround($17 * $17))))) + Math_fround(Math_sqrt(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11))))) * Math_fround(.25));
  if ($18 != Math_fround(0.0)) {
   $19 = Math_fround(+Math_fround(Math_fround(1.0) / $18) * 1.4142135623730951);
   HEAPF32[$4 >> 2] = $19;
   HEAPF32[$0 >> 2] = $12 * $19;
   HEAPF32[$0 + 4 >> 2] = $13 * HEAPF32[$4 >> 2];
   HEAPF32[$1 >> 2] = $14 * HEAPF32[$4 >> 2];
   HEAPF32[$1 + 4 >> 2] = $15 * HEAPF32[$4 >> 2];
   HEAPF32[$2 >> 2] = $16 * HEAPF32[$4 >> 2];
   HEAPF32[$2 + 4 >> 2] = $17 * HEAPF32[$4 >> 2];
   HEAPF32[$3 >> 2] = $10 * HEAPF32[$4 >> 2];
   HEAPF32[$3 + 4 >> 2] = $11 * HEAPF32[$4 >> 2];
  }
  return $18 != Math_fround(0.0);
 }
 
 function bool_20vision__Homography3PointsGeometricallyConsistent_float__28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0);
  $6 = float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2);
  return !(float_20vision__LinePointSide_float__28float_20const__2c_20float_20const__2c_20float_20const__29($3, $4, $5) > Math_fround(0.0) ^ $6 > Math_fround(0.0));
 }
 
 function float_20vision__Determinant3x3_float__28float_20const__29($0) {
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
  $2 = HEAPF32[$0 + 12 >> 2];
  $3 = HEAPF32[$0 + 28 >> 2];
  $1 = HEAPF32[$0 + 16 >> 2];
  $4 = HEAPF32[$0 + 24 >> 2];
  $6 = Math_fround(HEAPF32[$0 + 8 >> 2] * Math_fround(Math_fround($2 * $3) - Math_fround($1 * $4)));
  $7 = $1;
  $1 = HEAPF32[$0 + 32 >> 2];
  $5 = HEAPF32[$0 + 20 >> 2];
  return Math_fround($6 + Math_fround(Math_fround(HEAPF32[$0 >> 2] * Math_fround(Math_fround($7 * $1) - Math_fround($5 * $3))) - Math_fround(HEAPF32[$0 + 4 >> 2] * Math_fround(Math_fround($2 * $1) - Math_fround($5 * $4)))));
 }
 
 function void_20vision__AddHomographyPointContraint_float__28float__2c_20float_20const__2c_20float_20const__29($0, $1, $2) {
  var $3 = Math_fround(0);
  HEAPF32[$0 >> 2] = -HEAPF32[$1 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1082130432;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAPF32[$0 + 4 >> 2] = -$3;
  HEAPF32[$0 + 24 >> 2] = HEAPF32[$2 >> 2] * HEAPF32[$1 >> 2];
  HEAPF32[$0 + 28 >> 2] = HEAPF32[$2 >> 2] * HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$2 >> 2];
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAPF32[$0 + 32 >> 2] = $3;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 48 >> 2] = -HEAPF32[$1 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = -1082130432;
  HEAPF32[$0 + 52 >> 2] = -$3;
  HEAPF32[$0 + 60 >> 2] = HEAPF32[$2 + 4 >> 2] * HEAPF32[$1 >> 2];
  HEAPF32[$0 + 64 >> 2] = HEAPF32[$2 + 4 >> 2] * HEAPF32[$1 + 4 >> 2];
  HEAPF32[$0 + 68 >> 2] = HEAPF32[$2 + 4 >> 2];
 }
 
 function float_20vision__SumSquares9_float__28float_20const__29($0) {
  return float_20vision__DotProduct9_float__28float_20const__2c_20float_20const__29($0, $0);
 }
 
 function void_20vision__Swap9_float__28float__2c_20float__29($0, $1) {
  var $2 = Math_fround(0);
  $2 = HEAPF32[$0 >> 2];
  HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
  HEAPF32[$1 >> 2] = $2;
  $2 = HEAPF32[$0 + 4 >> 2];
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$1 + 4 >> 2];
  HEAPF32[$1 + 4 >> 2] = $2;
  $2 = HEAPF32[$0 + 8 >> 2];
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$1 + 8 >> 2];
  HEAPF32[$1 + 8 >> 2] = $2;
  $2 = HEAPF32[$0 + 12 >> 2];
  HEAPF32[$0 + 12 >> 2] = HEAPF32[$1 + 12 >> 2];
  HEAPF32[$1 + 12 >> 2] = $2;
  $2 = HEAPF32[$0 + 16 >> 2];
  HEAPF32[$0 + 16 >> 2] = HEAPF32[$1 + 16 >> 2];
  HEAPF32[$1 + 16 >> 2] = $2;
  $2 = HEAPF32[$0 + 20 >> 2];
  HEAPF32[$0 + 20 >> 2] = HEAPF32[$1 + 20 >> 2];
  HEAPF32[$1 + 20 >> 2] = $2;
  $2 = HEAPF32[$0 + 24 >> 2];
  HEAPF32[$0 + 24 >> 2] = HEAPF32[$1 + 24 >> 2];
  HEAPF32[$1 + 24 >> 2] = $2;
  $2 = HEAPF32[$0 + 28 >> 2];
  HEAPF32[$0 + 28 >> 2] = HEAPF32[$1 + 28 >> 2];
  HEAPF32[$1 + 28 >> 2] = $2;
  $2 = HEAPF32[$0 + 32 >> 2];
  HEAPF32[$0 + 32 >> 2] = HEAPF32[$1 + 32 >> 2];
  HEAPF32[$1 + 32 >> 2] = $2;
 }
 
 function void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1, $2) {
  HEAPF32[$0 >> 2] = $2 * HEAPF32[$1 >> 2];
  HEAPF32[$0 + 4 >> 2] = $2 * HEAPF32[$1 + 4 >> 2];
  HEAPF32[$0 + 8 >> 2] = $2 * HEAPF32[$1 + 8 >> 2];
  HEAPF32[$0 + 12 >> 2] = $2 * HEAPF32[$1 + 12 >> 2];
  HEAPF32[$0 + 16 >> 2] = $2 * HEAPF32[$1 + 16 >> 2];
  HEAPF32[$0 + 20 >> 2] = $2 * HEAPF32[$1 + 20 >> 2];
  HEAPF32[$0 + 24 >> 2] = $2 * HEAPF32[$1 + 24 >> 2];
  HEAPF32[$0 + 28 >> 2] = $2 * HEAPF32[$1 + 28 >> 2];
  HEAPF32[$0 + 32 >> 2] = $2 * HEAPF32[$1 + 32 >> 2];
 }
 
 function void_20vision__AccumulateProjection9_float__28float__2c_20float_20const__2c_20float_20const__29($0, $1, $2) {
  var $3 = Math_fround(0);
  $3 = float_20vision__DotProduct9_float__28float_20const__2c_20float_20const__29($2, $1);
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - Math_fround($3 * HEAPF32[$1 >> 2]);
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - Math_fround($3 * HEAPF32[$1 + 4 >> 2]);
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] - Math_fround($3 * HEAPF32[$1 + 8 >> 2]);
  HEAPF32[$0 + 12 >> 2] = HEAPF32[$0 + 12 >> 2] - Math_fround($3 * HEAPF32[$1 + 12 >> 2]);
  HEAPF32[$0 + 16 >> 2] = HEAPF32[$0 + 16 >> 2] - Math_fround($3 * HEAPF32[$1 + 16 >> 2]);
  HEAPF32[$0 + 20 >> 2] = HEAPF32[$0 + 20 >> 2] - Math_fround($3 * HEAPF32[$1 + 20 >> 2]);
  HEAPF32[$0 + 24 >> 2] = HEAPF32[$0 + 24 >> 2] - Math_fround($3 * HEAPF32[$1 + 24 >> 2]);
  HEAPF32[$0 + 28 >> 2] = HEAPF32[$0 + 28 >> 2] - Math_fround($3 * HEAPF32[$1 + 28 >> 2]);
  HEAPF32[$0 + 32 >> 2] = HEAPF32[$0 + 32 >> 2] - Math_fround($3 * HEAPF32[$1 + 32 >> 2]);
 }
 
 function float_20vision__OrthogonalizeIdentity8x9_float__28float__2c_20float_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0);
  $3 = $2 << 2;
  $2 = $3 + $1 | 0;
  void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1, Math_fround(-HEAPF32[$2 >> 2]));
  $3 = $0 + $3 | 0;
  HEAPF32[$3 >> 2] = HEAPF32[$3 >> 2] + Math_fround(1.0);
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 36 | 0, Math_fround(-HEAPF32[$2 + 36 >> 2]));
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 72 | 0, Math_fround(-HEAPF32[$2 + 72 >> 2]));
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 108 | 0, Math_fround(-HEAPF32[$2 + 108 >> 2]));
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 144 | 0, Math_fround(-HEAPF32[$2 + 144 >> 2]));
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 180 | 0, Math_fround(-HEAPF32[$2 + 180 >> 2]));
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 216 | 0, Math_fround(-HEAPF32[$2 + 216 >> 2]));
  void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1 + 252 | 0, Math_fround(-HEAPF32[$2 + 252 >> 2]));
  $4 = float_20vision__SumSquares9_float__28float_20const__29($0);
  if ($4 != Math_fround(0.0)) {
   $5 = Math_fround(Math_sqrt($4));
   void_20vision__ScaleVector9_float__28float__2c_20float_20const__2c_20float_29($0, $0, Math_fround(Math_fround(1.0) / $5));
  }
  return $5;
 }
 
 function float_20vision__DotProduct9_float__28float_20const__2c_20float_20const__29($0, $1) {
  return Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$1 + 32 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2] * HEAPF32[$1 + 28 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 24 >> 2] * HEAPF32[$1 + 24 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 20 >> 2] * HEAPF32[$1 + 20 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 16 >> 2] * HEAPF32[$1 + 16 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 12 >> 2] * HEAPF32[$1 + 12 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 8 >> 2] * HEAPF32[$1 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 >> 2] * HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[$0 + 4 >> 2] * HEAPF32[$1 + 4 >> 2])))))))));
 }
 
 function void_20vision__AccumulateScaledVector9_float__28float__2c_20float_20const__2c_20float_29($0, $1, $2) {
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$1 >> 2] * $2) + HEAPF32[$0 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround(HEAPF32[$1 + 4 >> 2] * $2) + HEAPF32[$0 + 4 >> 2];
  HEAPF32[$0 + 8 >> 2] = Math_fround(HEAPF32[$1 + 8 >> 2] * $2) + HEAPF32[$0 + 8 >> 2];
  HEAPF32[$0 + 12 >> 2] = Math_fround(HEAPF32[$1 + 12 >> 2] * $2) + HEAPF32[$0 + 12 >> 2];
  HEAPF32[$0 + 16 >> 2] = Math_fround(HEAPF32[$1 + 16 >> 2] * $2) + HEAPF32[$0 + 16 >> 2];
  HEAPF32[$0 + 20 >> 2] = Math_fround(HEAPF32[$1 + 20 >> 2] * $2) + HEAPF32[$0 + 20 >> 2];
  HEAPF32[$0 + 24 >> 2] = Math_fround(HEAPF32[$1 + 24 >> 2] * $2) + HEAPF32[$0 + 24 >> 2];
  HEAPF32[$0 + 28 >> 2] = Math_fround(HEAPF32[$1 + 28 >> 2] * $2) + HEAPF32[$0 + 28 >> 2];
  HEAPF32[$0 + 32 >> 2] = Math_fround(HEAPF32[$1 + 32 >> 2] * $2) + HEAPF32[$0 + 32 >> 2];
 }
 
 function std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int________hash_table_28_29($0) {
  std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int_______deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20void______29(HEAP32[$0 + 8 >> 2]);
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0);
 }
 
 function std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int_____clear_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if (HEAP32[$0 + 12 >> 2]) {
   std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int_______deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20void______29(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
   $2 = HEAP32[$0 >> 2];
   $3 = HEAP32[$0 + 4 >> 2];
   while (1) {
    if (($1 | 0) == ($3 | 0)) {
     HEAP32[$0 + 12 >> 2] = 0
    } else {
     HEAP32[($1 << 2) + $2 >> 2] = 0;
     $1 = $1 + 1 | 0;
     continue;
    }
    break;
   };
  }
 }
 
 function vision__HoughSimilarityVoting__getBinIndex_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  block8 : {
   block7 : {
    block6 : {
     block5 : {
      block4 : {
       block3 : {
        block2 : {
         block1 : {
          block : {
           if (($1 | 0) >= 0) {
            $5 = HEAP32[$0 + 52 >> 2];
            if (($5 | 0) <= ($1 | 0)) {
             break block
            }
            if (($2 | 0) < 0) {
             break block1
            }
            $6 = HEAP32[$0 + 56 >> 2];
            if (($6 | 0) <= ($2 | 0)) {
             break block2
            }
            if (($3 | 0) < 0) {
             break block3
            }
            $7 = HEAP32[$0 + 60 >> 2];
            if (($7 | 0) <= ($3 | 0)) {
             break block4
            }
            if (($4 | 0) < 0) {
             break block5
            }
            if (HEAP32[$0 + 64 >> 2] <= ($4 | 0)) {
             break block6
            }
            $1 = Math_imul($2, $5) + $1 | 0;
            $0 = ($1 + Math_imul(HEAP32[$0 + 84 >> 2], $3) | 0) + Math_imul(HEAP32[$0 + 88 >> 2], $4) | 0;
            if (($0 | 0) > ($1 + Math_imul(Math_imul($4, $7) + $3 | 0, Math_imul($5, $6)) | 0)) {
             break block7
            }
            return $0;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14027), 13118), 3164), 165), 3735), 14226));
           break block8;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14442), 13118), 3164), 166), 3735), 14226));
          break block8;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14739), 13118), 3164), 167), 3735), 14815));
         break block8;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15135), 13118), 3164), 168), 3735), 14815));
        break block8;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15357), 13118), 3164), 169), 3735), 15601));
       break block8;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15750), 13118), 3164), 170), 3735), 15601));
      break block8;
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16086), 13118), 3164), 171), 3735), 16232));
     break block8;
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16390), 13118), 3164), 172), 3735), 16232));
    break block8;
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16753), 13118), 3164), 176), 3735), 13845));
  }
  abort();
  wasm2js_trap();
 }
 
 function vision__HoughSimilarityVoting__voteAtIndex_28int_2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0);
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  if (($1 | 0) >= 0) {
   HEAP32[$6 + 8 >> 2] = $1;
   $5 = $0 + 92 | 0;
   $0 = std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29($5, $6 + 8 | 0);
   block7 : {
    if (!$0) {
     HEAP32[$6 + 12 >> 2] = 1;
     HEAP32[$6 + 8 >> 2] = $1;
     $8 = __stack_pointer - 16 | 0;
     __stack_pointer = $8;
     $1 = 0;
     $7 = __stack_pointer - 16 | 0;
     __stack_pointer = $7;
     $0 = HEAP32[$6 + 8 >> 2];
     block3 : {
      block : {
       $2 = HEAP32[$5 + 4 >> 2];
       if (!$2) {
        break block
       }
       $11 = HEAP32[$5 >> 2];
       $10 = __wasm_popcnt_i32($2);
       $1 = $0 & $2 - 1;
       block1 : {
        if ($10 >>> 0 <= 1) {
         break block1
        }
        $1 = $0;
        if ($0 >>> 0 < $2 >>> 0) {
         break block1
        }
        $1 = ($0 >>> 0) % ($2 >>> 0) | 0;
       }
       $4 = HEAP32[$11 + ($1 << 2) >> 2];
       if (!$4) {
        break block
       }
       $11 = $2 - 1 | 0;
       $10 = $10 >>> 0 > 1;
       while (1) {
        $4 = HEAP32[$4 >> 2];
        if (!$4) {
         break block
        }
        $3 = HEAP32[$4 + 4 >> 2];
        if (($0 | 0) != ($3 | 0)) {
         block2 : {
          if (!$10) {
           $3 = $3 & $11;
           break block2;
          }
          if ($2 >>> 0 > $3 >>> 0) {
           break block2
          }
          $3 = ($3 >>> 0) % ($2 >>> 0) | 0;
         }
         if (($1 | 0) != ($3 | 0)) {
          break block
         }
         continue;
        }
        if (($0 | 0) != HEAP32[$4 + 8 >> 2]) {
         continue
        }
        break;
       };
       $0 = 0;
       break block3;
      }
      $3 = operator_20new_28unsigned_20long_29(16);
      HEAP32[$7 + 8 >> 2] = $5;
      HEAP32[$7 + 4 >> 2] = $3;
      HEAP32[$3 + 4 >> 2] = $0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$3 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
      HEAP8[$7 + 12 | 0] = 1;
      $9 = Math_fround(HEAP32[$5 + 12 >> 2] + 1 >>> 0);
      $12 = HEAPF32[$5 + 16 >> 2];
      block4 : {
       if ($9 > Math_fround($12 * Math_fround($2 >>> 0)) ? 0 : $2) {
        break block4
       }
       $2 = ($2 - 1 & $2) != 0 | $2 >>> 0 < 3 | $2 << 1;
       $9 = Math_fround(Math_ceil(Math_fround($9 / $12)));
       if ($9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0)) {
        $1 = ~~$9 >>> 0
       } else {
        $1 = 0
       }
       void_20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_________rehash_true__28unsigned_20long_29($5, $1 >>> 0 < $2 >>> 0 ? $2 : $1);
       $2 = HEAP32[$5 + 4 >> 2];
       $1 = $2 - 1 | 0;
       if (!($1 & $2)) {
        $1 = $0 & $1;
        break block4;
       }
       if ($0 >>> 0 < $2 >>> 0) {
        $1 = $0;
        break block4;
       }
       $1 = ($0 >>> 0) % ($2 >>> 0) | 0;
      }
      $0 = $1 << 2;
      $1 = HEAP32[$5 >> 2];
      $3 = $0 + $1 | 0;
      $0 = HEAP32[$3 >> 2];
      block5 : {
       if (!$0) {
        $4 = HEAP32[$7 + 4 >> 2];
        HEAP32[$4 >> 2] = HEAP32[$5 + 8 >> 2];
        HEAP32[$5 + 8 >> 2] = $4;
        HEAP32[$3 >> 2] = $5 + 8;
        $0 = HEAP32[$4 >> 2];
        if (!$0) {
         break block5
        }
        $3 = HEAP32[$0 + 4 >> 2];
        $0 = $2 - 1 | 0;
        block6 : {
         if (!($0 & $2)) {
          $3 = $0 & $3;
          break block6;
         }
         if ($2 >>> 0 > $3 >>> 0) {
          break block6
         }
         $3 = ($3 >>> 0) % ($2 >>> 0) | 0;
        }
        HEAP32[$1 + ($3 << 2) >> 2] = $4;
        break block5;
       }
       $4 = HEAP32[$7 + 4 >> 2];
       HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
       HEAP32[$0 >> 2] = $4;
      }
      HEAP32[$7 + 4 >> 2] = 0;
      HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
      $0 = HEAP32[$7 + 4 >> 2];
      HEAP32[$7 + 4 >> 2] = 0;
      if ($0) {
       emscripten_builtin_free($0)
      }
      $0 = 1;
     }
     HEAP8[$8 + 12 | 0] = $0;
     HEAP32[$8 + 8 >> 2] = $4;
     __stack_pointer = $7 + 16 | 0;
     HEAP32[$6 >> 2] = HEAP32[$8 + 8 >> 2];
     HEAP8[$6 + 4 | 0] = HEAPU8[$8 + 12 | 0];
     __stack_pointer = $8 + 16 | 0;
     break block7;
    }
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   }
   __stack_pointer = $6 + 16 | 0;
   return;
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13559), 13118), 3164), 290), 3735), 13845));
  abort();
  wasm2js_trap();
 }
 
 function std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int_______deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20void______29($0) {
  var $1 = 0;
  while (1) {
   if ($0) {
    $1 = HEAP32[$0 >> 2];
    emscripten_builtin_free($0);
    $0 = $1;
    continue;
   }
   break;
  };
 }
 
 function vision__BinaryFeatureStore__resize_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $2 = HEAP32[$0 >> 2];
  HEAP8[$6 + 15 | 0] = 0;
  $8 = $6 + 15 | 0;
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2];
  $2 = Math_imul($1, $2);
  $5 = HEAP32[$3 + 4 >> 2] - $4 | 0;
  block1 : {
   if ($2 >>> 0 > $5 >>> 0) {
    $7 = __stack_pointer - 32 | 0;
    __stack_pointer = $7;
    $4 = $2 - $5 | 0;
    $2 = HEAP32[$3 + 4 >> 2];
    block : {
     if ($4 >>> 0 <= HEAP32[$3 + 8 >> 2] - $2 >>> 0) {
      $2 = HEAP32[$3 + 4 >> 2];
      $4 = $4 + $2 | 0;
      while (1) {
       if (($2 | 0) == ($4 | 0)) {
        HEAP32[$3 + 4 >> 2] = $4
       } else {
        HEAP8[$2 | 0] = HEAPU8[$8 | 0];
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      break block;
     }
     $5 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($7 + 12 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($3, ($4 + $2 | 0) - HEAP32[$3 >> 2] | 0), HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] | 0, $3);
     $2 = HEAP32[$5 + 8 >> 2];
     $4 = $4 + $2 | 0;
     while (1) {
      if (($2 | 0) != ($4 | 0)) {
       HEAP8[$2 | 0] = HEAPU8[$8 | 0];
       $2 = $2 + 1 | 0;
       continue;
      }
      break;
     };
     HEAP32[$5 + 8 >> 2] = $4;
     std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29($3, $5);
     std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($5);
    }
    __stack_pointer = $7 + 32 | 0;
    break block1;
   }
   if ($2 >>> 0 < $5 >>> 0) {
    HEAP32[$3 + 4 >> 2] = $2 + $4
   }
  }
  std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint____resize_28unsigned_20long_29($0 + 16 | 0, $1);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0;
  $5 = Math_fround(Math_floor(Math_fround(logf($3) / Math_fround(.6931471824645996))));
  if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
   $4 = ~~$5
  } else {
   $4 = -2147483648
  }
  HEAP32[$1 >> 2] = $4;
  $3 = Math_fround(Math_floor(Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2] * logf(Math_fround($3 / Math_fround(1 << $4)))) + Math_fround(.5))));
  if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
   $4 = ~~$3
  } else {
   $4 = -2147483648
  }
  HEAP32[$2 >> 2] = $4;
  if ((HEAP32[$0 + 20 >> 2] - 1 | 0) == ($4 | 0)) {
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
   HEAP32[$2 >> 2] = 0;
   $4 = 0;
  }
  $7 = $2;
  $2 = HEAP32[$1 >> 2];
  block1 : {
   block : {
    if (($2 | 0) < 0) {
     HEAP32[$1 >> 2] = 0;
     $4 = 0;
     break block;
    }
    $6 = HEAP32[$0 + 16 >> 2];
    if (($2 | 0) < ($6 | 0)) {
     break block1
    }
    HEAP32[$1 >> 2] = $6 - 1;
    $4 = HEAP32[$0 + 20 >> 2] - 1 | 0;
   }
   HEAP32[$7 >> 2] = $4;
  }
  block4 : {
   block3 : {
    block2 : {
     $1 = HEAP32[$1 >> 2];
     if (($1 | 0) >= 0) {
      if (($1 | 0) >= HEAP32[$0 + 16 >> 2]) {
       break block2
      }
      if (($4 | 0) < 0) {
       break block3
      }
      if (HEAP32[$0 + 20 >> 2] <= ($4 | 0)) {
       break block4
      }
      return;
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9209), 9676), 3705), 268), 4329), 10235));
     abort();
     wasm2js_trap();
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 10728), 9676), 3705), 269), 4329), 11101));
    abort();
    wasm2js_trap();
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11701), 9676), 3705), 270), 4329), 11893));
   abort();
   wasm2js_trap();
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12447), 9676), 3705), 271), 4329), 12556));
  abort();
  wasm2js_trap();
 }
 
 function vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
  $0 = vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($0, $3, $4);
  $5 = Math_fround(Math_fround(1.0) / Math_fround(1 << $3));
  $7 = Math_fround(Math_fround($5 * Math_fround(.5)) + Math_fround(-.5));
  $6 = Math_fround(Math_fround($1 * $5) + $7);
  $5 = Math_fround(Math_fround($2 * $5) + $7);
  $1 = Math_fround(0.0);
  $2 = Math_fround(0.0);
  block : {
   if ($6 < Math_fround(0.0)) {
    break block
   }
   $1 = $6;
   $6 = Math_fround(HEAP32[$0 + 4 >> 2] - 2 >>> 0);
   if (!($1 > $6)) {
    break block
   }
   $1 = $6;
  }
  block1 : {
   if ($5 < Math_fround(0.0)) {
    break block1
   }
   $2 = $5;
   $5 = Math_fround(HEAP32[$0 + 8 >> 2] - 2 >>> 0);
   if (!($2 > $5)) {
    break block1
   }
   $2 = $5;
  }
  return float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($0, $1, $2);
 }
 
 function vision__get_pretty_time_28_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 272 | 0;
  __stack_pointer = $1;
  __time($1 + 264 | 0);
  do_tzset();
  legalimport$_localtime_js(HEAP32[$1 + 264 >> 2], HEAP32[$1 + 268 >> 2], 78316);
  HEAP32[19589] = HEAP32[(HEAP32[19587] ? 78372 : 78368) >> 2];
  __strftime_l($1, 256, 1082, 78316, HEAP32[19643]);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($0, $1);
  __stack_pointer = $1 + 272 | 0;
 }
 
 function vision__Image__Image_28_29($0) {
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0;
 }
 
 function vision__Image__alloc_28vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  block2 : {
   block1 : {
    block : {
     if ($2) {
      if (!$3) {
       break block
      }
      if (!$4) {
       break block1
      }
      $5 = Math_imul(vision__Image__calculate_unit_size_28vision__ImageType_29($1), Math_imul($2, $4));
      HEAP32[$0 + 12 >> 2] = $5;
      $8 = Math_imul($3, $5);
      if (($8 | 0) != HEAP32[$0 + 20 >> 2]) {
       $10 = operator_20new_28unsigned_20long_29($8);
       $9 = __stack_pointer - 16 | 0;
       __stack_pointer = $9;
       $6 = __stack_pointer - 16 | 0;
       __stack_pointer = $6;
       $5 = $9 + 8 | 0;
       HEAP32[$5 >> 2] = $10;
       $7 = operator_20new_28unsigned_20long_29(16);
       HEAP32[$7 + 12 >> 2] = $10;
       HEAP32[$7 >> 2] = 24112;
       HEAP32[$7 + 4 >> 2] = 0;
       HEAP32[$7 + 8 >> 2] = 0;
       HEAP32[$5 + 4 >> 2] = $7;
       HEAP32[$6 + 12 >> 2] = 0;
       $7 = HEAP32[$6 + 12 >> 2];
       HEAP32[$6 + 12 >> 2] = 0;
       if ($7) {
        emscripten_builtin_free($7)
       }
       __stack_pointer = $6 + 16 | 0;
       $6 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[$0 + 24 >> 2] = $6;
       $6 = HEAP32[$5 + 4 >> 2];
       HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 28 >> 2];
       HEAP32[$0 + 28 >> 2] = $6;
       std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($5);
       __stack_pointer = $9 + 16 | 0;
       if (!HEAP32[$0 + 24 >> 2]) {
        break block2
       }
      }
      HEAP32[$0 + 20 >> 2] = $8;
      HEAP32[$0 + 16 >> 2] = $4;
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$0 + 4 >> 2] = $2;
      HEAP32[$0 >> 2] = $1;
      return;
     }
     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1181), 2214), 3164), 127), 3735), 4052));
     abort();
     wasm2js_trap();
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 4958), 2214), 3164), 128), 3735), 5469));
    abort();
    wasm2js_trap();
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7850), 2214), 3164), 130), 3735), 8283));
   abort();
   wasm2js_trap();
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9325), 2214), 3164), 150), 3735), 9820));
  abort();
  wasm2js_trap();
 }
 
 function vision__Image__calculate_unit_size_28vision__ImageType_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block : {
   switch ($0 - 1 | 0) {
   default:
    __cxa_throw(vision__Exception__Exception_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29(__cxa_allocate_exception(16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1 + 4 | 0, 10662)) | 0, 22956, 14);
    wasm2js_trap();
   case 1:
    $0 = 4;
    break;
   case 0:
    break block;
   };
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function vision__Image__Image_28unsigned_20char__2c_20vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5) {
  HEAP32[$0 + 16 >> 2] = 1;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = Math_imul($4, $5);
  HEAP32[$0 + 24 >> 2] = $1;
  $4 = operator_20new_28unsigned_20long_29(16);
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[$4 >> 2] = 23976;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = $4;
  if (($5 | 0) < 0) {
   $5 = Math_imul(vision__Image__calculate_unit_size_28vision__ImageType_29($2), $3)
  }
  HEAP32[$0 + 12 >> 2] = $5;
  return $0;
 }
 
 function vision__Image___Image_28_29($0) {
  std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($0 + 24 | 0);
  return $0;
 }
 
 function std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29($0) {
  $0 = $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (HEAP32[$1 + 4 >> 2] == 24081 ? $0 : 0) | 0;
 }
 
 function std____2____shared_ptr_pointer_unsigned_20char__2c_20std____2__shared_ptr_unsigned_20char_____shared_ptr_default_delete_unsigned_20char_2c_20unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(HEAP32[$0 + 12 >> 2]);
 }
 
 function std____2____shared_ptr_pointer_unsigned_20char__2c_20std____2__shared_ptr_unsigned_20char_____shared_ptr_default_delete_unsigned_20char_2c_20unsigned_20char__2c_20std____2__allocator_unsigned_20char______get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (HEAP32[$1 + 4 >> 2] == 24248 ? $0 : 0) | 0;
 }
 
 function vision__Logger__write_28vision__LoggerPriorityLevel_2c_20char_20const__2c_20____29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 28 >> 2] = $2;
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($3 + 4 | 0, $1);
  $1 = $5;
  $2 = __stack_pointer - 2048 | 0;
  __stack_pointer = $2;
  vsnprintf($2, 2048, HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$1 >> 2] : $1, HEAP32[$3 + 28 >> 2]);
  $1 = $3 + 16 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1, $2);
  __stack_pointer = $2 + 2048 | 0;
  $2 = 0;
  while (1) {
   $4 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 4 >> 2] - $4 >> 3 >>> 0 > $2 >>> 0) {
    $4 = HEAP32[$4 + ($2 << 3) >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, 8, $1);
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($5);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function vision__ScopedTimer__ScopedTimer_28char_20const__29($0, $1) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = -1074790400;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = -1074790400;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($0 + 16 | 0, $1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  __gettimeofday($1);
  HEAPF64[$0 >> 3] = +HEAP32[$1 + 8 >> 2] * 1.0e-06 + (+HEAPU32[$1 >> 2] + +HEAP32[$1 + 4 >> 2] * 4294967296.0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function vision__ScopedTimer___ScopedTimer_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (!(HEAPF64[$0 >> 3] >= 0.0)) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1257), 1954), 3164), 67), 3735), 4147));
   abort();
   wasm2js_trap();
  }
  __gettimeofday($2);
  HEAPF64[$0 + 8 >> 3] = +HEAP32[$2 + 8 >> 2] * 1.0e-06 + (+HEAPU32[$2 >> 2] + +HEAP32[$2 + 4 >> 2] * 4294967296.0);
  __stack_pointer = $2 + 16 | 0;
  $6 = vision__Logger__getInstance_28_29();
  $4 = $1 + 36 | 0;
  vision__get_pretty_time_28_29($4);
  $7 = HEAP32[$0 + 16 >> 2];
  $8 = HEAP8[$0 + 27 | 0];
  $2 = HEAP32[$1 + 36 >> 2];
  $9 = HEAP8[$1 + 47 | 0];
  block1 : {
   block : {
    $5 = HEAPF64[$0 >> 3];
    if ($5 >= 0.0) {
     $3 = HEAPF64[$0 + 8 >> 3];
     if (!($3 >= 0.0)) {
      break block
     }
     $3 = $3 - $5;
     break block1;
    }
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1257), 1954), 3164), 80), 3735), 4147));
    abort();
    wasm2js_trap();
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 5064), 1954), 3164), 81), 3735), 5563));
   abort();
   wasm2js_trap();
  }
  HEAPF64[$1 + 16 >> 3] = $3 * 1.0e3;
  HEAP32[$1 + 8 >> 2] = 24305;
  HEAP32[$1 >> 2] = 7441;
  $0 = $0 + 16 | 0;
  HEAP32[$1 + 12 >> 2] = ($8 | 0) < 0 ? $7 : $0;
  HEAP32[$1 + 4 >> 2] = ($9 | 0) < 0 ? $2 : $4;
  vision__Logger__write_28vision__LoggerPriorityLevel_2c_20char_20const__2c_20____29($6, 6368, $1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($4);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  __stack_pointer = $1 + 48 | 0;
 }
 
 function webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0) {
  $1197($0, 74960, 74456, 74452);
 }
 
 function webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($0, $1) {
  $1198($0, $1, 24345, 75633, 74456, 74452);
 }
 
 function webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, $1) {
  $1198($0, $1, 24350, 75811, 74456, 74452);
 }
 
 function webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0) {
  $1197($0, 75954, 74464, 74460);
 }
 
 function webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($0, $1) {
  $1198($0, $1, 24345, 76643, 74464, 74460);
 }
 
 function webarkit__webarkitVideoLumaFinal_28webarkit__WebARKitLumaInfo___29($0) {
  var $1 = 0;
  if (!$0) {
   return
  }
  $1 = HEAP32[$0 >> 2];
  if (!$1) {
   return
  }
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($1 + 16 | 0);
  emscripten_builtin_free($1);
  HEAP32[$0 >> 2] = 0;
 }
 
 function __cxx_global_array_dtor_820($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[19509];
  while (1) {
   if ($0) {
    $1 = HEAP32[$0 >> 2];
    arController___arController_28_29($0 + 16 | 0);
    emscripten_builtin_free($0);
    $0 = $1;
    continue;
   }
   break;
  };
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29(78028);
 }
 
 function __cxx_global_array_dtor_2($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[19514];
  while (1) {
   if ($0) {
    $1 = HEAP32[$0 >> 2];
    emscripten_builtin_free($0);
    $0 = $1;
    continue;
   }
   break;
  };
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29(78048);
 }
 
 function passVideoData($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 44 >> 2] = $0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $4 + 44 | 0)) {
    $2 = -1;
    break block;
   }
   $7 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($4 + 44 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char___20emscripten__convertJSArrayToNumberVector_unsigned_20char__28emscripten__val_20const__29($4 + 32 | 0, $1);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char___20emscripten__convertJSArrayToNumberVector_unsigned_20char__28emscripten__val_20const__29($4 + 20 | 0, $2);
   block3 : {
    block4 : {
     block1 : {
      if (!$3) {
       break block1
      }
      $1 = HEAP32[$7 + 208 >> 2];
      $5 = HEAP32[$7 + 212 >> 2];
      $2 = __stack_pointer - 16 | 0;
      __stack_pointer = $2;
      $0 = operator_20new_28unsigned_20long_29(20);
      HEAP8[$0 + 12 | 0] = 1;
      $6 = Math_imul($1, $5);
      HEAP32[$0 + 8 >> 2] = $6;
      HEAP32[$0 + 4 >> 2] = $5;
      HEAP32[$0 >> 2] = $1;
      $1 = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      $5 = operator_20new_28unsigned_20long_29($6);
      if ($6) {
       wasm2js_memory_fill($5, 0, $6)
      }
      HEAP32[$2 + 4 >> 2] = 0;
      $6 = $0 + 16 | 0;
      void_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void__________reset_5babi_ne200100_5d_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______2c_200__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______29($6, $5);
      std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($2 + 4 | 0);
      block2 : {
       if (HEAP32[$0 + 16 >> 2]) {
        $1 = $0;
        break block2;
       }
       $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($2 + 4 | 0, 2908);
       webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($5);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($5);
       std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($6);
       emscripten_builtin_free($0);
      }
      __stack_pointer = $2 + 16 | 0;
      $0 = $1;
      HEAP32[$4 + 16 >> 2] = $0;
      if (!$0) {
       $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4 + 4 | 0, 33260);
       webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
       $2 = -1;
       break block3;
      }
      $8 = HEAP32[$4 + 32 >> 2];
      $1 = 0;
      $2 = 0;
      $9 = HEAP32[$0 + 16 >> 2];
      $10 = HEAP32[$0 + 8 >> 2];
      $6 = __stack_pointer - 16 | 0;
      __stack_pointer = $6;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($6 + 4 | 0, 3109));
      while (1) {
       if (($1 | 0) != ($10 | 0)) {
        $5 = $2 + $8 | 0;
        HEAP8[$1 + $9 | 0] = (Math_imul(HEAPU8[$5 + 1 | 0], 150) + Math_imul(HEAPU8[$5 | 0], 77) | 0) + Math_imul(HEAPU8[$5 + 2 | 0], 29) >>> 8;
        $1 = $1 + 1 | 0;
        $2 = $2 + 4 | 0;
        continue;
       }
       break;
      };
      __stack_pointer = $6 + 16 | 0;
      $1 = HEAP32[$0 + 16 >> 2];
      if (!$1) {
       break block4
      }
      if (!HEAP32[$7 + 204 >> 2]) {
       break block1
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4 + 4 | 0, 34109));
      $0 = Math_imul(HEAP32[$7 + 212 >> 2], HEAP32[$7 + 208 >> 2]);
      if (!(!$0 | !$0)) {
       wasm2js_memory_copy(HEAP32[$7 + 204 >> 2], $1, $0)
      }
      webarkit__webarkitVideoLumaFinal_28webarkit__WebARKitLumaInfo___29($4 + 16 | 0);
     }
     $1 = HEAP32[$7 + 196 >> 2];
     block5 : {
      if (!$1) {
       break block5
      }
      $2 = HEAP32[$4 + 36 >> 2];
      $0 = HEAP32[$4 + 32 >> 2];
      if (($2 | 0) == ($0 | 0)) {
       break block5
      }
      $2 = $2 - $0 | 0;
      if (!$2) {
       break block5
      }
      wasm2js_memory_copy($1, $0, $2);
     }
     $2 = 0;
     if (!HEAP32[$7 + 204 >> 2] | $3) {
      break block3
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4 + 4 | 0, 34082));
     $1 = HEAP32[$4 + 24 >> 2];
     $0 = HEAP32[$4 + 20 >> 2];
     if (($1 | 0) == ($0 | 0)) {
      break block3
     }
     $1 = $1 - $0 | 0;
     if (!$1) {
      break block3
     }
     wasm2js_memory_copy(HEAP32[$7 + 204 >> 2], $0, $1);
     break block3;
    }
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4 + 4 | 0, 33627);
    webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
    webarkit__webarkitVideoLumaFinal_28webarkit__WebARKitLumaInfo___29($4 + 16 | 0);
    $2 = -1;
   }
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($4 + 20 | 0);
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($4 + 32 | 0);
  }
  __stack_pointer = $4 + 48 | 0;
  return $2 | 0;
 }
 
 function std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 4 >> 2] = $0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $0 = HEAP32[$0 >> 2];
  block3 : {
   block : {
    $2 = HEAP32[19508];
    if (!$2) {
     break block
    }
    $1 = HEAP32[19507];
    $8 = __wasm_popcnt_i32($2);
    $4 = $0 & $2 - 1;
    block1 : {
     if ($8 >>> 0 <= 1) {
      break block1
     }
     $4 = $0;
     if ($0 >>> 0 < $2 >>> 0) {
      break block1
     }
     $4 = ($0 >>> 0) % ($2 >>> 0) | 0;
    }
    $3 = HEAP32[$1 + ($4 << 2) >> 2];
    if (!$3) {
     break block
    }
    $10 = $2 - 1 | 0;
    $8 = $8 >>> 0 > 1;
    while (1) {
     $3 = HEAP32[$3 >> 2];
     if (!$3) {
      break block
     }
     $1 = HEAP32[$3 + 4 >> 2];
     if (($0 | 0) != ($1 | 0)) {
      block2 : {
       if (!$8) {
        $1 = $1 & $10;
        break block2;
       }
       if ($1 >>> 0 < $2 >>> 0) {
        break block2
       }
       $1 = ($1 >>> 0) % ($2 >>> 0) | 0;
      }
      if (($1 | 0) != ($4 | 0)) {
       break block
      }
      continue;
     }
     if (($0 | 0) != HEAP32[$3 + 8 >> 2]) {
      continue
     }
     break;
    };
    $0 = 0;
    break block3;
   }
   $1 = operator_20new_28unsigned_20long_29(576);
   HEAP32[$5 + 8 >> 2] = 78028;
   HEAP32[$5 + 4 >> 2] = $1;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[$1 >> 2] = 0;
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 12 >> 2] = HEAP32[$6 + 4 >> 2];
   $1 = $1 + 8 | 0;
   HEAP32[$1 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
   $1 = $1 + 8 | 0;
   wasm2js_memory_fill($1, 0, 560);
   HEAP32[$1 + 204 >> 2] = 0;
   HEAP32[$1 + 208 >> 2] = 0;
   HEAP32[$1 + 192 >> 2] = 0;
   HEAP32[$1 + 196 >> 2] = 0;
   HEAP32[$1 + 212 >> 2] = 0;
   HEAP32[$1 + 216 >> 2] = 0;
   HEAP32[$1 + 220 >> 2] = 0;
   HEAP32[$1 + 224 >> 2] = 0;
   HEAP32[$1 + 264 >> 2] = -2;
   HEAP32[$1 + 256 >> 2] = 0;
   HEAP32[$1 + 260 >> 2] = 1079902208;
   HEAP32[$1 + 248 >> 2] = 0;
   HEAP32[$1 + 252 >> 2] = 1078853632;
   HEAP32[$1 + 240 >> 2] = 0;
   HEAP8[$1 + 236 | 0] = 0;
   HEAP32[$1 + 232 >> 2] = 0;
   HEAP32[$1 + 228 >> 2] = 128;
   wasm2js_memory_fill($1 + 268 | 0, 0, 100);
   HEAP32[$1 + 552 >> 2] = 2;
   HEAP32[$1 + 416 >> 2] = 0;
   HEAP32[$1 + 408 >> 2] = 0;
   HEAP32[$1 + 412 >> 2] = 1083129856;
   HEAP32[$1 + 400 >> 2] = -350469331;
   HEAP32[$1 + 404 >> 2] = 1058682594;
   HEAP32[$1 + 396 >> 2] = 0;
   HEAP32[$1 + 388 >> 2] = 0;
   HEAP32[$1 + 392 >> 2] = 0;
   HEAP32[$1 + 368 >> 2] = 1065353216;
   __stack_pointer = $3 + 16 | 0;
   HEAP8[$5 + 12 | 0] = 1;
   $7 = Math_fround(HEAP32[19510] + 1 >>> 0);
   $9 = HEAPF32[19511];
   block4 : {
    if ($7 > Math_fround($9 * Math_fround($2 >>> 0)) ? 0 : $2) {
     break block4
    }
    $1 = ($2 - 1 & $2) != 0 | $2 >>> 0 < 3 | $2 << 1;
    $7 = Math_fround(Math_ceil(Math_fround($7 / $9)));
    if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
     $4 = ~~$7 >>> 0
    } else {
     $4 = 0
    }
    void_20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_________rehash_true__28unsigned_20long_29(78028, $1 >>> 0 > $4 >>> 0 ? $1 : $4);
    $2 = HEAP32[19508];
    $4 = $2 - 1 | 0;
    if (!($2 & $4)) {
     $4 = $0 & $4;
     break block4;
    }
    if ($0 >>> 0 < $2 >>> 0) {
     $4 = $0;
     break block4;
    }
    $4 = ($0 >>> 0) % ($2 >>> 0) | 0;
   }
   $0 = $4 << 2;
   $4 = HEAP32[19507];
   $1 = $0 + $4 | 0;
   $0 = HEAP32[$1 >> 2];
   block5 : {
    if (!$0) {
     $3 = HEAP32[$5 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[19509];
     HEAP32[19509] = $3;
     HEAP32[$1 >> 2] = 78036;
     $0 = HEAP32[$3 >> 2];
     if (!$0) {
      break block5
     }
     $1 = HEAP32[$0 + 4 >> 2];
     $0 = $2 - 1 | 0;
     block6 : {
      if (!($0 & $2)) {
       $1 = $0 & $1;
       break block6;
      }
      if ($1 >>> 0 < $2 >>> 0) {
       break block6
      }
      $1 = ($1 >>> 0) % ($2 >>> 0) | 0;
     }
     HEAP32[$4 + ($1 << 2) >> 2] = $3;
     break block5;
    }
    $3 = HEAP32[$5 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$0 >> 2] = $3;
   }
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[19510] = HEAP32[19510] + 1;
   std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void________unique_ptr_5babi_ne200100_5d_28_29($5 + 4 | 0);
   $0 = 1;
  }
  HEAP8[$6 + 12 | 0] = $0;
  HEAP32[$6 + 8 >> 2] = $3;
  __stack_pointer = $5 + 16 | 0;
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 8 >> 2] + 16 | 0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char___20emscripten__convertJSArrayToNumberVector_unsigned_20char__28emscripten__val_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $5 + 8 | 0;
  $7 = HEAP32[$1 + 4 >> 2];
  $4 = emscripten__val__val_28char_20const__29($2 + 8 | 0, 28020);
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = _emval_get_property($7 | 0, HEAP32[$4 + 4 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$3 >> 2] = 78476;
  emscripten__val___val_28_29($4);
  __stack_pointer = $2 + 16 | 0;
  $7 = HEAP32[$3 + 4 >> 2];
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (!(HEAP8[78172] & 1)) {
   $4 = _emval_create_invoker(2, 37788, 3) | 0;
   HEAP8[78172] = 1;
   HEAP32[19542] = $4;
  }
  $4 = HEAP32[$3 + 4 >> 2];
  if ($4 >>> 0 >= 9) {
   _emval_incref($4 | 0)
  }
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = 0;
  $6 = +_emval_invoke(HEAP32[19542], $7 | 0, 0, $2 + 4 | 0, $2 + 8 | 0);
  HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
  emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($2);
  __stack_pointer = $2 + 16 | 0;
  emscripten__val___val_28_29($3);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $2 = $6 < 4294967295.0 & $6 >= 0.0 ? ~~$6 >>> 0 : 0;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char____resize_28unsigned_20long_29($0, $2);
  HEAP32[$5 + 4 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 >> 2] = $2;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  if (!(HEAP8[78180] & 1)) {
   $2 = _emval_create_invoker(2, 37796, 3) | 0;
   HEAP8[78180] = 1;
   HEAP32[19544] = $2;
  }
  $2 = HEAP32[$5 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = 0;
  $6 = +_emval_invoke(HEAP32[19544], 0, 0, $0 + 4 | 0, $0 + 8 | 0);
  HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 4 >> 2] = $6 < 4294967295.0 & $6 >= 0.0 ? ~~$6 >>> 0 : 0;
  HEAP32[$3 >> 2] = 78476;
  emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0);
  __stack_pointer = $0 + 16 | 0;
  _emval_array_to_memory_view(HEAP32[$3 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
  emscripten__val___val_28_29($3);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function emscripten__val___val_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1 >>> 0 >= 9) {
   _emval_decref($1 | 0);
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function getNFTMarkerInfo($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = Math_fround(0), $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = Math_fround(0), $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = Math_fround(0), $83 = Math_fround(0), $84 = Math_fround(0), $85 = 0, $86 = 0, $87 = 0, $88 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 224 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 216 >> 2] = $2;
  HEAP32[$7 + 220 >> 2] = $1;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $7 + 220 | 0)) {
    emscripten__val_20emscripten__val__internalCallWithPolicy__28emscripten__internal__EM_INVOKER_KIND_293_2c_20emscripten__internal__WithPolicies___2c_20emscripten__val_2c_20int___28emscripten___EM_VAL__2c_20char_20const__2c_20int__29($0, 74468);
    break block;
   }
   $39 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($7 + 220 | 0);
   (wasm2js_i32$0 = $7, wasm2js_i32$1 = _emval_new_object() | 0), HEAP32[wasm2js_i32$0 + 212 >> 2] = wasm2js_i32$1;
   HEAP32[$7 + 208 >> 2] = 78476;
   emscripten__val__array_28_29($7 + 200 | 0);
   block1 : {
    if (HEAP32[$39 + 268 >> 2] <= ($2 | 0)) {
     emscripten__val_20emscripten__val__internalCallWithPolicy__28emscripten__internal__EM_INVOKER_KIND_293_2c_20emscripten__internal__WithPolicies___2c_20emscripten__val_2c_20int___28emscripten___EM_VAL__2c_20char_20const__2c_20int__29($0, 74472);
     break block1;
    }
    HEAP32[$7 + 140 >> 2] = -1082130432;
    $1 = HEAP32[$39 + 264 >> 2];
    block2 : {
     if (($2 | 0) != ($1 | 0)) {
      break block2
     }
     $12 = __stack_pointer - 80 | 0;
     __stack_pointer = $12;
     $1 = -1;
     $10 = HEAP32[$39 + 232 >> 2];
     $71 = $39 + 272 | 0;
     $24 = HEAP32[$71 + ($2 << 2) >> 2];
     $72 = HEAP32[$39 + 196 >> 2];
     $28 = $7 + 144 | 0;
     block3 : {
      if (!$10 | !$24 | (!$72 | !$28) | ($7 | 0) == -140) {
       break block3
      }
      if (HEAP32[$24 + 152 >> 2] <= 0) {
       $1 = -2;
       break block3;
      }
      $1 = 0;
      HEAP32[$7 + 140 >> 2] = 0;
      $15 = $10 + 1008 | 0;
      $73 = $24 + 104 | 0;
      $13 = $10 + 528 | 0;
      $67 = $24 + 56 | 0;
      $5 = $10 + 48 | 0;
      $56 = $24 + 8 | 0;
      while (1) {
       $18 = HEAP32[$24 + 4 >> 2];
       if (($18 | 0) > ($1 | 0)) {
        $4 = Math_imul($1, 112);
        $6 = Math_imul($1, 48);
        arUtilMatMulf($56, ($4 + HEAP32[$24 >> 2] | 0) + 12 | 0, $6 + $5 | 0);
        block4 : {
         if (HEAP32[$24 + 152 >> 2] < 2) {
          break block4
         }
         arUtilMatMulf($67, ($4 + HEAP32[$24 >> 2] | 0) + 12 | 0, $6 + $13 | 0);
         if (HEAP32[$24 + 152 >> 2] < 3) {
          break block4
         }
         arUtilMatMulf($73, ($4 + HEAP32[$24 >> 2] | 0) + 12 | 0, $6 + $15 | 0);
        }
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      };
      block9 : {
       block5 : {
        if (HEAP32[$10 >> 2] == 1) {
         $13 = $10 + 7496 | 0;
         $16 = $10 + 2672 | 0;
         $6 = HEAP32[$10 + 12 >> 2];
         $82 = Math_fround(HEAP32[$6 + 4 >> 2]);
         $83 = Math_fround(HEAP32[$6 >> 2]);
         label3 : while (1) {
          if (($18 | 0) <= ($35 | 0)) {
           break block5
          }
          $4 = $5 + Math_imul($35, 48) | 0;
          $11 = 0;
          while (1) if (($11 | 0) == 3) {
           $15 = Math_imul($35, 112);
           $18 = HEAP32[($15 + HEAP32[$24 >> 2] | 0) + 4 >> 2];
           $11 = 0;
           while (1) {
            if (HEAP32[$18 + 4 >> 2] > ($11 | 0)) {
             $1 = 0;
             while (1) {
              $4 = Math_imul($11, 20);
              $17 = $4 + HEAP32[$18 >> 2] | 0;
              if (HEAP32[$17 + 4 >> 2] > ($1 | 0)) {
               block7 : {
                block6 : {
                 $29 = HEAP32[$17 >> 2];
                 $17 = Math_imul($1, 20);
                 $20 = $29 + $17 | 0;
                 if ((ar2MarkerCoord2ScreenCoord2($6, $12 + 32 | 0, HEAPF32[$20 + 8 >> 2], HEAPF32[$20 + 12 >> 2], $12 + 28 | 0, $12 + 24 | 0) | 0) >= 0) {
                  $8 = HEAPF32[$12 + 28 >> 2];
                  if (!($8 < Math_fround(0.0))) {
                   break block6
                  }
                 }
                 $18 = HEAP32[$24 >> 2];
                 break block7;
                }
                $18 = HEAP32[$24 >> 2];
                if ($8 >= $83) {
                 break block7
                }
                $8 = HEAPF32[$12 + 24 >> 2];
                if ($8 < Math_fround(0.0) | $8 >= $82) {
                 break block7
                }
                $17 = $17 + HEAP32[$4 + HEAP32[HEAP32[($15 + $18 | 0) + 4 >> 2] >> 2] >> 2] | 0;
                $8 = HEAPF32[$17 + 8 >> 2];
                $31 = HEAPF32[$17 + 12 >> 2];
                $44 = Math_fround(HEAPF32[$12 + 76 >> 2] + Math_fround(Math_fround(HEAPF32[$12 + 64 >> 2] * $8) + Math_fround($31 * HEAPF32[$12 + 68 >> 2])));
                $84 = $44;
                $50 = Math_fround($44 * $44);
                $44 = Math_fround(HEAPF32[$12 + 44 >> 2] + Math_fround(Math_fround(HEAPF32[$12 + 32 >> 2] * $8) + Math_fround(HEAPF32[$12 + 36 >> 2] * $31)));
                $31 = Math_fround(HEAPF32[$12 + 60 >> 2] + Math_fround(Math_fround(HEAPF32[$12 + 48 >> 2] * $8) + Math_fround($31 * HEAPF32[$12 + 52 >> 2])));
                $50 = Math_fround(Math_sqrt(Math_fround($50 + Math_fround(Math_fround($44 * $44) + Math_fround($31 * $31)))));
                if (Math_fround(Math_fround(Math_fround($84 / $50) * HEAPF32[$12 + 72 >> 2]) + Math_fround(Math_fround(Math_fround($44 / $50) * HEAPF32[$12 + 40 >> 2]) + Math_fround(HEAPF32[$12 + 56 >> 2] * Math_fround($31 / $50)))) > Math_fround(-.10000000149011612)) {
                 break block7
                }
                HEAPF32[$12 + 16 >> 2] = $8;
                HEAPF32[$12 + 20 >> 2] = HEAPF32[$17 + 12 >> 2];
                ar2GetResolution($6, $12 + 32 | 0, $12 + 16 | 0, $12 + 8 | 0);
                $8 = HEAPF32[$12 + 12 >> 2];
                $18 = HEAP32[$24 >> 2];
                $4 = $4 + HEAP32[HEAP32[($15 + $18 | 0) + 4 >> 2] >> 2] | 0;
                $31 = HEAPF32[$4 + 12 >> 2];
                if (!(!($8 <= $31) | !($8 >= HEAPF32[$4 + 16 >> 2]))) {
                 if (($33 | 0) == 200) {
                  arLog(0, 3, 34308, 0);
                  HEAP32[$10 + 7484 >> 2] = -1;
                  break block9;
                 }
                 $4 = $16 + Math_imul($33, 24) | 0;
                 HEAP32[$4 + 8 >> 2] = $1;
                 HEAP32[$4 + 4 >> 2] = $11;
                 HEAP32[$4 >> 2] = $35;
                 HEAPF32[$4 + 16 >> 2] = HEAPF32[$12 + 28 >> 2];
                 $8 = HEAPF32[$12 + 24 >> 2];
                 HEAP32[$4 + 12 >> 2] = 0;
                 HEAPF32[$4 + 20 >> 2] = $8;
                 $33 = $33 + 1 | 0;
                 break block7;
                }
                if (!($8 <= Math_fround($31 + $31)) | !($8 >= Math_fround(HEAPF32[$4 + 16 >> 2] * Math_fround(.5)))) {
                 break block7
                }
                if (($3 | 0) == 200) {
                 HEAP32[$10 + 12308 >> 2] = -1;
                 $3 = 200;
                 break block7;
                }
                $4 = $13 + Math_imul($3, 24) | 0;
                HEAP32[$4 + 8 >> 2] = $1;
                HEAP32[$4 + 4 >> 2] = $11;
                HEAP32[$4 >> 2] = $35;
                HEAPF32[$4 + 16 >> 2] = HEAPF32[$12 + 28 >> 2];
                $8 = HEAPF32[$12 + 24 >> 2];
                HEAP32[$4 + 12 >> 2] = 0;
                HEAPF32[$4 + 20 >> 2] = $8;
                $3 = $3 + 1 | 0;
               }
               $1 = $1 + 1 | 0;
               $18 = HEAP32[($15 + $18 | 0) + 4 >> 2];
               continue;
              }
              break;
             };
             $11 = $11 + 1 | 0;
             continue;
            }
            break;
           };
           $35 = $35 + 1 | 0;
           $18 = HEAP32[$24 + 4 >> 2];
           continue label3;
          } else {
           $1 = $11 << 4;
           $15 = $1 + $4 | 0;
           $17 = $1 + ($12 + 32 | 0) | 0;
           $1 = 0;
           while (1) {
            if (($1 | 0) != 4) {
             $20 = $1 << 2;
             HEAPF32[$20 + $17 >> 2] = HEAPF32[$15 + $20 >> 2];
             $1 = $1 + 1 | 0;
             continue;
            }
            break;
           };
           $11 = $11 + 1 | 0;
           continue;
          };
         };
        }
        $15 = $10 + 7496 | 0;
        $13 = $10 + 2672 | 0;
        $44 = Math_fround(HEAP32[$10 + 8 >> 2]);
        $50 = Math_fround(HEAP32[$10 + 4 >> 2]);
        label8 : while (1) {
         if (($3 | 0) < ($18 | 0)) {
          $4 = $5 + Math_imul($3, 48) | 0;
          $11 = 0;
          while (1) if (($11 | 0) == 3) {
           $6 = Math_imul($3, 112);
           $18 = HEAP32[($6 + HEAP32[$24 >> 2] | 0) + 4 >> 2];
           $11 = 0;
           while (1) {
            if (HEAP32[$18 + 4 >> 2] > ($11 | 0)) {
             $1 = 0;
             while (1) {
              $4 = Math_imul($11, 20);
              $16 = $4 + HEAP32[$18 >> 2] | 0;
              if (HEAP32[$16 + 4 >> 2] > ($1 | 0)) {
               block11 : {
                block10 : {
                 $17 = HEAP32[$16 >> 2];
                 $16 = Math_imul($1, 20);
                 $17 = $17 + $16 | 0;
                 if ((ar2MarkerCoord2ScreenCoord2(0, $12 + 32 | 0, HEAPF32[$17 + 8 >> 2], HEAPF32[$17 + 12 >> 2], $12 + 28 | 0, $12 + 24 | 0) | 0) >= 0) {
                  $8 = HEAPF32[$12 + 28 >> 2];
                  if (!($8 < Math_fround(0.0))) {
                   break block10
                  }
                 }
                 $18 = HEAP32[$24 >> 2];
                 break block11;
                }
                $18 = HEAP32[$24 >> 2];
                if ($8 >= $50) {
                 break block11
                }
                $8 = HEAPF32[$12 + 24 >> 2];
                if ($8 < Math_fround(0.0) | $8 >= $44) {
                 break block11
                }
                $16 = $16 + HEAP32[$4 + HEAP32[HEAP32[($6 + $18 | 0) + 4 >> 2] >> 2] >> 2] | 0;
                HEAPF32[$12 + 16 >> 2] = HEAPF32[$16 + 8 >> 2];
                HEAPF32[$12 + 20 >> 2] = HEAPF32[$16 + 12 >> 2];
                ar2GetResolution(0, $12 + 32 | 0, $12 + 16 | 0, $12 + 8 | 0);
                $8 = HEAPF32[$12 + 12 >> 2];
                $18 = HEAP32[$24 >> 2];
                $4 = $4 + HEAP32[HEAP32[($6 + $18 | 0) + 4 >> 2] >> 2] | 0;
                $31 = HEAPF32[$4 + 12 >> 2];
                if (!(!($8 <= $31) | !($8 >= HEAPF32[$4 + 16 >> 2]))) {
                 if (($45 | 0) == 200) {
                  arLog(0, 3, 34308, 0);
                  HEAP32[$10 + 7484 >> 2] = -1;
                  break block9;
                 }
                 $4 = $13 + Math_imul($45, 24) | 0;
                 HEAP32[$4 + 8 >> 2] = $1;
                 HEAP32[$4 + 4 >> 2] = $11;
                 HEAP32[$4 >> 2] = $3;
                 HEAPF32[$4 + 16 >> 2] = HEAPF32[$12 + 28 >> 2];
                 $8 = HEAPF32[$12 + 24 >> 2];
                 HEAP32[$4 + 12 >> 2] = 0;
                 HEAPF32[$4 + 20 >> 2] = $8;
                 $45 = $45 + 1 | 0;
                 break block11;
                }
                if (!($8 <= Math_fround($31 + $31)) | !($8 >= Math_fround(HEAPF32[$4 + 16 >> 2] * Math_fround(.5)))) {
                 break block11
                }
                if (($33 | 0) == 200) {
                 HEAP32[$10 + 12308 >> 2] = -1;
                 $33 = 200;
                 break block11;
                }
                $4 = $15 + Math_imul($33, 24) | 0;
                HEAP32[$4 + 8 >> 2] = $1;
                HEAP32[$4 + 4 >> 2] = $11;
                HEAP32[$4 >> 2] = $3;
                HEAPF32[$4 + 16 >> 2] = HEAPF32[$12 + 28 >> 2];
                $8 = HEAPF32[$12 + 24 >> 2];
                HEAP32[$4 + 12 >> 2] = 0;
                HEAPF32[$4 + 20 >> 2] = $8;
                $33 = $33 + 1 | 0;
               }
               $1 = $1 + 1 | 0;
               $18 = HEAP32[($6 + $18 | 0) + 4 >> 2];
               continue;
              }
              break;
             };
             $11 = $11 + 1 | 0;
             continue;
            }
            break;
           };
           $3 = $3 + 1 | 0;
           $18 = HEAP32[$24 + 4 >> 2];
           continue label8;
          } else {
           $1 = $11 << 4;
           $6 = $1 + $4 | 0;
           $16 = $1 + ($12 + 32 | 0) | 0;
           $1 = 0;
           while (1) {
            if (($1 | 0) != 4) {
             $17 = $1 << 2;
             HEAPF32[$17 + $16 >> 2] = HEAPF32[$6 + $17 >> 2];
             $1 = $1 + 1 | 0;
             continue;
            }
            break;
           };
           $11 = $11 + 1 | 0;
           continue;
          };
         }
         break;
        };
        HEAP32[($13 + Math_imul($45, 24) | 0) + 12 >> 2] = -1;
        HEAP32[($15 + Math_imul($33, 24) | 0) + 12 >> 2] = -1;
        break block9;
       }
       HEAP32[($16 + Math_imul($33, 24) | 0) + 12 >> 2] = -1;
       HEAP32[($13 + Math_imul($3, 24) | 0) + 12 >> 2] = -1;
      }
      $74 = $10 + 12320 | 0;
      $40 = $10 + 2192 | 0;
      $37 = $10 + 1872 | 0;
      $75 = $10 + 13284 | 0;
      $60 = $10 + 1488 | 0;
      $68 = $24 + 156 | 0;
      $85 = $10 + 7496 | 0;
      $45 = 2672;
      $11 = 0;
      $33 = 0;
      label12 : while (1) {
       block13 : {
        $1 = $11;
        $35 = 0;
        if (HEAP32[$10 + 36 >> 2] <= ($33 | 0)) {
         break block13
        }
        while (1) {
         block14 : {
          if (HEAP32[$10 + 36 >> 2] == ($33 | 0) | HEAP32[$10 + 13280 >> 2] <= ($35 | 0)) {
           break block14
          }
          $18 = ar2SelectTemplate($10 + $45 | 0, $68, $1, $60, HEAP32[$10 + 4 >> 2], HEAP32[$10 + 8 >> 2]);
          if (($18 | 0) < 0) {
           if (($45 | 0) != 2672) {
            break block14
           }
           $45 = 7496;
           $18 = ar2SelectTemplate($85, $68, $1, $60, HEAP32[$10 + 4 >> 2], HEAP32[$10 + 8 >> 2]);
           if (($18 | 0) < 0) {
            break block14
           }
          }
          $3 = ($10 + $45 | 0) + Math_imul($18, 24) | 0;
          HEAP32[($12 + 32 | 0) + ($35 << 2) >> 2] = $3;
          $4 = ($1 << 3) + $60 | 0;
          HEAPF32[$4 >> 2] = HEAPF32[$3 + 16 >> 2];
          HEAPF32[$4 + 4 >> 2] = HEAPF32[$3 + 20 >> 2];
          $4 = Math_imul($35, 52) + $75 | 0;
          HEAP32[$4 + 12 >> 2] = $72;
          HEAP32[$4 + 8 >> 2] = $3;
          HEAP32[$4 + 4 >> 2] = $24;
          HEAP32[$4 >> 2] = $10;
          $1 = $1 + 1 | 0;
          $1 = ($1 | 0) == 5 ? $11 : $1;
          $35 = $35 + 1 | 0;
          $33 = $33 + 1 | 0;
          continue;
         }
         break;
        };
        $18 = 0;
        if (!$35) {
         break block13
        }
        while (1) {
         if (($18 | 0) == ($35 | 0)) {
          continue label12
         }
         $20 = Math_imul($18, 52) + $75 | 0;
         $16 = HEAP32[$20 >> 2];
         $53 = HEAP32[$20 + 4 >> 2];
         $61 = HEAP32[$20 + 12 >> 2];
         $47 = HEAP32[$20 + 16 >> 2];
         $29 = 0;
         $27 = 0;
         $15 = 0;
         $38 = __stack_pointer - 48 | 0;
         __stack_pointer = $38;
         $1 = HEAP32[$20 + 8 >> 2];
         $54 = HEAP32[$1 + 8 >> 2];
         $57 = HEAP32[$1 + 4 >> 2];
         $48 = HEAP32[$1 >> 2];
         block44 : {
          block17 : {
           $3 = HEAP32[$20 + 20 >> 2];
           if (!$3) {
            $1 = HEAP32[$16 + 28 >> 2];
            $4 = HEAP32[$16 + 32 >> 2];
            block16 : {
             $3 = emscripten_builtin_malloc(40);
             if ($3) {
              block15 : {
               HEAP32[$3 + 20 >> 2] = $4;
               HEAP32[$3 + 8 >> 2] = $1;
               HEAP32[$3 + 16 >> 2] = $1;
               HEAP32[$3 + 12 >> 2] = $4;
               $1 = ($1 + $4 | 0) + 1 | 0;
               HEAP32[$3 + 4 >> 2] = $1;
               HEAP32[$3 >> 2] = $1;
               $1 = emscripten_builtin_malloc(Math_imul($1, $1) << 1);
               HEAP32[$3 + 24 >> 2] = $1;
               if (!$1) {
                break block15
               }
               break block16;
              }
             }
             break block17;
            }
            HEAP32[$20 + 20 >> 2] = $3;
           }
           $62 = -1;
           $30 = ($16 + Math_imul($48, 48) | 0) + 48 | 0;
           $1 = HEAP32[$53 >> 2] + Math_imul($48, 112) | 0;
           $34 = HEAP32[$1 >> 2];
           $19 = HEAP32[HEAP32[$1 + 4 >> 2] >> 2] + Math_imul($57, 20) | 0;
           $5 = __stack_pointer - 80 | 0;
           __stack_pointer = $5;
           block18 : {
            block22 : {
             block19 : {
              $1 = HEAP32[$16 + 12 >> 2];
              if ($1) {
               $6 = $5 + 16 | 0;
               arUtilMatMuldff($1 + 8 | 0, $30, $6);
               $4 = HEAP32[$19 >> 2] + Math_imul($54, 20) | 0;
               $8 = HEAPF32[$4 + 8 >> 2];
               HEAPF32[$5 + 76 >> 2] = $8;
               $31 = HEAPF32[$4 + 12 >> 2];
               HEAPF32[$5 + 72 >> 2] = $31;
               $4 = -1;
               if ((ar2MarkerCoord2ScreenCoord(0, $6, $8, $31, $5 + 76 | 0, $5 + 72 | 0) | 0) < 0) {
                break block18
               }
               $26 = $1 + 184 | 0;
               if ((arParamIdeal2ObservLTf($26, HEAPF32[$5 + 76 >> 2], HEAPF32[$5 + 72 >> 2], $5 + 68 | 0, $5 - -64 | 0) | 0) < 0) {
                break block18
               }
               $8 = Math_fround(HEAPF32[$5 + 64 >> 2] + Math_fround(.5));
               if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                $6 = ~~$8
               } else {
                $6 = -2147483648
               }
               $1 = HEAP32[$3 + 16 >> 2];
               $13 = $6 - ($1 << 1) | 0;
               $17 = 0 - $1 | 0;
               $8 = Math_fround(HEAPF32[$5 + 68 >> 2] + Math_fround(.5));
               if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                $1 = ~~$8
               } else {
                $1 = -2147483648
               }
               $6 = HEAP32[$3 + 24 >> 2];
               label13 : while (1) {
                if (HEAP32[$3 + 20 >> 2] < ($17 | 0)) {
                 break block19
                }
                $4 = HEAP32[$3 + 8 >> 2];
                $22 = 0 - $4 | 0;
                $4 = $1 - ($4 << 1) | 0;
                $8 = Math_fround($13 | 0);
                while (1) {
                 block21 : {
                  block20 : {
                   if (HEAP32[$3 + 12 >> 2] >= ($22 | 0)) {
                    if ((arParamObserv2IdealLTf($26, Math_fround($4 | 0), $8, $5 + 68 | 0, $5 - -64 | 0) | 0) < 0) {
                     break block20
                    }
                    if ((ar2GetImageValue($5 + 16 | 0, HEAP32[HEAP32[$34 >> 2] + (HEAP32[$19 + 8 >> 2] << 2) >> 2], HEAPF32[$5 + 68 >> 2], HEAPF32[$5 + 64 >> 2], $5 + 15 | 0) | 0) < 0) {
                     break block20
                    }
                    $21 = HEAPU8[$5 + 15 | 0];
                    HEAP16[$6 >> 1] = $21;
                    $15 = $15 + 1 | 0;
                    $27 = $21 + $27 | 0;
                    $29 = Math_imul($21, $21) + $29 | 0;
                    break block21;
                   }
                   $13 = $13 + 2 | 0;
                   $17 = $17 + 1 | 0;
                   continue label13;
                  }
                  HEAP16[$6 >> 1] = 4096;
                 }
                 $4 = $4 + 2 | 0;
                 $22 = $22 + 1 | 0;
                 $6 = $6 + 2 | 0;
                 continue;
                };
               };
              }
              $1 = HEAP32[$19 >> 2] + Math_imul($54, 20) | 0;
              if ((ar2MarkerCoord2ScreenCoord(0, $30, HEAPF32[$1 + 8 >> 2], HEAPF32[$1 + 12 >> 2], $5 + 68 | 0, $5 - -64 | 0) | 0) < 0) {
               break block22
              }
              $8 = Math_fround(HEAPF32[$5 + 64 >> 2] + Math_fround(.5));
              if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
               $6 = ~~$8
              } else {
               $6 = -2147483648
              }
              $1 = HEAP32[$3 + 16 >> 2];
              $13 = $6 - ($1 << 1) | 0;
              $17 = 0 - $1 | 0;
              $8 = Math_fround(HEAPF32[$5 + 68 >> 2] + Math_fround(.5));
              if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
               $1 = ~~$8
              } else {
               $1 = -2147483648
              }
              $26 = HEAP32[$3 + 24 >> 2];
              while (1) {
               if (HEAP32[$3 + 20 >> 2] < ($17 | 0)) {
                break block19
               }
               $6 = HEAP32[$3 + 8 >> 2];
               $4 = 0 - $6 | 0;
               $6 = $1 - ($6 << 1) | 0;
               $8 = Math_fround($13 | 0);
               while (1) {
                if (HEAP32[$3 + 12 >> 2] >= ($4 | 0)) {
                 block23 : {
                  if ((ar2GetImageValue($30, HEAP32[HEAP32[$34 >> 2] + (HEAP32[$19 + 8 >> 2] << 2) >> 2], Math_fround($6 | 0), $8, $5 + 15 | 0) | 0) < 0) {
                   $22 = 4096;
                   break block23;
                  }
                  $15 = $15 + 1 | 0;
                  $22 = HEAPU8[$5 + 15 | 0];
                  $27 = $27 + $22 | 0;
                  $29 = Math_imul($22, $22) + $29 | 0;
                 }
                 HEAP16[$26 >> 1] = $22;
                 $6 = $6 + 2 | 0;
                 $4 = $4 + 1 | 0;
                 $26 = $26 + 2 | 0;
                 continue;
                }
                break;
               };
               $13 = $13 + 2 | 0;
               $17 = $17 + 1 | 0;
               continue;
              };
             }
             if (!$15) {
              break block22
             }
             HEAP32[$3 + 36 >> 2] = $15;
             HEAP32[$3 + 32 >> 2] = $27;
             $8 = Math_fround(Math_sqrt(Math_fround($29 - ((Math_imul($27, $27) | 0) / ($15 | 0) | 0) | 0)));
             if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
              $1 = ~~$8
             } else {
              $1 = -2147483648
             }
             HEAP32[$3 + 28 >> 2] = $1;
             $4 = 0;
             break block18;
            }
            $4 = -1;
           }
           __stack_pointer = $5 + 80 | 0;
           block24 : {
            if (($4 | 0) < 0) {
             break block24
            }
            $1 = HEAP32[$20 + 20 >> 2];
            $3 = HEAP32[$1 + 28 >> 2];
            if (Math_fround(Math_imul($3, $3) >>> 0) < Math_fround(Math_fround(Math_fround(Math_imul((HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 20 >> 2] | 0) + 1 | 0, (HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 12 >> 2] | 0) + 1 | 0) | 0) * Math_fround(5.0)) * Math_fround(5.0))) {
             break block24
            }
            $1 = HEAP32[$16 + 12 >> 2];
            block28 : {
             block27 : {
              switch (HEAP32[$53 + 152 >> 2] - 1 | 0) {
              case 0:
               ar2GetSearchPoint($1, $30, 0, 0, HEAP32[HEAP32[HEAP32[(HEAP32[$53 >> 2] + Math_imul($48, 112) | 0) + 4 >> 2] >> 2] + Math_imul($57, 20) >> 2] + Math_imul($54, 20) | 0, $38 + 16 | 0);
               break block28;
              case 1:
               ar2GetSearchPoint($1, $30, ($16 + Math_imul($48, 48) | 0) + 528 | 0, 0, HEAP32[HEAP32[HEAP32[(HEAP32[$53 >> 2] + Math_imul($48, 112) | 0) + 4 >> 2] >> 2] + Math_imul($57, 20) >> 2] + Math_imul($54, 20) | 0, $38 + 16 | 0);
               break block28;
              default:
               break block27;
              };
             }
             $3 = $1;
             $1 = $16 + Math_imul($48, 48) | 0;
             ar2GetSearchPoint($3, $30, $1 + 528 | 0, $1 + 1008 | 0, HEAP32[HEAP32[HEAP32[(HEAP32[$53 >> 2] + Math_imul($48, 112) | 0) + 4 >> 2] >> 2] + Math_imul($57, 20) >> 2] + Math_imul($54, 20) | 0, $38 + 16 | 0);
            }
            $62 = 0;
            $63 = HEAP32[$16 + 20 >> 2];
            $17 = HEAP32[$16 + 24 >> 2];
            $27 = $38 + 16 | 0;
            $6 = 0;
            $19 = __stack_pointer + -64 | 0;
            __stack_pointer = $19;
            $64 = HEAP32[$16 + 8 >> 2];
            $15 = $64 - 1 | 0;
            $34 = HEAP32[$16 + 4 >> 2];
            $13 = $34 - 1 | 0;
            $21 = HEAP32[$20 + 20 >> 2];
            $16 = HEAP32[$21 + 20 >> 2];
            $22 = HEAP32[$21 + 16 >> 2];
            while (1) {
             block29 : {
              if (($6 | 0) == 3) {
               break block29
              }
              $1 = $27 + ($6 << 3) | 0;
              $3 = HEAP32[$1 >> 2];
              if (($3 | 0) < 0) {
               break block29
              }
              $3 = $3 & 2147483644 | 2;
              $4 = $3 + $17 | 0;
              $30 = ($4 | 0) < ($13 | 0) ? $4 : $13;
              $1 = HEAP32[$1 + 4 >> 2] / 4 << 2 | 2;
              $4 = $1 + $17 | 0;
              $29 = ($4 | 0) < ($15 | 0) ? $4 : $15;
              $1 = $1 - $17 | 0;
              $4 = ($1 | 0) > 0 ? $1 : 0;
              $1 = $3 - $17 | 0;
              $3 = ($1 | 0) > 0 ? $1 : 0;
              $26 = $3 + $47 | 0;
              while (1) {
               if (($4 | 0) <= ($29 | 0)) {
                $5 = $26 + Math_imul($4, $34) | 0;
                $1 = $3;
                while (1) {
                 if (($1 | 0) <= ($30 | 0)) {
                  HEAP8[$5 | 0] = 0;
                  $1 = $1 + 1 | 0;
                  $5 = $5 + 1 | 0;
                  continue;
                 }
                 break;
                };
                $4 = $4 + 1 | 0;
                continue;
               }
               break;
              };
              $6 = $6 + 1 | 0;
              continue;
             }
             break;
            };
            $29 = $22 << 1;
            $26 = $16 << 1;
            $6 = 0;
            $22 = 0;
            $5 = 1;
            block39 : {
             label33 : while (1) {
              block38 : {
               block30 : {
                block31 : {
                 if (($22 | 0) != 3) {
                  $1 = $27 + ($22 << 3) | 0;
                  $3 = HEAP32[$1 >> 2];
                  if (($3 | 0) >= 0) {
                   break block30
                  }
                  $30 = -1;
                  if ($5) {
                   break block31
                  }
                 }
                 $1 = Math_imul((HEAP32[$21 >> 2] << 3) + 32 | 0, (HEAP32[$21 + 4 >> 2] << 1) + 8 | 0);
                 $16 = emscripten_builtin_malloc($1);
                 if ($16) {
                  $17 = emscripten_builtin_malloc($1);
                  if ($17) {
                   $65 = ($6 | 0) > 0 ? $6 : 0;
                   $55 = $34 << 1;
                   $30 = -1;
                   $86 = $63 >>> 0 > 14;
                   $47 = 0;
                   $15 = 0;
                   while (1) {
                    block34 : {
                     if (($47 | 0) != ($65 | 0)) {
                      block33 : {
                       $4 = HEAP32[$21 + 4 >> 2];
                       $3 = HEAP32[$21 >> 2];
                       block32 : {
                        if (!(1 << $63 & 28704) | (HEAP32[$21 + 36 >> 2] != (Math_imul($4, $3) | 0) | $86)) {
                         break block32
                        }
                        $1 = $47 << 2;
                        $76 = $1 + ($19 + 40 | 0) | 0;
                        $5 = HEAP32[$76 >> 2];
                        $58 = ($5 - (HEAP32[$21 + 16 >> 2] << 1) | 0) - 3 | 0;
                        if (($58 | 0) < 0 | ($64 | 0) <= (($5 + (HEAP32[$21 + 20 >> 2] << 1) | 0) + 3 | 0)) {
                         break block32
                        }
                        $77 = $1 + ($19 + 52 | 0) | 0;
                        $1 = HEAP32[$77 >> 2];
                        $6 = ($1 - (HEAP32[$21 + 8 >> 2] << 1) | 0) - 3 | 0;
                        if (($6 | 0) < 0) {
                         break block32
                        }
                        if (($34 | 0) > (($1 + (HEAP32[$21 + 12 >> 2] << 1) | 0) + 3 | 0)) {
                         break block33
                        }
                       }
                       $1 = $47 << 2;
                       $3 = HEAP32[$1 + ($19 + 40 | 0) >> 2];
                       $4 = $3 + 3 | 0;
                       $5 = $3 - 3 | 0;
                       $6 = $1 + ($19 + 52 | 0) | 0;
                       while (1) {
                        if (($4 | 0) < ($5 | 0)) {
                         break block34
                        }
                        block35 : {
                         if (HEAP32[$21 + 16 >> 2] << 1 > ($5 | 0)) {
                          break block35
                         }
                         if (($64 | 0) <= ((HEAP32[$21 + 20 >> 2] << 1) + $5 | 0)) {
                          break block34
                         }
                         $1 = HEAP32[$6 >> 2];
                         $13 = $1 + 3 | 0;
                         $1 = $1 - 3 | 0;
                         while (1) {
                          if (($1 | 0) > ($13 | 0)) {
                           break block35
                          }
                          block36 : {
                           if (HEAP32[$21 + 8 >> 2] << 1 > ($1 | 0)) {
                            break block36
                           }
                           if (($34 | 0) <= ((HEAP32[$21 + 12 >> 2] << 1) + $1 | 0)) {
                            break block35
                           }
                           ar2GetBestMatchingSubFine($61, $34, $63, $21, $1, $5, $19 + 24 | 0);
                           $3 = HEAP32[$19 + 24 >> 2];
                           if (($3 | 0) <= ($15 | 0)) {
                            break block36
                           }
                           HEAP32[$38 + 12 >> 2] = $1;
                           HEAP32[$38 + 8 >> 2] = $5;
                           HEAPF32[$20 + 24 >> 2] = Math_fround($3 >>> 0) / Math_fround(1.0e4);
                           $30 = 0;
                           $15 = $3;
                          }
                          $1 = $1 + 1 | 0;
                          continue;
                         };
                        }
                        $5 = $5 + 1 | 0;
                        continue;
                       };
                      }
                      $1 = 0;
                      $5 = ($3 << 2) + 16 | 0;
                      $22 = ($5 | 0) > 0 ? $5 : 0;
                      $5 = $16;
                      $13 = $17;
                      while (1) {
                       if (($1 | 0) != ($22 | 0)) {
                        HEAP32[$5 >> 2] = 0;
                        HEAP32[$13 >> 2] = 0;
                        $1 = $1 + 1 | 0;
                        $13 = $13 + 4 | 0;
                        $5 = $5 + 4 | 0;
                        continue;
                       }
                       break;
                      };
                      $26 = 0;
                      $1 = ($3 << 1) + 6 | 0;
                      $51 = ($1 | 0) > 0 ? $1 : 0;
                      $1 = $4 << 1;
                      $69 = (($1 | 0) <= -6 ? -6 : $1) + 6 | 0;
                      $27 = $6 + (Math_imul($34, $58) + $61 | 0) | 0;
                      $4 = $16;
                      $3 = $17;
                      while (1) {
                       if (($26 | 0) == ($69 | 0)) {
                        $69 = $6 + $61 | 0;
                        $29 = HEAP32[$21 + 24 >> 2];
                       } else {
                        $1 = 0;
                        HEAP32[$5 >> 2] = 0;
                        HEAP32[$13 >> 2] = 0;
                        HEAP32[$19 + 8 >> 2] = 0;
                        HEAP32[$19 + 16 >> 2] = 0;
                        HEAP32[$5 + 4 >> 2] = 0;
                        HEAP32[$13 + 4 >> 2] = 0;
                        HEAP32[$19 + 12 >> 2] = 0;
                        HEAP32[$19 + 20 >> 2] = 0;
                        $3 = $3 + 8 | 0;
                        $4 = $4 + 8 | 0;
                        $5 = $5 + 8 | 0;
                        $13 = $13 + 8 | 0;
                        $22 = $27;
                        while (1) {
                         if (($1 | 0) != ($51 | 0)) {
                          $29 = HEAPU8[$22 | 0];
                          $41 = $1 << 2 & 4;
                          $66 = $41 + ($19 + 16 | 0) | 0;
                          $36 = $29 + HEAP32[$66 >> 2] | 0;
                          HEAP32[$66 >> 2] = $36;
                          $41 = $41 + ($19 + 8 | 0) | 0;
                          $29 = HEAP32[$41 >> 2] + Math_imul($29, $29) | 0;
                          HEAP32[$41 >> 2] = $29;
                          HEAP32[$5 >> 2] = $36 + HEAP32[$4 >> 2];
                          HEAP32[$13 >> 2] = $29 + HEAP32[$3 >> 2];
                          $1 = $1 + 1 | 0;
                          $13 = $13 + 4 | 0;
                          $3 = $3 + 4 | 0;
                          $5 = $5 + 4 | 0;
                          $4 = $4 + 4 | 0;
                          $22 = $22 + 1 | 0;
                          continue;
                         }
                         break;
                        };
                        $26 = $26 + 1 | 0;
                        $27 = $27 + $34 | 0;
                        continue;
                       }
                       break;
                      };
                      $27 = 0;
                      while (1) {
                       block37 : {
                        if (($27 | 0) != 7) {
                         $41 = $27 - 3 | 0;
                         $66 = $69 + Math_imul($34, $27 + $58 | 0) | 0;
                         $26 = 0;
                         while (1) {
                          if (($26 | 0) == 7) {
                           break block37
                          }
                          $4 = 0;
                          $36 = HEAP32[$21 + 4 >> 2];
                          $87 = ($36 | 0) > 0 ? $36 : 0;
                          $3 = $26 + $66 | 0;
                          $51 = HEAP32[$21 >> 2];
                          $78 = ($51 | 0) > 0 ? $51 : 0;
                          $88 = $78 << 1;
                          $6 = $29;
                          $22 = 0;
                          while (1) {
                           if (($22 | 0) != ($87 | 0)) {
                            $5 = $3;
                            $13 = $6;
                            $1 = 0;
                            while (1) {
                             if (($1 | 0) != ($78 | 0)) {
                              $1 = $1 + 1 | 0;
                              $4 = Math_imul(HEAPU16[$13 >> 1], HEAPU8[$5 | 0]) + $4 | 0;
                              $5 = $5 + 2 | 0;
                              $13 = $13 + 2 | 0;
                              continue;
                             }
                             break;
                            };
                            $22 = $22 + 1 | 0;
                            $3 = $3 + $55 | 0;
                            $6 = $6 + $88 | 0;
                            continue;
                           }
                           break;
                          };
                          $1 = 0;
                          $3 = $51 << 1;
                          $5 = $3 + 8 | 0;
                          $6 = Math_imul($5, $27);
                          $13 = $6 + $26 << 2;
                          $22 = Math_imul($5, ($36 << 1) + $27 | 0);
                          $3 = $3 + $26 | 0;
                          $36 = $22 + $3 << 2;
                          $5 = HEAP32[$13 + $17 >> 2] + HEAP32[$36 + $17 >> 2] | 0;
                          $36 = HEAP32[$13 + $16 >> 2] + HEAP32[$16 + $36 >> 2] | 0;
                          $13 = $22 + $26 << 2;
                          $6 = $3 + $6 << 2;
                          $3 = $36 - (HEAP32[$13 + $16 >> 2] + HEAP32[$6 + $16 >> 2] | 0) | 0;
                          $13 = HEAP32[$6 + $17 >> 2] + HEAP32[$13 + $17 >> 2] | 0;
                          $6 = HEAP32[$21 + 36 >> 2];
                          $13 = $13 + ((Math_imul($3, $3) | 0) / ($6 | 0) | 0) | 0;
                          if (($13 | 0) != ($5 | 0)) {
                           $3 = Math_imul((Math_imul($4 - ((Math_imul($3, HEAP32[$21 + 32 >> 2]) | 0) / ($6 | 0) | 0) | 0, 100) | 0) / HEAP32[$21 + 28 >> 2] | 0, 100);
                           $8 = Math_fround(Math_sqrt(Math_fround($5 - $13 | 0)));
                           if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                            $1 = ~~$8
                           } else {
                            $1 = -2147483648
                           }
                           $1 = ($3 | 0) / ($1 | 0) | 0;
                          }
                          if (($1 | 0) > ($15 | 0)) {
                           HEAP32[$38 + 12 >> 2] = (HEAP32[$77 >> 2] + $26 | 0) - 3;
                           HEAP32[$38 + 8 >> 2] = $41 + HEAP32[$76 >> 2];
                           HEAPF32[$20 + 24 >> 2] = Math_fround($1 >>> 0) / Math_fround(1.0e4);
                           $30 = 0;
                           $15 = $1;
                          }
                          $26 = $26 + 1 | 0;
                          continue;
                         };
                        }
                        HEAP32[$19 + 24 >> 2] = $1;
                        break block34;
                       }
                       $27 = $27 + 1 | 0;
                       continue;
                      };
                     }
                     emscripten_builtin_free($16);
                     emscripten_builtin_free($17);
                     break block31;
                    }
                    $47 = $47 + 1 | 0;
                    continue;
                   };
                  }
                  break block38;
                 }
                 break block38;
                }
                __stack_pointer = $19 - -64 | 0;
                break block39;
               }
               $3 = $3 & 2147483644 | 2;
               $58 = $3 + $17 | 0;
               $13 = $3 - $17 | 0;
               $1 = HEAP32[$1 + 4 >> 2] / 4 << 2 | 2;
               $36 = $1 + $17 | 0;
               $15 = $1 - $17 | 0;
               while (1) {
                block41 : {
                 block40 : {
                  if (($15 | 0) > ($36 | 0)) {
                   break block40
                  }
                  if (($15 | 0) < ($29 | 0)) {
                   break block41
                  }
                  if (($64 | 0) <= ($15 + $26 | 0)) {
                   break block40
                  }
                  $51 = $47 + Math_imul($15, $34) | 0;
                  $4 = $13;
                  while (1) {
                   if (($4 | 0) > ($58 | 0)) {
                    break block41
                   }
                   block42 : {
                    if (HEAP32[$21 + 8 >> 2] << 1 > ($4 | 0)) {
                     break block42
                    }
                    if (($34 | 0) <= ((HEAP32[$21 + 12 >> 2] << 1) + $4 | 0)) {
                     break block41
                    }
                    $1 = $4 + $51 | 0;
                    if (HEAPU8[$1 | 0]) {
                     break block42
                    }
                    HEAP8[$1 | 0] = 1;
                    ar2GetBestMatchingSubFine($61, $34, $63, $21, $4, $15, $19 + 24 | 0);
                    $16 = HEAP32[$19 + 24 >> 2];
                    if ($6) {
                     $1 = 0;
                     $3 = ($6 | 0) > 0 ? $6 : 0;
                     while (1) {
                      block43 : {
                       if (($1 | 0) != ($3 | 0)) {
                        if (($16 | 0) <= HEAP32[($19 + 28 | 0) + ($1 << 2) >> 2]) {
                         break block43
                        }
                        $3 = $1;
                       }
                       if (($3 | 0) == ($6 | 0)) {
                        $5 = 0;
                        if ($6 >>> 0 > 2) {
                         break block42
                        }
                        $1 = $6 << 2;
                        HEAP32[$1 + ($19 + 40 | 0) >> 2] = $15;
                        HEAP32[$1 + ($19 + 52 | 0) >> 2] = $4;
                        HEAP32[$1 + ($19 + 28 | 0) >> 2] = $16;
                        $6 = $6 + 1 | 0;
                        break block42;
                       }
                       $65 = ($6 | 0) == 3;
                       $1 = $65 ? 2 : $6;
                       while (1) {
                        if (($1 | 0) > ($3 | 0)) {
                         $5 = $1 << 2;
                         $30 = $19 + 52 | 0;
                         $55 = $5 + $30 | 0;
                         $41 = $30;
                         $1 = $1 - 1 | 0;
                         $30 = $1 << 2;
                         HEAP32[$55 >> 2] = HEAP32[$41 + $30 >> 2];
                         $55 = $19 + 40 | 0;
                         HEAP32[$55 + $5 >> 2] = HEAP32[$30 + $55 >> 2];
                         $41 = $5;
                         $5 = $19 + 28 | 0;
                         HEAP32[$41 + $5 >> 2] = HEAP32[$5 + $30 >> 2];
                         continue;
                        }
                        break;
                       };
                       $1 = $1 << 2;
                       HEAP32[$1 + ($19 + 40 | 0) >> 2] = $15;
                       HEAP32[$1 + ($19 + 52 | 0) >> 2] = $4;
                       HEAP32[$1 + ($19 + 28 | 0) >> 2] = $16;
                       $6 = $65 ? 3 : $6 + 1 | 0;
                       $5 = 0;
                       break block42;
                      }
                      $1 = $1 + 1 | 0;
                      continue;
                     };
                    }
                    HEAP32[$19 + 40 >> 2] = $15;
                    HEAP32[$19 + 52 >> 2] = $4;
                    HEAP32[$19 + 28 >> 2] = $16;
                    $5 = 0;
                    $6 = 1;
                   }
                   $4 = $4 + 4 | 0;
                   continue;
                  };
                 }
                 $22 = $22 + 1 | 0;
                 continue label33;
                }
                $15 = $15 + 4 | 0;
                continue;
               };
              }
              break;
             };
             break block17;
            }
            if (($30 | 0) < 0) {
             $62 = -1;
             break block24;
            }
            HEAPF32[$20 + 28 >> 2] = HEAP32[$38 + 12 >> 2];
            HEAPF32[$20 + 32 >> 2] = HEAP32[$38 + 8 >> 2];
            $1 = HEAP32[$53 >> 2] + Math_imul($48, 112) | 0;
            $3 = HEAP32[HEAP32[HEAP32[$1 + 4 >> 2] >> 2] + Math_imul($57, 20) >> 2] + Math_imul($54, 20) | 0;
            HEAPF32[$20 + 36 >> 2] = HEAPF32[$1 + 24 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[$3 + 8 >> 2]) + Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$3 + 12 >> 2]));
            HEAPF32[$20 + 40 >> 2] = HEAPF32[$1 + 40 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 28 >> 2] * HEAPF32[$3 + 8 >> 2]) + Math_fround(HEAPF32[$1 + 32 >> 2] * HEAPF32[$3 + 12 >> 2]));
            HEAPF32[$20 + 44 >> 2] = HEAPF32[$1 + 56 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 44 >> 2] * HEAPF32[$3 + 8 >> 2]) + Math_fround(HEAPF32[$1 + 48 >> 2] * HEAPF32[$3 + 12 >> 2]));
           }
           __stack_pointer = $38 + 48 | 0;
           break block44;
          }
          arLog(0, 3, 1733, 0);
          exit(1);
          wasm2js_trap();
         }
         HEAP32[$20 + 48 >> 2] = $62;
         if (!(!(HEAPF32[$20 + 24 >> 2] > HEAPF32[$10 + 40 >> 2]) | $62)) {
          block46 : {
           if (HEAP32[$10 >> 2] == 1) {
            $1 = HEAP32[$10 + 12 >> 2];
            arParamObserv2Ideal($1 + 104 | 0, +HEAPF32[$20 + 28 >> 2], +HEAPF32[$20 + 32 >> 2], $12 + 16 | 0, $12 + 8 | 0, HEAP32[$1 + 176 >> 2]);
            $1 = ($11 << 3) + $37 | 0;
            HEAPF32[$1 >> 2] = HEAPF64[$12 + 16 >> 3];
            HEAPF32[$1 + 4 >> 2] = HEAPF64[$12 + 8 >> 3];
            break block46;
           }
           $1 = ($11 << 3) + $37 | 0;
           HEAPF32[$1 >> 2] = HEAPF32[$20 + 28 >> 2];
           HEAPF32[$1 + 4 >> 2] = HEAPF32[$20 + 32 >> 2];
          }
          $1 = Math_imul($11, 12) + $40 | 0;
          HEAPF32[$1 >> 2] = HEAPF32[$20 + 36 >> 2];
          HEAPF32[$1 + 4 >> 2] = HEAPF32[$20 + 40 >> 2];
          HEAPF32[$1 + 8 >> 2] = HEAPF32[$20 + 44 >> 2];
          $3 = ($11 << 3) + $60 | 0;
          $1 = HEAP32[($12 + 32 | 0) + ($18 << 2) >> 2];
          HEAPF32[$3 >> 2] = HEAPF32[$1 + 16 >> 2];
          HEAPF32[$3 + 4 >> 2] = HEAPF32[$1 + 20 >> 2];
          $3 = Math_imul($11, 24) + $74 | 0;
          HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
          $1 = HEAP32[$1 + 8 >> 2];
          HEAP32[$3 + 12 >> 2] = 0;
          HEAP32[$3 + 8 >> 2] = $1;
          $11 = $11 + 1 | 0;
         }
         $18 = $18 + 1 | 0;
         continue;
        };
       }
       break;
      };
      $1 = 0;
      $5 = ($11 | 0) > 0 ? $11 : 0;
      while (1) {
       if (($1 | 0) != ($5 | 0)) {
        $4 = Math_imul($1, 24);
        $3 = $4 + $68 | 0;
        $4 = $4 + $74 | 0;
        $6 = HEAP32[$4 + 20 >> 2];
        HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
        HEAP32[$3 + 20 >> 2] = $6;
        $6 = HEAP32[$4 + 12 >> 2];
        HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
        HEAP32[$3 + 12 >> 2] = $6;
        $6 = HEAP32[$4 + 4 >> 2];
        HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$3 + 4 >> 2] = $6;
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      };
      HEAP32[(Math_imul($11, 24) + $24 | 0) + 168 >> 2] = -1;
      block50 : {
       block47 : {
        block49 : {
         block48 : {
          if (HEAP32[$10 >> 2] == 1) {
           if (($11 | 0) < 3) {
            break block47
           }
           $8 = ar2GetTransMat(HEAP32[$10 + 16 >> 2], $56, $37, $40, $11, $28, 0);
           HEAPF32[$7 + 140 >> 2] = $8;
           if (!($8 > HEAPF32[$10 + 44 >> 2])) {
            break block48
           }
           icpSetInlierProbability(HEAP32[$10 + 16 >> 2], .800000011920929);
           $8 = ar2GetTransMat(HEAP32[$10 + 16 >> 2], $28, $37, $40, $11, $28, 1);
           HEAPF32[$7 + 140 >> 2] = $8;
           if (!($8 > HEAPF32[$10 + 44 >> 2])) {
            break block48
           }
           icpSetInlierProbability(HEAP32[$10 + 16 >> 2], .6000000238418579);
           $8 = ar2GetTransMat(HEAP32[$10 + 16 >> 2], $28, $37, $40, $11, $28, 1);
           HEAPF32[$7 + 140 >> 2] = $8;
           if (!($8 > HEAPF32[$10 + 44 >> 2])) {
            break block48
           }
           icpSetInlierProbability(HEAP32[$10 + 16 >> 2], .4000000059604645);
           $8 = ar2GetTransMat(HEAP32[$10 + 16 >> 2], $28, $37, $40, $11, $28, 1);
           HEAPF32[$7 + 140 >> 2] = $8;
           if (!($8 > HEAPF32[$10 + 44 >> 2])) {
            break block48
           }
           icpSetInlierProbability(HEAP32[$10 + 16 >> 2], 0.0);
           $8 = ar2GetTransMat(HEAP32[$10 + 16 >> 2], $28, $37, $40, $11, $28, 1);
           HEAPF32[$7 + 140 >> 2] = $8;
           if (!($8 > HEAPF32[$10 + 44 >> 2])) {
            break block48
           }
           break block49;
          }
          if (($11 | 0) < 3) {
           break block47
          }
          $8 = ar2GetTransMatHomography($56, $37, $40, $11, $28, 0, Math_fround(1.0));
          HEAPF32[$7 + 140 >> 2] = $8;
          if (!($8 > HEAPF32[$10 + 44 >> 2])) {
           break block48
          }
          $8 = ar2GetTransMatHomography($28, $37, $40, $11, $28, 1, Math_fround(.800000011920929));
          HEAPF32[$7 + 140 >> 2] = $8;
          if (!($8 > HEAPF32[$10 + 44 >> 2])) {
           break block48
          }
          $8 = ar2GetTransMatHomography($28, $37, $40, $11, $28, 1, Math_fround(.6000000238418579));
          HEAPF32[$7 + 140 >> 2] = $8;
          if (!($8 > HEAPF32[$10 + 44 >> 2])) {
           break block48
          }
          $8 = ar2GetTransMatHomography($28, $37, $40, $11, $28, 1, Math_fround(.4000000059604645));
          HEAPF32[$7 + 140 >> 2] = $8;
          if (!($8 > HEAPF32[$10 + 44 >> 2])) {
           break block48
          }
          $8 = ar2GetTransMatHomography($28, $37, $40, $11, $28, 1, Math_fround(0.0));
          HEAPF32[$7 + 140 >> 2] = $8;
          if ($8 > HEAPF32[$10 + 44 >> 2]) {
           break block49
          }
         }
         HEAP32[$24 + 152 >> 2] = HEAP32[$24 + 152 >> 2] + 1;
         $3 = 0;
         $11 = 0;
         while (1) if (($11 | 0) == 3) {
          while (1) if (($3 | 0) == 3) {
           $3 = 0;
           while (1) if (($3 | 0) == 3) {
            $1 = 0;
            break block3;
           } else {
            $1 = $3 << 4;
            $4 = $1 + $56 | 0;
            $5 = $1 + $28 | 0;
            $1 = 0;
            while (1) {
             if (($1 | 0) != 4) {
              $6 = $1 << 2;
              HEAPF32[$6 + $4 >> 2] = HEAPF32[$5 + $6 >> 2];
              $1 = $1 + 1 | 0;
              continue;
             }
             break;
            };
            $3 = $3 + 1 | 0;
            continue;
           };
          } else {
           $1 = $3 << 4;
           $4 = $1 + $67 | 0;
           $5 = $1 + $56 | 0;
           $1 = 0;
           while (1) {
            if (($1 | 0) != 4) {
             $6 = $1 << 2;
             HEAPF32[$6 + $4 >> 2] = HEAPF32[$5 + $6 >> 2];
             $1 = $1 + 1 | 0;
             continue;
            }
            break;
           };
           $3 = $3 + 1 | 0;
           continue;
          }
         } else {
          $1 = $11 << 4;
          $4 = $1 + $73 | 0;
          $5 = $1 + $67 | 0;
          $1 = 0;
          while (1) {
           if (($1 | 0) != 4) {
            $6 = $1 << 2;
            HEAPF32[$6 + $4 >> 2] = HEAPF32[$5 + $6 >> 2];
            $1 = $1 + 1 | 0;
            continue;
           }
           break;
          };
          $11 = $11 + 1 | 0;
          continue;
         };
        }
        $1 = -4;
        break block50;
       }
       $1 = -3;
      }
      HEAP32[$24 + 152 >> 2] = 0;
     }
     __stack_pointer = $12 + 80 | 0;
     $6 = $1;
     block51 : {
      if (!HEAPU8[$39 + 236 | 0]) {
       while (1) {
        if (($52 | 0) == 3) {
         break block51
        }
        $5 = ($7 + 144 | 0) + ($52 << 4) | 0;
        $1 = 0;
        while (1) {
         if (($1 | 0) != 4) {
          $4 = HEAP32[$7 + 204 >> 2];
          $3 = __stack_pointer - 16 | 0;
          __stack_pointer = $3;
          HEAP32[$3 + 8 >> 2] = 28033;
          HEAP32[$3 + 12 >> 2] = $4;
          HEAP32[$3 + 4 >> 2] = $3 + 8;
          HEAP32[$3 >> 2] = $3 + 12;
          $15 = HEAP32[HEAP32[$3 >> 2] >> 2];
          $13 = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
          $4 = __stack_pointer - 16 | 0;
          __stack_pointer = $4;
          if (!(HEAP8[78204] & 1)) {
           $16 = _emval_create_invoker(2, 37852, 1) | 0;
           HEAP8[78204] = 1;
           HEAP32[19550] = $16;
          }
          HEAPF32[$4 + 8 >> 2] = HEAPF32[$5 + ($1 << 2) >> 2];
          HEAP32[$4 + 4 >> 2] = 0;
          +_emval_invoke(HEAP32[19550], $15 | 0, $13 | 0, $4 + 4 | 0, $4 + 8 | 0);
          HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2];
          emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($4);
          __stack_pointer = $4 + 16 | 0;
          __stack_pointer = $3 + 16 | 0;
          $1 = $1 + 1 | 0;
          continue;
         }
         break;
        };
        $52 = $52 + 1 | 0;
        continue;
       }
      }
      $1 = __stack_pointer - 16 | 0;
      __stack_pointer = $1;
      $5 = $7 + 144 | 0;
      $3 = $7 + 192 | 0;
      $4 = $7 + 32 | 0;
      while (1) {
       if (($3 | 0) != ($5 | 0)) {
        HEAPF64[$4 >> 3] = HEAPF32[$5 >> 2];
        $4 = $4 + 8 | 0;
        $5 = $5 + 4 | 0;
        continue;
       }
       break;
      };
      HEAP32[$1 + 12 >> 2] = $4;
      HEAP32[$1 + 8 >> 2] = $3;
      __stack_pointer = $1 + 16 | 0;
      $1 = $6 >>> 31 | 0;
      $3 = __stack_pointer + -64 | 0;
      __stack_pointer = $3;
      $4 = HEAP32[$39 + 240 >> 2];
      if ($4) {
       $9 = HEAPF64[$7 + 32 >> 3];
       $14 = HEAPF64[$7 + 72 >> 3];
       $23 = HEAPF64[$7 + 112 >> 3];
       $25 = $9 + $14 + $23 + 1.0;
       block52 : {
        if ($25 > .0001) {
         $9 = Math_sqrt($25);
         $9 = $9 + $9;
         HEAPF64[$3 + 32 >> 3] = (HEAPF64[$7 + 80 >> 3] - HEAPF64[$7 + 104 >> 3]) / $9;
         HEAPF64[$3 + 40 >> 3] = (HEAPF64[$7 + 96 >> 3] - HEAPF64[$7 + 48 >> 3]) / $9;
         HEAPF64[$3 + 48 >> 3] = (HEAPF64[$7 + 40 >> 3] - HEAPF64[$7 + 64 >> 3]) / $9;
         $9 = $9 * .25;
         break block52;
        }
        if (!(!($9 > $14) | !($9 > $23))) {
         $9 = Math_sqrt($9 + 1.0 - $14 - $23);
         $9 = $9 + $9;
         HEAPF64[$3 + 32 >> 3] = $9 * .25;
         HEAPF64[$3 + 40 >> 3] = (HEAPF64[$7 + 40 >> 3] + HEAPF64[$7 + 64 >> 3]) / $9;
         HEAPF64[$3 + 48 >> 3] = (HEAPF64[$7 + 96 >> 3] + HEAPF64[$7 + 48 >> 3]) / $9;
         $9 = (HEAPF64[$7 + 80 >> 3] - HEAPF64[$7 + 104 >> 3]) / $9;
         break block52;
        }
        if ($14 > $23) {
         $25 = HEAPF64[$7 + 64 >> 3];
         $32 = HEAPF64[$7 + 40 >> 3];
         $9 = Math_sqrt($14 + 1.0 - $9 - $23);
         $9 = $9 + $9;
         HEAPF64[$3 + 40 >> 3] = $9 * .25;
         HEAPF64[$3 + 32 >> 3] = ($32 + $25) / $9;
         HEAPF64[$3 + 48 >> 3] = (HEAPF64[$7 + 80 >> 3] + HEAPF64[$7 + 104 >> 3]) / $9;
         $9 = (HEAPF64[$7 + 96 >> 3] - HEAPF64[$7 + 48 >> 3]) / $9;
         break block52;
        }
        $9 = Math_sqrt($23 + 1.0 - $9 - $14);
        $9 = $9 + $9;
        HEAPF64[$3 + 32 >> 3] = (HEAPF64[$7 + 96 >> 3] + HEAPF64[$7 + 48 >> 3]) / $9;
        $14 = HEAPF64[$7 + 104 >> 3];
        $23 = HEAPF64[$7 + 80 >> 3];
        HEAPF64[$3 + 48 >> 3] = $9 * .25;
        HEAPF64[$3 + 40 >> 3] = ($23 + $14) / $9;
        $9 = (HEAPF64[$7 + 40 >> 3] - HEAPF64[$7 + 64 >> 3]) / $9;
       }
       HEAPF64[$3 + 56 >> 3] = $9;
       HEAPF64[$3 >> 3] = HEAPF64[$7 + 56 >> 3];
       HEAPF64[$3 + 8 >> 3] = HEAPF64[$7 + 88 >> 3];
       HEAPF64[$3 + 16 >> 3] = HEAPF64[$7 + 120 >> 3];
       arUtilQuatNorm($3 + 32 | 0);
       block53 : {
        if ($1) {
         HEAPF64[$4 + 8 >> 3] = HEAPF64[$3 + 32 >> 3];
         HEAPF64[$4 + 16 >> 3] = HEAPF64[$3 + 40 >> 3];
         HEAPF64[$4 + 24 >> 3] = HEAPF64[$3 + 48 >> 3];
         HEAPF64[$4 + 32 >> 3] = HEAPF64[$3 + 56 >> 3];
         HEAPF64[$4 + 40 >> 3] = HEAPF64[$3 >> 3];
         HEAPF64[$4 + 48 >> 3] = HEAPF64[$3 + 8 >> 3];
         HEAPF64[$4 + 56 >> 3] = HEAPF64[$3 + 16 >> 3];
         break block53;
        }
        $9 = HEAPF64[$4 >> 3];
        $32 = 1.0 - $9;
        $14 = $32;
        $23 = $9;
        $46 = HEAPF64[$3 + 56 >> 3];
        $59 = HEAPF64[$4 + 32 >> 3];
        $42 = HEAPF64[$3 + 48 >> 3];
        $79 = HEAPF64[$4 + 24 >> 3];
        $43 = HEAPF64[$3 + 32 >> 3];
        $80 = HEAPF64[$4 + 8 >> 3];
        $49 = HEAPF64[$3 + 40 >> 3];
        $81 = HEAPF64[$4 + 16 >> 3];
        $25 = $46 * $59 + ($42 * $79 + ($43 * $80 + $49 * $81));
        if ($25 < 0.0) {
         $46 = -$46;
         HEAPF64[$3 + 56 >> 3] = $46;
         $42 = -$42;
         HEAPF64[$3 + 48 >> 3] = $42;
         $49 = -$49;
         HEAPF64[$3 + 40 >> 3] = $49;
         $43 = -$43;
         HEAPF64[$3 + 32 >> 3] = $43;
         $25 = -$25;
        }
        if (!($25 > .9995)) {
         wasm2js_scratch_store_f64(+$25);
         $1 = wasm2js_scratch_load_i32(1) | 0;
         $15 = wasm2js_scratch_load_i32(0) | 0;
         $5 = $1 & 2147483647;
         block54 : {
          if ($5 >>> 0 >= 1072693248) {
           $14 = ($1 | 0) > 0 | ($1 | 0) >= 0 ? 0.0 : 3.141592653589793;
           if (!($5 - 1072693248 | $15)) {
            break block54
           }
           $14 = 0.0 / ($25 - $25);
           break block54;
          }
          block55 : {
           if ($5 >>> 0 <= 1071644671) {
            $14 = 1.5707963267948966;
            if ($5 >>> 0 < 1012924417) {
             break block55
            }
            $14 = 6.123233995736766e-17 - $25 * R($25 * $25) - $25 + 1.5707963267948966;
            break block54;
           }
           if (($1 | 0) < 0) {
            $14 = ($25 + 1.0) * .5;
            $23 = Math_sqrt($14);
            $14 = 1.5707963267948966 - ($23 + ($23 * R($14) + -6.123233995736766e-17));
            $14 = $14 + $14;
            break block54;
           }
           $14 = (1.0 - $25) * .5;
           $23 = Math_sqrt($14);
           $25 = $23 * R($14);
           wasm2js_scratch_store_f64(+$23);
           $1 = wasm2js_scratch_load_i32(1) | 0;
           wasm2js_scratch_load_i32(0) | 0;
           wasm2js_scratch_store_i32(0, 0);
           wasm2js_scratch_store_i32(1, $1 | 0);
           $70 = $14;
           $14 = +wasm2js_scratch_load_f64();
           $14 = $25 + ($70 - $14 * $14) / ($23 + $14) + $14;
           $14 = $14 + $14;
          }
         }
         $23 = sin($9 * $14);
         $25 = sin($14);
         $23 = $23 / $25;
         $14 = sin($32 * $14) / $25;
        }
        HEAPF64[$4 + 32 >> 3] = $46 * $23 + $59 * $14;
        HEAPF64[$4 + 24 >> 3] = $42 * $23 + $79 * $14;
        HEAPF64[$4 + 16 >> 3] = $49 * $23 + $81 * $14;
        HEAPF64[$4 + 8 >> 3] = $43 * $23 + $80 * $14;
        arUtilQuatNorm($4 + 8 | 0);
        HEAPF64[$4 + 40 >> 3] = HEAPF64[$3 >> 3] * $9 + $32 * HEAPF64[$4 + 40 >> 3];
        HEAPF64[$4 + 48 >> 3] = HEAPF64[$3 + 8 >> 3] * $9 + $32 * HEAPF64[$4 + 48 >> 3];
        HEAPF64[$4 + 56 >> 3] = HEAPF64[$3 + 16 >> 3] * $9 + $32 * HEAPF64[$4 + 56 >> 3];
       }
       $9 = HEAPF64[$4 + 8 >> 3];
       $14 = HEAPF64[$4 + 16 >> 3];
       $25 = $14 + $14;
       $42 = $9 * $25;
       $32 = HEAPF64[$4 + 32 >> 3];
       $46 = HEAPF64[$4 + 24 >> 3];
       $23 = $46 + $46;
       $43 = $32 * $23;
       HEAPF64[$7 + 64 >> 3] = $42 - $43;
       $49 = $9 * $23;
       $59 = $25 * $32;
       HEAPF64[$7 + 96 >> 3] = $49 + $59;
       HEAPF64[$7 + 40 >> 3] = $42 + $43;
       $42 = $14 * $23;
       $70 = $32;
       $32 = $9 + $9;
       $43 = $70 * $32;
       HEAPF64[$7 + 104 >> 3] = $42 - $43;
       HEAPF64[$7 + 48 >> 3] = $49 - $59;
       HEAPF64[$7 + 80 >> 3] = $42 + $43;
       $9 = $9 * $32;
       $14 = $14 * $25;
       HEAPF64[$7 + 112 >> 3] = 1.0 - ($9 + $14);
       $32 = $9;
       $9 = $46 * $23;
       HEAPF64[$7 + 72 >> 3] = 1.0 - ($32 + $9);
       HEAPF64[$7 + 32 >> 3] = 1.0 - ($14 + $9);
       HEAPF64[$7 + 56 >> 3] = HEAPF64[$4 + 40 >> 3];
       HEAPF64[$7 + 88 >> 3] = HEAPF64[$4 + 48 >> 3];
       HEAPF64[$7 + 120 >> 3] = HEAPF64[$4 + 56 >> 3];
       $1 = 0;
      } else {
       $1 = -1
      }
      __stack_pointer = $3 - -64 | 0;
      if (($1 | 0) < 0) {
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($7 + 20 | 0, 33480);
       $1 = __stack_pointer - 16 | 0;
       __stack_pointer = $1;
       $4 = HEAP32[$3 >> 2];
       $5 = HEAP8[$3 + 11 | 0];
       HEAP32[$1 + 4 >> 2] = HEAP32[18615];
       HEAP32[$1 + 8 >> 2] = HEAP32[18616];
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$1 >> 2] = ($5 | 0) < 0 ? $4 : $3;
       emscripten_asm_const_int(76825, 24350, $1 | 0) | 0;
       __stack_pointer = $1 + 16 | 0;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
      }
      label46 : while (1) {
       if (($52 | 0) == 3) {
        break block51
       }
       $5 = ($7 + 32 | 0) + ($52 << 5) | 0;
       $1 = 0;
       while (1) if (($1 | 0) == 4) {
        $52 = $52 + 1 | 0;
        continue label46;
       } else {
        $4 = HEAP32[$7 + 204 >> 2];
        $3 = __stack_pointer - 16 | 0;
        __stack_pointer = $3;
        HEAP32[$3 + 8 >> 2] = 28033;
        HEAP32[$3 + 12 >> 2] = $4;
        HEAP32[$3 + 4 >> 2] = $3 + 8;
        HEAP32[$3 >> 2] = $3 + 12;
        $15 = HEAP32[HEAP32[$3 >> 2] >> 2];
        $13 = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
        $4 = __stack_pointer - 16 | 0;
        __stack_pointer = $4;
        if (!(HEAP8[78196] & 1)) {
         $16 = _emval_create_invoker(2, 37844, 1) | 0;
         HEAP8[78196] = 1;
         HEAP32[19548] = $16;
        }
        HEAPF64[$4 + 8 >> 3] = HEAPF64[$5 + ($1 << 3) >> 3];
        HEAP32[$4 + 4 >> 2] = 0;
        +_emval_invoke(HEAP32[19548], $15 | 0, $13 | 0, $4 + 4 | 0, $4 + 8 | 0);
        HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2];
        emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($4);
        __stack_pointer = $4 + 16 | 0;
        __stack_pointer = $3 + 16 | 0;
        $1 = $1 + 1 | 0;
        continue;
       };
      };
     }
     if (($6 | 0) < 0) {
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($7 + 32 | 0, 30799);
      webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($1, $6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
      $1 = -2;
      HEAP32[$39 + 264 >> 2] = -2;
      break block2;
     }
     $1 = HEAP32[(HEAP32[$39 + 264 >> 2] << 2) + $71 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$39 + 268 >> 2] - 1;
     HEAP32[$7 >> 2] = $1;
     arLog(0, 1, 34473, $7);
     $1 = HEAP32[$39 + 264 >> 2];
    }
    $3 = $7 + 208 | 0;
    void_20emscripten__val__set_char_20_5b3_5d_2c_20int__28char_20const_20_28__29_20_5b3_5d_2c_20int_20const__29($3, 29391, $7 + 216 | 0);
    block56 : {
     if (($1 | 0) == ($2 | 0)) {
      $1 = __stack_pointer - 16 | 0;
      __stack_pointer = $1;
      $5 = HEAP32[$3 + 4 >> 2];
      $6 = emscripten__val__val_28char_20const__29($1 + 8 | 0, 27072);
      $15 = HEAP32[$6 + 4 >> 2];
      $2 = __stack_pointer - 16 | 0;
      __stack_pointer = $2;
      if (!(HEAP8[78220] & 1)) {
       $4 = _emval_create_invoker(2, 37868, 3) | 0;
       HEAP8[78220] = 1;
       HEAP32[19554] = $4;
      }
      HEAPF32[$2 + 8 >> 2] = HEAPF32[$7 + 140 >> 2];
      HEAP32[$2 + 4 >> 2] = 0;
      $9 = +_emval_invoke(HEAP32[19554], 0, 0, $2 + 4 | 0, $2 + 8 | 0);
      HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$1 + 4 >> 2] = $9 < 4294967295.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
      HEAP32[$1 >> 2] = 78476;
      emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($2);
      __stack_pointer = $2 + 16 | 0;
      _emval_set_property($5 | 0, $15 | 0, HEAP32[$1 + 4 >> 2]);
      emscripten__val___val_28_29($1);
      emscripten__val___val_28_29($6);
      __stack_pointer = $1 + 16 | 0;
      HEAP32[$7 + 32 >> 2] = 1;
      void_20emscripten__val__set_char_20_5b3_5d_2c_20int__28char_20const_20_28__29_20_5b3_5d_2c_20int_20const__29($3, 29331, $7 + 32 | 0);
      void_20emscripten__val__set_char_20_5b5_5d_2c_20emscripten__val__28char_20const_20_28__29_20_5b5_5d_2c_20emscripten__val_20const__29($3, $7 + 200 | 0);
      break block56;
     }
     HEAP32[$7 + 32 >> 2] = -1;
     $3 = $7 + 208 | 0;
     $1 = $7 + 32 | 0;
     void_20emscripten__val__set_char_20_5b3_5d_2c_20int__28char_20const_20_28__29_20_5b3_5d_2c_20int_20const__29($3, 27072, $1);
     HEAP32[$7 + 32 >> 2] = 0;
     void_20emscripten__val__set_char_20_5b3_5d_2c_20int__28char_20const_20_28__29_20_5b3_5d_2c_20int_20const__29($3, 29331, $1);
     HEAP32[$7 + 24 >> 2] = 78068;
     HEAP32[$7 + 20 >> 2] = 12;
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     if (!(HEAP8[78228] & 1)) {
      $4 = _emval_create_invoker(2, 37876, 3) | 0;
      HEAP8[78228] = 1;
      HEAP32[19556] = $4;
     }
     $4 = HEAP32[$7 + 24 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$7 + 20 >> 2];
     HEAP32[$2 + 12 >> 2] = $4;
     HEAP32[$2 + 4 >> 2] = 0;
     $9 = +_emval_invoke(HEAP32[19556], 0, 0, $2 + 4 | 0, $2 + 8 | 0);
     HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 4 >> 2] = $9 < 4294967295.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     HEAP32[$1 >> 2] = 78476;
     emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($2);
     __stack_pointer = $2 + 16 | 0;
     void_20emscripten__val__set_char_20_5b5_5d_2c_20emscripten__val__28char_20const_20_28__29_20_5b5_5d_2c_20emscripten__val_20const__29($3, $1);
     emscripten__val___val_28_29($1);
    }
    HEAP32[$0 >> 2] = HEAP32[$7 + 208 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$7 + 212 >> 2];
    HEAP32[$7 + 212 >> 2] = 0;
   }
   emscripten__val___val_28_29($7 + 200 | 0);
   emscripten__val___val_28_29($7 + 208 | 0);
  }
  __stack_pointer = $7 + 224 | 0;
 }
 
 function emscripten__val__array_28_29($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = _emval_new_array() | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$0 >> 2] = 78476;
 }
 
 function void_20emscripten__val__set_char_20_5b3_5d_2c_20int__28char_20const_20_28__29_20_5b3_5d_2c_20int_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $6 = HEAP32[$0 + 4 >> 2];
  $5 = emscripten__val__val_28char_20const__29($3 + 8 | 0, $1);
  $7 = HEAP32[$5 + 4 >> 2];
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  if (!(HEAP8[78212] & 1)) {
   $1 = _emval_create_invoker(2, 37860, 3) | 0;
   HEAP8[78212] = 1;
   HEAP32[19552] = $1;
  }
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = 0;
  $4 = +_emval_invoke(HEAP32[19552], 0, 0, $0 + 4 | 0, $0 + 8 | 0);
  HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$3 + 4 >> 2] = $4 < 4294967295.0 & $4 >= 0.0 ? ~~$4 >>> 0 : 0;
  HEAP32[$3 >> 2] = 78476;
  emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0);
  __stack_pointer = $0 + 16 | 0;
  _emval_set_property($6 | 0, $7 | 0, HEAP32[$3 + 4 >> 2]);
  emscripten__val___val_28_29($3);
  emscripten__val___val_28_29($5);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function void_20emscripten__val__set_char_20_5b5_5d_2c_20emscripten__val__28char_20const_20_28__29_20_5b5_5d_2c_20emscripten__val_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[$0 + 4 >> 2];
  $0 = emscripten__val__val_28char_20const__29($2 + 8 | 0, 28285);
  _emval_set_property($3 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
  emscripten__val___val_28_29($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__val_20emscripten__val__internalCallWithPolicy__28emscripten__internal__EM_INVOKER_KIND_293_2c_20emscripten__internal__WithPolicies___2c_20emscripten__val_2c_20int___28emscripten___EM_VAL__2c_20char_20const__2c_20int__29($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (!(HEAP8[78188] & 1)) {
   $4 = _emval_create_invoker(2, 36644, 3) | 0;
   HEAP8[78188] = 1;
   HEAP32[19546] = $4;
  }
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = +_emval_invoke(HEAP32[19546], 0, 0, $2 + 4 | 0, $2 + 8 | 0);
  HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $3 < 4294967295.0 & $3 >= 0.0 ? ~~$3 >>> 0 : 0;
  HEAP32[$0 >> 2] = 78476;
  emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($2);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__val__val_28char_20const__29($0, $1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = _emval_new_cstring($1 | 0) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$0 >> 2] = 78476;
  return $0;
 }
 
 function detectNFTMarker($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = Math_fround(0), $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = Math_fround(0), $43 = Math_fround(0), $44 = 0, $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = 0.0, $49 = 0, $50 = 0.0, $51 = Math_fround(0), $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = Math_fround(0), $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = Math_fround(0), $67 = 0.0, $68 = Math_fround(0), $69 = Math_fround(0), $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = Math_fround(0), $80 = Math_fround(0), $81 = Math_fround(0), $82 = Math_fround(0), $83 = Math_fround(0), $84 = Math_fround(0), $85 = Math_fround(0), $86 = Math_fround(0), $87 = Math_fround(0), $88 = Math_fround(0), $89 = Math_fround(0), $90 = Math_fround(0), $91 = Math_fround(0), $92 = Math_fround(0), $93 = Math_fround(0), $94 = Math_fround(0), $95 = Math_fround(0), $96 = Math_fround(0), $97 = Math_fround(0), $98 = Math_fround(0), $99 = Math_fround(0), $100 = Math_fround(0), $101 = Math_fround(0), $102 = Math_fround(0), $103 = Math_fround(0), $104 = Math_fround(0), $105 = Math_fround(0), $106 = Math_fround(0), $107 = Math_fround(0), $108 = Math_fround(0), $109 = Math_fround(0), $110 = Math_fround(0), $111 = Math_fround(0), $112 = Math_fround(0), $113 = Math_fround(0), $114 = Math_fround(0), $115 = Math_fround(0), $116 = Math_fround(0), $117 = Math_fround(0), $118 = Math_fround(0), $119 = Math_fround(0), $120 = Math_fround(0), $121 = Math_fround(0), $122 = Math_fround(0), $123 = Math_fround(0), $124 = Math_fround(0), $125 = Math_fround(0), $126 = Math_fround(0), $127 = Math_fround(0), $128 = Math_fround(0), $129 = Math_fround(0), $130 = Math_fround(0), $131 = Math_fround(0), $132 = Math_fround(0), $133 = Math_fround(0), $134 = Math_fround(0), $135 = Math_fround(0), $136 = Math_fround(0), $137 = Math_fround(0), $138 = Math_fround(0), $139 = Math_fround(0), $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = Math_fround(0), $146 = Math_fround(0), $147 = Math_fround(0), $148 = Math_fround(0), $149 = Math_fround(0), $150 = Math_fround(0), $151 = Math_fround(0), $152 = Math_fround(0), $153 = 0.0, $154 = 0.0, $155 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $61 = __stack_pointer + -64 | 0;
  __stack_pointer = $61;
  HEAP32[$61 + 60 >> 2] = $0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $61 + 60 | 0)) {
    $1 = -1;
    break block;
   }
   $64 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($61 + 60 | 0);
   HEAP32[$61 + 56 >> 2] = 0;
   $1 = -1;
   HEAP32[$61 + 52 >> 2] = -1;
   if (HEAP32[$64 + 264 >> 2] != -2) {
    break block
   }
   $54 = __stack_pointer - 32 | 0;
   __stack_pointer = $54;
   __inlined_func$kpmMatching$6 : {
    block19 : {
     block196 : {
      $27 = HEAP32[$64 + 224 >> 2];
      $44 = HEAP32[$64 + 204 >> 2];
      block0 : {
       if (!($44 ? $27 : 0)) {
        arLog(0, 3, 11026, 0);
        break block0;
       }
       $18 = HEAP32[$27 + 16 >> 2];
       $9 = HEAP32[$27 + 12 >> 2];
       block1 : {
        $71 = HEAP32[$27 + 20 >> 2];
        if (($71 | 0) == 1) {
         break block1
        }
        $2 = $44;
        block9 : {
         block7 : {
          block4 : {
           switch ($71 - 1 | 0) {
           case 0:
            HEAP32[$54 + 28 >> 2] = $9;
            HEAP32[$54 + 24 >> 2] = $18;
            $0 = Math_imul($9, $18);
            $44 = emscripten_builtin_malloc($0);
            if (!$44) {
             break block7
            }
            if (!$0) {
             break block9
            }
            wasm2js_memory_copy($44, $2, $0);
            break block9;
           case 4:
            $0 = ($9 | 0) / 3 | 0;
            $14 = $0 << 1;
            HEAP32[$54 + 28 >> 2] = $14;
            $1 = ($18 | 0) / 3 | 0;
            $4 = $1 << 1;
            HEAP32[$54 + 24 >> 2] = $4;
            $44 = emscripten_builtin_malloc(Math_imul($4, $14));
            if (!$44) {
             break block7
            }
            $13 = ($1 | 0) > 0 ? $1 : 0;
            $17 = ($0 | 0) > 0 ? $0 : 0;
            $0 = $44;
            $1 = $0;
            while (1) {
             if (($8 | 0) == ($13 | 0)) {
              break block9
             }
             $0 = $0 + $14 | 0;
             $4 = Math_imul($8, 3);
             $5 = $2 + Math_imul($4, $9) | 0;
             $10 = $2 + Math_imul($9, $4 + 2 | 0) | 0;
             $6 = $2 + Math_imul($9, $4 + 1 | 0) | 0;
             $4 = 0;
             while (1) {
              if (($4 | 0) != ($17 | 0)) {
               HEAP8[$1 | 0] = (HEAPU8[$5 | 0] + (HEAPU8[$5 + 1 | 0] >>> 1 | 0) + (HEAPU8[$6 | 0] >>> 1) + (HEAPU8[$6 + 1 | 0] >>> 2) << 2 >>> 0) / 9;
               HEAP8[$0 | 0] = (HEAPU8[$10 | 0] + ((HEAPU8[$6 + 1 | 0] >>> 2) + (HEAPU8[$6 | 0] >>> 1) | 0) + (HEAPU8[$10 + 1 | 0] >>> 1) << 2 >>> 0) / 9;
               HEAP8[$1 + 1 | 0] = (HEAPU8[$5 + 2 | 0] + (HEAPU8[$5 + 1 | 0] >>> 1 | 0) + (HEAPU8[$6 + 1 | 0] >>> 2) + (HEAPU8[$6 + 2 | 0] >>> 1) << 2 >>> 0) / 9;
               HEAP8[$0 + 1 | 0] = (HEAPU8[$10 + 2 | 0] + ((HEAPU8[$6 + 2 | 0] >>> 1) + (HEAPU8[$6 + 1 | 0] >>> 2) + (HEAPU8[$10 + 1 | 0] >>> 1) | 0) << 2 >>> 0) / 9;
               $4 = $4 + 1 | 0;
               $10 = $10 + 3 | 0;
               $6 = $6 + 3 | 0;
               $5 = $5 + 3 | 0;
               $0 = $0 + 2 | 0;
               $1 = $1 + 2 | 0;
               continue;
              }
              break;
             };
             $8 = $8 + 1 | 0;
             $1 = $1 + $14 | 0;
             continue;
            };
           case 1:
            $0 = ($9 | 0) / 2 | 0;
            HEAP32[$54 + 28 >> 2] = $0;
            $1 = ($18 | 0) / 2 | 0;
            HEAP32[$54 + 24 >> 2] = $1;
            $44 = emscripten_builtin_malloc(Math_imul($0, $1));
            if (!$44) {
             break block7
            }
            $1 = ($1 | 0) > 0 ? $1 : 0;
            $14 = ($0 | 0) > 0 ? $0 : 0;
            $0 = $44;
            while (1) {
             if (($1 | 0) == ($4 | 0)) {
              break block9
             }
             $5 = $4 << 1;
             $6 = $2 + Math_imul($5, $9) | 0;
             $5 = $2 + Math_imul($9, $5 | 1) | 0;
             $10 = 0;
             while (1) {
              if (($10 | 0) != ($14 | 0)) {
               HEAP8[$0 | 0] = HEAPU8[$5 + 1 | 0] + (HEAPU8[$5 | 0] + (HEAPU8[$6 + 1 | 0] + HEAPU8[$6 | 0] | 0) | 0) >>> 2;
               $10 = $10 + 1 | 0;
               $5 = $5 + 2 | 0;
               $6 = $6 + 2 | 0;
               $0 = $0 + 1 | 0;
               continue;
              }
              break;
             };
             $4 = $4 + 1 | 0;
             continue;
            };
           case 3:
            $0 = ($9 | 0) / 3 | 0;
            HEAP32[$54 + 28 >> 2] = $0;
            $1 = ($18 | 0) / 3 | 0;
            HEAP32[$54 + 24 >> 2] = $1;
            $44 = emscripten_builtin_malloc(Math_imul($0, $1));
            if (!$44) {
             break block7
            }
            $14 = ($1 | 0) > 0 ? $1 : 0;
            $13 = ($0 | 0) > 0 ? $0 : 0;
            $1 = $44;
            while (1) {
             if (($4 | 0) == ($14 | 0)) {
              break block9
             }
             $0 = Math_imul($4, 3);
             $6 = $2 + Math_imul($0, $9) | 0;
             $5 = $2 + Math_imul($9, $0 + 2 | 0) | 0;
             $10 = $2 + Math_imul($9, $0 + 1 | 0) | 0;
             $0 = 0;
             while (1) {
              if (($0 | 0) != ($13 | 0)) {
               HEAP8[$1 | 0] = (HEAPU8[$5 + 2 | 0] + (HEAPU8[$5 + 1 | 0] + (HEAPU8[$5 | 0] + (HEAPU8[$10 + 2 | 0] + (HEAPU8[$10 + 1 | 0] + (HEAPU8[$10 | 0] + (HEAPU8[$6 + 2 | 0] + (HEAPU8[$6 + 1 | 0] + HEAPU8[$6 | 0] | 0) | 0) | 0) | 0) | 0) | 0) | 0) >>> 0) / 9;
               $0 = $0 + 1 | 0;
               $5 = $5 + 3 | 0;
               $10 = $10 + 3 | 0;
               $6 = $6 + 3 | 0;
               $1 = $1 + 1 | 0;
               continue;
              }
              break;
             };
             $4 = $4 + 1 | 0;
             continue;
            };
           default:
            break block4;
           };
          }
          $0 = ($9 | 0) / 4 | 0;
          HEAP32[$54 + 28 >> 2] = $0;
          $1 = ($18 | 0) / 4 | 0;
          HEAP32[$54 + 24 >> 2] = $1;
          $44 = emscripten_builtin_malloc(Math_imul($0, $1));
          if (!$44) {
           break block7
          }
          $14 = ($1 | 0) > 0 ? $1 : 0;
          $13 = ($0 | 0) > 0 ? $0 : 0;
          $4 = $44;
          while (1) {
           if (($8 | 0) == ($14 | 0)) {
            break block9
           }
           $0 = $8 << 2;
           $6 = $2 + Math_imul($0, $9) | 0;
           $5 = $2 + Math_imul($9, $0 | 3) | 0;
           $10 = $2 + Math_imul($9, $0 | 2) | 0;
           $0 = $2 + Math_imul($9, $0 | 1) | 0;
           $1 = 0;
           while (1) {
            if (($1 | 0) != ($13 | 0)) {
             HEAP8[$4 | 0] = HEAPU8[$5 + 3 | 0] + (HEAPU8[$5 + 2 | 0] + (HEAPU8[$5 + 1 | 0] + (HEAPU8[$5 | 0] + (HEAPU8[$10 + 3 | 0] + (HEAPU8[$10 + 2 | 0] + (HEAPU8[$10 + 1 | 0] + (HEAPU8[$10 | 0] + (HEAPU8[$0 + 3 | 0] + (HEAPU8[$0 + 2 | 0] + (HEAPU8[$0 + 1 | 0] + (HEAPU8[$0 | 0] + (HEAPU8[$6 + 3 | 0] + (HEAPU8[$6 + 2 | 0] + (HEAPU8[$6 + 1 | 0] + HEAPU8[$6 | 0] | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) >>> 4;
             $1 = $1 + 1 | 0;
             $5 = $5 + 4 | 0;
             $10 = $10 + 4 | 0;
             $0 = $0 + 4 | 0;
             $6 = $6 + 4 | 0;
             $4 = $4 + 1 | 0;
             continue;
            }
            break;
           };
           $8 = $8 + 1 | 0;
           continue;
          };
         }
         arLog(0, 3, 1733, 0);
         exit(1);
         wasm2js_trap();
        }
        if ($44) {
         break block1
        }
        break block0;
       }
       $0 = HEAP32[$27 >> 2];
       $75 = __stack_pointer - 32 | 0;
       __stack_pointer = $75;
       $58 = vision__Image__Image_28unsigned_20char__2c_20vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29($75, $44, 1, $9, $18, $9);
       $76 = __stack_pointer - 32 | 0;
       __stack_pointer = $76;
       $14 = HEAP32[HEAP32[$0 >> 2] >> 2];
       $13 = $14 + 92 | 0;
       $1 = HEAP32[$14 + 96 >> 2];
       block11 : {
        block10 : {
         if (($1 | 0) == HEAP32[$14 + 100 >> 2]) {
          $4 = HEAP32[$58 + 4 >> 2];
          break block10;
         }
         $4 = HEAP32[$58 + 4 >> 2];
         $0 = HEAP32[$1 + 4 >> 2];
         if (($4 | 0) != ($0 | 0)) {
          break block10
         }
         $4 = $0;
         if (HEAP32[$1 + 8 >> 2] == HEAP32[$58 + 8 >> 2]) {
          break block11
         }
        }
        $1 = HEAP32[$58 + 8 >> 2];
        $5 = 0;
        while (1) {
         if (!(($4 | 0) < 8 | ($1 | 0) < 8)) {
          $5 = $5 + 1 | 0;
          $1 = $1 >> 1;
          $4 = $4 >> 1;
          continue;
         }
         break;
        };
        $2 = HEAP32[$58 + 4 >> 2];
        $9 = HEAP32[$58 + 8 >> 2];
        $1 = 0;
        HEAP32[$13 + 24 >> 2] = 1068827891;
        HEAP32[$13 + 28 >> 2] = 1077455420;
        HEAP32[$13 + 20 >> 2] = 3;
        HEAP32[$13 + 16 >> 2] = $5;
        std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image____resize_28unsigned_20long_29($13 + 4 | 0, Math_imul($5, 3));
        $0 = ($5 | 0) > 0 ? $5 : 0;
        label9 : while (1) {
         if (($0 | 0) != ($1 | 0)) {
          $5 = $9 >>> $1 | 0;
          $18 = $2 >>> $1 | 0;
          $4 = 0;
          while (1) {
           $6 = HEAP32[$13 + 20 >> 2];
           if ($6 >>> 0 <= $4 >>> 0) {
            $1 = $1 + 1 | 0;
            continue label9;
           } else {
            vision__Image__alloc_28vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29((HEAP32[$13 + 4 >> 2] + (Math_imul($1, $6) << 5) | 0) + ($4 << 5) | 0, 2, $18, $5, 1);
            $4 = $4 + 1 | 0;
            continue;
           }
          };
         }
         break;
        };
        $0 = $13 + 32 | 0;
        $1 = HEAP32[$0 >> 2];
        $5 = Math_imul($2, $9);
        $2 = HEAP32[$0 + 4 >> 2] - $1 >> 1;
        block13 : {
         if ($5 >>> 0 > $2 >>> 0) {
          $18 = __stack_pointer - 32 | 0;
          __stack_pointer = $18;
          $9 = $5 - $2 | 0;
          $1 = HEAP32[$0 + 4 >> 2];
          block12 : {
           if ($9 >>> 0 <= HEAP32[$0 + 8 >> 2] - $1 >> 1 >>> 0) {
            $4 = HEAP32[$0 + 4 >> 2];
            $1 = $4 + ($9 << 1) | 0;
            while (1) {
             if (($1 | 0) == ($4 | 0)) {
              HEAP32[$0 + 4 >> 2] = $1
             } else {
              HEAP16[$4 >> 1] = 0;
              $4 = $4 + 2 | 0;
              continue;
             }
             break;
            };
            break block12;
           }
           $1 = $9 + ($1 - HEAP32[$0 >> 2] >> 1) | 0;
           if (($1 | 0) < 0) {
            std____2____throw_length_error_5babi_ne200100_5d_28char_20const__29(12874);
            wasm2js_trap();
           }
           $2 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
           $1 = $2 >>> 0 >= 2147483646 ? 2147483647 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
           $6 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 1;
           $4 = 0;
           $2 = $18 + 12 | 0;
           HEAP32[$2 + 16 >> 2] = $0;
           HEAP32[$2 + 12 >> 2] = 0;
           if ($1) {
            if (($1 | 0) < 0) {
             std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
             wasm2js_trap();
            }
            $4 = operator_20new_28unsigned_20long_29($1 << 1);
           }
           HEAP32[$2 >> 2] = $4;
           $6 = ($6 << 1) + $4 | 0;
           HEAP32[$2 + 8 >> 2] = $6;
           HEAP32[$2 + 12 >> 2] = ($1 << 1) + $4;
           HEAP32[$2 + 4 >> 2] = $6;
           $4 = HEAP32[$2 + 8 >> 2];
           $1 = $4 + ($9 << 1) | 0;
           while (1) {
            if (($1 | 0) != ($4 | 0)) {
             HEAP16[$4 >> 1] = 0;
             $4 = $4 + 2 | 0;
             continue;
            }
            break;
           };
           HEAP32[$2 + 8 >> 2] = $1;
           std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $2);
           $0 = HEAP32[$2 + 4 >> 2];
           $1 = HEAP32[$2 + 8 >> 2];
           while (1) {
            if (($0 | 0) != ($1 | 0)) {
             $1 = $1 - 2 | 0;
             HEAP32[$2 + 8 >> 2] = $1;
             continue;
            }
            break;
           };
           $0 = HEAP32[$2 >> 2];
           if ($0) {
            emscripten_builtin_free($0)
           }
          }
          __stack_pointer = $18 + 32 | 0;
          break block13;
         }
         if ($2 >>> 0 > $5 >>> 0) {
          HEAP32[$0 + 4 >> 2] = $1 + ($5 << 1)
         }
        }
        std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($13 + 44 | 0, $5);
        std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($13 + 56 | 0, $5);
       }
       $18 = vision__ScopedTimer__ScopedTimer_28char_20const__29($76, 4133);
       block18 : {
        block17 : {
         block16 : {
          block15 : {
           block14 : {
            if (HEAP32[$58 >> 2] == 1) {
             if (HEAP32[$58 + 16 >> 2] != 1) {
              break block14
             }
             $0 = HEAP32[$13 + 4 >> 2];
             if ((Math_imul(HEAP32[$13 + 20 >> 2], HEAP32[$13 + 16 >> 2]) | 0) != HEAP32[$13 + 8 >> 2] - $0 >> 5) {
              break block15
             }
             if (HEAP32[$58 + 4 >> 2] != HEAP32[$0 + 4 >> 2]) {
              break block16
             }
             if (HEAP32[$58 + 8 >> 2] != HEAP32[$0 + 8 >> 2]) {
              break block17
             }
             vision__BinomialPyramid32f__apply_filter_28vision__Image__2c_20vision__Image_20const__29($13, $0, $58);
             $0 = HEAP32[$13 + 4 >> 2];
             vision__BinomialPyramid32f__apply_filter_28vision__Image__2c_20vision__Image_20const__29($13, $0 + 32 | 0, $0);
             $0 = HEAP32[$13 + 4 >> 2];
             vision__BinomialPyramid32f__apply_filter_twice_28vision__Image__2c_20vision__Image_20const__29($13, $0 - -64 | 0, $0 + 32 | 0);
             $4 = 1;
             while (1) {
              if (HEAPU32[$13 + 16 >> 2] <= $4 >>> 0) {
               break block18
              }
              $0 = HEAP32[$13 + 4 >> 2] + (Math_imul(HEAP32[$13 + 20 >> 2], $4) << 5) | 0;
              $10 = HEAP32[$0 + 24 >> 2];
              $6 = HEAP32[$0 - 8 >> 2];
              $1 = 0;
              $9 = HEAP32[$0 - 28 >> 2];
              $8 = $9 << 1;
              $17 = HEAP32[$0 - 24 >> 2] >>> 1 | 0;
              $15 = $9 >>> 1 | 0;
              label14 : while (1) {
               if (($1 | 0) != ($17 | 0)) {
                $2 = $6 + (Math_imul($1, $8) << 2) | 0;
                $5 = $2 + ($9 << 2) | 0;
                $0 = 0;
                while (1) if (($0 | 0) == ($15 | 0)) {
                 $1 = $1 + 1 | 0;
                 continue label14;
                } else {
                 HEAPF32[$10 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] + HEAPF32[$2 + 4 >> 2]) + HEAPF32[$5 >> 2]) + HEAPF32[$5 + 4 >> 2]) * Math_fround(.25);
                 $5 = $5 + 8 | 0;
                 $2 = $2 + 8 | 0;
                 $0 = $0 + 1 | 0;
                 $10 = $10 + 4 | 0;
                 continue;
                };
               }
               break;
              };
              $0 = HEAP32[$13 + 4 >> 2] + (Math_imul(HEAP32[$13 + 20 >> 2], $4) << 5) | 0;
              vision__BinomialPyramid32f__apply_filter_28vision__Image__2c_20vision__Image_20const__29($13, $0 + 32 | 0, $0);
              $0 = HEAP32[$13 + 4 >> 2] + (Math_imul(HEAP32[$13 + 20 >> 2], $4) << 5) | 0;
              vision__BinomialPyramid32f__apply_filter_twice_28vision__Image__2c_20vision__Image_20const__29($13, $0 - -64 | 0, $0 + 32 | 0);
              $4 = $4 + 1 | 0;
              continue;
             };
            }
            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 5796), 2287), 3164), 330), 3735), 6430));
            break block19;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7338), 2287), 3164), 331), 3735), 7720));
           break block19;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 8437), 2287), 3164), 333), 3735), 8948));
          break block19;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9909), 2287), 3164), 334), 3735), 10278));
         break block19;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 10860), 2287), 3164), 335), 3735), 10278));
        break block19;
       }
       vision__ScopedTimer___ScopedTimer_28_29($18);
       $65 = __stack_pointer - 48 | 0;
       __stack_pointer = $65;
       $18 = $14 + 160 | 0;
       $0 = HEAP32[$13 + 4 >> 2];
       if (!(HEAP32[$14 + 160 >> 2] == HEAP32[$0 + 4 >> 2] & HEAP32[$14 + 164 >> 2] == HEAP32[$0 + 8 >> 2])) {
        $1 = 0;
        $5 = 0;
        $0 = $18 + 32 | 0;
        block21 : {
         if (HEAP32[$13 + 8 >> 2] != HEAP32[$13 + 4 >> 2]) {
          $2 = HEAP32[vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, 0, 0) >> 2];
          $4 = HEAP32[vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, 0, 0) + 4 >> 2];
          $9 = HEAP32[vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, 0, 0) + 8 >> 2];
          $6 = HEAP32[$13 + 16 >> 2];
          HEAP32[$0 + 12 >> 2] = $6;
          $8 = HEAP32[$13 + 20 >> 2] - 1 | 0;
          HEAP32[$0 + 16 >> 2] = $8;
          std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image____resize_28unsigned_20long_29($0, Math_imul($6, $8));
          label17 : while (1) {
           if (HEAPU32[$0 + 12 >> 2] <= $1 >>> 0) {
            break block21
           }
           $6 = $9 >>> $1 | 0;
           $8 = $4 >>> $1 | 0;
           $10 = 0;
           while (1) {
            $17 = HEAP32[$0 + 16 >> 2];
            if ($17 >>> 0 <= $10 >>> 0) {
             $1 = $1 + 1 | 0;
             continue label17;
            } else {
             vision__Image__alloc_28vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29((HEAP32[$0 >> 2] + (Math_imul($1, $17) << 5) | 0) + ($10 << 5) | 0, $2, $8, $6, 1);
             $10 = $10 + 1 | 0;
             continue;
            }
           };
          };
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1214), 2028), 3164), 53), 3735), 4174));
         break block19;
        }
        $0 = HEAP32[$13 + 4 >> 2];
        $9 = HEAP32[$0 + 4 >> 2];
        $6 = HEAP32[$0 + 8 >> 2];
        $4 = HEAP32[$13 + 16 >> 2];
        $2 = HEAP32[$13 + 20 >> 2];
        $0 = $18 + 92 | 0;
        HEAPF32[$0 + 24 >> 2] = .800000011920929;
        HEAP32[$0 + 20 >> 2] = 5;
        HEAPF32[$0 + 16 >> 2] = 1.5;
        HEAPF32[$0 + 12 >> 2] = 3;
        HEAP32[$0 + 8 >> 2] = 36;
        HEAP32[$0 + 4 >> 2] = $2;
        HEAP32[$0 >> 2] = $4;
        std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($0 + 28 | 0, 36);
        std____2__vector_vision__Image_2c_20std____2__allocator_vision__Image____resize_28unsigned_20long_29($0 + 40 | 0, Math_imul(HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2]));
        label19 : while (1) {
         if (($4 | 0) != ($5 | 0)) {
          $8 = $6 >>> $5 | 0;
          $10 = $9 >>> $5 | 0;
          $1 = 0;
          $17 = Math_imul($2, $5) << 5;
          while (1) if (($1 | 0) == ($2 | 0)) {
           $5 = $5 + 1 | 0;
           continue label19;
          } else {
           vision__Image__alloc_28vision__ImageType_2c_20unsigned_20long_2c_20unsigned_20long_2c_20int_2c_20unsigned_20long_29(($17 + HEAP32[$0 + 40 >> 2] | 0) + ($1 << 5) | 0, 2, $10, $8, 2);
           $1 = $1 + 1 | 0;
           continue;
          };
         }
         break;
        };
        $0 = HEAP32[$13 + 4 >> 2];
        HEAP32[$18 >> 2] = HEAP32[$0 + 4 >> 2];
        HEAP32[$18 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
        $0 = $18 + 16 | 0;
        $2 = HEAP32[$0 >> 2];
        $1 = HEAP32[$18 + 8 >> 2];
        $4 = (HEAP32[$0 + 4 >> 2] - $2 | 0) / 12 | 0;
        block23 : {
         if ($1 >>> 0 > $4 >>> 0) {
          $5 = __stack_pointer - 32 | 0;
          __stack_pointer = $5;
          $2 = $1 - $4 | 0;
          $1 = HEAP32[$0 + 4 >> 2];
          block22 : {
           if ($2 >>> 0 <= (HEAP32[$0 + 8 >> 2] - $1 | 0) / 12 >>> 0) {
            std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________construct_at_end_28unsigned_20long_29($0, $2);
            break block22;
           }
           $1 = std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__Point3d_float____29($5 + 12 | 0, std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $2 + (($1 - HEAP32[$0 >> 2] | 0) / 12 | 0) | 0), (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0, $0);
           std____2____split_buffer_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____________construct_at_end_28unsigned_20long_29($1, $2);
           std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______swap_out_circular_buffer_28std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float______29($0, $1);
           $0 = HEAP32[$1 + 4 >> 2];
           while (1) {
            $2 = HEAP32[$1 + 8 >> 2];
            if (($2 | 0) != ($0 | 0)) {
             $2 = $2 - 12 | 0;
             HEAP32[$1 + 8 >> 2] = $2;
             std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________vector_5babi_ne200100_5d_28_29($2);
             continue;
            }
            break;
           };
           $0 = HEAP32[$1 >> 2];
           if ($0) {
            emscripten_builtin_free($0)
           }
          }
          __stack_pointer = $5 + 32 | 0;
          break block23;
         }
         if ($1 >>> 0 < $4 >>> 0) {
          std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________base_destruct_at_end_5babi_ne200100_5d_28std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_______29($0, $2 + Math_imul($1, 12) | 0)
         }
        }
        $2 = 0;
        while (1) {
         $0 = HEAP32[$18 + 16 >> 2];
         if ((HEAP32[$18 + 20 >> 2] - $0 | 0) / 12 >>> 0 > $2 >>> 0) {
          $0 = $0 + Math_imul($2, 12) | 0;
          $4 = HEAP32[$0 >> 2];
          $1 = HEAP32[$18 + 12 >> 2];
          $5 = (HEAP32[$0 + 4 >> 2] - $4 | 0) / 12 | 0;
          block25 : {
           if ($1 >>> 0 > $5 >>> 0) {
            $9 = __stack_pointer - 32 | 0;
            __stack_pointer = $9;
            $4 = $1 - $5 | 0;
            $1 = HEAP32[$0 + 4 >> 2];
            block24 : {
             if ($4 >>> 0 <= (HEAP32[$0 + 8 >> 2] - $1 | 0) / 12 >>> 0) {
              std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________construct_at_end_28unsigned_20long_29($0, $4);
              break block24;
             }
             $1 = std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__Point3d_float____29($9 + 12 | 0, std____2__vector_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long___________recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $4 + (($1 - HEAP32[$0 >> 2] | 0) / 12 | 0) | 0), (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0, $0);
             std____2____split_buffer_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long______2c_20std____2__allocator_std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____________construct_at_end_28unsigned_20long_29($1, $4);
             std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______swap_out_circular_buffer_28std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float______29($0, $1);
             $0 = HEAP32[$1 + 4 >> 2];
             while (1) {
              $4 = HEAP32[$1 + 8 >> 2];
              if (($4 | 0) != ($0 | 0)) {
               $4 = $4 - 12 | 0;
               HEAP32[$1 + 8 >> 2] = $4;
               std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($4);
               continue;
              }
              break;
             };
             $0 = HEAP32[$1 >> 2];
             if ($0) {
              emscripten_builtin_free($0)
             }
            }
            __stack_pointer = $9 + 32 | 0;
            break block25;
           }
           if ($1 >>> 0 < $5 >>> 0) {
            std____2__vector_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__allocator_std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________base_destruct_at_end_5babi_ne200100_5d_28std____2__vector_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_____29($0, $4 + Math_imul($1, 12) | 0)
           }
          }
          $2 = $2 + 1 | 0;
          continue;
         }
         break;
        };
       }
       $0 = vision__Keyframe_96___Keyframe_28_29(operator_20new_28unsigned_20long_29(148));
       $2 = __stack_pointer - 16 | 0;
       __stack_pointer = $2;
       $0 = std____2__shared_ptr_vision__Keyframe_96____shared_ptr_5babi_ne200100_5d_vision__Keyframe_96__2c_200__28vision__Keyframe_96___29($2 + 8 | 0, $0);
       $4 = HEAP32[$0 >> 2];
       $1 = $14 - -64 | 0;
       HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $4;
       $4 = HEAP32[$0 + 4 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
       HEAP32[$1 + 4 >> 2] = $4;
       std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($0);
       __stack_pointer = $2 + 16 | 0;
       $0 = HEAP32[$14 + 64 >> 2];
       $1 = HEAP32[$13 + 4 >> 2];
       HEAP32[$0 >> 2] = HEAP32[$1 + 4 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
       $73 = $65 + 16 | 0;
       $141 = vision__ScopedTimer__ScopedTimer_28char_20const__29($73, 5452);
       $142 = HEAP32[$14 + 64 >> 2];
       $77 = __stack_pointer - 16 | 0;
       __stack_pointer = $77;
       block145 : {
        block29 : {
         block28 : {
          block27 : {
           block26 : {
            if ($13) {
             if (!$18) {
              break block26
             }
             $0 = HEAP32[$13 + 4 >> 2];
             if (($0 | 0) == HEAP32[$13 + 8 >> 2]) {
              break block27
             }
             if (HEAP32[$0 + 4 >> 2] != HEAP32[$18 >> 2]) {
              break block28
             }
             if (HEAP32[$0 + 8 >> 2] != HEAP32[$18 + 4 >> 2]) {
              break block29
             }
             $1 = $18;
             $49 = __stack_pointer - 32 | 0;
             __stack_pointer = $49;
             block144 : {
              block30 : {
               if (HEAP32[$13 + 16 >> 2] <= 0) {
                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 6609), 2028), 3164), 147), 3735), 7095));
                break block30;
               }
               $10 = vision__ScopedTimer__ScopedTimer_28char_20const__29($49, 14244);
               block33 : {
                block32 : {
                 block31 : {
                  if (HEAP32[$1 + 36 >> 2] != HEAP32[$1 + 32 >> 2]) {
                   if (HEAP32[$13 + 16 >> 2] <= 0) {
                    break block31
                   }
                   if (!__dynamic_cast($13, 17756, 22988)) {
                    break block32
                   }
                   label24 : while (1) {
                    $8 = 0;
                    if (HEAPU32[$1 + 44 >> 2] <= $12 >>> 0) {
                     break block33
                    }
                    label25 : while (1) {
                     $0 = HEAP32[$1 + 48 >> 2];
                     if ($0 >>> 0 <= $8 >>> 0) {
                      $12 = $12 + 1 | 0;
                      continue label24;
                     } else {
                      $2 = (HEAP32[$1 + 32 >> 2] + (Math_imul($0, $12) << 5) | 0) + ($8 << 5) | 0;
                      $4 = vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, $12, $8);
                      $8 = $8 + 1 | 0;
                      $9 = vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, $12, $8);
                      block43 : {
                       block42 : {
                        block41 : {
                         block40 : {
                          block39 : {
                           block38 : {
                            block37 : {
                             block36 : {
                              block35 : {
                               block34 : {
                                if (HEAP32[$2 >> 2] == 2) {
                                 if (HEAP32[$4 >> 2] != 2) {
                                  break block34
                                 }
                                 if (HEAP32[$9 >> 2] != 2) {
                                  break block35
                                 }
                                 if (HEAP32[$2 + 16 >> 2] != 1) {
                                  break block36
                                 }
                                 if (HEAP32[$4 + 16 >> 2] != 1) {
                                  break block37
                                 }
                                 if (HEAP32[$9 + 16 >> 2] != 1) {
                                  break block38
                                 }
                                 $5 = HEAP32[$2 + 4 >> 2];
                                 if (($5 | 0) != HEAP32[$9 + 4 >> 2]) {
                                  break block39
                                 }
                                 $0 = HEAP32[$2 + 8 >> 2];
                                 if (($0 | 0) != HEAP32[$9 + 8 >> 2]) {
                                  break block40
                                 }
                                 if (($5 | 0) != HEAP32[$4 + 4 >> 2]) {
                                  break block41
                                 }
                                 if (HEAP32[$4 + 8 >> 2] != ($0 | 0)) {
                                  break block42
                                 }
                                 $5 = 0;
                                 label26 : while (1) {
                                  if ($0 >>> 0 <= $5 >>> 0) {
                                   continue label25
                                  }
                                  if (HEAPU32[$2 + 8 >> 2] <= $5 >>> 0) {
                                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21818), 21855), 3164), 120), 3735), 21955));
                                   break block30;
                                  }
                                  $17 = HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], $5) | 0;
                                  $15 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $5);
                                  $19 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($9, $5);
                                  $23 = HEAP32[$4 + 4 >> 2];
                                  $0 = 0;
                                  while (1) if (($0 | 0) == ($23 | 0)) {
                                   $5 = $5 + 1 | 0;
                                   $0 = HEAP32[$4 + 8 >> 2];
                                   continue label26;
                                  } else {
                                   $6 = $0 << 2;
                                   HEAPF32[$6 + $17 >> 2] = HEAPF32[$6 + $15 >> 2] - HEAPF32[$6 + $19 >> 2];
                                   $0 = $0 + 1 | 0;
                                   continue;
                                  };
                                 };
                                }
                                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9126), 2028), 3164), 86), 3735), 9794));
                                break block43;
                               }
                               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 10310), 2028), 3164), 87), 3735), 9794));
                               break block43;
                              }
                              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 10813), 2028), 3164), 88), 3735), 9794));
                              break block43;
                             }
                             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11244), 2028), 3164), 89), 3735), 11611));
                             break block43;
                            }
                            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12013), 2028), 3164), 90), 3735), 11611));
                            break block43;
                           }
                           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12498), 2028), 3164), 91), 3735), 11611));
                           break block43;
                          }
                          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12790), 2028), 3164), 92), 3735), 12881));
                          break block43;
                         }
                         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13340), 2028), 3164), 93), 3735), 13390));
                         break block43;
                        }
                        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13869), 2028), 3164), 94), 3735), 12881));
                        break block43;
                       }
                       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14122), 2028), 3164), 95), 3735), 13390));
                      }
                      break block30;
                     }
                    };
                   };
                  }
                  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 4992), 2028), 3164), 72), 3735), 5522));
                  break block30;
                 }
                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 6609), 2028), 3164), 73), 3735), 7095));
                 break block30;
                }
                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7953), 2028), 3164), 74), 3735), 8378));
                break block30;
               }
               vision__ScopedTimer___ScopedTimer_28_29($10);
               $143 = vision__ScopedTimer__ScopedTimer_28char_20const__29($49, 14354);
               $8 = __stack_pointer - 48 | 0;
               __stack_pointer = $8;
               $9 = $1;
               HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 60 >> 2];
               $78 = $1 + 60 | 0;
               $3 = HEAPF32[$1 + 52 >> 2];
               $46 = Math_fround($3 * $3);
               $4 = 1;
               block56 : {
                while (1) {
                 block57 : {
                  block47 : {
                   block44 : {
                    block52 : {
                     block51 : {
                      block46 : {
                       block45 : {
                        if ((HEAP32[$9 + 36 >> 2] - HEAP32[$9 + 32 >> 2] >> 5) - 1 >>> 0 > $4 >>> 0) {
                         $0 = HEAP32[$9 + 32 >> 2];
                         $1 = HEAP32[$9 + 32 >> 2];
                         if (HEAP32[$9 + 36 >> 2] - $1 >> 5 >>> 0 <= $4 >>> 0) {
                          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18862), 18908), 3164), 94), 3735), 19026));
                          break block30;
                         }
                         $2 = $4 << 5;
                         $3 = Math_fround(Math_floor(Math_fround(Math_fround(logf(Math_fround(HEAPU32[$1 + 4 >> 2] / HEAPU32[($2 + $1 | 0) + 4 >> 2] >>> 0)) / Math_fround(.6931471824645996)) + Math_fround(.5))));
                         if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
                          $17 = ~~$3
                         } else {
                          $17 = -2147483648
                         }
                         $1 = $4 + 1 | 0;
                         $5 = $0 + ($1 << 5) | 0;
                         $10 = $0 + $2 | 0;
                         $6 = $10 - 32 | 0;
                         $19 = ($4 | 0) % HEAP32[$9 + 48 >> 2] | 0;
                         $2 = HEAP32[$10 - 28 >> 2];
                         $12 = HEAP32[$10 + 4 >> 2];
                         if (($2 | 0) != ($12 | 0)) {
                          $0 = $2 >>> 1 | 0;
                          break block44;
                         }
                         $4 = HEAP32[$5 + 4 >> 2];
                         if (($4 | 0) == ($2 | 0)) {
                          $4 = HEAP32[$10 - 24 >> 2];
                          if (($4 | 0) != HEAP32[$10 + 8 >> 2]) {
                           break block45
                          }
                          if (($4 | 0) != HEAP32[$5 + 8 >> 2]) {
                           break block46
                          }
                          $0 = 1;
                          $4 = $4 - 1 | 0;
                          $70 = $4 >>> 0 <= 1 ? 1 : $4;
                          $2 = $2 - 1 | 0;
                          $144 = $2 >>> 0 <= 1 ? 1 : $2;
                          $7 = Math_fround(1 << $17);
                          $11 = Math_fround(ldexp($17 - 1 | 0) + -.5);
                          $16 = Math_fround($19 | 0);
                          label28 : while (1) {
                           if (($0 | 0) == ($70 | 0)) {
                            break block47
                           }
                           $24 = Math_fround(Math_fround(Math_fround($0 >>> 0) * $7) + $11);
                           $4 = 1;
                           $12 = $0 - 1 | 0;
                           $59 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $12);
                           $23 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $0);
                           $2 = $0 + 1 | 0;
                           $25 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $2);
                           $32 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $12);
                           $63 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $0);
                           $26 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $2);
                           $35 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $12);
                           $37 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $0);
                           $20 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $2);
                           while (1) if (($4 | 0) == ($144 | 0)) {
                            $0 = $2;
                            continue label28;
                           } else {
                            $0 = $4 << 2;
                            $3 = HEAPF32[$0 + $63 >> 2];
                            block48 : {
                             if ($46 > Math_fround($3 * $3)) {
                              break block48
                             }
                             $12 = $4 - 1 << 2;
                             $42 = HEAPF32[$12 + $59 >> 2];
                             block50 : {
                              block49 : {
                               if (!($42 < $3) | !($3 > HEAPF32[$0 + $59 >> 2])) {
                                break block49
                               }
                               $15 = $4 + 1 << 2;
                               if (!($3 > HEAPF32[$15 + $59 >> 2]) | !($3 > HEAPF32[$12 + $23 >> 2]) | (!($3 > HEAPF32[$0 + $23 >> 2]) | !($3 > HEAPF32[$15 + $23 >> 2])) | (!($3 > HEAPF32[$12 + $25 >> 2]) | !($3 > HEAPF32[$0 + $25 >> 2]) | (!($3 > HEAPF32[$15 + $25 >> 2]) | !($3 > HEAPF32[$12 + $32 >> 2]))) | (!($3 > HEAPF32[$0 + $32 >> 2]) | !($3 > HEAPF32[$15 + $32 >> 2]) | (!($3 > HEAPF32[$12 + $63 >> 2]) | !($3 > HEAPF32[$15 + $63 >> 2])) | (!($3 > HEAPF32[$12 + $26 >> 2]) | !($3 > HEAPF32[$0 + $26 >> 2]) | (!($3 > HEAPF32[$15 + $26 >> 2]) | !($3 > HEAPF32[$12 + $35 >> 2])))) | (!($3 > HEAPF32[$0 + $35 >> 2]) | !($3 > HEAPF32[$15 + $35 >> 2]) | (!($3 > HEAPF32[$12 + $37 >> 2]) | !($3 > HEAPF32[$0 + $37 >> 2])) | (!($3 > HEAPF32[$0 + $20 >> 2]) | (!($3 > HEAPF32[$15 + $37 >> 2]) | !($3 > HEAPF32[$12 + $20 >> 2]))))) {
                                break block49
                               }
                               if ($3 > HEAPF32[$15 + $20 >> 2]) {
                                break block50
                               }
                              }
                              if (!($3 < $42) | !($3 < HEAPF32[$0 + $59 >> 2])) {
                               break block48
                              }
                              $15 = $4 + 1 << 2;
                              if (!($3 < HEAPF32[$15 + $59 >> 2]) | !($3 < HEAPF32[$12 + $23 >> 2]) | (!($3 < HEAPF32[$0 + $23 >> 2]) | !($3 < HEAPF32[$15 + $23 >> 2])) | (!($3 < HEAPF32[$12 + $25 >> 2]) | !($3 < HEAPF32[$0 + $25 >> 2]) | (!($3 < HEAPF32[$15 + $25 >> 2]) | !($3 < HEAPF32[$12 + $32 >> 2]))) | (!($3 < HEAPF32[$0 + $32 >> 2]) | !($3 < HEAPF32[$15 + $32 >> 2]) | (!($3 < HEAPF32[$12 + $63 >> 2]) | !($3 < HEAPF32[$15 + $63 >> 2])) | (!($3 < HEAPF32[$12 + $26 >> 2]) | !($3 < HEAPF32[$0 + $26 >> 2]) | (!($3 < HEAPF32[$15 + $26 >> 2]) | !($3 < HEAPF32[$12 + $35 >> 2])))) | (!($3 < HEAPF32[$0 + $35 >> 2]) | !($3 < HEAPF32[$15 + $35 >> 2]) | (!($3 < HEAPF32[$12 + $37 >> 2]) | !($3 < HEAPF32[$0 + $37 >> 2])) | (!($3 < HEAPF32[$15 + $37 >> 2]) | !($3 < HEAPF32[$12 + $20 >> 2]) | (!($3 < HEAPF32[$0 + $20 >> 2]) | !($3 < HEAPF32[$15 + $20 >> 2]))))) {
                               break block48
                              }
                             }
                             HEAPF32[$8 + 36 >> 2] = $3;
                             HEAP32[$8 + 28 >> 2] = $19;
                             HEAP32[$8 + 24 >> 2] = $17;
                             $3 = vision__GaussianScaleSpacePyramid__effectiveSigma_28unsigned_20long_2c_20float_29_20const($13, $17, $16);
                             HEAPF32[$8 + 16 >> 2] = $24;
                             HEAPF32[$8 + 40 >> 2] = $3;
                             HEAPF32[$8 + 12 >> 2] = Math_fround(Math_fround($4 >>> 0) * $7) + $11;
                             vision__DoGScaleInvariantDetector__FeaturePoint__20std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____emplace_back_vision__DoGScaleInvariantDetector__FeaturePoint_20const___28vision__DoGScaleInvariantDetector__FeaturePoint_20const__29($78, $8 + 12 | 0);
                            }
                            $4 = $4 + 1 | 0;
                            continue;
                           };
                          };
                         }
                         $0 = $2 >>> 1 | 0;
                         if (($4 | 0) != ($0 | 0)) {
                          break block44
                         }
                         $0 = HEAP32[$10 - 24 >> 2];
                         if (($0 | 0) != HEAP32[$10 + 8 >> 2]) {
                          break block51
                         }
                         $2 = $0 >>> 1 | 0;
                         if (($2 | 0) != HEAP32[$5 + 8 >> 2]) {
                          break block52
                         }
                         $0 = 2;
                         $3 = Math_fround(Math_fround($2 - 1 >>> 0) + Math_fround(-.5));
                         $3 = Math_fround(Math_floor(Math_fround(Math_fround($3 + $3) + Math_fround(.5))));
                         if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
                          $2 = ~~$3 >>> 0
                         } else {
                          $2 = 0
                         }
                         $59 = $2 >>> 0 <= 2 ? 2 : $2;
                         $3 = Math_fround(Math_fround($4 - 1 >>> 0) + Math_fround(-.5));
                         $3 = Math_fround(Math_floor(Math_fround(Math_fround($3 + $3) + Math_fround(.5))));
                         if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
                          $2 = ~~$3 >>> 0
                         } else {
                          $2 = 0
                         }
                         $63 = $2 >>> 0 <= 2 ? 2 : $2;
                         $42 = Math_fround(1 << $17);
                         $43 = Math_fround(ldexp($17 - 1 | 0) + -.5);
                         $45 = Math_fround($19 | 0);
                         label30 : while (1) {
                          if (($0 | 0) == ($59 | 0)) {
                           break block47
                          }
                          $3 = Math_fround($0 >>> 0);
                          $51 = Math_fround(Math_fround($3 * $42) + $43);
                          $11 = Math_fround(Math_fround($3 * Math_fround(.5)) + Math_fround(-.25));
                          $16 = Math_fround($11 + Math_fround(.5));
                          $24 = Math_fround($11 + Math_fround(-.5));
                          $4 = 2;
                          $12 = $0 - 1 | 0;
                          $35 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $12);
                          $23 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $0);
                          $2 = $0 + 1 | 0;
                          $25 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $2);
                          $32 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $12);
                          $37 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $0);
                          $26 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $2);
                          while (1) if (($4 | 0) == ($63 | 0)) {
                           $0 = $2;
                           continue label30;
                          } else {
                           $12 = $4 << 2;
                           $0 = $12 + $37 | 0;
                           $3 = HEAPF32[$0 >> 2];
                           block53 : {
                            if ($46 > Math_fround($3 * $3)) {
                             break block53
                            }
                            $57 = Math_fround($4 >>> 0);
                            $7 = Math_fround(Math_fround($57 * Math_fround(.5)) + Math_fround(-.25));
                            $15 = $4 - 1 << 2;
                            $70 = $15 + $35 | 0;
                            block55 : {
                             block54 : {
                              if (!(HEAPF32[$70 >> 2] < $3) | !(HEAPF32[$12 + $35 >> 2] < $3)) {
                               break block54
                              }
                              $20 = $4 + 1 << 2;
                              if (!(HEAPF32[$20 + $35 >> 2] < $3) | !(HEAPF32[$15 + $23 >> 2] < $3) | (!(HEAPF32[$12 + $23 >> 2] < $3) | !(HEAPF32[$20 + $23 >> 2] < $3)) | (!(HEAPF32[$15 + $25 >> 2] < $3) | !(HEAPF32[$12 + $25 >> 2] < $3) | (!(HEAPF32[$20 + $25 >> 2] < $3) | !(HEAPF32[$15 + $32 >> 2] < $3))) | (!(HEAPF32[$12 + $32 >> 2] < $3) | !(HEAPF32[$20 + $32 >> 2] < $3) | (!(HEAPF32[$15 + $37 >> 2] < $3) | !(HEAPF32[$20 + $37 >> 2] < $3)) | (!(HEAPF32[$20 + $26 >> 2] < $3) | (!(HEAPF32[$15 + $26 >> 2] < $3) | !(HEAPF32[$12 + $26 >> 2] < $3))))) {
                               break block54
                              }
                              $47 = Math_fround($7 + Math_fround(-.5));
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $47, $24) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $7, $24) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $33 = Math_fround($7 + Math_fround(.5));
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $33, $24) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $47, $11) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $7, $11) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $33, $11) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $47, $16) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $7, $16) < $3;
                              $3 = HEAPF32[$0 >> 2];
                              if (!$20) {
                               break block54
                              }
                              if (float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $33, $16) < $3) {
                               break block55
                              }
                              $3 = HEAPF32[$0 >> 2];
                             }
                             if (!(HEAPF32[$70 >> 2] > $3) | !(HEAPF32[$12 + $35 >> 2] > $3)) {
                              break block53
                             }
                             $20 = $4 + 1 << 2;
                             if (!(HEAPF32[$20 + $35 >> 2] > $3) | !(HEAPF32[$15 + $23 >> 2] > $3) | (!(HEAPF32[$12 + $23 >> 2] > $3) | !(HEAPF32[$20 + $23 >> 2] > $3)) | (!(HEAPF32[$15 + $25 >> 2] > $3) | !(HEAPF32[$12 + $25 >> 2] > $3) | (!(HEAPF32[$20 + $25 >> 2] > $3) | !(HEAPF32[$15 + $32 >> 2] > $3))) | (!(HEAPF32[$12 + $32 >> 2] > $3) | !(HEAPF32[$20 + $32 >> 2] > $3) | (!(HEAPF32[$15 + $37 >> 2] > $3) | !(HEAPF32[$20 + $37 >> 2] > $3)) | (!(HEAPF32[$20 + $26 >> 2] > $3) | (!(HEAPF32[$15 + $26 >> 2] > $3) | !(HEAPF32[$12 + $26 >> 2] > $3))))) {
                              break block53
                             }
                             $47 = Math_fround($7 + Math_fround(-.5));
                             if (!(float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $47, $24) > $3)) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $7, $24))) {
                              break block53
                             }
                             $3 = Math_fround($7 + Math_fround(.5));
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $3, $24))) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $47, $11))) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $7, $11))) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $3, $11))) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $47, $16))) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $7, $16))) {
                              break block53
                             }
                             if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($5, $3, $16))) {
                              break block53
                             }
                            }
                            HEAP32[$8 + 28 >> 2] = $19;
                            HEAP32[$8 + 24 >> 2] = $17;
                            HEAPF32[$8 + 36 >> 2] = HEAPF32[$0 >> 2];
                            $3 = vision__GaussianScaleSpacePyramid__effectiveSigma_28unsigned_20long_2c_20float_29_20const($13, $17, $45);
                            HEAPF32[$8 + 16 >> 2] = $51;
                            HEAPF32[$8 + 12 >> 2] = Math_fround($57 * $42) + $43;
                            HEAPF32[$8 + 40 >> 2] = $3;
                            vision__DoGScaleInvariantDetector__FeaturePoint__20std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____emplace_back_vision__DoGScaleInvariantDetector__FeaturePoint_20const___28vision__DoGScaleInvariantDetector__FeaturePoint_20const__29($78, $8 + 12 | 0);
                           }
                           $4 = $4 + 1 | 0;
                           continue;
                          };
                         };
                        }
                        __stack_pointer = $8 + 48 | 0;
                        break block56;
                       }
                       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15440), 2028), 3164), 192), 3735), 15492));
                       break block57;
                      }
                      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15857), 2028), 3164), 193), 3735), 15492));
                      break block57;
                     }
                     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15440), 2028), 3164), 277), 3735), 15492));
                     break block57;
                    }
                    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16123), 2028), 3164), 278), 3735), 15492));
                    break block57;
                   }
                   $4 = $1;
                   if (($0 | 0) != ($12 | 0) | ($12 | 0) != HEAP32[$5 + 4 >> 2]) {
                    continue
                   }
                   block58 : {
                    $2 = HEAP32[$10 - 24 >> 2] >>> 1 | 0;
                    if (($2 | 0) == HEAP32[$10 + 8 >> 2]) {
                     if (($2 | 0) != HEAP32[$5 + 8 >> 2]) {
                      break block58
                     }
                     $0 = 1;
                     $2 = $2 - 1 | 0;
                     $59 = $2 >>> 0 <= 1 ? 1 : $2;
                     $2 = $12 - 1 | 0;
                     $63 = $2 >>> 0 <= 1 ? 1 : $2;
                     $42 = Math_fround(1 << $17);
                     $43 = Math_fround(ldexp($17 - 1 | 0) + -.5);
                     $45 = Math_fround($19 | 0);
                     label33 : while (1) {
                      if (($0 | 0) == ($59 | 0)) {
                       break block47
                      }
                      $51 = Math_fround(Math_fround(Math_fround($0 >>> 0) * $42) + $43);
                      $4 = 1;
                      $11 = Math_fround(Math_fround($0 << 1 >>> 0) + Math_fround(.5));
                      $16 = Math_fround($11 + Math_fround(2.0));
                      $24 = Math_fround($11 + Math_fround(-2.0));
                      $12 = $0 - 1 | 0;
                      $35 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $12);
                      $37 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $0);
                      $2 = $0 + 1 | 0;
                      $23 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($10, $2);
                      $25 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $12);
                      $32 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $0);
                      $26 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $2);
                      while (1) if (($4 | 0) == ($63 | 0)) {
                       $0 = $2;
                       continue label33;
                      } else {
                       $12 = $4 << 2;
                       $0 = $12 + $37 | 0;
                       $3 = HEAPF32[$0 >> 2];
                       block59 : {
                        if ($46 > Math_fround($3 * $3)) {
                         break block59
                        }
                        $7 = Math_fround(Math_fround($4 << 1 >>> 0) + Math_fround(.5));
                        $15 = $4 - 1 << 2;
                        $70 = $15 + $35 | 0;
                        block61 : {
                         block60 : {
                          if (!(HEAPF32[$70 >> 2] < $3) | !(HEAPF32[$12 + $35 >> 2] < $3)) {
                           break block60
                          }
                          $20 = $4 + 1 << 2;
                          if (!(HEAPF32[$20 + $35 >> 2] < $3) | !(HEAPF32[$15 + $37 >> 2] < $3) | (!(HEAPF32[$20 + $37 >> 2] < $3) | !(HEAPF32[$15 + $23 >> 2] < $3)) | (!(HEAPF32[$12 + $23 >> 2] < $3) | !(HEAPF32[$20 + $23 >> 2] < $3) | (!(HEAPF32[$15 + $25 >> 2] < $3) | !(HEAPF32[$12 + $25 >> 2] < $3))) | (!(HEAPF32[$20 + $25 >> 2] < $3) | !(HEAPF32[$15 + $32 >> 2] < $3) | (!(HEAPF32[$12 + $32 >> 2] < $3) | !(HEAPF32[$20 + $32 >> 2] < $3)) | (!(HEAPF32[$20 + $26 >> 2] < $3) | (!(HEAPF32[$15 + $26 >> 2] < $3) | !(HEAPF32[$12 + $26 >> 2] < $3))))) {
                           break block60
                          }
                          $47 = Math_fround($7 + Math_fround(-2.0));
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $47, $24) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $7, $24) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $33 = Math_fround($7 + Math_fround(2.0));
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $33, $24) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $47, $11) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $7, $11) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $33, $11) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $47, $16) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          $20 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $7, $16) < $3;
                          $3 = HEAPF32[$0 >> 2];
                          if (!$20) {
                           break block60
                          }
                          if (float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $33, $16) < $3) {
                           break block61
                          }
                          $3 = HEAPF32[$0 >> 2];
                         }
                         if (!(HEAPF32[$70 >> 2] > $3) | !(HEAPF32[$12 + $35 >> 2] > $3)) {
                          break block59
                         }
                         $20 = $4 + 1 << 2;
                         if (!(HEAPF32[$20 + $35 >> 2] > $3) | !(HEAPF32[$15 + $37 >> 2] > $3) | (!(HEAPF32[$20 + $37 >> 2] > $3) | !(HEAPF32[$15 + $23 >> 2] > $3)) | (!(HEAPF32[$12 + $23 >> 2] > $3) | !(HEAPF32[$20 + $23 >> 2] > $3) | (!(HEAPF32[$15 + $25 >> 2] > $3) | !(HEAPF32[$12 + $25 >> 2] > $3))) | (!(HEAPF32[$20 + $25 >> 2] > $3) | !(HEAPF32[$15 + $32 >> 2] > $3) | (!(HEAPF32[$12 + $32 >> 2] > $3) | !(HEAPF32[$20 + $32 >> 2] > $3)) | (!(HEAPF32[$20 + $26 >> 2] > $3) | (!(HEAPF32[$15 + $26 >> 2] > $3) | !(HEAPF32[$12 + $26 >> 2] > $3))))) {
                          break block59
                         }
                         $47 = Math_fround($7 + Math_fround(-2.0));
                         if (!(float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $47, $24) > $3)) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $7, $24))) {
                          break block59
                         }
                         $3 = Math_fround($7 + Math_fround(2.0));
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $3, $24))) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $47, $11))) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $7, $11))) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $3, $11))) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $47, $16))) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $7, $16))) {
                          break block59
                         }
                         if (!(HEAPF32[$0 >> 2] < float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $3, $16))) {
                          break block59
                         }
                        }
                        HEAP32[$8 + 28 >> 2] = $19;
                        HEAP32[$8 + 24 >> 2] = $17;
                        HEAPF32[$8 + 36 >> 2] = HEAPF32[$0 >> 2];
                        $3 = vision__GaussianScaleSpacePyramid__effectiveSigma_28unsigned_20long_2c_20float_29_20const($13, $17, $45);
                        HEAPF32[$8 + 16 >> 2] = $51;
                        HEAPF32[$8 + 12 >> 2] = Math_fround(Math_fround($4 >>> 0) * $42) + $43;
                        HEAPF32[$8 + 40 >> 2] = $3;
                        vision__DoGScaleInvariantDetector__FeaturePoint__20std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____emplace_back_vision__DoGScaleInvariantDetector__FeaturePoint_20const___28vision__DoGScaleInvariantDetector__FeaturePoint_20const__29($78, $8 + 12 | 0);
                       }
                       $4 = $4 + 1 | 0;
                       continue;
                      };
                     };
                    }
                    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16308), 2028), 3164), 362), 3735), 15492));
                    break block57;
                   }
                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16478), 2028), 3164), 363), 3735), 15492));
                   break block57;
                  }
                  $4 = $1;
                  continue;
                 }
                 break;
                };
                break block30;
               }
               vision__ScopedTimer___ScopedTimer_28_29($143);
               $32 = vision__ScopedTimer__ScopedTimer_28char_20const__29($49, 14589);
               $5 = 0;
               $2 = 0;
               $0 = __stack_pointer - 80 | 0;
               __stack_pointer = $0;
               $12 = $9 + 60 | 0;
               $3 = HEAPF32[$9 + 56 >> 2];
               $7 = Math_fround($3 + Math_fround(1.0));
               $46 = Math_fround(Math_fround($7 * $7) / $3);
               $3 = HEAPF32[$9 + 52 >> 2];
               $42 = Math_fround($3 * $3);
               block99 : {
                block95 : {
                 block62 : {
                  while (1) {
                   $1 = HEAP32[$9 + 60 >> 2];
                   if ((HEAP32[$9 + 64 >> 2] - $1 | 0) / 36 >>> 0 > $5 >>> 0) {
                    $17 = $1 + Math_imul($5, 36) | 0;
                    $1 = HEAP32[$17 + 16 >> 2];
                    $4 = HEAP32[$9 + 48 >> 2];
                    if (($1 | 0) >= ($4 | 0)) {
                     break block62
                    }
                    $10 = HEAP32[$17 + 12 >> 2];
                    $8 = (HEAP32[$9 + 32 >> 2] + (Math_imul($4, $10) << 5) | 0) + ($1 << 5) | 0;
                    $6 = $8 - 32 | 0;
                    $3 = Math_fround(Math_fround(1.0) / Math_fround(1 << $10));
                    $7 = Math_fround(Math_fround($3 * Math_fround(.5)) + Math_fround(-.5));
                    $43 = Math_fround(Math_fround(HEAPF32[$17 >> 2] * $3) + $7);
                    $11 = Math_fround($43 + Math_fround(.5));
                    if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                     $10 = ~~$11
                    } else {
                     $10 = -2147483648
                    }
                    $47 = Math_fround(Math_fround(HEAPF32[$17 + 4 >> 2] * $3) + $7);
                    $3 = Math_fround($47 + Math_fround(.5));
                    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
                     $1 = ~~$3
                    } else {
                     $1 = -2147483648
                    }
                    block93 : {
                     block85 : {
                      block73 : {
                       block63 : {
                        $4 = $8 + 32 | 0;
                        $19 = HEAP32[$4 + 4 >> 2];
                        $23 = HEAP32[$6 + 4 >> 2];
                        $15 = HEAP32[$8 + 4 >> 2];
                        if (($19 | 0) == (($23 | 0) == ($15 | 0) | 0)) {
                         if (HEAP32[$4 + 8 >> 2] != (HEAP32[$6 + 8 >> 2] == HEAP32[$8 + 8 >> 2] | 0)) {
                          break block63
                         }
                         $15 = __stack_pointer - 32 | 0;
                         __stack_pointer = $15;
                         block70 : {
                          block69 : {
                           block68 : {
                            block67 : {
                             block66 : {
                              block65 : {
                               block64 : {
                                if (($10 | 0) <= 0) {
                                 break block64
                                }
                                $19 = HEAP32[$8 + 4 >> 2];
                                if ($19 >>> 0 <= $10 + 1 >>> 0) {
                                 break block64
                                }
                                if (($1 | 0) <= 0) {
                                 break block65
                                }
                                $23 = $1 + 1 | 0;
                                $25 = HEAP32[$8 + 8 >> 2];
                                if ($23 >>> 0 >= $25 >>> 0) {
                                 break block65
                                }
                                if (($19 | 0) != HEAP32[$6 + 4 >> 2]) {
                                 break block66
                                }
                                if (($19 | 0) != HEAP32[$4 + 4 >> 2]) {
                                 break block67
                                }
                                if (($25 | 0) != HEAP32[$6 + 8 >> 2]) {
                                 break block68
                                }
                                if (($25 | 0) != HEAP32[$4 + 8 >> 2]) {
                                 break block69
                                }
                                $19 = $1 - 1 | 0;
                                $25 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $19);
                                $26 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $1);
                                $6 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $23);
                                $35 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($8, $1);
                                $19 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $19);
                                $37 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $1);
                                $23 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $23);
                                vision__ComputeSubpixelDerivatives_28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20vision__Image_20const__2c_20int_2c_20int_29($15 + 28 | 0, $15 + 24 | 0, $15 + 20 | 0, $15 + 16 | 0, $15 + 12 | 0, $8, $10, $1);
                                $4 = $10 << 2;
                                $16 = HEAPF32[$4 + $6 >> 2];
                                $24 = HEAPF32[$4 + $25 >> 2];
                                $33 = HEAPF32[$4 + $23 >> 2];
                                $45 = HEAPF32[$4 + $19 >> 2];
                                $6 = $4 + $37 | 0;
                                $3 = HEAPF32[$6 >> 2];
                                $19 = $4 + $26 | 0;
                                $7 = HEAPF32[$19 >> 2];
                                $11 = HEAPF32[$4 + $35 >> 2];
                                $51 = HEAPF32[$19 + 4 >> 2];
                                $57 = HEAPF32[$19 - 4 >> 2];
                                $68 = HEAPF32[$6 + 4 >> 2];
                                $69 = HEAPF32[$6 - 4 >> 2];
                                HEAPF32[$0 + 32 >> 2] = HEAPF32[$15 + 20 >> 2];
                                $66 = HEAPF32[$15 + 12 >> 2];
                                HEAPF32[$0 + 44 >> 2] = $66;
                                HEAPF32[$0 + 36 >> 2] = $66;
                                $51 = Math_fround(Math_fround(Math_fround($57 - $51) + Math_fround($68 - $69)) * Math_fround(.25));
                                HEAPF32[$0 + 40 >> 2] = $51;
                                $57 = HEAPF32[$15 + 16 >> 2];
                                HEAPF32[$0 + 64 >> 2] = $3 + Math_fround($7 - Math_fround($11 + $11));
                                $11 = Math_fround(Math_fround(Math_fround($24 - $16) + Math_fround($33 - $45)) * Math_fround(.25));
                                HEAPF32[$0 + 60 >> 2] = $11;
                                HEAPF32[$0 + 56 >> 2] = $51;
                                HEAPF32[$0 + 52 >> 2] = $11;
                                HEAPF32[$0 + 48 >> 2] = $57;
                                HEAPF32[$0 + 20 >> 2] = -HEAPF32[$15 + 28 >> 2];
                                $11 = HEAPF32[$15 + 24 >> 2];
                                HEAPF32[$0 + 28 >> 2] = Math_fround($3 - $7) * Math_fround(-.5);
                                HEAPF32[$0 + 24 >> 2] = -$11;
                                __stack_pointer = $15 + 32 | 0;
                                break block70;
                               }
                               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19789), 18908), 3164), 309), 3735), 19893));
                               break block30;
                              }
                              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19961), 18908), 3164), 310), 3735), 20020));
                              break block30;
                             }
                             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20142), 18908), 3164), 311), 3735), 20194));
                             break block30;
                            }
                            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20297), 18908), 3164), 312), 3735), 20194));
                            break block30;
                           }
                           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20367), 18908), 3164), 313), 3735), 20194));
                           break block30;
                          }
                          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20461), 18908), 3164), 314), 3735), 20194));
                          break block30;
                         }
                         break block93;
                        }
                        if (!(($15 | 0) != ($23 | 0) | ($19 | 0) != ($15 >>> 1 | 0))) {
                         $15 = HEAP32[$6 + 8 >> 2];
                         if (($15 | 0) != HEAP32[$8 + 8 >> 2] | HEAP32[$4 + 8 >> 2] != ($15 >>> 1 | 0)) {
                          break block73
                         }
                         $15 = __stack_pointer - 32 | 0;
                         __stack_pointer = $15;
                         block84 : {
                          block83 : {
                           block82 : {
                            block81 : {
                             block80 : {
                              block79 : {
                               block78 : {
                                block77 : {
                                 block76 : {
                                  block75 : {
                                   block74 : {
                                    if (($10 | 0) <= 0) {
                                     break block74
                                    }
                                    $19 = HEAP32[$8 + 4 >> 2];
                                    if ($19 >>> 0 <= $10 + 1 >>> 0) {
                                     break block74
                                    }
                                    if (($1 | 0) <= 0) {
                                     break block75
                                    }
                                    $25 = $1 + 1 | 0;
                                    $23 = HEAP32[$8 + 8 >> 2];
                                    if ($25 >>> 0 >= $23 >>> 0) {
                                     break block75
                                    }
                                    if (($19 | 0) != HEAP32[$6 + 4 >> 2]) {
                                     break block76
                                    }
                                    if (HEAP32[$4 + 4 >> 2] != ($19 >>> 1 | 0)) {
                                     break block77
                                    }
                                    if (($23 | 0) != HEAP32[$6 + 8 >> 2]) {
                                     break block78
                                    }
                                    if (HEAP32[$4 + 8 >> 2] != ($23 >>> 1 | 0)) {
                                     break block79
                                    }
                                    $23 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $1 - 1 | 0);
                                    $19 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $1);
                                    $25 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($6, $25);
                                    $26 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($8, $1);
                                    $3 = Math_fround(Math_fround(Math_fround($10 >>> 0) * Math_fround(.5)) + Math_fround(-.25));
                                    $33 = Math_fround($3 + Math_fround(-.5));
                                    if (!($33 >= Math_fround(0.0))) {
                                     break block80
                                    }
                                    $7 = Math_fround(Math_fround(Math_fround($1 >>> 0) * Math_fround(.5)) + Math_fround(-.25));
                                    $45 = Math_fround($7 + Math_fround(-.5));
                                    if (!($45 >= Math_fround(0.0))) {
                                     break block81
                                    }
                                    $51 = Math_fround($3 + Math_fround(.5));
                                    if (!($51 < Math_fround(HEAPU32[$4 + 4 >> 2]))) {
                                     break block82
                                    }
                                    $57 = Math_fround($7 + Math_fround(.5));
                                    if (!($57 < Math_fround(HEAPU32[$4 + 8 >> 2]))) {
                                     break block83
                                    }
                                    vision__ComputeSubpixelDerivatives_28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20vision__Image_20const__2c_20int_2c_20int_29($15 + 28 | 0, $15 + 24 | 0, $15 + 20 | 0, $15 + 16 | 0, $15 + 12 | 0, $8, $10, $1);
                                    $11 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($4, $3, $7);
                                    $6 = $10 << 2;
                                    $19 = $6 + $19 | 0;
                                    $16 = HEAPF32[$19 >> 2];
                                    $24 = HEAPF32[$6 + $26 >> 2];
                                    $68 = HEAPF32[$19 - 4 >> 2];
                                    $51 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($4, $51, $7);
                                    $69 = HEAPF32[$19 + 4 >> 2];
                                    $7 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($4, $33, $7);
                                    $33 = HEAPF32[$6 + $23 >> 2];
                                    $57 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($4, $3, $57);
                                    $66 = HEAPF32[$6 + $25 >> 2];
                                    $3 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($4, $3, $45);
                                    HEAPF32[$0 + 32 >> 2] = HEAPF32[$15 + 20 >> 2];
                                    $45 = HEAPF32[$15 + 12 >> 2];
                                    HEAPF32[$0 + 44 >> 2] = $45;
                                    $7 = Math_fround(Math_fround(Math_fround($68 + $51) - Math_fround($69 + $7)) * Math_fround(.25));
                                    HEAPF32[$0 + 40 >> 2] = $7;
                                    HEAPF32[$0 + 36 >> 2] = $45;
                                    $45 = HEAPF32[$15 + 16 >> 2];
                                    HEAPF32[$0 + 64 >> 2] = $11 + Math_fround($16 - Math_fround($24 + $24));
                                    $3 = Math_fround(Math_fround(Math_fround($33 + $57) - Math_fround($66 + $3)) * Math_fround(.25));
                                    HEAPF32[$0 + 60 >> 2] = $3;
                                    HEAPF32[$0 + 56 >> 2] = $7;
                                    HEAPF32[$0 + 52 >> 2] = $3;
                                    HEAPF32[$0 + 48 >> 2] = $45;
                                    HEAPF32[$0 + 20 >> 2] = -HEAPF32[$15 + 28 >> 2];
                                    $3 = HEAPF32[$15 + 24 >> 2];
                                    HEAPF32[$0 + 28 >> 2] = Math_fround($11 - $16) * Math_fround(-.5);
                                    HEAPF32[$0 + 24 >> 2] = -$3;
                                    __stack_pointer = $15 + 32 | 0;
                                    break block84;
                                   }
                                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19789), 18908), 3164), 413), 3735), 19893));
                                   break block30;
                                  }
                                  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19961), 18908), 3164), 414), 3735), 20020));
                                  break block30;
                                 }
                                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20142), 18908), 3164), 415), 3735), 20194));
                                 break block30;
                                }
                                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20735), 18908), 3164), 416), 3735), 20194));
                                break block30;
                               }
                               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20367), 18908), 3164), 417), 3735), 20194));
                               break block30;
                              }
                              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20829), 18908), 3164), 418), 3735), 20194));
                              break block30;
                             }
                             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20910), 18908), 3164), 428), 3735), 20951));
                             break block30;
                            }
                            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21053), 18908), 3164), 429), 3735), 21135));
                            break block30;
                           }
                           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21281), 18908), 3164), 430), 3735), 20951));
                           break block30;
                          }
                          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21427), 18908), 3164), 431), 3735), 21135));
                          break block30;
                         }
                         break block93;
                        }
                        if (($15 | 0) != ($23 >>> 1 | 0) | ($15 | 0) != ($19 | 0)) {
                         break block85
                        }
                        $15 = __stack_pointer - 32 | 0;
                        __stack_pointer = $15;
                        block92 : {
                         block91 : {
                          block90 : {
                           block89 : {
                            block88 : {
                             block87 : {
                              block86 : {
                               if (($10 | 0) <= 0) {
                                break block86
                               }
                               $19 = HEAP32[$8 + 4 >> 2];
                               if ($19 >>> 0 <= $10 + 1 >>> 0) {
                                break block86
                               }
                               if (($1 | 0) <= 0) {
                                break block87
                               }
                               $25 = $1 + 1 | 0;
                               $23 = HEAP32[$8 + 8 >> 2];
                               if ($25 >>> 0 >= $23 >>> 0) {
                                break block87
                               }
                               if (($19 | 0) != (HEAP32[$6 + 4 >> 2] >>> 1 | 0)) {
                                break block88
                               }
                               if (($19 | 0) != HEAP32[$4 + 4 >> 2]) {
                                break block89
                               }
                               if (($23 | 0) != (HEAP32[$6 + 8 >> 2] >>> 1 | 0)) {
                                break block90
                               }
                               if (($23 | 0) != HEAP32[$4 + 8 >> 2]) {
                                break block91
                               }
                               $23 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($8, $1);
                               $26 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $1 - 1 | 0);
                               $19 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $1);
                               $25 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($4, $25);
                               vision__ComputeSubpixelDerivatives_28float__2c_20float__2c_20float__2c_20float__2c_20float__2c_20vision__Image_20const__2c_20int_2c_20int_29($15 + 28 | 0, $15 + 24 | 0, $15 + 20 | 0, $15 + 16 | 0, $15 + 12 | 0, $8, $10, $1);
                               $3 = Math_fround($10 >>> 0);
                               $3 = Math_fround(Math_fround($3 + $3) + Math_fround(.5));
                               $7 = Math_fround($1 >>> 0);
                               $7 = Math_fround(Math_fround($7 + $7) + Math_fround(.5));
                               $11 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $3, $7);
                               $4 = $10 << 2;
                               $19 = $4 + $19 | 0;
                               $16 = HEAPF32[$19 >> 2];
                               $24 = HEAPF32[$4 + $23 >> 2];
                               $33 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, Math_fround($3 + Math_fround(-2.0)), $7);
                               $45 = HEAPF32[$19 + 4 >> 2];
                               $51 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, Math_fround($3 + Math_fround(2.0)), $7);
                               $57 = HEAPF32[$19 - 4 >> 2];
                               $68 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $3, Math_fround($7 + Math_fround(-2.0)));
                               $69 = HEAPF32[$4 + $25 >> 2];
                               $3 = float_20vision__bilinear_interpolation_float__28vision__Image_20const__2c_20float_2c_20float_29($6, $3, Math_fround($7 + Math_fround(2.0)));
                               $7 = HEAPF32[$4 + $26 >> 2];
                               HEAPF32[$0 + 32 >> 2] = HEAPF32[$15 + 20 >> 2];
                               $66 = HEAPF32[$15 + 12 >> 2];
                               HEAPF32[$0 + 44 >> 2] = $66;
                               $33 = Math_fround(Math_fround(Math_fround($33 + $45) - Math_fround($51 + $57)) * Math_fround(.25));
                               HEAPF32[$0 + 40 >> 2] = $33;
                               HEAPF32[$0 + 36 >> 2] = $66;
                               $45 = HEAPF32[$15 + 16 >> 2];
                               HEAPF32[$0 + 64 >> 2] = $16 + Math_fround($11 - Math_fround($24 + $24));
                               $3 = Math_fround(Math_fround(Math_fround($68 + $69) - Math_fround($3 + $7)) * Math_fround(.25));
                               HEAPF32[$0 + 60 >> 2] = $3;
                               HEAPF32[$0 + 56 >> 2] = $33;
                               HEAPF32[$0 + 52 >> 2] = $3;
                               HEAPF32[$0 + 48 >> 2] = $45;
                               HEAPF32[$0 + 20 >> 2] = -HEAPF32[$15 + 28 >> 2];
                               $3 = HEAPF32[$15 + 24 >> 2];
                               HEAPF32[$0 + 28 >> 2] = Math_fround($16 - $11) * Math_fround(-.5);
                               HEAPF32[$0 + 24 >> 2] = -$3;
                               __stack_pointer = $15 + 32 | 0;
                               break block92;
                              }
                              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19789), 18908), 3164), 359), 3735), 19893));
                              break block30;
                             }
                             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19961), 18908), 3164), 360), 3735), 20020));
                             break block30;
                            }
                            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21529), 18908), 3164), 361), 3735), 20194));
                            break block30;
                           }
                           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20735), 18908), 3164), 362), 3735), 20194));
                           break block30;
                          }
                          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 21636), 18908), 3164), 363), 3735), 20194));
                          break block30;
                         }
                         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 20829), 18908), 3164), 364), 3735), 20194));
                         break block30;
                        }
                        break block93;
                       }
                       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19350), 18908), 3164), 466), 3735), 19481));
                       break block30;
                      }
                      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19547), 18908), 3164), 469), 3735), 19481));
                      break block30;
                     }
                     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19713), 18908), 3164), 475), 3735), 19738));
                     break block30;
                    }
                    $4 = __stack_pointer - 48 | 0;
                    __stack_pointer = $4;
                    $3 = HEAPF32[$0 + 36 >> 2];
                    $7 = HEAPF32[$0 + 40 >> 2];
                    $11 = HEAPF32[$0 + 52 >> 2];
                    $16 = HEAPF32[$0 + 64 >> 2];
                    $33 = Math_fround(Math_fround(Math_fround(Math_fround($3 + $3) * $7) * $11) - Math_fround($16 * Math_fround($3 * $3)));
                    $3 = HEAPF32[$0 + 48 >> 2];
                    $33 = Math_fround($33 - Math_fround(Math_fround($7 * $7) * $3));
                    $7 = HEAPF32[$0 + 32 >> 2];
                    $3 = Math_fround(Math_fround($33 - Math_fround(Math_fround($11 * $11) * $7)) + Math_fround($16 * Math_fround($3 * $7)));
                    $6 = Math_fround(Math_abs($3)) <= Math_fround(1.1920928955078125e-07);
                    if (!$6) {
                     $3 = Math_fround(Math_fround(1.0) / $3);
                     $7 = HEAPF32[$0 + 52 >> 2];
                     HEAPF32[$4 >> 2] = $3 * Math_fround(Math_fround(HEAPF32[$0 + 48 >> 2] * HEAPF32[$0 + 64 >> 2]) - Math_fround($7 * $7));
                     $11 = Math_fround($3 * Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] * HEAPF32[$0 + 60 >> 2]) - Math_fround(HEAPF32[$0 + 36 >> 2] * HEAPF32[$0 + 64 >> 2])));
                     HEAPF32[$4 + 4 >> 2] = $11;
                     $16 = Math_fround($3 * Math_fround(Math_fround(HEAPF32[$0 + 36 >> 2] * HEAPF32[$0 + 52 >> 2]) - Math_fround(HEAPF32[$0 + 40 >> 2] * HEAPF32[$0 + 48 >> 2])));
                     HEAPF32[$4 + 8 >> 2] = $16;
                     $7 = HEAPF32[$0 + 40 >> 2];
                     HEAPF32[$4 + 16 >> 2] = $3 * Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 64 >> 2]) - Math_fround($7 * $7));
                     $24 = Math_fround($3 * Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] * HEAPF32[$0 + 44 >> 2]) - Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 52 >> 2])));
                     HEAPF32[$4 + 20 >> 2] = $24;
                     $7 = HEAPF32[$0 + 36 >> 2];
                     $33 = HEAPF32[$0 + 48 >> 2];
                     $45 = HEAPF32[$0 + 32 >> 2];
                     HEAPF32[$4 + 28 >> 2] = $24;
                     HEAPF32[$4 + 24 >> 2] = $16;
                     HEAPF32[$4 + 12 >> 2] = $11;
                     HEAPF32[$4 + 32 >> 2] = $3 * Math_fround(Math_fround($45 * $33) - Math_fround($7 * $7));
                    }
                    $6 = !$6;
                    if ($6) {
                     HEAPF32[$0 + 8 >> 2] = Math_fround(HEAPF32[$4 + 8 >> 2] * HEAPF32[$0 + 28 >> 2]) + Math_fround(Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$0 + 20 >> 2]) + Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$0 + 24 >> 2]));
                     HEAPF32[$0 + 12 >> 2] = Math_fround(HEAPF32[$4 + 20 >> 2] * HEAPF32[$0 + 28 >> 2]) + Math_fround(Math_fround(HEAPF32[$4 + 12 >> 2] * HEAPF32[$0 + 20 >> 2]) + Math_fround(HEAPF32[$4 + 16 >> 2] * HEAPF32[$0 + 24 >> 2]));
                     HEAPF32[$0 + 16 >> 2] = Math_fround(HEAPF32[$4 + 32 >> 2] * HEAPF32[$0 + 28 >> 2]) + Math_fround(Math_fround(HEAPF32[$4 + 24 >> 2] * HEAPF32[$0 + 20 >> 2]) + Math_fround(HEAPF32[$4 + 28 >> 2] * HEAPF32[$0 + 24 >> 2]));
                    }
                    __stack_pointer = $4 + 48 | 0;
                    block94 : {
                     if (!$6) {
                      break block94
                     }
                     $3 = HEAPF32[$0 + 8 >> 2];
                     $7 = Math_fround($3 * $3);
                     $3 = HEAPF32[$0 + 12 >> 2];
                     if (HEAPF32[$9 + 88 >> 2] < Math_fround($7 + Math_fround($3 * $3))) {
                      break block94
                     }
                     $7 = HEAPF32[$0 + 32 >> 2];
                     $11 = HEAPF32[$0 + 48 >> 2];
                     $3 = HEAPF32[$0 + 36 >> 2];
                     $3 = Math_fround(Math_fround($7 * $11) - Math_fround($3 * $3));
                     if ($3 != Math_fround(0.0)) {
                      $7 = Math_fround($7 + $11);
                      HEAPF32[$17 + 32 >> 2] = Math_fround($7 * $7) / $3;
                     }
                     if ($3 == Math_fround(0.0)) {
                      break block94
                     }
                     $4 = $10 << 2;
                     if (HEAPF32[$17 + 24 >> 2] != HEAPF32[float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($8, $1) + $4 >> 2]) {
                      break block95
                     }
                     $11 = Math_fround(HEAPF32[float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($8, $1) + $4 >> 2] - Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2] * HEAPF32[$0 + 16 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 20 >> 2] * HEAPF32[$0 + 8 >> 2]) + Math_fround(HEAPF32[$0 + 24 >> 2] * HEAPF32[$0 + 12 >> 2]))));
                     HEAPF32[$17 + 24 >> 2] = $11;
                     $3 = HEAPF32[$0 + 12 >> 2];
                     $1 = HEAP32[$17 + 12 >> 2];
                     $21 = ldexp($1 - 1 | 0);
                     $7 = HEAPF32[$0 + 8 >> 2];
                     $16 = Math_fround($47 + $3);
                     $3 = Math_fround(1 << $1);
                     $24 = Math_fround($21 + -.5);
                     $16 = Math_fround(Math_fround($16 * $3) + $24);
                     HEAPF32[$17 + 4 >> 2] = $16;
                     $24 = Math_fround(Math_fround(Math_fround($43 + $7) * $3) + $24);
                     HEAPF32[$17 >> 2] = $24;
                     $3 = Math_fround(0.0);
                     $7 = Math_fround(HEAPF32[$0 + 16 >> 2] + Math_fround(HEAP32[$17 + 16 >> 2]));
                     block96 : {
                      if ($7 < Math_fround(0.0)) {
                       break block96
                      }
                      $3 = $7;
                      $7 = Math_fround(HEAP32[$9 + 48 >> 2]);
                      if (!($3 > $7)) {
                       break block96
                      }
                      $3 = $7;
                     }
                     HEAPF32[$17 + 20 >> 2] = $3;
                     if (!($24 >= Math_fround(0.0)) | (!($46 > Math_fround(Math_abs(HEAPF32[$17 + 32 >> 2]))) | !($42 <= Math_fround($11 * $11)))) {
                      break block94
                     }
                     $4 = HEAP32[$9 + 32 >> 2];
                     if (!($24 < Math_fround(HEAPU32[$4 + 4 >> 2])) | !($16 >= Math_fround(0.0)) | !($16 < Math_fround(HEAPU32[$4 + 8 >> 2]))) {
                      break block94
                     }
                     (wasm2js_i32$0 = $17, wasm2js_f32$0 = vision__GaussianScaleSpacePyramid__effectiveSigma_28unsigned_20long_2c_20float_29_20const($13, $1, $3)), HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
                     wasm2js_memory_copy(HEAP32[$12 >> 2] + Math_imul($2, 36) | 0, $17, 36);
                     $2 = $2 + 1 | 0;
                    }
                    $5 = $5 + 1 | 0;
                    continue;
                   }
                   break;
                  };
                  $4 = HEAP32[$12 >> 2];
                  $1 = (HEAP32[$12 + 4 >> 2] - $4 | 0) / 36 | 0;
                  block98 : {
                   if ($1 >>> 0 < $2 >>> 0) {
                    $5 = __stack_pointer - 32 | 0;
                    __stack_pointer = $5;
                    $1 = $2 - $1 | 0;
                    $2 = HEAP32[$12 + 4 >> 2];
                    block97 : {
                     if ($1 >>> 0 <= (HEAP32[$12 + 8 >> 2] - $2 | 0) / 36 >>> 0) {
                      $4 = HEAP32[$12 + 4 >> 2];
                      $1 = $4 + Math_imul($1, 36) | 0;
                      while (1) {
                       if (($1 | 0) == ($4 | 0)) {
                        HEAP32[$12 + 4 >> 2] = $1
                       } else {
                        wasm2js_memory_fill($4, 0, 36);
                        $4 = $4 + 36 | 0;
                        continue;
                       }
                       break;
                      };
                      break block97;
                     }
                     $2 = std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint___29($5 + 12 | 0, std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($12, $1 + (($2 - HEAP32[$12 >> 2] | 0) / 36 | 0) | 0), (HEAP32[$12 + 4 >> 2] - HEAP32[$12 >> 2] | 0) / 36 | 0, $12);
                     $4 = HEAP32[$2 + 8 >> 2];
                     $1 = $4 + Math_imul($1, 36) | 0;
                     while (1) {
                      if (($1 | 0) != ($4 | 0)) {
                       wasm2js_memory_fill($4, 0, 36);
                       $4 = $4 + 36 | 0;
                       continue;
                      }
                      break;
                     };
                     HEAP32[$2 + 8 >> 2] = $1;
                     std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint_____29($12, $2);
                     std____2____split_buffer_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint________split_buffer_28_29($2);
                    }
                    __stack_pointer = $5 + 32 | 0;
                    break block98;
                   }
                   if ($1 >>> 0 > $2 >>> 0) {
                    HEAP32[$12 + 4 >> 2] = $4 + Math_imul($2, 36)
                   }
                  }
                  __stack_pointer = $0 + 80 | 0;
                  break block99;
                 }
                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18030), 2028), 3164), 489), 3735), 18102));
                 break block30;
                }
                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18258), 2028), 3164), 526), 3735), 18359));
                break block30;
               }
               vision__ScopedTimer___ScopedTimer_28_29($32);
               $37 = vision__ScopedTimer__ScopedTimer_28char_20const__29($49, 14772);
               $17 = __stack_pointer - 16 | 0;
               __stack_pointer = $17;
               block119 : {
                block118 : {
                 block101 : {
                  block100 : {
                   $4 = HEAP32[$9 + 84 >> 2];
                   if ($4 >>> 0 < (HEAP32[$9 + 64 >> 2] - HEAP32[$9 + 60 >> 2] | 0) / 36 >>> 0) {
                    $0 = HEAP32[$9 + 16 >> 2];
                    $5 = (HEAP32[$9 + 20 >> 2] - $0 | 0) / 12 | 0;
                    if (($5 | 0) != HEAP32[$9 + 8 >> 2]) {
                     break block100
                    }
                    $6 = (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
                    if (($6 | 0) != HEAP32[$9 + 12 >> 2]) {
                     break block101
                    }
                    HEAP32[$17 + 12 >> 2] = 0;
                    HEAP32[$17 + 4 >> 2] = 0;
                    HEAP32[$17 + 8 >> 2] = 0;
                    $8 = HEAP32[$9 >> 2];
                    $10 = HEAP32[$9 + 4 >> 2];
                    $0 = 0;
                    $15 = __stack_pointer - 16 | 0;
                    __stack_pointer = $15;
                    $23 = $17 + 4 | 0;
                    HEAP32[$23 + 4 >> 2] = HEAP32[$23 >> 2];
                    std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____reserve_28unsigned_20long_29($23, $4);
                    $12 = HEAP32[$9 + 16 >> 2];
                    $19 = (HEAP32[$9 + 20 >> 2] - $12 | 0) / 12 | 0;
                    label38 : while (1) {
                     if (($0 | 0) != ($19 | 0)) {
                      $2 = $12 + Math_imul($0, 12) | 0;
                      $1 = HEAP32[$2 >> 2];
                      $25 = (HEAP32[$2 + 4 >> 2] - $1 | 0) / 12 | 0;
                      $2 = 0;
                      while (1) if (($2 | 0) == ($25 | 0)) {
                       $0 = $0 + 1 | 0;
                       continue label38;
                      } else {
                       $32 = $1 + Math_imul($2, 12) | 0;
                       HEAP32[$32 + 4 >> 2] = HEAP32[$32 >> 2];
                       $2 = $2 + 1 | 0;
                       continue;
                      };
                     }
                     break;
                    };
                    $3 = Math_fround(Math_ceil(Math_fround(Math_fround($10 | 0) / Math_fround($6 | 0))));
                    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
                     $0 = ~~$3
                    } else {
                     $0 = -2147483648
                    }
                    $3 = Math_fround($0 | 0);
                    $7 = Math_fround(Math_ceil(Math_fround(Math_fround($8 | 0) / Math_fround($5 | 0))));
                    if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
                     $0 = ~~$7
                    } else {
                     $0 = -2147483648
                    }
                    $7 = Math_fround($0 | 0);
                    $2 = 0;
                    while (1) {
                     $0 = HEAP32[$9 + 60 >> 2];
                     if ((HEAP32[$9 + 64 >> 2] - $0 | 0) / 36 >>> 0 <= $2 >>> 0) {
                      $35 = ($4 | 0) / (Math_imul($5, $6) | 0) | 0;
                      $2 = HEAP32[$9 + 16 >> 2];
                      $0 = 0;
                      label40 : while (1) {
                       block102 : {
                        $4 = 0;
                        if ((HEAP32[$9 + 20 >> 2] - $2 | 0) / 12 >>> 0 <= $0 >>> 0) {
                         break block102
                        }
                        while (1) {
                         $5 = Math_imul($0, 12) + $2 | 0;
                         $1 = HEAP32[$5 >> 2];
                         if ((HEAP32[$5 + 4 >> 2] - $1 | 0) / 12 >>> 0 <= $4 >>> 0) {
                          $0 = $0 + 1 | 0;
                          continue label40;
                         } else {
                          $25 = $1 + Math_imul($4, 12) | 0;
                          $8 = HEAP32[$25 + 4 >> 2];
                          $1 = HEAP32[$25 >> 2];
                          $5 = $8 - $1 >> 3;
                          $32 = $5 >>> 0 > $35 >>> 0 ? $35 : $5;
                          if ($32) {
                           $20 = __stack_pointer - 16 | 0;
                           __stack_pointer = $20;
                           $59 = $32 << 3;
                           $19 = $59 + $1 | 0;
                           if (($19 | 0) != ($8 | 0)) {
                            $10 = __stack_pointer - 16 | 0;
                            __stack_pointer = $10;
                            while (1) {
                             block103 : {
                              if (($8 | 0) == ($19 | 0)) {
                               break block103
                              }
                              block113 : {
                               block109 : {
                                block110 : {
                                 block105 : {
                                  block106 : {
                                   block104 : {
                                    $2 = $8 - $1 >> 3;
                                    switch ($2 | 0) {
                                    case 0:
                                    case 1:
                                     break block103;
                                    case 2:
                                     break block104;
                                    case 3:
                                     break block105;
                                    default:
                                     break block106;
                                    };
                                   }
                                   $2 = $8 - 8 | 0;
                                   if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($1, $2)) {
                                    break block103
                                   }
                                   $3 = HEAPF32[$1 >> 2];
                                   HEAPF32[$1 >> 2] = HEAPF32[$2 >> 2];
                                   HEAPF32[$2 >> 2] = $3;
                                   $2 = HEAP32[$1 + 4 >> 2];
                                   $5 = $1;
                                   $1 = $8 - 4 | 0;
                                   HEAP32[$5 + 4 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$1 >> 2] = $2;
                                   break block103;
                                  }
                                  if (($2 | 0) <= 7) {
                                   $12 = $8 - 8 | 0;
                                   while (1) {
                                    if (($1 | 0) != ($12 | 0)) {
                                     $6 = __stack_pointer - 16 | 0;
                                     __stack_pointer = $6;
                                     HEAP8[$6 + 15 | 0] = 0;
                                     $5 = $1;
                                     block107 : {
                                      if (($1 | 0) == ($8 | 0)) {
                                       break block107
                                      }
                                      $2 = $1;
                                      while (1) {
                                       $2 = $2 + 8 | 0;
                                       if (($8 | 0) == ($2 | 0)) {
                                        break block107
                                       }
                                       $5 = bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($5, $2) ? $2 : $5;
                                       continue;
                                      };
                                     }
                                     __stack_pointer = $6 + 16 | 0;
                                     if (($1 | 0) != ($5 | 0)) {
                                      $3 = HEAPF32[$1 >> 2];
                                      HEAPF32[$1 >> 2] = HEAPF32[$5 >> 2];
                                      HEAPF32[$5 >> 2] = $3;
                                      $2 = HEAP32[$1 + 4 >> 2];
                                      HEAP32[$1 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
                                      HEAP32[$5 + 4 >> 2] = $2;
                                     }
                                     $1 = $1 + 8 | 0;
                                     continue;
                                    }
                                    break;
                                   };
                                   break block103;
                                  }
                                  $2 = ($2 << 2 & -8) + $1 | 0;
                                  $6 = $8 - 8 | 0;
                                  $12 = bool_20std____2____sort3_5babi_ne200100_5d_std____2___ClassicAlgPolicy_2c_20std____2__greater_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_200__28std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__greater_std____2__pair_float_2c_20unsigned_20long____29($1, $2, $6);
                                  HEAP32[$10 + 12 >> 2] = $1;
                                  HEAP32[$10 + 8 >> 2] = $6;
                                  if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $1)) {
                                   while (1) {
                                    block108 : {
                                     $26 = HEAP32[$10 + 8 >> 2] - 8 | 0;
                                     HEAP32[$10 + 8 >> 2] = $26;
                                     $63 = HEAP32[$10 + 12 >> 2];
                                     if (($63 | 0) == ($26 | 0)) {
                                      break block108
                                     }
                                     if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $26)) {
                                      continue
                                     }
                                    }
                                    break;
                                   };
                                   $5 = HEAP32[$10 + 12 >> 2];
                                   if (($26 | 0) == ($63 | 0)) {
                                    break block109
                                   }
                                   $3 = HEAPF32[$5 >> 2];
                                   $6 = HEAP32[$10 + 8 >> 2];
                                   HEAPF32[$5 >> 2] = HEAPF32[$6 >> 2];
                                   HEAPF32[$6 >> 2] = $3;
                                   $26 = HEAP32[$5 + 4 >> 2];
                                   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
                                   HEAP32[$6 + 4 >> 2] = $26;
                                   $12 = $12 ? 2 : 1;
                                  }
                                  $5 = HEAP32[$10 + 12 >> 2] + 8 | 0;
                                  HEAP32[$10 + 12 >> 2] = $5;
                                  if (HEAPU32[$10 + 8 >> 2] <= $5 >>> 0) {
                                   break block110
                                  }
                                  while (1) {
                                   if (bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $5)) {
                                    $5 = HEAP32[$10 + 12 >> 2] + 8 | 0;
                                    HEAP32[$10 + 12 >> 2] = $5;
                                    continue;
                                   }
                                   while (1) {
                                    $5 = HEAP32[$10 + 8 >> 2] - 8 | 0;
                                    HEAP32[$10 + 8 >> 2] = $5;
                                    if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $5)) {
                                     continue
                                    }
                                    break;
                                   };
                                   $6 = HEAP32[$10 + 12 >> 2];
                                   $5 = HEAP32[$10 + 8 >> 2];
                                   if ($6 >>> 0 >= $5 >>> 0) {
                                    $5 = $6;
                                    break block110;
                                   } else {
                                    $3 = HEAPF32[$6 >> 2];
                                    HEAPF32[$6 >> 2] = HEAPF32[$5 >> 2];
                                    HEAPF32[$5 >> 2] = $3;
                                    $26 = HEAP32[$6 + 4 >> 2];
                                    HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
                                    HEAP32[$5 + 4 >> 2] = $26;
                                    $5 = $6 + 8 | 0;
                                    HEAP32[$10 + 12 >> 2] = $5;
                                    $2 = ($2 | 0) == ($6 | 0) ? HEAP32[$10 + 8 >> 2] : $2;
                                    $12 = $12 + 1 | 0;
                                    continue;
                                   }
                                  };
                                 }
                                 bool_20std____2____sort3_5babi_ne200100_5d_std____2___ClassicAlgPolicy_2c_20std____2__greater_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_200__28std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2____wrap_iter_std____2__pair_float_2c_20unsigned_20long____2c_20std____2__greater_std____2__pair_float_2c_20unsigned_20long____29($1, $1 + 8 | 0, $8 - 8 | 0);
                                 break block103;
                                }
                                block111 : {
                                 if (($2 | 0) == ($5 | 0)) {
                                  break block111
                                 }
                                 $6 = bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($5, $2);
                                 $5 = HEAP32[$10 + 12 >> 2];
                                 if (!$6) {
                                  break block111
                                 }
                                 $3 = HEAPF32[$5 >> 2];
                                 HEAPF32[$5 >> 2] = HEAPF32[$2 >> 2];
                                 HEAPF32[$2 >> 2] = $3;
                                 $6 = HEAP32[$5 + 4 >> 2];
                                 HEAP32[$5 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
                                 HEAP32[$2 + 4 >> 2] = $6;
                                 $12 = $12 + 1 | 0;
                                 $5 = HEAP32[$10 + 12 >> 2];
                                }
                                if (($5 | 0) == ($19 | 0)) {
                                 break block103
                                }
                                block112 : {
                                 if ($12) {
                                  break block112
                                 }
                                 $2 = $1;
                                 if ($5 >>> 0 > $19 >>> 0) {
                                  while (1) {
                                   $6 = $2 + 8 | 0;
                                   HEAP32[$10 + 8 >> 2] = $6;
                                   if (($5 | 0) == ($6 | 0)) {
                                    break block103
                                   }
                                   if (bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $6)) {
                                    break block112
                                   }
                                   $5 = HEAP32[$10 + 12 >> 2];
                                   $2 = HEAP32[$10 + 8 >> 2];
                                   continue;
                                  }
                                 }
                                 while (1) {
                                  $2 = $5 + 8 | 0;
                                  HEAP32[$10 + 8 >> 2] = $2;
                                  if (($2 | 0) == ($8 | 0)) {
                                   break block103
                                  }
                                  if (bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($5, $2)) {
                                   break block112
                                  }
                                  $5 = HEAP32[$10 + 8 >> 2];
                                  continue;
                                 };
                                }
                                $5 = HEAP32[$10 + 12 >> 2];
                                $6 = $5 >>> 0 > $19 >>> 0;
                                $2 = $6 ? $1 : $5 + 8 | 0;
                                $8 = $6 ? $5 : $8;
                                break block113;
                               }
                               HEAP32[$10 + 8 >> 2] = $6;
                               HEAP32[$10 + 12 >> 2] = $5 + 8;
                               $5 = bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($6, $1);
                               $2 = HEAP32[$10 + 12 >> 2];
                               if (!$5) {
                                while (1) {
                                 if (HEAP32[$10 + 8 >> 2] == ($2 | 0)) {
                                  break block103
                                 }
                                 $5 = bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $1);
                                 $2 = HEAP32[$10 + 12 >> 2];
                                 if ($5) {
                                  $3 = HEAPF32[$2 >> 2];
                                  $5 = HEAP32[$10 + 8 >> 2];
                                  HEAPF32[$2 >> 2] = HEAPF32[$5 >> 2];
                                  HEAPF32[$5 >> 2] = $3;
                                  $6 = HEAP32[$2 + 4 >> 2];
                                  HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
                                  HEAP32[$5 + 4 >> 2] = $6;
                                  $2 = $2 + 8 | 0;
                                  HEAP32[$10 + 12 >> 2] = $2;
                                 } else {
                                  $2 = $2 + 8 | 0;
                                  HEAP32[$10 + 12 >> 2] = $2;
                                  continue;
                                 }
                                 break;
                                }
                               }
                               if (HEAP32[$10 + 8 >> 2] == ($2 | 0)) {
                                break block103
                               }
                               while (1) {
                                block115 : {
                                 block114 : {
                                  if (!bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $1)) {
                                   $2 = HEAP32[$10 + 12 >> 2];
                                   break block114;
                                  }
                                  while (1) {
                                   $2 = HEAP32[$10 + 8 >> 2] - 8 | 0;
                                   HEAP32[$10 + 8 >> 2] = $2;
                                   if (bool_20std____2__operator__5babi_ne200100_5d_float_2c_20unsigned_20long_2c_20float_2c_20unsigned_20long__28std____2__pair_float_2c_20unsigned_20long__20const__2c_20std____2__pair_float_2c_20unsigned_20long__20const__29($2, $1)) {
                                    continue
                                   }
                                   break;
                                  };
                                  $2 = HEAP32[$10 + 12 >> 2];
                                  $5 = HEAP32[$10 + 8 >> 2];
                                  if ($2 >>> 0 >= $5 >>> 0) {
                                   break block115
                                  }
                                  $3 = HEAPF32[$2 >> 2];
                                  HEAPF32[$2 >> 2] = HEAPF32[$5 >> 2];
                                  HEAPF32[$5 >> 2] = $3;
                                  $6 = HEAP32[$2 + 4 >> 2];
                                  HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
                                  HEAP32[$5 + 4 >> 2] = $6;
                                 }
                                 $2 = $2 + 8 | 0;
                                 HEAP32[$10 + 12 >> 2] = $2;
                                 continue;
                                }
                                break;
                               };
                               if ($2 >>> 0 > $19 >>> 0) {
                                break block103
                               }
                              }
                              $1 = $2;
                              continue;
                             }
                             break;
                            };
                            __stack_pointer = $10 + 16 | 0;
                           }
                           __stack_pointer = $20 + 16 | 0;
                           $1 = HEAP32[$25 >> 2];
                           if (!($32 >>> 0 <= HEAP32[$25 + 4 >> 2] - $1 >> 3 >>> 0 | HEAPF32[$1 >> 2] >= HEAPF32[$1 + $59 >> 2])) {
                            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 18419), 2028), 3164), 661), 3735), 18477));
                            break block30;
                           }
                           $2 = 0;
                           while (1) {
                            if (($2 | 0) != ($32 | 0)) {
                             vision__DoGScaleInvariantDetector__FeaturePoint__20std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____emplace_back_vision__DoGScaleInvariantDetector__FeaturePoint_20const___28vision__DoGScaleInvariantDetector__FeaturePoint_20const__29($23, HEAP32[$9 + 60 >> 2] + Math_imul(HEAP32[(HEAP32[$25 >> 2] + ($2 << 3) | 0) + 4 >> 2], 36) | 0);
                             $2 = $2 + 1 | 0;
                             continue;
                            }
                            break;
                           };
                           $2 = HEAP32[$9 + 16 >> 2];
                          }
                          $4 = $4 + 1 | 0;
                          continue;
                         }
                        };
                       }
                       break;
                      };
                      __stack_pointer = $15 + 16 | 0;
                     } else {
                      $10 = HEAP32[$9 + 16 >> 2];
                      $0 = $0 + Math_imul($2, 36) | 0;
                      $11 = Math_fround(HEAPF32[$0 >> 2] / $7);
                      if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                       $1 = ~~$11
                      } else {
                       $1 = -2147483648
                      }
                      $1 = HEAP32[$10 + Math_imul($1, 12) >> 2];
                      $11 = HEAPF32[$0 + 4 >> 2];
                      $16 = HEAPF32[$0 + 24 >> 2];
                      HEAP32[$15 + 12 >> 2] = $2;
                      HEAPF32[$15 + 8 >> 2] = Math_abs($16);
                      $11 = Math_fround($11 / $3);
                      if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                       $0 = ~~$11
                      } else {
                       $0 = -2147483648
                      }
                      $0 = Math_imul($0, 12) + $1 | 0;
                      $10 = $0;
                      $1 = HEAP32[$0 + 4 >> 2];
                      block117 : {
                       if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
                        $0 = HEAP32[$15 + 12 >> 2];
                        HEAP32[$1 >> 2] = HEAP32[$15 + 8 >> 2];
                        HEAP32[$1 + 4 >> 2] = $0;
                        $0 = $1 + 8 | 0;
                        break block117;
                       }
                       $8 = __stack_pointer - 32 | 0;
                       __stack_pointer = $8;
                       $1 = (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3) + 1 | 0;
                       if ($1 >>> 0 >= 536870912) {
                        std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
                        wasm2js_trap();
                       }
                       $12 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
                       $19 = $12 >> 2;
                       $1 = std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____29($8 + 12 | 0, $12 >>> 0 >= 2147483640 ? 536870911 : $1 >>> 0 < $19 >>> 0 ? $19 : $1, HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3, $0);
                       $12 = HEAP32[$1 + 8 >> 2];
                       $19 = HEAP32[$15 + 12 >> 2];
                       HEAP32[$12 >> 2] = HEAP32[$15 + 8 >> 2];
                       HEAP32[$12 + 4 >> 2] = $19;
                       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 8;
                       std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $1);
                       $0 = HEAP32[$0 + 4 >> 2];
                       std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________split_buffer_28_29($1);
                       __stack_pointer = $8 + 32 | 0;
                      }
                      HEAP32[$10 + 4 >> 2] = $0;
                      $2 = $2 + 1 | 0;
                      continue;
                     }
                     break;
                    };
                    $0 = HEAP32[$9 + 60 >> 2];
                    $1 = HEAP32[$17 + 4 >> 2];
                    HEAP32[$9 + 60 >> 2] = $1;
                    HEAP32[$17 + 4 >> 2] = $0;
                    $0 = HEAP32[$9 + 64 >> 2];
                    $2 = HEAP32[$17 + 8 >> 2];
                    HEAP32[$9 + 64 >> 2] = $2;
                    HEAP32[$17 + 8 >> 2] = $0;
                    $0 = HEAP32[$9 + 68 >> 2];
                    HEAP32[$9 + 68 >> 2] = HEAP32[$17 + 12 >> 2];
                    HEAP32[$17 + 12 >> 2] = $0;
                    if (HEAPU32[$9 + 84 >> 2] < ($2 - $1 | 0) / 36 >>> 0) {
                     break block118
                    }
                    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($23);
                   }
                   __stack_pointer = $17 + 16 | 0;
                   break block119;
                  }
                  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 16651), 2028), 3164), 454), 3735), 16996));
                  break block30;
                 }
                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17172), 2028), 3164), 455), 3735), 16996));
                 break block30;
                }
                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17329), 2028), 3164), 469), 3735), 17801));
                break block30;
               }
               vision__ScopedTimer___ScopedTimer_28_29($37);
               $32 = vision__ScopedTimer__ScopedTimer_28char_20const__29($49, 14968);
               $4 = 0;
               $15 = 0;
               $17 = __stack_pointer - 48 | 0;
               __stack_pointer = $17;
               block120 : {
                if (!HEAPU8[$9 + 28 | 0]) {
                 $0 = HEAP32[$9 + 60 >> 2];
                 $1 = (HEAP32[$9 + 64 >> 2] - $0 | 0) / 36 | 0;
                 while (1) {
                  if (($1 | 0) == ($4 | 0)) {
                   break block120
                  }
                  HEAP32[($0 + Math_imul($4, 36) | 0) + 8 >> 2] = 0;
                  $4 = $4 + 1 | 0;
                  continue;
                 };
                }
                HEAP32[$9 + 76 >> 2] = HEAP32[$9 + 72 >> 2];
                $23 = $9 + 72 | 0;
                std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____reserve_28unsigned_20long_29($23, HEAP32[$9 + 64 >> 2] - HEAP32[$9 + 60 >> 2] | 0);
                $12 = 0;
                block123 : {
                 block121 : {
                  while (1) {
                   $0 = HEAP32[$13 + 4 >> 2];
                   if (HEAP32[$13 + 8 >> 2] - $0 >> 5 >>> 0 > $12 >>> 0) {
                    $1 = $12 << 5;
                    $0 = $1 + $0 | 0;
                    $10 = HEAP32[$0 + 4 >> 2];
                    if (($10 | 0) != (HEAP32[$0 + 12 >> 2] >>> 2 | 0)) {
                     break block121
                    }
                    $25 = HEAP32[$0 + 8 >> 2];
                    $5 = HEAP32[$0 + 24 >> 2];
                    $3 = HEAPF32[$5 >> 2];
                    $1 = HEAP32[($1 + HEAP32[$9 + 132 >> 2] | 0) + 24 >> 2];
                    $7 = Math_fround(HEAPF32[$5 + 4 >> 2] - $3);
                    $2 = $5 + ($10 << 2) | 0;
                    $3 = Math_fround(HEAPF32[$2 >> 2] - $3);
                    HEAPF32[$1 + 4 >> 2] = Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($3 * $3)));
                    (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+atan2f($3, $7) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
                    $0 = $10 - 1 | 0;
                    $19 = $0 >>> 0 <= 1 ? 1 : $0;
                    $8 = $5 + 4 | 0;
                    $4 = $2;
                    $6 = 1;
                    while (1) {
                     block122 : {
                      $0 = $1 + 8 | 0;
                      $3 = HEAPF32[$8 - 4 >> 2];
                      $7 = HEAPF32[$4 + 4 >> 2];
                      if (($6 | 0) == ($19 | 0)) {
                       $11 = HEAPF32[$8 >> 2];
                       $3 = Math_fround($11 - $3);
                       $7 = Math_fround($7 - $11);
                       HEAPF32[$1 + 12 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                       (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
                       $25 = $25 - 1 | 0;
                       $26 = $25 >>> 0 <= 1 ? 1 : $25;
                       $8 = ($10 << 2) + $2 | 0;
                       $4 = $5;
                       $6 = 1;
                       label57 : while (1) {
                        if (($6 | 0) == ($26 | 0)) {
                         $1 = $0 + 8 | 0;
                         $4 = $5 + (Math_imul($10, $25) << 2) | 0;
                         $3 = HEAPF32[$4 >> 2];
                         $7 = Math_fround(HEAPF32[$4 + 4 >> 2] - $3);
                         $2 = $4 - ($10 << 2) | 0;
                         $3 = Math_fround($3 - HEAPF32[$2 >> 2]);
                         HEAPF32[$0 + 12 >> 2] = Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($3 * $3)));
                         (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(+atan2f($3, $7) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
                         $0 = $4 + 4 | 0;
                         $8 = 1;
                         while (1) {
                          $2 = $2 + 4 | 0;
                          if (($8 | 0) == ($19 | 0)) {
                           break block122
                          }
                          $4 = $0 + 4 | 0;
                          $3 = Math_fround(HEAPF32[$4 >> 2] - HEAPF32[$0 - 4 >> 2]);
                          $7 = Math_fround(HEAPF32[$0 >> 2] - HEAPF32[$2 >> 2]);
                          HEAPF32[$1 + 12 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                          (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
                          $8 = $8 + 1 | 0;
                          $1 = $1 + 8 | 0;
                          $0 = $4;
                          continue;
                         };
                        }
                        $3 = Math_fround(HEAPF32[$2 + 4 >> 2] - HEAPF32[$2 >> 2]);
                        $7 = Math_fround(HEAPF32[$8 >> 2] - HEAPF32[$4 >> 2]);
                        HEAPF32[$0 + 12 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                        (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
                        $0 = $0 + 16 | 0;
                        $1 = $2 + 4 | 0;
                        $2 = 1;
                        while (1) if (($2 | 0) == ($19 | 0)) {
                         $3 = Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$1 - 4 >> 2]);
                         $7 = Math_fround(HEAPF32[$8 + 4 >> 2] - HEAPF32[$4 + 4 >> 2]);
                         HEAPF32[$0 + 4 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                         (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
                         $6 = $6 + 1 | 0;
                         $8 = $8 + 8 | 0;
                         $4 = $4 + 8 | 0;
                         $2 = $1 + 4 | 0;
                         continue label57;
                        } else {
                         $3 = Math_fround(HEAPF32[$1 + 4 >> 2] - HEAPF32[$1 - 4 >> 2]);
                         $8 = $8 + 4 | 0;
                         $4 = $4 + 4 | 0;
                         $7 = Math_fround(HEAPF32[$8 >> 2] - HEAPF32[$4 >> 2]);
                         HEAPF32[$0 + 4 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                         (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
                         $2 = $2 + 1 | 0;
                         $0 = $0 + 8 | 0;
                         $1 = $1 + 4 | 0;
                         continue;
                        };
                       };
                      } else {
                       $4 = $4 + 4 | 0;
                       $11 = HEAPF32[$8 >> 2];
                       $8 = $8 + 4 | 0;
                       $3 = Math_fround(HEAPF32[$8 >> 2] - $3);
                       $7 = Math_fround($7 - $11);
                       HEAPF32[$1 + 12 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                       (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
                       $6 = $6 + 1 | 0;
                       $1 = $0;
                       continue;
                      }
                     }
                     break;
                    };
                    $7 = HEAPF32[$0 >> 2];
                    $3 = Math_fround($7 - HEAPF32[$0 - 4 >> 2]);
                    $7 = Math_fround($7 - HEAPF32[$2 >> 2]);
                    HEAPF32[$1 + 12 >> 2] = Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($7 * $7)));
                    (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+atan2f($7, $3) + 3.141592653589793)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
                    $12 = $12 + 1 | 0;
                    continue;
                   }
                   break;
                  };
                  break block123;
                 }
                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 1338), 1864), 3164), 96), 3735), 4008));
                 break block30;
                }
                $25 = $9 + 60 | 0;
                label70 : while (1) {
                 $0 = HEAP32[$9 + 60 >> 2];
                 if ((HEAP32[$9 + 64 >> 2] - $0 | 0) / 36 >>> 0 <= $15 >>> 0) {
                  std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____swap_28std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____29($25, $23);
                  break block120;
                 }
                 $19 = Math_imul($15, 36);
                 $0 = $19 + $0 | 0;
                 $46 = HEAPF32[$0 + 28 >> 2];
                 $1 = HEAP32[$0 + 12 >> 2];
                 $24 = Math_fround(Math_fround(1.0) / Math_fround(1 << $1));
                 $16 = Math_fround(Math_fround($24 * Math_fround(.5)) + Math_fround(-.5));
                 $11 = Math_fround(Math_fround(HEAPF32[$0 + 4 >> 2] * $24) + $16);
                 $42 = HEAPF32[$0 >> 2];
                 $3 = Math_fround(0.0);
                 $0 = vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, $1, 0);
                 $7 = Math_fround(0.0);
                 $16 = Math_fround(Math_fround($42 * $24) + $16);
                 block124 : {
                  if ($16 < Math_fround(0.0)) {
                   break block124
                  }
                  $7 = $16;
                  $16 = Math_fround(HEAP32[$0 + 4 >> 2] - 1 >>> 0);
                  if (!($7 > $16)) {
                   break block124
                  }
                  $7 = $16;
                 }
                 $16 = Math_fround($46 * $24);
                 $0 = vision__GaussianScaleSpacePyramid__get_28unsigned_20long_2c_20unsigned_20long_29_20const($13, HEAP32[($19 + HEAP32[$25 >> 2] | 0) + 12 >> 2], 0);
                 block125 : {
                  if ($11 < Math_fround(0.0)) {
                   break block125
                  }
                  $3 = $11;
                  $11 = Math_fround(HEAP32[$0 + 8 >> 2] - 1 >>> 0);
                  if (!($3 > $11)) {
                   break block125
                  }
                  $3 = $11;
                 }
                 $26 = HEAP32[$9 + 144 >> 2];
                 $0 = $19 + HEAP32[$9 + 60 >> 2] | 0;
                 $1 = HEAP32[$0 + 12 >> 2];
                 $0 = HEAP32[$0 + 16 >> 2];
                 $8 = __stack_pointer - 48 | 0;
                 __stack_pointer = $8;
                 block126 : {
                  if ($7 >= Math_fround(0.0)) {
                   $5 = (HEAP32[$9 + 132 >> 2] + (Math_imul($1, HEAP32[$9 + 96 >> 2]) << 5) | 0) + ($0 << 5) | 0;
                   $6 = HEAP32[$5 + 4 >> 2];
                   if (Math_fround($6 >>> 0) > $7) {
                    if ($3 >= Math_fround(0.0)) {
                     $2 = HEAP32[$5 + 8 >> 2];
                     if (Math_fround($2 >>> 0) > $3) {
                      if (HEAP32[$5 + 16 >> 2] == 2) {
                       HEAP32[$17 + 44 >> 2] = 0;
                       $11 = Math_fround($7 + Math_fround(.5));
                       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                        $0 = ~~$11
                       } else {
                        $0 = -2147483648
                       }
                       if (($0 | 0) < 0 | $0 >>> 0 >= $6 >>> 0) {
                        break block126
                       }
                       $11 = Math_fround($3 + Math_fround(.5));
                       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                        $1 = ~~$11
                       } else {
                        $1 = -2147483648
                       }
                       if (($1 | 0) < 0 | $1 >>> 0 >= $2 >>> 0) {
                        break block126
                       }
                       $11 = HEAPF32[$9 + 108 >> 2];
                       $24 = HEAPF32[$9 + 104 >> 2];
                       $4 = HEAP32[$9 + 120 >> 2];
                       $10 = HEAP32[$9 + 124 >> 2] - $4 | 0;
                       if ($10) {
                        wasm2js_memory_fill($4, 0, $10)
                       }
                       $33 = $11;
                       $11 = Math_fround($16 * $24);
                       $11 = $11 < Math_fround(1.0) ? Math_fround(1.0) : $11;
                       $16 = Math_fround($33 * $11);
                       $24 = Math_fround($16 + Math_fround(.5));
                       if (Math_fround(Math_abs($24)) < Math_fround(2147483648.0)) {
                        $4 = ~~$24
                       } else {
                        $4 = -2147483648
                       }
                       $10 = $4 + $1 | 0;
                       $2 = $2 - 1 | 0;
                       $12 = ($2 | 0) > ($10 | 0) ? $10 : $2;
                       $1 = $1 - $4 | 0;
                       $2 = ($1 | 0) > 0 ? $1 : 0;
                       $1 = $0 + $4 | 0;
                       $6 = $6 - 1 | 0;
                       $35 = ($1 | 0) < ($6 | 0) ? $1 : $6;
                       $0 = $0 - $4 | 0;
                       $1 = ($0 | 0) > 0 ? $0 : 0;
                       $11 = Math_fround($11 * $11);
                       $24 = Math_fround(Math_fround(-1.0) / Math_fround($11 + $11));
                       $46 = Math_fround(Math_ceil(Math_fround($16 * $16)));
                       label61 : while (1) {
                        block127 : {
                         if (($2 | 0) > ($12 | 0)) {
                          $0 = 0;
                          break block127;
                         }
                         $11 = Math_fround(Math_fround($2 >>> 0) - $3);
                         $42 = Math_fround($11 * $11);
                         $37 = float_20const__20vision__Image__get_float__28unsigned_20long_29_20const($5, $2);
                         $0 = $1;
                         while (1) {
                          if (($0 | 0) > ($35 | 0)) {
                           $2 = $2 + 1 | 0;
                           continue label61;
                          }
                          $11 = Math_fround(Math_fround($0 >>> 0) - $7);
                          $11 = Math_fround($42 + Math_fround($11 * $11));
                          if (!($11 > $46)) {
                           block135 : {
                            $6 = $37 + ($0 << 3) | 0;
                            $4 = HEAP32[$9 + 100 >> 2];
                            $16 = Math_fround(+Math_fround(HEAPF32[$6 >> 2] * Math_fround($4 | 0)) * .159154943091895);
                            $11 = Math_fround($24 * $11);
                            $11 = Math_fround(Math_fround(+Math_fround(Math_fround($11 * Math_fround(Math_fround($11 * Math_fround(Math_fround($11 * Math_fround(Math_fround($11 * Math_fround(Math_fround($11 * Math_fround($11 + Math_fround(6.0))) + Math_fround(30.0))) + Math_fround(120.0))) + Math_fround(360.0))) + Math_fround(720.0))) + Math_fround(720.0)) * .0013888888) * HEAPF32[$6 + 4 >> 2]);
                            block136 : {
                             block134 : {
                              block133 : {
                               block132 : {
                                block131 : {
                                 block130 : {
                                  block129 : {
                                   block128 : {
                                    $6 = HEAP32[$9 + 120 >> 2];
                                    if ($6) {
                                     if (!(Math_fround($16 + Math_fround(.5)) > Math_fround(0.0))) {
                                      break block128
                                     }
                                     $43 = Math_fround($16 + Math_fround(-.5));
                                     if (!($43 < Math_fround($4 | 0))) {
                                      break block128
                                     }
                                     if (!($11 >= Math_fround(0.0))) {
                                      break block129
                                     }
                                     if (($4 | 0) < 0) {
                                      break block130
                                     }
                                     $33 = $16;
                                     $16 = Math_fround(Math_floor($43));
                                     if (Math_fround(Math_abs($16)) < Math_fround(2147483648.0)) {
                                      $10 = ~~$16
                                     } else {
                                      $10 = -2147483648
                                     }
                                     $16 = Math_fround(Math_fround($33 - Math_fround($10 | 0)) + Math_fround(-.5));
                                     $43 = Math_fround(Math_fround(1.0) - $16);
                                     if (!($43 >= Math_fround(0.0))) {
                                      break block131
                                     }
                                     if (!($16 >= Math_fround(0.0))) {
                                      break block132
                                     }
                                     $20 = ($4 + $10 | 0) % ($4 | 0) | 0;
                                     if (($20 | 0) < 0) {
                                      break block133
                                     }
                                     $4 = ($10 + 1 | 0) % ($4 | 0) | 0;
                                     if (($4 | 0) < 0) {
                                      break block134
                                     }
                                     $10 = $6 + ($20 << 2) | 0;
                                     HEAPF32[$10 >> 2] = Math_fround($43 * $11) + HEAPF32[$10 >> 2];
                                     $4 = $6 + ($4 << 2) | 0;
                                     HEAPF32[$4 >> 2] = Math_fround($16 * $11) + HEAPF32[$4 >> 2];
                                     break block135;
                                    }
                                    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11935), 12276), 3164), 139), 3735), 12607));
                                    break block136;
                                   }
                                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13033), 12276), 3164), 140), 3735), 13206));
                                   break block136;
                                  }
                                  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13593), 12276), 3164), 141), 3735), 13816));
                                  break block136;
                                 }
                                 std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13990), 12276), 3164), 142), 3735), 14197));
                                 break block136;
                                }
                                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14533), 12276), 3164), 150), 3735), 14598));
                                break block136;
                               }
                               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 14937), 12276), 3164), 151), 3735), 15104));
                               break block136;
                              }
                              std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15264), 12276), 3164), 152), 3735), 15575));
                              break block136;
                             }
                             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 15702), 12276), 3164), 153), 3735), 16060));
                            }
                            break block30;
                           }
                          }
                          $0 = $0 + 1 | 0;
                          continue;
                         };
                        }
                        break;
                       };
                       while (1) {
                        if (HEAP32[$9 + 112 >> 2] > ($0 | 0)) {
                         HEAP32[$8 + 40 >> 2] = HEAP32[5765];
                         $1 = HEAP32[5764];
                         HEAP32[$8 + 32 >> 2] = HEAP32[5763];
                         HEAP32[$8 + 36 >> 2] = $1;
                         $1 = HEAP32[$9 + 120 >> 2];
                         $4 = HEAP32[$9 + 100 >> 2] - 1 | 0;
                         $5 = $1 + ($4 << 2) | 0;
                         $3 = HEAPF32[$5 >> 2];
                         $7 = HEAPF32[$1 >> 2];
                         $2 = 0;
                         while (1) {
                          if (($2 | 0) == ($4 | 0)) {
                           HEAPF32[$1 + ($4 << 2) >> 2] = Math_fround(HEAPF32[$8 + 40 >> 2] * $7) + Math_fround(Math_fround(HEAPF32[$8 + 32 >> 2] * $3) + Math_fround(HEAPF32[$8 + 36 >> 2] * HEAPF32[$5 >> 2]))
                          } else {
                           $6 = $2 << 2;
                           $2 = $2 + 1 | 0;
                           $11 = Math_fround(HEAPF32[$8 + 32 >> 2] * $3);
                           $3 = HEAPF32[$1 + $6 >> 2];
                           HEAPF32[$6 + $1 >> 2] = Math_fround(HEAPF32[$8 + 40 >> 2] * HEAPF32[$1 + ($2 << 2) >> 2]) + Math_fround($11 + Math_fround($3 * HEAPF32[$8 + 36 >> 2]));
                           continue;
                          }
                          break;
                         };
                         $0 = $0 + 1 | 0;
                         continue;
                        }
                        break;
                       };
                       $0 = 0;
                       $4 = HEAP32[$9 + 100 >> 2];
                       $1 = ($4 | 0) > 0 ? $4 : 0;
                       $2 = HEAP32[$9 + 120 >> 2];
                       $3 = Math_fround(0.0);
                       while (1) {
                        if (($0 | 0) == ($1 | 0)) {
                         block137 : {
                          if ($3 == Math_fround(0.0)) {
                           break block126
                          }
                          if (!($3 > Math_fround(0.0))) {
                           break block137
                          }
                          $0 = 0;
                          while (1) {
                           if (($0 | 0) >= ($4 | 0)) {
                            break block126
                           }
                           $24 = Math_fround($0 >>> 0);
                           HEAPF32[$8 + 32 >> 2] = $24;
                           $1 = HEAP32[$9 + 120 >> 2];
                           $2 = $1 + ($0 << 2) | 0;
                           $7 = HEAPF32[$2 >> 2];
                           HEAPF32[$8 + 36 >> 2] = $7;
                           $5 = $0 - 1 | 0;
                           HEAPF32[$8 + 24 >> 2] = $5 | 0;
                           $11 = HEAPF32[$1 + (($4 + $5 | 0) % ($4 | 0) << 2) >> 2];
                           HEAPF32[$8 + 28 >> 2] = $11;
                           $0 = $0 + 1 | 0;
                           HEAPF32[$8 + 16 >> 2] = $0 >>> 0;
                           $16 = HEAPF32[$1 + (($0 + $4 | 0) % ($4 | 0) << 2) >> 2];
                           HEAPF32[$8 + 20 >> 2] = $16;
                           if (!($7 > $16) | (!(HEAPF32[$2 >> 2] > Math_fround($3 * HEAPF32[$9 + 116 >> 2])) | !($7 > $11))) {
                            continue
                           }
                           $46 = Math_fround(0.0);
                           $7 = HEAPF32[$8 + 24 >> 2];
                           $11 = HEAPF32[$8 + 32 >> 2];
                           $16 = Math_fround($7 - $11);
                           $43 = HEAPF32[$8 + 16 >> 2];
                           $42 = Math_fround($43 - $7);
                           $43 = Math_fround(Math_fround($43 - $11) * $42);
                           $42 = Math_fround($16 * $42);
                           $1 = $43 != Math_fround(0.0) & $42 != Math_fround(0.0) & $16 != Math_fround(0.0);
                           block138 : {
                            if (!$1) {
                             HEAP32[$8 + 12 >> 2] = 0;
                             HEAP32[$8 + 8 >> 2] = 0;
                             break block138;
                            }
                            $46 = HEAPF32[$8 + 36 >> 2];
                            $46 = Math_fround(Math_fround(Math_fround(HEAPF32[$8 + 20 >> 2] - $46) / $43) - Math_fround(Math_fround(HEAPF32[$8 + 28 >> 2] - $46) / $42));
                            HEAPF32[$8 + 12 >> 2] = $46;
                            $7 = Math_fround($7 * $7);
                            $11 = Math_fround(Math_fround(Math_fround($46 * Math_fround(Math_fround($11 * $11) - $7)) + Math_fround(HEAPF32[$8 + 28 >> 2] - HEAPF32[$8 + 36 >> 2])) / $16);
                            HEAPF32[$8 + 8 >> 2] = $11;
                            $46 = Math_fround(Math_fround(HEAPF32[$8 + 28 >> 2] - Math_fround(HEAPF32[$8 + 12 >> 2] * $7)) - Math_fround($11 * HEAPF32[$8 + 24 >> 2]));
                           }
                           HEAPF32[$8 + 4 >> 2] = $46;
                           block139 : {
                            if (!$1) {
                             break block139
                            }
                            $7 = HEAPF32[$8 + 12 >> 2];
                            if ($7 == Math_fround(0.0)) {
                             break block139
                            }
                            $24 = Math_fround(Math_fround(-HEAPF32[$8 + 8 >> 2]) / Math_fround($7 + $7));
                           }
                           $35 = HEAP32[$17 + 44 >> 2];
                           $20 = $26 + ($35 << 2) | 0;
                           $7 = Math_fround(HEAP32[$9 + 100 >> 2]);
                           $21 = +Math_fround(Math_fround(Math_fround($24 + Math_fround(.5)) + $7) / $7) * 6.283185307179586;
                           wasm2js_scratch_store_f64(+$21);
                           $12 = wasm2js_scratch_load_i32(1) | 0;
                           $5 = wasm2js_scratch_load_i32(0) | 0;
                           $4 = $12 >>> 20 & 2047;
                           block140 : {
                            if (($4 | 0) == 2047) {
                             $21 = $21 * 6.283185307179586;
                             $22 = $21 / $21;
                             break block140;
                            }
                            $1 = $12 << 1 | $5 >>> 31;
                            $2 = ($1 | 0) == -2144189450;
                            $6 = $5 << 1;
                            if ($2 & $6 >>> 0 <= 2827508272 | $1 >>> 0 < 2150777846) {
                             $22 = $2 & ($6 | 0) == -1467459024 ? $21 * 0.0 : $21;
                             break block140;
                            }
                            block141 : {
                             if (!$4) {
                              $4 = 0;
                              $2 = $5 << 12;
                              $1 = $12 << 12 | $5 >>> 20;
                              if (($1 | 0) >= 0 | ($1 | 0) > 0) {
                               while (1) {
                                $4 = $4 - 1 | 0;
                                $1 = $1 << 1 | $2 >>> 31;
                                $2 = $2 << 1;
                                if (($1 | 0) > 0 | ($1 | 0) >= 0) {
                                 continue
                                }
                                break;
                               }
                              }
                              $2 = 1 - $4 | 0;
                              $1 = $2 & 31;
                              if (($2 & 63) >>> 0 >= 32) {
                               $10 = $5 << $1;
                               $2 = 0;
                              } else {
                               $10 = (1 << $1) - 1 & $5 >>> 32 - $1 | $12 << $1;
                               $2 = $5 << $1;
                              }
                              $1 = $10;
                              break block141;
                             }
                             $2 = $5;
                             $1 = $12 & 1048575 | 1048576;
                            }
                            if (($4 | 0) > 1025) {
                             while (1) {
                              $5 = $2 - 1413754136 | 0;
                              block142 : {
                               $6 = $1 - (($2 >>> 0 < 1413754136) + 1647099 | 0) | 0;
                               if (($6 | 0) < 0) {
                                break block142
                               }
                               $2 = $5;
                               $1 = $6;
                               if ($2 | $1) {
                                break block142
                               }
                               $22 = $21 * 0.0;
                               break block140;
                              }
                              $1 = $1 << 1 | $2 >>> 31;
                              $2 = $2 << 1;
                              $4 = $4 - 1 | 0;
                              if (($4 | 0) > 1025) {
                               continue
                              }
                              break;
                             };
                             $4 = 1025;
                            }
                            $5 = $2 - 1413754136 | 0;
                            block143 : {
                             $6 = $1 - (($2 >>> 0 < 1413754136) + 1647099 | 0) | 0;
                             if (($6 | 0) < 0) {
                              break block143
                             }
                             $2 = $5;
                             $1 = $6;
                             if ($2 | $1) {
                              break block143
                             }
                             $22 = $21 * 0.0;
                             break block140;
                            }
                            if (($1 | 0) == 1048575 | $1 >>> 0 < 1048575) {
                             while (1) {
                              $4 = $4 - 1 | 0;
                              $5 = $1 >>> 0 < 524288;
                              $1 = $1 << 1 | $2 >>> 31;
                              $2 = $2 << 1;
                              if ($5) {
                               continue
                              }
                              break;
                             }
                            }
                            $6 = $12 & -2147483648;
                            $12 = $1 + -1048576 | $4 << 20;
                            $10 = 1 - $4 | 0;
                            $5 = $10 & 31;
                            if (($10 & 63) >>> 0 >= 32) {
                             $10 = 0;
                             $5 = $1 >>> $5 | 0;
                            } else {
                             $10 = $1 >>> $5 | 0;
                             $5 = ((1 << $5) - 1 & $1) << 32 - $5 | $2 >>> $5;
                            }
                            $1 = ($4 | 0) > 0;
                            wasm2js_scratch_store_i32(0, ($1 ? $2 : $5) | 0);
                            wasm2js_scratch_store_i32(1, ($1 ? $12 : $10) | $6);
                            $22 = +wasm2js_scratch_load_f64();
                           }
                           HEAPF32[$20 >> 2] = $22;
                           HEAP32[$17 + 44 >> 2] = $35 + 1;
                           $4 = HEAP32[$9 + 100 >> 2];
                           continue;
                          };
                         }
                        } else {
                         $7 = HEAPF32[$2 + ($0 << 2) >> 2];
                         $3 = $3 < $7 ? $7 : $3;
                         $0 = $0 + 1 | 0;
                         continue;
                        }
                        break;
                       };
                       std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11285), 1864), 3164), 218), 3735), 11580));
                       break block30;
                      }
                      std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 10357), 1864), 3164), 126), 3735), 10697));
                      break block30;
                     }
                     std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 9244), 1864), 3164), 122), 3735), 9639));
                     break block30;
                    }
                    std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7923), 1864), 3164), 121), 3735), 8317));
                    break block30;
                   }
                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 6690), 1864), 3164), 120), 3735), 7176));
                   break block30;
                  }
                  std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 5034), 1864), 3164), 119), 3735), 5503));
                  break block30;
                 }
                 __stack_pointer = $8 + 48 | 0;
                 $4 = 0;
                 while (1) if (HEAP32[$17 + 44 >> 2] <= ($4 | 0)) {
                  $15 = $15 + 1 | 0;
                  continue label70;
                 } else {
                  $0 = $17 + 8 | 0;
                  wasm2js_memory_copy($0, $19 + HEAP32[$9 + 60 >> 2] | 0, 36);
                  HEAPF32[$17 + 16 >> 2] = HEAPF32[HEAP32[$9 + 144 >> 2] + ($4 << 2) >> 2];
                  vision__DoGScaleInvariantDetector__FeaturePoint__20std____2__vector_vision__DoGScaleInvariantDetector__FeaturePoint_2c_20std____2__allocator_vision__DoGScaleInvariantDetector__FeaturePoint____emplace_back_vision__DoGScaleInvariantDetector__FeaturePoint_20const___28vision__DoGScaleInvariantDetector__FeaturePoint_20const__29($23, $0);
                  $4 = $4 + 1 | 0;
                  continue;
                 };
                };
               }
               __stack_pointer = $17 + 48 | 0;
               vision__ScopedTimer___ScopedTimer_28_29($32);
               __stack_pointer = $49 + 32 | 0;
               break block144;
              }
              abort();
              wasm2js_trap();
             }
             $1 = (HEAP32[$18 + 64 >> 2] - HEAP32[$18 + 60 >> 2] | 0) / 36 | 0;
             $0 = __stack_pointer - 16 | 0;
             __stack_pointer = $0;
             $6 = $77 + 4 | 0;
             HEAP32[$6 + 8 >> 2] = 0;
             HEAP32[$6 >> 2] = 0;
             HEAP32[$6 + 4 >> 2] = 0;
             HEAP32[$0 + 8 >> 2] = $6;
             if ($1) {
              std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______vallocate_5babi_ne200100_5d_28unsigned_20long_29($6, $1);
              std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______construct_at_end_28unsigned_20long_29($6, $1);
             }
             HEAP8[$0 + 12 | 0] = 1;
             std____2____exception_guard_exceptions_std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______destroy_vector______exception_guard_exceptions_5babi_ne200100_5d_28_29($0 + 8 | 0);
             __stack_pointer = $0 + 16 | 0;
             $2 = HEAP32[$18 + 60 >> 2];
             $5 = (HEAP32[$18 + 64 >> 2] - $2 | 0) / 36 | 0;
             $9 = HEAP32[$6 >> 2];
             $4 = 0;
             while (1) {
              if (($4 | 0) == ($5 | 0)) {
               break block145
              }
              $0 = $2 + Math_imul($4, 36) | 0;
              $3 = HEAPF32[$0 + 24 >> 2];
              $7 = HEAPF32[$0 + 8 >> 2];
              $18 = HEAP32[$0 >> 2];
              $8 = HEAP32[$0 + 4 >> 2];
              $1 = $9 + Math_imul($4, 20) | 0;
              HEAPF32[$1 + 12 >> 2] = HEAPF32[$0 + 28 >> 2];
              HEAP32[$1 >> 2] = $18;
              HEAP32[$1 + 4 >> 2] = $8;
              HEAPF32[$1 + 8 >> 2] = $7;
              HEAP8[$1 + 16 | 0] = $3 > Math_fround(0.0);
              $4 = $4 + 1 | 0;
              continue;
             };
            }
            std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 8511), 8983), 9969), 212), 10441), 10681));
            break block19;
           }
           std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 11165), 8983), 9969), 213), 10441), 11648));
           break block19;
          }
          std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12098), 8983), 9969), 214), 10441), 12245));
          break block19;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 12717), 8983), 9969), 215), 10441), 12913));
         break block19;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 13265), 8983), 9969), 216), 10441), 12913));
        break block19;
       }
       $18 = $142 + 8 | 0;
       HEAP32[$18 >> 2] = 96;
       vision__BinaryFeatureStore__resize_28unsigned_20long_29($18, (HEAP32[$6 + 4 >> 2] - HEAP32[$6 >> 2] | 0) / 20 | 0);
       $145 = HEAPF32[$14 + 604 >> 2];
       $146 = HEAPF32[$14 + 608 >> 2];
       $147 = HEAPF32[$14 + 612 >> 2];
       $148 = HEAPF32[$14 + 616 >> 2];
       $149 = HEAPF32[$14 + 620 >> 2];
       $150 = HEAPF32[$14 + 624 >> 2];
       $151 = HEAPF32[$14 + 628 >> 2];
       $152 = HEAPF32[$14 + 632 >> 2];
       $4 = 0;
       $10 = 0;
       block148 : {
        block146 : {
         if ($13) {
          $8 = HEAP32[$6 + 4 >> 2];
          $1 = HEAP32[$6 >> 2];
          if ((HEAP32[$18 + 20 >> 2] - HEAP32[$18 + 16 >> 2] | 0) != ($8 - $1 | 0)) {
           break block146
          }
          while (1) {
           $0 = ($8 - $1 | 0) / 20 | 0;
           if ($0 >>> 0 <= $10 >>> 0) {
            if (($0 | 0) != ($4 | 0)) {
             std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 7383), 2927), 3705), 617), 4329), 7746));
             break block19;
            }
           } else {
            $12 = HEAP32[$18 + 4 >> 2] + Math_imul(HEAP32[$18 >> 2], $4) | 0;
            $9 = __stack_pointer - 160 | 0;
            __stack_pointer = $9;
            $2 = __stack_pointer - 16 | 0;
            __stack_pointer = $2;
            $46 = HEAPF32[$14 + 356 >> 2];
            $42 = HEAPF32[$14 + 360 >> 2];
            $43 = HEAPF32[$14 + 348 >> 2];
            $47 = HEAPF32[$14 + 352 >> 2];
            $33 = HEAPF32[$14 + 340 >> 2];
            $45 = HEAPF32[$14 + 344 >> 2];
            $51 = HEAPF32[$14 + 332 >> 2];
            $57 = HEAPF32[$14 + 336 >> 2];
            $68 = HEAPF32[$14 + 324 >> 2];
            $69 = HEAPF32[$14 + 328 >> 2];
            $66 = HEAPF32[$14 + 316 >> 2];
            $79 = HEAPF32[$14 + 320 >> 2];
            $80 = HEAPF32[$14 + 404 >> 2];
            $81 = HEAPF32[$14 + 408 >> 2];
            $82 = HEAPF32[$14 + 396 >> 2];
            $83 = HEAPF32[$14 + 400 >> 2];
            $84 = HEAPF32[$14 + 388 >> 2];
            $85 = HEAPF32[$14 + 392 >> 2];
            $86 = HEAPF32[$14 + 380 >> 2];
            $87 = HEAPF32[$14 + 384 >> 2];
            $88 = HEAPF32[$14 + 372 >> 2];
            $89 = HEAPF32[$14 + 376 >> 2];
            $90 = HEAPF32[$14 + 364 >> 2];
            $91 = HEAPF32[$14 + 368 >> 2];
            $92 = HEAPF32[$14 + 452 >> 2];
            $93 = HEAPF32[$14 + 456 >> 2];
            $94 = HEAPF32[$14 + 444 >> 2];
            $95 = HEAPF32[$14 + 448 >> 2];
            $96 = HEAPF32[$14 + 436 >> 2];
            $97 = HEAPF32[$14 + 440 >> 2];
            $98 = HEAPF32[$14 + 428 >> 2];
            $99 = HEAPF32[$14 + 432 >> 2];
            $100 = HEAPF32[$14 + 420 >> 2];
            $101 = HEAPF32[$14 + 424 >> 2];
            $102 = HEAPF32[$14 + 412 >> 2];
            $103 = HEAPF32[$14 + 416 >> 2];
            $104 = HEAPF32[$14 + 500 >> 2];
            $105 = HEAPF32[$14 + 504 >> 2];
            $106 = HEAPF32[$14 + 492 >> 2];
            $107 = HEAPF32[$14 + 496 >> 2];
            $108 = HEAPF32[$14 + 484 >> 2];
            $109 = HEAPF32[$14 + 488 >> 2];
            $110 = HEAPF32[$14 + 476 >> 2];
            $111 = HEAPF32[$14 + 480 >> 2];
            $112 = HEAPF32[$14 + 468 >> 2];
            $113 = HEAPF32[$14 + 472 >> 2];
            $114 = HEAPF32[$14 + 460 >> 2];
            $115 = HEAPF32[$14 + 464 >> 2];
            $116 = HEAPF32[$14 + 548 >> 2];
            $117 = HEAPF32[$14 + 552 >> 2];
            $118 = HEAPF32[$14 + 540 >> 2];
            $119 = HEAPF32[$14 + 544 >> 2];
            $120 = HEAPF32[$14 + 532 >> 2];
            $121 = HEAPF32[$14 + 536 >> 2];
            $122 = HEAPF32[$14 + 524 >> 2];
            $123 = HEAPF32[$14 + 528 >> 2];
            $124 = HEAPF32[$14 + 516 >> 2];
            $125 = HEAPF32[$14 + 520 >> 2];
            $126 = HEAPF32[$14 + 508 >> 2];
            $127 = HEAPF32[$14 + 512 >> 2];
            $128 = HEAPF32[$14 + 596 >> 2];
            $129 = HEAPF32[$14 + 600 >> 2];
            $130 = HEAPF32[$14 + 588 >> 2];
            $131 = HEAPF32[$14 + 592 >> 2];
            $132 = HEAPF32[$14 + 580 >> 2];
            $133 = HEAPF32[$14 + 584 >> 2];
            $134 = HEAPF32[$14 + 572 >> 2];
            $135 = HEAPF32[$14 + 576 >> 2];
            $136 = HEAPF32[$14 + 564 >> 2];
            $137 = HEAPF32[$14 + 568 >> 2];
            $17 = Math_imul($10, 20);
            $0 = $17 + $1 | 0;
            $11 = HEAPF32[$0 >> 2];
            $16 = HEAPF32[$0 + 4 >> 2];
            $138 = HEAPF32[$14 + 556 >> 2];
            $139 = HEAPF32[$14 + 560 >> 2];
            $7 = HEAPF32[$0 + 8 >> 2];
            $1 = $2 + 12 | 0;
            $5 = $2 + 8 | 0;
            $3 = Math_fround($152 * HEAPF32[$0 + 12 >> 2]);
            $24 = $3 < Math_fround(1.0) ? Math_fround(1.0) : $3;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($151 * $24));
            $0 = $9;
            $3 = Math_fround($24 * cosf($7));
            $7 = Math_fround($24 * sinf($7));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($138 * $3) - Math_fround($139 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $138) + Math_fround($3 * $139))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $136) - Math_fround($137 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $136) + Math_fround($3 * $137))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $134) - Math_fround($135 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $134) + Math_fround($3 * $135))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $132) - Math_fround($133 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $132) + Math_fround($3 * $133))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $130) - Math_fround($131 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $130) + Math_fround($3 * $131))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $128) - Math_fround($129 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $128) + Math_fround($3 * $129))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($150 * $24));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $126) - Math_fround($127 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $126) + Math_fround($3 * $127))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $124) - Math_fround($125 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $124) + Math_fround($3 * $125))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $122) - Math_fround($123 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $122) + Math_fround($3 * $123))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $120) - Math_fround($121 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $120) + Math_fround($3 * $121))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $118) - Math_fround($119 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $118) + Math_fround($3 * $119))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $116) - Math_fround($117 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $116) + Math_fround($3 * $117))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($149 * $24));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $114) - Math_fround($115 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $114) + Math_fround($3 * $115))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $112) - Math_fround($113 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $112) + Math_fround($3 * $113))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $110) - Math_fround($111 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $110) + Math_fround($3 * $111))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $108) - Math_fround($109 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $108) + Math_fround($3 * $109))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 60 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $106) - Math_fround($107 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $106) + Math_fround($3 * $107))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $104) - Math_fround($105 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $104) + Math_fround($3 * $105))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 68 >> 2] = wasm2js_f32$0;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($148 * $24));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $102) - Math_fround($103 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $102) + Math_fround($3 * $103))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 72 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $100) - Math_fround($101 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $100) + Math_fround($3 * $101))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $98) - Math_fround($99 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $98) + Math_fround($3 * $99))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 80 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $96) - Math_fround($97 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $96) + Math_fround($3 * $97))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 84 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $94) - Math_fround($95 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $94) + Math_fround($3 * $95))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 88 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $92) - Math_fround($93 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $92) + Math_fround($3 * $93))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($147 * $24));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $90) - Math_fround($91 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $90) + Math_fround($3 * $91))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 96 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $88) - Math_fround($89 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $88) + Math_fround($3 * $89))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 100 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $86) - Math_fround($87 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $86) + Math_fround($3 * $87))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 104 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $84) - Math_fround($85 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $84) + Math_fround($3 * $85))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 108 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $82) - Math_fround($83 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $82) + Math_fround($3 * $83))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 112 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $80) - Math_fround($81 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $80) + Math_fround($3 * $81))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($146 * $24));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $66) - Math_fround($79 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $66) + Math_fround($3 * $79))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 120 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $68) - Math_fround($69 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $68) + Math_fround($3 * $69))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $51) - Math_fround($57 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $51) + Math_fround($3 * $57))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 128 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $33) - Math_fround($45 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $33) + Math_fround($3 * $45))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 132 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $43) - Math_fround($47 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $43) + Math_fround($3 * $47))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, Math_fround($11 + Math_fround(Math_fround($3 * $46) - Math_fround($42 * $7))), Math_fround($16 + Math_fround(Math_fround($7 * $46) + Math_fround($3 * $42))), HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
            vision__GaussianScaleSpacePyramid__locate_28int__2c_20int__2c_20float_29_20const($13, $1, $5, Math_fround($145 * $24));
            (wasm2js_i32$0 = $0, wasm2js_f32$0 = vision__SampleReceptor_28vision__GaussianScaleSpacePyramid_20const__2c_20float_2c_20float_2c_20int_2c_20int_29($13, $11, $16, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])), HEAPF32[wasm2js_i32$0 + 144 >> 2] = wasm2js_f32$0;
            __stack_pointer = $2 + 16 | 0;
            $5 = 0;
            $2 = 0;
            wasm2js_memory_fill($12, 0, 84);
            $8 = 36;
            while (1) {
             if (($5 | 0) == 37) {
              if (($2 | 0) != 666) {
               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 17919), 2927), 3705), 410), 4329), 18001));
               abort();
               wasm2js_trap();
              }
             } else {
              $0 = $2 + $8 | 0;
              $15 = $9 + ($5 << 2) | 0;
              $1 = $5 + 1 | 0;
              $5 = $1;
              while (1) {
               if (($0 | 0) != ($2 | 0)) {
                $49 = $12 + (($2 | 0) / 8 | 0) | 0;
                HEAP8[$49 | 0] = HEAPU8[$49 | 0] | (HEAPF32[$15 >> 2] < HEAPF32[$9 + ($5 << 2) >> 2]) << ($2 & 7);
                $5 = $5 + 1 | 0;
                $2 = $2 + 1 | 0;
                continue;
               }
               break;
              };
              $8 = $8 - 1 | 0;
              $2 = $0;
              $5 = $1;
              continue;
             }
             break;
            };
            __stack_pointer = $9 + 160 | 0;
            $0 = HEAP32[$18 + 16 >> 2] + Math_imul($4, 20) | 0;
            $1 = $17 + HEAP32[$6 >> 2] | 0;
            HEAP8[$0 + 16 | 0] = HEAPU8[$1 + 16 | 0];
            $2 = HEAP32[$1 + 12 >> 2];
            HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
            HEAP32[$0 + 12 >> 2] = $2;
            $2 = HEAP32[$1 + 4 >> 2];
            HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
            HEAP32[$0 + 4 >> 2] = $2;
            $4 = $4 + 1 | 0;
            $10 = $10 + 1 | 0;
            $1 = HEAP32[$6 >> 2];
            $8 = HEAP32[$6 + 4 >> 2];
            continue;
           }
           break;
          };
          vision__BinaryFeatureStore__resize_28unsigned_20long_29($18, $4);
          break block148;
         }
         std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 2536), 2927), 3705), 537), 4329), 4740));
         break block19;
        }
        std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 5847), 2927), 3705), 538), 4329), 6469));
        break block19;
       }
       std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($6);
       __stack_pointer = $77 + 16 | 0;
       vision__ScopedTimer___ScopedTimer_28_29($141);
       $0 = vision__Logger__getInstance_28_29();
       vision__get_pretty_time_28_29($73);
       $1 = HEAP32[$14 + 64 >> 2];
       $2 = HEAP32[$1 + 24 >> 2];
       $1 = HEAP32[$1 + 28 >> 2];
       HEAP32[$65 >> 2] = 7441;
       HEAP32[$65 + 8 >> 2] = 23329;
       HEAP32[$65 + 4 >> 2] = HEAP8[$65 + 27 | 0] < 0 ? HEAP32[$65 + 16 >> 2] : $73;
       HEAP32[$65 + 12 >> 2] = ($1 - $2 | 0) / 20;
       vision__Logger__write_28vision__LoggerPriorityLevel_2c_20char_20const__2c_20____29($0, 18315, $65);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($73);
       $6 = HEAP32[$14 + 64 >> 2];
       $13 = __stack_pointer - 96 | 0;
       __stack_pointer = $13;
       HEAP32[$14 + 24 >> 2] = -1;
       HEAP32[$14 + 16 >> 2] = HEAP32[$14 + 12 >> 2];
       $35 = $14 + 28 | 0;
       $32 = $14 + 788 | 0;
       $25 = $14 + 652 | 0;
       $18 = $14 + 636 | 0;
       $10 = $14 + 80 | 0;
       $15 = $6 + 24 | 0;
       block170 : {
        while (1) {
         block150 : {
          block158 : {
           $10 = HEAP32[$10 >> 2];
           if ($10) {
            $49 = vision__ScopedTimer__ScopedTimer_28char_20const__29($13 + 48 | 0, 18402);
            $0 = HEAP32[$10 + 12 >> 2];
            $1 = $0 + 8 | 0;
            block157 : {
             if (HEAPU8[$14 + 8 | 0] == 1) {
              $9 = $0 + 36 | 0;
              $0 = 0;
              $17 = __stack_pointer - 16 | 0;
              __stack_pointer = $17;
              HEAP32[$18 + 4 >> 2] = HEAP32[$18 >> 2];
              $2 = HEAP32[$6 + 28 >> 2];
              $4 = HEAP32[$6 + 24 >> 2];
              $5 = ($2 - $4 | 0) / 20 | 0;
              block156 : {
               block153 : {
                block149 : {
                 if (($2 | 0) == ($4 | 0) | HEAP32[$1 + 20 >> 2] == HEAP32[$1 + 16 >> 2]) {
                  break block149
                 }
                 std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____reserve_28unsigned_20long_29($18, $5);
                 $12 = 0;
                 while (1) {
                  $2 = (HEAP32[$6 + 28 >> 2] - HEAP32[$6 + 24 >> 2] | 0) / 20 | 0;
                  if ($2 >>> 0 <= $12 >>> 0) {
                   $0 = HEAP32[$18 + 4 >> 2] - HEAP32[$18 >> 2] >> 3;
                   if ($2 >>> 0 >= $0 >>> 0) {
                    break block149
                   }
                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19421), 19171), 9969), 175), 10441), 19513));
                   break block150;
                  }
                  $19 = HEAP32[$6 + 12 >> 2] + Math_imul(HEAP32[$6 + 8 >> 2], $12) | 0;
                  $2 = $19;
                  block151 : {
                   if (HEAP32[$9 + 8 >> 2]) {
                    HEAP32[$9 + 100 >> 2] = 0;
                    HEAP32[$9 + 76 >> 2] = HEAP32[$9 + 72 >> 2];
                    $0 = $9 + 84 | 0;
                    while (1) {
                     if (HEAP32[$9 + 84 >> 2] != HEAP32[$9 + 88 >> 2]) {
                      std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____pop_28_29($0);
                      continue;
                     }
                     break;
                    };
                    vision__BinaryHierarchicalClustering_96___query_28std____2__priority_queue_vision__PriorityQueueItem_96__2c_20std____2__vector_vision__PriorityQueueItem_96__2c_20std____2__allocator_vision__PriorityQueueItem_96____2c_20std____2__less_vision__PriorityQueueItem_96_____2c_20vision__Node_96__20const__2c_20unsigned_20char_20const__29_20const($9, $0, HEAP32[$9 + 8 >> 2], $2);
                    break block151;
                   }
                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19644), 13644), 9969), 405), 10441), 23610));
                   break block150;
                  }
                  $23 = HEAP32[$6 + 24 >> 2] + Math_imul($12, 20) | 0;
                  $8 = 0;
                  $4 = -1;
                  $5 = 2147483647;
                  $0 = -1;
                  block152 : {
                   while (1) {
                    $2 = HEAP32[$9 + 72 >> 2];
                    if (HEAP32[$9 + 76 >> 2] - $2 >> 2 >>> 0 <= $8 >>> 0) {
                     block154 : {
                      if (($0 | 0) == -1) {
                       break block152
                      }
                      if (($5 | 0) == -1) {
                       break block153
                      }
                      if (($4 | 0) != -1) {
                       break block154
                      }
                      HEAP32[$17 + 12 >> 2] = $5;
                      HEAP32[$17 + 8 >> 2] = $12;
                      vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($18, $17 + 8 | 0);
                      break block152;
                     }
                    } else {
                     $26 = $8 << 2;
                     $2 = HEAP32[$26 + $2 >> 2];
                     block155 : {
                      if (HEAPU8[$23 + 16 | 0] != HEAPU8[(HEAP32[$1 + 16 >> 2] + Math_imul($2, 20) | 0) + 16 | 0]) {
                       break block155
                      }
                      $2 = vision__HammingDistance768_28unsigned_20int_20const__2c_20unsigned_20int_20const__29($19, HEAP32[$1 + 4 >> 2] + Math_imul($2, HEAP32[$1 >> 2]) | 0);
                      if ($2 >>> 0 < $0 >>> 0) {
                       $5 = HEAP32[$26 + HEAP32[$9 + 72 >> 2] >> 2];
                       $4 = $0;
                       $0 = $2;
                       break block155;
                      }
                      $4 = $2 >>> 0 < $4 >>> 0 ? $2 : $4;
                     }
                     $8 = $8 + 1 | 0;
                     continue;
                    }
                    break;
                   };
                   if (!(HEAPF32[$18 + 12 >> 2] > Math_fround(Math_fround($0 >>> 0) / Math_fround($4 >>> 0)))) {
                    break block152
                   }
                   HEAP32[$17 + 12 >> 2] = $5;
                   HEAP32[$17 + 8 >> 2] = $12;
                   vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($18, $17 + 8 | 0);
                  }
                  $12 = $12 + 1 | 0;
                  continue;
                 };
                }
                __stack_pointer = $17 + 16 | 0;
                break block156;
               }
               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19099), 19171), 9969), 160), 10441), 19332));
               break block150;
              }
              if (HEAPU32[$14 >> 2] <= $0 >>> 0) {
               break block157
              }
              break block158;
             }
             $4 = 0;
             $12 = 0;
             $8 = __stack_pointer - 16 | 0;
             __stack_pointer = $8;
             HEAP32[$18 + 4 >> 2] = HEAP32[$18 >> 2];
             $0 = HEAP32[$6 + 28 >> 2];
             $2 = HEAP32[$6 + 24 >> 2];
             $9 = ($0 - $2 | 0) / 20 | 0;
             block159 : {
              $5 = $1;
              if (($0 | 0) == ($2 | 0) | HEAP32[$1 + 20 >> 2] == HEAP32[$1 + 16 >> 2]) {
               break block159
              }
              std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____reserve_28unsigned_20long_29($18, $9);
              while (1) {
               $0 = HEAP32[$6 + 24 >> 2];
               $1 = (HEAP32[$6 + 28 >> 2] - $0 | 0) / 20 | 0;
               if ($1 >>> 0 <= $12 >>> 0) {
                $4 = HEAP32[$18 + 4 >> 2] - HEAP32[$18 >> 2] >> 3;
                if ($1 >>> 0 >= $4 >>> 0) {
                 break block159
                }
                std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19421), 19171), 9969), 112), 10441), 19513));
                break block150;
               } else {
                $17 = $0 + Math_imul($12, 20) | 0;
                $19 = HEAP32[$6 + 12 >> 2] + Math_imul(HEAP32[$6 + 8 >> 2], $12) | 0;
                $4 = 0;
                $1 = 2147483647;
                $2 = -1;
                $0 = -1;
                block160 : {
                 while (1) {
                  $9 = HEAP32[$5 + 16 >> 2];
                  if ((HEAP32[$5 + 20 >> 2] - $9 | 0) / 20 >>> 0 <= $4 >>> 0) {
                   block161 : {
                    if (($0 | 0) == -1) {
                     break block160
                    }
                    if (($2 | 0) != -1) {
                     break block161
                    }
                    HEAP32[$8 + 12 >> 2] = $1;
                    HEAP32[$8 + 8 >> 2] = $12;
                    vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($18, $8 + 8 | 0);
                    break block160;
                   }
                  } else {
                   block162 : {
                    if (HEAPU8[$17 + 16 | 0] != HEAPU8[($9 + Math_imul($4, 20) | 0) + 16 | 0]) {
                     break block162
                    }
                    $9 = vision__HammingDistance768_28unsigned_20int_20const__2c_20unsigned_20int_20const__29($19, HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[$5 >> 2], $4) | 0);
                    if ($9 >>> 0 < $0 >>> 0) {
                     $2 = $0;
                     $1 = $4;
                     $0 = $9;
                     break block162;
                    }
                    $2 = $2 >>> 0 > $9 >>> 0 ? $9 : $2;
                   }
                   $4 = $4 + 1 | 0;
                   continue;
                  }
                  break;
                 };
                 if (!(HEAPF32[$18 + 12 >> 2] > Math_fround(Math_fround($0 >>> 0) / Math_fround($2 >>> 0)))) {
                  break block160
                 }
                 HEAP32[$8 + 12 >> 2] = $1;
                 HEAP32[$8 + 8 >> 2] = $12;
                 vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($18, $8 + 8 | 0);
                }
                $12 = $12 + 1 | 0;
                continue;
               }
              };
             }
             __stack_pointer = $8 + 16 | 0;
             if (HEAPU32[$14 >> 2] > $4 >>> 0) {
              break block158
             }
            }
            vision__ScopedTimer___ScopedTimer_28_29($49);
            $0 = HEAP32[$10 + 12 >> 2];
            $12 = $13 + 48 | 0;
            $1 = vision__ScopedTimer__ScopedTimer_28char_20const__29($12, 18496);
            $19 = $0 + 24 | 0;
            $0 = HEAP32[$10 + 12 >> 2];
            $0 = vision__FindHoughSimilarity_28vision__HoughSimilarityVoting__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20int_2c_20int_2c_20int_2c_20int_29($25, $15, $19, $18, HEAP32[$6 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
            vision__ScopedTimer___ScopedTimer_28_29($1);
            if (($0 | 0) < 0) {
             continue
            }
            HEAP32[$13 + 92 >> 2] = 0;
            HEAP32[$13 + 84 >> 2] = 0;
            HEAP32[$13 + 88 >> 2] = 0;
            $1 = vision__ScopedTimer__ScopedTimer_28char_20const__29($12, 18513);
            $23 = $13 + 84 | 0;
            vision__FindHoughMatches_28std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____2c_20vision__HoughSimilarityVoting_20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20int_2c_20float_29($23, $25, $18, $0);
            vision__ScopedTimer___ScopedTimer_28_29($1);
            $17 = $13 + 16 | 0;
            $0 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 18674);
            $1 = HEAP32[$10 + 12 >> 2];
            $1 = vision__EstimateHomography_28float__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20vision__RobustHomography_float___2c_20int_2c_20int_29($12, $15, $19, $23, $32, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
            vision__ScopedTimer___ScopedTimer_28_29($0);
            if ($1) {
             HEAP32[$13 + 12 >> 2] = 0;
             HEAP32[$13 + 4 >> 2] = 0;
             HEAP32[$13 + 8 >> 2] = 0;
             $0 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 18718);
             $37 = $13 + 4 | 0;
             vision__FindInliers_28std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____2c_20float_20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20float_29($37, $12, $15, $19, $23, HEAPF32[$14 + 4 >> 2]);
             $1 = HEAP32[$14 >> 2];
             $2 = HEAP32[$13 + 4 >> 2];
             $4 = HEAP32[$13 + 8 >> 2];
             vision__ScopedTimer___ScopedTimer_28_29($0);
             block163 : {
              if ($1 >>> 0 > $4 - $2 >> 3 >>> 0) {
               break block163
              }
              $20 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 18735);
              $49 = HEAP32[$10 + 12 >> 2];
              $4 = 0;
              $8 = 0;
              $9 = __stack_pointer + -64 | 0;
              __stack_pointer = $9;
              HEAP32[$18 + 4 >> 2] = HEAP32[$18 >> 2];
              block169 : {
               block165 : {
                block164 : {
                 if (HEAP32[$6 + 28 >> 2] == HEAP32[$6 + 24 >> 2] | HEAP32[$49 + 28 >> 2] == HEAP32[$49 + 24 >> 2]) {
                  break block164
                 }
                 if (!bool_20vision__MatrixInverse3x3_float__28float__2c_20float_20const__2c_20float_29($9 + 16 | 0, $12, Math_fround(0.0))) {
                  break block165
                 }
                 std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____reserve_28unsigned_20long_29($18, (HEAP32[$6 + 28 >> 2] - HEAP32[$6 + 24 >> 2] | 0) / 20 | 0);
                 while (1) {
                  $0 = HEAP32[$6 + 24 >> 2];
                  $1 = (HEAP32[$6 + 28 >> 2] - $0 | 0) / 20 | 0;
                  if ($1 >>> 0 <= $8 >>> 0) {
                   $4 = HEAP32[$18 + 4 >> 2] - HEAP32[$18 >> 2] >> 3;
                   if ($1 >>> 0 >= $4 >>> 0) {
                    break block164
                   }
                   std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 19421), 19171), 9969), 256), 10441), 19513));
                   break block150;
                  } else {
                   $26 = $0 + Math_imul($8, 20) | 0;
                   $3 = HEAPF32[$26 >> 2];
                   $7 = HEAPF32[$26 + 4 >> 2];
                   $11 = Math_fround(HEAPF32[$9 + 48 >> 2] + Math_fround(Math_fround(HEAPF32[$9 + 40 >> 2] * $3) + Math_fround($7 * HEAPF32[$9 + 44 >> 2])));
                   $16 = Math_fround(Math_fround(HEAPF32[$9 + 36 >> 2] + Math_fround(Math_fround(HEAPF32[$9 + 28 >> 2] * $3) + Math_fround($7 * HEAPF32[$9 + 32 >> 2]))) / $11);
                   $3 = Math_fround(Math_fround(HEAPF32[$9 + 24 >> 2] + Math_fround(Math_fround(HEAPF32[$9 + 16 >> 2] * $3) + Math_fround($7 * HEAPF32[$9 + 20 >> 2]))) / $11);
                   $59 = HEAP32[$6 + 12 >> 2] + Math_imul(HEAP32[$6 + 8 >> 2], $8) | 0;
                   $4 = 0;
                   $1 = -1;
                   $2 = 2147483647;
                   $0 = -1;
                   block166 : {
                    while (1) {
                     $5 = HEAP32[$49 + 24 >> 2];
                     if ((HEAP32[$49 + 28 >> 2] - $5 | 0) / 20 >>> 0 <= $4 >>> 0) {
                      block167 : {
                       if (($0 | 0) == -1) {
                        break block166
                       }
                       if (($1 | 0) != -1) {
                        break block167
                       }
                       HEAP32[$9 + 12 >> 2] = $2;
                       HEAP32[$9 + 8 >> 2] = $8;
                       vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($18, $9 + 8 | 0);
                       break block166;
                      }
                     } else {
                      $5 = $5 + Math_imul($4, 20) | 0;
                      block168 : {
                       if (HEAPU8[$26 + 16 | 0] != HEAPU8[$5 + 16 | 0]) {
                        break block168
                       }
                       $7 = Math_fround($3 - HEAPF32[$5 >> 2]);
                       $11 = Math_fround($7 * $7);
                       $7 = Math_fround($16 - HEAPF32[$5 + 4 >> 2]);
                       if (Math_fround($11 + Math_fround($7 * $7)) > Math_fround(100.0)) {
                        break block168
                       }
                       $5 = vision__HammingDistance768_28unsigned_20int_20const__2c_20unsigned_20int_20const__29($59, HEAP32[$49 + 12 >> 2] + Math_imul(HEAP32[$49 + 8 >> 2], $4) | 0);
                       if ($5 >>> 0 < $0 >>> 0) {
                        $2 = $4;
                        $1 = $0;
                        $0 = $5;
                        break block168;
                       }
                       $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
                      }
                      $4 = $4 + 1 | 0;
                      continue;
                     }
                     break;
                    };
                    if (!(HEAPF32[$18 + 12 >> 2] > Math_fround(Math_fround($0 >>> 0) / Math_fround($1 >>> 0)))) {
                     break block166
                    }
                    HEAP32[$9 + 12 >> 2] = $2;
                    HEAP32[$9 + 8 >> 2] = $8;
                    vision__match_t__20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____emplace_back_vision__match_t__28vision__match_t___29($18, $9 + 8 | 0);
                   }
                   $8 = $8 + 1 | 0;
                   continue;
                  }
                 };
                }
                __stack_pointer = $9 - -64 | 0;
                break block169;
               }
               std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__endl_5babi_ne200100_5d_char_2c_20std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__operator___5babi_ne200100_5d_std____2__char_traits_char___28std____2__basic_ostream_char_2c_20std____2__char_traits_char____2c_20char_20const__29(81568, 22325), 19171), 9969), 196), 10441), 22350));
               break block150;
              }
              $0 = HEAP32[$14 >> 2];
              vision__ScopedTimer___ScopedTimer_28_29($20);
              if ($0 >>> 0 > $4 >>> 0) {
               break block163
              }
              $1 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 18822);
              $0 = HEAP32[$10 + 12 >> 2];
              $0 = vision__FindHoughSimilarity_28vision__HoughSimilarityVoting__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20int_2c_20int_2c_20int_2c_20int_29($25, $15, $19, $18, HEAP32[$6 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
              vision__ScopedTimer___ScopedTimer_28_29($1);
              if (($0 | 0) < 0) {
               break block163
              }
              $1 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 18839);
              vision__FindHoughMatches_28std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____2c_20vision__HoughSimilarityVoting_20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20int_2c_20float_29($23, $25, $18, $0);
              vision__ScopedTimer___ScopedTimer_28_29($1);
              $0 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 19002);
              $1 = HEAP32[$10 + 12 >> 2];
              $1 = vision__EstimateHomography_28float__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20vision__RobustHomography_float___2c_20int_2c_20int_29($12, $15, $19, $23, $32, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
              vision__ScopedTimer___ScopedTimer_28_29($0);
              if (!$1) {
               break block163
              }
              HEAP32[$13 + 8 >> 2] = HEAP32[$13 + 4 >> 2];
              $0 = vision__ScopedTimer__ScopedTimer_28char_20const__29($17, 19048);
              vision__FindInliers_28std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t____2c_20float_20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint___20const__2c_20std____2__vector_vision__match_t_2c_20std____2__allocator_vision__match_t___20const__2c_20float_29($37, $12, $15, $19, $23, HEAPF32[$14 + 4 >> 2]);
              vision__ScopedTimer___ScopedTimer_28_29($0);
              $0 = HEAP32[$13 + 8 >> 2];
              $1 = HEAP32[$13 + 4 >> 2];
              $2 = $0 - $1 | 0;
              if (HEAPU32[$14 >> 2] > $2 >> 3 >>> 0) {
               break block163
              }
              $4 = HEAP32[$14 + 16 >> 2];
              $5 = HEAP32[$14 + 12 >> 2];
              if ($2 >>> 0 <= $4 - $5 >>> 0) {
               break block163
              }
              wasm2js_memory_copy($35, $12, 36);
              HEAP32[$14 + 12 >> 2] = $1;
              HEAP32[$13 + 4 >> 2] = $5;
              HEAP32[$14 + 16 >> 2] = $0;
              HEAP32[$13 + 8 >> 2] = $4;
              $0 = HEAP32[$14 + 20 >> 2];
              HEAP32[$14 + 20 >> 2] = HEAP32[$13 + 12 >> 2];
              HEAP32[$13 + 12 >> 2] = $0;
              HEAP32[$14 + 24 >> 2] = HEAP32[$10 + 8 >> 2];
             }
             std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($13 + 4 | 0);
            }
            std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($13 + 84 | 0);
            continue;
           }
           __stack_pointer = $13 + 96 | 0;
           break block170;
          }
          vision__ScopedTimer___ScopedTimer_28_29($49);
          continue;
         }
         break;
        };
        break block19;
       }
       __stack_pointer = $65 + 48 | 0;
       __stack_pointer = $76 + 32 | 0;
       vision__Image___Image_28_29($58);
       __stack_pointer = $75 + 32 | 0;
       $0 = vision__VisualDatabaseFacade__getQueryFeaturePoints_28_29_20const(HEAP32[$27 >> 2]);
       $1 = HEAP32[$0 + 4 >> 2];
       $0 = HEAP32[$0 >> 2];
       HEAP32[$27 + 48 >> 2] = ($1 - $0 | 0) / 20;
       block171 : {
        if (($0 | 0) == ($1 | 0)) {
         $1 = 0;
         $0 = HEAP32[$27 + 56 >> 2];
         $0 = ($0 | 0) > 0 ? $0 : 0;
         while (1) {
          if (($0 | 0) == ($1 | 0)) {
           break block171
          }
          HEAP32[(HEAP32[$27 + 52 >> 2] + Math_imul($1, 68) | 0) + 60 >> 2] = -1;
          $1 = $1 + 1 | 0;
          continue;
         };
        }
        emscripten_builtin_free(HEAP32[$27 + 44 >> 2]);
        $0 = emscripten_builtin_malloc(HEAP32[$27 + 48 >> 2] << 3);
        HEAP32[$27 + 44 >> 2] = $0;
        if ($0) {
         $0 = vision__VisualDatabaseFacade__getQueryFeaturePoints_28_29_20const(HEAP32[$27 >> 2]);
         block172 : {
          if (($71 | 0) == 1) {
           $1 = 0;
           while (1) {
            if (HEAP32[$27 + 48 >> 2] <= ($1 | 0)) {
             break block172
            }
            $2 = HEAP32[$0 >> 2] + Math_imul($1, 20) | 0;
            $3 = HEAPF32[$2 + 4 >> 2];
            $7 = HEAPF32[$2 >> 2];
            $2 = HEAP32[$27 + 4 >> 2];
            block173 : {
             if ($2) {
              $4 = $2 + 184 | 0;
              $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
              arParamObserv2IdealLTf($4, $7, $3, $2, $2 + 4 | 0);
              break block173;
             }
             $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
             HEAPF32[$2 + 4 >> 2] = $3;
             HEAPF32[$2 >> 2] = $7;
            }
            $1 = $1 + 1 | 0;
            continue;
           };
          }
          $1 = 0;
          block175 : {
           switch ($71 - 2 | 0) {
           case 3:
            while (1) {
             if (HEAP32[$27 + 48 >> 2] <= ($1 | 0)) {
              break block172
             }
             $2 = HEAP32[$0 >> 2] + Math_imul($1, 20) | 0;
             $3 = HEAPF32[$2 + 4 >> 2];
             $7 = HEAPF32[$2 >> 2];
             $2 = HEAP32[$27 + 4 >> 2];
             block178 : {
              if ($2) {
               $4 = $2 + 184 | 0;
               $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
               arParamObserv2IdealLTf($4, Math_fround($7 * Math_fround(1.5)), Math_fround($3 * Math_fround(1.5)), $2, $2 + 4 | 0);
               break block178;
              }
              $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
              HEAPF32[$2 + 4 >> 2] = $3 * Math_fround(1.5);
              HEAPF32[$2 >> 2] = $7 * Math_fround(1.5);
             }
             $1 = $1 + 1 | 0;
             continue;
            };
           case 0:
            while (1) {
             if (HEAP32[$27 + 48 >> 2] <= ($1 | 0)) {
              break block172
             }
             $2 = HEAP32[$0 >> 2] + Math_imul($1, 20) | 0;
             $3 = HEAPF32[$2 + 4 >> 2];
             $7 = HEAPF32[$2 >> 2];
             $2 = HEAP32[$27 + 4 >> 2];
             block179 : {
              if ($2) {
               $4 = $2 + 184 | 0;
               $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
               arParamObserv2IdealLTf($4, Math_fround($7 + $7), Math_fround($3 + $3), $2, $2 + 4 | 0);
               break block179;
              }
              $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
              HEAPF32[$2 + 4 >> 2] = $3 + $3;
              HEAPF32[$2 >> 2] = $7 + $7;
             }
             $1 = $1 + 1 | 0;
             continue;
            };
           case 2:
            while (1) {
             if (HEAP32[$27 + 48 >> 2] <= ($1 | 0)) {
              break block172
             }
             $2 = HEAP32[$0 >> 2] + Math_imul($1, 20) | 0;
             $3 = HEAPF32[$2 + 4 >> 2];
             $7 = HEAPF32[$2 >> 2];
             $2 = HEAP32[$27 + 4 >> 2];
             block180 : {
              if ($2) {
               $4 = $2 + 184 | 0;
               $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
               arParamObserv2IdealLTf($4, Math_fround($7 * Math_fround(3.0)), Math_fround($3 * Math_fround(3.0)), $2, $2 + 4 | 0);
               break block180;
              }
              $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
              HEAPF32[$2 + 4 >> 2] = $3 * Math_fround(3.0);
              HEAPF32[$2 >> 2] = $7 * Math_fround(3.0);
             }
             $1 = $1 + 1 | 0;
             continue;
            };
           default:
            break block175;
           };
          }
          while (1) {
           if (HEAP32[$27 + 48 >> 2] <= ($1 | 0)) {
            break block172
           }
           $2 = HEAP32[$0 >> 2] + Math_imul($1, 20) | 0;
           $3 = HEAPF32[$2 + 4 >> 2];
           $7 = HEAPF32[$2 >> 2];
           $2 = HEAP32[$27 + 4 >> 2];
           block181 : {
            if ($2) {
             $4 = $2 + 184 | 0;
             $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
             arParamObserv2IdealLTf($4, Math_fround($7 * Math_fround(4.0)), Math_fround($3 * Math_fround(4.0)), $2, $2 + 4 | 0);
             break block181;
            }
            $2 = HEAP32[$27 + 44 >> 2] + ($1 << 3) | 0;
            HEAPF32[$2 + 4 >> 2] = $3 * Math_fround(4.0);
            HEAPF32[$2 >> 2] = $7 * Math_fround(4.0);
           }
           $1 = $1 + 1 | 0;
           continue;
          };
         }
         $1 = 0;
         $0 = HEAP32[$27 + 56 >> 2];
         $0 = ($0 | 0) > 0 ? $0 : 0;
         while (1) if (($0 | 0) == ($1 | 0)) {
          $12 = HEAP32[HEAP32[HEAP32[$27 >> 2] >> 2] >> 2];
          $1 = HEAP32[$12 + 24 >> 2];
          if (!$1) {
           break block171
          }
          $17 = HEAP32[(($1 << 2) + $27 | 0) + 60 >> 2];
          $2 = Math_imul($17, 68);
          if (HEAP32[($2 + HEAP32[$27 + 52 >> 2] | 0) + 64 >> 2]) {
           break block171
          }
          $4 = HEAP32[$27 + 4 >> 2];
          $5 = HEAP32[$27 >> 2];
          $0 = __stack_pointer - 16 | 0;
          __stack_pointer = $0;
          HEAP32[$0 + 12 >> 2] = $1;
          $1 = std____2__unordered_map_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________operator_5b_5d_28int_20const__29(HEAP32[$5 >> 2] + 4 | 0, $0 + 12 | 0);
          __stack_pointer = $0 + 16 | 0;
          $5 = vision__VisualDatabaseFacade__getQueryFeaturePoints_28_29_20const(HEAP32[$27 >> 2]);
          $58 = $2 + HEAP32[$27 + 52 >> 2] | 0;
          $0 = __stack_pointer - 224 | 0;
          __stack_pointer = $0;
          $10 = -1;
          $2 = HEAP32[$12 + 12 >> 2];
          $9 = HEAP32[$12 + 16 >> 2] - $2 | 0;
          $14 = $9 >> 3;
          block182 : {
           if ($14 >>> 0 < 4) {
            break block182
           }
           block194 : {
            $13 = emscripten_builtin_malloc($9 << 1);
            if ($13) {
             $9 = emscripten_builtin_malloc(Math_imul($14, 24));
             if (!$9) {
              break block196
             }
             $18 = HEAP32[$1 >> 2];
             $5 = HEAP32[$5 >> 2];
             while (1) {
              if (($14 | 0) != ($60 | 0)) {
               $1 = $13 + ($60 << 4) | 0;
               $6 = $2 + ($60 << 3) | 0;
               $8 = $5 + Math_imul(HEAP32[$6 >> 2], 20) | 0;
               HEAPF64[$1 >> 3] = HEAPF32[$8 >> 2];
               HEAPF64[$1 + 8 >> 3] = HEAPF32[$8 + 4 >> 2];
               $1 = $9 + Math_imul($60, 24) | 0;
               $6 = $18 + Math_imul(HEAP32[$6 + 4 >> 2], 12) | 0;
               HEAPF64[$1 >> 3] = HEAPF32[$6 >> 2];
               $3 = HEAPF32[$6 + 4 >> 2];
               HEAP32[$1 + 16 >> 2] = 0;
               HEAP32[$1 + 20 >> 2] = 0;
               HEAPF64[$1 + 8 >> 3] = $3;
               $60 = $60 + 1 | 0;
               continue;
              }
              break;
             };
             HEAP32[$0 + 212 >> 2] = $9;
             HEAP32[$0 + 208 >> 2] = $13;
             HEAP32[$0 + 216 >> 2] = $14;
             $2 = $4 + 8 | 0;
             $6 = 0;
             $5 = -1;
             block193 : {
              if (($14 | 0) < 4) {
               break block193
              }
              while (1) {
               if (($6 | 0) != ($14 | 0)) {
                $1 = Math_imul($6, 24);
                $6 = $6 + 1 | 0;
                if (HEAPF64[($1 + $9 | 0) + 16 >> 3] == 0.0) {
                 continue
                }
                break block193;
               }
               break;
              };
              if (HEAPF64[$2 >> 3] == 0.0 | HEAPF64[$2 + 32 >> 3] != 0.0 | (HEAPF64[$2 + 40 >> 3] == 0.0 | HEAPF64[$2 + 64 >> 3] != 0.0) | (HEAPF64[$2 + 72 >> 3] != 0.0 | HEAPF64[$2 + 80 >> 3] != 1.0 | (HEAPF64[$2 + 24 >> 3] != 0.0 | HEAPF64[$2 + 56 >> 3] != 0.0)) | HEAPF64[$2 + 88 >> 3] != 0.0) {
               break block193
              }
              block185 : {
               $1 = $14 << 1;
               $4 = arMatrixAlloc($1, 8);
               if (!$4) {
                arLog(0, 3, 1419, 0);
                break block185;
               }
               block186 : {
                block192 : {
                 block191 : {
                  $18 = arMatrixAlloc($1, 1);
                  if ($18) {
                   $5 = 0;
                   while (1) {
                    if (($5 | 0) != ($14 | 0)) {
                     $1 = HEAP32[$4 >> 2] + ($5 << 7) | 0;
                     $6 = $9 + Math_imul($5, 24) | 0;
                     HEAPF64[$1 >> 3] = HEAPF64[$6 >> 3];
                     $21 = HEAPF64[$6 + 8 >> 3];
                     HEAP32[$1 + 24 >> 2] = 0;
                     HEAP32[$1 + 28 >> 2] = 0;
                     HEAP32[$1 + 16 >> 2] = 0;
                     HEAP32[$1 + 20 >> 2] = 1072693248;
                     HEAPF64[$1 + 8 >> 3] = $21;
                     HEAP32[$1 + 32 >> 2] = 0;
                     HEAP32[$1 + 36 >> 2] = 0;
                     HEAP32[$1 + 40 >> 2] = 0;
                     HEAP32[$1 + 44 >> 2] = 0;
                     $60 = $5 << 4;
                     $8 = $60 + $13 | 0;
                     HEAPF64[$1 + 48 >> 3] = HEAPF64[$8 >> 3] * -HEAPF64[$6 >> 3];
                     $21 = HEAPF64[$8 >> 3];
                     $28 = HEAPF64[$6 + 8 >> 3];
                     HEAP32[$1 + 64 >> 2] = 0;
                     HEAP32[$1 + 68 >> 2] = 0;
                     HEAP32[$1 + 72 >> 2] = 0;
                     HEAP32[$1 + 76 >> 2] = 0;
                     HEAP32[$1 + 80 >> 2] = 0;
                     HEAP32[$1 + 84 >> 2] = 0;
                     HEAPF64[$1 + 56 >> 3] = $21 * -$28;
                     HEAPF64[$1 + 88 >> 3] = HEAPF64[$6 >> 3];
                     $21 = HEAPF64[$6 + 8 >> 3];
                     HEAP32[$1 + 104 >> 2] = 0;
                     HEAP32[$1 + 108 >> 2] = 1072693248;
                     HEAPF64[$1 + 96 >> 3] = $21;
                     HEAPF64[$1 + 112 >> 3] = HEAPF64[$8 + 8 >> 3] * -HEAPF64[$6 >> 3];
                     HEAPF64[$1 + 120 >> 3] = HEAPF64[$8 + 8 >> 3] * -HEAPF64[$6 + 8 >> 3];
                     $1 = $60 + HEAP32[$18 >> 2] | 0;
                     HEAPF64[$1 >> 3] = HEAPF64[$8 >> 3];
                     HEAPF64[$1 + 8 >> 3] = HEAPF64[$8 + 8 >> 3];
                     $5 = $5 + 1 | 0;
                     continue;
                    }
                    break;
                   };
                   $1 = arMatrixAllocTrans($4);
                   if (!$1) {
                    arImageProcFinal($4);
                    arImageProcFinal($18);
                    arLog(0, 3, 3276, 0);
                    break block185;
                   }
                   $6 = arMatrixAllocMul($1, $4);
                   if (!$6) {
                    arImageProcFinal($4);
                    arImageProcFinal($18);
                    arImageProcFinal($1);
                    arLog(0, 3, 3790, 0);
                    break block185;
                   }
                   $14 = arMatrixAllocMul($1, $18);
                   if (!$14) {
                    arImageProcFinal($4);
                    arImageProcFinal($18);
                    arImageProcFinal($1);
                    arImageProcFinal($6);
                    arLog(0, 3, 4377, 0);
                    break block185;
                   }
                   if ((arMatrixSelfInv($6) | 0) < 0) {
                    arImageProcFinal($4);
                    arImageProcFinal($18);
                    arImageProcFinal($1);
                    arImageProcFinal($6);
                    arImageProcFinal($14);
                    arLog(0, 3, 5188, 0);
                    break block185;
                   }
                   $8 = arMatrixAllocMul($6, $14);
                   if (!$8) {
                    arImageProcFinal($4);
                    arImageProcFinal($18);
                    arImageProcFinal($1);
                    arImageProcFinal($6);
                    arImageProcFinal($14);
                    arLog(0, 3, 5939, 0);
                    break block185;
                   }
                   $5 = HEAP32[$8 >> 2];
                   $29 = HEAPF64[$5 + 40 >> 3];
                   $48 = HEAPF64[$5 + 16 >> 3];
                   $55 = HEAPF64[$5 + 32 >> 3];
                   $34 = HEAPF64[$5 + 8 >> 3];
                   $21 = HEAPF64[$5 + 56 >> 3];
                   $28 = HEAPF64[$2 >> 3];
                   $22 = HEAPF64[$2 + 8 >> 3];
                   $36 = HEAPF64[$2 + 40 >> 3];
                   $52 = HEAPF64[$5 + 24 >> 3];
                   $31 = HEAPF64[$2 + 48 >> 3];
                   $38 = HEAPF64[$5 >> 3];
                   $40 = HEAPF64[$2 + 16 >> 3];
                   $30 = HEAPF64[$5 + 48 >> 3];
                   arImageProcFinal($4);
                   arImageProcFinal($18);
                   arImageProcFinal($1);
                   arImageProcFinal($6);
                   arImageProcFinal($14);
                   arImageProcFinal($8);
                   $41 = ($29 - $31) / $36;
                   $39 = ($48 - $40 - $22 * $41) / $28;
                   $29 = ($52 - $31 * $30) / $36;
                   $52 = ($38 - $40 * $30 - $22 * $29) / $28;
                   $48 = Math_sqrt($30 * $30 + ($52 * $52 + $29 * $29));
                   $53 = $22;
                   $22 = ($55 - $31 * $21) / $36;
                   $31 = ($34 - $40 * $21 - $53 * $22) / $28;
                   $28 = Math_sqrt($21 * $21 + ($31 * $31 + $22 * $22));
                   $36 = ($48 + $28) * .5;
                   $153 = $39 / $36;
                   $154 = $41 / $36;
                   $155 = 1.0 / $36;
                   $34 = $52 / $48;
                   $36 = $22 / $28;
                   $38 = $29 / $48;
                   $40 = $31 / $28;
                   $22 = $34 * $36 - $38 * $40;
                   $28 = $21 / $28;
                   $62 = $30 / $48;
                   $30 = $38 * $28 - $62 * $36;
                   $31 = $62 * $40 - $34 * $28;
                   $21 = $22 * $22 + ($30 * $30 + $31 * $31);
                   if ($21 == 0.0) {
                    break block186
                   }
                   $29 = Math_sqrt($21);
                   $21 = $22 / $29;
                   $22 = $30 / $29;
                   $30 = -$22;
                   $6 = 0;
                   $31 = $31 / $29;
                   $56 = $31 * $34 - $38 * $22;
                   block187 : {
                    if ($56 != 0.0) {
                     $39 = $38;
                     $50 = $34;
                     $41 = $31;
                     $29 = $22;
                     $1 = 0;
                     $48 = $62;
                     break block187;
                    }
                    $30 = $21 * $34 + $62 * $30;
                    $6 = $30 != 0.0;
                    $41 = $6 ? $21 : $31;
                    $50 = $6 ? $34 : $62;
                    $39 = $6 ? $62 : $38;
                    $29 = $6 ? $22 : $21;
                    $56 = $41 * $50 - $39 * $29;
                    $21 = $6 ? $31 : $22;
                    $1 = $30 == 0.0;
                    $30 = -$29;
                    $48 = $6 ? $38 : $34;
                   }
                   if ($56 == 0.0) {
                    break block186
                   }
                   $22 = ($39 * $21 - $41 * $48) / $56;
                   $31 = $62 * $28 + ($34 * $40 + $38 * $36);
                   $31 = $31 < 0.0 ? -$31 : $31;
                   $74 = (Math_sqrt($31 + 1.0) + Math_sqrt(1.0 - $31)) * .5;
                   $31 = $74 * $41 / $56;
                   $55 = $29 * $39 - $50 * $41;
                   $52 = $74 * $29 / $55;
                   $55 = ($50 * $21 - $29 * $48) / $55;
                   $53 = $22 * $31 + $52 * $55;
                   $39 = $22 * $22 + $55 * $55 + 1.0;
                   $48 = $53 * $53 - $39 * ($31 * $31 + $52 * $52 + -1.0);
                   if ($48 < 0.0) {
                    break block186
                   }
                   $67 = Math_sqrt($48);
                   $50 = (-$53 - $67) / $39;
                   $72 = $55 * $50 + $52;
                   $48 = $22 * $50 + $31;
                   $53 = ($67 - $53) / $39;
                   $39 = $55 * $53 + $52;
                   $31 = $22 * $53 + $31;
                   block188 : {
                    if ($6) {
                     $22 = $41;
                     $41 = $21;
                     $21 = $29;
                     $52 = $31;
                     $55 = $53;
                     $31 = $39;
                     $53 = $48;
                     $48 = $72;
                     $72 = $50;
                     break block188;
                    }
                    if (!$1) {
                     $22 = $21;
                     $21 = $29;
                     $52 = $31;
                     $55 = $39;
                     $31 = $53;
                     $53 = $48;
                     $48 = $50;
                     break block188;
                    }
                    $30 = -$21;
                    $22 = $29;
                    $52 = $53;
                    $55 = $39;
                    $53 = $50;
                   }
                   $6 = 0;
                   $56 = $41 * $40 + $36 * $30;
                   block189 : {
                    if ($56 != 0.0) {
                     $67 = $28;
                     $39 = $36;
                     $50 = $40;
                     $29 = $41;
                     $30 = $21;
                     $1 = 0;
                     break block189;
                    }
                    $140 = $22 * $40 + $28 * $30;
                    $6 = $140 != 0.0;
                    $29 = $6 ? $22 : $41;
                    $50 = $6 ? $40 : $28;
                    $39 = $6 ? $28 : $36;
                    $30 = $6 ? $21 : $22;
                    $56 = $29 * $50 - $39 * $30;
                    $22 = $6 ? $41 : $21;
                    $67 = $6 ? $36 : $40;
                    $1 = $140 == 0.0;
                   }
                   if ($56 == 0.0) {
                    break block186
                   }
                   $41 = ($39 * $22 - $29 * $67) / $56;
                   $56 = $74 * $29 / $56;
                   $21 = $30 * $39 - $50 * $29;
                   $39 = $74 * $30 / $21;
                   $22 = ($50 * $22 - $30 * $67) / $21;
                   $50 = $41 * $56 + $39 * $22;
                   $67 = $41 * $41 + $22 * $22 + 1.0;
                   $21 = $50 * $50 - $67 * ($56 * $56 + $39 * $39 + -1.0);
                   if ($21 < 0.0) {
                    break block186
                   }
                   $28 = Math_sqrt($21);
                   $21 = (-$50 - $28) / $67;
                   $29 = $22 * $21 + $39;
                   $30 = $41 * $21 + $56;
                   $34 = $22;
                   $22 = ($28 - $50) / $67;
                   $34 = $34 * $22 + $39;
                   $28 = $41 * $22 + $56;
                   block190 : {
                    if ($6) {
                     $40 = $28;
                     $36 = $22;
                     $28 = $34;
                     $22 = $30;
                     $30 = $29;
                     break block190;
                    }
                    if (!$1) {
                     $40 = $28;
                     $36 = $34;
                     $28 = $22;
                     $22 = $30;
                     $30 = $21;
                     $21 = $29;
                     break block190;
                    }
                    $40 = $22;
                    $36 = $34;
                    $22 = $21;
                    $21 = $29;
                   }
                   $29 = $48 * $30 + ($53 * $22 + $72 * $21);
                   $29 = $29 < 0.0 ? -$29 : $29;
                   $34 = $48 * $28 + ($53 * $40 + $72 * $36);
                   $34 = $34 < 0.0 ? -$34 : $34;
                   $38 = $31 * $28 + ($52 * $40 + $55 * $36);
                   $41 = $38 < 0.0 ? -$38 : $38;
                   $38 = $31 * $30 + ($52 * $22 + $55 * $21);
                   $38 = $38 < 0.0 ? -$38 : $38;
                   if ($41 < $38) {
                    if ($34 > $41) {
                     $62 = $31;
                     $38 = $55;
                     $34 = $52;
                     if ($29 > $41) {
                      break block186
                     }
                     break block191;
                    }
                    $1 = $29 > $34;
                    $28 = $1 ? $28 : $30;
                    $36 = $1 ? $36 : $21;
                    $22 = $1 ? $40 : $22;
                    break block192;
                   }
                   if ($34 > $38) {
                    if (!($29 > $38)) {
                     break block191
                    }
                    $28 = $30;
                    $36 = $21;
                    $40 = $22;
                    $62 = $31;
                    $38 = $55;
                    $34 = $52;
                    break block186;
                   }
                   $1 = $29 > $34;
                   $28 = $1 ? $28 : $30;
                   $36 = $1 ? $36 : $21;
                   $22 = $1 ? $40 : $22;
                   break block192;
                  }
                  arImageProcFinal($4);
                  arLog(0, 3, 2604, 0);
                  break block185;
                 }
                 $28 = $30;
                 $36 = $21;
                }
                $40 = $22;
                $62 = $48;
                $38 = $72;
                $34 = $53;
               }
               HEAPF64[$0 + 176 >> 3] = $62;
               HEAPF64[$0 + 144 >> 3] = $38;
               HEAPF64[$0 + 112 >> 3] = $34;
               HEAPF64[$0 + 184 >> 3] = $28;
               HEAPF64[$0 + 152 >> 3] = $36;
               HEAPF64[$0 + 120 >> 3] = $40;
               HEAPF64[$0 + 200 >> 3] = $155;
               HEAPF64[$0 + 168 >> 3] = $154;
               HEAPF64[$0 + 136 >> 3] = $153;
               $30 = $34 * $36 - $38 * $40;
               $22 = $38 * $28 - $62 * $36;
               $28 = $62 * $40 - $34 * $28;
               $21 = Math_sqrt($30 * $30 + ($22 * $22 + $28 * $28));
               HEAPF64[$0 + 192 >> 3] = $30 / $21;
               HEAPF64[$0 + 160 >> 3] = $28 / $21;
               HEAPF64[$0 + 128 >> 3] = $22 / $21;
               $5 = 0;
               break block193;
              }
              $5 = -1;
             }
             if (($5 | 0) < 0) {
              emscripten_builtin_free($13);
              emscripten_builtin_free($9);
              break block182;
             }
             $1 = icpCreateHandle($2);
             HEAP32[$0 + 220 >> 2] = $1;
             if (!$1) {
              emscripten_builtin_free($13);
              emscripten_builtin_free($9);
              break block182;
             }
             if ((icpPoint($1, $0 + 208 | 0, $0 + 112 | 0, $0, $0 + 104 | 0) | 0) >= 0) {
              $1 = 0;
              label93 : while (1) {
               if (($1 | 0) == 3) {
                break block194
               }
               $2 = $58 + ($1 << 4) | 0;
               $4 = $0 + ($1 << 5) | 0;
               $60 = 0;
               while (1) if (($60 | 0) == 4) {
                $1 = $1 + 1 | 0;
                continue label93;
               } else {
                HEAPF32[$2 + ($60 << 2) >> 2] = HEAPF64[$4 + ($60 << 3) >> 3];
                $60 = $60 + 1 | 0;
                continue;
               };
              };
             }
             emscripten_builtin_free($13);
             emscripten_builtin_free($9);
             icpDeleteHandle($0 + 220 | 0);
             break block182;
            }
            break block196;
           }
           icpDeleteHandle($0 + 220 | 0);
           emscripten_builtin_free($13);
           emscripten_builtin_free($9);
           $21 = HEAPF64[$0 + 104 >> 3];
           HEAPF32[$58 + 52 >> 2] = $21;
           $10 = $21 > 10.000000476837158 ? -1 : 0;
          }
          __stack_pointer = $0 + 224 | 0;
          if ($10) {
           break block171
          }
          $0 = HEAP32[$27 + 52 >> 2] + Math_imul($17, 68) | 0;
          HEAP32[$0 + 60 >> 2] = 0;
          $1 = HEAP32[$12 + 12 >> 2];
          $2 = HEAP32[$12 + 16 >> 2];
          HEAP32[$0 + 48 >> 2] = $17;
          $1 = $2 - $1 >> 3;
          HEAP32[$0 + 56 >> 2] = $1;
          HEAPF64[$54 + 16 >> 3] = HEAPF32[$0 + 52 >> 2];
          HEAP32[$54 + 8 >> 2] = $1;
          HEAP32[$54 + 4 >> 2] = $1;
          HEAP32[$54 >> 2] = $17;
          arLog(0, 1, 11392, $54);
          break block171;
         } else {
          HEAP32[(HEAP32[$27 + 52 >> 2] + Math_imul($1, 68) | 0) + 60 >> 2] = -1;
          $1 = $1 + 1 | 0;
          continue;
         };
        }
        break block196;
       }
       $0 = HEAP32[$27 + 56 >> 2];
       $0 = ($0 | 0) > 0 ? $0 : 0;
       $1 = 0;
       while (1) {
        if (($0 | 0) != ($1 | 0)) {
         HEAP32[(HEAP32[$27 + 52 >> 2] + Math_imul($1, 68) | 0) + 64 >> 2] = 0;
         $1 = $1 + 1 | 0;
         continue;
        }
        break;
       };
       if (($71 | 0) == 1) {
        break block0
       }
       emscripten_builtin_free($44);
      }
      __stack_pointer = $54 + 32 | 0;
      break __inlined_func$kpmMatching$6;
     }
     arLog(0, 3, 8931, 0);
     exit(1);
     wasm2js_trap();
    }
    abort();
    wasm2js_trap();
   }
   $0 = HEAP32[$64 + 224 >> 2];
   if ($0) {
    HEAP32[$61 + 56 >> 2] = HEAP32[$0 + 52 >> 2];
    HEAP32[$61 + 52 >> 2] = HEAP32[$0 + 56 >> 2];
   }
   if (HEAPU8[$64 + 236 | 0] == 1) {
    $21 = HEAPF64[$64 + 256 >> 3];
    $28 = HEAPF64[$64 + 248 >> 3];
    $0 = emscripten_builtin_malloc(64);
    block116 : {
     if ($0) {
      HEAP32[$0 + 24 >> 2] = 0;
      HEAP32[$0 + 28 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = 0;
      HEAP32[$0 + 12 >> 2] = 0;
      HEAP32[$0 + 40 >> 2] = 0;
      HEAP32[$0 + 44 >> 2] = 0;
      HEAP32[$0 + 32 >> 2] = 0;
      HEAP32[$0 + 36 >> 2] = 1072693248;
      HEAP32[$0 + 48 >> 2] = 0;
      HEAP32[$0 + 52 >> 2] = 0;
      HEAP32[$0 + 56 >> 2] = 0;
      HEAP32[$0 + 60 >> 2] = 0;
      if (!($21 == 0.0 | $28 == 0.0)) {
       $21 = 1.0 / $21;
       HEAPF64[$0 >> 3] = $21 / ($21 + 1.0 / $28);
       break block116;
      }
      emscripten_builtin_free($0);
     }
     $0 = 0;
    }
    HEAP32[$64 + 240 >> 2] = $0;
   }
   $44 = $64 + 272 | 0;
   $0 = 0;
   while (1) {
    $1 = HEAP32[$61 + 52 >> 2];
    if (($1 | 0) <= ($0 | 0)) {
     break block
    }
    $1 = HEAP32[$61 + 56 >> 2] + Math_imul($0, 68) | 0;
    if (!HEAP32[$1 + 60 >> 2]) {
     $2 = HEAP32[$1 + 48 >> 2];
     HEAP32[$64 + 264 >> 2] = $2;
     wasm2js_memory_copy($61, $1, 48);
     $1 = 0;
     $4 = HEAP32[($2 << 2) + $44 >> 2];
     if ($4) {
      HEAP32[$4 + 152 >> 2] = 1;
      $5 = $4 + 8 | 0;
      while (1) {
       if (($1 | 0) != 3) {
        $2 = $1 << 4;
        $9 = $2 + $5 | 0;
        $18 = $2 + $61 | 0;
        $2 = 0;
        while (1) {
         if (($2 | 0) != 4) {
          $6 = $2 << 2;
          HEAPF32[$6 + $9 >> 2] = HEAPF32[$6 + $18 >> 2];
          $2 = $2 + 1 | 0;
          continue;
         }
         break;
        };
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      };
      HEAP32[$4 + 168 >> 2] = -1;
     }
    }
    $0 = $0 + 1 | 0;
    continue;
   };
  }
  __stack_pointer = $61 - -64 | 0;
  return $1 | 0;
 }
 
 function createKpmHandleHelper__$_1____invoke_28_KpmHandle__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if ($0) {
   kpmDeleteHandle($1 + 12 | 0)
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function setupAR2($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 12 >> 2] = $0;
  $2 = $6 + 12 | 0;
  $0 = -1;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $2)) {
    break block
   }
   $3 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($2);
   $2 = HEAP32[$3 + 192 >> 2];
   $8 = HEAP32[$3 + 552 >> 2];
   $1 = HEAP32[$2 >> 2];
   $7 = HEAP32[$2 + 4 >> 2];
   block2 : {
    $0 = emscripten_builtin_malloc(13732);
    if ($0) {
     block1 : {
      HEAP32[$0 + 13280 >> 2] = 1;
      HEAP32[$0 + 40 >> 2] = 1058642330;
      HEAP32[$0 + 44 >> 2] = 1073741824;
      HEAP32[$0 + 32 >> 2] = 11;
      HEAP32[$0 + 36 >> 2] = 10;
      HEAP32[$0 + 24 >> 2] = 25;
      HEAP32[$0 + 28 >> 2] = 11;
      HEAP32[$0 + 8 >> 2] = $7;
      HEAP32[$0 + 4 >> 2] = $1;
      HEAP32[$0 + 20 >> 2] = $8;
      $1 = emscripten_builtin_malloc(Math_imul($1, $7));
      HEAP32[$0 + 13300 >> 2] = $1;
      if (!$1) {
       break block1
      }
      HEAP32[$0 + 13304 >> 2] = 0;
      break block2;
     }
    }
    arLog(0, 3, 34573, 0);
    exit(1);
    wasm2js_trap();
   }
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$0 >> 2] = 1;
   $2 = icpCreateHandle($2 + 8 | 0);
   HEAP32[$0 + 16 >> 2] = $2;
   icpSetInlierProbability($2, 0.0);
   block3 : {
    if (!$0) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($6, 33456);
     webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
     break block3;
    }
    HEAP32[$3 + 232 >> 2] = $0;
    if ($0) {
     HEAPF32[$0 + 44 >> 2] = 5
    }
    $0 = HEAP32[$3 + 232 >> 2];
    if ($0) {
     HEAPF32[$0 + 40 >> 2] = .5
    }
    $0 = HEAP32[$3 + 232 >> 2];
    if ($0) {
     HEAP32[$0 + 36 >> 2] = 16
    }
    $0 = HEAP32[$3 + 232 >> 2];
    if ($0) {
     HEAP32[$0 + 24 >> 2] = 6
    }
    $0 = HEAP32[$3 + 232 >> 2];
    if ($0) {
     HEAP32[$0 + 28 >> 2] = 6
    }
    $0 = HEAP32[$3 + 232 >> 2];
    if ($0) {
     HEAP32[$0 + 32 >> 2] = 6
    }
    $10 = __stack_pointer - 16 | 0;
    __stack_pointer = $10;
    $11 = HEAP32[$3 + 192 >> 2];
    $15 = HEAP32[$11 >> 2];
    $16 = HEAP32[$11 + 4 >> 2];
    $2 = emscripten_builtin_calloc(4156);
    if (!$2) {
     arLog(0, 3, 1733, 0);
     exit(1);
     wasm2js_trap();
    }
    $12 = operator_20new_28unsigned_20long_29(4);
    HEAP32[$12 >> 2] = 0;
    $13 = operator_20new_28unsigned_20long_29(24);
    $0 = $13;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 1065353216;
    $1 = operator_20new_28unsigned_20long_29(840);
    $0 = $1;
    HEAP32[$0 + 64 >> 2] = 0;
    HEAP32[$0 + 68 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP32[$0 + 84 >> 2] = 0;
    HEAP32[$0 + 88 >> 2] = 1065353216;
    $0 = $0 + 92 | 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 >> 2] = 22948;
    wasm2js_memory_fill($0 + 32 | 0, 0, 36);
    $7 = $1 + 160 | 0;
    $0 = $7;
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP8[$0 + 28 | 0] = 1;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 10;
    HEAP32[$0 + 12 >> 2] = 10;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 64 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 1092616192;
    HEAP32[$0 + 68 >> 2] = 0;
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP32[$0 + 88 >> 2] = 1091567616;
    $0 = $0 + 92 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    wasm2js_memory_fill($0 + 12 | 0, 0, 40);
    HEAP32[$7 + 152 >> 2] = 0;
    HEAP32[$7 + 144 >> 2] = 0;
    HEAP32[$7 + 148 >> 2] = 0;
    vision__DoGScaleInvariantDetector__setMaxNumFeaturePoints_28unsigned_20long_29($7, 5e3);
    std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($7 + 144 | 0, 36);
    $0 = $1 + 316 | 0;
    wasm2js_memory_copy($0, 23680, 48);
    wasm2js_memory_copy($0 + 48 | 0, 23728, 48);
    wasm2js_memory_copy($0 + 96 | 0, 23776, 48);
    wasm2js_memory_copy($0 + 144 | 0, 23824, 48);
    wasm2js_memory_copy($0 + 192 | 0, 23872, 48);
    wasm2js_memory_copy($0 + 240 | 0, 23920, 48);
    HEAP32[$0 + 312 >> 2] = 1057803469;
    HEAP32[$0 + 316 >> 2] = 1088421888;
    HEAP32[$0 + 304 >> 2] = 1053609165;
    HEAP32[$0 + 308 >> 2] = 1056125747;
    HEAP32[$0 + 296 >> 2] = 1048576e3;
    HEAP32[$0 + 300 >> 2] = 1051092582;
    HEAP32[$0 + 288 >> 2] = 1036831949;
    HEAP32[$0 + 292 >> 2] = 1043542835;
    HEAP32[$1 + 644 >> 2] = 0;
    HEAP32[$1 + 648 >> 2] = 1060320051;
    HEAP32[$1 + 636 >> 2] = 0;
    HEAP32[$1 + 640 >> 2] = 0;
    $0 = $1 + 652 | 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP8[$0 + 16 | 0] = 1;
    wasm2js_memory_fill($0 + 20 | 0, 0, 88);
    HEAP32[$0 + 112 >> 2] = 0;
    HEAP32[$0 + 116 >> 2] = 0;
    HEAP32[$0 + 108 >> 2] = 1065353216;
    HEAP32[$0 + 120 >> 2] = 0;
    HEAP32[$0 + 124 >> 2] = 0;
    HEAP32[$0 + 128 >> 2] = 0;
    HEAP32[$0 + 132 >> 2] = 0;
    $8 = $1 + 788 | 0;
    wasm2js_memory_fill($8, 0, 36);
    std____2__vector_float_2c_20std____2__allocator_float____resize_28unsigned_20long_29($8, 9216);
    $0 = $8 + 24 | 0;
    $4 = HEAP32[$0 >> 2];
    $5 = HEAP32[$0 + 4 >> 2] - $4 >> 3;
    block5 : {
     if ($5 >>> 0 < 1024) {
      $14 = __stack_pointer - 32 | 0;
      __stack_pointer = $14;
      $5 = 1024 - $5 | 0;
      $4 = HEAP32[$0 + 4 >> 2];
      block4 : {
       if ($5 >>> 0 <= HEAP32[$0 + 8 >> 2] - $4 >> 3 >>> 0) {
        std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______construct_at_end_28unsigned_20long_29($0, $5);
        break block4;
       }
       $9 = std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long____29($14 + 12 | 0, std____2__vector_std____2__pair_float_2c_20int__2c_20std____2__allocator_std____2__pair_float_2c_20int_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $5 + ($4 - HEAP32[$0 >> 2] >> 3) | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3, $0);
       $4 = HEAP32[$9 + 8 >> 2];
       $5 = $4 + ($5 << 3) | 0;
       while (1) {
        if (($4 | 0) != ($5 | 0)) {
         HEAP32[$4 >> 2] = 0;
         HEAP32[$4 + 4 >> 2] = 0;
         $4 = $4 + 8 | 0;
         continue;
        }
        break;
       };
       HEAP32[$9 + 8 >> 2] = $5;
       std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $9);
       std____2____split_buffer_std____2__pair_float_2c_20unsigned_20long__2c_20std____2__allocator_std____2__pair_float_2c_20unsigned_20long_________split_buffer_28_29($9);
      }
      __stack_pointer = $14 + 32 | 0;
      break block5;
     }
     if ($5 >>> 0 > 1024) {
      HEAP32[$0 + 4 >> 2] = $4 - -8192
     }
    }
    HEAP32[$8 + 48 >> 2] = 50;
    HEAP32[$8 + 44 >> 2] = 1064;
    HEAP32[$8 + 40 >> 2] = 1024;
    HEAPF32[$8 + 36 >> 2] = .009999999776482582;
    HEAP32[$1 + 212 >> 2] = 1077936128;
    HEAP32[$1 + 216 >> 2] = 1082130432;
    vision__DoGScaleInvariantDetector__setMaxNumFeaturePoints_28unsigned_20long_29($7, 500);
    HEAP8[$1 + 8 | 0] = 1;
    HEAP32[$1 >> 2] = 8;
    HEAP32[$1 + 4 >> 2] = 1077936128;
    std____2__unique_ptr_vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96___2c_20std____2__default_delete_vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96______reset_5babi_ne200100_5d_28vision__VisualDatabase_vision__FREAKExtractor_2c_20vision__BinaryFeatureStore_2c_20vision__BinaryFeatureMatcher_96____29($13, $1);
    std____2__unique_ptr_vision__VisualDatabaseImpl_2c_20std____2__default_delete_vision__VisualDatabaseImpl____reset_5babi_ne200100_5d_28vision__VisualDatabaseImpl__29($12, $13);
    $0 = $2;
    HEAP32[$0 + 20 >> 2] = 1;
    HEAP32[$0 + 24 >> 2] = -1;
    HEAP32[$0 + 16 >> 2] = $16;
    HEAP32[$0 + 12 >> 2] = $15;
    HEAP32[$0 + 8 >> 2] = 1;
    HEAP32[$0 + 4 >> 2] = $11;
    HEAP32[$0 >> 2] = $12;
    if ($0) {
     $1 = 35
    } else {
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($10 + 4 | 0, 33219);
     webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($2);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
     $1 = 36;
    }
    HEAP32[$6 + 4 >> 2] = $1;
    HEAP32[$6 >> 2] = $0;
    __stack_pointer = $10 + 16 | 0;
    $0 = HEAP32[$3 + 224 >> 2];
    $2 = HEAP32[$6 >> 2];
    HEAP32[$3 + 224 >> 2] = $2;
    if ($0) {
     FUNCTION_TABLE[HEAP32[$3 + 228 >> 2]]($0);
     $2 = HEAP32[$3 + 224 >> 2];
    }
    HEAP32[$3 + 228 >> 2] = HEAP32[$6 + 4 >> 2];
    $0 = 0;
    if ($2) {
     break block
    }
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($6, 28616);
    webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
   $0 = -1;
  }
  __stack_pointer = $6 + 16 | 0;
  return $0 | 0;
 }
 
 function getNFTData($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $3 + 12 | 0)) {
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    break block;
   }
   $4 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($3 + 12 | 0);
   $1 = HEAP32[$4 + 388 >> 2];
   if (HEAP32[$4 + 392 >> 2] - $1 >> 4 >>> 0 <= $2 >>> 0) {
    $0 = std__logic_error__logic_error_28char_20const__29(__cxa_allocate_exception(8), 27033);
    HEAP32[$0 >> 2] = 74376;
    __cxa_throw($0 | 0, 74388, 12);
    wasm2js_trap();
   }
   $1 = $1 + ($2 << 4) | 0;
   $2 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $2;
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function setLogLevel($0) {
  $0 = $0 | 0;
  HEAP32[18612] = $0;
 }
 
 function getLogLevel() {
  return HEAP32[18612];
 }
 
 function deleteHandle($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $1 = HEAP32[$0 + 216 >> 2];
  if ($1) {
   $2 = -1;
   if (!(!$1 | !HEAP32[$1 + 7062384 >> 2])) {
    HEAP32[$1 + 7062384 >> 2] = 0;
    $2 = 0;
   }
   if ($2) {
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($3 + 4 | 0, 33381);
    webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
   }
   $1 = HEAP32[$0 + 216 >> 2];
   if ($1) {
    $2 = HEAP32[$1 + 7062408 >> 2];
    if ($2) {
     arImageProcFinal($2);
     HEAP32[$1 + 7062408 >> 2] = 0;
    }
    emscripten_builtin_free(HEAP32[$1 + 4834144 >> 2]);
    emscripten_builtin_free(HEAP32[$1 + 4834148 >> 2]);
    emscripten_builtin_free($1);
   }
   HEAP32[$0 + 216 >> 2] = 0;
  }
  if (HEAP32[$0 + 220 >> 2]) {
   $1 = HEAP32[$0 + 220 >> 2];
   if ($1) {
    icpDeleteHandle($1);
    emscripten_builtin_free(HEAP32[$0 + 220 >> 2]);
    HEAP32[$0 + 220 >> 2] = 0;
   }
   HEAP32[$0 + 220 >> 2] = 0;
  }
  if (HEAP32[$0 + 192 >> 2]) {
   $1 = $0 + 192 | 0;
   block1 : {
    if (!$1) {
     break block1
    }
    $2 = HEAP32[$1 >> 2];
    if (!$2) {
     break block1
    }
    emscripten_builtin_free(HEAP32[$2 + 184 >> 2]);
    emscripten_builtin_free(HEAP32[HEAP32[$1 >> 2] + 188 >> 2]);
    emscripten_builtin_free(HEAP32[$1 >> 2]);
    HEAP32[$1 >> 2] = 0;
   }
   HEAP32[$0 + 192 >> 2] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function teardown($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 12 >> 2] = $0;
  $3 = $6 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $3)) {
   $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($3);
   std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0 + 196 | 0);
   std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0 + 204 | 0);
   HEAP32[$0 + 200 >> 2] = 0;
   deleteHandle($0);
   emscripten_builtin_free(arController___arController_28_29($0));
   $4 = std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $3);
   if ($4) {
    $10 = __stack_pointer - 16 | 0;
    __stack_pointer = $10;
    $7 = $10 + 4 | 0;
    $2 = HEAP32[$4 + 4 >> 2];
    $1 = HEAP32[19508];
    $8 = __wasm_popcnt_i32($1);
    block : {
     if ($8 >>> 0 <= 1) {
      $2 = $1 - 1 & $2;
      break block;
     }
     if ($1 >>> 0 > $2 >>> 0) {
      break block
     }
     $2 = ($2 >>> 0) % ($1 >>> 0) | 0;
    }
    $11 = HEAP32[19507];
    $5 = $11 + ($2 << 2) | 0;
    $0 = HEAP32[$5 >> 2];
    while (1) {
     $3 = $0;
     $0 = HEAP32[$0 >> 2];
     if (($4 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
    block2 : {
     if (($3 | 0) != 78036) {
      $0 = HEAP32[$3 + 4 >> 2];
      block1 : {
       if ($8 >>> 0 <= 1) {
        $0 = $1 - 1 & $0;
        break block1;
       }
       if ($0 >>> 0 < $1 >>> 0) {
        break block1
       }
       $0 = ($0 >>> 0) % ($1 >>> 0) | 0;
      }
      if (($0 | 0) == ($2 | 0)) {
       break block2
      }
     }
     $0 = HEAP32[$4 >> 2];
     if ($0) {
      $0 = HEAP32[$0 + 4 >> 2];
      block3 : {
       if ($8 >>> 0 <= 1) {
        $0 = $1 - 1 & $0;
        break block3;
       }
       if ($0 >>> 0 < $1 >>> 0) {
        break block3
       }
       $0 = ($0 >>> 0) % ($1 >>> 0) | 0;
      }
      if (($0 | 0) == ($2 | 0)) {
       break block2
      }
     }
     HEAP32[$5 >> 2] = 0;
    }
    $5 = HEAP32[$4 >> 2];
    $9 = 0;
    block4 : {
     if (!$5) {
      break block4
     }
     $0 = HEAP32[$5 + 4 >> 2];
     block5 : {
      if ($8 >>> 0 <= 1) {
       $0 = $1 - 1 & $0;
       break block5;
      }
      if ($0 >>> 0 < $1 >>> 0) {
       break block5
      }
      $0 = ($0 >>> 0) % ($1 >>> 0) | 0;
     }
     $9 = $5;
     if (($0 | 0) == ($2 | 0)) {
      break block4
     }
     HEAP32[($0 << 2) + $11 >> 2] = $3;
     $9 = HEAP32[$4 >> 2];
    }
    HEAP32[$3 >> 2] = $9;
    HEAP32[$4 >> 2] = 0;
    HEAP32[19510] = HEAP32[19510] - 1;
    HEAP8[$7 + 8 | 0] = 1;
    HEAP32[$7 + 4 >> 2] = 78028;
    HEAP32[$7 >> 2] = $4;
    std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void________unique_ptr_5babi_ne200100_5d_28_29($7);
    __stack_pointer = $10 + 16 | 0;
   }
   $0 = 0;
  } else {
   $0 = -1
  }
  __stack_pointer = $6 + 16 | 0;
  return $0 | 0;
 }
 
 function arController___arController_28_29($0) {
  var $1 = 0;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0 + 388 | 0);
  std____2____hash_table_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2____unordered_map_hasher_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20true__2c_20std____2____unordered_map_equal_unsigned_20int_2c_20std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int__2c_20std____2__equal_to_unsigned_20int__2c_20std____2__hash_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_unsigned_20int_2c_20unsigned_20int________hash_table_28_29($0 + 352 | 0);
  $1 = HEAP32[$0 + 224 >> 2];
  HEAP32[$0 + 224 >> 2] = 0;
  if ($1) {
   FUNCTION_TABLE[HEAP32[$0 + 228 >> 2]]($1)
  }
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0 + 204 | 0);
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($0 + 196 | 0);
  return $0;
 }
 
 function recalculateCameraLens($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0);
   arglCameraFrustumRH(HEAP32[$0 + 192 >> 2], HEAPF64[$0 + 400 >> 3], HEAPF64[$0 + 408 >> 3], $0 + 424 | 0);
   $0 = 0;
  } else {
   $0 = -1
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function loadCamera($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 208 | 0;
  __stack_pointer = $6;
  $10 = -1;
  $1 = __stack_pointer - 288 | 0;
  __stack_pointer = $1;
  $2 = -1;
  $7 = $6 + 24 | 0;
  $4 = HEAP8[$0 + 11 | 0] < 0 ? HEAP32[$0 >> 2] : $0;
  block : {
   if (!$7 | !$4) {
    break block
   }
   $5 = fopen($4, 4199);
   if (!$5) {
    $3 = HEAP32[19563];
    HEAP32[$1 + 20 >> 2] = $4;
    HEAP32[$1 + 16 >> 2] = $3;
    arLog(0, 3, 5349, $1 + 16 | 0);
    (wasm2js_i32$0 = $1, wasm2js_i32$1 = __strerror_l(HEAP32[19563])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
    HEAP32[$1 >> 2] = 4007;
    arLog(0, 3, 3171, $1);
    break block;
   }
   $2 = 0;
   fseek($5, 0, 2);
   if (HEAP32[$5 + 76 >> 2] < 0) {
    $4 = HEAP32[$5 >> 2]
   } else {
    $4 = HEAP32[$5 >> 2]
   }
   block4 : {
    block2 : {
     if ($4 >>> 5 & 1) {
      HEAP32[$1 + 80 >> 2] = HEAP32[19563];
      arLog(0, 3, 5671, $1 + 80 | 0);
      (wasm2js_i32$0 = $1, wasm2js_i32$1 = __strerror_l(HEAP32[19563])), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
      HEAP32[$1 + 64 >> 2] = 4007;
      arLog(0, 3, 3171, $1 - -64 | 0);
      break block2;
     }
     $3 = ftell($5);
     rewind($5);
     block3 : {
      while (1) {
       $4 = $2;
       if (($2 | 0) == 4) {
        break block3
       }
       $2 = $2 + 1 | 0;
       if (($3 | 0) % HEAP32[($4 << 3) + 17700 >> 2] | 0) {
        continue
       }
       break;
      };
      if ((fread($1 + 96 | 0, HEAP32[($2 << 3) + 17692 >> 2], 1, $5) | 0) != 1) {
       HEAP32[$1 + 48 >> 2] = HEAP32[19563];
       arLog(0, 3, 7227, $1 + 48 | 0);
       (wasm2js_i32$0 = $1, wasm2js_i32$1 = __strerror_l(HEAP32[19563])), HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
       HEAP32[$1 + 32 >> 2] = 4007;
       arLog(0, 3, 3171, $1 + 32 | 0);
       break block2;
      }
      HEAP32[$1 + 272 >> 2] = $2;
      byteswap($1 + 96 | 0);
      if (!$4) {
       $8 = HEAPF64[$1 + 224 >> 3];
       HEAPF64[$1 + 224 >> 3] = HEAPF64[$1 + 216 >> 3];
       HEAPF64[$1 + 216 >> 3] = $8;
      }
      wasm2js_memory_copy($7, $1 + 96 | 0, 184);
      HEAP32[$1 + 284 >> 2] = 0;
      $9 = 1;
      while (1) {
       $3 = 0;
       if (($9 | 0) == 1) {
        break block4
       }
       $3 = HEAP32[$1 + 284 >> 2];
       HEAP32[$1 + 284 >> 2] = $3 + 4;
       $3 = HEAP32[$3 >> 2];
       $11 = HEAP32[$7 + 176 >> 2];
       HEAP32[$3 + 176 >> 2] = $11;
       $12 = $1 + 96 | 0;
       if ((fread($12, HEAP32[($11 << 3) + 17692 >> 2], 1, $5) | 0) != 1) {
        break block2
       }
       HEAP32[$1 + 272 >> 2] = $2;
       byteswap($12);
       if (!$4) {
        $8 = HEAPF64[$1 + 224 >> 3];
        HEAPF64[$1 + 224 >> 3] = HEAPF64[$1 + 216 >> 3];
        HEAPF64[$1 + 216 >> 3] = $8;
       }
       wasm2js_memory_copy($3, $1 + 96 | 0, 184);
       $9 = $9 + 1 | 0;
       continue;
      };
     }
     arLog(0, 3, 6907, 0);
    }
    $3 = -1;
   }
   $2 = $3;
   fclose($5);
  }
  __stack_pointer = $1 + 288 | 0;
  block5 : {
   if (($2 | 0) < 0) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($6 + 12 | 0, 33569);
    webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($2, HEAP8[$0 + 11 | 0] < 0 ? HEAP32[$0 >> 2] : $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2);
    break block5;
   }
   $0 = HEAP32[19529];
   HEAP32[19529] = $0 + 1;
   HEAP32[$6 + 12 >> 2] = $0;
   wasm2js_memory_copy(std____2__unordered_map_int_2c_20ARParam_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20ARParam_____operator_5b_5d_28int_20const__29($6 + 12 | 0), $6 + 24 | 0, 184);
   $10 = HEAP32[$6 + 12 >> 2];
  }
  __stack_pointer = $6 + 208 | 0;
  return $10 | 0;
 }
 
 function std____2__unordered_map_int_2c_20ARParam_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20ARParam_____operator_5b_5d_28int_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 4 >> 2] = $0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $0 = HEAP32[$0 >> 2];
  block3 : {
   block : {
    $1 = HEAP32[19513];
    if (!$1) {
     break block
    }
    $2 = HEAP32[19512];
    $8 = __wasm_popcnt_i32($1);
    $3 = $0 & $1 - 1;
    block1 : {
     if ($8 >>> 0 <= 1) {
      break block1
     }
     $3 = $0;
     if ($0 >>> 0 < $1 >>> 0) {
      break block1
     }
     $3 = ($0 >>> 0) % ($1 >>> 0) | 0;
    }
    $4 = HEAP32[$2 + ($3 << 2) >> 2];
    if (!$4) {
     break block
    }
    $10 = $1 - 1 | 0;
    $8 = $8 >>> 0 > 1;
    while (1) {
     $4 = HEAP32[$4 >> 2];
     if (!$4) {
      break block
     }
     $2 = HEAP32[$4 + 4 >> 2];
     if (($0 | 0) != ($2 | 0)) {
      block2 : {
       if (!$8) {
        $2 = $2 & $10;
        break block2;
       }
       if ($1 >>> 0 > $2 >>> 0) {
        break block2
       }
       $2 = ($2 >>> 0) % ($1 >>> 0) | 0;
      }
      if (($2 | 0) != ($3 | 0)) {
       break block
      }
      continue;
     }
     if (($0 | 0) != HEAP32[$4 + 8 >> 2]) {
      continue
     }
     break;
    };
    $0 = 0;
    break block3;
   }
   $2 = operator_20new_28unsigned_20long_29(200);
   HEAP32[$5 + 8 >> 2] = 78048;
   HEAP32[$5 + 4 >> 2] = $2;
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$6 + 4 >> 2] >> 2];
   wasm2js_memory_fill($2 + 16 | 0, 0, 184);
   HEAP8[$5 + 12 | 0] = 1;
   $7 = Math_fround(HEAP32[19515] + 1 >>> 0);
   $9 = HEAPF32[19516];
   block4 : {
    if ($7 > Math_fround($9 * Math_fround($1 >>> 0)) ? 0 : $1) {
     break block4
    }
    $1 = ($1 - 1 & $1) != 0 | $1 >>> 0 < 3 | $1 << 1;
    $7 = Math_fround(Math_ceil(Math_fround($7 / $9)));
    if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
     $3 = ~~$7 >>> 0
    } else {
     $3 = 0
    }
    void_20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_________rehash_true__28unsigned_20long_29(78048, $1 >>> 0 > $3 >>> 0 ? $1 : $3);
    $1 = HEAP32[19513];
    $3 = $1 - 1 | 0;
    if (!($1 & $3)) {
     $3 = $0 & $3;
     break block4;
    }
    if ($0 >>> 0 < $1 >>> 0) {
     $3 = $0;
     break block4;
    }
    $3 = ($0 >>> 0) % ($1 >>> 0) | 0;
   }
   $0 = $3 << 2;
   $3 = HEAP32[19512];
   $2 = $0 + $3 | 0;
   $0 = HEAP32[$2 >> 2];
   block5 : {
    if (!$0) {
     $4 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[19514];
     HEAP32[19514] = $4;
     HEAP32[$2 >> 2] = 78056;
     $0 = HEAP32[$4 >> 2];
     if (!$0) {
      break block5
     }
     $2 = HEAP32[$0 + 4 >> 2];
     $0 = $1 - 1 | 0;
     block6 : {
      if (!($0 & $1)) {
       $2 = $0 & $2;
       break block6;
      }
      if ($1 >>> 0 > $2 >>> 0) {
       break block6
      }
      $2 = ($2 >>> 0) % ($1 >>> 0) | 0;
     }
     HEAP32[$3 + ($2 << 2) >> 2] = $4;
     break block5;
    }
    $4 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$0 >> 2] = $4;
   }
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[19515] = HEAP32[19515] + 1;
   $0 = HEAP32[$5 + 4 >> 2];
   HEAP32[$5 + 4 >> 2] = 0;
   if ($0) {
    emscripten_builtin_free($0)
   }
   $0 = 1;
  }
  HEAP8[$6 + 12 | 0] = $0;
  HEAP32[$6 + 8 >> 2] = $4;
  __stack_pointer = $5 + 16 | 0;
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 8 >> 2] + 16 | 0;
 }
 
 function getCameraLens($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $1;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $4 + 12 | 0)) {
    HEAP32[$0 + 4 >> 2] = 4;
    HEAP32[$0 >> 2] = 78476;
    break block;
   }
   $5 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($4 + 12 | 0);
   emscripten__val__array_28_29($0);
   $1 = 424;
   while (1) {
    if (($1 | 0) == 552) {
     break block
    }
    $2 = HEAP32[$0 + 4 >> 2];
    $3 = __stack_pointer - 16 | 0;
    __stack_pointer = $3;
    HEAP32[$3 + 8 >> 2] = 28033;
    HEAP32[$3 + 12 >> 2] = $2;
    HEAP32[$3 + 4 >> 2] = $3 + 8;
    HEAP32[$3 >> 2] = $3 + 12;
    $6 = HEAP32[HEAP32[$3 >> 2] >> 2];
    $7 = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
    $8 = $1 + $5 | 0;
    $2 = __stack_pointer - 16 | 0;
    __stack_pointer = $2;
    if (!(HEAP8[78236] & 1)) {
     $9 = _emval_create_invoker(2, 37924, 1) | 0;
     HEAP8[78236] = 1;
     HEAP32[19558] = $9;
    }
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$8 >> 3];
    HEAP32[$2 + 4 >> 2] = 0;
    +_emval_invoke(HEAP32[19558], $6 | 0, $7 | 0, $2 + 4 | 0, $2 + 8 | 0);
    HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
    emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($2);
    __stack_pointer = $2 + 16 | 0;
    __stack_pointer = $3 + 16 | 0;
    $1 = $1 + 8 | 0;
    continue;
   };
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function decompressZFT($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = HEAP8[$0 + 11 | 0] < 0 ? HEAP32[$0 >> 2] : $0;
  $10 = HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$1 >> 2] : $1;
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  $8 = emscripten_builtin_malloc(4194304);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  block2 : {
   block1 : {
    block : {
     if ($3) {
      $1 = emscripten_builtin_malloc((strlen($3) + strlen(25754) | 0) + 2 | 0);
      if (!$1) {
       break block
      }
      HEAP32[$0 + 4 >> 2] = 25754;
      HEAP32[$0 >> 2] = $3;
      siprintf($1, 26845, $0);
      $2 = fopen($1, 30959);
      emscripten_builtin_free($1);
     }
     __stack_pointer = $0 + 16 | 0;
     $0 = $2;
     break block1;
    }
    arLog(0, 3, 34573, 0);
    break block2;
   }
   block113 : {
    block3 : {
     if ($0) {
      fseek($0, 0, 2);
      $1 = ftell($0);
      fseek($0, 0, 0);
      $7 = emscripten_builtin_malloc($1);
      if (!$7) {
       break block3
      }
      fread($7, 1, $1, $0);
      fclose($0);
      $2 = nameConcat($3, 25754);
      $0 = __syscall_unlinkat(-100, $2 | 0, 0) | 0;
      if (($0 | 0) == -31) {
       $0 = __syscall_rmdir($2 | 0) | 0
      }
      __syscall_ret($0);
      emscripten_builtin_free($2);
      HEAP32[$6 + 48 >> 2] = 0;
      HEAP32[$6 + 40 >> 2] = 0;
      HEAP32[$6 + 44 >> 2] = 0;
      HEAP32[$6 + 12 >> 2] = $1;
      HEAP32[$6 + 24 >> 2] = 4194304;
      HEAP32[$6 + 8 >> 2] = $7;
      HEAP32[$6 + 20 >> 2] = $8;
      $4 = __stack_pointer - 16 | 0;
      __stack_pointer = $4;
      $9 = $6 + 8 | 0;
      HEAP32[$4 + 12 >> 2] = $9;
      HEAP32[$4 + 8 >> 2] = 33184;
      HEAP32[$4 + 4 >> 2] = 56;
      $1 = HEAP32[$4 + 8 >> 2];
      $2 = HEAP32[$4 + 4 >> 2];
      $0 = __stack_pointer - 32 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$0 + 20 >> 2] = 15;
      HEAP32[$0 + 16 >> 2] = $1;
      HEAP32[$0 + 12 >> 2] = $2;
      block6 : {
       if (!(!(!HEAP32[$0 + 16 >> 2] | HEAPU8[HEAP32[$0 + 16 >> 2]] != HEAPU8[33184]) & HEAP32[$0 + 12 >> 2] == 56)) {
        HEAP32[$0 + 28 >> 2] = -6;
        break block6;
       }
       if (!HEAP32[$0 + 24 >> 2]) {
        HEAP32[$0 + 28 >> 2] = -2;
        break block6;
       }
       HEAP32[HEAP32[$0 + 24 >> 2] + 24 >> 2] = 0;
       if (!HEAP32[HEAP32[$0 + 24 >> 2] + 32 >> 2]) {
        HEAP32[HEAP32[$0 + 24 >> 2] + 32 >> 2] = 132;
        HEAP32[HEAP32[$0 + 24 >> 2] + 40 >> 2] = 0;
       }
       if (!HEAP32[HEAP32[$0 + 24 >> 2] + 36 >> 2]) {
        HEAP32[HEAP32[$0 + 24 >> 2] + 36 >> 2] = 133
       }
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 32 >> 2]](HEAP32[HEAP32[$0 + 24 >> 2] + 40 >> 2], 1, 7120) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
       if (!HEAP32[$0 + 4 >> 2]) {
        HEAP32[$0 + 28 >> 2] = -4;
        break block6;
       }
       HEAP32[HEAP32[$0 + 24 >> 2] + 28 >> 2] = HEAP32[$0 + 4 >> 2];
       HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[HEAP32[$0 + 4 >> 2] + 56 >> 2] = 0;
       HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2] = 16180;
       $2 = HEAP32[$0 + 20 >> 2];
       $1 = __stack_pointer - 32 | 0;
       __stack_pointer = $1;
       HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[$1 + 20 >> 2] = $2;
       block7 : {
        if (inflateStateCheck(HEAP32[$1 + 24 >> 2])) {
         HEAP32[$1 + 28 >> 2] = -2;
         break block7;
        }
        HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 24 >> 2] + 28 >> 2];
        block8 : {
         if (HEAP32[$1 + 20 >> 2] < 0) {
          HEAP32[$1 + 16 >> 2] = 0;
          HEAP32[$1 + 20 >> 2] = 0 - HEAP32[$1 + 20 >> 2];
          break block8;
         }
         HEAP32[$1 + 16 >> 2] = (HEAP32[$1 + 20 >> 2] >> 4) + 5;
         if (HEAP32[$1 + 20 >> 2] < 48) {
          HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] & 15
         }
        }
        if (!(!HEAP32[$1 + 20 >> 2] | HEAP32[$1 + 20 >> 2] <= 15 & HEAP32[$1 + 20 >> 2] >= 8)) {
         HEAP32[$1 + 28 >> 2] = -2;
         break block7;
        }
        $2 = HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2];
        if (!(!$2 | HEAP32[HEAP32[$1 + 12 >> 2] + 40 >> 2] == HEAP32[$1 + 20 >> 2])) {
         FUNCTION_TABLE[HEAP32[HEAP32[$1 + 24 >> 2] + 36 >> 2]](HEAP32[HEAP32[$1 + 24 >> 2] + 40 >> 2], $2);
         HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2] = 0;
        }
        HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 16 >> 2];
        HEAP32[HEAP32[$1 + 12 >> 2] + 40 >> 2] = HEAP32[$1 + 20 >> 2];
        $3 = __stack_pointer - 16 | 0;
        __stack_pointer = $3;
        HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 24 >> 2];
        block11 : {
         if (inflateStateCheck(HEAP32[$3 + 8 >> 2])) {
          HEAP32[$3 + 12 >> 2] = -2;
          break block11;
         }
         HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2];
         HEAP32[HEAP32[$3 + 4 >> 2] + 44 >> 2] = 0;
         HEAP32[HEAP32[$3 + 4 >> 2] + 48 >> 2] = 0;
         HEAP32[HEAP32[$3 + 4 >> 2] + 52 >> 2] = 0;
         $2 = __stack_pointer - 16 | 0;
         __stack_pointer = $2;
         HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
         block12 : {
          if (inflateStateCheck(HEAP32[$2 + 8 >> 2])) {
           HEAP32[$2 + 12 >> 2] = -2;
           break block12;
          }
          HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2];
          HEAP32[HEAP32[$2 + 4 >> 2] + 32 >> 2] = 0;
          HEAP32[HEAP32[$2 + 8 >> 2] + 20 >> 2] = 0;
          HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] = 0;
          HEAP32[HEAP32[$2 + 8 >> 2] + 24 >> 2] = 0;
          $5 = HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2];
          if ($5) {
           HEAP32[HEAP32[$2 + 8 >> 2] + 48 >> 2] = $5 & 1
          }
          HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] = 16180;
          HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = 0;
          HEAP32[HEAP32[$2 + 4 >> 2] + 16 >> 2] = 0;
          HEAP32[HEAP32[$2 + 4 >> 2] + 24 >> 2] = 32768;
          HEAP32[HEAP32[$2 + 4 >> 2] + 36 >> 2] = 0;
          HEAP32[HEAP32[$2 + 4 >> 2] + 60 >> 2] = 0;
          HEAP32[HEAP32[$2 + 4 >> 2] + 64 >> 2] = 0;
          $5 = HEAP32[$2 + 4 >> 2] + 1332 | 0;
          HEAP32[HEAP32[$2 + 4 >> 2] + 112 >> 2] = $5;
          HEAP32[HEAP32[$2 + 4 >> 2] + 84 >> 2] = $5;
          HEAP32[HEAP32[$2 + 4 >> 2] + 80 >> 2] = $5;
          HEAP32[HEAP32[$2 + 4 >> 2] + 7108 >> 2] = 1;
          HEAP32[HEAP32[$2 + 4 >> 2] + 7112 >> 2] = -1;
          HEAP32[$2 + 12 >> 2] = 0;
         }
         __stack_pointer = $2 + 16 | 0;
         HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
        }
        __stack_pointer = $3 + 16 | 0;
        HEAP32[$1 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
       }
       __stack_pointer = $1 + 32 | 0;
       HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 28 >> 2];
       if (HEAP32[$0 + 8 >> 2]) {
        FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 36 >> 2]](HEAP32[HEAP32[$0 + 24 >> 2] + 40 >> 2], HEAP32[$0 + 4 >> 2]);
        HEAP32[HEAP32[$0 + 24 >> 2] + 28 >> 2] = 0;
       }
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 8 >> 2];
      }
      __stack_pointer = $0 + 32 | 0;
      __stack_pointer = $4 + 16 | 0;
      $0 = __stack_pointer - 80 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 72 >> 2] = $9;
      HEAP32[$0 + 68 >> 2] = 0;
      block15 : {
       if (wasm2js_i32$0 = inflateStateCheck(HEAP32[$0 + 72 >> 2]) | !HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2], wasm2js_i32$1 = 1, wasm2js_i32$2 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2] | !HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2], wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
        HEAP32[$0 + 76 >> 2] = -2;
        break block15;
       }
       HEAP32[$0 + 64 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 28 >> 2];
       if (HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] == 16191) {
        HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16192
       }
       HEAP32[$0 + 56 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2];
       HEAP32[$0 + 48 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2];
       HEAP32[$0 + 60 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] >> 2];
       HEAP32[$0 + 52 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2];
       HEAP32[$0 + 44 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 60 >> 2];
       HEAP32[$0 + 40 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 64 >> 2];
       HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 52 >> 2];
       HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 48 >> 2];
       HEAP32[$0 + 8 >> 2] = 0;
       while (1) {
        block48 : {
         block47 : {
          switch (HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] - 16180 | 0) {
          case 0:
           if (!HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2]) {
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16192;
            continue;
           }
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 16) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 2) | HEAP32[$0 + 44 >> 2] != 35615)) {
            if (!HEAP32[HEAP32[$0 + 64 >> 2] + 40 >> 2]) {
             HEAP32[HEAP32[$0 + 64 >> 2] + 40 >> 2] = 15
            }
            $1 = crc32(0, 0, 0);
            HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
            HEAP8[$0 + 4 | 0] = HEAP32[$0 + 44 >> 2];
            HEAP8[$0 + 5 | 0] = HEAP32[$0 + 44 >> 2] >>> 8;
            $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], $0 + 4 | 0, 2);
            HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
            HEAP32[$0 + 44 >> 2] = 0;
            HEAP32[$0 + 40 >> 2] = 0;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16181;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] = 0;
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
           if ($1) {
            HEAP32[$1 + 48 >> 2] = -1
           }
           block50 : {
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 1) {
             if (!((((HEAP32[$0 + 44 >> 2] & 255) << 8) + (HEAP32[$0 + 44 >> 2] >>> 8 | 0) >>> 0) % 31 | 0)) {
              break block50
             }
            }
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 27758;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           if ((HEAP32[$0 + 44 >> 2] & 15) != 8) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 29304;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 4;
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 4;
           HEAP32[$0 + 12 >> 2] = (HEAP32[$0 + 44 >> 2] & 15) + 8;
           if (!HEAP32[HEAP32[$0 + 64 >> 2] + 40 >> 2]) {
            HEAP32[HEAP32[$0 + 64 >> 2] + 40 >> 2] = HEAP32[$0 + 12 >> 2]
           }
           if (!(HEAPU32[$0 + 12 >> 2] <= 15 & HEAPU32[$0 + 12 >> 2] <= HEAPU32[HEAP32[$0 + 64 >> 2] + 40 >> 2])) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 28256;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 24 >> 2] = 1 << HEAP32[$0 + 12 >> 2];
           $1 = adler32(0, 0, 0);
           HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           HEAP32[HEAP32[$0 + 72 >> 2] + 48 >> 2] = $1;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = HEAP32[$0 + 44 >> 2] & 512 ? 16189 : 16191;
           HEAP32[$0 + 44 >> 2] = 0;
           HEAP32[$0 + 40 >> 2] = 0;
           continue;
          case 1:
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 16) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] = HEAP32[$0 + 44 >> 2];
           if ((HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 255) != 8) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 29304;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 57344) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 25962;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
           if ($1) {
            HEAP32[$1 >> 2] = HEAP32[$0 + 44 >> 2] >>> 8 & 1
           }
           if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
            HEAP8[$0 + 4 | 0] = HEAP32[$0 + 44 >> 2];
            HEAP8[$0 + 5 | 0] = HEAP32[$0 + 44 >> 2] >>> 8;
            $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], $0 + 4 | 0, 2);
            HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           }
           HEAP32[$0 + 44 >> 2] = 0;
           HEAP32[$0 + 40 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16182;
          case 2:
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 32) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
           if ($1) {
            HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 44 >> 2]
           }
           if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
            HEAP8[$0 + 4 | 0] = HEAP32[$0 + 44 >> 2];
            HEAP8[$0 + 5 | 0] = HEAP32[$0 + 44 >> 2] >>> 8;
            HEAP8[$0 + 6 | 0] = HEAP32[$0 + 44 >> 2] >>> 16;
            HEAP8[$0 + 7 | 0] = HEAP32[$0 + 44 >> 2] >>> 24;
            $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], $0 + 4 | 0, 4);
            HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           }
           HEAP32[$0 + 44 >> 2] = 0;
           HEAP32[$0 + 40 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16183;
          case 3:
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 16) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
           if ($1) {
            HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 44 >> 2] & 255;
            HEAP32[HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2] + 12 >> 2] = HEAP32[$0 + 44 >> 2] >>> 8;
           }
           if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
            HEAP8[$0 + 4 | 0] = HEAP32[$0 + 44 >> 2];
            HEAP8[$0 + 5 | 0] = HEAP32[$0 + 44 >> 2] >>> 8;
            $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], $0 + 4 | 0, 2);
            HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           }
           HEAP32[$0 + 44 >> 2] = 0;
           HEAP32[$0 + 40 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16184;
          case 4:
           block56 : {
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 1024) {
             while (1) {
              if (HEAPU32[$0 + 40 >> 2] < 16) {
               if (!HEAP32[$0 + 52 >> 2]) {
                break block48
               }
               HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
               $1 = HEAP32[$0 + 60 >> 2];
               HEAP32[$0 + 60 >> 2] = $1 + 1;
               HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
               HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
               continue;
              }
              break;
             };
             HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2] = HEAP32[$0 + 44 >> 2];
             $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
             if ($1) {
              HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 44 >> 2]
             }
             if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
              HEAP8[$0 + 4 | 0] = HEAP32[$0 + 44 >> 2];
              HEAP8[$0 + 5 | 0] = HEAP32[$0 + 44 >> 2] >>> 8;
              $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], $0 + 4 | 0, 2);
              HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
             }
             HEAP32[$0 + 44 >> 2] = 0;
             HEAP32[$0 + 40 >> 2] = 0;
             break block56;
            }
            $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
            if ($1) {
             HEAP32[$1 + 16 >> 2] = 0
            }
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16185;
          case 5:
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 1024) {
            HEAP32[$0 + 28 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
            if (HEAPU32[$0 + 28 >> 2] > HEAPU32[$0 + 52 >> 2]) {
             HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 52 >> 2]
            }
            if (HEAP32[$0 + 28 >> 2]) {
             $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
             if (!(!$1 | !HEAP32[$1 + 16 >> 2])) {
              HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 20 >> 2] - HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
              $2 = HEAP32[HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2] + 16 >> 2] + HEAP32[$0 + 12 >> 2] | 0;
              $3 = HEAP32[$0 + 60 >> 2];
              $1 = HEAP32[HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2] + 24 >> 2];
              block58 : {
               if ($1 >>> 0 < HEAP32[$0 + 12 >> 2] + HEAP32[$0 + 28 >> 2] >>> 0) {
                $1 = $1 - HEAP32[$0 + 12 >> 2] | 0;
                break block58;
               }
               $1 = HEAP32[$0 + 28 >> 2];
              }
              if ($1) {
               wasm2js_memory_copy($2, $3, $1)
              }
             }
             if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
              $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 28 >> 2]);
              HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - HEAP32[$0 + 28 >> 2];
             HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 60 >> 2];
             $1 = HEAP32[$0 + 64 >> 2];
             HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] - HEAP32[$0 + 28 >> 2];
            }
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2]) {
             break block48
            }
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16186;
          case 6:
           block62 : {
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 2048) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 28 >> 2] = 0;
             while (1) {
              $1 = HEAP32[$0 + 60 >> 2];
              $2 = HEAP32[$0 + 28 >> 2];
              HEAP32[$0 + 28 >> 2] = $2 + 1;
              HEAP32[$0 + 12 >> 2] = HEAPU8[$1 + $2 | 0];
              $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
              block60 : {
               if (!$1) {
                break block60
               }
               $2 = HEAP32[$1 + 28 >> 2];
               if (!$2 | HEAPU32[HEAP32[$0 + 64 >> 2] + 68 >> 2] >= HEAPU32[$1 + 32 >> 2]) {
                break block60
               }
               $3 = HEAP32[$0 + 12 >> 2];
               $4 = HEAP32[$0 + 64 >> 2];
               $1 = HEAP32[$4 + 68 >> 2];
               HEAP32[$4 + 68 >> 2] = $1 + 1;
               HEAP8[$1 + $2 | 0] = $3;
              }
              if (HEAP32[$0 + 12 >> 2] ? HEAPU32[$0 + 28 >> 2] < HEAPU32[$0 + 52 >> 2] : 0) {
               continue
              }
              break;
             };
             if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
              $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 28 >> 2]);
              HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - HEAP32[$0 + 28 >> 2];
             HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 60 >> 2];
             if (HEAP32[$0 + 12 >> 2]) {
              break block48
             }
             break block62;
            }
            $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
            if ($1) {
             HEAP32[$1 + 28 >> 2] = 0
            }
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16187;
          case 7:
           block65 : {
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 4096) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 28 >> 2] = 0;
             while (1) {
              $1 = HEAP32[$0 + 60 >> 2];
              $2 = HEAP32[$0 + 28 >> 2];
              HEAP32[$0 + 28 >> 2] = $2 + 1;
              HEAP32[$0 + 12 >> 2] = HEAPU8[$1 + $2 | 0];
              $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
              block63 : {
               if (!$1) {
                break block63
               }
               $2 = HEAP32[$1 + 36 >> 2];
               if (!$2 | HEAPU32[HEAP32[$0 + 64 >> 2] + 68 >> 2] >= HEAPU32[$1 + 40 >> 2]) {
                break block63
               }
               $3 = HEAP32[$0 + 12 >> 2];
               $4 = HEAP32[$0 + 64 >> 2];
               $1 = HEAP32[$4 + 68 >> 2];
               HEAP32[$4 + 68 >> 2] = $1 + 1;
               HEAP8[$1 + $2 | 0] = $3;
              }
              if (HEAP32[$0 + 12 >> 2] ? HEAPU32[$0 + 28 >> 2] < HEAPU32[$0 + 52 >> 2] : 0) {
               continue
              }
              break;
             };
             if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) | !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4))) {
              $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[$0 + 60 >> 2], HEAP32[$0 + 28 >> 2]);
              HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - HEAP32[$0 + 28 >> 2];
             HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 60 >> 2];
             if (HEAP32[$0 + 12 >> 2]) {
              break block48
             }
             break block65;
            }
            $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
            if ($1) {
             HEAP32[$1 + 36 >> 2] = 0
            }
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16188;
          case 8:
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] & 512) {
            while (1) {
             if (HEAPU32[$0 + 40 >> 2] < 16) {
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4) | HEAP32[$0 + 44 >> 2] == (HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] & 65535))) {
             HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 28038;
             HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
             continue;
            }
            HEAP32[$0 + 44 >> 2] = 0;
            HEAP32[$0 + 40 >> 2] = 0;
           }
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2];
           if ($1) {
            HEAP32[$1 + 44 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2] >> 9 & 1;
            HEAP32[HEAP32[HEAP32[$0 + 64 >> 2] + 36 >> 2] + 48 >> 2] = 1;
           }
           $1 = crc32(0, 0, 0);
           HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           HEAP32[HEAP32[$0 + 72 >> 2] + 48 >> 2] = $1;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16191;
           continue;
          case 9:
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 32) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           $1 = (((HEAP32[$0 + 44 >> 2] >>> 8 & 65280) + (HEAP32[$0 + 44 >> 2] >>> 24 | 0) | 0) + ((HEAP32[$0 + 44 >> 2] & 65280) << 8) | 0) + ((HEAP32[$0 + 44 >> 2] & 255) << 24) | 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           HEAP32[HEAP32[$0 + 72 >> 2] + 48 >> 2] = $1;
           HEAP32[$0 + 44 >> 2] = 0;
           HEAP32[$0 + 40 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16190;
          case 10:
           if (!HEAP32[HEAP32[$0 + 64 >> 2] + 16 >> 2]) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2] = HEAP32[$0 + 56 >> 2];
            HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2] = HEAP32[$0 + 48 >> 2];
            HEAP32[HEAP32[$0 + 72 >> 2] >> 2] = HEAP32[$0 + 60 >> 2];
            HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2] = HEAP32[$0 + 52 >> 2];
            HEAP32[HEAP32[$0 + 64 >> 2] + 60 >> 2] = HEAP32[$0 + 44 >> 2];
            HEAP32[HEAP32[$0 + 64 >> 2] + 64 >> 2] = HEAP32[$0 + 40 >> 2];
            HEAP32[$0 + 76 >> 2] = 2;
            break block15;
           }
           $1 = adler32(0, 0, 0);
           HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
           HEAP32[HEAP32[$0 + 72 >> 2] + 48 >> 2] = $1;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16191;
          case 11:
           if (HEAP32[$0 + 68 >> 2] == 5 | HEAP32[$0 + 68 >> 2] == 6) {
            break block48
           }
          case 12:
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 8 >> 2]) {
            HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> (HEAP32[$0 + 40 >> 2] & 7);
            HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - (HEAP32[$0 + 40 >> 2] & 7);
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16206;
            continue;
           }
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 3) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           HEAP32[HEAP32[$0 + 64 >> 2] + 8 >> 2] = HEAP32[$0 + 44 >> 2] & 1;
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 1;
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 1;
           block71 : {
            block70 : {
             switch (HEAP32[$0 + 44 >> 2] & 3) {
             case 0:
              HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16193;
              break block71;
             case 1:
              $1 = __stack_pointer - 16 | 0;
              HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 64 >> 2];
              HEAP32[HEAP32[$1 + 12 >> 2] + 80 >> 2] = 46432;
              HEAP32[HEAP32[$1 + 12 >> 2] + 88 >> 2] = 9;
              HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] = 48480;
              HEAP32[HEAP32[$1 + 12 >> 2] + 92 >> 2] = 5;
              HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16199;
              if (HEAP32[$0 + 68 >> 2] == 6) {
               HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 2;
               HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 2;
               break block48;
              }
              break block71;
             case 2:
              HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16196;
              break block71;
             case 3:
              break block70;
             default:
              break block71;
             };
            }
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 28324;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
           }
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 2;
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 2;
           continue;
          case 13:
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> (HEAP32[$0 + 40 >> 2] & 7);
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - (HEAP32[$0 + 40 >> 2] & 7);
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 32) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           if ((HEAP32[$0 + 44 >> 2] & 65535) != (HEAP32[$0 + 44 >> 2] >>> 16 ^ 65535)) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 26693;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2] = HEAP32[$0 + 44 >> 2] & 65535;
           HEAP32[$0 + 44 >> 2] = 0;
           HEAP32[$0 + 40 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16194;
           if (HEAP32[$0 + 68 >> 2] == 6) {
            break block48
           }
          case 14:
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16195;
          case 15:
           HEAP32[$0 + 28 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
           if (HEAP32[$0 + 28 >> 2]) {
            if (HEAPU32[$0 + 28 >> 2] > HEAPU32[$0 + 52 >> 2]) {
             HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 52 >> 2]
            }
            if (HEAPU32[$0 + 28 >> 2] > HEAPU32[$0 + 48 >> 2]) {
             HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 48 >> 2]
            }
            if (!HEAP32[$0 + 28 >> 2]) {
             break block48
            }
            $1 = HEAP32[$0 + 56 >> 2];
            $2 = HEAP32[$0 + 60 >> 2];
            $3 = HEAP32[$0 + 28 >> 2];
            if ($3) {
             wasm2js_memory_copy($1, $2, $3)
            }
            HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - HEAP32[$0 + 28 >> 2];
            HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 60 >> 2];
            HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] - HEAP32[$0 + 28 >> 2];
            HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 28 >> 2] + HEAP32[$0 + 56 >> 2];
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] - HEAP32[$0 + 28 >> 2];
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16191;
           continue;
          case 16:
           while (1) {
            if (HEAPU32[$0 + 40 >> 2] < 14) {
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           HEAP32[HEAP32[$0 + 64 >> 2] + 100 >> 2] = (HEAP32[$0 + 44 >> 2] & 31) + 257;
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 5;
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 5;
           HEAP32[HEAP32[$0 + 64 >> 2] + 104 >> 2] = (HEAP32[$0 + 44 >> 2] & 31) + 1;
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 5;
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 5;
           HEAP32[HEAP32[$0 + 64 >> 2] + 96 >> 2] = (HEAP32[$0 + 44 >> 2] & 15) + 4;
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 4;
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 4;
           if (!(HEAPU32[HEAP32[$0 + 64 >> 2] + 100 >> 2] <= 286 & HEAPU32[HEAP32[$0 + 64 >> 2] + 104 >> 2] <= 30)) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 26610;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 108 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16197;
          case 17:
           while (1) {
            if (HEAPU32[HEAP32[$0 + 64 >> 2] + 108 >> 2] < HEAPU32[HEAP32[$0 + 64 >> 2] + 96 >> 2]) {
             while (1) {
              if (HEAPU32[$0 + 40 >> 2] < 3) {
               if (!HEAP32[$0 + 52 >> 2]) {
                break block48
               }
               HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
               $1 = HEAP32[$0 + 60 >> 2];
               HEAP32[$0 + 60 >> 2] = $1 + 1;
               HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
               HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
               continue;
              }
              break;
             };
             $2 = HEAP32[$0 + 44 >> 2] & 7;
             $3 = HEAP32[$0 + 64 >> 2];
             $4 = HEAP32[$0 + 64 >> 2];
             $1 = HEAP32[$4 + 108 >> 2];
             HEAP32[$4 + 108 >> 2] = $1 + 1;
             HEAP16[($3 + 116 | 0) + (HEAPU16[($1 << 1) + 46384 >> 1] << 1) >> 1] = $2;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 3;
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 3;
             continue;
            }
            break;
           };
           while (1) {
            if (HEAPU32[HEAP32[$0 + 64 >> 2] + 108 >> 2] < 19) {
             $2 = HEAP32[$0 + 64 >> 2];
             $3 = HEAP32[$0 + 64 >> 2];
             $1 = HEAP32[$3 + 108 >> 2];
             HEAP32[$3 + 108 >> 2] = $1 + 1;
             HEAP16[($2 + 116 | 0) + (HEAPU16[($1 << 1) + 46384 >> 1] << 1) >> 1] = 0;
             continue;
            }
            break;
           };
           HEAP32[HEAP32[$0 + 64 >> 2] + 112 >> 2] = HEAP32[$0 + 64 >> 2] + 1332;
           HEAP32[HEAP32[$0 + 64 >> 2] + 80 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 112 >> 2];
           HEAP32[HEAP32[$0 + 64 >> 2] + 88 >> 2] = 7;
           (wasm2js_i32$0 = $0, wasm2js_i32$1 = inflate_table(0, HEAP32[$0 + 64 >> 2] + 116 | 0, 19, HEAP32[$0 + 64 >> 2] + 112 | 0, HEAP32[$0 + 64 >> 2] + 88 | 0, HEAP32[$0 + 64 >> 2] + 756 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           if (HEAP32[$0 + 8 >> 2]) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 25937;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 108 >> 2] = 0;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16198;
          case 18:
           while (1) {
            block73 : {
             if (HEAPU32[HEAP32[$0 + 64 >> 2] + 108 >> 2] >= HEAP32[HEAP32[$0 + 64 >> 2] + 100 >> 2] + HEAP32[HEAP32[$0 + 64 >> 2] + 104 >> 2] >>> 0) {
              break block73
             }
             while (1) {
              block74 : {
               $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 80 >> 2] + ((HEAP32[$0 + 44 >> 2] & (1 << HEAP32[HEAP32[$0 + 64 >> 2] + 88 >> 2]) - 1) << 2) | 0;
               HEAP32[$0 + 20 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
               if (HEAPU8[$0 + 21 | 0] <= HEAPU32[$0 + 40 >> 2]) {
                break block74
               }
               if (!HEAP32[$0 + 52 >> 2]) {
                break block48
               }
               HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
               $1 = HEAP32[$0 + 60 >> 2];
               HEAP32[$0 + 60 >> 2] = $1 + 1;
               HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
               HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
               continue;
              }
              break;
             };
             block75 : {
              if (HEAPU16[$0 + 22 >> 1] < 16) {
               HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 21 | 0];
               HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 21 | 0];
               $2 = HEAPU16[$0 + 22 >> 1];
               $3 = HEAP32[$0 + 64 >> 2];
               $4 = HEAP32[$0 + 64 >> 2];
               $1 = HEAP32[$4 + 108 >> 2];
               HEAP32[$4 + 108 >> 2] = $1 + 1;
               HEAP16[($3 + 116 | 0) + ($1 << 1) >> 1] = $2;
               break block75;
              }
              block76 : {
               if (HEAPU16[$0 + 22 >> 1] == 16) {
                while (1) {
                 if (HEAPU32[$0 + 40 >> 2] < HEAPU8[$0 + 21 | 0] + 2 >>> 0) {
                  if (!HEAP32[$0 + 52 >> 2]) {
                   break block48
                  }
                  HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
                  $1 = HEAP32[$0 + 60 >> 2];
                  HEAP32[$0 + 60 >> 2] = $1 + 1;
                  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
                  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
                  continue;
                 }
                 break;
                };
                HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 21 | 0];
                HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 21 | 0];
                if (!HEAP32[HEAP32[$0 + 64 >> 2] + 108 >> 2]) {
                 HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 26108;
                 HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
                 break block73;
                }
                HEAP32[$0 + 12 >> 2] = HEAPU16[(HEAP32[$0 + 64 >> 2] + (HEAP32[HEAP32[$0 + 64 >> 2] + 108 >> 2] << 1) | 0) + 114 >> 1];
                HEAP32[$0 + 28 >> 2] = (HEAP32[$0 + 44 >> 2] & 3) + 3;
                HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 2;
                HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 2;
                break block76;
               }
               block77 : {
                if (HEAPU16[$0 + 22 >> 1] == 17) {
                 while (1) {
                  if (HEAPU32[$0 + 40 >> 2] < HEAPU8[$0 + 21 | 0] + 3 >>> 0) {
                   if (!HEAP32[$0 + 52 >> 2]) {
                    break block48
                   }
                   HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
                   $1 = HEAP32[$0 + 60 >> 2];
                   HEAP32[$0 + 60 >> 2] = $1 + 1;
                   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
                   HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
                   continue;
                  }
                  break;
                 };
                 HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 21 | 0];
                 HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 21 | 0];
                 HEAP32[$0 + 12 >> 2] = 0;
                 HEAP32[$0 + 28 >> 2] = (HEAP32[$0 + 44 >> 2] & 7) + 3;
                 HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 3;
                 HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 3;
                 break block77;
                }
                while (1) {
                 if (HEAPU32[$0 + 40 >> 2] < HEAPU8[$0 + 21 | 0] + 7 >>> 0) {
                  if (!HEAP32[$0 + 52 >> 2]) {
                   break block48
                  }
                  HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
                  $1 = HEAP32[$0 + 60 >> 2];
                  HEAP32[$0 + 60 >> 2] = $1 + 1;
                  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
                  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
                  continue;
                 }
                 break;
                };
                HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 21 | 0];
                HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 21 | 0];
                HEAP32[$0 + 12 >> 2] = 0;
                HEAP32[$0 + 28 >> 2] = (HEAP32[$0 + 44 >> 2] & 127) + 11;
                HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> 7;
                HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - 7;
               }
              }
              if (HEAP32[HEAP32[$0 + 64 >> 2] + 108 >> 2] + HEAP32[$0 + 28 >> 2] >>> 0 > HEAP32[HEAP32[$0 + 64 >> 2] + 100 >> 2] + HEAP32[HEAP32[$0 + 64 >> 2] + 104 >> 2] >>> 0) {
               HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 26108;
               HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
               break block73;
              }
              while (1) {
               $1 = HEAP32[$0 + 28 >> 2];
               HEAP32[$0 + 28 >> 2] = $1 - 1;
               if ($1) {
                $2 = HEAP32[$0 + 12 >> 2];
                $3 = HEAP32[$0 + 64 >> 2];
                $4 = HEAP32[$0 + 64 >> 2];
                $1 = HEAP32[$4 + 108 >> 2];
                HEAP32[$4 + 108 >> 2] = $1 + 1;
                HEAP16[($3 + 116 | 0) + ($1 << 1) >> 1] = $2;
                continue;
               }
               break;
              };
             }
             continue;
            }
            break;
           };
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] == 16209) {
            continue
           }
           if (!HEAPU16[HEAP32[$0 + 64 >> 2] + 628 >> 1]) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 27721;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 112 >> 2] = HEAP32[$0 + 64 >> 2] + 1332;
           HEAP32[HEAP32[$0 + 64 >> 2] + 80 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 112 >> 2];
           HEAP32[HEAP32[$0 + 64 >> 2] + 88 >> 2] = 9;
           (wasm2js_i32$0 = $0, wasm2js_i32$1 = inflate_table(1, HEAP32[$0 + 64 >> 2] + 116 | 0, HEAP32[HEAP32[$0 + 64 >> 2] + 100 >> 2], HEAP32[$0 + 64 >> 2] + 112 | 0, HEAP32[$0 + 64 >> 2] + 88 | 0, HEAP32[$0 + 64 >> 2] + 756 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           if (HEAP32[$0 + 8 >> 2]) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 25909;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 84 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 112 >> 2];
           HEAP32[HEAP32[$0 + 64 >> 2] + 92 >> 2] = 6;
           (wasm2js_i32$0 = $0, wasm2js_i32$1 = inflate_table(2, (HEAP32[$0 + 64 >> 2] + 116 | 0) + (HEAP32[HEAP32[$0 + 64 >> 2] + 100 >> 2] << 1) | 0, HEAP32[HEAP32[$0 + 64 >> 2] + 104 >> 2], HEAP32[$0 + 64 >> 2] + 112 | 0, HEAP32[$0 + 64 >> 2] + 92 | 0, HEAP32[$0 + 64 >> 2] + 756 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           if (HEAP32[$0 + 8 >> 2]) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 25987;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16199;
           if (HEAP32[$0 + 68 >> 2] == 6) {
            break block48
           }
          case 19:
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16200;
          case 20:
           if (!(HEAPU32[$0 + 52 >> 2] < 6 | HEAPU32[$0 + 48 >> 2] < 258)) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2] = HEAP32[$0 + 56 >> 2];
            HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2] = HEAP32[$0 + 48 >> 2];
            HEAP32[HEAP32[$0 + 72 >> 2] >> 2] = HEAP32[$0 + 60 >> 2];
            HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2] = HEAP32[$0 + 52 >> 2];
            HEAP32[HEAP32[$0 + 64 >> 2] + 60 >> 2] = HEAP32[$0 + 44 >> 2];
            HEAP32[HEAP32[$0 + 64 >> 2] + 64 >> 2] = HEAP32[$0 + 40 >> 2];
            $2 = HEAP32[$0 + 32 >> 2];
            $1 = __stack_pointer - 96 | 0;
            HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 72 >> 2];
            HEAP32[$1 + 88 >> 2] = $2;
            HEAP32[$1 + 84 >> 2] = HEAP32[HEAP32[$1 + 92 >> 2] + 28 >> 2];
            HEAP32[$1 + 80 >> 2] = HEAP32[HEAP32[$1 + 92 >> 2] >> 2];
            HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 80 >> 2] + (HEAP32[HEAP32[$1 + 92 >> 2] + 4 >> 2] - 5 | 0);
            HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$1 + 92 >> 2] + 12 >> 2];
            HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 72 >> 2] - (HEAP32[$1 + 88 >> 2] - HEAP32[HEAP32[$1 + 92 >> 2] + 16 >> 2] | 0);
            HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 72 >> 2] + (HEAP32[HEAP32[$1 + 92 >> 2] + 16 >> 2] - 257 | 0);
            HEAP32[$1 + 60 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 44 >> 2];
            HEAP32[$1 + 56 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 48 >> 2];
            HEAP32[$1 + 52 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 52 >> 2];
            HEAP32[$1 + 48 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 56 >> 2];
            HEAP32[$1 + 44 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 60 >> 2];
            HEAP32[$1 + 40 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 64 >> 2];
            HEAP32[$1 + 36 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 80 >> 2];
            HEAP32[$1 + 32 >> 2] = HEAP32[HEAP32[$1 + 84 >> 2] + 84 >> 2];
            HEAP32[$1 + 28 >> 2] = (1 << HEAP32[HEAP32[$1 + 84 >> 2] + 88 >> 2]) - 1;
            HEAP32[$1 + 24 >> 2] = (1 << HEAP32[HEAP32[$1 + 84 >> 2] + 92 >> 2]) - 1;
            while (1) {
             if (HEAPU32[$1 + 40 >> 2] < 15) {
              $2 = HEAP32[$1 + 80 >> 2];
              HEAP32[$1 + 80 >> 2] = $2 + 1;
              HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
              HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
              $2 = HEAP32[$1 + 80 >> 2];
              HEAP32[$1 + 80 >> 2] = $2 + 1;
              HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
              HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
             }
             $2 = HEAP32[$1 + 36 >> 2] + ((HEAP32[$1 + 44 >> 2] & HEAP32[$1 + 28 >> 2]) << 2) | 0;
             HEAP32[$1 + 20 >> 2] = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
             block80 : {
              block79 : {
               while (1) {
                HEAP32[$1 + 16 >> 2] = HEAPU8[$1 + 21 | 0];
                HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] >>> HEAP32[$1 + 16 >> 2];
                HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 16 >> 2];
                HEAP32[$1 + 16 >> 2] = HEAPU8[$1 + 20 | 0];
                if (!HEAP32[$1 + 16 >> 2]) {
                 $2 = HEAPU16[$1 + 22 >> 1];
                 $3 = HEAP32[$1 + 72 >> 2];
                 HEAP32[$1 + 72 >> 2] = $3 + 1;
                 HEAP8[$3 | 0] = $2;
                 break block79;
                }
                if (HEAP32[$1 + 16 >> 2] & 16) {
                 HEAP32[$1 + 12 >> 2] = HEAPU16[$1 + 22 >> 1];
                 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] & 15;
                 if (HEAP32[$1 + 16 >> 2]) {
                  if (HEAPU32[$1 + 40 >> 2] < HEAPU32[$1 + 16 >> 2]) {
                   $2 = HEAP32[$1 + 80 >> 2];
                   HEAP32[$1 + 80 >> 2] = $2 + 1;
                   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
                   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
                  }
                  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + (HEAP32[$1 + 44 >> 2] & (1 << HEAP32[$1 + 16 >> 2]) - 1);
                  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] >>> HEAP32[$1 + 16 >> 2];
                  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 16 >> 2];
                 }
                 if (HEAPU32[$1 + 40 >> 2] < 15) {
                  $2 = HEAP32[$1 + 80 >> 2];
                  HEAP32[$1 + 80 >> 2] = $2 + 1;
                  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
                  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
                  $2 = HEAP32[$1 + 80 >> 2];
                  HEAP32[$1 + 80 >> 2] = $2 + 1;
                  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
                  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
                 }
                 $2 = HEAP32[$1 + 32 >> 2] + ((HEAP32[$1 + 44 >> 2] & HEAP32[$1 + 24 >> 2]) << 2) | 0;
                 HEAP32[$1 + 20 >> 2] = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
                 block84 : {
                  while (1) {
                   HEAP32[$1 + 16 >> 2] = HEAPU8[$1 + 21 | 0];
                   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] >>> HEAP32[$1 + 16 >> 2];
                   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 16 >> 2];
                   HEAP32[$1 + 16 >> 2] = HEAPU8[$1 + 20 | 0];
                   if (HEAP32[$1 + 16 >> 2] & 16) {
                    HEAP32[$1 + 8 >> 2] = HEAPU16[$1 + 22 >> 1];
                    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] & 15;
                    if (HEAPU32[$1 + 40 >> 2] < HEAPU32[$1 + 16 >> 2]) {
                     $2 = HEAP32[$1 + 80 >> 2];
                     HEAP32[$1 + 80 >> 2] = $2 + 1;
                     HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
                     HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
                     if (HEAPU32[$1 + 40 >> 2] < HEAPU32[$1 + 16 >> 2]) {
                      $2 = HEAP32[$1 + 80 >> 2];
                      HEAP32[$1 + 80 >> 2] = $2 + 1;
                      HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + (HEAPU8[$2 | 0] << HEAP32[$1 + 40 >> 2]);
                      HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 8;
                     }
                    }
                    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + (HEAP32[$1 + 44 >> 2] & (1 << HEAP32[$1 + 16 >> 2]) - 1);
                    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] >>> HEAP32[$1 + 16 >> 2];
                    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 16 >> 2];
                    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 72 >> 2] - HEAP32[$1 + 68 >> 2];
                    block83 : {
                     if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
                      HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[$1 + 16 >> 2];
                      if (HEAP32[HEAP32[$1 + 84 >> 2] + 7108 >> 2] ? HEAPU32[$1 + 16 >> 2] > HEAPU32[$1 + 56 >> 2] : 0) {
                       HEAP32[HEAP32[$1 + 92 >> 2] + 24 >> 2] = 27835;
                       HEAP32[HEAP32[$1 + 84 >> 2] + 4 >> 2] = 16209;
                       break block80;
                      }
                      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 48 >> 2];
                      block81 : {
                       if (!HEAP32[$1 + 52 >> 2]) {
                        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + (HEAP32[$1 + 60 >> 2] - HEAP32[$1 + 16 >> 2] | 0);
                        if (HEAPU32[$1 + 16 >> 2] < HEAPU32[$1 + 12 >> 2]) {
                         HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 16 >> 2];
                         while (1) {
                          $2 = HEAP32[$1 + 4 >> 2];
                          HEAP32[$1 + 4 >> 2] = $2 + 1;
                          $2 = HEAPU8[$2 | 0];
                          $3 = HEAP32[$1 + 72 >> 2];
                          HEAP32[$1 + 72 >> 2] = $3 + 1;
                          HEAP8[$3 | 0] = $2;
                          $2 = HEAP32[$1 + 16 >> 2] - 1 | 0;
                          HEAP32[$1 + 16 >> 2] = $2;
                          if ($2) {
                           continue
                          }
                          break;
                         };
                         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 72 >> 2] - HEAP32[$1 + 8 >> 2];
                        }
                        break block81;
                       }
                       block82 : {
                        if (HEAPU32[$1 + 52 >> 2] < HEAPU32[$1 + 16 >> 2]) {
                         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + ((HEAP32[$1 + 60 >> 2] + HEAP32[$1 + 52 >> 2] | 0) - HEAP32[$1 + 16 >> 2] | 0);
                         HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] - HEAP32[$1 + 52 >> 2];
                         if (HEAPU32[$1 + 16 >> 2] < HEAPU32[$1 + 12 >> 2]) {
                          HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 16 >> 2];
                          while (1) {
                           $2 = HEAP32[$1 + 4 >> 2];
                           HEAP32[$1 + 4 >> 2] = $2 + 1;
                           $2 = HEAPU8[$2 | 0];
                           $3 = HEAP32[$1 + 72 >> 2];
                           HEAP32[$1 + 72 >> 2] = $3 + 1;
                           HEAP8[$3 | 0] = $2;
                           $2 = HEAP32[$1 + 16 >> 2] - 1 | 0;
                           HEAP32[$1 + 16 >> 2] = $2;
                           if ($2) {
                            continue
                           }
                           break;
                          };
                          HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 48 >> 2];
                          if (HEAPU32[$1 + 52 >> 2] < HEAPU32[$1 + 12 >> 2]) {
                           HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 52 >> 2];
                           HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 16 >> 2];
                           while (1) {
                            $2 = HEAP32[$1 + 4 >> 2];
                            HEAP32[$1 + 4 >> 2] = $2 + 1;
                            $2 = HEAPU8[$2 | 0];
                            $3 = HEAP32[$1 + 72 >> 2];
                            HEAP32[$1 + 72 >> 2] = $3 + 1;
                            HEAP8[$3 | 0] = $2;
                            $2 = HEAP32[$1 + 16 >> 2] - 1 | 0;
                            HEAP32[$1 + 16 >> 2] = $2;
                            if ($2) {
                             continue
                            }
                            break;
                           };
                           HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 72 >> 2] - HEAP32[$1 + 8 >> 2];
                          }
                         }
                         break block82;
                        }
                        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + (HEAP32[$1 + 52 >> 2] - HEAP32[$1 + 16 >> 2] | 0);
                        if (HEAPU32[$1 + 16 >> 2] < HEAPU32[$1 + 12 >> 2]) {
                         HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 16 >> 2];
                         while (1) {
                          $2 = HEAP32[$1 + 4 >> 2];
                          HEAP32[$1 + 4 >> 2] = $2 + 1;
                          $2 = HEAPU8[$2 | 0];
                          $3 = HEAP32[$1 + 72 >> 2];
                          HEAP32[$1 + 72 >> 2] = $3 + 1;
                          HEAP8[$3 | 0] = $2;
                          $2 = HEAP32[$1 + 16 >> 2] - 1 | 0;
                          HEAP32[$1 + 16 >> 2] = $2;
                          if ($2) {
                           continue
                          }
                          break;
                         };
                         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 72 >> 2] - HEAP32[$1 + 8 >> 2];
                        }
                       }
                      }
                      while (1) {
                       if (HEAPU32[$1 + 12 >> 2] > 2) {
                        $2 = HEAP32[$1 + 4 >> 2];
                        HEAP32[$1 + 4 >> 2] = $2 + 1;
                        $2 = HEAPU8[$2 | 0];
                        $3 = HEAP32[$1 + 72 >> 2];
                        HEAP32[$1 + 72 >> 2] = $3 + 1;
                        HEAP8[$3 | 0] = $2;
                        $2 = HEAP32[$1 + 4 >> 2];
                        HEAP32[$1 + 4 >> 2] = $2 + 1;
                        $2 = HEAPU8[$2 | 0];
                        $3 = HEAP32[$1 + 72 >> 2];
                        HEAP32[$1 + 72 >> 2] = $3 + 1;
                        HEAP8[$3 | 0] = $2;
                        $2 = HEAP32[$1 + 4 >> 2];
                        HEAP32[$1 + 4 >> 2] = $2 + 1;
                        $2 = HEAPU8[$2 | 0];
                        $3 = HEAP32[$1 + 72 >> 2];
                        HEAP32[$1 + 72 >> 2] = $3 + 1;
                        HEAP8[$3 | 0] = $2;
                        HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - 3;
                        continue;
                       }
                       break;
                      };
                      break block83;
                     }
                     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 72 >> 2] - HEAP32[$1 + 8 >> 2];
                     while (1) {
                      $2 = HEAP32[$1 + 4 >> 2];
                      HEAP32[$1 + 4 >> 2] = $2 + 1;
                      $2 = HEAPU8[$2 | 0];
                      $3 = HEAP32[$1 + 72 >> 2];
                      HEAP32[$1 + 72 >> 2] = $3 + 1;
                      HEAP8[$3 | 0] = $2;
                      $2 = HEAP32[$1 + 4 >> 2];
                      HEAP32[$1 + 4 >> 2] = $2 + 1;
                      $2 = HEAPU8[$2 | 0];
                      $3 = HEAP32[$1 + 72 >> 2];
                      HEAP32[$1 + 72 >> 2] = $3 + 1;
                      HEAP8[$3 | 0] = $2;
                      $2 = HEAP32[$1 + 4 >> 2];
                      HEAP32[$1 + 4 >> 2] = $2 + 1;
                      $2 = HEAPU8[$2 | 0];
                      $3 = HEAP32[$1 + 72 >> 2];
                      HEAP32[$1 + 72 >> 2] = $3 + 1;
                      HEAP8[$3 | 0] = $2;
                      HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - 3;
                      if (HEAPU32[$1 + 12 >> 2] > 2) {
                       continue
                      }
                      break;
                     };
                    }
                    if (HEAP32[$1 + 12 >> 2]) {
                     $2 = HEAP32[$1 + 4 >> 2];
                     HEAP32[$1 + 4 >> 2] = $2 + 1;
                     $2 = HEAPU8[$2 | 0];
                     $3 = HEAP32[$1 + 72 >> 2];
                     HEAP32[$1 + 72 >> 2] = $3 + 1;
                     HEAP8[$3 | 0] = $2;
                     if (HEAPU32[$1 + 12 >> 2] > 1) {
                      $2 = HEAP32[$1 + 4 >> 2];
                      HEAP32[$1 + 4 >> 2] = $2 + 1;
                      $2 = HEAPU8[$2 | 0];
                      $3 = HEAP32[$1 + 72 >> 2];
                      HEAP32[$1 + 72 >> 2] = $3 + 1;
                      HEAP8[$3 | 0] = $2;
                     }
                    }
                    break block84;
                   }
                   if (!(HEAP32[$1 + 16 >> 2] & 64)) {
                    $2 = HEAP32[$1 + 32 >> 2] + (HEAPU16[$1 + 22 >> 1] + (HEAP32[$1 + 44 >> 2] & (1 << HEAP32[$1 + 16 >> 2]) - 1) << 2) | 0;
                    HEAP32[$1 + 20 >> 2] = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
                    continue;
                   }
                   break;
                  };
                  HEAP32[HEAP32[$1 + 92 >> 2] + 24 >> 2] = 29104;
                  HEAP32[HEAP32[$1 + 84 >> 2] + 4 >> 2] = 16209;
                  break block80;
                 }
                 break block79;
                }
                if (!(HEAP32[$1 + 16 >> 2] & 64)) {
                 $2 = HEAP32[$1 + 36 >> 2] + (HEAPU16[$1 + 22 >> 1] + (HEAP32[$1 + 44 >> 2] & (1 << HEAP32[$1 + 16 >> 2]) - 1) << 2) | 0;
                 HEAP32[$1 + 20 >> 2] = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
                 continue;
                }
                break;
               };
               if (HEAP32[$1 + 16 >> 2] & 32) {
                HEAP32[HEAP32[$1 + 84 >> 2] + 4 >> 2] = 16191;
                break block80;
               }
               HEAP32[HEAP32[$1 + 92 >> 2] + 24 >> 2] = 29076;
               HEAP32[HEAP32[$1 + 84 >> 2] + 4 >> 2] = 16209;
               break block80;
              }
              if (HEAPU32[$1 + 72 >> 2] < HEAPU32[$1 + 64 >> 2] & HEAPU32[$1 + 80 >> 2] < HEAPU32[$1 + 76 >> 2]) {
               continue
              }
             }
             break;
            };
            HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 40 >> 2] >>> 3;
            HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] - HEAP32[$1 + 12 >> 2];
            HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] - (HEAP32[$1 + 12 >> 2] << 3);
            HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] & (1 << HEAP32[$1 + 40 >> 2]) - 1;
            HEAP32[HEAP32[$1 + 92 >> 2] >> 2] = HEAP32[$1 + 80 >> 2];
            HEAP32[HEAP32[$1 + 92 >> 2] + 12 >> 2] = HEAP32[$1 + 72 >> 2];
            $5 = HEAP32[$1 + 92 >> 2];
            if (HEAPU32[$1 + 80 >> 2] < HEAPU32[$1 + 76 >> 2]) {
             $2 = (HEAP32[$1 + 76 >> 2] - HEAP32[$1 + 80 >> 2] | 0) + 5 | 0
            } else {
             $2 = 5 - (HEAP32[$1 + 80 >> 2] - HEAP32[$1 + 76 >> 2] | 0) | 0
            }
            HEAP32[$5 + 4 >> 2] = $2;
            $5 = HEAP32[$1 + 92 >> 2];
            if (HEAPU32[$1 + 72 >> 2] < HEAPU32[$1 + 64 >> 2]) {
             $2 = (HEAP32[$1 + 64 >> 2] - HEAP32[$1 + 72 >> 2] | 0) + 257 | 0
            } else {
             $2 = 257 - (HEAP32[$1 + 72 >> 2] - HEAP32[$1 + 64 >> 2] | 0) | 0
            }
            HEAP32[$5 + 16 >> 2] = $2;
            HEAP32[HEAP32[$1 + 84 >> 2] + 60 >> 2] = HEAP32[$1 + 44 >> 2];
            HEAP32[HEAP32[$1 + 84 >> 2] + 64 >> 2] = HEAP32[$1 + 40 >> 2];
            HEAP32[$0 + 56 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2];
            HEAP32[$0 + 48 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2];
            HEAP32[$0 + 60 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] >> 2];
            HEAP32[$0 + 52 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2];
            HEAP32[$0 + 44 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 60 >> 2];
            HEAP32[$0 + 40 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 64 >> 2];
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] == 16191) {
             HEAP32[HEAP32[$0 + 64 >> 2] + 7112 >> 2] = -1
            }
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 7112 >> 2] = 0;
           while (1) {
            block87 : {
             $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 80 >> 2] + ((HEAP32[$0 + 44 >> 2] & (1 << HEAP32[HEAP32[$0 + 64 >> 2] + 88 >> 2]) - 1) << 2) | 0;
             HEAP32[$0 + 20 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
             if (HEAPU8[$0 + 21 | 0] <= HEAPU32[$0 + 40 >> 2]) {
              break block87
             }
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           if (!(!HEAPU8[$0 + 20 | 0] | HEAPU8[$0 + 20 | 0] & 240)) {
            HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
            while (1) {
             block89 : {
              $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 80 >> 2] + (HEAPU16[$0 + 18 >> 1] + ((HEAP32[$0 + 44 >> 2] & (1 << HEAPU8[$0 + 17 | 0] + HEAPU8[$0 + 16 | 0]) - 1) >>> HEAPU8[$0 + 17 | 0] | 0) << 2) | 0;
              HEAP32[$0 + 20 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
              if (HEAPU32[$0 + 40 >> 2] >= HEAPU8[$0 + 17 | 0] + HEAPU8[$0 + 21 | 0] >>> 0) {
               break block89
              }
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 17 | 0];
            HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 17 | 0];
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 7112 >> 2] = HEAP32[$1 + 7112 >> 2] + HEAPU8[$0 + 17 | 0];
           }
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 21 | 0];
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 21 | 0];
           $1 = HEAP32[$0 + 64 >> 2];
           HEAP32[$1 + 7112 >> 2] = HEAP32[$1 + 7112 >> 2] + HEAPU8[$0 + 21 | 0];
           HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2] = HEAPU16[$0 + 22 >> 1];
           if (!HEAPU8[$0 + 20 | 0]) {
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16205;
            continue;
           }
           if (HEAPU8[$0 + 20 | 0] & 32) {
            HEAP32[HEAP32[$0 + 64 >> 2] + 7112 >> 2] = -1;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16191;
            continue;
           }
           if (HEAPU8[$0 + 20 | 0] & 64) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 29076;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2] = HEAPU8[$0 + 20 | 0] & 15;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16201;
          case 21:
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2]) {
            while (1) {
             if (HEAPU32[$0 + 40 >> 2] < HEAPU32[HEAP32[$0 + 64 >> 2] + 76 >> 2]) {
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + (HEAP32[$0 + 44 >> 2] & (1 << HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2]) - 1);
            HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2];
            HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2];
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 7112 >> 2] = HEAP32[$1 + 7112 >> 2] + HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2];
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 7116 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16202;
          case 22:
           while (1) {
            block90 : {
             $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 84 >> 2] + ((HEAP32[$0 + 44 >> 2] & (1 << HEAP32[HEAP32[$0 + 64 >> 2] + 92 >> 2]) - 1) << 2) | 0;
             HEAP32[$0 + 20 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
             if (HEAPU8[$0 + 21 | 0] <= HEAPU32[$0 + 40 >> 2]) {
              break block90
             }
             if (!HEAP32[$0 + 52 >> 2]) {
              break block48
             }
             HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
             $1 = HEAP32[$0 + 60 >> 2];
             HEAP32[$0 + 60 >> 2] = $1 + 1;
             HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
             HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
             continue;
            }
            break;
           };
           if (!(HEAPU8[$0 + 20 | 0] & 240)) {
            HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
            while (1) {
             block91 : {
              $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 84 >> 2] + (HEAPU16[$0 + 18 >> 1] + ((HEAP32[$0 + 44 >> 2] & (1 << HEAPU8[$0 + 17 | 0] + HEAPU8[$0 + 16 | 0]) - 1) >>> HEAPU8[$0 + 17 | 0] | 0) << 2) | 0;
              HEAP32[$0 + 20 >> 2] = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
              if (HEAPU32[$0 + 40 >> 2] >= HEAPU8[$0 + 17 | 0] + HEAPU8[$0 + 21 | 0] >>> 0) {
               break block91
              }
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 17 | 0];
            HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 17 | 0];
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 7112 >> 2] = HEAP32[$1 + 7112 >> 2] + HEAPU8[$0 + 17 | 0];
           }
           HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAPU8[$0 + 21 | 0];
           HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAPU8[$0 + 21 | 0];
           $1 = HEAP32[$0 + 64 >> 2];
           HEAP32[$1 + 7112 >> 2] = HEAP32[$1 + 7112 >> 2] + HEAPU8[$0 + 21 | 0];
           if (HEAPU8[$0 + 20 | 0] & 64) {
            HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 29104;
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
            continue;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 72 >> 2] = HEAPU16[$0 + 22 >> 1];
           HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2] = HEAPU8[$0 + 20 | 0] & 15;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16203;
          case 23:
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2]) {
            while (1) {
             if (HEAPU32[$0 + 40 >> 2] < HEAPU32[HEAP32[$0 + 64 >> 2] + 76 >> 2]) {
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] + (HEAP32[$0 + 44 >> 2] & (1 << HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2]) - 1);
            HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] >>> HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2];
            HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] - HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2];
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 7112 >> 2] = HEAP32[$1 + 7112 >> 2] + HEAP32[HEAP32[$0 + 64 >> 2] + 76 >> 2];
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16204;
          case 24:
           if (!HEAP32[$0 + 48 >> 2]) {
            break block48
           }
           HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 32 >> 2] - HEAP32[$0 + 48 >> 2];
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 72 >> 2];
           block93 : {
            if ($1 >>> 0 > HEAPU32[$0 + 28 >> 2]) {
             HEAP32[$0 + 28 >> 2] = $1 - HEAP32[$0 + 28 >> 2];
             if (HEAP32[HEAP32[$0 + 64 >> 2] + 7108 >> 2] ? HEAPU32[$0 + 28 >> 2] > HEAPU32[HEAP32[$0 + 64 >> 2] + 48 >> 2] : 0) {
              HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 27835;
              HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
              continue;
             }
             $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 52 >> 2];
             block92 : {
              if ($1 >>> 0 < HEAPU32[$0 + 28 >> 2]) {
               HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] - $1;
               HEAP32[$0 + 24 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 56 >> 2] + (HEAP32[HEAP32[$0 + 64 >> 2] + 44 >> 2] - HEAP32[$0 + 28 >> 2] | 0);
               break block92;
              }
              HEAP32[$0 + 24 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 56 >> 2] + (HEAP32[HEAP32[$0 + 64 >> 2] + 52 >> 2] - HEAP32[$0 + 28 >> 2] | 0);
             }
             $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
             if ($1 >>> 0 < HEAPU32[$0 + 28 >> 2]) {
              HEAP32[$0 + 28 >> 2] = $1
             }
             break block93;
            }
            HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 56 >> 2] - HEAP32[HEAP32[$0 + 64 >> 2] + 72 >> 2];
            HEAP32[$0 + 28 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
           }
           if (HEAPU32[$0 + 28 >> 2] > HEAPU32[$0 + 48 >> 2]) {
            HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 48 >> 2]
           }
           HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] - HEAP32[$0 + 28 >> 2];
           $1 = HEAP32[$0 + 64 >> 2];
           HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] - HEAP32[$0 + 28 >> 2];
           while (1) {
            $1 = HEAP32[$0 + 24 >> 2];
            HEAP32[$0 + 24 >> 2] = $1 + 1;
            $1 = HEAPU8[$1 | 0];
            $2 = HEAP32[$0 + 56 >> 2];
            HEAP32[$0 + 56 >> 2] = $2 + 1;
            HEAP8[$2 | 0] = $1;
            $1 = HEAP32[$0 + 28 >> 2] - 1 | 0;
            HEAP32[$0 + 28 >> 2] = $1;
            if ($1) {
             continue
            }
            break;
           };
           if (!HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2]) {
            HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16200
           }
           continue;
          case 25:
           if (!HEAP32[$0 + 48 >> 2]) {
            break block48
           }
           $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 68 >> 2];
           $2 = HEAP32[$0 + 56 >> 2];
           HEAP32[$0 + 56 >> 2] = $2 + 1;
           HEAP8[$2 | 0] = $1;
           HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] - 1;
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16200;
           continue;
          case 26:
           if (HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2]) {
            while (1) {
             if (HEAPU32[$0 + 40 >> 2] < 32) {
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] - HEAP32[$0 + 48 >> 2];
            $1 = HEAP32[$0 + 72 >> 2];
            HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + HEAP32[$0 + 32 >> 2];
            $1 = HEAP32[$0 + 64 >> 2];
            HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + HEAP32[$0 + 32 >> 2];
            if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4) | !HEAP32[$0 + 32 >> 2])) {
             block95 : {
              if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2]) {
               $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[$0 + 56 >> 2] - HEAP32[$0 + 32 >> 2] | 0, HEAP32[$0 + 32 >> 2]);
               break block95;
              }
              $1 = adler32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[$0 + 56 >> 2] - HEAP32[$0 + 32 >> 2] | 0, HEAP32[$0 + 32 >> 2]);
             }
             HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
             HEAP32[HEAP32[$0 + 72 >> 2] + 48 >> 2] = $1;
            }
            HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 48 >> 2];
            $2 = !(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4);
            if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2]) {
             $1 = HEAP32[$0 + 44 >> 2]
            } else {
             $1 = (((HEAP32[$0 + 44 >> 2] >>> 8 & 65280) + (HEAP32[$0 + 44 >> 2] >>> 24 | 0) | 0) + ((HEAP32[$0 + 44 >> 2] & 65280) << 8) | 0) + ((HEAP32[$0 + 44 >> 2] & 255) << 24) | 0
            }
            if (!($2 | ($1 | 0) == HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2])) {
             HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 27804;
             HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
             continue;
            }
            HEAP32[$0 + 44 >> 2] = 0;
            HEAP32[$0 + 40 >> 2] = 0;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16207;
          case 27:
           if (!(!HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] | !HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2])) {
            while (1) {
             if (HEAPU32[$0 + 40 >> 2] < 32) {
              if (!HEAP32[$0 + 52 >> 2]) {
               break block48
              }
              HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] - 1;
              $1 = HEAP32[$0 + 60 >> 2];
              HEAP32[$0 + 60 >> 2] = $1 + 1;
              HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[$1 | 0] << HEAP32[$0 + 40 >> 2]);
              HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 8;
              continue;
             }
             break;
            };
            if (HEAP32[$0 + 44 >> 2] != HEAP32[HEAP32[$0 + 64 >> 2] + 32 >> 2]) {
             HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] = 27781;
             HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16209;
             continue;
            }
            HEAP32[$0 + 44 >> 2] = 0;
            HEAP32[$0 + 40 >> 2] = 0;
           }
           HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16208;
          case 28:
           HEAP32[$0 + 8 >> 2] = 1;
           break block48;
          case 29:
           HEAP32[$0 + 8 >> 2] = -3;
           break block48;
          case 30:
           HEAP32[$0 + 76 >> 2] = -4;
           break block15;
          default:
           break block47;
          };
         }
         HEAP32[$0 + 76 >> 2] = -2;
         break block15;
        }
        break;
       };
       HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2] = HEAP32[$0 + 56 >> 2];
       HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2] = HEAP32[$0 + 48 >> 2];
       HEAP32[HEAP32[$0 + 72 >> 2] >> 2] = HEAP32[$0 + 60 >> 2];
       HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2] = HEAP32[$0 + 52 >> 2];
       HEAP32[HEAP32[$0 + 64 >> 2] + 60 >> 2] = HEAP32[$0 + 44 >> 2];
       HEAP32[HEAP32[$0 + 64 >> 2] + 64 >> 2] = HEAP32[$0 + 40 >> 2];
       block100 : {
        block99 : {
         if (HEAP32[HEAP32[$0 + 64 >> 2] + 44 >> 2]) {
          break block99
         }
         if (HEAP32[$0 + 32 >> 2] == HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2]) {
          break block100
         }
         $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2];
         if ($1 >>> 0 >= 16209) {
          break block100
         }
         if ($1 >>> 0 < 16206) {
          break block99
         }
         if (HEAP32[$0 + 68 >> 2] == 4) {
          break block100
         }
        }
        $2 = HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2];
        $3 = HEAP32[$0 + 32 >> 2] - HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2] | 0;
        $1 = __stack_pointer - 32 | 0;
        __stack_pointer = $1;
        HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 72 >> 2];
        HEAP32[$1 + 20 >> 2] = $2;
        HEAP32[$1 + 16 >> 2] = $3;
        HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 24 >> 2] + 28 >> 2];
        block101 : {
         if (!HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2]) {
          $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 24 >> 2] + 32 >> 2]](HEAP32[HEAP32[$1 + 24 >> 2] + 40 >> 2], 1 << HEAP32[HEAP32[$1 + 12 >> 2] + 40 >> 2], 1) | 0;
          HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2] = $2;
          if (!HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2]) {
           HEAP32[$1 + 28 >> 2] = 1;
           break block101;
          }
         }
         if (!HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2]) {
          HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2] = 1 << HEAP32[HEAP32[$1 + 12 >> 2] + 40 >> 2];
          HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] = 0;
          HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2] = 0;
         }
         $2 = HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2];
         block102 : {
          if ($2 >>> 0 <= HEAPU32[$1 + 16 >> 2]) {
           $3 = HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2];
           $4 = HEAP32[$1 + 20 >> 2];
           if ($2) {
            wasm2js_memory_copy($3, $4 - $2 | 0, $2)
           }
           HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] = 0;
           HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2];
           break block102;
          }
          HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2];
          if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
           HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 16 >> 2]
          }
          $2 = HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] | 0;
          $3 = HEAP32[$1 + 20 >> 2];
          $4 = HEAP32[$1 + 16 >> 2];
          $5 = HEAP32[$1 + 8 >> 2];
          if ($5) {
           wasm2js_memory_copy($2, $3 - $4 | 0, $5)
          }
          HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] - HEAP32[$1 + 8 >> 2];
          block103 : {
           if (HEAP32[$1 + 16 >> 2]) {
            $2 = HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2];
            $3 = HEAP32[$1 + 20 >> 2];
            $4 = HEAP32[$1 + 16 >> 2];
            $5 = HEAP32[$1 + 16 >> 2];
            if ($5) {
             wasm2js_memory_copy($2, $3 - $4 | 0, $5)
            }
            HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] = HEAP32[$1 + 16 >> 2];
            HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2];
            break block103;
           }
           $2 = HEAP32[$1 + 12 >> 2];
           HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + HEAP32[$1 + 8 >> 2];
           if (HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] == HEAP32[HEAP32[$1 + 12 >> 2] + 44 >> 2]) {
            HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] = 0
           }
           if (HEAPU32[HEAP32[$1 + 12 >> 2] + 48 >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 44 >> 2]) {
            $2 = HEAP32[$1 + 12 >> 2];
            HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + HEAP32[$1 + 8 >> 2];
           }
          }
         }
         HEAP32[$1 + 28 >> 2] = 0;
        }
        __stack_pointer = $1 + 32 | 0;
        if (HEAP32[$1 + 28 >> 2]) {
         HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2] = 16210;
         HEAP32[$0 + 76 >> 2] = -4;
         break block15;
        }
       }
       HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] - HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2];
       HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] - HEAP32[HEAP32[$0 + 72 >> 2] + 16 >> 2];
       $1 = HEAP32[$0 + 72 >> 2];
       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP32[$0 + 36 >> 2];
       $1 = HEAP32[$0 + 72 >> 2];
       HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + HEAP32[$0 + 32 >> 2];
       $1 = HEAP32[$0 + 64 >> 2];
       HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + HEAP32[$0 + 32 >> 2];
       if (!(!(HEAP32[HEAP32[$0 + 64 >> 2] + 12 >> 2] & 4) | !HEAP32[$0 + 32 >> 2])) {
        block105 : {
         if (HEAP32[HEAP32[$0 + 64 >> 2] + 20 >> 2]) {
          $1 = crc32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2] - HEAP32[$0 + 32 >> 2] | 0, HEAP32[$0 + 32 >> 2]);
          break block105;
         }
         $1 = adler32(HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2], HEAP32[HEAP32[$0 + 72 >> 2] + 12 >> 2] - HEAP32[$0 + 32 >> 2] | 0, HEAP32[$0 + 32 >> 2]);
        }
        HEAP32[HEAP32[$0 + 64 >> 2] + 28 >> 2] = $1;
        HEAP32[HEAP32[$0 + 72 >> 2] + 48 >> 2] = $1;
       }
       $1 = HEAP32[HEAP32[$0 + 64 >> 2] + 4 >> 2];
       HEAP32[HEAP32[$0 + 72 >> 2] + 44 >> 2] = ((HEAP32[HEAP32[$0 + 64 >> 2] + 64 >> 2] + (HEAP32[HEAP32[$0 + 64 >> 2] + 8 >> 2] ? 64 : 0) | 0) + (($1 | 0) == 16191 ? 128 : 0) | 0) + (($1 | 0) == 16194 | ($1 | 0) == 16199 ? 256 : 0);
       if (!(HEAP32[$0 + 8 >> 2] | !!(HEAP32[$0 + 36 >> 2] | HEAP32[$0 + 32 >> 2]) & HEAP32[$0 + 68 >> 2] != 4)) {
        HEAP32[$0 + 8 >> 2] = -5
       }
       HEAP32[$0 + 76 >> 2] = HEAP32[$0 + 8 >> 2];
      }
      __stack_pointer = $0 + 80 | 0;
      $0 = __stack_pointer - 16 | 0;
      __stack_pointer = $0;
      HEAP32[$0 + 8 >> 2] = $9;
      block108 : {
       if (inflateStateCheck(HEAP32[$0 + 8 >> 2])) {
        HEAP32[$0 + 12 >> 2] = -2;
        break block108;
       }
       HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2];
       $1 = HEAP32[HEAP32[$0 + 4 >> 2] + 56 >> 2];
       if ($1) {
        FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 36 >> 2]](HEAP32[HEAP32[$0 + 8 >> 2] + 40 >> 2], $1)
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 36 >> 2]](HEAP32[HEAP32[$0 + 8 >> 2] + 40 >> 2], HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2]);
       HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2] = 0;
       HEAP32[$0 + 12 >> 2] = 0;
      }
      __stack_pointer = $0 + 16 | 0;
      emscripten_builtin_free($7);
      $1 = __stack_pointer - 16 | 0;
      __stack_pointer = $1;
      block112 : {
       block111 : {
        block110 : {
         block109 : {
          $0 = strstr($8, 34029);
          if ($0) {
           $2 = strstr($8, 34040);
           if (!$2) {
            break block109
           }
           $4 = strstr($8, 24355);
           if (!$4) {
            break block110
           }
           $3 = $0 - $8 | 0;
           $0 = $3 - 9 | 0;
           if (($3 | 0) <= 9) {
            break block111
           }
           $7 = strncpy(emscripten_builtin_malloc($0), $8 + 9 | 0, $0);
           $5 = $0;
           $0 = nameConcat($10, 25855);
           $9 = fopen($0, 24899);
           fwrite($7, $5, 1, $9);
           fclose($9);
           emscripten_builtin_free($0);
           emscripten_builtin_free($7);
           $3 = $3 + 10 | 0;
           $0 = ($2 - $8 | 0) - $3 | 0;
           $3 = strncpy(emscripten_builtin_malloc($0), $3 + $8 | 0, $0);
           $5 = $0;
           $0 = nameConcat($10, 25903);
           $7 = fopen($0, 24899);
           fwrite($3, $5, 1, $7);
           fclose($7);
           emscripten_builtin_free($0);
           emscripten_builtin_free($3);
           $0 = ($4 - $2 | 0) - 11 | 0;
           $2 = strncpy(emscripten_builtin_malloc($0), $2 + 11 | 0, $0);
           $5 = $0;
           $0 = nameConcat($10, 33168);
           $3 = fopen($0, 24899);
           fwrite($2, $5, 1, $3);
           fclose($3);
           emscripten_builtin_free($0);
           emscripten_builtin_free($2);
           __stack_pointer = $1 + 16 | 0;
           break block112;
          }
          arLog(0, 3, 34359, 0);
          break block2;
         }
         arLog(0, 3, 34399, 0);
         break block2;
        }
        arLog(0, 3, 34440, 0);
        break block2;
       }
       HEAP32[$1 >> 2] = $0;
       arLog(0, 3, 34215, $1);
       break block2;
      }
      emscripten_builtin_free($8);
      __stack_pointer = $6 - -64 | 0;
      break block113;
     }
     arLog(0, 3, 34190, 0);
     break block2;
    }
    HEAP32[$6 >> 2] = $1;
    arLog(0, 3, 34152, $6);
    break block2;
   }
   return 1;
  }
  exit(1);
  wasm2js_trap();
 }
 
 function addNFTMarkers($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $13 = __stack_pointer - 48 | 0;
  __stack_pointer = $13;
  HEAP32[$13 + 44 >> 2] = $1;
  block75 : {
   block5 : {
    block11 : {
     block : {
      if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $13 + 44 | 0)) {
       HEAP32[$0 + 8 >> 2] = 0;
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       break block;
      }
      $24 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($13 + 44 | 0);
      $14 = HEAP32[$24 + 224 >> 2];
      HEAP32[$13 + 40 >> 2] = 0;
      $1 = HEAP32[$2 + 4 >> 2];
      $3 = HEAP32[$2 >> 2];
      if (($1 - $3 | 0) / 12 >>> 0 < 20) {
       HEAP32[$13 + 36 >> 2] = 0;
       HEAP32[$13 + 28 >> 2] = 0;
       HEAP32[$13 + 32 >> 2] = 0;
       $35 = $24 + 388 | 0;
       $36 = $24 + 372 | 0;
       $37 = $24 + 272 | 0;
       while (1) {
        HEAP32[$13 + 24 >> 2] = $5;
        block88 : {
         block89 : {
          if (($1 - $3 | 0) / 12 >>> 0 > $5 >>> 0) {
           $4 = $13 + 12 | 0;
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4, 27960);
           webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($1, (HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) / 12 | 0);
           std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
           $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4, 33733);
           $1 = HEAP32[$2 >> 2] + Math_imul(HEAP32[$13 + 24 >> 2], 12) | 0;
           webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($3, HEAP8[$1 + 11 | 0] < 0 ? HEAP32[$1 >> 2] : $1);
           std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
           $7 = HEAP32[$13 + 24 >> 2];
           $1 = HEAP32[$2 >> 2] + Math_imul($7, 12) | 0;
           $3 = HEAP8[$1 + 11 | 0];
           $5 = HEAP32[$1 >> 2];
           int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29($13 + 28 | 0, $13 + 24 | 0);
           $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4, 33158);
           $22 = ($3 | 0) < 0 ? $5 : $1;
           webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($6, $22);
           std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
           $6 = 0;
           $5 = __stack_pointer - 16 | 0;
           __stack_pointer = $5;
           HEAP8[$5 + 14 | 0] = HEAPU8[17752];
           HEAP16[$5 + 12 >> 1] = HEAPU8[17750] | HEAPU8[17751] << 8;
           block9 : {
            block8 : {
             block1 : {
              if (!($13 + 8 | 0 ? $22 : 0)) {
               arLog(0, 3, 10975, 0);
               break block1;
              }
              $1 = $5 + 12 | 0;
              $3 = __stack_pointer - 16 | 0;
              __stack_pointer = $3;
              block2 : {
               if (!$22) {
                $1 = 0;
                break block2;
               }
               $11 = emscripten_builtin_malloc((strlen($22) + strlen(33169) | 0) + 2 | 0);
               if (!$11) {
                break block5
               }
               HEAP32[$3 + 4 >> 2] = 33169;
               HEAP32[$3 >> 2] = $22;
               siprintf($11, 1851, $3);
               $1 = fopen($11, $1);
               emscripten_builtin_free($11);
              }
              __stack_pointer = $3 + 16 | 0;
              if (!$1) {
               HEAP32[$5 >> 2] = $22;
               HEAP32[$5 + 8 >> 2] = 33169;
               HEAP32[$5 + 4 >> 2] = 9089;
               arLog(0, 3, 11451, $5);
               break block1;
              }
              $3 = emscripten_builtin_calloc(16);
              if (!$3) {
               break block11
              }
              block7 : {
               if ((fread($3 + 4 | 0, 4, 1, $1) | 0) != 1) {
                break block7
               }
               $8 = HEAP32[$3 + 4 >> 2];
               if (($8 | 0) <= 0) {
                break block7
               }
               $11 = emscripten_builtin_malloc(Math_imul($8, 132));
               HEAP32[$3 >> 2] = $11;
               if (!$11) {
                break block11
               }
               while (1) {
                if (($6 | 0) < ($8 | 0)) {
                 $12 = Math_imul($6, 132);
                 if ((fread($12 + $11 | 0, 8, 1, $1) | 0) != 1) {
                  break block7
                 }
                 $11 = HEAP32[$3 >> 2];
                 $12 = $12 + $11 | 0;
                 if ((fread($12 + 8 | 0, 8, 1, $1) | 0) != 1) {
                  break block7
                 }
                 if ((fread($12 + 16 | 0, 108, 1, $1) | 0) != 1) {
                  break block7
                 }
                 if ((fread($12 + 124 | 0, 4, 1, $1) | 0) != 1) {
                  break block7
                 }
                 $6 = $6 + 1 | 0;
                 if ((fread($12 + 128 | 0, 4, 1, $1) | 0) == 1) {
                  continue
                 }
                 break block7;
                }
                break;
               };
               if ((fread($3 + 12 | 0, 4, 1, $1) | 0) != 1) {
                break block7
               }
               $6 = 0;
               $12 = HEAP32[$3 + 12 >> 2];
               if (($12 | 0) <= 0) {
                HEAP32[$3 + 8 >> 2] = 0;
                break block7;
               }
               $8 = emscripten_builtin_malloc(Math_imul($12, 12));
               HEAP32[$3 + 8 >> 2] = $8;
               if (!$8) {
                break block11
               }
               while (1) {
                if (($6 | 0) >= ($12 | 0)) {
                 break block8
                }
                $11 = $8 + Math_imul($6, 12) | 0;
                if ((fread($11 + 8 | 0, 4, 1, $1) | 0) != 1) {
                 break block7
                }
                if ((fread($11 + 4 | 0, 4, 1, $1) | 0) != 1) {
                 break block7
                }
                $10 = $11;
                $11 = HEAP32[$11 + 4 >> 2];
                $9 = emscripten_builtin_malloc(Math_imul($11, 12));
                HEAP32[$10 >> 2] = $9;
                if (!$9) {
                 break block11
                }
                $6 = $6 + 1 | 0;
                if ((fread($9, 12, $11, $1) | 0) == ($11 | 0)) {
                 continue
                }
                break;
               };
              }
              arLog(0, 3, 11782, 0);
              emscripten_builtin_free(HEAP32[$3 + 8 >> 2]);
              emscripten_builtin_free(HEAP32[$3 >> 2]);
              emscripten_builtin_free($3);
              fclose($1);
             }
             $1 = -1;
             break block9;
            }
            HEAP32[$13 + 8 >> 2] = $3;
            fclose($1);
            $1 = 0;
           }
           __stack_pointer = $5 + 16 | 0;
           block12 : {
            if (($1 | 0) < 0) {
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($4, 33121);
             webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($1, $22);
             break block12;
            }
            $5 = $13 + 12 | 0;
            $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($5, 33547);
            webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($1, $7);
            std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
            $3 = 0;
            $1 = HEAP32[$13 + 8 >> 2];
            block13 : {
             if ($1) {
              $6 = HEAP32[$1 + 4 >> 2];
              $6 = ($6 | 0) > 0 ? $6 : 0;
              while (1) if (($3 | 0) == ($6 | 0)) {
               $12 = 0;
               $3 = HEAP32[$1 + 12 >> 2];
               $6 = ($3 | 0) > 0 ? $3 : 0;
               $3 = 0;
               while (1) {
                if (($3 | 0) == ($6 | 0)) {
                 break block13
                }
                $4 = HEAP32[$1 + 8 >> 2] + Math_imul($3, 12) | 0;
                $11 = HEAP32[$4 + 8 >> 2];
                if (!(($11 | 0) != -1 & ($11 | 0) < 0)) {
                 HEAP32[$4 + 8 >> 2] = $7
                }
                $3 = $3 + 1 | 0;
                continue;
               };
              } else {
               $4 = HEAP32[$1 >> 2] + Math_imul($3, 132) | 0;
               $11 = HEAP32[$4 + 124 >> 2];
               if (!(($11 | 0) != -1 & ($11 | 0) < 0)) {
                HEAP32[$4 + 124 >> 2] = $7
               }
               $3 = $3 + 1 | 0;
               continue;
              };
             }
             arLog(0, 3, 12166, 0);
             $12 = -1;
            }
            if (($12 | 0) < 0) {
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($5, 26037);
             webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
             break block12;
            }
            $1 = 0;
            block14 : {
             $4 = $13 + 8 | 0;
             if (!($4 ? $13 + 40 | 0 : 0)) {
              arLog(0, 3, 6987, 0);
              $1 = -1;
              break block14;
             }
             block15 : {
              $3 = HEAP32[$13 + 40 >> 2];
              if (!$3) {
               $3 = emscripten_builtin_malloc(16);
               HEAP32[$13 + 40 >> 2] = $3;
               if (!$3) {
                break block15
               }
               HEAP32[$3 + 8 >> 2] = 0;
               HEAP32[$3 + 12 >> 2] = 0;
               HEAP32[$3 >> 2] = 0;
               HEAP32[$3 + 4 >> 2] = 0;
              }
              block16 : {
               $11 = HEAP32[$4 >> 2];
               if (!$11) {
                break block16
               }
               $7 = HEAP32[$11 + 4 >> 2];
               $5 = HEAP32[$3 + 4 >> 2];
               $12 = $7 + $5 | 0;
               $6 = emscripten_builtin_malloc(Math_imul($12, 132));
               if ($6) {
                $8 = ($5 | 0) > 0 ? $5 : 0;
                while (1) if (($1 | 0) == ($8 | 0)) {
                 $1 = 0;
                 $7 = ($7 | 0) > 0 ? $7 : 0;
                 $5 = $6 + Math_imul($5, 132) | 0;
                 while (1) {
                  if (($1 | 0) != ($7 | 0)) {
                   $8 = Math_imul($1, 132);
                   wasm2js_memory_copy($8 + $5 | 0, $8 + HEAP32[$11 >> 2] | 0, 132);
                   $1 = $1 + 1 | 0;
                   continue;
                  }
                  break;
                 };
                 emscripten_builtin_free(HEAP32[$3 >> 2]);
                 HEAP32[HEAP32[$13 + 40 >> 2] >> 2] = $6;
                 $8 = HEAP32[$13 + 40 >> 2];
                 HEAP32[$8 + 4 >> 2] = $12;
                 $6 = 0;
                 $7 = HEAP32[$8 + 12 >> 2];
                 $12 = ($7 | 0) > 0 ? $7 : 0;
                 $5 = HEAP32[$4 >> 2];
                 $9 = HEAP32[$5 + 12 >> 2];
                 $11 = ($9 | 0) > 0 ? $9 : 0;
                 $3 = 0;
                 while (1) {
                  $1 = 0;
                  if (($3 | 0) != ($11 | 0)) {
                   block17 : {
                    while (1) {
                     if (($1 | 0) == ($12 | 0)) {
                      break block17
                     }
                     $10 = Math_imul($1, 12);
                     $1 = $1 + 1 | 0;
                     if (HEAP32[(HEAP32[$5 + 8 >> 2] + Math_imul($3, 12) | 0) + 8 >> 2] != HEAP32[($10 + HEAP32[$8 + 8 >> 2] | 0) + 8 >> 2]) {
                      continue
                     }
                     break;
                    };
                    $6 = $6 + 1 | 0;
                   }
                   $3 = $3 + 1 | 0;
                   continue;
                  }
                  break;
                 };
                 $20 = ($7 + $9 | 0) - $6 | 0;
                 $9 = emscripten_builtin_malloc(Math_imul($20, 12));
                 if ($9) {
                  $8 = 0;
                  label14 : while (1) {
                   if (($8 | 0) == ($12 | 0)) {
                    $3 = 0;
                    $6 = 0;
                    block22 : {
                     block18 : {
                      while (1) {
                       block19 : {
                        $1 = 0;
                        if (($3 | 0) == ($11 | 0)) {
                         $5 = HEAP32[$13 + 40 >> 2];
                         if (!HEAP32[$5 + 8 >> 2]) {
                          break block18
                         }
                         while (1) {
                          $3 = HEAP32[$5 + 8 >> 2];
                          if (HEAP32[$5 + 12 >> 2] <= ($1 | 0)) {
                           break block19
                          }
                          emscripten_builtin_free(HEAP32[$3 + Math_imul($1, 12) >> 2]);
                          $1 = $1 + 1 | 0;
                          $5 = HEAP32[$13 + 40 >> 2];
                          continue;
                         };
                        }
                        block21 : {
                         block20 : {
                          while (1) {
                           if (($1 | 0) == ($12 | 0)) {
                            break block20
                           }
                           $8 = Math_imul($1, 12);
                           $1 = $1 + 1 | 0;
                           if (HEAP32[(HEAP32[$5 + 8 >> 2] + Math_imul($3, 12) | 0) + 8 >> 2] != HEAP32[($8 + HEAP32[HEAP32[$13 + 40 >> 2] + 8 >> 2] | 0) + 8 >> 2]) {
                            continue
                           }
                           break;
                          };
                          $6 = $6 + 1 | 0;
                          break block21;
                         }
                         $10 = $9 + Math_imul(($3 + $7 | 0) - $6 | 0, 12) | 0;
                         $18 = Math_imul($3, 12);
                         $1 = $18 + HEAP32[$5 + 8 >> 2] | 0;
                         HEAP32[$10 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
                         $8 = HEAP32[$1 + 4 >> 2];
                         $15 = emscripten_builtin_malloc(Math_imul($8, 12));
                         HEAP32[$10 >> 2] = $15;
                         if (!$15) {
                          break block22
                         }
                         $1 = 0;
                         $19 = ($8 | 0) > 0 ? $8 : 0;
                         while (1) {
                          if (($1 | 0) != ($19 | 0)) {
                           $16 = Math_imul($1, 12);
                           $17 = $16 + $15 | 0;
                           $16 = $16 + HEAP32[$18 + HEAP32[$5 + 8 >> 2] >> 2] | 0;
                           HEAP32[$17 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
                           $23 = HEAP32[$16 + 4 >> 2];
                           HEAP32[$17 >> 2] = HEAP32[$16 >> 2];
                           HEAP32[$17 + 4 >> 2] = $23;
                           $1 = $1 + 1 | 0;
                           continue;
                          }
                          break;
                         };
                         HEAP32[$10 + 4 >> 2] = $8;
                        }
                        $3 = $3 + 1 | 0;
                        continue;
                       }
                       break;
                      };
                      emscripten_builtin_free($3);
                      $5 = HEAP32[$13 + 40 >> 2];
                     }
                     HEAP32[$5 + 8 >> 2] = $9;
                     HEAP32[HEAP32[$13 + 40 >> 2] + 12 >> 2] = $20;
                     kpmDeleteRefDataSet($4);
                     break block16;
                    }
                    break block15;
                   }
                   $10 = Math_imul($8, 12);
                   $16 = $10 + $9 | 0;
                   $3 = $10 + HEAP32[HEAP32[$13 + 40 >> 2] + 8 >> 2] | 0;
                   $17 = HEAP32[$3 + 8 >> 2];
                   HEAP32[$16 + 8 >> 2] = $17;
                   $1 = 0;
                   $15 = HEAP32[$3 + 4 >> 2];
                   $6 = $15;
                   while (1) {
                    if (($1 | 0) != ($11 | 0)) {
                     $3 = HEAP32[$5 + 8 >> 2] + Math_imul($1, 12) | 0;
                     if (($17 | 0) == HEAP32[$3 + 8 >> 2]) {
                      $6 = HEAP32[$3 + 4 >> 2] + $6 | 0
                     }
                     $1 = $1 + 1 | 0;
                     continue;
                    }
                    break;
                   };
                   $17 = emscripten_builtin_malloc(Math_imul($6, 12));
                   HEAP32[$16 >> 2] = $17;
                   if ($17) {
                    $1 = 0;
                    $19 = ($15 | 0) > 0 ? $15 : 0;
                    while (1) if (($1 | 0) == ($19 | 0)) {
                     $1 = 0;
                     while (1) {
                      block23 : {
                       if (($1 | 0) == ($11 | 0)) {
                        break block23
                       }
                       $3 = HEAP32[$5 + 8 >> 2];
                       $18 = Math_imul($1, 12);
                       if (HEAP32[($3 + $18 | 0) + 8 >> 2] == HEAP32[($10 + HEAP32[HEAP32[$13 + 40 >> 2] + 8 >> 2] | 0) + 8 >> 2]) {
                        $10 = $17 + Math_imul($15, 12) | 0;
                        $1 = 0;
                        while (1) {
                         $15 = $3 + $18 | 0;
                         if (HEAP32[$15 + 4 >> 2] <= ($1 | 0)) {
                          break block23
                         }
                         $5 = Math_imul($1, 12);
                         $3 = $5 + $10 | 0;
                         $5 = $5 + HEAP32[$15 >> 2] | 0;
                         HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
                         $15 = HEAP32[$5 + 4 >> 2];
                         HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
                         HEAP32[$3 + 4 >> 2] = $15;
                         $1 = $1 + 1 | 0;
                         $5 = HEAP32[$4 >> 2];
                         $3 = HEAP32[$5 + 8 >> 2];
                         continue;
                        };
                       } else {
                        $1 = $1 + 1 | 0;
                        continue;
                       }
                      }
                      break;
                     };
                     HEAP32[$16 + 4 >> 2] = $6;
                     $8 = $8 + 1 | 0;
                     continue label14;
                    } else {
                     $18 = Math_imul($1, 12);
                     $3 = $18 + $17 | 0;
                     $18 = $18 + HEAP32[$10 + HEAP32[HEAP32[$13 + 40 >> 2] + 8 >> 2] >> 2] | 0;
                     HEAP32[$3 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
                     $23 = HEAP32[$18 + 4 >> 2];
                     HEAP32[$3 >> 2] = HEAP32[$18 >> 2];
                     HEAP32[$3 + 4 >> 2] = $23;
                     $1 = $1 + 1 | 0;
                     continue;
                    };
                   }
                   break;
                  };
                  break block15;
                 }
                 break block15;
                } else {
                 $9 = Math_imul($1, 132);
                 wasm2js_memory_copy($9 + $6 | 0, $9 + HEAP32[$3 >> 2] | 0, 132);
                 $1 = $1 + 1 | 0;
                 continue;
                };
               }
               break block15;
              }
              $1 = 0;
              break block14;
             }
             break block11;
            }
            if (($1 | 0) < 0) {
             $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($13 + 12 | 0, 26072);
             webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
             break block12;
            }
            $32 = $13 + 12 | 0;
            $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($32, 33375);
            webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
            std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
            $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($32, 25893);
            webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($1, $22);
            std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
            $3 = 0;
            $16 = 0;
            $11 = 0;
            $9 = __stack_pointer - 976 | 0;
            __stack_pointer = $9;
            block87 : {
             block86 : {
              block78 : {
               block26 : {
                block25 : {
                 block24 : {
                  if (HEAPU8[25904]) {
                   if (strcmp(25904, 1024)) {
                    break block24
                   }
                  }
                  (wasm2js_i32$0 = strncpy($9 + 720 | 0, $22, 255), wasm2js_i32$1 = 0), HEAP8[wasm2js_i32$0 + 255 | 0] = wasm2js_i32$1;
                  $28 = 1;
                  break block25;
                 }
                 HEAP32[$9 + 176 >> 2] = $22;
                 HEAP32[$9 + 180 >> 2] = 25904;
                 $1 = $9 + 192 | 0;
                 siprintf($1, 1851, $9 + 176 | 0);
                 $16 = fopen($1, 2925);
                 if (!$16) {
                  HEAP32[$9 + 160 >> 2] = $22;
                  arLog(0, 3, 3712, $9 + 160 | 0);
                  (wasm2js_i32$0 = $9, wasm2js_i32$1 = __strerror_l(HEAP32[19563])), HEAP32[wasm2js_i32$0 + 148 >> 2] = wasm2js_i32$1;
                  HEAP32[$9 + 144 >> 2] = 5451;
                  arLog(0, 3, 4332, $9 + 144 | 0);
                  break block26;
                 }
                 $28 = 0;
                }
                block67 : {
                 block28 : {
                  $11 = emscripten_builtin_malloc(1140);
                  if ($11) {
                   $27 = 1;
                   block27 : {
                    if ($28) {
                     break block27
                    }
                    $1 = $9 + 192 | 0;
                    if (!get_buff($1, $16)) {
                     break block28
                    }
                    HEAP32[$9 + 128 >> 2] = $9 + 716;
                    if ((sscanf($1, 6506, $9 + 128 | 0) | 0) != 1) {
                     break block28
                    }
                    $27 = HEAP32[$9 + 716 >> 2];
                    if (($27 | 0) > 0) {
                     break block27
                    }
                    break block28;
                   }
                   HEAP32[$11 + 152 >> 2] = 0;
                   HEAP32[$11 + 4 >> 2] = $27;
                   $18 = emscripten_builtin_malloc(Math_imul($27, 112));
                   HEAP32[$11 >> 2] = $18;
                   if ($18) {
                    block29 : {
                     while (1) {
                      HEAP32[$9 + 716 >> 2] = $3;
                      if (($3 | 0) >= ($27 | 0)) {
                       break block29
                      }
                      HEAP32[$9 + 112 >> 2] = $3 + 1;
                      arLog(0, 1, 7660, $9 + 112 | 0);
                      if (!$28) {
                       $1 = $9 + 192 | 0;
                       if (!get_buff($1, $16)) {
                        break block29
                       }
                       $5 = $9 + 720 | 0;
                       HEAP32[$9 + 96 >> 2] = $5;
                       if ((sscanf($1, 7717, $9 + 96 | 0) | 0) != 1) {
                        break block29
                       }
                       $1 = 0;
                       $3 = -1;
                       while (1) {
                        block31 : {
                         $6 = HEAPU8[$1 + $5 | 0];
                         block30 : {
                          if (($6 | 0) != 46) {
                           if ($6) {
                            break block30
                           }
                           if (($3 | 0) != -1) {
                            HEAP8[$3 + $5 | 0] = 0
                           }
                           break block31;
                          }
                          $3 = $1;
                         }
                         $1 = $1 + 1 | 0;
                         continue;
                        }
                        break;
                       };
                      }
                      arLog(0, 1, 8663, 0);
                      $10 = 0;
                      $15 = __stack_pointer - 96 | 0;
                      __stack_pointer = $15;
                      HEAP16[$15 + 88 >> 1] = HEAPU8[17748] | HEAPU8[17749] << 8;
                      HEAP32[$15 + 84 >> 2] = HEAPU8[17744] | HEAPU8[17745] << 8 | (HEAPU8[17746] << 16 | HEAPU8[17747] << 24);
                      block32 : {
                       block60 : {
                        block59 : {
                         block34 : {
                          block57 : {
                           $34 = $9 + 720 | 0;
                           $19 = $34;
                           $1 = emscripten_builtin_malloc(strlen($19) + 6 | 0);
                           if ($1) {
                            HEAP32[$15 + 64 >> 2] = $19;
                            $3 = $15 + 84 | 0;
                            HEAP32[$15 + 68 >> 2] = $3;
                            siprintf($1, 1846, $15 - -64 | 0);
                            $17 = fopen($1, 3018);
                            emscripten_builtin_free($1);
                            if (!$17) {
                             HEAP32[$15 >> 2] = $19;
                             HEAP32[$15 + 4 >> 2] = $3;
                             $1 = 0;
                             arLog(0, 3, 3943, $15);
                             break block32;
                            }
                            $7 = emscripten_builtin_malloc(8);
                            if ($7) {
                             block33 : {
                              if ((fread($7 + 4 | 0, 4, 1, $17) | 0) == 1) {
                               $29 = HEAP32[$7 + 4 >> 2];
                               if (($29 | 0) > 0) {
                                break block33
                               }
                              }
                              arLog(0, 3, 4439, 0);
                              break block34;
                             }
                             HEAP32[$15 + 48 >> 2] = $29;
                             arLog(0, 1, 5273, $15 + 48 | 0);
                             $23 = $29 << 2;
                             $20 = emscripten_builtin_malloc($23);
                             HEAP32[$7 >> 2] = $20;
                             if ($20) {
                              $1 = emscripten_builtin_malloc(16);
                              HEAP32[$20 >> 2] = $1;
                              if ($1) {
                               block55 : {
                                $1 = emscripten_builtin_malloc(20);
                                if ($1) {
                                 $5 = __stack_pointer - 816 | 0;
                                 __stack_pointer = $5;
                                 wasm2js_memory_fill($5 + 328 | 0, 0, 488);
                                 HEAP32[20040] = 0;
                                 $6 = jpeg_std_error($5 + 40 | 0);
                                 $3 = HEAP32[20040];
                                 HEAP32[20040] = 0;
                                 $8 = -1;
                                 block52 : {
                                  block39 : {
                                   block36 : {
                                    block35 : {
                                     if (!$3) {
                                      break block35
                                     }
                                     $4 = HEAP32[20041];
                                     if (!$4) {
                                      break block35
                                     }
                                     $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                     if (!$8) {
                                      break block36
                                     }
                                     tempRet0 = $4;
                                    }
                                    $3 = tempRet0;
                                    if (($8 | 0) != 1) {
                                     HEAP32[$5 + 40 >> 2] = 3;
                                     HEAP32[$5 + 328 >> 2] = $6;
                                     HEAP32[$5 + 176 >> 2] = 1;
                                     HEAP32[$5 + 172 >> 2] = $5 + 12;
                                     $3 = 0;
                                    }
                                    label18 : while (1) {
                                     if ($3) {
                                      HEAP32[20040] = 0;
                                      invoke_vi(4, $5 + 328 | 0);
                                      $3 = HEAP32[20040];
                                      HEAP32[20040] = 0;
                                      $8 = -1;
                                      block37 : {
                                       if (!$3) {
                                        break block37
                                       }
                                       $4 = HEAP32[20041];
                                       if (!$4) {
                                        break block37
                                       }
                                       $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                       if (!$8) {
                                        break block36
                                       }
                                       tempRet0 = $4;
                                      }
                                      $3 = tempRet0;
                                      if (($8 | 0) == 1) {
                                       continue
                                      }
                                      HEAP32[20040] = 0;
                                      invoke_viiii(5, 0, 3, 6108, 0);
                                      $3 = HEAP32[20040];
                                      HEAP32[20040] = 0;
                                      $8 = -1;
                                      block38 : {
                                       if (!$3) {
                                        break block38
                                       }
                                       $4 = HEAP32[20041];
                                       if (!$4) {
                                        break block38
                                       }
                                       $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                       if (!$8) {
                                        break block36
                                       }
                                       tempRet0 = $4;
                                      }
                                      $3 = tempRet0;
                                      if (($8 | 0) == 1) {
                                       continue
                                      }
                                      break block39;
                                     }
                                     HEAP32[20040] = 0;
                                     invoke_viii(6, $5 + 328 | 0, 90, 488);
                                     $3 = HEAP32[20040];
                                     HEAP32[20040] = 0;
                                     $8 = -1;
                                     block40 : {
                                      if (!$3) {
                                       break block40
                                      }
                                      $4 = HEAP32[20041];
                                      if (!$4) {
                                       break block40
                                      }
                                      $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                      if (!$8) {
                                       break block36
                                      }
                                      tempRet0 = $4;
                                     }
                                     $3 = tempRet0;
                                     if (($8 | 0) == 1) {
                                      continue
                                     }
                                     HEAP32[20040] = 0;
                                     invoke_vii(7, $5 + 328 | 0, $17 | 0);
                                     $3 = HEAP32[20040];
                                     HEAP32[20040] = 0;
                                     $8 = -1;
                                     block41 : {
                                      if (!$3) {
                                       break block41
                                      }
                                      $4 = HEAP32[20041];
                                      if (!$4) {
                                       break block41
                                      }
                                      $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                      if (!$8) {
                                       break block36
                                      }
                                      tempRet0 = $4;
                                     }
                                     $3 = tempRet0;
                                     if (($8 | 0) == 1) {
                                      continue
                                     }
                                     HEAP32[20040] = 0;
                                     $6 = invoke_iii(8, $5 + 328 | 0, 1) | 0;
                                     $3 = HEAP32[20040];
                                     HEAP32[20040] = 0;
                                     $8 = -1;
                                     block42 : {
                                      if (!$3) {
                                       break block42
                                      }
                                      $4 = HEAP32[20041];
                                      if (!$4) {
                                       break block42
                                      }
                                      $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                      if (!$8) {
                                       break block36
                                      }
                                      tempRet0 = $4;
                                     }
                                     $3 = tempRet0;
                                     if (($8 | 0) == 1) {
                                      continue
                                     }
                                     if (($6 | 0) != 1) {
                                      HEAP32[20040] = 0;
                                      invoke_viiii(5, 0, 3, 6874, 0);
                                      $3 = HEAP32[20040];
                                      HEAP32[20040] = 0;
                                      $8 = -1;
                                      block43 : {
                                       if (!$3) {
                                        break block43
                                       }
                                       $4 = HEAP32[20041];
                                       if (!$4) {
                                        break block43
                                       }
                                       $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                       if (!$8) {
                                        break block36
                                       }
                                       tempRet0 = $4;
                                      }
                                      $3 = tempRet0;
                                      if (($8 | 0) == 1) {
                                       continue
                                      }
                                      HEAP32[20040] = 0;
                                      invoke_vi(4, $5 + 328 | 0);
                                      $3 = HEAP32[20040];
                                      HEAP32[20040] = 0;
                                      $8 = -1;
                                      block44 : {
                                       if (!$3) {
                                        break block44
                                       }
                                       $4 = HEAP32[20041];
                                       if (!$4) {
                                        break block44
                                       }
                                       $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                       if (!$8) {
                                        break block36
                                       }
                                       tempRet0 = $4;
                                      }
                                      $3 = tempRet0;
                                      if (($8 | 0) == 1) {
                                       continue
                                      }
                                      break block39;
                                     }
                                     HEAP32[20040] = 0;
                                     invoke_ii(9, $5 + 328 | 0) | 0;
                                     $3 = HEAP32[20040];
                                     HEAP32[20040] = 0;
                                     $8 = -1;
                                     block45 : {
                                      if (!$3) {
                                       break block45
                                      }
                                      $4 = HEAP32[20041];
                                      if (!$4) {
                                       break block45
                                      }
                                      $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                      if (!$8) {
                                       break block36
                                      }
                                      tempRet0 = $4;
                                     }
                                     $3 = tempRet0;
                                     if (($8 | 0) == 1) {
                                      continue
                                     }
                                     $25 = Math_imul(HEAP32[$5 + 356 >> 2], HEAP32[$5 + 364 >> 2]);
                                     $6 = emscripten_builtin_malloc(Math_imul($25, HEAP32[$5 + 360 >> 2]));
                                     if ($6) {
                                      $8 = 0;
                                      block50 : {
                                       block49 : {
                                        while (1) {
                                         block48 : {
                                          $3 = 0;
                                          if (HEAPU32[$5 + 468 >> 2] >= HEAPU32[$5 + 444 >> 2]) {
                                           HEAP32[20040] = 0;
                                           invoke_ii(10, $5 + 328 | 0) | 0;
                                           $3 = HEAP32[20040];
                                           HEAP32[20040] = 0;
                                           $8 = -1;
                                           block46 : {
                                            if (!$3) {
                                             break block46
                                            }
                                            $4 = HEAP32[20041];
                                            if (!$4) {
                                             break block46
                                            }
                                            $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                            if (!$8) {
                                             break block36
                                            }
                                            tempRet0 = $4;
                                           }
                                           $3 = tempRet0;
                                           if (($8 | 0) == 1) {
                                            continue label18
                                           }
                                           HEAP32[20040] = 0;
                                           invoke_vi(4, $5 + 328 | 0);
                                           $3 = HEAP32[20040];
                                           HEAP32[20040] = 0;
                                           $8 = -1;
                                           block47 : {
                                            if (!$3) {
                                             break block47
                                            }
                                            $4 = HEAP32[20041];
                                            if (!$4) {
                                             break block47
                                            }
                                            $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                            if (!$8) {
                                             break block36
                                            }
                                            tempRet0 = $4;
                                           }
                                           $3 = tempRet0;
                                           if (($8 | 0) == 1) {
                                            continue label18
                                           }
                                           HEAP32[$1 + 8 >> 2] = HEAP32[$5 + 356 >> 2];
                                           HEAP32[$1 + 12 >> 2] = HEAP32[$5 + 360 >> 2];
                                           HEAP32[$1 + 4 >> 2] = HEAP32[$5 + 364 >> 2];
                                           $4 = HEAPU16[$5 + 622 >> 1];
                                           $3 = HEAPU16[$5 + 620 >> 1];
                                           $12 = HEAPU8[$5 + 618 | 0];
                                           switch ($12 - 1 | 0) {
                                           case 0:
                                            break block48;
                                           case 1:
                                            break block49;
                                           default:
                                            break block50;
                                           };
                                          }
                                          while (1) {
                                           if (($3 | 0) != 5) {
                                            HEAP32[($5 + 16 | 0) + ($3 << 2) >> 2] = Math_imul($25, $3 + $8 | 0) + $6;
                                            $3 = $3 + 1 | 0;
                                            continue;
                                           }
                                           break;
                                          };
                                          HEAP32[20040] = 0;
                                          $30 = invoke_iiii(11, $5 + 328 | 0, $5 + 16 | 0, 5) | 0;
                                          $3 = HEAP32[20040];
                                          HEAP32[20040] = 0;
                                          $12 = -1;
                                          block51 : {
                                           if (!$3) {
                                            break block51
                                           }
                                           $4 = HEAP32[20041];
                                           if (!$4) {
                                            break block51
                                           }
                                           $12 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                           if (!$12) {
                                            break block36
                                           }
                                           tempRet0 = $4;
                                          }
                                          $3 = tempRet0;
                                          if (($12 | 0) == 1) {
                                           continue label18
                                          }
                                          $8 = $8 + $30 | 0;
                                          continue;
                                         }
                                         break;
                                        };
                                        if (($3 | 0) != ($4 | 0)) {
                                         break block50
                                        }
                                        HEAPF32[$1 + 16 >> 2] = $3 >>> 0;
                                        break block52;
                                       }
                                       if (($3 | 0) != ($4 | 0)) {
                                        break block50
                                       }
                                       HEAPF32[$1 + 16 >> 2] = Math_fround($3 >>> 0) * Math_fround(2.5399999618530273);
                                       break block52;
                                      }
                                      if (!($4 | ($3 | $12 >>> 0 < 3))) {
                                       HEAPF32[$1 + 16 >> 2] = $12 >>> 0;
                                       break block52;
                                      }
                                      HEAP32[$1 + 16 >> 2] = 0;
                                      break block52;
                                     }
                                     HEAP32[20040] = 0;
                                     invoke_viiii(5, 0, 3, 1733, 0);
                                     $3 = HEAP32[20040];
                                     HEAP32[20040] = 0;
                                     $8 = -1;
                                     block53 : {
                                      if (!$3) {
                                       break block53
                                      }
                                      $4 = HEAP32[20041];
                                      if (!$4) {
                                       break block53
                                      }
                                      $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                      if (!$8) {
                                       break block36
                                      }
                                      tempRet0 = $4;
                                     }
                                     $3 = tempRet0;
                                     if (($8 | 0) == 1) {
                                      continue
                                     }
                                     HEAP32[20040] = 0;
                                     invoke_vi(4, $5 + 328 | 0);
                                     $3 = HEAP32[20040];
                                     HEAP32[20040] = 0;
                                     $8 = -1;
                                     block54 : {
                                      if (!$3) {
                                       break block54
                                      }
                                      $4 = HEAP32[20041];
                                      if (!$4) {
                                       break block54
                                      }
                                      $8 = __wasm_setjmp_test($3, $5 + 12 | 0);
                                      if (!$8) {
                                       break block36
                                      }
                                      tempRet0 = $4;
                                     }
                                     $3 = tempRet0;
                                     if (($8 | 0) == 1) {
                                      continue
                                     }
                                     break;
                                    };
                                    break block39;
                                   }
                                   emscripten_longjmp($3, $4);
                                   wasm2js_trap();
                                  }
                                  $6 = 0;
                                 }
                                 __stack_pointer = $5 + 816 | 0;
                                 HEAP32[$1 >> 2] = $6;
                                 if (!$6) {
                                  emscripten_builtin_free($1);
                                  $1 = 0;
                                 }
                                 break block55;
                                }
                                break block5;
                               }
                               $3 = $1;
                               if ($3) {
                                if (HEAP32[$3 + 4 >> 2] == 1) {
                                 break block57
                                }
                                HEAP32[$15 + 32 >> 2] = $19;
                                HEAP32[$15 + 36 >> 2] = $15 + 84;
                                $1 = 0;
                                arLog(0, 2, 6015, $15 + 32 | 0);
                                emscripten_builtin_free(HEAP32[$20 >> 2]);
                                emscripten_builtin_free($20);
                                emscripten_builtin_free($7);
                                emscripten_builtin_free($3);
                                fclose($17);
                                break block32;
                               }
                               HEAP32[$15 + 16 >> 2] = $19;
                               HEAP32[$15 + 20 >> 2] = $15 + 84;
                               arLog(0, 2, 6015, $15 + 16 | 0);
                               emscripten_builtin_free(HEAP32[$20 >> 2]);
                               emscripten_builtin_free($20);
                               emscripten_builtin_free($7);
                               rewind($17);
                               $1 = emscripten_builtin_malloc(8);
                               if ($1) {
                                block58 : {
                                 if ((fread($1 + 4 | 0, 4, 1, $17) | 0) == 1) {
                                  $6 = HEAP32[$1 + 4 >> 2];
                                  if (($6 | 0) > 0) {
                                   break block58
                                  }
                                 }
                                 arLog(0, 3, 4439, 0);
                                 break block59;
                                }
                                $5 = emscripten_builtin_malloc($6 << 2);
                                HEAP32[$1 >> 2] = $5;
                                if ($5) {
                                 $4 = 1;
                                 while (1) {
                                  if (($6 | 0) == ($10 | 0)) {
                                   $10 = 0;
                                   while (1) {
                                    if (($6 | 0) == ($10 | 0)) {
                                     break block60
                                    }
                                    block62 : {
                                     block61 : {
                                      $3 = $5 + ($10 << 2) | 0;
                                      if ((fread(HEAP32[$3 >> 2] + 4 | 0, 4, 1, $17) | 0) != 1) {
                                       $3 = 0;
                                       while (1) if (($3 | 0) == ($10 | 0)) {
                                        $10 = 0;
                                        while (1) {
                                         if (($6 | 0) == ($10 | 0)) {
                                          break block61
                                         }
                                         emscripten_builtin_free(HEAP32[$5 + ($10 << 2) >> 2]);
                                         $10 = $10 + 1 | 0;
                                         continue;
                                        };
                                       } else {
                                        emscripten_builtin_free(HEAP32[HEAP32[$5 + ($3 << 2) >> 2] >> 2]);
                                        $3 = $3 + 1 | 0;
                                        continue;
                                       };
                                      }
                                      if ((fread(HEAP32[$3 >> 2] + 8 | 0, 4, 1, $17) | 0) != 1) {
                                       $3 = 0;
                                       while (1) if (($3 | 0) == ($10 | 0)) {
                                        $10 = 0;
                                        while (1) {
                                         if (($6 | 0) == ($10 | 0)) {
                                          break block61
                                         }
                                         emscripten_builtin_free(HEAP32[$5 + ($10 << 2) >> 2]);
                                         $10 = $10 + 1 | 0;
                                         continue;
                                        };
                                       } else {
                                        emscripten_builtin_free(HEAP32[HEAP32[$5 + ($3 << 2) >> 2] >> 2]);
                                        $3 = $3 + 1 | 0;
                                        continue;
                                       };
                                      }
                                      if ((fread(HEAP32[$3 >> 2] + 12 | 0, 4, 1, $17) | 0) != 1) {
                                       $3 = 0;
                                       while (1) if (($3 | 0) == ($10 | 0)) {
                                        $10 = 0;
                                        while (1) {
                                         if (($6 | 0) == ($10 | 0)) {
                                          break block61
                                         }
                                         emscripten_builtin_free(HEAP32[$5 + ($10 << 2) >> 2]);
                                         $10 = $10 + 1 | 0;
                                         continue;
                                        };
                                       } else {
                                        emscripten_builtin_free(HEAP32[HEAP32[$5 + ($3 << 2) >> 2] >> 2]);
                                        $3 = $3 + 1 | 0;
                                        continue;
                                       };
                                      }
                                      $7 = HEAP32[$3 >> 2];
                                      $12 = emscripten_builtin_malloc(Math_imul(HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]));
                                      HEAP32[$7 >> 2] = $12;
                                      if ($12) {
                                       $7 = HEAP32[$3 >> 2];
                                       $7 = fread(HEAP32[$7 >> 2], 1, Math_imul(HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]), $17);
                                       $3 = HEAP32[$3 >> 2];
                                       if (($7 | 0) == (Math_imul(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]) | 0)) {
                                        break block62
                                       }
                                       $10 = 0;
                                       while (1) if (($4 | 0) == ($10 | 0)) {
                                        $10 = 0;
                                        while (1) {
                                         if (($6 | 0) == ($10 | 0)) {
                                          break block61
                                         }
                                         emscripten_builtin_free(HEAP32[$5 + ($10 << 2) >> 2]);
                                         $10 = $10 + 1 | 0;
                                         continue;
                                        };
                                       } else {
                                        emscripten_builtin_free(HEAP32[HEAP32[$5 + ($10 << 2) >> 2] >> 2]);
                                        $10 = $10 + 1 | 0;
                                        continue;
                                       };
                                      }
                                      break block5;
                                     }
                                     emscripten_builtin_free($5);
                                     break block59;
                                    }
                                    $4 = $4 + 1 | 0;
                                    $10 = $10 + 1 | 0;
                                    continue;
                                   };
                                  }
                                  $3 = emscripten_builtin_malloc(16);
                                  HEAP32[$5 + ($10 << 2) >> 2] = $3;
                                  $10 = $10 + 1 | 0;
                                  if ($3) {
                                   continue
                                  }
                                  break;
                                 };
                                 break block5;
                                }
                                break block5;
                               }
                               break block5;
                              }
                              break block5;
                             }
                             break block5;
                            }
                            break block5;
                           }
                           break block5;
                          }
                          $1 = HEAP32[$20 >> 2];
                          HEAP32[$1 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
                          HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 12 >> 2];
                          HEAPF32[$1 + 12 >> 2] = HEAPF32[$3 + 16 >> 2];
                          HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
                          emscripten_builtin_free($3);
                          fseek($17, 4 - $23 | 0, 2);
                          $10 = 1;
                          block63 : {
                           while (1) {
                            if (($10 | 0) != ($29 | 0)) {
                             if ((fread($15 + 92 | 0, 4, 1, $17) | 0) != 1) {
                              $1 = 0;
                              while (1) {
                               if (($1 | 0) == ($10 | 0)) {
                                break block63
                               }
                               $3 = ($1 << 2) + $20 | 0;
                               emscripten_builtin_free(HEAP32[HEAP32[$3 >> 2] >> 2]);
                               emscripten_builtin_free(HEAP32[$3 >> 2]);
                               $1 = $1 + 1 | 0;
                               continue;
                              };
                             } else {
                              $38 = ($10 << 2) + $20 | 0;
                              $21 = HEAPF32[$15 + 92 >> 2];
                              $19 = HEAP32[$20 >> 2];
                              $1 = HEAP32[$19 + 4 >> 2];
                              $26 = HEAPF32[$19 + 12 >> 2];
                              $3 = HEAP32[$19 + 8 >> 2];
                              $23 = emscripten_builtin_malloc(16);
                              $3 = lroundf(Math_fround(Math_fround($21 * Math_fround($3 | 0)) / $26));
                              $5 = lroundf(Math_fround(Math_fround($21 * Math_fround($1 | 0)) / $26));
                              block65 : {
                               if ($23) {
                                block64 : {
                                 HEAPF32[$23 + 12 >> 2] = $21;
                                 HEAP32[$23 + 8 >> 2] = $3;
                                 HEAP32[$23 + 4 >> 2] = $5;
                                 $25 = emscripten_builtin_malloc(Math_imul($3, $5));
                                 HEAP32[$23 >> 2] = $25;
                                 if (!$25) {
                                  break block64
                                 }
                                 $1 = 0;
                                 $39 = ($3 | 0) > 0 ? $3 : 0;
                                 $40 = ($5 | 0) > 0 ? $5 : 0;
                                 label32 : while (1) {
                                  if (($1 | 0) != ($39 | 0)) {
                                   $3 = HEAP32[$19 + 8 >> 2];
                                   $26 = HEAPF32[$19 + 12 >> 2];
                                   $5 = $1 + 1 | 0;
                                   $6 = lroundf(Math_fround(Math_fround($26 * Math_fround($5 >>> 0)) / $21));
                                   $12 = lroundf(Math_fround(Math_fround($26 * Math_fround($1 >>> 0)) / $21));
                                   $1 = ($3 | 0) > ($6 | 0) ? $6 : $3;
                                   $41 = ($1 | 0) < ($12 | 0) ? $12 : $1;
                                   $1 = 0;
                                   while (1) if (($1 | 0) == ($40 | 0)) {
                                    $1 = $5;
                                    continue label32;
                                   } else {
                                    $30 = HEAP32[$19 + 4 >> 2];
                                    $26 = HEAPF32[$19 + 12 >> 2];
                                    $6 = $1 + 1 | 0;
                                    $3 = lroundf(Math_fround(Math_fround($26 * Math_fround($6 >>> 0)) / $21));
                                    $31 = lroundf(Math_fround(Math_fround($26 * Math_fround($1 >>> 0)) / $21));
                                    $1 = ($3 | 0) < ($30 | 0) ? $3 : $30;
                                    $42 = (($1 | 0) < ($31 | 0) ? $31 : $1) - $31 | 0;
                                    $1 = 0;
                                    $4 = $12;
                                    $33 = 0;
                                    while (1) {
                                     if (($4 | 0) != ($41 | 0)) {
                                      $3 = $1 + $42 | 0;
                                      $8 = $31 + (HEAP32[$19 >> 2] + Math_imul($4, $30) | 0) | 0;
                                      while (1) {
                                       if (($1 | 0) != ($3 | 0)) {
                                        $1 = $1 + 1 | 0;
                                        $33 = HEAPU8[$8 | 0] + $33 | 0;
                                        $8 = $8 + 1 | 0;
                                        continue;
                                       }
                                       break;
                                      };
                                      $4 = $4 + 1 | 0;
                                      $1 = $3;
                                      continue;
                                     }
                                     break;
                                    };
                                    HEAP8[$25 | 0] = ($33 | 0) / ($1 | 0);
                                    $25 = $25 + 1 | 0;
                                    $1 = $6;
                                    continue;
                                   };
                                  }
                                  break;
                                 };
                                 break block65;
                                }
                               }
                               break block5;
                              }
                              HEAP32[$38 >> 2] = $23;
                              $10 = $10 + 1 | 0;
                              continue;
                             }
                            }
                            break;
                           };
                           fclose($17);
                           $1 = $7;
                           break block32;
                          }
                          emscripten_builtin_free($20);
                         }
                         emscripten_builtin_free($7);
                         fclose($17);
                         $1 = 0;
                         break block32;
                        }
                        emscripten_builtin_free($1);
                        $1 = 0;
                       }
                       fclose($17);
                      }
                      __stack_pointer = $15 + 96 | 0;
                      HEAP32[Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 >> 2] = $1;
                      if (!$1) {
                       HEAP32[$9 >> 2] = $34;
                       arLog(0, 3, 9519, $9);
                       emscripten_builtin_free($18);
                       emscripten_builtin_free($11);
                       if (!$16) {
                        break block67
                       }
                       fclose($16);
                       break block67;
                      }
                      arLog(0, 1, 10150, 0);
                      arLog(0, 1, 10444, 0);
                      $8 = 0;
                      $4 = 0;
                      $5 = __stack_pointer - 544 | 0;
                      __stack_pointer = $5;
                      $10 = $9 + 720 | 0;
                      $3 = $10;
                      HEAP32[$5 + 16 >> 2] = $3;
                      HEAP32[$5 + 20 >> 2] = 1024;
                      $1 = $5 + 32 | 0;
                      siprintf($1, 1035, $5 + 16 | 0);
                      block74 : {
                       block72 : {
                        $1 = fopen($1, 2486);
                        block68 : {
                         if (!$1) {
                          HEAP32[$5 >> 2] = $3;
                          arLog(0, 3, 3177, $5);
                          break block68;
                         }
                         block70 : {
                          block69 : {
                           $8 = emscripten_builtin_malloc(8);
                           if ($8) {
                            if ((fread($8 + 4 | 0, 4, 1, $1) | 0) != 1) {
                             arLog(0, 3, 4623, 0);
                             break block69;
                            }
                            $3 = HEAP32[$8 + 4 >> 2];
                            $6 = emscripten_builtin_malloc(Math_imul($3, 20));
                            HEAP32[$8 >> 2] = $6;
                            if ($6) {
                             $15 = ($3 | 0) > 0 ? $3 : 0;
                             while (1) {
                              if (($4 | 0) == ($15 | 0)) {
                               break block70
                              }
                              block73 : {
                               $3 = $6 + Math_imul($4, 20) | 0;
                               block71 : {
                                if ((fread($3 + 8 | 0, 4, 1, $1) | 0) != 1) {
                                 break block71
                                }
                                if ((fread($3 + 12 | 0, 4, 1, $1) | 0) != 1) {
                                 break block71
                                }
                                if ((fread($3 + 16 | 0, 4, 1, $1) | 0) != 1) {
                                 break block71
                                }
                                if ((fread($3 + 4 | 0, 4, 1, $1) | 0) != 1) {
                                 break block71
                                }
                                $12 = emscripten_builtin_malloc(Math_imul(HEAP32[$3 + 4 >> 2], 20));
                                HEAP32[$3 >> 2] = $12;
                                $7 = 0;
                                if (!$12) {
                                 break block72
                                }
                                while (1) {
                                 if (HEAP32[$3 + 4 >> 2] <= ($7 | 0)) {
                                  break block73
                                 }
                                 $12 = Math_imul($7, 20);
                                 if ((fread($12 + HEAP32[$3 >> 2] | 0, 4, 1, $1) | 0) != 1) {
                                  break block71
                                 }
                                 if ((fread(($12 + HEAP32[$3 >> 2] | 0) + 4 | 0, 4, 1, $1) | 0) != 1) {
                                  break block71
                                 }
                                 if ((fread(($12 + HEAP32[$3 >> 2] | 0) + 8 | 0, 4, 1, $1) | 0) != 1) {
                                  break block71
                                 }
                                 if ((fread(($12 + HEAP32[$3 >> 2] | 0) + 12 | 0, 4, 1, $1) | 0) != 1) {
                                  break block71
                                 }
                                 $7 = $7 + 1 | 0;
                                 if ((fread(($12 + HEAP32[$3 >> 2] | 0) + 16 | 0, 4, 1, $1) | 0) == 1) {
                                  continue
                                 }
                                 break;
                                };
                               }
                               $3 = 0;
                               arLog(0, 3, 4623, 0);
                               while (1) {
                                if (($3 | 0) != ($4 | 0)) {
                                 emscripten_builtin_free(HEAP32[$6 + Math_imul($3, 20) >> 2]);
                                 $3 = $3 + 1 | 0;
                                 continue;
                                }
                                break;
                               };
                               emscripten_builtin_free($6);
                               break block69;
                              }
                              $4 = $4 + 1 | 0;
                              continue;
                             };
                            }
                            break block72;
                           }
                           break block72;
                          }
                          emscripten_builtin_free($8);
                          $8 = 0;
                         }
                         fclose($1);
                        }
                        __stack_pointer = $5 + 544 | 0;
                        break block74;
                       }
                       arLog(0, 3, 3991, 0);
                       break block75;
                      }
                      HEAP32[(Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 | 0) + 4 >> 2] = $8;
                      if (!$8) {
                       HEAP32[$9 + 16 >> 2] = $10;
                       arLog(0, 3, 11070, $9 + 16 | 0);
                       $3 = 0;
                       $1 = Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 | 0;
                       block76 : {
                        if (!$1) {
                         break block76
                        }
                        $8 = HEAP32[$1 >> 2];
                        if (!$8) {
                         break block76
                        }
                        while (1) {
                         $5 = HEAP32[$8 >> 2];
                         if (HEAP32[$8 + 4 >> 2] > ($3 | 0)) {
                          $6 = $3 << 2;
                          emscripten_builtin_free(HEAP32[HEAP32[$5 + $6 >> 2] >> 2]);
                          emscripten_builtin_free(HEAP32[$6 + HEAP32[HEAP32[$1 >> 2] >> 2] >> 2]);
                          $3 = $3 + 1 | 0;
                          $8 = HEAP32[$1 >> 2];
                          continue;
                         }
                         break;
                        };
                        emscripten_builtin_free($5);
                        emscripten_builtin_free(HEAP32[$1 >> 2]);
                        HEAP32[$1 >> 2] = 0;
                       }
                       emscripten_builtin_free($18);
                       emscripten_builtin_free($11);
                       if (!$16) {
                        break block67
                       }
                       fclose($16);
                       break block67;
                      }
                      arLog(0, 1, 10150, 0);
                      HEAP32[(Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 | 0) + 8 >> 2] = 0;
                      block79 : {
                       block77 : {
                        if ($28) {
                         $8 = HEAP32[$9 + 716 >> 2];
                         $5 = (Math_imul($8, 112) + $18 | 0) + 12 | 0;
                         $1 = 0;
                         while (1) {
                          if (($1 | 0) == 3) {
                           break block77
                          }
                          $6 = $5 + ($1 << 4) | 0;
                          $3 = 0;
                          while (1) {
                           if (($3 | 0) != 4) {
                            HEAPF32[$6 + ($3 << 2) >> 2] = ($1 | 0) == ($3 | 0) ? Math_fround(1.0) : Math_fround(0.0);
                            $3 = $3 + 1 | 0;
                            continue;
                           }
                           break;
                          };
                          $1 = $1 + 1 | 0;
                          continue;
                         };
                        }
                        $1 = $9 + 192 | 0;
                        if (!get_buff($1, $16)) {
                         break block29
                        }
                        $3 = Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 | 0;
                        HEAP32[$9 + 64 >> 2] = $3 + 12;
                        HEAP32[$9 + 68 >> 2] = $3 + 16;
                        HEAP32[$9 + 72 >> 2] = $3 + 20;
                        HEAP32[$9 + 76 >> 2] = $3 + 24;
                        if ((sscanf($1, 12364, $9 - -64 | 0) | 0) != 4) {
                         break block78
                        }
                        if (!get_buff($1, $16)) {
                         break block29
                        }
                        $3 = Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 | 0;
                        HEAP32[$9 + 48 >> 2] = $3 + 28;
                        HEAP32[$9 + 52 >> 2] = $3 + 32;
                        HEAP32[$9 + 56 >> 2] = $3 + 36;
                        HEAP32[$9 + 60 >> 2] = $3 + 40;
                        if ((sscanf($1, 12364, $9 + 48 | 0) | 0) != 4) {
                         break block78
                        }
                        if (!get_buff($1, $16)) {
                         break block29
                        }
                        $3 = Math_imul(HEAP32[$9 + 716 >> 2], 112) + $18 | 0;
                        HEAP32[$9 + 32 >> 2] = $3 + 44;
                        HEAP32[$9 + 36 >> 2] = $3 + 48;
                        HEAP32[$9 + 40 >> 2] = $3 + 52;
                        HEAP32[$9 + 44 >> 2] = $3 + 56;
                        if ((sscanf($1, 12364, $9 + 32 | 0) | 0) != 4) {
                         break block79
                        }
                        $8 = HEAP32[$9 + 716 >> 2];
                       }
                       $1 = Math_imul($8, 112) + $18 | 0;
                       $4 = $1 + 12 | 0;
                       $7 = $1 + 60 | 0;
                       $1 = 0;
                       $6 = arMatrixAlloc(4, 4);
                       $5 = HEAP32[$6 >> 2];
                       while (1) {
                        if (($1 | 0) != 3) {
                         $12 = $5 + ($1 << 5) | 0;
                         $8 = $4 + ($1 << 4) | 0;
                         $3 = 0;
                         while (1) {
                          if (($3 | 0) != 4) {
                           HEAPF64[$12 + ($3 << 3) >> 3] = HEAPF32[$8 + ($3 << 2) >> 2];
                           $3 = $3 + 1 | 0;
                           continue;
                          }
                          break;
                         };
                         $1 = $1 + 1 | 0;
                         continue;
                        }
                        break;
                       };
                       HEAP32[$5 + 112 >> 2] = 0;
                       HEAP32[$5 + 116 >> 2] = 0;
                       HEAP32[$5 + 104 >> 2] = 0;
                       HEAP32[$5 + 108 >> 2] = 0;
                       HEAP32[$5 + 96 >> 2] = 0;
                       HEAP32[$5 + 100 >> 2] = 0;
                       HEAP32[$5 + 120 >> 2] = 0;
                       HEAP32[$5 + 124 >> 2] = 1072693248;
                       arMatrixSelfInv($6);
                       $5 = HEAP32[$6 >> 2];
                       $1 = 0;
                       while (1) {
                        if (($1 | 0) != 3) {
                         $4 = $7 + ($1 << 4) | 0;
                         $12 = $5 + ($1 << 5) | 0;
                         $3 = 0;
                         while (1) {
                          if (($3 | 0) != 4) {
                           HEAPF32[$4 + ($3 << 2) >> 2] = HEAPF64[$12 + ($3 << 3) >> 3];
                           $3 = $3 + 1 | 0;
                           continue;
                          }
                          break;
                         };
                         $1 = $1 + 1 | 0;
                         continue;
                        }
                        break;
                       };
                       arImageProcFinal($6);
                       $5 = $9 + 720 | 0;
                       $1 = 0;
                       $3 = 0;
                       block83 : {
                        block84 : {
                         block82 : {
                          while (1) {
                           block81 : {
                            $4 = $1 + $5 | 0;
                            $6 = HEAPU8[$4 | 0];
                            block80 : {
                             if (($6 | 0) != 46) {
                              if ($6) {
                               break block80
                              }
                              $6 = strlen(12948);
                              if ($3) {
                               break block81
                              }
                              if ((($1 + $6 | 0) + 2 | 0) <= 256) {
                               break block82
                              }
                              break block83;
                             }
                             $3 = $1;
                            }
                            $1 = $1 + 1 | 0;
                            continue;
                           }
                           break;
                          };
                          if ((($3 + $6 | 0) + 2 | 0) > 256) {
                           break block83
                          }
                          break block84;
                         }
                         HEAP8[$4 | 0] = 46;
                         $3 = $1;
                        }
                        HEAP8[($3 + $5 | 0) + 1 | 0] = 0;
                        $3 = 12948;
                        $1 = strlen($5) + $5 | 0;
                        block85 : {
                         if (($1 ^ 12948) & 3) {
                          $8 = HEAPU8[12948];
                          break block85;
                         }
                         $8 = HEAP32[3237];
                         if ((($8 | 16843008 - $8) & -2139062144) != -2139062144) {
                          break block85
                         }
                         while (1) {
                          HEAP32[$1 >> 2] = $8;
                          $1 = $1 + 4 | 0;
                          $8 = HEAP32[$3 + 4 >> 2];
                          $3 = $3 + 4 | 0;
                          if (((16843008 - $8 | $8) & -2139062144) == -2139062144) {
                           continue
                          }
                          break;
                         };
                        }
                        HEAP8[$1 | 0] = $8;
                        if ($8 & 255) {
                         while (1) {
                          $6 = HEAPU8[$3 + 1 | 0];
                          HEAP8[$1 + 1 | 0] = $6;
                          $1 = $1 + 1 | 0;
                          $3 = $3 + 1 | 0;
                          if ($6) {
                           continue
                          }
                          break;
                         }
                        }
                       }
                       $1 = emscripten_builtin_malloc(256);
                       $3 = HEAP32[$9 + 716 >> 2];
                       HEAP32[(Math_imul($3, 112) + $18 | 0) + 108 >> 2] = $1;
                       if (!$1) {
                        break block86
                       }
                       strncpy($1, $5, 256);
                       $3 = $3 + 1 | 0;
                       continue;
                      }
                      break;
                     };
                     break block78;
                    }
                    if ($16) {
                     fclose($16)
                    }
                    if (HEAP32[$9 + 716 >> 2] >= ($27 | 0)) {
                     break block26
                    }
                    exit(0);
                    wasm2js_trap();
                   }
                   break block86;
                  }
                  break block86;
                 }
                 fclose($16);
                 emscripten_builtin_free($11);
                }
                $11 = 0;
               }
               __stack_pointer = $9 + 976 | 0;
               break block87;
              }
              arLog(0, 3, 12838, 0);
              fclose($16);
              exit(0);
              wasm2js_trap();
             }
             arLog(0, 3, 6250, 0);
             break block75;
            }
            HEAP32[(HEAP32[$13 + 24 >> 2] << 2) + $37 >> 2] = $11;
            if ($11) {
             break block88
            }
            $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($32, 25861);
            webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($1, $22);
           }
           std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
           HEAP32[$0 + 8 >> 2] = 0;
           HEAP32[$0 >> 2] = 0;
           HEAP32[$0 + 4 >> 2] = 0;
           break block89;
          }
          __inlined_func$kpmSetRefDataSet$7 : {
           $3 = 0;
           $8 = 0;
           $22 = 0;
           $5 = __stack_pointer - 80 | 0;
           __stack_pointer = $5;
           block210 : {
            block111 : {
             block56 : {
              $1 = $14;
              $4 = HEAP32[$13 + 40 >> 2];
              if (!$1 | !$4) {
               $1 = 7449
              } else {
               if (HEAP32[$4 + 4 >> 2]) {
                break block56
               }
               $1 = 8091;
              }
              arLog(0, 3, $1, 0);
              $22 = -1;
              break block111;
             }
             emscripten_builtin_free(HEAP32[$1 + 28 >> 2]);
             $11 = HEAP32[$4 + 4 >> 2];
             block3 : {
              if ($11) {
               $2 = emscripten_builtin_malloc(Math_imul($11, 132));
               HEAP32[$1 + 28 >> 2] = $2;
               if (!$2) {
                break block210
               }
               while (1) {
                if (($3 | 0) >= ($11 | 0)) {
                 break block3
                }
                $2 = Math_imul($3, 132);
                wasm2js_memory_copy($2 + HEAP32[$1 + 28 >> 2] | 0, $2 + HEAP32[$4 >> 2] | 0, 132);
                $3 = $3 + 1 | 0;
                $11 = HEAP32[$4 + 4 >> 2];
                continue;
               };
              }
              $11 = 0;
              HEAP32[$1 + 28 >> 2] = 0;
             }
             HEAP32[$1 + 32 >> 2] = $11;
             if (HEAP32[$1 + 36 >> 2]) {
              $3 = 0;
              while (1) {
               $2 = HEAP32[$1 + 36 >> 2];
               if (HEAP32[$1 + 40 >> 2] > ($3 | 0)) {
                emscripten_builtin_free(HEAP32[$2 + Math_imul($3, 12) >> 2]);
                $3 = $3 + 1 | 0;
                continue;
               }
               break;
              };
              emscripten_builtin_free($2);
             }
             $11 = HEAP32[$4 + 12 >> 2];
             block459 : {
              if ($11) {
               $2 = emscripten_builtin_malloc(Math_imul($11, 12));
               HEAP32[$1 + 36 >> 2] = $2;
               if (!$2) {
                break block210
               }
               while (1) {
                if (($8 | 0) >= ($11 | 0)) {
                 break block459
                }
                $7 = Math_imul($8, 12);
                $3 = $7 + HEAP32[$1 + 36 >> 2] | 0;
                $2 = HEAP32[$4 + 8 >> 2];
                $12 = $7 + $2 | 0;
                HEAP32[$3 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
                $6 = HEAP32[$12 + 4 >> 2];
                HEAP32[$3 + 4 >> 2] = $6;
                block6 : {
                 block561 : {
                  if ($6) {
                   $11 = emscripten_builtin_malloc(Math_imul($6, 12));
                   HEAP32[$3 >> 2] = $11;
                   $3 = 0;
                   if (!$11) {
                    break block210
                   }
                   while (1) {
                    if (($3 | 0) >= ($6 | 0)) {
                     break block561
                    }
                    $11 = Math_imul($3, 12);
                    $6 = $11 + HEAP32[$7 + HEAP32[$1 + 36 >> 2] >> 2] | 0;
                    $2 = $11 + HEAP32[$2 + $7 >> 2] | 0;
                    HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
                    $11 = HEAP32[$2 + 4 >> 2];
                    HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
                    HEAP32[$6 + 4 >> 2] = $11;
                    $3 = $3 + 1 | 0;
                    $2 = HEAP32[$4 + 8 >> 2];
                    $6 = HEAP32[($7 + $2 | 0) + 4 >> 2];
                    continue;
                   };
                  }
                  HEAP32[$12 >> 2] = 0;
                  break block6;
                 }
                 $11 = HEAP32[$4 + 12 >> 2];
                }
                $8 = $8 + 1 | 0;
                continue;
               };
              }
              $11 = 0;
              HEAP32[$1 + 36 >> 2] = 0;
             }
             HEAP32[$1 + 40 >> 2] = $11;
             $2 = HEAP32[$1 + 52 >> 2];
             if ($2) {
              emscripten_builtin_free($2);
              HEAP32[$1 + 52 >> 2] = 0;
              HEAP32[$1 + 56 >> 2] = 0;
             }
             block863 : {
              block764 : {
               $2 = HEAP32[$4 + 12 >> 2];
               if (($2 | 0) <= 0) {
                break block764
               }
               HEAP32[$1 + 56 >> 2] = $2;
               $6 = emscripten_builtin_malloc(Math_imul($2, 68));
               HEAP32[$1 + 52 >> 2] = $6;
               if (!$6) {
                break block863
               }
               $3 = 0;
               while (1) {
                if (($2 | 0) == ($3 | 0)) {
                 break block764
                }
                HEAP32[($6 + Math_imul($3, 68) | 0) + 64 >> 2] = 0;
                $3 = $3 + 1 | 0;
                continue;
               };
              }
              $2 = HEAP32[$1 + 32 >> 2];
              if (!$2) {
               break block111
              }
              $19 = ($2 | 0) > 0 ? $2 : 0;
              $23 = $1 + 60 | 0;
              $11 = 0;
              $8 = 0;
              label566 : while (1) {
               $15 = 0;
               if (HEAP32[$1 + 40 >> 2] <= ($8 | 0)) {
                break block111
               }
               label867 : while (1) {
                $12 = Math_imul($8, 12);
                if (HEAP32[($12 + HEAP32[$1 + 36 >> 2] | 0) + 4 >> 2] <= ($15 | 0)) {
                 $8 = $8 + 1 | 0;
                 continue label566;
                }
                $6 = 0;
                HEAP32[$5 + 76 >> 2] = 0;
                HEAP32[$5 + 68 >> 2] = 0;
                HEAP32[$5 + 72 >> 2] = 0;
                HEAP32[$5 + 64 >> 2] = 0;
                HEAP32[$5 + 56 >> 2] = 0;
                HEAP32[$5 + 60 >> 2] = 0;
                HEAP32[$5 + 52 >> 2] = 0;
                HEAP32[$5 + 44 >> 2] = 0;
                HEAP32[$5 + 48 >> 2] = 0;
                while (1) if (($6 | 0) == ($19 | 0)) {
                 HEAP32[$5 + 8 >> 2] = (HEAP32[$5 + 72 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 20;
                 HEAP32[$5 + 4 >> 2] = $15;
                 HEAP32[$5 >> 2] = $8;
                 arLog(0, 1, 9360, $5);
                 $2 = $12 + HEAP32[$1 + 36 >> 2] | 0;
                 HEAP32[($11 << 2) + $23 >> 2] = HEAP32[$2 + 8 >> 2];
                 $20 = HEAP32[$1 >> 2];
                 $2 = HEAP32[$2 >> 2] + Math_imul($15, 12) | 0;
                 $3 = HEAP32[$2 >> 2];
                 $6 = HEAP32[$2 + 4 >> 2];
                 $12 = __stack_pointer - 32 | 0;
                 __stack_pointer = $12;
                 HEAP32[$12 + 28 >> 2] = $11;
                 $10 = std____2__shared_ptr_vision__Keyframe_96____shared_ptr_5babi_ne200100_5d_vision__Keyframe_96__2c_200__28vision__Keyframe_96___29($12 + 20 | 0, vision__Keyframe_96___Keyframe_28_29(operator_20new_28unsigned_20long_29(148)));
                 $2 = HEAP32[$10 >> 2];
                 HEAP32[$2 + 8 >> 2] = 96;
                 HEAP32[$2 + 4 >> 2] = $6;
                 HEAP32[$2 >> 2] = $3;
                 $27 = $5 + 68 | 0;
                 $3 = $27;
                 std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint____resize_28unsigned_20long_29($2 + 24 | 0, (HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] | 0) / 20 | 0);
                 $2 = HEAP32[$10 >> 2] + 24 | 0;
                 if (($2 | 0) != ($3 | 0)) {
                  $6 = __stack_pointer - 16 | 0;
                  __stack_pointer = $6;
                  $4 = HEAP32[$3 + 4 >> 2];
                  $3 = HEAP32[$3 >> 2];
                  $14 = ($4 - $3 | 0) / 20 | 0;
                  $7 = HEAP32[$2 >> 2];
                  block969 : {
                   if ($14 >>> 0 <= (HEAP32[$2 + 8 >> 2] - $7 | 0) / 20 >>> 0) {
                    $9 = HEAP32[$2 + 4 >> 2] - $7 | 0;
                    if ($14 >>> 0 > ($9 | 0) / 20 >>> 0) {
                     $14 = __stack_pointer - 16 | 0;
                     __stack_pointer = $14;
                     $16 = $3;
                     $3 = $3 + $9 | 0;
                     std____2__pair_vision__FeaturePoint__2c_20vision__FeaturePoint___20std____2____copy_move_unwrap_iters_5babi_ne200100_5d_std____2____copy_impl_2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__2c_200__28vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__29($14 + 8 | 0, $16, $3, $7);
                     __stack_pointer = $14 + 16 | 0;
                     void_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______construct_at_end_vision__FeaturePoint__2c_20vision__FeaturePoint___28vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20unsigned_20long_29($2, $3, $4);
                     break block969;
                    }
                    std____2__pair_vision__FeaturePoint__2c_20vision__FeaturePoint___20std____2____copy_move_unwrap_iters_5babi_ne200100_5d_std____2____copy_impl_2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__2c_200__28vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20vision__FeaturePoint__29($6 + 8 | 0, $3, $4, $7);
                    HEAP32[$2 + 4 >> 2] = HEAP32[$6 + 12 >> 2];
                    break block969;
                   }
                   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______vdeallocate_28_29($2);
                   std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______vallocate_5babi_ne200100_5d_28unsigned_20long_29($2, std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($2, $14));
                   void_20std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______construct_at_end_vision__FeaturePoint__2c_20vision__FeaturePoint___28vision__FeaturePoint__2c_20vision__FeaturePoint__2c_20unsigned_20long_29($2, $3, $4);
                  }
                  __stack_pointer = $6 + 16 | 0;
                 }
                 $25 = $5 + 44 | 0;
                 $3 = $25;
                 std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char____resize_28unsigned_20long_29(HEAP32[$10 >> 2] + 12 | 0, HEAP32[$3 + 4 >> 2] - HEAP32[$3 >> 2] | 0);
                 $2 = HEAP32[$10 >> 2] + 12 | 0;
                 if (($2 | 0) != ($3 | 0)) {
                  block1070 : {
                   $6 = HEAP32[$3 + 4 >> 2];
                   $3 = HEAP32[$3 >> 2];
                   $9 = $6 - $3 | 0;
                   $7 = HEAP32[$2 >> 2];
                   if ($9 >>> 0 <= HEAP32[$2 + 8 >> 2] - $7 >>> 0) {
                    $4 = HEAP32[$2 + 4 >> 2];
                    $14 = $4 - $7 | 0;
                    if ($9 >>> 0 > $14 >>> 0) {
                     if (($4 | 0) != ($7 | 0)) {
                      if ($14) {
                       wasm2js_memory_copy($7, $3, $14)
                      }
                      $4 = HEAP32[$2 + 4 >> 2];
                     }
                     $3 = $3 + $14 | 0;
                     $7 = $6 - $3 | 0;
                     if (!(!$7 | ($3 | 0) == ($6 | 0))) {
                      wasm2js_memory_copy($4, $3, $7)
                     }
                     HEAP32[$2 + 4 >> 2] = $4 + $7;
                     break block1070;
                    }
                    $4 = $6 - $3 | 0;
                    if (!(!$4 | ($3 | 0) == ($6 | 0))) {
                     wasm2js_memory_copy($7, $3, $4)
                    }
                    HEAP32[$2 + 4 >> 2] = $4 + $7;
                    break block1070;
                   }
                   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______vdeallocate_28_29($2);
                   $4 = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($2, $9);
                   if (($4 | 0) < 0) {
                    std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
                    wasm2js_trap();
                   }
                   $7 = operator_20new_28unsigned_20long_29($4);
                   HEAP32[$2 + 4 >> 2] = $7;
                   HEAP32[$2 >> 2] = $7;
                   HEAP32[$2 + 8 >> 2] = $4 + $7;
                   $4 = HEAP32[$2 + 4 >> 2];
                   $7 = $6 - $3 | 0;
                   if (!(!$7 | ($3 | 0) == ($6 | 0))) {
                    wasm2js_memory_copy($4, $3, $7)
                   }
                   HEAP32[$2 + 4 >> 2] = $4 + $7;
                  }
                 }
                 $6 = HEAP32[$10 >> 2];
                 HEAP32[$6 + 56 >> 2] = 128;
                 vision__BinarykMedoids_96___setk_28int_29($6 + 48 | 0);
                 HEAP32[$6 + 140 >> 2] = 8;
                 HEAP32[$6 + 144 >> 2] = 16;
                 $17 = HEAP32[$6 + 12 >> 2];
                 $4 = (HEAP32[$6 + 28 >> 2] - HEAP32[$6 + 24 >> 2] | 0) / 20 | 0;
                 $2 = 0;
                 $14 = __stack_pointer - 16 | 0;
                 __stack_pointer = $14;
                 $7 = __stack_pointer - 16 | 0;
                 __stack_pointer = $7;
                 $3 = $14 + 4 | 0;
                 HEAP32[$3 + 8 >> 2] = 0;
                 HEAP32[$3 >> 2] = 0;
                 HEAP32[$3 + 4 >> 2] = 0;
                 HEAP32[$7 + 8 >> 2] = $3;
                 if ($4) {
                  std____2__vector_int_2c_20std____2__allocator_int______vallocate_5babi_ne200100_5d_28unsigned_20long_29($3, $4);
                  std____2__vector_float_2c_20std____2__allocator_float______construct_at_end_28unsigned_20long_29($3, $4);
                 }
                 $6 = $6 + 36 | 0;
                 HEAP8[$7 + 12 | 0] = 1;
                 std____2____exception_guard_exceptions_std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______destroy_vector______exception_guard_exceptions_5babi_ne200100_5d_28_29($7 + 8 | 0);
                 __stack_pointer = $7 + 16 | 0;
                 $7 = HEAP32[$3 >> 2];
                 $9 = HEAP32[$3 + 4 >> 2] - $7 >> 2;
                 while (1) {
                  if (($2 | 0) == ($9 | 0)) {
                   $2 = operator_20new_28unsigned_20long_29(128);
                   $16 = HEAP32[$6 + 4 >> 2];
                   HEAP32[$6 + 4 >> 2] = $16 + 1;
                   HEAP8[$2 + 100 | 0] = 1;
                   HEAP32[$2 >> 2] = $16;
                   wasm2js_memory_fill($2 + 4 | 0, 0, 96);
                   HEAP32[$2 + 120 >> 2] = 0;
                   HEAP32[$2 + 124 >> 2] = 0;
                   HEAP32[$2 + 112 >> 2] = 0;
                   HEAP32[$2 + 116 >> 2] = 0;
                   HEAP32[$2 + 104 >> 2] = 0;
                   HEAP32[$2 + 108 >> 2] = 0;
                   std____2__unique_ptr_vision__Node_96__2c_20std____2__default_delete_vision__Node_96_____reset_5babi_ne200100_5d_28vision__Node_96___29($6 + 8 | 0, $2);
                   $2 = HEAP32[$6 + 8 >> 2];
                   HEAP8[$2 + 100 | 0] = 0;
                   vision__BinaryHierarchicalClustering_96___build_28vision__Node_96___2c_20unsigned_20char_20const__2c_20int_2c_20int_20const__2c_20int_29($6, $2, $17, $4, $7, $9);
                   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($3);
                   __stack_pointer = $14 + 16 | 0;
                  } else {
                   HEAP32[$7 + ($2 << 2) >> 2] = $2;
                   $2 = $2 + 1 | 0;
                   continue;
                  }
                  break;
                 };
                 $3 = HEAP32[HEAP32[$20 >> 2] >> 2];
                 HEAP32[$12 + 12 >> 2] = HEAP32[$10 >> 2];
                 $2 = HEAP32[$10 + 4 >> 2];
                 HEAP32[$12 + 16 >> 2] = $2;
                 if ($2) {
                  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1
                 }
                 $2 = HEAP32[$12 + 16 >> 2];
                 HEAP32[$12 >> 2] = HEAP32[$12 + 12 >> 2];
                 HEAP32[$12 + 4 >> 2] = $2;
                 $17 = __stack_pointer - 16 | 0;
                 __stack_pointer = $17;
                 HEAP32[$17 + 12 >> 2] = $11;
                 $7 = $3 + 72 | 0;
                 if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29($7, $17 + 12 | 0)) {
                  __cxa_throw(vision__Exception__Exception_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29(__cxa_allocate_exception(16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($17, 3579)) | 0, 22956, 14);
                  wasm2js_trap();
                 }
                 $18 = $5 + 56 | 0;
                 $16 = __stack_pointer - 16 | 0;
                 __stack_pointer = $16;
                 HEAP32[$16 + 4 >> 2] = $17 + 12;
                 $2 = 0;
                 $9 = __stack_pointer - 16 | 0;
                 __stack_pointer = $9;
                 $3 = HEAP32[$17 + 12 >> 2];
                 block1472 : {
                  block1173 : {
                   $6 = HEAP32[$7 + 4 >> 2];
                   if (!$6) {
                    break block1173
                   }
                   $14 = HEAP32[$7 >> 2];
                   $4 = __wasm_popcnt_i32($6);
                   $2 = $3 & $6 - 1;
                   block1274 : {
                    if ($4 >>> 0 <= 1) {
                     break block1274
                    }
                    $2 = $3;
                    if ($3 >>> 0 < $6 >>> 0) {
                     break block1274
                    }
                    $2 = ($3 >>> 0) % ($6 >>> 0) | 0;
                   }
                   $14 = HEAP32[$14 + ($2 << 2) >> 2];
                   if (!$14) {
                    break block1173
                   }
                   $28 = $6 - 1 | 0;
                   $29 = $4 >>> 0 > 1;
                   while (1) {
                    $14 = HEAP32[$14 >> 2];
                    if (!$14) {
                     break block1173
                    }
                    $4 = HEAP32[$14 + 4 >> 2];
                    if (($3 | 0) != ($4 | 0)) {
                     block1376 : {
                      if (!$29) {
                       $4 = $4 & $28;
                       break block1376;
                      }
                      if ($4 >>> 0 < $6 >>> 0) {
                       break block1376
                      }
                      $4 = ($4 >>> 0) % ($6 >>> 0) | 0;
                     }
                     if (($2 | 0) != ($4 | 0)) {
                      break block1173
                     }
                     continue;
                    }
                    if (($3 | 0) != HEAP32[$14 + 8 >> 2]) {
                     continue
                    }
                    break;
                   };
                   $2 = 0;
                   break block1472;
                  }
                  $4 = operator_20new_28unsigned_20long_29(20);
                  HEAP32[$9 + 8 >> 2] = $7;
                  HEAP32[$9 + 4 >> 2] = $4;
                  HEAP32[$4 + 4 >> 2] = $3;
                  HEAP32[$4 >> 2] = 0;
                  $14 = HEAP32[HEAP32[$16 + 4 >> 2] >> 2];
                  HEAP32[$4 + 12 >> 2] = 0;
                  HEAP32[$4 + 16 >> 2] = 0;
                  HEAP32[$4 + 8 >> 2] = $14;
                  HEAP8[$9 + 12 | 0] = 1;
                  $21 = Math_fround(HEAP32[$7 + 12 >> 2] + 1 >>> 0);
                  $26 = HEAPF32[$7 + 16 >> 2];
                  block1577 : {
                   if ($21 > Math_fround($26 * Math_fround($6 >>> 0)) ? 0 : $6) {
                    break block1577
                   }
                   $2 = ($6 - 1 & $6) != 0 | $6 >>> 0 < 3 | $6 << 1;
                   $21 = Math_fround(Math_ceil(Math_fround($21 / $26)));
                   if ($21 < Math_fround(4294967296.0) & $21 >= Math_fround(0.0)) {
                    $6 = ~~$21 >>> 0
                   } else {
                    $6 = 0
                   }
                   void_20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_________rehash_true__28unsigned_20long_29($7, $2 >>> 0 > $6 >>> 0 ? $2 : $6);
                   $6 = HEAP32[$7 + 4 >> 2];
                   $2 = $6 - 1 | 0;
                   if (!($2 & $6)) {
                    $2 = $2 & $3;
                    break block1577;
                   }
                   if ($3 >>> 0 < $6 >>> 0) {
                    $2 = $3;
                    break block1577;
                   }
                   $2 = ($3 >>> 0) % ($6 >>> 0) | 0;
                  }
                  $3 = HEAP32[$7 >> 2];
                  $4 = $3 + ($2 << 2) | 0;
                  $2 = HEAP32[$4 >> 2];
                  block1678 : {
                   if (!$2) {
                    $14 = HEAP32[$9 + 4 >> 2];
                    HEAP32[$14 >> 2] = HEAP32[$7 + 8 >> 2];
                    HEAP32[$7 + 8 >> 2] = $14;
                    HEAP32[$4 >> 2] = $7 + 8;
                    $2 = HEAP32[$14 >> 2];
                    if (!$2) {
                     break block1678
                    }
                    $4 = HEAP32[$2 + 4 >> 2];
                    $2 = $6 - 1 | 0;
                    block1779 : {
                     if (!($2 & $6)) {
                      $4 = $2 & $4;
                      break block1779;
                     }
                     if ($4 >>> 0 < $6 >>> 0) {
                      break block1779
                     }
                     $4 = ($4 >>> 0) % ($6 >>> 0) | 0;
                    }
                    HEAP32[$3 + ($4 << 2) >> 2] = $14;
                    break block1678;
                   }
                   $14 = HEAP32[$9 + 4 >> 2];
                   HEAP32[$14 >> 2] = HEAP32[$2 >> 2];
                   HEAP32[$2 >> 2] = $14;
                  }
                  HEAP32[$9 + 4 >> 2] = 0;
                  HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
                  $2 = HEAP32[$9 + 4 >> 2];
                  HEAP32[$9 + 4 >> 2] = 0;
                  if ($2) {
                   block1980 : {
                    block1881 : {
                     if (HEAPU8[$9 + 12 | 0] == 1) {
                      std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($2 + 12 | 0);
                      break block1881;
                     }
                     if (!$2) {
                      break block1980
                     }
                    }
                    emscripten_builtin_free($2);
                   }
                  }
                  $2 = 1;
                 }
                 HEAP8[$16 + 12 | 0] = $2;
                 HEAP32[$16 + 8 >> 2] = $14;
                 __stack_pointer = $9 + 16 | 0;
                 __stack_pointer = $16 + 16 | 0;
                 std____2__shared_ptr_vision__Keyframe_96____operator__5babi_ne200100_5d_28std____2__shared_ptr_vision__Keyframe_96___20const__29(HEAP32[$16 + 8 >> 2] + 12 | 0, $12);
                 std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($12);
                 __stack_pointer = $17 + 16 | 0;
                 $2 = std____2__unordered_map_int_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________operator_5b_5d_28int_20const__29(HEAP32[$20 >> 2] + 4 | 0, $12 + 28 | 0);
                 if (($2 | 0) != ($18 | 0)) {
                  block2082 : {
                   $6 = HEAP32[$18 + 4 >> 2];
                   $3 = HEAP32[$18 >> 2];
                   $9 = ($6 - $3 | 0) / 12 | 0;
                   $7 = HEAP32[$2 >> 2];
                   if ($9 >>> 0 <= (HEAP32[$2 + 8 >> 2] - $7 | 0) / 12 >>> 0) {
                    $4 = HEAP32[$2 + 4 >> 2];
                    $14 = $4 - $7 | 0;
                    if ($9 >>> 0 > ($14 | 0) / 12 >>> 0) {
                     if (($4 | 0) != ($7 | 0)) {
                      if ($14) {
                       wasm2js_memory_copy($7, $3, $14)
                      }
                      $4 = HEAP32[$2 + 4 >> 2];
                     }
                     $3 = $3 + $14 | 0;
                     $7 = $6 - $3 | 0;
                     if (!(!$7 | ($3 | 0) == ($6 | 0))) {
                      wasm2js_memory_copy($4, $3, $7)
                     }
                     HEAP32[$2 + 4 >> 2] = $4 + $7;
                     break block2082;
                    }
                    $4 = $6 - $3 | 0;
                    if (!(!$4 | ($3 | 0) == ($6 | 0))) {
                     wasm2js_memory_copy($7, $3, $4)
                    }
                    HEAP32[$2 + 4 >> 2] = $4 + $7;
                    break block2082;
                   }
                   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______vdeallocate_28_29($2);
                   $4 = std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($2, $9);
                   if ($4 >>> 0 >= 357913942) {
                    std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______throw_length_error_5babi_ne200100_5d_28_29();
                    wasm2js_trap();
                   }
                   $7 = std____2__allocator_vision__Point3d_float____allocate_5babi_ne200100_5d_28unsigned_20long_29($4);
                   HEAP32[$2 + 4 >> 2] = $7;
                   HEAP32[$2 >> 2] = $7;
                   HEAP32[$2 + 8 >> 2] = $7 + Math_imul($4, 12);
                   $4 = HEAP32[$2 + 4 >> 2];
                   $7 = $6 - $3 | 0;
                   if (!(!$7 | ($3 | 0) == ($6 | 0))) {
                    wasm2js_memory_copy($4, $3, $7)
                   }
                   HEAP32[$2 + 4 >> 2] = $4 + $7;
                  }
                 }
                 std____2__shared_ptr_vision__Keyframe_96_____shared_ptr_5babi_ne200100_5d_28_29($10);
                 __stack_pointer = $12 + 32 | 0;
                 $11 = $11 + 1 | 0;
                 $15 = $15 + 1 | 0;
                 std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($25);
                 std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($18);
                 std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($27);
                 continue label867;
                } else {
                 block2183 : {
                  $14 = Math_imul($6, 132);
                  $2 = $14 + HEAP32[$1 + 28 >> 2] | 0;
                  $3 = $12 + HEAP32[$1 + 36 >> 2] | 0;
                  if (HEAP32[$2 + 128 >> 2] != HEAP32[(HEAP32[$3 >> 2] + Math_imul($15, 12) | 0) + 8 >> 2] | HEAP32[$2 + 124 >> 2] != HEAP32[$3 + 8 >> 2]) {
                   break block2183
                  }
                  $4 = HEAP32[$2 + 120 >> 2];
                  $3 = HEAP32[$2 >> 2];
                  $7 = HEAP32[$2 + 4 >> 2];
                  $9 = HEAP32[$2 + 116 >> 2];
                  HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 112 >> 2];
                  HEAP32[$5 + 36 >> 2] = $9;
                  HEAP32[$5 + 24 >> 2] = $3;
                  HEAP32[$5 + 28 >> 2] = $7;
                  $3 = 0;
                  HEAP8[$5 + 40 | 0] = ($4 | 0) != 0;
                  $2 = $5 + 68 | 0;
                  $10 = $2;
                  $4 = HEAP32[$2 + 4 >> 2];
                  block2284 : {
                   if ($4 >>> 0 < HEAPU32[$2 + 8 >> 2]) {
                    HEAP32[$4 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
                    $2 = HEAP32[$5 + 36 >> 2];
                    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 32 >> 2];
                    HEAP32[$4 + 12 >> 2] = $2;
                    $2 = HEAP32[$5 + 28 >> 2];
                    HEAP32[$4 >> 2] = HEAP32[$5 + 24 >> 2];
                    HEAP32[$4 + 4 >> 2] = $2;
                    $2 = $4 + 20 | 0;
                    break block2284;
                   }
                   $9 = __stack_pointer - 32 | 0;
                   __stack_pointer = $9;
                   $4 = std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__FeaturePoint___29($9 + 12 | 0, std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($2, ((HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) / 20 | 0) + 1 | 0), (HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) / 20 | 0, $2);
                   $7 = HEAP32[$4 + 8 >> 2];
                   HEAP32[$7 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
                   $17 = HEAP32[$5 + 36 >> 2];
                   HEAP32[$7 + 8 >> 2] = HEAP32[$5 + 32 >> 2];
                   HEAP32[$7 + 12 >> 2] = $17;
                   $17 = HEAP32[$5 + 28 >> 2];
                   HEAP32[$7 >> 2] = HEAP32[$5 + 24 >> 2];
                   HEAP32[$7 + 4 >> 2] = $17;
                   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 20;
                   std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______swap_out_circular_buffer_28std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint_____29($2, $4);
                   $2 = HEAP32[$2 + 4 >> 2];
                   std____2____split_buffer_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint________split_buffer_28_29($4);
                   __stack_pointer = $9 + 32 | 0;
                  }
                  HEAP32[$10 + 4 >> 2] = $2;
                  $2 = $14 + HEAP32[$1 + 28 >> 2] | 0;
                  $4 = HEAP32[$2 + 8 >> 2];
                  $2 = HEAP32[$2 + 12 >> 2];
                  HEAP32[$5 + 32 >> 2] = 0;
                  HEAP32[$5 + 24 >> 2] = $4;
                  HEAP32[$5 + 28 >> 2] = $2;
                  $2 = $5 + 56 | 0;
                  $16 = $2;
                  $4 = HEAP32[$2 + 4 >> 2];
                  block2385 : {
                   if ($4 >>> 0 < HEAPU32[$2 + 8 >> 2]) {
                    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 32 >> 2];
                    $2 = HEAP32[$5 + 28 >> 2];
                    HEAP32[$4 >> 2] = HEAP32[$5 + 24 >> 2];
                    HEAP32[$4 + 4 >> 2] = $2;
                    $9 = $4 + 12 | 0;
                    break block2385;
                   }
                   $7 = __stack_pointer - 32 | 0;
                   __stack_pointer = $7;
                   $4 = std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__Point3d_float____29($7 + 12 | 0, std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($2, ((HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) / 12 | 0) + 1 | 0), (HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) / 12 | 0, $2);
                   $9 = HEAP32[$4 + 8 >> 2];
                   HEAP32[$9 + 8 >> 2] = HEAP32[$5 + 32 >> 2];
                   $10 = HEAP32[$5 + 28 >> 2];
                   HEAP32[$9 >> 2] = HEAP32[$5 + 24 >> 2];
                   HEAP32[$9 + 4 >> 2] = $10;
                   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 12;
                   std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______swap_out_circular_buffer_28std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float______29($2, $4);
                   $9 = HEAP32[$2 + 4 >> 2];
                   $10 = HEAP32[$4 + 4 >> 2];
                   $2 = HEAP32[$4 + 8 >> 2];
                   while (1) {
                    if (($2 | 0) != ($10 | 0)) {
                     $2 = $2 - 12 | 0;
                     HEAP32[$4 + 8 >> 2] = $2;
                     continue;
                    }
                    break;
                   };
                   $2 = HEAP32[$4 >> 2];
                   if ($2) {
                    emscripten_builtin_free($2)
                   }
                   __stack_pointer = $7 + 32 | 0;
                  }
                  HEAP32[$16 + 4 >> 2] = $9;
                  while (1) {
                   if (($3 | 0) == 96) {
                    break block2183
                   }
                   $7 = ($14 + HEAP32[$1 + 28 >> 2] | 0) + $3 | 0;
                   $2 = $5 + 44 | 0;
                   $10 = $2;
                   $4 = HEAP32[$2 + 4 >> 2];
                   block2488 : {
                    if ($4 >>> 0 < HEAPU32[$2 + 8 >> 2]) {
                     HEAP8[$4 | 0] = HEAPU8[$7 + 16 | 0];
                     $2 = $4 + 1 | 0;
                     break block2488;
                    }
                    $9 = __stack_pointer - 32 | 0;
                    __stack_pointer = $9;
                    $4 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($9 + 12 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($2, (HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0) + 1 | 0), HEAP32[$2 + 4 >> 2] - HEAP32[$2 >> 2] | 0, $2);
                    HEAP8[HEAP32[$4 + 8 >> 2]] = HEAPU8[$7 + 16 | 0];
                    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
                    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29($2, $4);
                    $2 = HEAP32[$2 + 4 >> 2];
                    std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($4);
                    __stack_pointer = $9 + 32 | 0;
                   }
                   HEAP32[$10 + 4 >> 2] = $2;
                   $3 = $3 + 1 | 0;
                   continue;
                  };
                 }
                 $6 = $6 + 1 | 0;
                 continue;
                };
               };
              };
             }
             break block210;
            }
            __stack_pointer = $5 + 80 | 0;
            break __inlined_func$kpmSetRefDataSet$7;
           }
           arLog(0, 3, 8931, 0);
           exit(1);
           wasm2js_trap();
          }
          if (($22 | 0) < 0) {
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($13 + 12 | 0, 26013);
           webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
           std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
           HEAP32[$0 + 8 >> 2] = 0;
           HEAP32[$0 >> 2] = 0;
           HEAP32[$0 + 4 >> 2] = 0;
           break block89;
          }
          kpmDeleteRefDataSet($13 + 40 | 0);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($13 + 12 | 0, 33308);
          webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
          $1 = HEAP32[$13 + 32 >> 2];
          $2 = HEAP32[$13 + 28 >> 2];
          HEAP32[$24 + 268 >> 2] = HEAP32[$24 + 268 >> 2] + ($1 - $2 >> 2);
          HEAP32[$0 + 4 >> 2] = $1;
          HEAP32[$0 >> 2] = $2;
          HEAP32[$0 + 8 >> 2] = HEAP32[$13 + 36 >> 2];
          HEAP32[$13 + 36 >> 2] = 0;
          HEAP32[$13 + 28 >> 2] = 0;
          HEAP32[$13 + 32 >> 2] = 0;
         }
         std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($13 + 28 | 0);
         break block;
        }
        $1 = HEAP32[HEAP32[$11 >> 2] >> 2];
        $3 = HEAP32[$1 + 4 >> 2];
        $1 = HEAP32[HEAP32[$1 >> 2] >> 2];
        HEAP32[$24 + 376 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[$24 + 380 >> 2] = HEAP32[$1 + 8 >> 2];
        $21 = HEAPF32[$1 + 12 >> 2];
        if (Math_fround(Math_abs($21)) < Math_fround(2147483648.0)) {
         $1 = ~~$21
        } else {
         $1 = -2147483648
        }
        HEAP32[$24 + 384 >> 2] = $1;
        $1 = $13 + 12 | 0;
        $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1, 27895);
        webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($5, $3);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($5);
        $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1, 27939);
        webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($3, HEAP32[$24 + 376 >> 2]);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
        $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1, 27873);
        webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($3, HEAP32[$24 + 380 >> 2]);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
        $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1, 27920);
        webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($3, HEAP32[$24 + 384 >> 2]);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
        HEAP32[$24 + 372 >> 2] = HEAP32[$13 + 24 >> 2];
        nftMarker__20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____emplace_back_nftMarker_20const___28nftMarker_20const__29($35, $36);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($1, 33375);
        webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
        $5 = HEAP32[$13 + 24 >> 2] + 1 | 0;
        $3 = HEAP32[$2 >> 2];
        $1 = HEAP32[$2 + 4 >> 2];
        continue;
       };
      }
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($13 + 28 | 0, 33191);
      webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      exit(-1);
      wasm2js_trap();
     }
     __stack_pointer = $13 + 48 | 0;
     return;
    }
    arLog(0, 3, 3486, 0);
    break block75;
   }
   arLog(0, 3, 1733, 0);
  }
  exit(1);
  wasm2js_trap();
 }
 
 function nftMarker__20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____emplace_back_nftMarker_20const___28nftMarker_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $6 = $0;
  $2 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($2 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$2 + 12 >> 2] = $0;
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = $2 + 16 | 0;
    break block;
   }
   $4 = __stack_pointer - 32 | 0;
   __stack_pointer = $4;
   $2 = std____2____split_buffer_nftMarker_2c_20std____2__allocator_nftMarker_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_nftMarker___29($4 + 12 | 0, std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 4) + 1 | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 4, $0);
   $3 = HEAP32[$2 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$3 + 12 >> 2] = $5;
   $5 = HEAP32[$1 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $5;
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 16;
   std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $2);
   $0 = HEAP32[$0 + 4 >> 2];
   std____2____split_buffer_nftMarker_2c_20std____2__allocator_nftMarker________split_buffer_28_29($2);
   __stack_pointer = $4 + 32 | 0;
  }
  HEAP32[$6 + 4 >> 2] = $0;
 }
 
 function setProjectionNearPlane($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = $2 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   (wasm2js_i32$0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0), wasm2js_f64$0 = $1), HEAPF64[wasm2js_i32$0 + 400 >> 3] = wasm2js_f64$0
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function getProjectionNearPlane($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $2 = HEAPF64[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 400 >> 3]
  } else {
   $2 = -1.0
  }
  __stack_pointer = $1 + 16 | 0;
  return +$2;
 }
 
 function setProjectionFarPlane($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = $2 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   (wasm2js_i32$0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0), wasm2js_f64$0 = $1), HEAPF64[wasm2js_i32$0 + 408 >> 3] = wasm2js_f64$0
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function getProjectionFarPlane($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $2 = HEAPF64[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 408 >> 3]
  } else {
   $2 = -1.0
  }
  __stack_pointer = $1 + 16 | 0;
  return +$2;
 }
 
 function setThreshold($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = $2 + 12 | 0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
    break block
   }
   $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0);
   $3 = $1 >>> 0 > 255;
   if ($3) {
    break block
   }
   $0 = HEAP32[$0 + 216 >> 2];
   if (!$0 | $3) {
    $0 = -1
   } else {
    HEAP32[$0 + 16 >> 2] = $1;
    $0 = 0;
   }
   if ($0) {
    break block
   }
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($2, 30378);
   webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, $1);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function getThreshold($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 216 >> 2];
   $2 = $1 + 8 | 0;
   if (!$0 | !$2) {
    $0 = -1
   } else {
    HEAP32[$2 >> 2] = HEAP32[$0 + 16 >> 2];
    $0 = 0;
   }
   $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
  } else {
   $0 = -1
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function setThresholdMode($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = $2 + 12 | 0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
    break block
   }
   if (arSetLabelingThreshMode(HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 216 >> 2], $1)) {
    break block
   }
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($2, 30353);
   webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, $1);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function getThresholdMode($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 216 >> 2];
   $2 = $1 + 8 | 0;
   if (!$0 | !$2) {
    $0 = -1
   } else {
    HEAP32[$2 >> 2] = HEAP32[$0 + 7062388 >> 2];
    $0 = 0;
   }
   $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
  } else {
   $0 = -1
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function setDebugMode($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $2 + 12 | 0)) {
    $1 = -1;
    break block;
   }
   arSetDebugMode(HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($2 + 12 | 0) + 216 >> 2], ($1 | 0) != 0);
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($2, 26851);
   webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($0, $1 ? 33299 : 33303);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function getProcessingImage($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = -1;
  $1 = $2 + 12 | 0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $1)) {
    break block
   }
   $1 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($1) + 216 >> 2];
   if (!$1) {
    break block
   }
   $0 = HEAP32[$1 + 4834148 >> 2];
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function getDebugMode($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 216 >> 2];
   $2 = $1 + 8 | 0;
   if (!(!$0 | !$2)) {
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2]
   }
   $0 = HEAP32[$1 + 8 >> 2];
  } else {
   $0 = -1
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function setImageProcMode($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = $2 + 12 | 0;
  block : {
   if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
    break block
   }
   $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 216 >> 2];
   if (!$0 | $1 >>> 0 > 1) {
    $0 = -1
   } else {
    HEAP32[$0 + 20 >> 2] = $1;
    $0 = 0;
   }
   if ($0) {
    break block
   }
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($2, 33519);
   webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, $1);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function getImageProcMode($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0) + 216 >> 2];
   if ($0) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 20 >> 2];
    $0 = 0;
   } else {
    $0 = -1
   }
   $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
  } else {
   $0 = -1
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function setup($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  $4 = HEAP32[19530];
  HEAP32[19530] = $4 + 1;
  HEAP32[$14 + 12 >> 2] = $4;
  $16 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($14 + 12 | 0);
  $4 = HEAP32[$14 + 12 >> 2];
  HEAP32[$16 + 212 >> 2] = $1;
  HEAP32[$16 + 208 >> 2] = $0;
  HEAP32[$16 >> 2] = $4;
  $0 = Math_imul($0, $1) << 2;
  HEAP32[$16 + 200 >> 2] = $0;
  $0 = operator_20new_28unsigned_20long_29($0);
  HEAP32[$14 >> 2] = 0;
  void_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void__________reset_5babi_ne200100_5d_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______2c_200__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______29($16 + 196 | 0, $0);
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($14);
  $0 = operator_20new_28unsigned_20long_29(HEAP32[$16 + 200 >> 2] / 4 | 0);
  HEAP32[$14 >> 2] = 0;
  void_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void__________reset_5babi_ne200100_5d_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______2c_200__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_______29($16 + 204 | 0, $0);
  std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void___________unique_ptr_5babi_ne200100_5d_28_29($14);
  $0 = HEAP32[$14 + 12 >> 2];
  $11 = __stack_pointer - 48 | 0;
  __stack_pointer = $11;
  HEAP32[$11 + 40 >> 2] = $2;
  HEAP32[$11 + 44 >> 2] = $0;
  block37 : {
   block27 : {
    $0 = $11 + 44 | 0;
    block : {
     if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
      break block
     }
     $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0);
     $1 = $11 + 40 | 0;
     if (!std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78048, $1)) {
      break block
     }
     $4 = $0 + 8 | 0;
     wasm2js_memory_copy($4, std____2__unordered_map_int_2c_20ARParam_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20ARParam_____operator_5b_5d_28int_20const__29($1), 184);
     $2 = HEAP32[$0 + 8 >> 2];
     $1 = HEAP32[$0 + 12 >> 2];
     if (!(($2 | 0) == HEAP32[$0 + 208 >> 2] & ($1 | 0) == HEAP32[$0 + 212 >> 2])) {
      HEAP32[$11 + 20 >> 2] = $1;
      HEAP32[$11 + 16 >> 2] = $2;
      arLog(0, 2, 34526, $11 + 16 | 0);
      $1 = HEAP32[$0 + 208 >> 2];
      $2 = HEAP32[$4 >> 2];
      $10 = HEAP32[$4 + 4 >> 2];
      $13 = HEAP32[$0 + 212 >> 2];
      HEAP32[$4 + 4 >> 2] = $13;
      HEAP32[$4 >> 2] = $1;
      $17 = $4 + 72 | 0;
      $15 = $4 + 40 | 0;
      $6 = $4 + 8 | 0;
      $5 = +($13 | 0) / +($10 | 0);
      $7 = +($1 | 0) / +($2 | 0);
      $1 = 0;
      while (1) {
       if (($1 | 0) != 4) {
        $2 = $1 << 3;
        HEAPF64[$2 + $6 >> 3] = $7 * HEAPF64[$2 + $6 >> 3];
        $10 = $2 + $15 | 0;
        HEAPF64[$10 >> 3] = $5 * HEAPF64[$10 >> 3];
        $2 = $2 + $17 | 0;
        HEAPF64[$2 >> 3] = HEAPF64[$2 >> 3];
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      };
      block6 : {
       block7 : {
        block2 : {
         block3 : {
          block4 : {
           block5 : {
            $2 = HEAP32[$4 + 176 >> 2];
            switch ($2 - 1 | 0) {
            case 0:
             break block2;
            case 1:
             break block3;
            case 2:
             break block4;
            case 3:
             break block5;
            default:
             break block6;
            };
           }
           HEAPF64[$4 + 104 >> 3] = HEAPF64[$4 + 104 >> 3];
           HEAPF64[$4 + 112 >> 3] = HEAPF64[$4 + 112 >> 3];
           HEAPF64[$4 + 120 >> 3] = HEAPF64[$4 + 120 >> 3];
           HEAPF64[$4 + 128 >> 3] = HEAPF64[$4 + 128 >> 3];
           HEAPF64[$4 + 136 >> 3] = $7 * HEAPF64[$4 + 136 >> 3];
           HEAPF64[$4 + 144 >> 3] = $5 * HEAPF64[$4 + 144 >> 3];
           HEAPF64[$4 + 152 >> 3] = $7 * HEAPF64[$4 + 152 >> 3];
           HEAPF64[$4 + 160 >> 3] = $5 * HEAPF64[$4 + 160 >> 3];
           $5 = HEAPF64[$4 + 168 >> 3];
           $1 = 168;
           break block7;
          }
          HEAPF64[$4 + 104 >> 3] = $7 * HEAPF64[$4 + 104 >> 3];
          HEAPF64[$4 + 112 >> 3] = $5 * HEAPF64[$4 + 112 >> 3];
          HEAPF64[$4 + 120 >> 3] = HEAPF64[$4 + 120 >> 3];
          HEAPF64[$4 + 128 >> 3] = HEAPF64[$4 + 128 >> 3];
          HEAPF64[$4 + 136 >> 3] = HEAPF64[$4 + 136 >> 3] / ($7 * $5);
          $5 = HEAPF64[$4 + 144 >> 3] / ($5 * ($7 * $7 * $5));
          $1 = 144;
          break block7;
         }
         HEAPF64[$4 + 104 >> 3] = $7 * HEAPF64[$4 + 104 >> 3];
         HEAPF64[$4 + 112 >> 3] = $5 * HEAPF64[$4 + 112 >> 3];
         HEAPF64[$4 + 120 >> 3] = HEAPF64[$4 + 120 >> 3];
         HEAPF64[$4 + 128 >> 3] = HEAPF64[$4 + 128 >> 3] / ($7 * $5);
         $5 = HEAPF64[$4 + 136 >> 3] / ($5 * ($7 * $7 * $5));
         $1 = 136;
         break block7;
        }
        HEAPF64[$4 + 104 >> 3] = $7 * HEAPF64[$4 + 104 >> 3];
        HEAPF64[$4 + 112 >> 3] = $5 * HEAPF64[$4 + 112 >> 3];
        HEAPF64[$4 + 120 >> 3] = HEAPF64[$4 + 120 >> 3];
        $5 = HEAPF64[$4 + 128 >> 3] / ($7 * $5);
        $1 = 128;
       }
       HEAPF64[$1 + $4 >> 3] = $5;
       HEAP32[$4 + 176 >> 2] = $2;
      }
     }
     arLog(0, 1, 34500, 0);
     $2 = 0;
     $1 = __stack_pointer - 240 | 0;
     __stack_pointer = $1;
     puts(17654);
     $6 = HEAP32[$4 + 4 >> 2];
     HEAP32[$1 + 224 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$1 + 228 >> 2] = $6;
     $6 = __stack_pointer - 16 | 0;
     __stack_pointer = $6;
     $10 = $1 + 224 | 0;
     HEAP32[$6 + 12 >> 2] = $10;
     vfiprintf(74640, 2589, $10);
     __stack_pointer = $6 + 16 | 0;
     block13 : {
      block12 : {
       switch (HEAP32[$4 + 176 >> 2] - 1 | 0) {
       case 3:
        $5 = HEAPF64[$4 + 104 >> 3];
        $7 = HEAPF64[$4 + 112 >> 3];
        $12 = HEAPF64[$4 + 120 >> 3];
        HEAPF64[$1 + 88 >> 3] = HEAPF64[$4 + 128 >> 3];
        HEAPF64[$1 + 80 >> 3] = $12;
        HEAPF64[$1 + 72 >> 3] = $7;
        HEAPF64[$1 + 64 >> 3] = $5;
        __small_printf(3198, $1 - -64 | 0);
        $5 = HEAPF64[$4 + 136 >> 3];
        $7 = HEAPF64[$4 + 144 >> 3];
        $12 = HEAPF64[$4 + 152 >> 3];
        $8 = HEAPF64[$4 + 160 >> 3];
        HEAPF64[$1 + 48 >> 3] = HEAPF64[$4 + 168 >> 3];
        HEAPF64[$1 + 40 >> 3] = $8;
        HEAPF64[$1 + 32 >> 3] = $12;
        HEAPF64[$1 + 24 >> 3] = $7;
        HEAPF64[$1 + 16 >> 3] = $5;
        __small_printf(3738, $1 + 16 | 0);
        break block13;
       case 2:
        $5 = HEAPF64[$4 + 104 >> 3];
        $7 = HEAPF64[$4 + 112 >> 3];
        $12 = HEAPF64[$4 + 120 >> 3];
        $8 = HEAPF64[$4 + 128 >> 3];
        $9 = HEAPF64[$4 + 136 >> 3];
        HEAPF64[$1 + 136 >> 3] = HEAPF64[$4 + 144 >> 3];
        HEAPF64[$1 + 128 >> 3] = $9;
        HEAPF64[$1 + 120 >> 3] = $8;
        HEAPF64[$1 + 112 >> 3] = $12;
        HEAPF64[$1 + 104 >> 3] = $7;
        HEAPF64[$1 + 96 >> 3] = $5;
        __small_printf(4338, $1 + 96 | 0);
        break block13;
       case 1:
        $5 = HEAPF64[$4 + 104 >> 3];
        $7 = HEAPF64[$4 + 112 >> 3];
        $12 = HEAPF64[$4 + 120 >> 3];
        $8 = HEAPF64[$4 + 128 >> 3];
        HEAPF64[$1 + 176 >> 3] = HEAPF64[$4 + 136 >> 3];
        HEAPF64[$1 + 168 >> 3] = $8;
        HEAPF64[$1 + 160 >> 3] = $12;
        HEAPF64[$1 + 152 >> 3] = $7;
        HEAPF64[$1 + 144 >> 3] = $5;
        __small_printf(5140, $1 + 144 | 0);
        break block13;
       case 0:
        $5 = HEAPF64[$4 + 104 >> 3];
        $7 = HEAPF64[$4 + 112 >> 3];
        $12 = HEAPF64[$4 + 120 >> 3];
        HEAPF64[$1 + 216 >> 3] = HEAPF64[$4 + 128 >> 3];
        HEAPF64[$1 + 208 >> 3] = $12;
        HEAPF64[$1 + 200 >> 3] = $7;
        HEAPF64[$1 + 192 >> 3] = $5;
        __small_printf(5906, $1 + 192 | 0);
        break block13;
       default:
        break block12;
       };
      }
      puts(17608);
     }
     $10 = $4 + 8 | 0;
     while (1) {
      if (($2 | 0) != 3) {
       $13 = $10 + ($2 << 5) | 0;
       $6 = 0;
       while (1) {
        if (($6 | 0) != 4) {
         HEAPF64[$1 >> 3] = HEAPF64[$13 + ($6 << 3) >> 3];
         __small_printf(7434, $1);
         $6 = $6 + 1 | 0;
         continue;
        }
        break;
       };
       $6 = HEAP32[18679];
       block16 : {
        if (!(($6 | 0) >= 0 & (!$6 | HEAP32[19625] != ($6 & 1073741823)))) {
         block15 : {
          if (HEAP32[18680] == 10) {
           break block15
          }
          $6 = HEAP32[18665];
          if (($6 | 0) == HEAP32[18664]) {
           break block15
          }
          HEAP32[18665] = $6 + 1;
          HEAP8[$6 | 0] = 10;
          break block16;
         }
         __overflow(74640, 10);
         break block16;
        }
        $6 = HEAP32[18679];
        HEAP32[18679] = $6 ? $6 : 1073741823;
        block18 : {
         block17 : {
          if (HEAP32[18680] == 10) {
           break block17
          }
          $6 = HEAP32[18665];
          if (($6 | 0) == HEAP32[18664]) {
           break block17
          }
          HEAP32[18665] = $6 + 1;
          HEAP8[$6 | 0] = 10;
          break block18;
         }
         __overflow(74640, 10);
        }
        HEAP32[18679] = 0;
       }
       $2 = $2 + 1 | 0;
       continue;
      }
      break;
     };
     puts(17654);
     __stack_pointer = $1 + 240 | 0;
     deleteHandle($0);
     $17 = 0;
     $1 = __stack_pointer - 32 | 0;
     __stack_pointer = $1;
     block26 : {
      $2 = emscripten_builtin_malloc(208);
      if ($2) {
       block19 : {
        wasm2js_memory_copy($2, $4, 184);
        $6 = HEAP32[$4 >> 2] + 30 | 0;
        HEAP32[$2 + 192 >> 2] = $6;
        $10 = HEAP32[$4 + 4 >> 2];
        HEAP32[$2 + 204 >> 2] = 15;
        HEAP32[$2 + 200 >> 2] = 15;
        $15 = $10 + 30 | 0;
        HEAP32[$2 + 196 >> 2] = $15;
        $13 = Math_imul($6, $15) << 3;
        $10 = emscripten_builtin_malloc($13);
        HEAP32[$2 + 184 >> 2] = $10;
        if (!$10) {
         break block19
        }
        $13 = emscripten_builtin_malloc($13);
        HEAP32[$2 + 188 >> 2] = $13;
        if (!$13) {
         break block19
        }
        $26 = ($15 | 0) > 0 ? $15 : 0;
        $27 = ($6 | 0) > 0 ? $6 : 0;
        $6 = $4 + 104 | 0;
        $20 = HEAP32[$4 + 176 >> 2];
        while (1) {
         if (($17 | 0) != ($26 | 0)) {
          $12 = +Math_fround($17 - 15 | 0);
          $15 = 0;
          while (1) {
           if (($15 | 0) != ($27 | 0)) {
            $21 = +Math_fround($15 - 15 | 0);
            $5 = $21;
            block24 : {
             block25 : {
              block20 : {
               switch ($20 - 1 | 0) {
               case 3:
                $22 = HEAPF64[$6 + 48 >> 3];
                $7 = HEAPF64[$6 + 64 >> 3];
                $23 = HEAPF64[$6 + 32 >> 3];
                $5 = ($5 - $22) * $7 / $23;
                $24 = HEAPF64[$6 + 56 >> 3];
                $25 = HEAPF64[$6 + 40 >> 3];
                $7 = ($12 - $24) * $7 / $25;
                $8 = $5 * $5 + $7 * $7;
                $9 = HEAPF64[$6 + 8 >> 3] * $8 * $8 + (HEAPF64[$6 >> 3] * $8 + 1.0);
                $18 = HEAPF64[$6 + 24 >> 3];
                $19 = HEAPF64[$6 + 16 >> 3];
                HEAPF64[$1 + 8 >> 3] = ($18 * (($5 + $5) * $5 + $8) + ($5 * $9 + $7 * (($19 + $19) * $5))) * $23 + $22;
                $5 = $24 + $25 * (($18 + $18) * $5 * $7 + ($7 * $9 + $19 * (($7 + $7) * $7 + $8)));
                break block25;
               case 2:
                $9 = HEAPF64[$6 + 16 >> 3];
                $7 = $9 * ($12 - HEAPF64[$6 + 8 >> 3]);
                $8 = HEAPF64[$6 >> 3];
                $5 = ($5 - $8) * $9;
                if (!($5 != 0.0 | $7 != 0.0)) {
                 HEAPF64[$1 + 8 >> 3] = $8;
                 $5 = HEAPF64[$6 + 8 >> 3];
                 break block25;
                }
                $9 = $5;
                $5 = $5 * $5 + $7 * $7;
                $5 = HEAPF64[$6 + 32 >> 3] / -1.0e8 * $5 + 1.0 + HEAPF64[$6 + 40 >> 3] / -1.0e8 / 1.0e5 * $5 * $5;
                HEAPF64[$1 + 8 >> 3] = $9 * $5 * HEAPF64[$6 + 24 >> 3] + $8;
                $5 = $7 * $5 + HEAPF64[$6 + 8 >> 3];
                break block25;
               case 1:
                $9 = HEAPF64[$6 + 16 >> 3];
                $7 = $9 * ($12 - HEAPF64[$6 + 8 >> 3]);
                $8 = HEAPF64[$6 >> 3];
                $5 = ($5 - $8) * $9;
                if (!($5 != 0.0 | $7 != 0.0)) {
                 HEAPF64[$1 + 8 >> 3] = $8;
                 $5 = HEAPF64[$6 + 8 >> 3];
                 break block25;
                }
                $9 = $5;
                $5 = $5 * $5 + $7 * $7;
                $5 = HEAPF64[$6 + 24 >> 3] / -1.0e8 * $5 + 1.0 + HEAPF64[$6 + 32 >> 3] / -1.0e8 / 1.0e5 * $5 * $5;
                HEAPF64[$1 + 8 >> 3] = $9 * $5 + $8;
                $5 = $7 * $5 + HEAPF64[$6 + 8 >> 3];
                break block25;
               case 0:
                break block20;
               default:
                break block24;
               };
              }
              $9 = HEAPF64[$6 + 16 >> 3];
              $7 = $9 * ($12 - HEAPF64[$6 + 8 >> 3]);
              $8 = HEAPF64[$6 >> 3];
              $5 = ($5 - $8) * $9;
              if (!($5 != 0.0 | $7 != 0.0)) {
               HEAPF64[$1 + 8 >> 3] = $8;
               $5 = HEAPF64[$6 + 8 >> 3];
               break block25;
              }
              $9 = $5;
              $5 = HEAPF64[$6 + 24 >> 3] / -1.0e8 * ($5 * $5 + $7 * $7) + 1.0;
              HEAPF64[$1 + 8 >> 3] = $9 * $5 + $8;
              $5 = $7 * $5 + HEAPF64[$6 + 8 >> 3];
             }
             HEAPF64[$1 >> 3] = $5;
            }
            HEAPF32[$10 >> 2] = HEAPF64[$1 + 8 >> 3];
            HEAPF32[$10 + 4 >> 2] = HEAPF64[$1 >> 3];
            arParamObserv2Ideal($6, $21, $12, $1 + 24 | 0, $1 + 16 | 0, $20);
            HEAPF32[$13 >> 2] = HEAPF64[$1 + 24 >> 3];
            HEAPF32[$13 + 4 >> 2] = HEAPF64[$1 + 16 >> 3];
            $15 = $15 + 1 | 0;
            $13 = $13 + 8 | 0;
            $10 = $10 + 8 | 0;
            continue;
           }
           break;
          };
          $17 = $17 + 1 | 0;
          continue;
         }
         break;
        };
        __stack_pointer = $1 + 32 | 0;
        $1 = $2;
        break block26;
       }
      }
      break block27;
     }
     HEAP32[$0 + 192 >> 2] = $1;
     if (!$1) {
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($11 + 28 | 0, 33338);
      webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      break block;
     }
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$11 + 4 >> 2] = $2;
     arLog(0, 1, 34253, $11);
     $2 = HEAP32[$0 + 192 >> 2];
     block29 : {
      $1 = emscripten_builtin_malloc(7062432);
      if ($1) {
       block28 : {
        HEAP32[$1 + 7062408 >> 2] = 0;
        HEAP32[$1 + 4834148 >> 2] = 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = -1;
        HEAP32[$1 + 7062424 >> 2] = 3;
        HEAP32[$1 + 7062416 >> 2] = 0;
        HEAP32[$1 + 7062420 >> 2] = 1071644672;
        HEAP32[$1 + 24 >> 2] = 0;
        HEAP32[$1 + 28 >> 2] = 2;
        HEAP32[$1 + 16 >> 2] = 100;
        HEAP32[$1 + 20 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        HEAP32[$1 + 12 >> 2] = 1;
        HEAP32[$1 + 32 >> 2] = $2;
        $6 = HEAP32[$2 >> 2];
        HEAP32[$1 + 36 >> 2] = $6;
        $2 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 + 4834152 >> 2] = 0;
        HEAP32[$1 + 15408 >> 2] = 0;
        HEAP32[$1 + 44 >> 2] = 0;
        HEAP32[$1 + 40 >> 2] = $2;
        HEAP32[$1 + 4818296 >> 2] = 0;
        $2 = emscripten_builtin_malloc(Math_imul($2, $6) << 1);
        HEAP32[$1 + 4834144 >> 2] = $2;
        if (!$2) {
         break block28
        }
        HEAP32[$1 + 7062384 >> 2] = 0;
        arSetDebugMode($1, 0);
        HEAP32[$1 + 7062388 >> 2] = -1;
        arSetLabelingThreshMode($1, 0);
        HEAP32[$1 + 7062392 >> 2] = 7;
        HEAP32[$1 + 7062396 >> 2] = 0;
        break block29;
       }
      }
      break block27;
     }
     HEAP32[$0 + 216 >> 2] = $1;
     if (!$1) {
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($11 + 28 | 0, 33420);
      webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      break block;
     }
     $6 = __stack_pointer - 16 | 0;
     __stack_pointer = $6;
     $2 = HEAP32[$0 + 552 >> 2];
     block30 : {
      if (!$1 | ($2 | 0) == HEAP32[$1 + 4 >> 2]) {
       break block30
      }
      block35 : {
       block34 : {
        block33 : {
         block32 : {
          block31 : {
           if ($2 >>> 0 <= 14) {
            if (1 << $2 & 4063) {
             break block31
            }
            HEAP32[$1 + 4 >> 2] = $2;
            (wasm2js_i32$0 = $1, wasm2js_i32$1 = arUtilGetPixelSize($2)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
            switch (HEAP32[$1 + 24 >> 2]) {
            case 0:
             break block32;
            case 3:
             break block33;
            default:
             break block30;
            };
           }
           HEAP32[$6 >> 2] = $2;
           arLog(0, 3, 7587, $6);
           break block30;
          }
          HEAP32[$1 + 4 >> 2] = $2;
          (wasm2js_i32$0 = $1, wasm2js_i32$1 = arUtilGetPixelSize($2)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          switch (HEAP32[$1 + 24 >> 2] - 1 | 0) {
          case 0:
           break block34;
          case 3:
           break block35;
          default:
           break block30;
          };
         }
         HEAP32[$1 + 24 >> 2] = 1;
         break block30;
        }
        HEAP32[$1 + 24 >> 2] = 4;
        break block30;
       }
       HEAP32[$1 + 24 >> 2] = 4;
       break block30;
      }
      HEAP32[$1 + 24 >> 2] = 3;
     }
     __stack_pointer = $6 + 16 | 0;
     block36 : {
      $1 = emscripten_builtin_malloc(4);
      if ($1) {
       $2 = icpCreateHandle($4 + 8 | 0);
       HEAP32[$1 >> 2] = $2;
       if (!$2) {
        emscripten_builtin_free($1);
        $1 = 0;
       }
       break block36;
      }
      break block27;
     }
     HEAP32[$0 + 220 >> 2] = $1;
     if (!$1) {
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($11 + 28 | 0, 28642);
      webarkitLOGe_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
      break block;
     }
     arglCameraFrustumRH(HEAP32[$0 + 192 >> 2], HEAPF64[$0 + 400 >> 3], HEAPF64[$0 + 408 >> 3], $0 + 424 | 0);
    }
    __stack_pointer = $11 + 48 | 0;
    break block37;
   }
   arLog(0, 3, 1733, 0);
   exit(1);
   wasm2js_trap();
  }
  HEAP8[$16 + 236 | 0] = $3;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($14, 30579);
  webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, HEAP32[$16 + 200 >> 2]);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($14, 26997);
  webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($0, $3 ? 28276 : 28290);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  __stack_pointer = $14 + 16 | 0;
  return HEAP32[$16 >> 2];
 }
 
 function setFiltering($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = $2 + 12 | 0;
  if (std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96____2c_20std____2__equal_to_int__2c_20std____2__hash_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20std____2__shared_ptr_vision__Keyframe_96_______find_int__28int_20const__29(78028, $0)) {
   (wasm2js_i32$0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController_____operator_5b_5d_28int_20const__29($0), wasm2js_i32$1 = $1), HEAP8[wasm2js_i32$0 + 236 | 0] = wasm2js_i32$1;
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_ne200100_5d_0__28char_20const__29($2, 26957);
   webarkitLOGi_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20char_20const__29($0, $1 ? 28276 : 28290);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_constant_bindings_28_29() {
  var $0 = 0, $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  if (!HEAPU8[78132]) {
   HEAP8[78132] = 1;
   _embind_register_optional(34592, 35480);
  }
  _embind_register_class(35552, 35648, 35752, 0, 35856, 66, 35859, 0, 35859, 0, 25601, 35861, 67);
  _embind_register_class_constructor(35552, 1, 35864, 35868, 110, 68);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 69;
  _embind_register_class_function(35552, 27825, 3, 35872, 35884, 111, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 70;
  _embind_register_class_function(35552, 28249, 4, 35904, 35920, 112, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 71;
  _embind_register_class_function(35552, 28271, 2, 35928, 35936, 113, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 72;
  _embind_register_class_function(35552, 26009, 3, 35976, 35988, 114, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 73;
  _embind_register_class_function(35552, 26005, 4, 36e3, 36016, 115, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  if (!HEAPU8[78144]) {
   HEAP8[78144] = 1;
   _embind_register_optional(36024, 73768);
  }
  _embind_register_class(36420, 36464, 36520, 0, 36574, 74, 35859, 0, 35859, 0, 25593, 36577, 75);
  _embind_register_class_constructor(36420, 1, 36580, 36584, 116, 76);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 77;
  _embind_register_class_function(36420, 27825, 3, 36588, 36600, 117, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 78;
  _embind_register_class_function(36420, 28249, 4, 36608, 36624, 118, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 79;
  _embind_register_class_function(36420, 28271, 2, 36632, 36640, 119, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 80;
  _embind_register_class_function(36420, 26009, 3, 36652, 36664, 120, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 81;
  _embind_register_class_function(36420, 26005, 4, 36672, 36688, 121, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  if (!HEAPU8[78156]) {
   HEAP8[78156] = 1;
   _embind_register_optional(36696, 37148);
  }
  _embind_register_class(37168, 37224, 37288, 0, 37353, 82, 35859, 0, 35859, 0, 26491, 37356, 83);
  _embind_register_class_constructor(37168, 1, 37360, 37364, 122, 84);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 85;
  _embind_register_class_function(37168, 27825, 3, 37368, 37380, 123, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 86;
  _embind_register_class_function(37168, 28249, 4, 37392, 37408, 124, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 87;
  _embind_register_class_function(37168, 28271, 2, 37416, 37424, 125, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 88;
  _embind_register_class_function(37168, 26009, 3, 37436, 37448, 126, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 89;
  _embind_register_class_function(37168, 26005, 4, 37456, 37472, 127, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0 + 12 | 0) | 0, 0, 0, 0);
  __stack_pointer = $0 + 16 | 0;
  _embind_register_function(27287, 5, 37488, 37508, 90, 38, 0, 0);
  _embind_register_function(28169, 3, 37516, 37528, 91, 39, 0, 0);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(27408, 40);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(33175, 41);
  _embind_register_function(26502, 3, 37548, 37560, 93, 42, 0, 0);
  _embind_register_function(31168, 3, 37568, 37580, 94, 43, 0, 0);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(26588, 44);
  _embind_register_function(31034, 2, 37588, 37596, 95, 45, 0, 0);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(27149, 46);
  _embind_register_function(27136, 3, 37600, 37612, 96, 47, 0, 0);
  _embind_register_function(31023, 3, 37620, 37632, 97, 48, 0, 0);
  _embind_register_value_object(37148, 27126, 37637, 98, 37639, 99);
  $0 = $1 + 8 | 0;
  emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29($0, 29391, 0), 28027, 4), 25747, 8), 27869, 12);
  _embind_finalize_value_object(37148);
  _embind_register_function(29165, 3, 37652, 37664, 102, 49, 0, 0);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(29178, 50);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(28822, 51);
  _embind_register_function(27697, 2, 37672, 37680, 103, 52, 0, 0);
  _embind_register_function(27709, 1, 37684, 37688, 104, 53, 0, 0);
  void_20emscripten__function_void_2c_20int_2c_20double__28char_20const__2c_20void_20_28__29_28int_2c_20double_29_29(28348, 54);
  void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29(28371, 55);
  void_20emscripten__function_void_2c_20int_2c_20double__28char_20const__2c_20void_20_28__29_28int_2c_20double_29_29(28394, 56);
  void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29(28416, 57);
  void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(29191, 58);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(29208, 59);
  void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(29337, 60);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(29350, 61);
  void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(29225, 62);
  void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(29242, 63);
  _embind_register_function(26574, 2, 37744, 37752, 108, 64, 0, 0);
  _embind_register_function(31009, 5, 37760, 37780, 109, 65, 0, 0);
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32156, 74468);
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32185, 74476);
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31277, 74472);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31977, $0);
  HEAP32[$1 + 8 >> 2] = 1;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31994, $0);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32062, $0);
  HEAP32[$1 + 8 >> 2] = 100;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31703, $0);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32010, $0);
  HEAP32[$1 + 8 >> 2] = 1;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32036, $0);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32084, $0);
  HEAP32[$1 + 8 >> 2] = 5;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31150, $0);
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 1071644672;
  _embind_register_constant(31682, 73852, +HEAPF64[$0 >> 3]);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31730, $0);
  HEAP32[$1 + 8 >> 2] = 1;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31377, $0);
  HEAP32[$1 + 8 >> 2] = 2;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31417, $0);
  HEAP32[$1 + 8 >> 2] = 3;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31319, $0);
  HEAP32[$1 + 8 >> 2] = 4;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31395, $0);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31600, $0);
  HEAP32[$1 + 8 >> 2] = 1;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31486, $0);
  HEAP32[$1 + 8 >> 2] = 2;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31073, $0);
  HEAP32[$1 + 8 >> 2] = 3;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31906, $0);
  HEAP32[$1 + 8 >> 2] = 0;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31944, $0);
  HEAP32[$1 + 8 >> 2] = 1;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31435, $0);
  HEAP32[$1 + 8 >> 2] = 2;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32265, $0);
  HEAP32[$1 + 8 >> 2] = 3;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31107, $0);
  HEAP32[$1 + 8 >> 2] = 4;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32213, $0);
  HEAP32[$1 + 8 >> 2] = 5;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31549, $0);
  HEAP32[$1 + 8 >> 2] = 6;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(32111, $0);
  HEAP32[$1 + 8 >> 2] = 7;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31338, $0);
  HEAP32[$1 + 8 >> 2] = 8;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31631, $0);
  HEAP32[$1 + 8 >> 2] = 9;
  void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(31214, $0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29($0, $1) {
  _embind_register_function($0 | 0, 2, 37536, 37544, 92, $1 | 0, 0, 0);
 }
 
 function emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $2;
  $2 = $1;
  $1 = $3 + 12 | 0;
  _embind_register_value_object_field(37148, $2 | 0, 73768, 37642, 100, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($1) | 0, 73768, 37646, 101, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($1) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function void_20emscripten__function_void_2c_20int_2c_20double__28char_20const__2c_20void_20_28__29_28int_2c_20double_29_29($0, $1) {
  _embind_register_function($0 | 0, 3, 37692, 37704, 105, $1 | 0, 0, 0);
 }
 
 function void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29($0, $1) {
  _embind_register_function($0 | 0, 2, 37712, 37720, 106, $1 | 0, 0, 0);
 }
 
 function void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29($0, $1) {
  _embind_register_function($0 | 0, 3, 37724, 37736, 107, $1 | 0, 0, 0);
 }
 
 function void_20emscripten__constant_int__28char_20const__2c_20int_20const__29($0, $1) {
  _embind_register_constant($0 | 0, 73768, +HEAP32[$1 >> 2]);
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29($0) {
  $0 = $0 | 0;
  return 35552;
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ($0) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   HEAP32[$1 + 12 >> 2] = $0;
   $2 = HEAP32[$1 + 12 >> 2];
   if (HEAP32[$2 >> 2]) {
    std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________base_destruct_at_end_5babi_ne200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($2, HEAP32[$2 >> 2]);
    emscripten_builtin_free(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
   }
   __stack_pointer = $1 + 16 | 0;
  }
  emscripten_builtin_free($0);
 }
 
 function std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______20emscripten__internal__operator_new_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28_29() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(12);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______push_back_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = $0;
  $2 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($2 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    $0 = $2 + 12 | 0;
    break block;
   }
   $3 = __stack_pointer - 32 | 0;
   __stack_pointer = $3;
   $2 = std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__Point3d_float____29($3 + 12 | 0, std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, ((HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0) + 1 | 0), (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0, $0);
   $4 = HEAP32[$2 + 8 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 12;
   std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______swap_out_circular_buffer_28std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float______29($0, $2);
   $0 = HEAP32[$0 + 4 >> 2];
   std____2____split_buffer_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__________split_buffer_28_29($2);
   __stack_pointer = $3 + 32 | 0;
  }
  HEAP32[$5 + 4 >> 2] = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______resize_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  block1 : {
   $4 = HEAP32[$0 >> 2];
   $3 = (HEAP32[$0 + 4 >> 2] - $4 | 0) / 12 | 0;
   if ($3 >>> 0 < $1 >>> 0) {
    $5 = __stack_pointer - 32 | 0;
    __stack_pointer = $5;
    $3 = $1 - $3 | 0;
    $4 = HEAP32[$0 + 4 >> 2];
    block : {
     if ($3 >>> 0 <= (HEAP32[$0 + 8 >> 2] - $4 | 0) / 12 >>> 0) {
      $1 = HEAP32[$0 + 4 >> 2];
      $3 = $1 + Math_imul($3, 12) | 0;
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        HEAP32[$0 + 4 >> 2] = $3
       } else {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1, $2) + 12 | 0;
        continue;
       }
       break;
      };
      break block;
     }
     $4 = std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_vision__Point3d_float____29($5 + 12 | 0, std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $3 + (($4 - HEAP32[$0 >> 2] | 0) / 12 | 0) | 0), (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0, $0);
     $1 = HEAP32[$4 + 8 >> 2];
     $3 = $1 + Math_imul($3, 12) | 0;
     while (1) {
      if (($1 | 0) != ($3 | 0)) {
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($1, $2) + 12 | 0;
       continue;
      }
      break;
     };
     HEAP32[$4 + 8 >> 2] = $3;
     std____2__vector_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float_______swap_out_circular_buffer_28std____2____split_buffer_vision__Point3d_float__2c_20std____2__allocator_vision__Point3d_float______29($0, $4);
     std____2____split_buffer_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__________split_buffer_28_29($4);
    }
    __stack_pointer = $5 + 32 | 0;
    break block1;
   }
   if ($1 >>> 0 < $3 >>> 0) {
    std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________base_destruct_at_end_5babi_ne200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0, $4 + Math_imul($1, 12) | 0)
   }
  }
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______size_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29($0) {
  $0 = $0 | 0;
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______get_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$1 >> 2];
  if (($3 - $1 | 0) / 12 >>> 0 > $2 >>> 0) {
   (wasm2js_i32$0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1 + Math_imul($2, 12) | 0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 12 | 0] = wasm2js_i32$1;
   return;
  }
  HEAP8[$0 + 12 | 0] = 0;
  HEAP8[$0 | 0] = 0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______set_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $0 = HEAP32[$0 >> 2] + Math_imul($1, 12) | 0;
  if (($0 | 0) != ($2 | 0)) {
   block : {
    $1 = HEAP8[$2 + 11 | 0];
    if (HEAP8[$0 + 11 | 0] >= 0) {
     if (($1 | 0) >= 0) {
      HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      $1 = HEAP32[$2 + 4 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$0 + 4 >> 2] = $1;
      break block;
     }
     $3 = HEAP32[$2 >> 2];
     $1 = HEAP32[$2 + 4 >> 2];
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0);
     block1 : {
      if ($1 >>> 0 <= 10) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $1);
       char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($0, $3, $1);
       HEAP8[$2 + 15 | 0] = 0;
       std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0 + $1 | 0, $2 + 15 | 0);
       break block1;
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, 10, $1 - 10 | 0, $4, 0, $4, $1, $3);
     }
     __stack_pointer = $2 + 16 | 0;
     break block;
    }
    $3 = ($1 | 0) < 0;
    $4 = $3 ? HEAP32[$2 >> 2] : $2;
    $1 = $3 ? HEAP32[$2 + 4 >> 2] : $1;
    $2 = __stack_pointer - 16 | 0;
    __stack_pointer = $2;
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0);
    $5 = HEAP32[$0 + 4 >> 2];
    block2 : {
     if ($1 >>> 0 < $3 >>> 0) {
      $3 = HEAP32[$0 >> 2];
      HEAP32[$0 + 4 >> 2] = $1;
      char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($3, $4, $1);
      HEAP8[$2 + 15 | 0] = 0;
      std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($1 + $3 | 0, $2 + 15 | 0);
      break block2;
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3 - 1 | 0, ($1 - $3 | 0) + 1 | 0, $5, 0, $5, $1, $4);
    }
    __stack_pointer = $2 + 16 | 0;
   }
  }
  return 1;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
  $0 = $0 | 0;
  return 36420;
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
  $0 = $0 | 0;
  if ($0) {
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($0)
  }
  emscripten_builtin_free($0);
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____push_back_28std____2__vector_int_2c_20std____2__allocator_int____2c_20int___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  int__20std____2__vector_int_2c_20std____2__allocator_int____emplace_back_int_20const___28int_20const__29($0, $1);
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____resize_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_2c_20int_20const__29($0, $1, $2);
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____get_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$1 >> 2];
  block : {
   if ($3 - $1 >> 2 >>> 0 > $2 >>> 0) {
    HEAP32[$0 >> 2] = HEAP32[$1 + ($2 << 2) >> 2];
    $1 = 1;
    break block;
   }
   HEAP8[$0 | 0] = 0;
   $1 = 0;
  }
  HEAP8[$0 + 4 | 0] = $1;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____set_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 >> 2];
  return 1;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____29($0) {
  $0 = $0 | 0;
  return 37168;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____push_back_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  nftMarker__20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____emplace_back_nftMarker_20const___28nftMarker_20const__29($0, $1);
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____resize_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  block1 : {
   $3 = HEAP32[$0 >> 2];
   $4 = HEAP32[$0 + 4 >> 2] - $3 >> 4;
   if ($4 >>> 0 < $1 >>> 0) {
    $5 = __stack_pointer - 32 | 0;
    __stack_pointer = $5;
    $4 = $1 - $4 | 0;
    $3 = HEAP32[$0 + 4 >> 2];
    block : {
     if ($4 >>> 0 <= HEAP32[$0 + 8 >> 2] - $3 >> 4 >>> 0) {
      $1 = HEAP32[$0 + 4 >> 2];
      $4 = $1 + ($4 << 4) | 0;
      while (1) {
       if (($1 | 0) == ($4 | 0)) {
        HEAP32[$0 + 4 >> 2] = $4
       } else {
        $3 = HEAP32[$2 + 12 >> 2];
        HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = $3;
        $3 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        HEAP32[$1 + 4 >> 2] = $3;
        $1 = $1 + 16 | 0;
        continue;
       }
       break;
      };
      break block;
     }
     $3 = std____2____split_buffer_nftMarker_2c_20std____2__allocator_nftMarker_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_nftMarker___29($5 + 12 | 0, std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $4 + ($3 - HEAP32[$0 >> 2] >> 4) | 0), HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 4, $0);
     $1 = HEAP32[$3 + 8 >> 2];
     $4 = $1 + ($4 << 4) | 0;
     while (1) {
      if (($1 | 0) != ($4 | 0)) {
       $6 = HEAP32[$2 + 12 >> 2];
       HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $6;
       $6 = HEAP32[$2 + 4 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$1 + 4 >> 2] = $6;
       $1 = $1 + 16 | 0;
       continue;
      }
      break;
     };
     HEAP32[$3 + 8 >> 2] = $4;
     std____2__vector_float_2c_20std____2__allocator_float______swap_out_circular_buffer_28std____2____split_buffer_float_2c_20std____2__allocator_float_____29($0, $3);
     std____2____split_buffer_nftMarker_2c_20std____2__allocator_nftMarker________split_buffer_28_29($3);
    }
    __stack_pointer = $5 + 32 | 0;
    break block1;
   }
   if ($1 >>> 0 < $4 >>> 0) {
    HEAP32[$0 + 4 >> 2] = $3 + ($1 << 4)
   }
  }
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____size_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 4;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____get_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$1 >> 2];
  block : {
   if ($3 - $1 >> 4 >>> 0 > $2 >>> 0) {
    $1 = $1 + ($2 << 4) | 0;
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $2;
    $2 = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2;
    $1 = 1;
    break block;
   }
   HEAP8[$0 | 0] = 0;
   $1 = 0;
  }
  HEAP8[$0 + 16 | 0] = $1;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____set_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $0 = HEAP32[$0 >> 2] + ($1 << 4) | 0;
  $1 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  return 1;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int_2c_20int_2c_20int_2c_20bool___invoke_28int_20_28__29_28int_2c_20int_2c_20int_2c_20bool_29_2c_20int_2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int_2c_20bool___invoke_28void_20_28__29_28int_2c_20bool_29_2c_20int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int___invoke_28int_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[$0 | 0]($1) | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20std____2__vector_int_2c_20std____2__allocator_int___2c_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________invoke_28std____2__vector_int_2c_20std____2__allocator_int___20_28__29_28int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29_2c_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $4 = $6 + 4 | 0;
  FUNCTION_TABLE[$0 | 0]($4, $1, $2);
  $0 = operator_20new_28unsigned_20long_29(12);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $2 = HEAP32[$4 >> 2];
  $7 = HEAP32[$4 + 4 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 8 >> 2] = $0;
  $5 = $7 - $2 | 0;
  $3 = $5 >> 2;
  if ($3) {
   std____2__vector_int_2c_20std____2__allocator_int______vallocate_5babi_ne200100_5d_28unsigned_20long_29($0, $3);
   $3 = HEAP32[$0 + 4 >> 2];
   if (!(!$5 | ($2 | 0) == ($7 | 0))) {
    wasm2js_memory_copy($3, $2, $5)
   }
   HEAP32[$0 + 4 >> 2] = $3 + $5;
  }
  HEAP8[$1 + 12 | 0] = 1;
  std____2____exception_guard_exceptions_std____2__vector_vision__FeaturePoint_2c_20std____2__allocator_vision__FeaturePoint______destroy_vector______exception_guard_exceptions_5babi_ne200100_5d_28_29($1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____vector_5babi_ne200100_5d_28_29($4);
  __stack_pointer = $6 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = $3 + 20 | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($4, $1);
  $1 = $3 + 8 | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($1, $2);
  $0 = FUNCTION_TABLE[$0 | 0]($4, $1) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($4);
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 4 | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($3, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($3) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20emscripten__val_2c_20int_2c_20int___invoke_28emscripten__val_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = $3 + 8 | 0;
  FUNCTION_TABLE[$0 | 0]($4, $1, $2);
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 12 >> 2] = 0;
  emscripten__val___val_28_29($4);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20nftMarker_2c_20int_2c_20int___invoke_28nftMarker_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  FUNCTION_TABLE[$0 | 0]($3, $1, $2);
  $0 = nftMarker__20emscripten__internal__GenericBindingType_nftMarker___toWireType_nftMarker___28nftMarker__2c_20emscripten__internal__rvp__default_tag_29($3);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function nftMarker__20emscripten__internal__raw_constructor_nftMarker__28_29() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(16);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function int_20emscripten__internal__MemberAccess_nftMarker_2c_20int___getWire_nftMarker_2c_20emscripten__internal__rvp__default_tag__28int_20nftMarker____20const__2c_20nftMarker__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 >> 2] + $1 >> 2];
 }
 
 function int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0) {
  var $1 = 0;
  $1 = operator_20new_28unsigned_20long_29(4);
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  return $1;
 }
 
 function void_20emscripten__internal__MemberAccess_nftMarker_2c_20int___setWire_nftMarker__28int_20nftMarker____20const__2c_20nftMarker__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[HEAP32[$0 >> 2] + $1 >> 2] = $2;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$0 | 0]($1, $2) | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[$0 | 0]($1);
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int___invoke_28int_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[$0 | 0]() | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int_2c_20double___invoke_28void_20_28__29_28int_2c_20double_29_2c_20int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return +FUNCTION_TABLE[$0 | 0]($1);
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  FUNCTION_TABLE[$0 | 0]($3, $1);
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  emscripten__val___val_28_29($3);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28int_20_28__29_28int_2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $2;
  HEAP32[$5 + 8 >> 2] = 78476;
  HEAP32[$5 + 4 >> 2] = $3;
  HEAP32[$5 >> 2] = 78476;
  $2 = $1;
  $1 = $5 + 8 | 0;
  $0 = FUNCTION_TABLE[$0 | 0]($2, $1, $5, $4) | 0;
  emscripten__val___val_28_29($5);
  emscripten__val___val_28_29($1);
  __stack_pointer = $5 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________base_destruct_at_end_5babi_ne200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($2 - 12 | 0);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29_2c_20void_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______invoke_28void_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[$0 >> 2];
  $0 = $3 + 4 | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $2);
  FUNCTION_TABLE[$4 | 0]($1, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28char_20const__2c_20unsigned_20long_29($0, $1 + 4 | 0, HEAP32[$1 >> 2]);
 }
 
 function std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 357913942) {
   std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = (HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
  $2 = $0 << 1;
  return $0 >>> 0 >= 178956970 ? 357913941 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__________split_buffer_28_29($0) {
  var $1 = 0, $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   $1 = HEAP32[$0 + 8 >> 2];
   if (($1 | 0) != ($2 | 0)) {
    $1 = $1 - 12 | 0;
    HEAP32[$0 + 8 >> 2] = $1;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
    continue;
   }
   break;
  };
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   emscripten_builtin_free($0)
  }
 }
 
 function std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________throw_length_error_5babi_ne200100_5d_28_29() {
  std____2____throw_length_error_5babi_ne200100_5d_28char_20const__29(27033);
  wasm2js_trap();
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20void_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____invoke_28void_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 >> 2];
  $0 = $4 + 4 | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $3);
  FUNCTION_TABLE[$5 | 0]($1, $2, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20unsigned_20int_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20unsigned_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const____invoke_28unsigned_20int_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[$0 >> 2]]($1) | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20std____2__optional_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int_29_2c_20std____2__optional_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int___invoke_28std____2__optional_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int_29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  FUNCTION_TABLE[HEAP32[$0 >> 2]]($3, $1, $2);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block : {
   if (HEAPU8[$3 + 12 | 0] == 1) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    if (!(HEAP8[78140] & 1)) {
     $2 = _emval_create_invoker(2, 35940, 3) | 0;
     HEAP8[78140] = 1;
     HEAP32[19534] = $2;
    }
    $2 = HEAP8[$3 + 11 | 0];
    $4 = ($2 | 0) < 0;
    $2 = $4 ? HEAP32[$3 + 4 >> 2] : $2;
    $5 = emscripten_builtin_malloc($2 + 4 | 0);
    HEAP32[$5 >> 2] = $2;
    if ($2) {
     wasm2js_memory_copy($5 + 4 | 0, $4 ? HEAP32[$3 >> 2] : $3, $2)
    }
    HEAP32[$0 + 8 >> 2] = $5;
    HEAP32[$0 + 4 >> 2] = 0;
    $6 = +_emval_invoke(HEAP32[19534], 0, 0, $0 + 4 | 0, $0 + 8 | 0);
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
    $4 = $1 + 8 | 0;
    HEAP32[$4 + 4 >> 2] = $6 < 4294967295.0 & $6 >= 0.0 ? ~~$6 >>> 0 : 0;
    HEAP32[$4 >> 2] = 78476;
    emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0);
    __stack_pointer = $0 + 16 | 0;
    $2 = HEAP32[$4 + 4 >> 2];
    HEAP32[$4 + 4 >> 2] = 0;
    emscripten__val___val_28_29($4);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 78476;
   emscripten__val___val_28_29($1 + 8 | 0);
   $2 = 2;
  }
  __stack_pointer = $1 + 16 | 0;
  if (HEAPU8[$3 + 12 | 0] == 1) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3)
  }
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0) {
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   _emval_run_destructors($0 | 0)
  }
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20bool_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20bool_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____invoke_28bool_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 >> 2];
  $0 = $4 + 4 | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $3);
  $1 = FUNCTION_TABLE[$5 | 0]($1, $2, $0) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
  __stack_pointer = $4 + 16 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20int___29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_____invoke_28void_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20int___29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$3 + 12 >> 2] = $2;
  FUNCTION_TABLE[$0 | 0]($1, $3 + 12 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const____invoke_28void_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$4 + 12 >> 2] = $3;
  FUNCTION_TABLE[$0 | 0]($1, $2, $4 + 12 | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20std____2__optional_int__20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int_29_2c_20std____2__optional_int__2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int___invoke_28std____2__optional_int__20_28___29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int_29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  FUNCTION_TABLE[HEAP32[$0 >> 2]]($3 + 8 | 0, $1, $2);
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 4 >> 2] = $0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  block : {
   if (HEAPU8[$3 + 4 | 0] == 1) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    if (!(HEAP8[78152] & 1)) {
     $2 = _emval_create_invoker(2, 36644, 3) | 0;
     HEAP8[78152] = 1;
     HEAP32[19537] = $2;
    }
    HEAP32[$0 + 8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$0 + 4 >> 2] = 0;
    $5 = +_emval_invoke(HEAP32[19537], 0, 0, $0 + 4 | 0, $0 + 8 | 0);
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
    $4 = $1 + 8 | 0;
    HEAP32[$4 + 4 >> 2] = $5 < 4294967295.0 & $5 >= 0.0 ? ~~$5 >>> 0 : 0;
    HEAP32[$4 >> 2] = 78476;
    emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0);
    __stack_pointer = $0 + 16 | 0;
    $2 = HEAP32[$4 + 4 >> 2];
    HEAP32[$4 + 4 >> 2] = 0;
    emscripten__val___val_28_29($4);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 78476;
   emscripten__val___val_28_29($1 + 8 | 0);
   $2 = 2;
  }
  __stack_pointer = $1 + 16 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const____invoke_28bool_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$4 + 12 >> 2] = $3;
  $0 = FUNCTION_TABLE[$0 | 0]($1, $2, $4 + 12 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker___29_2c_20void_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker_____invoke_28void_20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker___29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = HEAP32[$0 >> 2];
  $4 = HEAP32[$2 + 12 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = $4;
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  FUNCTION_TABLE[$0 | 0]($1, $3);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker______recommend_5babi_ne200100_5d_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0;
  if ($1 >>> 0 >= 268435456) {
   std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________throw_length_error_5babi_ne200100_5d_28_29();
   wasm2js_trap();
  }
  $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] | 0;
  $2 = $0 >> 3;
  return $0 >>> 0 >= 2147483632 ? 268435455 : $1 >>> 0 < $2 >>> 0 ? $2 : $1;
 }
 
 function std____2____split_buffer_nftMarker_2c_20std____2__allocator_nftMarker_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_nftMarker___29($0, $1, $2, $3) {
  var $4 = 0;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = 0;
  if ($1) {
   if ($1 >>> 0 >= 268435456) {
    std____throw_bad_array_new_length_5babi_ne200100_5d_28_29();
    wasm2js_trap();
   }
   $4 = operator_20new_28unsigned_20long_29($1 << 4);
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 4) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = ($1 << 4) + $4;
  HEAP32[$0 + 4 >> 2] = $2;
  return $0;
 }
 
 function std____2____split_buffer_nftMarker_2c_20std____2__allocator_nftMarker________split_buffer_28_29($0) {
  $1188($0, 16);
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20void_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const____invoke_28void_20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[$0 >> 2]]($1, $2, $3);
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20std____2__optional_nftMarker__20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int_29_2c_20std____2__optional_nftMarker__2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int___invoke_28std____2__optional_nftMarker__20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int_29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  FUNCTION_TABLE[HEAP32[$0 >> 2]]($3 + 28 | 0, $1, $2);
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 20 >> 2] = $0;
  $0 = HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 12 >> 2] = $0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = $3 + 8 | 0;
  block : {
   if (HEAPU8[$2 + 16 | 0] == 1) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    if (!(HEAP8[78164] & 1)) {
     $4 = _emval_create_invoker(2, 37428, 3) | 0;
     HEAP8[78164] = 1;
     HEAP32[19540] = $4;
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = nftMarker__20emscripten__internal__GenericBindingType_nftMarker___toWireType_nftMarker___28nftMarker__2c_20emscripten__internal__rvp__default_tag_29($2)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    HEAP32[$0 + 4 >> 2] = 0;
    $5 = +_emval_invoke(HEAP32[19540], 0, 0, $0 + 4 | 0, $0 + 8 | 0);
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
    $4 = $1 + 8 | 0;
    HEAP32[$4 + 4 >> 2] = $5 < 4294967295.0 & $5 >= 0.0 ? ~~$5 >>> 0 : 0;
    HEAP32[$4 >> 2] = 78476;
    emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0);
    __stack_pointer = $0 + 16 | 0;
    $2 = HEAP32[$4 + 4 >> 2];
    HEAP32[$4 + 4 >> 2] = 0;
    emscripten__val___val_28_29($4);
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 78476;
   emscripten__val___val_28_29($1 + 8 | 0);
   $2 = 2;
  }
  __stack_pointer = $1 + 16 | 0;
  __stack_pointer = $3 + 48 | 0;
  return $2 | 0;
 }
 
 function nftMarker__20emscripten__internal__GenericBindingType_nftMarker___toWireType_nftMarker___28nftMarker__2c_20emscripten__internal__rvp__default_tag_29($0) {
  var $1 = 0, $2 = 0;
  $1 = operator_20new_28unsigned_20long_29(16);
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  return $1;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20bool_20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20bool_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const____invoke_28bool_20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[HEAP32[$0 >> 2]]($1, $2, $3) | 0;
 }
 
 function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void________unique_ptr_5babi_ne200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1) {
   block1 : {
    block : {
     if (HEAPU8[$0 + 8 | 0] == 1) {
      arController___arController_28_29($1 + 16 | 0);
      break block;
     }
     if (!$1) {
      break block1
     }
    }
    emscripten_builtin_free($1);
   }
  }
 }
 
 function arController__kpmHandle___lambda__28_KpmHandle__29____invoke_28_KpmHandle__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if ($0) {
   kpmDeleteHandle($1 + 12 | 0)
  }
  __stack_pointer = $1 + 16 | 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ar2GetTransMat($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0.0, $21 = 0.0, $22 = Math_fround(0), $23 = 0, $24 = 0;
  $7 = __stack_pointer - 224 | 0;
  __stack_pointer = $7;
  $14 = emscripten_builtin_malloc($4 << 4);
  HEAP32[$7 + 212 >> 2] = $14;
  if ($14) {
   block : {
    $11 = emscripten_builtin_malloc(Math_imul($4, 24));
    HEAP32[$7 + 216 >> 2] = $11;
    if (!$11) {
     break block
    }
    while (1) {
     if (($4 | 0) != ($8 | 0)) {
      $12 = Math_imul($8, 12) + $3 | 0;
      $16 = Math_fround($16 + HEAPF32[$12 + 8 >> 2]);
      $17 = Math_fround($17 + HEAPF32[$12 + 4 >> 2]);
      $18 = Math_fround($18 + HEAPF32[$12 >> 2]);
      $8 = $8 + 1 | 0;
      continue;
     }
     break;
    };
    $22 = Math_fround($4 >>> 0);
    $16 = Math_fround($16 / $22);
    $17 = Math_fround($17 / $22);
    $18 = Math_fround($18 / $22);
    $8 = 0;
    while (1) {
     if (($4 | 0) != ($8 | 0)) {
      $12 = $14 + ($8 << 4) | 0;
      $15 = ($8 << 3) + $2 | 0;
      HEAPF64[$12 >> 3] = HEAPF32[$15 >> 2];
      HEAPF64[$12 + 8 >> 3] = HEAPF32[$15 + 4 >> 2];
      $12 = $11 + Math_imul($8, 24) | 0;
      $15 = Math_imul($8, 12) + $3 | 0;
      HEAPF64[$12 >> 3] = Math_fround(HEAPF32[$15 >> 2] - $18);
      HEAPF64[$12 + 8 >> 3] = Math_fround(HEAPF32[$15 + 4 >> 2] - $17);
      HEAPF64[$12 + 16 >> 3] = Math_fround(HEAPF32[$15 + 8 >> 2] - $16);
      $8 = $8 + 1 | 0;
      continue;
     }
     break;
    };
    HEAP32[$7 + 220 >> 2] = $4;
    $4 = 0;
    while (1) {
     if (($4 | 0) != 3) {
      $2 = ($4 << 4) + $1 | 0;
      $3 = ($7 + 112 | 0) + ($4 << 5) | 0;
      $8 = 0;
      while (1) {
       if (($8 | 0) != 3) {
        HEAPF64[$3 + ($8 << 3) >> 3] = HEAPF32[$2 + ($8 << 2) >> 2];
        $8 = $8 + 1 | 0;
        continue;
       }
       break;
      };
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    };
    HEAPF64[$7 + 136 >> 3] = Math_fround(HEAPF32[$1 + 12 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $16) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $18) + Math_fround($17 * HEAPF32[$1 + 4 >> 2]))));
    HEAPF64[$7 + 168 >> 3] = Math_fround(HEAPF32[$1 + 28 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 24 >> 2] * $16) + Math_fround(Math_fround(HEAPF32[$1 + 16 >> 2] * $18) + Math_fround($17 * HEAPF32[$1 + 20 >> 2]))));
    HEAPF64[$7 + 200 >> 3] = Math_fround(HEAPF32[$1 + 44 >> 2] + Math_fround(Math_fround(HEAPF32[$1 + 40 >> 2] * $16) + Math_fround(Math_fround(HEAPF32[$1 + 32 >> 2] * $18) + Math_fround($17 * HEAPF32[$1 + 36 >> 2]))));
    block2 : {
     block1 : {
      if (!$6) {
       if ((icpPoint($0, $7 + 212 | 0, $7 + 112 | 0, $7 + 16 | 0, $7 + 8 | 0) | 0) < 0) {
        break block1
       }
       break block2;
      }
      $11 = $7 + 112 | 0;
      $15 = $7 + 16 | 0;
      $4 = __stack_pointer - 160 | 0;
      __stack_pointer = $4;
      $1 = -1;
      $2 = HEAP32[$7 + 220 >> 2];
      block3 : {
       if (($2 | 0) < 4) {
        break block3
       }
       $9 = HEAPF64[$0 + 128 >> 3];
       $8 = emscripten_builtin_malloc(Math_imul($2, 96));
       if (!$8) {
        arLog(0, 3, 1404, 0);
        break block3;
       }
       $6 = emscripten_builtin_malloc($2 << 4);
       if (!$6) {
        arLog(0, 3, 1404, 0);
        emscripten_builtin_free($8);
        break block3;
       }
       $3 = $2 << 3;
       $12 = emscripten_builtin_malloc($3);
       if (!$12) {
        arLog(0, 3, 1404, 0);
        emscripten_builtin_free($8);
        emscripten_builtin_free($6);
        break block3;
       }
       block4 : {
        $14 = emscripten_builtin_malloc($3);
        if ($14) {
         $9 = $9 * +($2 >>> 0);
         if (Math_abs($9) < 2147483647.0) {
          $1 = ~~$9
         } else {
          $1 = -2147483648
         }
         $2 = ($1 | 0) <= 4 ? 4 : $1;
         $3 = 0;
         while (1) {
          if (($3 | 0) != 3) {
           $1 = $3 << 5;
           $23 = $1 + $15 | 0;
           $19 = $1 + $11 | 0;
           $1 = 0;
           while (1) {
            if (($1 | 0) != 4) {
             $24 = $1 << 3;
             HEAPF64[$23 + $24 >> 3] = HEAPF64[$19 + $24 >> 3];
             $1 = $1 + 1 | 0;
             continue;
            }
            break;
           };
           $3 = $3 + 1 | 0;
           continue;
          }
          break;
         };
         $23 = ($14 + ($2 << 3) | 0) - 8 | 0;
         $3 = 0;
         while (1) {
          arUtilMatMul($0, $15, $4 + 48 | 0);
          $1 = 0;
          while (1) {
           $2 = HEAP32[$7 + 220 >> 2];
           if (($2 | 0) > ($1 | 0)) {
            if ((icpGetU_from_X_by_MatX2U($4 + 144 | 0, $4 + 48 | 0, HEAP32[$7 + 216 >> 2] + Math_imul($1, 24) | 0) | 0) < 0) {
             break block4
            }
            $2 = $1 << 4;
            $11 = $2 + HEAP32[$7 + 212 >> 2] | 0;
            $13 = HEAPF64[$11 >> 3];
            $21 = HEAPF64[$4 + 144 >> 3];
            $2 = $2 + $6 | 0;
            $9 = HEAPF64[$11 + 8 >> 3] - HEAPF64[$4 + 152 >> 3];
            HEAPF64[$2 + 8 >> 3] = $9;
            $13 = $13 - $21;
            HEAPF64[$2 >> 3] = $13;
            $2 = $1 << 3;
            $9 = $13 * $13 + $9 * $9;
            HEAPF64[$2 + $14 >> 3] = $9;
            HEAPF64[$2 + $12 >> 3] = $9;
            $1 = $1 + 1 | 0;
            continue;
           }
           break;
          };
          __qsort_r($14, $2, 8, 1);
          $9 = HEAPF64[$23 >> 3] * 4.0;
          $13 = $9 < 16.0 ? 16.0 : $9;
          $21 = $13 / 6.0;
          $1 = 0;
          $2 = HEAP32[$7 + 220 >> 2];
          $11 = ($2 | 0) > 0 ? $2 : 0;
          $9 = 0.0;
          while (1) {
           if (($1 | 0) != ($11 | 0)) {
            $20 = HEAPF64[$14 + ($1 << 3) >> 3];
            if ($20 > $13) {
             $9 = $21 + $9
            } else {
             $20 = 1.0 - $20 / $13;
             $9 = $21 * (1.0 - $20 * $20 * $20) + $9;
            }
            $1 = $1 + 1 | 0;
            continue;
           }
           break;
          };
          block5 : {
           $9 = $9 / +($2 | 0);
           if ($9 < HEAPF64[$0 + 104 >> 3] | !(!$3 | !($9 < HEAPF64[$0 + 120 >> 3])) & HEAPF64[$0 + 112 >> 3] < $9 / $10) {
            break block5
           }
           $1 = 0;
           $11 = 0;
           if (HEAP32[$0 + 96 >> 2] == ($3 | 0)) {
            break block5
           }
           while (1) {
            if (($1 | 0) < ($2 | 0)) {
             $10 = HEAPF64[$12 + ($1 << 3) >> 3];
             if ($10 <= $13) {
              $2 = $8 + Math_imul($11, 48) | 0;
              if ((icpGetJ_U_S($2, $0, $15, HEAP32[$7 + 216 >> 2] + Math_imul($1, 24) | 0) | 0) < 0) {
               break block4
              }
              $10 = 1.0 - $10 / $13;
              $10 = $10 * $10;
              HEAPF64[$2 >> 3] = $10 * HEAPF64[$2 >> 3];
              HEAPF64[$2 + 8 >> 3] = $10 * HEAPF64[$2 + 8 >> 3];
              HEAPF64[$2 + 16 >> 3] = $10 * HEAPF64[$2 + 16 >> 3];
              HEAPF64[$2 + 24 >> 3] = $10 * HEAPF64[$2 + 24 >> 3];
              HEAPF64[$2 + 32 >> 3] = $10 * HEAPF64[$2 + 32 >> 3];
              HEAPF64[$2 + 40 >> 3] = $10 * HEAPF64[$2 + 40 >> 3];
              HEAPF64[$2 + 48 >> 3] = $10 * HEAPF64[$2 + 48 >> 3];
              HEAPF64[$2 + 56 >> 3] = $10 * HEAPF64[$2 + 56 >> 3];
              $19 = $2 - -64 | 0;
              HEAPF64[$19 >> 3] = $10 * HEAPF64[$19 >> 3];
              HEAPF64[$2 + 72 >> 3] = $10 * HEAPF64[$2 + 72 >> 3];
              HEAPF64[$2 + 80 >> 3] = $10 * HEAPF64[$2 + 80 >> 3];
              HEAPF64[$2 + 88 >> 3] = $10 * HEAPF64[$2 + 88 >> 3];
              $2 = $6 + ($11 << 3) | 0;
              $19 = $6 + ($1 << 4) | 0;
              HEAPF64[$2 >> 3] = $10 * HEAPF64[$19 >> 3];
              HEAPF64[$2 + 8 >> 3] = $10 * HEAPF64[$19 + 8 >> 3];
              $11 = $11 + 2 | 0;
              $2 = HEAP32[$7 + 220 >> 2];
             }
             $1 = $1 + 1 | 0;
             continue;
            }
            break;
           };
           if (($11 | 0) <= 5) {
            break block4
           }
           if ((icpGetDeltaS($4, $6, $8, $11) | 0) < 0) {
            break block4
           }
           icpUpdateMat($15, $4);
           $3 = $3 + 1 | 0;
           $10 = $9;
           continue;
          }
          break;
         };
         HEAPF64[$7 + 8 >> 3] = $9;
         emscripten_builtin_free($8);
         emscripten_builtin_free($6);
         emscripten_builtin_free($12);
         emscripten_builtin_free($14);
         $1 = 0;
         break block3;
        }
        arLog(0, 3, 1404, 0);
        emscripten_builtin_free($8);
        emscripten_builtin_free($6);
        emscripten_builtin_free($12);
        break block3;
       }
       emscripten_builtin_free($8);
       emscripten_builtin_free($6);
       emscripten_builtin_free($12);
       emscripten_builtin_free($14);
       $1 = -1;
      }
      __stack_pointer = $4 + 160 | 0;
      if (($1 | 0) >= 0) {
       break block2
      }
     }
     HEAP32[$7 + 8 >> 2] = 0;
     HEAP32[$7 + 12 >> 2] = 1100470148;
    }
    emscripten_builtin_free(HEAP32[$7 + 212 >> 2]);
    emscripten_builtin_free(HEAP32[$7 + 216 >> 2]);
    $4 = 0;
    while (1) {
     if (($4 | 0) != 3) {
      $0 = ($4 << 4) + $5 | 0;
      $1 = ($7 + 16 | 0) + ($4 << 5) | 0;
      $8 = 0;
      while (1) {
       if (($8 | 0) != 3) {
        HEAPF32[$0 + ($8 << 2) >> 2] = HEAPF64[$1 + ($8 << 3) >> 3];
        $8 = $8 + 1 | 0;
        continue;
       }
       break;
      };
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    };
    $9 = +$18;
    $10 = +$17;
    $13 = +$16;
    HEAPF32[$5 + 12 >> 2] = HEAPF64[$7 + 40 >> 3] - HEAPF64[$7 + 16 >> 3] * $9 - HEAPF64[$7 + 24 >> 3] * $10 - HEAPF64[$7 + 32 >> 3] * $13;
    HEAPF32[$5 + 28 >> 2] = HEAPF64[$7 + 72 >> 3] - HEAPF64[$7 + 48 >> 3] * $9 - HEAPF64[$7 + 56 >> 3] * $10 - HEAPF64[$7 + 64 >> 3] * $13;
    HEAPF32[$5 + 44 >> 2] = HEAPF64[$7 + 104 >> 3] - HEAPF64[$7 + 80 >> 3] * $9 - HEAPF64[$7 + 88 >> 3] * $10 - HEAPF64[$7 + 96 >> 3] * $13;
    __stack_pointer = $7 + 224 | 0;
    return Math_fround(HEAPF64[$7 + 8 >> 3]);
   }
  }
  arLog(0, 3, 34573, 0);
  exit(1);
  wasm2js_trap();
 }
 
 function ar2GetTransMatHomography($0, $1, $2, $3, $4, $5, $6) {
  var $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  block : {
   block9 : {
    block2 : {
     block3 : {
      block6 : {
       block7 : {
        block5 : {
         block1 : {
          if (!$5) {
           $7 = Math_fround(1.0e8);
           if ($3 >>> 0 < 4 | HEAPF32[$0 + 44 >> 2] == Math_fround(0.0)) {
            break block
           }
           $11 = emscripten_builtin_malloc($3 << 6);
           if (!$11) {
            arLog(0, 3, 34293, 0);
            $7 = Math_fround(-1.0);
            break block;
           }
           $12 = emscripten_builtin_malloc($3 << 3);
           if (!$12) {
            break block1
           }
           while (1) {
            if (($8 | 0) != 3) {
             $5 = $8 << 4;
             $13 = $5 + $4 | 0;
             $16 = $0 + $5 | 0;
             $5 = 0;
             while (1) {
              if (($5 | 0) != 4) {
               $19 = $5 << 2;
               HEAPF32[$19 + $13 >> 2] = HEAPF32[$16 + $19 >> 2] / HEAPF32[$0 + 44 >> 2];
               $5 = $5 + 1 | 0;
               continue;
              }
              break;
             };
             $8 = $8 + 1 | 0;
             continue;
            }
            break;
           };
           $8 = $3 << 1;
           $26 = HEAPF32[$4 + 36 >> 2];
           $20 = HEAPF32[$4 + 32 >> 2];
           $28 = Math_fround($3 >>> 0);
           $13 = 0;
           while (1) {
            $15 = Math_fround(0.0);
            $0 = 0;
            while (1) {
             if (($0 | 0) != ($3 | 0)) {
              $5 = Math_imul($0, 12) + $2 | 0;
              $7 = HEAPF32[$5 >> 2];
              $10 = HEAPF32[$5 + 4 >> 2];
              $6 = Math_fround(Math_fround(Math_fround($20 * $7) + Math_fround($26 * $10)) + Math_fround(1.0));
              if ($6 == Math_fround(0.0)) {
               break block2
              }
              $5 = $0 << 3;
              $16 = $5 + $1 | 0;
              $21 = HEAPF32[$16 >> 2];
              $23 = HEAPF32[$4 + 12 >> 2];
              $22 = HEAPF32[$4 >> 2];
              $27 = HEAPF32[$4 + 4 >> 2];
              $5 = $5 + $12 | 0;
              $17 = Math_fround(HEAPF32[$4 + 28 >> 2] + Math_fround(Math_fround(HEAPF32[$4 + 16 >> 2] * $7) + Math_fround($10 * HEAPF32[$4 + 20 >> 2])));
              $18 = Math_fround(HEAPF32[$16 + 4 >> 2] - Math_fround($17 / $6));
              HEAPF32[$5 + 4 >> 2] = $18;
              $23 = Math_fround($23 + Math_fround(Math_fround($22 * $7) + Math_fround($10 * $27)));
              $22 = Math_fround($21 - Math_fround($23 / $6));
              HEAPF32[$5 >> 2] = $22;
              $5 = $11 + ($0 << 6) | 0;
              $27 = Math_fround(-$10);
              $21 = Math_fround($6 * $6);
              HEAPF32[$5 + 60 >> 2] = Math_fround($17 * $27) / $21;
              $24 = $17;
              $17 = Math_fround(-$7);
              HEAPF32[$5 + 56 >> 2] = Math_fround($24 * $17) / $21;
              $24 = Math_fround(Math_fround(1.0) / $6);
              HEAPF32[$5 + 52 >> 2] = $24;
              $10 = Math_fround($10 / $6);
              HEAPF32[$5 + 48 >> 2] = $10;
              $6 = Math_fround($7 / $6);
              HEAPF32[$5 + 44 >> 2] = $6;
              HEAP32[$5 + 40 >> 2] = 0;
              HEAP32[$5 + 32 >> 2] = 0;
              HEAP32[$5 + 36 >> 2] = 0;
              HEAPF32[$5 + 28 >> 2] = Math_fround($23 * $27) / $21;
              HEAPF32[$5 + 24 >> 2] = Math_fround($23 * $17) / $21;
              HEAP32[$5 + 20 >> 2] = 0;
              HEAP32[$5 + 12 >> 2] = 0;
              HEAP32[$5 + 16 >> 2] = 0;
              HEAPF32[$5 + 8 >> 2] = $24;
              HEAPF32[$5 + 4 >> 2] = $10;
              HEAPF32[$5 >> 2] = $6;
              $15 = Math_fround($15 + Math_fround(Math_fround($22 * $22) + Math_fround($18 * $18)));
              $0 = $0 + 1 | 0;
              continue;
             }
             break;
            };
            $7 = Math_fround($15 / $28);
            if ($7 < Math_fround(.10000000149011612)) {
             break block3
            }
            block4 : {
             if (!(!$13 | !($7 < Math_fround(4.0)))) {
              if (Math_fround($7 / $14) > Math_fround(.9900000095367432)) {
               break block3
              }
              if (($13 | 0) != 10) {
               break block4
              }
              break block3;
             }
             if (($13 | 0) == 10) {
              break block3
             }
            }
            if ((getDeltaS($9, $12, $11, $8) | 0) < 0) {
             break block2
            }
            HEAPF32[$4 >> 2] = HEAPF32[$9 >> 2] + HEAPF32[$4 >> 2];
            HEAPF32[$4 + 4 >> 2] = HEAPF32[$9 + 4 >> 2] + HEAPF32[$4 + 4 >> 2];
            HEAPF32[$4 + 12 >> 2] = HEAPF32[$9 + 8 >> 2] + HEAPF32[$4 + 12 >> 2];
            HEAPF32[$4 + 16 >> 2] = HEAPF32[$9 + 12 >> 2] + HEAPF32[$4 + 16 >> 2];
            HEAPF32[$4 + 20 >> 2] = HEAPF32[$9 + 16 >> 2] + HEAPF32[$4 + 20 >> 2];
            HEAPF32[$4 + 28 >> 2] = HEAPF32[$9 + 20 >> 2] + HEAPF32[$4 + 28 >> 2];
            $20 = Math_fround(HEAPF32[$9 + 24 >> 2] + HEAPF32[$4 + 32 >> 2]);
            HEAPF32[$4 + 32 >> 2] = $20;
            $26 = Math_fround(HEAPF32[$9 + 28 >> 2] + HEAPF32[$4 + 36 >> 2]);
            HEAPF32[$4 + 36 >> 2] = $26;
            $13 = $13 + 1 | 0;
            $14 = $7;
            continue;
           };
          }
          $7 = Math_fround(1.0e8);
          if ($3 >>> 0 < 4 | HEAPF32[$0 + 44 >> 2] == Math_fround(0.0)) {
           break block
          }
          $11 = emscripten_builtin_malloc($3 << 6);
          if (!$11) {
           arLog(0, 3, 34293, 0);
           $7 = Math_fround(-1.0);
           break block;
          }
          $12 = emscripten_builtin_malloc($3 << 3);
          if (!$12) {
           arLog(0, 3, 34293, 0);
           emscripten_builtin_free($11);
           $7 = Math_fround(-1.0);
           break block;
          }
          $5 = $3 << 2;
          $19 = emscripten_builtin_malloc($5);
          if (!$19) {
           arLog(0, 3, 34293, 0);
           emscripten_builtin_free($11);
           emscripten_builtin_free($12);
           $7 = Math_fround(-1.0);
           break block;
          }
          $16 = emscripten_builtin_malloc($5);
          if (!$16) {
           break block5
          }
          $23 = Math_fround($3 >>> 0);
          $6 = Math_fround($6 * $23);
          if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
           $5 = ~~$6
          } else {
           $5 = -2147483648
          }
          $13 = ($5 | 0) <= 5 ? 5 : $5;
          while (1) {
           if (($8 | 0) != 3) {
            $5 = $8 << 4;
            $25 = $5 + $4 | 0;
            $29 = $0 + $5 | 0;
            $5 = 0;
            while (1) {
             if (($5 | 0) != 4) {
              $30 = $5 << 2;
              HEAPF32[$25 + $30 >> 2] = HEAPF32[$29 + $30 >> 2] / HEAPF32[$0 + 44 >> 2];
              $5 = $5 + 1 | 0;
              continue;
             }
             break;
            };
            $8 = $8 + 1 | 0;
            continue;
           }
           break;
          };
          $29 = ($16 + ($13 << 2) | 0) - 4 | 0;
          $15 = HEAPF32[$4 + 36 >> 2];
          $21 = HEAPF32[$4 + 32 >> 2];
          $25 = 0;
          while (1) {
           $0 = 0;
           while (1) {
            if (($0 | 0) != ($3 | 0)) {
             $5 = Math_imul($0, 12) + $2 | 0;
             $7 = HEAPF32[$5 >> 2];
             $14 = HEAPF32[$5 + 4 >> 2];
             $6 = Math_fround(Math_fround(Math_fround($21 * $7) + Math_fround($15 * $14)) + Math_fround(1.0));
             if ($6 == Math_fround(0.0)) {
              break block6
             }
             $5 = $0 << 3;
             $8 = $5 + $1 | 0;
             $17 = HEAPF32[$8 >> 2];
             $18 = HEAPF32[$4 + 12 >> 2];
             $22 = HEAPF32[$4 >> 2];
             $28 = HEAPF32[$4 + 4 >> 2];
             $5 = $5 + $12 | 0;
             $20 = Math_fround(HEAPF32[$4 + 28 >> 2] + Math_fround(Math_fround(HEAPF32[$4 + 16 >> 2] * $7) + Math_fround($14 * HEAPF32[$4 + 20 >> 2])));
             $10 = Math_fround(HEAPF32[$8 + 4 >> 2] - Math_fround($20 / $6));
             HEAPF32[$5 + 4 >> 2] = $10;
             $24 = $17;
             $17 = Math_fround($18 + Math_fround(Math_fround($22 * $7) + Math_fround($14 * $28)));
             $18 = Math_fround($24 - Math_fround($17 / $6));
             HEAPF32[$5 >> 2] = $18;
             $5 = $0 << 2;
             $10 = Math_fround(Math_fround($18 * $18) + Math_fround($10 * $10));
             HEAPF32[$5 + $16 >> 2] = $10;
             HEAPF32[$5 + $19 >> 2] = $10;
             $5 = $11 + ($0 << 6) | 0;
             $18 = Math_fround(-$14);
             $10 = Math_fround($6 * $6);
             HEAPF32[$5 + 60 >> 2] = Math_fround($20 * $18) / $10;
             $24 = $20;
             $20 = Math_fround(-$7);
             HEAPF32[$5 + 56 >> 2] = Math_fround($24 * $20) / $10;
             $22 = Math_fround(Math_fround(1.0) / $6);
             HEAPF32[$5 + 52 >> 2] = $22;
             $14 = Math_fround($14 / $6);
             HEAPF32[$5 + 48 >> 2] = $14;
             $6 = Math_fround($7 / $6);
             HEAPF32[$5 + 44 >> 2] = $6;
             HEAP32[$5 + 40 >> 2] = 0;
             HEAP32[$5 + 32 >> 2] = 0;
             HEAP32[$5 + 36 >> 2] = 0;
             HEAPF32[$5 + 28 >> 2] = Math_fround($17 * $18) / $10;
             HEAPF32[$5 + 24 >> 2] = Math_fround($17 * $20) / $10;
             HEAP32[$5 + 20 >> 2] = 0;
             HEAP32[$5 + 12 >> 2] = 0;
             HEAP32[$5 + 16 >> 2] = 0;
             HEAPF32[$5 + 8 >> 2] = $22;
             HEAPF32[$5 + 4 >> 2] = $14;
             HEAPF32[$5 >> 2] = $6;
             $0 = $0 + 1 | 0;
             continue;
            }
            break;
           };
           __qsort_r($16, $3, 4, 131);
           $6 = Math_fround(HEAPF32[$29 >> 2] * Math_fround(4.0));
           $14 = $6 < Math_fround(16.0) ? Math_fround(16.0) : $6;
           $7 = Math_fround($14 / Math_fround(6.0));
           $5 = 0;
           $6 = Math_fround(0.0);
           while (1) {
            if (($3 | 0) != ($5 | 0)) {
             $15 = HEAPF32[$16 + ($5 << 2) >> 2];
             if ($15 > $14) {
              $6 = Math_fround($7 + $6)
             } else {
              $15 = Math_fround(Math_fround(1.0) - Math_fround($15 / $14));
              $6 = Math_fround(Math_fround($7 * Math_fround(Math_fround(1.0) - Math_fround(Math_fround($15 * $15) * $15))) + $6);
             }
             $5 = $5 + 1 | 0;
             continue;
            }
            break;
           };
           $7 = Math_fround($6 / $23);
           if ($7 < Math_fround(.10000000149011612)) {
            break block7
           }
           block8 : {
            if (!(!$25 | !($7 < Math_fround(4.0)))) {
             if (Math_fround($7 / $26) > Math_fround(.9900000095367432)) {
              break block7
             }
             if (($25 | 0) != 10) {
              break block8
             }
             break block7;
            }
            if (($25 | 0) == 10) {
             break block7
            }
           }
           $0 = 0;
           $13 = 0;
           while (1) {
            if (($0 | 0) != ($3 | 0)) {
             $6 = HEAPF32[$19 + ($0 << 2) >> 2];
             if ($6 <= $14) {
              $5 = $11 + ($13 << 5) | 0;
              $6 = Math_fround(Math_fround(1.0) - Math_fround($6 / $14));
              $6 = Math_fround($6 * $6);
              $8 = $11 + ($0 << 6) | 0;
              HEAPF32[$5 >> 2] = $6 * HEAPF32[$8 >> 2];
              HEAPF32[$5 + 4 >> 2] = $6 * HEAPF32[$8 + 4 >> 2];
              HEAPF32[$5 + 8 >> 2] = $6 * HEAPF32[$8 + 8 >> 2];
              HEAPF32[$5 + 12 >> 2] = $6 * HEAPF32[$8 + 12 >> 2];
              HEAPF32[$5 + 16 >> 2] = $6 * HEAPF32[$8 + 16 >> 2];
              HEAPF32[$5 + 20 >> 2] = $6 * HEAPF32[$8 + 20 >> 2];
              HEAPF32[$5 + 24 >> 2] = $6 * HEAPF32[$8 + 24 >> 2];
              HEAPF32[$5 + 28 >> 2] = $6 * HEAPF32[$8 + 28 >> 2];
              HEAPF32[$5 + 32 >> 2] = $6 * HEAPF32[$8 + 32 >> 2];
              HEAPF32[$5 + 36 >> 2] = $6 * HEAPF32[$8 + 36 >> 2];
              HEAPF32[$5 + 40 >> 2] = $6 * HEAPF32[$8 + 40 >> 2];
              HEAPF32[$5 + 44 >> 2] = $6 * HEAPF32[$8 + 44 >> 2];
              HEAPF32[$5 + 48 >> 2] = $6 * HEAPF32[$8 + 48 >> 2];
              HEAPF32[$5 + 52 >> 2] = $6 * HEAPF32[$8 + 52 >> 2];
              HEAPF32[$5 + 56 >> 2] = $6 * HEAPF32[$8 + 56 >> 2];
              HEAPF32[$5 + 60 >> 2] = $6 * HEAPF32[$8 + 60 >> 2];
              $5 = $12 + ($13 << 2) | 0;
              $8 = $12 + ($0 << 3) | 0;
              HEAPF32[$5 >> 2] = $6 * HEAPF32[$8 >> 2];
              HEAPF32[$5 + 4 >> 2] = $6 * HEAPF32[$8 + 4 >> 2];
              $13 = $13 + 2 | 0;
             }
             $0 = $0 + 1 | 0;
             continue;
            }
            break;
           };
           if (($13 | 0) <= 5) {
            emscripten_builtin_free($11);
            emscripten_builtin_free($12);
            emscripten_builtin_free($19);
            emscripten_builtin_free($16);
            $7 = Math_fround(-1.0);
            break block;
           }
           if ((getDeltaS($9, $12, $11, $13) | 0) < 0) {
            break block6
           }
           HEAPF32[$4 >> 2] = HEAPF32[$9 >> 2] + HEAPF32[$4 >> 2];
           HEAPF32[$4 + 4 >> 2] = HEAPF32[$9 + 4 >> 2] + HEAPF32[$4 + 4 >> 2];
           HEAPF32[$4 + 12 >> 2] = HEAPF32[$9 + 8 >> 2] + HEAPF32[$4 + 12 >> 2];
           HEAPF32[$4 + 16 >> 2] = HEAPF32[$9 + 12 >> 2] + HEAPF32[$4 + 16 >> 2];
           HEAPF32[$4 + 20 >> 2] = HEAPF32[$9 + 16 >> 2] + HEAPF32[$4 + 20 >> 2];
           HEAPF32[$4 + 28 >> 2] = HEAPF32[$9 + 20 >> 2] + HEAPF32[$4 + 28 >> 2];
           $21 = Math_fround(HEAPF32[$9 + 24 >> 2] + HEAPF32[$4 + 32 >> 2]);
           HEAPF32[$4 + 32 >> 2] = $21;
           $15 = Math_fround(HEAPF32[$9 + 28 >> 2] + HEAPF32[$4 + 36 >> 2]);
           HEAPF32[$4 + 36 >> 2] = $15;
           $25 = $25 + 1 | 0;
           $26 = $7;
           continue;
          };
         }
         arLog(0, 3, 34293, 0);
         emscripten_builtin_free($11);
         $7 = Math_fround(-1.0);
         break block;
        }
        arLog(0, 3, 34293, 0);
        emscripten_builtin_free($11);
        emscripten_builtin_free($12);
        emscripten_builtin_free($19);
        $7 = Math_fround(-1.0);
        break block;
       }
       emscripten_builtin_free($11);
       emscripten_builtin_free($12);
       emscripten_builtin_free($19);
       emscripten_builtin_free($16);
       break block;
      }
      emscripten_builtin_free($11);
      emscripten_builtin_free($12);
      emscripten_builtin_free($19);
      emscripten_builtin_free($16);
      break block9;
     }
     emscripten_builtin_free($11);
     emscripten_builtin_free($12);
     break block;
    }
    emscripten_builtin_free($11);
    emscripten_builtin_free($12);
   }
   $7 = Math_fround(1.0e8);
  }
  __stack_pointer = $9 + 32 | 0;
  return $7;
 }
 
 function getDeltaS($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0);
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 40 >> 2] = 8;
  HEAP32[$6 + 44 >> 2] = 1;
  HEAP32[$6 + 36 >> 2] = $0;
  HEAP32[$6 + 32 >> 2] = 1;
  HEAP32[$6 + 28 >> 2] = $3;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = 8;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $2;
  $0 = arMatrixAllocf(HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2]);
  block1 : {
   if ($0) {
    $7 = -1;
    block : {
     $2 = HEAP32[$0 + 4 >> 2];
     if (($2 | 0) != HEAP32[$6 + 20 >> 2]) {
      break block
     }
     $1 = HEAP32[$0 + 8 >> 2];
     if (($1 | 0) != HEAP32[$6 + 16 >> 2]) {
      break block
     }
     $7 = 0;
     $12 = ($2 | 0) > 0 ? $2 : 0;
     $9 = ($1 | 0) > 0 ? $1 : 0;
     $3 = HEAP32[$0 >> 2];
     $1 = 0;
     while (1) {
      if (($1 | 0) == ($12 | 0)) {
       break block
      }
      $4 = HEAP32[$6 + 12 >> 2] + ($1 << 2) | 0;
      $5 = 0;
      while (1) {
       if (($5 | 0) != ($9 | 0)) {
        HEAPF32[$3 >> 2] = HEAPF32[$4 >> 2];
        $5 = $5 + 1 | 0;
        $3 = $3 + 4 | 0;
        $4 = ($2 << 2) + $4 | 0;
        continue;
       }
       break;
      };
      $1 = $1 + 1 | 0;
      continue;
     };
    }
    if (($7 | 0) >= 0) {
     break block1
    }
    arImageProcFinal($0);
   }
   $0 = 0;
  }
  $12 = $0;
  block2 : {
   if (!$0) {
    $0 = -1;
    break block2;
   }
   $13 = arMatrixAllocMulf($12, $6 + 12 | 0);
   block3 : {
    if (!$13) {
     $0 = -1;
     break block3;
    }
    $15 = arMatrixAllocMulf($12, $6 + 24 | 0);
    block4 : {
     if (!$15) {
      $0 = -1;
      break block4;
     }
     $0 = 0;
     $3 = 0;
     $11 = __stack_pointer - 2e3 | 0;
     __stack_pointer = $11;
     $1 = -1;
     block5 : {
      $7 = HEAP32[$13 + 4 >> 2];
      if (($7 | 0) > 500) {
       break block5
      }
      $9 = HEAP32[$13 >> 2];
      block7 : {
       switch ($7 | 0) {
       case 1:
        HEAPF32[$9 >> 2] = Math_fround(1.0) / HEAPF32[$9 >> 2];
        $1 = 0;
        break block5;
       case 0:
        break block5;
       default:
        break block7;
       };
      }
      $14 = ($7 | 0) > 0 ? $7 : 0;
      $1 = 0;
      while (1) if (($1 | 0) == ($14 | 0)) {
       while (1) {
        if (($3 | 0) == ($14 | 0)) {
         $3 = 0;
         while (1) {
          block8 : {
           $1 = $3;
           if (($14 | 0) != ($1 | 0)) {
            while (1) {
             if (($1 | 0) == ($7 | 0)) {
              $1 = $7;
              break block8;
             }
             if (HEAP32[$11 + ($1 << 2) >> 2] == ($3 | 0)) {
              break block8
             }
             $1 = $1 + 1 | 0;
             continue;
            }
           }
           $1 = $9 ? 0 : -1;
           break block5;
          }
          $2 = $1 << 2;
          $1 = $3 << 2;
          HEAP32[$2 + $11 >> 2] = HEAP32[$1 + $11 >> 2];
          $1 = $1 + $9 | 0;
          $4 = $2 + $9 | 0;
          $5 = 0;
          while (1) {
           if (($5 | 0) != ($14 | 0)) {
            $8 = HEAPF32[$4 >> 2];
            HEAPF32[$4 >> 2] = HEAPF32[$1 >> 2];
            HEAPF32[$1 >> 2] = $8;
            $5 = $5 + 1 | 0;
            $2 = $7 << 2;
            $1 = $2 + $1 | 0;
            $4 = $2 + $4 | 0;
            continue;
           }
           break;
          };
          $3 = $3 + 1 | 0;
          continue;
         };
        }
        $8 = Math_fround(0.0);
        $5 = -1;
        $1 = $3;
        $2 = $9 + (Math_imul($7, $1) << 2) | 0;
        $4 = $2;
        while (1) {
         if (($1 | 0) != ($7 | 0)) {
          $16 = Math_fround(Math_abs(HEAPF32[$4 >> 2]));
          $10 = $16 > $8;
          $8 = $10 ? $16 : $8;
          $5 = $10 ? $1 : $5;
          $1 = $1 + 1 | 0;
          $4 = ($7 << 2) + $4 | 0;
          continue;
         }
         break;
        };
        $1 = -1;
        if (($5 | 0) == -1 | $8 <= Math_fround(1.000000013351432e-10)) {
         break block5
        }
        $1 = $11 + ($5 << 2) | 0;
        $4 = HEAP32[$1 >> 2];
        $10 = $1;
        $1 = $11 + ($3 << 2) | 0;
        HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
        HEAP32[$1 >> 2] = $4;
        $1 = $9 + (Math_imul($5, $7) << 2) | 0;
        $5 = 0;
        $4 = $2;
        while (1) {
         if (($5 | 0) != ($7 | 0)) {
          $8 = HEAPF32[$1 >> 2];
          HEAPF32[$1 >> 2] = HEAPF32[$4 >> 2];
          HEAPF32[$4 >> 2] = $8;
          $5 = $5 + 1 | 0;
          $4 = $4 + 4 | 0;
          $1 = $1 + 4 | 0;
          continue;
         }
         break;
        };
        $8 = HEAPF32[$2 >> 2];
        $4 = 1;
        $1 = $2;
        while (1) {
         if (($4 | 0) != ($7 | 0)) {
          HEAPF32[$1 >> 2] = HEAPF32[$1 + 4 >> 2] / $8;
          $4 = $4 + 1 | 0;
          $1 = $1 + 4 | 0;
          continue;
         }
         break;
        };
        HEAPF32[$1 >> 2] = Math_fround(1.0) / $8;
        $10 = 0;
        while (1) {
         if (($7 | 0) != ($10 | 0)) {
          if (($3 | 0) != ($10 | 0)) {
           $1 = $9 + (Math_imul($7, $10) << 2) | 0;
           $8 = Math_fround(-HEAPF32[$1 >> 2]);
           $4 = 1;
           $5 = $2;
           while (1) {
            if (($4 | 0) != ($7 | 0)) {
             HEAPF32[$1 >> 2] = Math_fround($8 * HEAPF32[$5 >> 2]) + HEAPF32[$1 + 4 >> 2];
             $5 = $5 + 4 | 0;
             $4 = $4 + 1 | 0;
             $1 = $1 + 4 | 0;
             continue;
            }
            break;
           };
           HEAPF32[$1 >> 2] = HEAPF32[$5 >> 2] * $8;
          }
          $10 = $10 + 1 | 0;
          continue;
         }
         break;
        };
        $3 = $3 + 1 | 0;
        continue;
       }
      } else {
       HEAP32[$11 + ($1 << 2) >> 2] = $1;
       $1 = $1 + 1 | 0;
       continue;
      };
     }
     __stack_pointer = $11 + 2e3 | 0;
     block9 : {
      if (($1 | 0) < 0) {
       $0 = -1;
       break block9;
      }
      arMatrixMulf($6 + 36 | 0, $13, $15);
     }
     arImageProcFinal($15);
    }
    arImageProcFinal($13);
   }
   arImageProcFinal($12);
  }
  __stack_pointer = $6 + 48 | 0;
  return $0;
 }
 
 function compE_1127($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  $2 = Math_fround(HEAPF32[$0 >> 2] - HEAPF32[$1 >> 2]);
  return ($2 < Math_fround(0.0) ? -1 : $2 > Math_fround(0.0)) | 0;
 }
 
 function zcalloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $0 = emscripten_builtin_malloc(Math_imul(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function zcfree($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  emscripten_builtin_free(HEAP32[$2 + 8 >> 2]);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function crc32($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  $0 = HEAP32[$4 + 8 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 24 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  HEAP32[$1 + 16 >> 2] = $2;
  block : {
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break block;
   }
   HEAP32[$1 + 12 >> 2] = 1;
   if (HEAPU8[$1 + 12 | 0]) {
    $2 = HEAP32[$1 + 20 >> 2];
    $3 = HEAP32[$1 + 16 >> 2];
    $0 = __stack_pointer - 32 | 0;
    HEAP32[$0 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$0 + 24 >> 2] = $2;
    HEAP32[$0 + 20 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 28 >> 2];
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] ^ -1;
    while (1) {
     if (HEAP32[$0 + 20 >> 2] ? HEAP32[$0 + 24 >> 2] & 3 : 0) {
      $2 = HEAP32[$0 + 16 >> 2];
      $3 = HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 24 >> 2] = $3 + 1;
      HEAP32[$0 + 16 >> 2] = HEAP32[((($2 ^ HEAPU8[$3 | 0]) & 255) << 2) + 37936 >> 2] ^ HEAP32[$0 + 16 >> 2] >>> 8;
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 1;
      continue;
     }
     break;
    };
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2];
    while (1) {
     if (HEAPU32[$0 + 20 >> 2] >= 32) {
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 32;
      continue;
     }
     break;
    };
    while (1) {
     if (HEAPU32[$0 + 20 >> 2] >= 4) {
      $2 = HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 12 >> 2] = $2 + 4;
      HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
      HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 37936 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 38960 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 39984 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 41008 >> 2]));
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 4;
      continue;
     }
     break;
    };
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 12 >> 2];
    if (HEAP32[$0 + 20 >> 2]) {
     while (1) {
      $2 = HEAP32[$0 + 16 >> 2];
      $3 = HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 24 >> 2] = $3 + 1;
      HEAP32[$0 + 16 >> 2] = HEAP32[((($2 ^ HEAPU8[$3 | 0]) & 255) << 2) + 37936 >> 2] ^ HEAP32[$0 + 16 >> 2] >>> 8;
      $2 = HEAP32[$0 + 20 >> 2] - 1 | 0;
      HEAP32[$0 + 20 >> 2] = $2;
      if ($2) {
       continue
      }
      break;
     }
    }
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] ^ -1;
    HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 16 >> 2];
    break block;
   }
   $2 = HEAP32[$1 + 20 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   $0 = __stack_pointer - 32 | 0;
   HEAP32[$0 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$0 + 24 >> 2] = $2;
   HEAP32[$0 + 20 >> 2] = $3;
   HEAP32[$0 + 16 >> 2] = (((HEAP32[$0 + 28 >> 2] >>> 8 & 65280) + (HEAP32[$0 + 28 >> 2] >>> 24 | 0) | 0) + ((HEAP32[$0 + 28 >> 2] & 65280) << 8) | 0) + ((HEAP32[$0 + 28 >> 2] & 255) << 24);
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] ^ -1;
   while (1) {
    if (HEAP32[$0 + 20 >> 2] ? HEAP32[$0 + 24 >> 2] & 3 : 0) {
     $2 = HEAP32[$0 + 16 >> 2] >>> 24 | 0;
     $3 = HEAP32[$0 + 24 >> 2];
     HEAP32[$0 + 24 >> 2] = $3 + 1;
     HEAP32[$0 + 16 >> 2] = HEAP32[(($2 ^ HEAPU8[$3 | 0]) << 2) + 42032 >> 2] ^ HEAP32[$0 + 16 >> 2] << 8;
     HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 1;
     continue;
    }
    break;
   };
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2];
   while (1) {
    if (HEAPU32[$0 + 20 >> 2] >= 32) {
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 32;
     continue;
    }
    break;
   };
   while (1) {
    if (HEAPU32[$0 + 20 >> 2] >= 4) {
     $2 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $2 + 4;
     HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2] ^ HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 16 >> 2] >>> 24 << 2) + 45104 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 16 & 255) << 2) + 44080 >> 2] ^ (HEAP32[((HEAP32[$0 + 16 >> 2] >>> 8 & 255) << 2) + 43056 >> 2] ^ HEAP32[((HEAP32[$0 + 16 >> 2] & 255) << 2) + 42032 >> 2]));
     HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] - 4;
     continue;
    }
    break;
   };
   HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 12 >> 2];
   if (HEAP32[$0 + 20 >> 2]) {
    while (1) {
     $2 = HEAP32[$0 + 16 >> 2] >>> 24 | 0;
     $3 = HEAP32[$0 + 24 >> 2];
     HEAP32[$0 + 24 >> 2] = $3 + 1;
     HEAP32[$0 + 16 >> 2] = HEAP32[(($2 ^ HEAPU8[$3 | 0]) << 2) + 42032 >> 2] ^ HEAP32[$0 + 16 >> 2] << 8;
     $2 = HEAP32[$0 + 20 >> 2] - 1 | 0;
     HEAP32[$0 + 20 >> 2] = $2;
     if ($2) {
      continue
     }
     break;
    }
   }
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] ^ -1;
   HEAP32[$1 + 28 >> 2] = (((HEAP32[$0 + 16 >> 2] >>> 8 & 65280) + (HEAP32[$0 + 16 >> 2] >>> 24 | 0) | 0) + ((HEAP32[$0 + 16 >> 2] & 65280) << 8) | 0) + ((HEAP32[$0 + 16 >> 2] & 255) << 24);
  }
  __stack_pointer = $1 + 32 | 0;
  __stack_pointer = $4 + 16 | 0;
  return HEAP32[$1 + 28 >> 2];
 }
 
 function adler32($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 8 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $0 = __stack_pointer - 32 | 0;
  HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] >>> 16;
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] & 65535;
  block : {
   if (HEAP32[$0 + 16 >> 2] == 1) {
    HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2]] + HEAP32[$0 + 24 >> 2];
    if (HEAPU32[$0 + 24 >> 2] >= 65521) {
     HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] - 65521
    }
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
    if (HEAPU32[$0 + 12 >> 2] >= 65521) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 65521
    }
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[$0 + 12 >> 2] << 16;
    break block;
   }
   if (!HEAP32[$0 + 20 >> 2]) {
    HEAP32[$0 + 28 >> 2] = 1;
    break block;
   }
   if (HEAPU32[$0 + 16 >> 2] < 16) {
    while (1) {
     $1 = HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = $1 - 1;
     if ($1) {
      $1 = HEAP32[$0 + 20 >> 2];
      HEAP32[$0 + 20 >> 2] = $1 + 1;
      HEAP32[$0 + 24 >> 2] = HEAPU8[$1 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      continue;
     }
     break;
    };
    if (HEAPU32[$0 + 24 >> 2] >= 65521) {
     HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] - 65521
    }
    HEAP32[$0 + 12 >> 2] = HEAPU32[$0 + 12 >> 2] % 65521;
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[$0 + 12 >> 2] << 16;
    break block;
   }
   while (1) {
    if (HEAPU32[$0 + 16 >> 2] >= 5552) {
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 5552;
     HEAP32[$0 + 8 >> 2] = 347;
     while (1) {
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2]] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 1 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 2 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 3 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 4 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 5 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 6 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 7 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 8 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 9 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 10 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 11 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 12 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 13 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 14 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 15 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + 16;
      $1 = HEAP32[$0 + 8 >> 2] - 1 | 0;
      HEAP32[$0 + 8 >> 2] = $1;
      if ($1) {
       continue
      }
      break;
     };
     HEAP32[$0 + 24 >> 2] = HEAPU32[$0 + 24 >> 2] % 65521;
     HEAP32[$0 + 12 >> 2] = HEAPU32[$0 + 12 >> 2] % 65521;
     continue;
    }
    break;
   };
   if (HEAP32[$0 + 16 >> 2]) {
    while (1) {
     if (HEAPU32[$0 + 16 >> 2] >= 16) {
      HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 16;
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2]] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 1 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 2 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 3 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 4 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 5 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 6 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 7 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 8 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 9 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 10 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 11 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 12 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 13 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 14 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAPU8[HEAP32[$0 + 20 >> 2] + 15 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + 16;
      continue;
     }
     break;
    };
    while (1) {
     $1 = HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = $1 - 1;
     if ($1) {
      $1 = HEAP32[$0 + 20 >> 2];
      HEAP32[$0 + 20 >> 2] = $1 + 1;
      HEAP32[$0 + 24 >> 2] = HEAPU8[$1 | 0] + HEAP32[$0 + 24 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + HEAP32[$0 + 12 >> 2];
      continue;
     }
     break;
    };
    HEAP32[$0 + 24 >> 2] = HEAPU32[$0 + 24 >> 2] % 65521;
    HEAP32[$0 + 12 >> 2] = HEAPU32[$0 + 12 >> 2] % 65521;
   }
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[$0 + 12 >> 2] << 16;
  }
  __stack_pointer = $3 + 16 | 0;
  return HEAP32[$0 + 28 >> 2];
 }
 
 function inflate_table($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 176 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 168 >> 2] = $0;
  HEAP32[$6 + 164 >> 2] = $1;
  HEAP32[$6 + 160 >> 2] = $2;
  HEAP32[$6 + 156 >> 2] = $3;
  HEAP32[$6 + 152 >> 2] = $4;
  HEAP32[$6 + 148 >> 2] = $5;
  HEAP32[$6 + 144 >> 2] = 0;
  while (1) {
   if (HEAPU32[$6 + 144 >> 2] <= 15) {
    HEAP16[($6 + 32 | 0) + (HEAP32[$6 + 144 >> 2] << 1) >> 1] = 0;
    HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 144 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$6 + 140 >> 2] = 0;
  while (1) {
   if (HEAPU32[$6 + 140 >> 2] < HEAPU32[$6 + 160 >> 2]) {
    $0 = ($6 + 32 | 0) + (HEAPU16[HEAP32[$6 + 164 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1] << 1) | 0;
    HEAP16[$0 >> 1] = HEAPU16[$0 >> 1] + 1;
    HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 140 >> 2] + 1;
    continue;
   }
   break;
  };
  HEAP32[$6 + 128 >> 2] = HEAP32[HEAP32[$6 + 152 >> 2] >> 2];
  HEAP32[$6 + 132 >> 2] = 15;
  while (1) {
   if (!(HEAPU16[($6 + 32 | 0) + (HEAP32[$6 + 132 >> 2] << 1) >> 1] | !HEAP32[$6 + 132 >> 2])) {
    HEAP32[$6 + 132 >> 2] = HEAP32[$6 + 132 >> 2] - 1;
    continue;
   }
   break;
  };
  if (HEAPU32[$6 + 128 >> 2] > HEAPU32[$6 + 132 >> 2]) {
   HEAP32[$6 + 128 >> 2] = HEAP32[$6 + 132 >> 2]
  }
  block1 : {
   if (!HEAP32[$6 + 132 >> 2]) {
    HEAP8[$6 + 88 | 0] = 64;
    HEAP8[$6 + 89 | 0] = 1;
    HEAP16[$6 + 90 >> 1] = 0;
    $1 = HEAP32[$6 + 156 >> 2];
    $0 = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $0 + 4;
    $1 = HEAPU16[$6 + 88 >> 1] | HEAPU16[$6 + 90 >> 1] << 16;
    HEAP16[$0 >> 1] = $1;
    HEAP16[$0 + 2 >> 1] = $1 >>> 16;
    $1 = HEAP32[$6 + 156 >> 2];
    $0 = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $0 + 4;
    $1 = HEAPU16[$6 + 88 >> 1] | HEAPU16[$6 + 90 >> 1] << 16;
    HEAP16[$0 >> 1] = $1;
    HEAP16[$0 + 2 >> 1] = $1 >>> 16;
    HEAP32[HEAP32[$6 + 152 >> 2] >> 2] = 1;
    HEAP32[$6 + 172 >> 2] = 0;
    break block1;
   }
   HEAP32[$6 + 136 >> 2] = 1;
   while (1) {
    if (!(HEAPU16[($6 + 32 | 0) + (HEAP32[$6 + 136 >> 2] << 1) >> 1] | HEAPU32[$6 + 136 >> 2] >= HEAPU32[$6 + 132 >> 2])) {
     HEAP32[$6 + 136 >> 2] = HEAP32[$6 + 136 >> 2] + 1;
     continue;
    }
    break;
   };
   if (HEAPU32[$6 + 128 >> 2] < HEAPU32[$6 + 136 >> 2]) {
    HEAP32[$6 + 128 >> 2] = HEAP32[$6 + 136 >> 2]
   }
   HEAP32[$6 + 116 >> 2] = 1;
   HEAP32[$6 + 144 >> 2] = 1;
   while (1) {
    if (HEAPU32[$6 + 144 >> 2] <= 15) {
     HEAP32[$6 + 116 >> 2] = HEAP32[$6 + 116 >> 2] << 1;
     HEAP32[$6 + 116 >> 2] = HEAP32[$6 + 116 >> 2] - HEAPU16[($6 + 32 | 0) + (HEAP32[$6 + 144 >> 2] << 1) >> 1];
     if (HEAP32[$6 + 116 >> 2] < 0) {
      HEAP32[$6 + 172 >> 2] = -1;
      break block1;
     } else {
      HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 144 >> 2] + 1;
      continue;
     }
    }
    break;
   };
   if (!(HEAP32[$6 + 116 >> 2] <= 0 | (HEAP32[$6 + 132 >> 2] == 1 ? HEAP32[$6 + 168 >> 2] : 0))) {
    HEAP32[$6 + 172 >> 2] = -1;
    break block1;
   }
   HEAP16[$6 + 2 >> 1] = 0;
   HEAP32[$6 + 144 >> 2] = 1;
   while (1) {
    if (HEAPU32[$6 + 144 >> 2] < 15) {
     $0 = HEAP32[$6 + 144 >> 2] << 1;
     HEAP16[(HEAP32[$6 + 144 >> 2] + 1 << 1) + $6 >> 1] = HEAPU16[$0 + ($6 + 32 | 0) >> 1] + HEAPU16[$0 + $6 >> 1];
     HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 144 >> 2] + 1;
     continue;
    }
    break;
   };
   HEAP32[$6 + 140 >> 2] = 0;
   while (1) {
    if (HEAPU32[$6 + 140 >> 2] < HEAPU32[$6 + 160 >> 2]) {
     if (HEAPU16[HEAP32[$6 + 164 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1]) {
      $1 = HEAP32[$6 + 148 >> 2];
      $2 = HEAP32[$6 + 140 >> 2];
      $3 = (HEAPU16[HEAP32[$6 + 164 >> 2] + ($2 << 1) >> 1] << 1) + $6 | 0;
      $0 = HEAPU16[$3 >> 1];
      HEAP16[$3 >> 1] = $0 + 1;
      HEAP16[($0 << 1) + $1 >> 1] = $2;
     }
     HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 140 >> 2] + 1;
     continue;
    }
    break;
   };
   block7 : {
    block6 : {
     switch (HEAP32[$6 + 168 >> 2]) {
     case 0:
      $0 = HEAP32[$6 + 148 >> 2];
      HEAP32[$6 + 76 >> 2] = $0;
      HEAP32[$6 + 80 >> 2] = $0;
      HEAP32[$6 + 72 >> 2] = 20;
      break block7;
     case 1:
      HEAP32[$6 + 80 >> 2] = 46128;
      HEAP32[$6 + 76 >> 2] = 46192;
      HEAP32[$6 + 72 >> 2] = 257;
      break block7;
     default:
      break block6;
     };
    }
    HEAP32[$6 + 80 >> 2] = 46256;
    HEAP32[$6 + 76 >> 2] = 46320;
    HEAP32[$6 + 72 >> 2] = 0;
   }
   HEAP32[$6 + 108 >> 2] = 0;
   HEAP32[$6 + 140 >> 2] = 0;
   HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 136 >> 2];
   HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 156 >> 2] >> 2];
   HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 128 >> 2];
   HEAP32[$6 + 120 >> 2] = 0;
   HEAP32[$6 + 96 >> 2] = -1;
   HEAP32[$6 + 112 >> 2] = 1 << HEAP32[$6 + 128 >> 2];
   HEAP32[$6 + 92 >> 2] = HEAP32[$6 + 112 >> 2] - 1;
   if (!(!(HEAP32[$6 + 168 >> 2] == 1 & HEAPU32[$6 + 112 >> 2] > 852) & (HEAP32[$6 + 168 >> 2] != 2 | HEAPU32[$6 + 112 >> 2] <= 592))) {
    HEAP32[$6 + 172 >> 2] = 1;
    break block1;
   }
   while (1) {
    HEAP8[$6 + 89 | 0] = HEAP32[$6 + 144 >> 2] - HEAP32[$6 + 120 >> 2];
    block10 : {
     if (HEAPU32[$6 + 72 >> 2] > HEAPU16[HEAP32[$6 + 148 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1] + 1 >>> 0) {
      HEAP8[$6 + 88 | 0] = 0;
      HEAP16[$6 + 90 >> 1] = HEAPU16[HEAP32[$6 + 148 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1];
      break block10;
     }
     $0 = HEAPU16[HEAP32[$6 + 148 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1];
     block11 : {
      if ($0 >>> 0 >= HEAPU32[$6 + 72 >> 2]) {
       HEAP8[$6 + 88 | 0] = HEAPU16[HEAP32[$6 + 76 >> 2] + ($0 - HEAP32[$6 + 72 >> 2] << 1) >> 1];
       HEAP16[$6 + 90 >> 1] = HEAPU16[HEAP32[$6 + 80 >> 2] + (HEAPU16[HEAP32[$6 + 148 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1] - HEAP32[$6 + 72 >> 2] << 1) >> 1];
       break block11;
      }
      HEAP8[$6 + 88 | 0] = 96;
      HEAP16[$6 + 90 >> 1] = 0;
     }
    }
    HEAP32[$6 + 104 >> 2] = 1 << HEAP32[$6 + 144 >> 2] - HEAP32[$6 + 120 >> 2];
    HEAP32[$6 + 100 >> 2] = 1 << HEAP32[$6 + 124 >> 2];
    HEAP32[$6 + 136 >> 2] = HEAP32[$6 + 100 >> 2];
    while (1) {
     HEAP32[$6 + 100 >> 2] = HEAP32[$6 + 100 >> 2] - HEAP32[$6 + 104 >> 2];
     $0 = HEAP32[$6 + 84 >> 2] + (HEAP32[$6 + 100 >> 2] + (HEAP32[$6 + 108 >> 2] >>> HEAP32[$6 + 120 >> 2] | 0) << 2) | 0;
     $1 = HEAPU16[$6 + 88 >> 1] | HEAPU16[$6 + 90 >> 1] << 16;
     HEAP16[$0 >> 1] = $1;
     HEAP16[$0 + 2 >> 1] = $1 >>> 16;
     if (HEAP32[$6 + 100 >> 2]) {
      continue
     }
     break;
    };
    HEAP32[$6 + 104 >> 2] = 1 << HEAP32[$6 + 144 >> 2] - 1;
    while (1) {
     if (HEAP32[$6 + 108 >> 2] & HEAP32[$6 + 104 >> 2]) {
      HEAP32[$6 + 104 >> 2] = HEAP32[$6 + 104 >> 2] >>> 1;
      continue;
     }
     break;
    };
    block12 : {
     if (HEAP32[$6 + 104 >> 2]) {
      HEAP32[$6 + 108 >> 2] = HEAP32[$6 + 108 >> 2] & HEAP32[$6 + 104 >> 2] - 1;
      HEAP32[$6 + 108 >> 2] = HEAP32[$6 + 104 >> 2] + HEAP32[$6 + 108 >> 2];
      break block12;
     }
     HEAP32[$6 + 108 >> 2] = 0;
    }
    HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 140 >> 2] + 1;
    $1 = ($6 + 32 | 0) + (HEAP32[$6 + 144 >> 2] << 1) | 0;
    $0 = HEAPU16[$1 >> 1] - 1 | 0;
    HEAP16[$1 >> 1] = $0;
    block13 : {
     if (!($0 & 65535)) {
      if (HEAP32[$6 + 144 >> 2] == HEAP32[$6 + 132 >> 2]) {
       break block13
      }
      HEAP32[$6 + 144 >> 2] = HEAPU16[HEAP32[$6 + 164 >> 2] + (HEAPU16[HEAP32[$6 + 148 >> 2] + (HEAP32[$6 + 140 >> 2] << 1) >> 1] << 1) >> 1];
     }
     if (!(HEAP32[$6 + 96 >> 2] == (HEAP32[$6 + 108 >> 2] & HEAP32[$6 + 92 >> 2]) | HEAPU32[$6 + 144 >> 2] <= HEAPU32[$6 + 128 >> 2])) {
      if (!HEAP32[$6 + 120 >> 2]) {
       HEAP32[$6 + 120 >> 2] = HEAP32[$6 + 128 >> 2]
      }
      HEAP32[$6 + 84 >> 2] = HEAP32[$6 + 84 >> 2] + (HEAP32[$6 + 136 >> 2] << 2);
      HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 144 >> 2] - HEAP32[$6 + 120 >> 2];
      HEAP32[$6 + 116 >> 2] = 1 << HEAP32[$6 + 124 >> 2];
      while (1) {
       block15 : {
        $0 = HEAP32[$6 + 124 >> 2] + HEAP32[$6 + 120 >> 2] | 0;
        if ($0 >>> 0 >= HEAPU32[$6 + 132 >> 2]) {
         break block15
        }
        HEAP32[$6 + 116 >> 2] = HEAP32[$6 + 116 >> 2] - HEAPU16[($6 + 32 | 0) + ($0 << 1) >> 1];
        if (HEAP32[$6 + 116 >> 2] <= 0) {
         break block15
        }
        HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 124 >> 2] + 1;
        HEAP32[$6 + 116 >> 2] = HEAP32[$6 + 116 >> 2] << 1;
        continue;
       }
       break;
      };
      HEAP32[$6 + 112 >> 2] = HEAP32[$6 + 112 >> 2] + (1 << HEAP32[$6 + 124 >> 2]);
      if (!(!(HEAP32[$6 + 168 >> 2] == 1 & HEAPU32[$6 + 112 >> 2] > 852) & (HEAP32[$6 + 168 >> 2] != 2 | HEAPU32[$6 + 112 >> 2] <= 592))) {
       HEAP32[$6 + 172 >> 2] = 1;
       break block1;
      }
      HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 108 >> 2] & HEAP32[$6 + 92 >> 2];
      HEAP8[HEAP32[HEAP32[$6 + 156 >> 2] >> 2] + (HEAP32[$6 + 96 >> 2] << 2) | 0] = HEAP32[$6 + 124 >> 2];
      HEAP8[(HEAP32[HEAP32[$6 + 156 >> 2] >> 2] + (HEAP32[$6 + 96 >> 2] << 2) | 0) + 1 | 0] = HEAP32[$6 + 128 >> 2];
      HEAP16[(HEAP32[HEAP32[$6 + 156 >> 2] >> 2] + (HEAP32[$6 + 96 >> 2] << 2) | 0) + 2 >> 1] = HEAP32[$6 + 84 >> 2] - HEAP32[HEAP32[$6 + 156 >> 2] >> 2] >> 2;
     }
     continue;
    }
    break;
   };
   if (HEAP32[$6 + 108 >> 2]) {
    HEAP8[$6 + 88 | 0] = 64;
    HEAP8[$6 + 89 | 0] = HEAP32[$6 + 144 >> 2] - HEAP32[$6 + 120 >> 2];
    HEAP16[$6 + 90 >> 1] = 0;
    $0 = HEAP32[$6 + 84 >> 2] + (HEAP32[$6 + 108 >> 2] << 2) | 0;
    $1 = HEAPU16[$6 + 88 >> 1] | HEAPU16[$6 + 90 >> 1] << 16;
    HEAP16[$0 >> 1] = $1;
    HEAP16[$0 + 2 >> 1] = $1 >>> 16;
   }
   $0 = HEAP32[$6 + 156 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$6 + 112 >> 2] << 2);
   HEAP32[HEAP32[$6 + 152 >> 2] >> 2] = HEAP32[$6 + 128 >> 2];
   HEAP32[$6 + 172 >> 2] = 0;
  }
  __stack_pointer = $6 + 176 | 0;
  return HEAP32[$6 + 172 >> 2];
 }
 
 function inflateStateCheck($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  block2 : {
   if (HEAP32[HEAP32[$1 + 8 >> 2] + 36 >> 2] ? !HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 8 >> 2] + 32 >> 2] : 1) {
    HEAP32[$1 + 12 >> 2] = 1;
    break block2;
   }
   HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 28 >> 2];
   block4 : {
    block3 : {
     if (!HEAP32[$1 + 4 >> 2] | HEAP32[HEAP32[$1 + 4 >> 2] >> 2] != HEAP32[$1 + 8 >> 2]) {
      break block3
     }
     $0 = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
     if ($0 >>> 0 < 16180) {
      break block3
     }
     if ($0 >>> 0 <= 16211) {
      break block4
     }
    }
    HEAP32[$1 + 12 >> 2] = 1;
    break block2;
   }
   HEAP32[$1 + 12 >> 2] = 0;
  }
  return HEAP32[$1 + 12 >> 2];
 }
 
 function nameConcat($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = strlen($0);
  $3 = strlen($1) + 1 | 0;
  $4 = emscripten_builtin_malloc($2 + $3 | 0);
  if ($2) {
   wasm2js_memory_copy($4, $0, $2)
  }
  if ($3) {
   wasm2js_memory_copy($2 + $4 | 0, $1, $3)
  }
  return $4;
 }
 
 function __getTypeName($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = strlen($0) + 1 | 0;
  $2 = emscripten_builtin_malloc($1);
  if ($2) {
   $0 = __memcpy($2, $0, $1)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function embind_init_builtin_28_29() {
  _embind_register_void(73672, 29389);
  _embind_register_bool(73696, 27643, 1, 0);
  _embind_register_integer(73708, 27210, 1, -128, 127);
  _embind_register_integer(73732, 27203, 1, -128, 127);
  _embind_register_integer(73720, 27201, 1, 0, 255);
  _embind_register_integer(73744, 25679, 2, -32768, 32767);
  _embind_register_integer(73756, 25670, 2, 0, 65535);
  _embind_register_integer(73768, 25694, 4, -2147483648, 2147483647);
  _embind_register_integer(73780, 25685, 4, 0, -1);
  _embind_register_integer(73792, 28096, 4, -2147483648, 2147483647);
  _embind_register_integer(73804, 28087, 4, 0, -1);
  legalfunc$_embind_register_bigint(73816, 28077, -2147483648, 2147483647);
  legalfunc$_embind_register_bigint(73828, 28068, 0, -1);
  _embind_register_float(73840, 26102, 4);
  _embind_register_float(73852, 28680, 8);
  _embind_register_std_string(35480, 28127);
  _embind_register_std_wstring(48608, 4, 28101);
  _embind_register_std_wstring(48680, 2, 28139);
  _embind_register_std_wstring(48756, 4, 28154);
  _embind_register_emval(35948);
  _embind_register_memory_view(48832, 0, 32879);
  _embind_register_memory_view(48872, 0, 32948);
  _embind_register_memory_view(37804, 1, 32909);
  _embind_register_memory_view(48912, 2, 32444);
  _embind_register_memory_view(48952, 3, 32475);
  _embind_register_memory_view(48992, 4, 32515);
  _embind_register_memory_view(49032, 5, 32544);
  _embind_register_memory_view(49072, 4, 32985);
  _embind_register_memory_view(49112, 5, 33015);
  _embind_register_memory_view(48872, 0, 32646);
  _embind_register_memory_view(37804, 1, 32613);
  _embind_register_memory_view(48912, 2, 32712);
  _embind_register_memory_view(48952, 3, 32678);
  _embind_register_memory_view(48992, 4, 32846);
  _embind_register_memory_view(49032, 5, 32812);
  _embind_register_memory_view(49152, 8, 32779);
  _embind_register_memory_view(49192, 9, 32745);
  _embind_register_memory_view(37884, 6, 32582);
  _embind_register_memory_view(49232, 7, 33054);
 }
 
 function jpeg_abort($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[$1 + 36 >> 2]]($0, 1);
   if (HEAP32[$0 + 16 >> 2]) {
    HEAP32[$0 + 312 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 200;
    return;
   }
   HEAP32[$0 + 20 >> 2] = 100;
  }
 }
 
 function jpeg_destroy($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[$1 + 40 >> 2]]($0)
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function jpeg_CreateDecompress($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  if (($1 | 0) != 90) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 13;
   HEAP32[$3 + 24 >> 2] = 90;
   HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  if (($2 | 0) != 488) {
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 22;
   HEAP32[$1 + 24 >> 2] = 488;
   HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $2;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 12 >> 2];
  wasm2js_memory_fill($0 + 4 | 0, 0, 484);
  HEAP32[$0 + 16 >> 2] = 1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = emscripten_builtin_malloc(84);
  if (!$1) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 56;
   HEAP32[$3 + 24 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  HEAP32[$1 + 48 >> 2] = 1e9;
  HEAP32[$1 + 40 >> 2] = 243;
  HEAP32[$1 + 36 >> 2] = 244;
  HEAP32[$1 + 32 >> 2] = 245;
  HEAP32[$1 + 28 >> 2] = 246;
  HEAP32[$1 + 24 >> 2] = 247;
  HEAP32[$1 + 20 >> 2] = 248;
  HEAP32[$1 + 16 >> 2] = 249;
  HEAP32[$1 + 12 >> 2] = 250;
  HEAP32[$1 + 8 >> 2] = 251;
  HEAP32[$1 + 4 >> 2] = 252;
  HEAP32[$1 >> 2] = 253;
  HEAP32[$1 + 52 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 84;
  HEAP32[$0 + 4 >> 2] = $1;
  $3 = getenv(31525);
  block : {
   if (!$3) {
    break block
   }
   HEAP8[$2 + 11 | 0] = 120;
   HEAP32[$2 >> 2] = $2 + 12;
   HEAP32[$2 + 4 >> 2] = $2 + 11;
   if ((sscanf($3, 30889, $2) | 0) <= 0) {
    break block
   }
   $3 = $1;
   $1 = HEAP32[$2 + 12 >> 2];
   HEAP32[$3 + 44 >> 2] = Math_imul((HEAPU8[$2 + 11 | 0] & 223) == 77 ? Math_imul($1, 1e3) : $1, 1e3);
  }
  __stack_pointer = $2 + 16 | 0;
  HEAP32[$0 + 312 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP32[$0 + 176 >> 2] = 0;
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP32[$0 + 184 >> 2] = 0;
  HEAP32[$0 + 188 >> 2] = 0;
  HEAP32[$0 + 192 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 172) | 0;
  HEAP32[$0 + 464 >> 2] = $1;
  HEAP32[$1 + 96 >> 2] = 0;
  HEAP32[$1 + 100 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 144;
  HEAP32[$1 + 8 >> 2] = 145;
  HEAP32[$1 + 4 >> 2] = 146;
  HEAP32[$1 >> 2] = 147;
  HEAP32[$1 + 104 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 144;
  HEAP32[$1 + 40 >> 2] = 144;
  HEAP32[$1 + 108 >> 2] = 0;
  HEAP32[$1 + 112 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 144;
  HEAP32[$1 + 48 >> 2] = 144;
  HEAP32[$1 + 116 >> 2] = 0;
  HEAP32[$1 + 120 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 144;
  HEAP32[$1 + 56 >> 2] = 144;
  HEAP32[$1 + 124 >> 2] = 0;
  HEAP32[$1 + 128 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 144;
  HEAP32[$1 + 132 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 144;
  HEAP32[$1 + 136 >> 2] = 0;
  HEAP32[$1 + 140 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 144;
  HEAP32[$1 + 72 >> 2] = 144;
  HEAP32[$1 + 76 >> 2] = 144;
  HEAP32[$1 + 80 >> 2] = 144;
  HEAP32[$1 + 144 >> 2] = 0;
  HEAP32[$1 + 148 >> 2] = 0;
  HEAP32[$1 + 84 >> 2] = 144;
  HEAP32[$1 + 152 >> 2] = 0;
  HEAP32[$1 + 156 >> 2] = 0;
  HEAP32[$1 + 160 >> 2] = 0;
  HEAP32[$1 + 92 >> 2] = 144;
  HEAP32[$1 + 32 >> 2] = 148;
  HEAP32[$1 + 88 >> 2] = 148;
  HEAP32[$0 + 216 >> 2] = 0;
  HEAP32[$0 + 440 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  $1 = HEAP32[$0 + 464 >> 2];
  HEAP32[$1 + 164 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 28) | 0;
  HEAP32[$0 + 460 >> 2] = $1;
  HEAP32[$1 + 24 >> 2] = 1;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 140;
  HEAP32[$1 + 8 >> 2] = 141;
  HEAP32[$1 + 4 >> 2] = 142;
  HEAP32[$1 >> 2] = 143;
  HEAP32[$0 + 20 >> 2] = 200;
 }
 
 function jpeg_destroy_decompress($0) {
  $0 = $0 | 0;
  jpeg_destroy($0);
 }
 
 function jpeg_read_header($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = HEAP32[$0 + 20 >> 2];
  if (($2 & -2) != 200) {
   $5 = HEAP32[$0 >> 2];
   HEAP32[$5 + 24 >> 2] = $2;
   HEAP32[$5 + 20 >> 2] = 21;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $2 = 1;
  block13 : {
   block4 : {
    block3 : {
     block1 : {
      block : {
       $5 = HEAP32[$0 + 20 >> 2];
       switch ($5 - 200 | 0) {
       case 0:
        break block;
       case 1:
        break block1;
       case 2:
        break block13;
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 10:
        break block3;
       default:
        break block4;
       };
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 4 >> 2]]($0);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 8 >> 2]]($0);
      HEAP32[$0 + 20 >> 2] = 201;
     }
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0;
     if (($2 | 0) != 1) {
      break block13
     }
     $2 = HEAP32[$0 + 36 >> 2];
     $5 = $2;
     block5 : {
      block6 : {
       switch ($2 - 1 | 0) {
       case 2:
        $3 = HEAP32[$0 + 216 >> 2];
        $4 = HEAP32[$3 + 176 >> 2];
        $5 = 2;
        $2 = 3;
        $6 = HEAP32[$3 + 88 >> 2];
        $7 = HEAP32[$3 >> 2];
        $3 = ($7 | 0) != 1;
        if (!(($6 | 0) != 2 | $3) & ($4 | 0) == 3) {
         break block5
        }
        if (!($3 | ($6 | 0) != 34 | ($4 | 0) != 35)) {
         $2 = 7;
         break block5;
        }
        if (!(($7 | 0) != 82 | ($6 | 0) != 71 | ($4 | 0) != 66)) {
         $2 = 2;
         break block5;
        }
        if (!(($7 | 0) != 114 | ($6 | 0) != 103 | ($4 | 0) != 98)) {
         $2 = 6;
         break block5;
        }
        if (HEAP32[$0 + 284 >> 2]) {
         break block5
        }
        if (HEAP32[$0 + 296 >> 2]) {
         $2 = 2;
         block10 : {
          block9 : {
           $4 = HEAPU8[$0 + 300 | 0];
           switch ($4 | 0) {
           case 0:
            break block5;
           case 1:
            break block9;
           default:
            break block10;
           };
          }
          $2 = 3;
          break block5;
         }
         $2 = HEAP32[$0 >> 2];
         HEAP32[$2 + 24 >> 2] = $4;
         HEAP32[$2 + 20 >> 2] = 116;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
         $2 = 3;
         break block5;
        }
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 32 >> 2] = $4;
        HEAP32[$3 + 28 >> 2] = $6;
        HEAP32[$3 + 24 >> 2] = $7;
        HEAP32[$3 + 20 >> 2] = 113;
        FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, 1);
        break block5;
       case 3:
        $2 = HEAP32[$0 + 216 >> 2];
        $4 = HEAP32[$2 + 264 >> 2];
        $6 = HEAP32[$2 >> 2];
        $3 = HEAP32[$2 + 88 >> 2];
        $2 = HEAP32[$2 + 176 >> 2];
        if (!(($6 | 0) != 1 | ($3 | 0) != 2 | (($2 | 0) != 3 | ($4 | 0) != 4))) {
         $5 = 4;
         $2 = 5;
         break block5;
        }
        $5 = 4;
        if (!(($6 | 0) != 67 | ($3 | 0) != 77 | (($2 | 0) != 89 | ($4 | 0) != 75))) {
         $2 = 4;
         break block5;
        }
        if (!HEAP32[$0 + 296 >> 2]) {
         $2 = 4;
         break block5;
        }
        $2 = 4;
        block11 : {
         block12 : {
          $4 = HEAPU8[$0 + 300 | 0];
          switch ($4 | 0) {
          case 2:
           break block12;
          case 0:
           break block5;
          default:
           break block11;
          };
         }
         $2 = 5;
         break block5;
        }
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 24 >> 2] = $4;
        HEAP32[$2 + 20 >> 2] = 116;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
        $2 = 5;
        break block5;
       case 0:
        break block5;
       default:
        break block6;
       };
      }
      $2 = 0;
      $5 = 0;
     }
     HEAP32[$0 + 44 >> 2] = $5;
     HEAP32[$0 + 40 >> 2] = $2;
     HEAP32[$0 + 136 >> 2] = 0;
     HEAP32[$0 + 96 >> 2] = 256;
     HEAP32[$0 + 88 >> 2] = 2;
     HEAP32[$0 + 92 >> 2] = 1;
     HEAP32[$0 + 80 >> 2] = 1;
     HEAP32[$0 + 84 >> 2] = 0;
     HEAP32[$0 + 72 >> 2] = 0;
     HEAP32[$0 + 76 >> 2] = 1;
     HEAP32[$0 + 64 >> 2] = 0;
     HEAP32[$0 + 68 >> 2] = 0;
     HEAP32[$0 + 56 >> 2] = 0;
     HEAP32[$0 + 60 >> 2] = 1072693248;
     HEAP32[$0 + 108 >> 2] = 0;
     HEAP32[$0 + 100 >> 2] = 0;
     HEAP32[$0 + 104 >> 2] = 0;
     HEAP32[$0 + 20 >> 2] = 202;
     $2 = HEAP32[$0 + 428 >> 2];
     HEAP32[$0 + 52 >> 2] = $2;
     HEAP32[$0 + 48 >> 2] = $2;
     $2 = 1;
     break block13;
    }
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0;
    break block13;
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 24 >> 2] = $5;
   HEAP32[$2 + 20 >> 2] = 21;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   $2 = 0;
  }
  if (($2 | 0) == 2) {
   if ($1) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 53;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
   }
   jpeg_abort($0);
  }
  return $2 | 0;
 }
 
 function jpeg_finish_decompress($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 20 >> 2];
  block1 : {
   if (!(HEAP32[$0 + 64 >> 2] | $1 - 205 >>> 0 > 1)) {
    if (HEAPU32[$0 + 140 >> 2] < HEAPU32[$0 + 116 >> 2]) {
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 69;
     FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] + 4 >> 2]]($0);
    HEAP32[$0 + 20 >> 2] = 210;
    break block1;
   }
   block3 : {
    switch ($1 - 207 | 0) {
    case 0:
     HEAP32[$0 + 20 >> 2] = 210;
     break block1;
    case 3:
     break block1;
    default:
     break block3;
    };
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 24 >> 2] = $1;
   HEAP32[$2 + 20 >> 2] = 21;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  block4 : {
   while (1) {
    $1 = HEAP32[$0 + 460 >> 2];
    if (HEAP32[$1 + 20 >> 2]) {
     break block4
    }
    if (FUNCTION_TABLE[HEAP32[$1 >> 2]]($0) | 0) {
     continue
    }
    break;
   };
   return 0;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 24 >> 2]]($0);
  jpeg_abort($0);
  return 1;
 }
 
 function jpeg_start_decompress($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block75 : {
   block2 : {
    block3 : {
     block1 : {
      block : {
       $2 = HEAP32[$0 + 20 >> 2];
       switch ($2 - 202 | 0) {
       case 0:
        break block;
       case 1:
        break block1;
       case 2:
        break block2;
       default:
        break block3;
       };
      }
      $12 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 28) | 0;
      HEAP32[$0 + 444 >> 2] = $12;
      HEAP32[$12 + 8 >> 2] = 0;
      HEAP32[$12 + 4 >> 2] = 221;
      HEAP32[$12 >> 2] = 222;
      $2 = HEAP32[$0 + 212 >> 2];
      if (($2 | 0) != 8) {
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 24 >> 2] = $2;
       HEAP32[$1 + 20 >> 2] = 16;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
      }
      $2 = HEAP32[$0 + 20 >> 2];
      if (($2 | 0) != 202) {
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 24 >> 2] = $2;
       HEAP32[$1 + 20 >> 2] = 21;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
      }
      $8 = HEAP32[$0 + 428 >> 2];
      $5 = Math_imul($8, HEAP32[$0 + 48 >> 2]);
      $3 = HEAP32[$0 + 52 >> 2];
      block4 : {
       if ($5 >>> 0 <= $3 >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2], $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 1;
        HEAP32[$0 + 328 >> 2] = 1;
        HEAP32[$0 + 116 >> 2] = $1;
        $2 = 1;
        break block4;
       }
       if ($5 >>> 0 <= $3 << 1 >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2] << 1, $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(HEAP32[$0 + 32 >> 2] << 1, HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 2;
        HEAP32[$0 + 328 >> 2] = 2;
        HEAP32[$0 + 116 >> 2] = $1;
        $2 = 2;
        break block4;
       }
       $2 = 3;
       if ($5 >>> 0 <= Math_imul($3, 3) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 3), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 3), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 3;
        HEAP32[$0 + 328 >> 2] = 3;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       if ($5 >>> 0 <= $3 << 2 >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2] << 2, $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(HEAP32[$0 + 32 >> 2] << 2, HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 4;
        HEAP32[$0 + 328 >> 2] = 4;
        HEAP32[$0 + 116 >> 2] = $1;
        $2 = 4;
        break block4;
       }
       $2 = 5;
       if ($5 >>> 0 <= Math_imul($3, 5) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 5), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 5), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 5;
        HEAP32[$0 + 328 >> 2] = 5;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 6;
       if ($5 >>> 0 <= Math_imul($3, 6) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 6), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 6), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 6;
        HEAP32[$0 + 328 >> 2] = 6;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 7;
       if ($5 >>> 0 <= Math_imul($3, 7) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 7), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 7), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 7;
        HEAP32[$0 + 328 >> 2] = 7;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       if ($5 >>> 0 <= $3 << 3 >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2] << 3, $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(HEAP32[$0 + 32 >> 2] << 3, HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 8;
        HEAP32[$0 + 328 >> 2] = 8;
        HEAP32[$0 + 116 >> 2] = $1;
        $2 = 8;
        break block4;
       }
       $2 = 9;
       if ($5 >>> 0 <= Math_imul($3, 9) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 9), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 9), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 9;
        HEAP32[$0 + 328 >> 2] = 9;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 10;
       if ($5 >>> 0 <= Math_imul($3, 10) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 10), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 10), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 10;
        HEAP32[$0 + 328 >> 2] = 10;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 11;
       if ($5 >>> 0 <= Math_imul($3, 11) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 11), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 11), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 11;
        HEAP32[$0 + 328 >> 2] = 11;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 12;
       if ($5 >>> 0 <= Math_imul($3, 12) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 12), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 12), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 12;
        HEAP32[$0 + 328 >> 2] = 12;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 13;
       if ($5 >>> 0 <= Math_imul($3, 13) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 13), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 13), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 13;
        HEAP32[$0 + 328 >> 2] = 13;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 14;
       if ($5 >>> 0 <= Math_imul($3, 14) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 14), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 14), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 14;
        HEAP32[$0 + 328 >> 2] = 14;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       $2 = 15;
       $1 = HEAP32[$0 + 28 >> 2];
       if ($5 >>> 0 <= Math_imul($3, 15) >>> 0) {
        (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul($1, 15), $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
        $1 = jdiv_round_up(Math_imul(HEAP32[$0 + 32 >> 2], 15), HEAP32[$0 + 428 >> 2]);
        HEAP32[$0 + 324 >> 2] = 15;
        HEAP32[$0 + 328 >> 2] = 15;
        HEAP32[$0 + 116 >> 2] = $1;
        break block4;
       }
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up($1 << 4, $8)), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
       $1 = jdiv_round_up(HEAP32[$0 + 32 >> 2] << 4, HEAP32[$0 + 428 >> 2]);
       HEAP32[$0 + 324 >> 2] = 16;
       HEAP32[$0 + 328 >> 2] = 16;
       HEAP32[$0 + 116 >> 2] = $1;
       $2 = 16;
      }
      $3 = HEAP32[$0 + 36 >> 2];
      block5 : {
       if (($3 | 0) <= 0) {
        break block5
       }
       $8 = $3 & 7;
       $1 = HEAP32[$0 + 216 >> 2];
       if ($3 >>> 0 >= 8) {
        $5 = $3 & 2147483640;
        $3 = 0;
        while (1) {
         HEAP32[$1 + 656 >> 2] = $2;
         HEAP32[$1 + 652 >> 2] = $2;
         HEAP32[$1 + 568 >> 2] = $2;
         HEAP32[$1 + 564 >> 2] = $2;
         HEAP32[$1 + 480 >> 2] = $2;
         HEAP32[$1 + 476 >> 2] = $2;
         HEAP32[$1 + 392 >> 2] = $2;
         HEAP32[$1 + 388 >> 2] = $2;
         HEAP32[$1 + 304 >> 2] = $2;
         HEAP32[$1 + 300 >> 2] = $2;
         HEAP32[$1 + 216 >> 2] = $2;
         HEAP32[$1 + 212 >> 2] = $2;
         HEAP32[$1 + 128 >> 2] = $2;
         HEAP32[$1 + 124 >> 2] = $2;
         HEAP32[$1 + 40 >> 2] = $2;
         HEAP32[$1 + 36 >> 2] = $2;
         $1 = $1 + 704 | 0;
         $3 = $3 + 8 | 0;
         if (($5 | 0) != ($3 | 0)) {
          continue
         }
         break;
        };
        if (!$8) {
         break block5
        }
       }
       $3 = 0;
       while (1) {
        HEAP32[$1 + 40 >> 2] = $2;
        HEAP32[$1 + 36 >> 2] = $2;
        $1 = $1 + 88 | 0;
        $3 = $3 + 1 | 0;
        if (($8 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 + 36 >> 2];
      if (($2 | 0) > 0) {
       $3 = HEAP32[$0 + 216 >> 2];
       while (1) {
        $1 = HEAP32[$0 + 324 >> 2];
        block7 : {
         if (!HEAP32[$0 + 68 >> 2]) {
          $2 = 1;
          $7 = 1;
          $9 = HEAP32[$0 + 76 >> 2] ? 8 : 4;
          block6 : {
           if (($9 | 0) < ($1 | 0)) {
            break block6
           }
           $8 = HEAP32[$3 + 8 >> 2] << 1;
           $5 = HEAP32[$0 + 316 >> 2];
           while (1) {
            if (($5 | 0) % (Math_imul($7, $8) | 0) | 0) {
             break block6
            }
            $7 = $7 << 1;
            if (($9 | 0) >= (Math_imul($7, $1) | 0)) {
             continue
            }
            break;
           };
          }
          $1 = Math_imul($1, $7);
          HEAP32[$3 + 36 >> 2] = $1;
          $14 = $3 + 36 | 0;
          $7 = HEAP32[$0 + 328 >> 2];
          if (($9 | 0) < ($7 | 0)) {
           break block7
          }
          $8 = HEAP32[$3 + 12 >> 2] << 1;
          $5 = HEAP32[$0 + 320 >> 2];
          while (1) {
           if (($5 | 0) % (Math_imul($2, $8) | 0) | 0) {
            break block7
           }
           $2 = $2 << 1;
           if (($9 | 0) >= (Math_imul($7, $2) | 0)) {
            continue
           }
           break;
          };
          break block7;
         }
         HEAP32[$3 + 36 >> 2] = $1;
         $14 = $3 + 36 | 0;
         $7 = HEAP32[$0 + 328 >> 2];
         $2 = 1;
        }
        $5 = Math_imul($2, $7);
        HEAP32[$3 + 40 >> 2] = $5;
        $2 = $5 << 1;
        block8 : {
         if (($1 | 0) > ($2 | 0)) {
          HEAP32[$14 >> 2] = $2;
          break block8;
         }
         $2 = $1 << 1;
         if (($2 | 0) < ($5 | 0)) {
          HEAP32[$3 + 40 >> 2] = $2
         }
         $2 = $1;
        }
        (wasm2js_i32$0 = $3, wasm2js_i32$1 = jdiv_round_up(Math_imul(Math_imul(HEAP32[$3 + 8 >> 2], HEAP32[$0 + 28 >> 2]), $2), Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 316 >> 2]))), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
        (wasm2js_i32$0 = $3, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$3 + 40 >> 2], Math_imul(HEAP32[$3 + 12 >> 2], HEAP32[$0 + 32 >> 2])), Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 320 >> 2]))), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
        $3 = $3 + 88 | 0;
        $2 = HEAP32[$0 + 36 >> 2];
        $6 = $6 + 1 | 0;
        if (($2 | 0) > ($6 | 0)) {
         continue
        }
        break;
       };
      }
      block9 : {
       block11 : {
        block10 : {
         $7 = HEAP32[$0 + 44 >> 2];
         switch ($7 - 1 | 0) {
         case 1:
         case 5:
          break block10;
         case 0:
          break block9;
         default:
          break block11;
         };
        }
        $7 = 3;
        break block9;
       }
       if (($2 | 0) <= 0) {
        $7 = 0;
        break block9;
       }
       $6 = $2 & 3;
       $3 = HEAP32[$0 + 216 >> 2];
       block12 : {
        if ($2 >>> 0 < 4) {
         $7 = 0;
         break block12;
        }
        $1 = $2 & 2147483644;
        $7 = 0;
        $2 = 0;
        while (1) {
         $7 = ((((HEAP32[$3 + 52 >> 2] != 0) + $7 | 0) + (HEAP32[$3 + 140 >> 2] != 0) | 0) + (HEAP32[$3 + 228 >> 2] != 0) | 0) + (HEAP32[$3 + 316 >> 2] != 0) | 0;
         $3 = $3 + 352 | 0;
         $2 = $2 + 4 | 0;
         if (($1 | 0) != ($2 | 0)) {
          continue
         }
         break;
        };
        if (!$6) {
         break block9
        }
       }
       $2 = 0;
       while (1) {
        $7 = (HEAP32[$3 + 52 >> 2] != 0) + $7 | 0;
        $3 = $3 + 88 | 0;
        $2 = $2 + 1 | 0;
        if (($6 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 120 >> 2] = $7;
      HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 84 >> 2] ? 1 : $7;
      if (use_merged_upsample($0)) {
       $2 = HEAP32[$0 + 320 >> 2]
      } else {
       $2 = 1
      }
      HEAP32[$0 + 128 >> 2] = $2;
      $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1280) | 0;
      wasm2js_memory_fill($2, 0, 512);
      $6 = $2 + 512 | 0;
      HEAP32[$0 + 336 >> 2] = $6;
      while (1) {
       HEAP8[$4 + $6 | 0] = $4;
       $1 = $4 | 1;
       HEAP8[$1 + $6 | 0] = $1;
       $1 = $4 | 2;
       HEAP8[$1 + $6 | 0] = $1;
       $1 = $4 | 3;
       HEAP8[$1 + $6 | 0] = $1;
       $1 = $4 | 4;
       HEAP8[$1 + $6 | 0] = $1;
       $1 = $4 | 5;
       HEAP8[$1 + $6 | 0] = $1;
       $1 = $4 | 6;
       HEAP8[$1 + $6 | 0] = $1;
       $1 = $4 | 7;
       HEAP8[$1 + $6 | 0] = $1;
       $4 = $4 + 8 | 0;
       if (($4 | 0) != 256) {
        continue
       }
       break;
      };
      wasm2js_memory_fill($2 + 768 | 0, 255, 512);
      if (!(!(!HEAP32[$0 + 116 >> 2] | !HEAP32[$0 + 112 >> 2]) & HEAP32[$0 + 120 >> 2] > 0)) {
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 20 >> 2] = 33;
       FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
      }
      HEAP32[$12 + 12 >> 2] = 0;
      $1 = use_merged_upsample($0);
      HEAP32[$12 + 20 >> 2] = 0;
      HEAP32[$12 + 24 >> 2] = 0;
      HEAP32[$12 + 16 >> 2] = $1;
      block15 : {
       if (!HEAP32[$0 + 84 >> 2]) {
        HEAP32[$0 + 108 >> 2] = 0;
        HEAP32[$0 + 100 >> 2] = 0;
        HEAP32[$0 + 104 >> 2] = 0;
        break block15;
       }
       if (!HEAP32[$0 + 64 >> 2]) {
        HEAP32[$0 + 108 >> 2] = 0;
        HEAP32[$0 + 100 >> 2] = 0;
        HEAP32[$0 + 104 >> 2] = 0;
       }
       if (HEAP32[$0 + 68 >> 2]) {
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 20 >> 2] = 48;
        FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
       }
       block16 : {
        if (HEAP32[$0 + 120 >> 2] != 3) {
         HEAP32[$0 + 136 >> 2] = 0;
         HEAP32[$0 + 108 >> 2] = 0;
         HEAP32[$0 + 100 >> 2] = 1;
         HEAP32[$0 + 104 >> 2] = 0;
         break block16;
        }
        if (HEAP32[$0 + 136 >> 2]) {
         HEAP32[$0 + 104 >> 2] = 1;
         break block16;
        }
        if (HEAP32[$0 + 92 >> 2]) {
         HEAP32[$0 + 108 >> 2] = 1;
         break block16;
        }
        HEAP32[$0 + 100 >> 2] = 1;
       }
       if (HEAP32[$0 + 100 >> 2]) {
        $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 88) | 0;
        HEAP32[$0 + 484 >> 2] = $1;
        HEAP32[$1 + 68 >> 2] = 0;
        HEAP32[$1 + 12 >> 2] = 254;
        HEAP32[$1 + 8 >> 2] = 255;
        HEAP32[$1 >> 2] = 256;
        HEAP32[$1 + 52 >> 2] = 0;
        if (HEAP32[$0 + 120 >> 2] >= 5) {
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 57;
         HEAP32[$1 + 24 >> 2] = 4;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        }
        $15 = HEAP32[$0 + 96 >> 2];
        if (($15 | 0) >= 257) {
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 59;
         HEAP32[$1 + 24 >> 2] = 256;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         $15 = HEAP32[$0 + 96 >> 2];
        }
        $10 = HEAP32[$0 + 120 >> 2];
        $1 = $10 - 1 | 0;
        $8 = $1 & -8;
        $9 = $1 & 7;
        $19 = HEAP32[$0 + 484 >> 2];
        $5 = ($10 | 0) < 2;
        $6 = $10 - 2 >>> 0 < 7;
        $2 = 1;
        while (1) {
         $4 = $2;
         $2 = $2 + 1 | 0;
         $3 = $2;
         block17 : {
          if ($5) {
           break block17
          }
          if (!$6) {
           $1 = Math_imul($2, $2);
           $1 = Math_imul($1, $1);
           $1 = Math_imul($1, $1);
           $7 = 0;
           while (1) {
            $3 = Math_imul($1, $3);
            $7 = $7 + 8 | 0;
            if (($8 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
           if (!$9) {
            break block17
           }
          }
          $7 = 0;
          while (1) {
           $3 = Math_imul($2, $3);
           $7 = $7 + 1 | 0;
           if (($9 | 0) != ($7 | 0)) {
            continue
           }
           break;
          };
         }
         if (($3 | 0) <= ($15 | 0)) {
          continue
         }
         break;
        };
        $1 = 1;
        if ($4 >>> 0 <= 1) {
         $2 = HEAP32[$0 >> 2];
         HEAP32[$2 + 24 >> 2] = $3;
         HEAP32[$2 + 20 >> 2] = 58;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        }
        $6 = $19 + 32 | 0;
        block18 : {
         if (($10 | 0) <= 0) {
          break block18
         }
         $9 = $10 & 3;
         $2 = 0;
         $3 = 0;
         block19 : {
          if ($10 >>> 0 >= 4) {
           $8 = $10 & 2147483644;
           $3 = Math_imul($4, $4);
           $5 = Math_imul($3, $3);
           $3 = 0;
           $14 = 0;
           while (1) {
            $11 = $6 + ($3 << 2) | 0;
            HEAP32[$11 + 12 >> 2] = $4;
            HEAP32[$11 + 8 >> 2] = $4;
            HEAP32[$11 + 4 >> 2] = $4;
            HEAP32[$11 >> 2] = $4;
            $3 = $3 + 4 | 0;
            $1 = Math_imul($1, $5);
            $14 = $14 + 4 | 0;
            if (($8 | 0) != ($14 | 0)) {
             continue
            }
            break;
           };
           if (!$9) {
            break block19
           }
          }
          while (1) {
           HEAP32[$6 + ($3 << 2) >> 2] = $4;
           $3 = $3 + 1 | 0;
           $1 = Math_imul($1, $4);
           $2 = $2 + 1 | 0;
           if (($9 | 0) != ($2 | 0)) {
            continue
           }
           break;
          };
         }
         $3 = $6 + ((HEAP32[$0 + 44 >> 2] == 2) << 2) | 0;
         $2 = HEAP32[$3 >> 2];
         $7 = $2 + 1 | 0;
         $2 = Math_imul($7, ($1 | 0) / ($2 | 0) | 0);
         if (($15 | 0) < ($2 | 0)) {
          break block18
         }
         while (1) {
          HEAP32[$3 >> 2] = $7;
          $3 = 1;
          $1 = $2;
          block20 : {
           if (($10 | 0) == 1) {
            break block20
           }
           while (1) {
            $4 = ((HEAP32[$0 + 44 >> 2] == 2 ? HEAP32[($3 << 2) + 52288 >> 2] : $3) << 2) + $6 | 0;
            $2 = HEAP32[$4 >> 2];
            $5 = $2 + 1 | 0;
            $2 = Math_imul($5, ($1 | 0) / ($2 | 0) | 0);
            if (($2 | 0) > ($15 | 0)) {
             break block20
            }
            HEAP32[$4 >> 2] = $5;
            $1 = $2;
            $3 = $3 + 1 | 0;
            if (($10 | 0) != ($3 | 0)) {
             continue
            }
            break;
           };
          }
          $3 = $6 + ((HEAP32[$0 + 44 >> 2] == 2) << 2) | 0;
          $2 = HEAP32[$3 >> 2];
          $7 = $2 + 1 | 0;
          $2 = Math_imul($7, ($1 | 0) / ($2 | 0) | 0);
          if (($15 | 0) >= ($2 | 0)) {
           continue
          }
          break;
         };
        }
        $2 = HEAP32[$0 + 120 >> 2];
        $4 = HEAP32[$0 >> 2];
        HEAP32[$4 + 24 >> 2] = $1;
        block21 : {
         if (($2 | 0) == 3) {
          HEAP32[$4 + 28 >> 2] = HEAP32[$19 + 32 >> 2];
          HEAP32[$4 + 32 >> 2] = HEAP32[$19 + 36 >> 2];
          HEAP32[$4 + 36 >> 2] = HEAP32[$19 + 40 >> 2];
          $7 = 96;
          $2 = $4;
          break block21;
         }
         $7 = 97;
         $2 = HEAP32[$0 >> 2];
        }
        HEAP32[$4 + 20 >> 2] = $7;
        FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
        $17 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, $1, HEAP32[$0 + 120 >> 2]) | 0;
        $3 = HEAP32[$0 + 120 >> 2];
        if (($3 | 0) > 0) {
         $2 = $1;
         while (1) {
          $5 = $13 << 2;
          $16 = HEAP32[$5 + $6 >> 2];
          $4 = ($2 | 0) / ($16 | 0) | 0;
          if (($16 | 0) > 0) {
           $11 = $4 & 2147483644;
           $18 = $4 & 3;
           $20 = $5 + $17 | 0;
           $9 = $16 - 1 | 0;
           $8 = $9 >>> 1 | 0;
           $14 = 0;
           $5 = $4 >>> 0 < 4;
           while (1) {
            $7 = Math_imul($4, $14);
            if (($7 | 0) < ($1 | 0)) {
             $21 = (Math_imul($14, 255) + $8 >>> 0) / ($9 >>> 0) | 0;
             while (1) {
              block22 : {
               if (($4 | 0) <= 0) {
                break block22
               }
               $10 = 0;
               $15 = 0;
               $3 = 0;
               if (!$5) {
                while (1) {
                 HEAP8[(HEAP32[$20 >> 2] + $7 | 0) + $3 | 0] = $21;
                 HEAP8[((HEAP32[$20 >> 2] + $7 | 0) + $3 | 0) + 1 | 0] = $21;
                 HEAP8[((HEAP32[$20 >> 2] + $7 | 0) + $3 | 0) + 2 | 0] = $21;
                 HEAP8[((HEAP32[$20 >> 2] + $7 | 0) + $3 | 0) + 3 | 0] = $21;
                 $3 = $3 + 4 | 0;
                 $15 = $15 + 4 | 0;
                 if (($11 | 0) != ($15 | 0)) {
                  continue
                 }
                 break;
                };
                if (!$18) {
                 break block22
                }
               }
               while (1) {
                HEAP8[(HEAP32[$20 >> 2] + $7 | 0) + $3 | 0] = $21;
                $3 = $3 + 1 | 0;
                $10 = $10 + 1 | 0;
                if (($10 | 0) != ($18 | 0)) {
                 continue
                }
                break;
               };
              }
              $7 = $2 + $7 | 0;
              if (($7 | 0) < ($1 | 0)) {
               continue
              }
              break;
             };
            }
            $14 = $14 + 1 | 0;
            if (($16 | 0) != ($14 | 0)) {
             continue
            }
            break;
           };
           $3 = HEAP32[$0 + 120 >> 2];
          }
          $2 = $4;
          $13 = $13 + 1 | 0;
          if (($13 | 0) < ($3 | 0)) {
           continue
          }
          break;
         };
        }
        HEAP32[$19 + 20 >> 2] = $1;
        HEAP32[$19 + 16 >> 2] = $17;
        create_colorindex($0);
        if (!(HEAP32[$0 + 88 >> 2] != 2 | HEAP32[$0 + 120 >> 2] <= 0)) {
         $2 = (HEAP32[$0 + 112 >> 2] << 1) + 4 | 0;
         $1 = HEAP32[$0 + 484 >> 2] + 68 | 0;
         $3 = 0;
         while (1) {
          (wasm2js_i32$0 = $1 + ($3 << 2) | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $2) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$0 + 120 >> 2]) {
           continue
          }
          break;
         };
        }
        HEAP32[$12 + 20 >> 2] = HEAP32[$0 + 484 >> 2];
       }
       if (!(HEAP32[$0 + 108 >> 2] | HEAP32[$0 + 104 >> 2])) {
        break block15
       }
       $1 = 0;
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 44) | 0;
       HEAP32[$0 + 484 >> 2] = $6;
       HEAP32[$6 + 40 >> 2] = 0;
       HEAP32[$6 + 32 >> 2] = 0;
       HEAP32[$6 + 12 >> 2] = 262;
       HEAP32[$6 >> 2] = 263;
       if (HEAP32[$0 + 120 >> 2] != 3) {
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 20 >> 2] = 48;
        FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
       }
       (wasm2js_i32$0 = $6, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 128) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       while (1) {
        $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, 4096) | 0;
        $4 = $1 << 2;
        HEAP32[$4 + HEAP32[$6 + 24 >> 2] >> 2] = $2;
        $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, 4096) | 0;
        HEAP32[($4 + HEAP32[$6 + 24 >> 2] | 0) + 4 >> 2] = $2;
        $1 = $1 + 2 | 0;
        if (($1 | 0) != 32) {
         continue
        }
        break;
       };
       HEAP32[$6 + 28 >> 2] = 1;
       block25 : {
        if (HEAP32[$0 + 108 >> 2]) {
         $3 = 8;
         $4 = HEAP32[$0 + 96 >> 2];
         block24 : {
          if (($4 | 0) < 8) {
           $2 = 58
          } else {
           if ($4 >>> 0 < 257) {
            break block24
           }
           $3 = 256;
           $2 = 59;
          }
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 24 >> 2] = $3;
          HEAP32[$1 + 20 >> 2] = $2;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, $4, 3) | 0;
         HEAP32[$6 + 20 >> 2] = $4;
         HEAP32[$6 + 16 >> 2] = $1;
         break block25;
        }
        HEAP32[$6 + 16 >> 2] = 0;
       }
       if (HEAP32[$0 + 88 >> 2]) {
        HEAP32[$0 + 88 >> 2] = 2;
        (wasm2js_i32$0 = $6, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, Math_imul(HEAP32[$0 + 112 >> 2], 6) + 12 | 0) | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
        init_error_limit($0);
       }
       HEAP32[$12 + 24 >> 2] = HEAP32[$0 + 484 >> 2];
      }
      if (!HEAP32[$0 + 68 >> 2]) {
       block28 : {
        if (HEAP32[$12 + 16 >> 2]) {
         $1 = 0;
         $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 48) | 0;
         HEAP32[$0 + 476 >> 2] = $4;
         HEAP32[$4 + 8 >> 2] = 0;
         HEAP32[$4 >> 2] = 223;
         $2 = Math_imul(HEAP32[$0 + 120 >> 2], HEAP32[$0 + 112 >> 2]);
         HEAP32[$4 + 40 >> 2] = $2;
         block26 : {
          if (HEAP32[$0 + 320 >> 2] == 2) {
           HEAP32[$4 + 12 >> 2] = 224;
           HEAP32[$4 + 4 >> 2] = 225;
           $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $2) | 0;
           break block26;
          }
          HEAP32[$4 + 12 >> 2] = 226;
          HEAP32[$4 + 4 >> 2] = 227;
         }
         HEAP32[$4 + 32 >> 2] = $1;
         $4 = HEAP32[$0 + 40 >> 2];
         $1 = HEAP32[$0 + 476 >> 2];
         (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
         (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
         (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
         $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
         HEAP32[$1 + 28 >> 2] = $8;
         $5 = HEAP32[$1 + 24 >> 2];
         $3 = HEAP32[$1 + 20 >> 2];
         $6 = HEAP32[$1 + 16 >> 2];
         $1 = 0;
         $2 = -128;
         block27 : {
          if (($4 | 0) == 7) {
           while (1) {
            $4 = $1 << 2;
            HEAP32[$4 + $6 >> 2] = Math_imul($2, 183763) + 32768 >> 16;
            HEAP32[$3 + $4 >> 2] = Math_imul($2, 232260) + 32768 >> 16;
            HEAP32[$4 + $5 >> 2] = Math_imul($2, -93603);
            HEAP32[$4 + $8 >> 2] = Math_imul($2, -45107) + 32768;
            $2 = $2 + 1 | 0;
            $1 = $1 + 1 | 0;
            if (($1 | 0) != 256) {
             continue
            }
            break block27;
           }
          }
          while (1) {
           $4 = $1 << 2;
           HEAP32[$4 + $6 >> 2] = Math_imul($2, 91881) + 32768 >> 16;
           HEAP32[$3 + $4 >> 2] = Math_imul($2, 116130) + 32768 >> 16;
           HEAP32[$4 + $5 >> 2] = Math_imul($2, -46802);
           HEAP32[$4 + $8 >> 2] = Math_imul($2, -22553) + 32768;
           $2 = $2 + 1 | 0;
           $1 = $1 + 1 | 0;
           if (($1 | 0) != 256) {
            continue
           }
           break;
          };
         }
         break block28;
        }
        $4 = 0;
        $7 = 0;
        $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 36) | 0;
        HEAP32[$0 + 480 >> 2] = $5;
        HEAP32[$5 >> 2] = 149;
        block32 : {
         block31 : {
          block29 : {
           $2 = HEAP32[$0 + 40 >> 2];
           if ($2 >>> 0 > 7) {
            break block29
           }
           block30 : {
            $1 = 1 << $2;
            if (!($1 & 204)) {
             if ($1 & 48) {
              break block30
             }
             if (($2 | 0) != 1) {
              break block29
             }
             if (HEAP32[$0 + 36 >> 2] != 1) {
              break block31
             }
             break block32;
            }
            if (HEAP32[$0 + 36 >> 2] != 3) {
             break block31
            }
            break block32;
           }
           if (HEAP32[$0 + 36 >> 2] != 4) {
            break block31
           }
           break block32;
          }
          if (HEAP32[$0 + 36 >> 2] > 0) {
           break block32
          }
         }
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 11;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        }
        block33 : {
         if (!HEAP32[$0 + 304 >> 2]) {
          break block33
         }
         block34 : {
          switch (HEAP32[$0 + 40 >> 2] - 2 | 0) {
          case 0:
          case 4:
           break block33;
          default:
           break block34;
          };
         }
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 28;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        }
        block44 : {
         block62 : {
          block61 : {
           block60 : {
            block37 : {
             block39 : {
              block38 : {
               block40 : {
                block36 : {
                 block35 : {
                  $2 = HEAP32[$0 + 44 >> 2];
                  switch ($2 - 1 | 0) {
                  case 0:
                   break block35;
                  case 1:
                   break block36;
                  case 3:
                   break block38;
                  case 4:
                   break block39;
                  case 5:
                   break block40;
                  default:
                   break block37;
                  };
                 }
                 HEAP32[$0 + 120 >> 2] = 1;
                 block43 : {
                  switch (HEAP32[$0 + 40 >> 2] - 1 | 0) {
                  case 0:
                  case 2:
                  case 6:
                   HEAP32[$5 + 4 >> 2] = 150;
                   $3 = HEAP32[$0 + 36 >> 2];
                   if (($3 | 0) < 2) {
                    break block44
                   }
                   $2 = $3 - 1 | 0;
                   $6 = $2 & 7;
                   $4 = HEAP32[$0 + 216 >> 2];
                   $1 = 1;
                   if ($3 - 2 >>> 0 >= 7) {
                    $2 = $2 & -8;
                    while (1) {
                     $3 = $4 + Math_imul($1, 88) | 0;
                     HEAP32[$3 + 668 >> 2] = 0;
                     HEAP32[$3 + 580 >> 2] = 0;
                     HEAP32[$3 + 492 >> 2] = 0;
                     HEAP32[$3 + 404 >> 2] = 0;
                     HEAP32[$3 + 316 >> 2] = 0;
                     HEAP32[$3 + 228 >> 2] = 0;
                     HEAP32[$3 + 140 >> 2] = 0;
                     HEAP32[$3 + 52 >> 2] = 0;
                     $1 = $1 + 8 | 0;
                     $7 = $7 + 8 | 0;
                     if (($2 | 0) != ($7 | 0)) {
                      continue
                     }
                     break;
                    };
                    if (!$6) {
                     break block44
                    }
                   }
                   $2 = 0;
                   while (1) {
                    HEAP32[($4 + Math_imul($1, 88) | 0) + 52 >> 2] = 0;
                    $1 = $1 + 1 | 0;
                    $2 = $2 + 1 | 0;
                    if (($6 | 0) != ($2 | 0)) {
                     continue
                    }
                    break;
                   };
                   break block44;
                  case 1:
                   block48 : {
                    block47 : {
                     switch (HEAP32[$0 + 304 >> 2]) {
                     case 0:
                      HEAP32[$5 + 4 >> 2] = 151;
                      break block48;
                     case 1:
                      HEAP32[$5 + 4 >> 2] = 152;
                      break block48;
                     default:
                      break block47;
                     };
                    }
                    $1 = HEAP32[$0 >> 2];
                    HEAP32[$1 + 20 >> 2] = 28;
                    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
                   }
                   $1 = HEAP32[$0 + 480 >> 2];
                   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
                   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
                   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
                   HEAP32[$1 + 32 >> 2] = $3;
                   $6 = HEAP32[$1 + 28 >> 2];
                   $4 = HEAP32[$1 + 24 >> 2];
                   $2 = 0;
                   while (1) {
                    $1 = $2 << 2;
                    HEAP32[$1 + $4 >> 2] = Math_imul($2, 19595);
                    HEAP32[$1 + $6 >> 2] = Math_imul($2, 38470);
                    HEAP32[$1 + $3 >> 2] = Math_imul($2, 7471) + 32768;
                    $5 = $2 | 1;
                    $1 = $5 << 2;
                    HEAP32[$1 + $4 >> 2] = Math_imul($5, 19595);
                    HEAP32[$1 + $6 >> 2] = Math_imul($5, 38470);
                    HEAP32[$1 + $3 >> 2] = Math_imul($5, 7471) + 32768;
                    $2 = $2 + 2 | 0;
                    if (($2 | 0) != 256) {
                     continue
                    }
                    break;
                   };
                   break block44;
                  default:
                   break block43;
                  };
                 }
                 $1 = HEAP32[$0 >> 2];
                 HEAP32[$1 + 20 >> 2] = 28;
                 FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
                 break block44;
                }
                HEAP32[$0 + 120 >> 2] = 3;
                block52 : {
                 switch (HEAP32[$0 + 40 >> 2] - 1 | 0) {
                 case 0:
                  HEAP32[$5 + 4 >> 2] = 153;
                  break block44;
                 case 2:
                  HEAP32[$5 + 4 >> 2] = 154;
                  build_ycc_rgb_table($0);
                  break block44;
                 case 6:
                  HEAP32[$5 + 4 >> 2] = 154;
                  $1 = HEAP32[$0 + 480 >> 2];
                  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
                  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
                  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
                  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
                  HEAP32[$1 + 20 >> 2] = $5;
                  $3 = HEAP32[$1 + 16 >> 2];
                  $6 = HEAP32[$1 + 12 >> 2];
                  $1 = HEAP32[$1 + 8 >> 2];
                  $2 = -128;
                  while (1) {
                   $8 = $4 << 2;
                   HEAP32[$8 + $1 >> 2] = Math_imul($2, 183763) + 32768 >> 16;
                   HEAP32[$6 + $8 >> 2] = Math_imul($2, 232260) + 32768 >> 16;
                   HEAP32[$3 + $8 >> 2] = Math_imul($2, -93603);
                   HEAP32[$5 + $8 >> 2] = Math_imul($2, -45107) + 32768;
                   $2 = $2 + 1 | 0;
                   $4 = $4 + 1 | 0;
                   if (($4 | 0) != 256) {
                    continue
                   }
                   break;
                  };
                  break block44;
                 case 1:
                  block56 : {
                   switch (HEAP32[$0 + 304 >> 2]) {
                   case 0:
                    HEAP32[$5 + 4 >> 2] = 155;
                    break block44;
                   case 1:
                    HEAP32[$5 + 4 >> 2] = 156;
                    break block44;
                   default:
                    break block56;
                   };
                  }
                  $1 = HEAP32[$0 >> 2];
                  HEAP32[$1 + 20 >> 2] = 28;
                  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
                  break block44;
                 default:
                  break block52;
                 };
                }
                $1 = HEAP32[$0 >> 2];
                HEAP32[$1 + 20 >> 2] = 28;
                FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
                break block44;
               }
               if (HEAP32[$0 + 40 >> 2] != 6) {
                $1 = HEAP32[$0 >> 2];
                HEAP32[$1 + 20 >> 2] = 28;
                FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
               }
               HEAP32[$0 + 120 >> 2] = 3;
               block59 : {
                switch (HEAP32[$0 + 304 >> 2]) {
                case 0:
                 HEAP32[$5 + 4 >> 2] = 155;
                 break block44;
                case 1:
                 HEAP32[$5 + 4 >> 2] = 156;
                 break block44;
                default:
                 break block59;
                };
               }
               $1 = HEAP32[$0 >> 2];
               HEAP32[$1 + 20 >> 2] = 28;
               FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
               break block44;
              }
              $1 = HEAP32[$0 + 40 >> 2];
              if (($1 | 0) != 5) {
               break block60
              }
              HEAP32[$0 + 120 >> 2] = 4;
              HEAP32[$5 + 4 >> 2] = 157;
              build_ycc_rgb_table($0);
              break block44;
             }
             $1 = HEAP32[$0 + 40 >> 2];
             if (($1 | 0) != 4) {
              break block60
             }
             $1 = HEAP32[$0 + 216 >> 2];
             if (!HEAP32[$1 + 52 >> 2] | HEAP32[$1 + 140 >> 2] | (HEAP32[$1 + 228 >> 2] | !HEAP32[$1 + 316 >> 2])) {
              break block61
             }
             HEAP32[$0 + 120 >> 2] = 2;
             HEAP32[$1 + 228 >> 2] = 1;
             HEAP32[$1 + 140 >> 2] = 1;
             HEAP32[$5 + 4 >> 2] = 158;
             $1 = HEAP32[$0 + 480 >> 2];
             (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
             (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
             $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
             HEAP32[$1 + 32 >> 2] = $3;
             $6 = HEAP32[$1 + 28 >> 2];
             $4 = HEAP32[$1 + 24 >> 2];
             $2 = 0;
             while (1) {
              $1 = $2 << 2;
              HEAP32[$1 + $4 >> 2] = Math_imul($2, 19595);
              HEAP32[$1 + $6 >> 2] = Math_imul($2, 38470);
              HEAP32[$1 + $3 >> 2] = Math_imul($2, 7471) + 32768;
              $5 = $2 | 1;
              $1 = $5 << 2;
              HEAP32[$1 + $4 >> 2] = Math_imul($5, 19595);
              HEAP32[$1 + $6 >> 2] = Math_imul($5, 38470);
              HEAP32[$1 + $3 >> 2] = Math_imul($5, 7471) + 32768;
              $2 = $2 + 2 | 0;
              if (($2 | 0) != 256) {
               continue
              }
              break;
             };
             break block44;
            }
            $1 = HEAP32[$0 + 40 >> 2];
           }
           if (($1 | 0) == ($2 | 0)) {
            break block62
           }
          }
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 20 >> 2] = 28;
          FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
         }
         $4 = HEAP32[$0 + 36 >> 2];
         block63 : {
          if (($4 | 0) <= 0) {
           $1 = 0;
           break block63;
          }
          $3 = $4 & 3;
          $6 = HEAP32[$0 + 216 >> 2];
          $1 = 0;
          $2 = 0;
          if ($4 >>> 0 >= 4) {
           $4 = $4 & 2147483644;
           while (1) {
            $8 = $1;
            $1 = $6 + Math_imul($2, 88) | 0;
            $1 = ((($8 + (HEAP32[$1 + 52 >> 2] != 0) | 0) + (HEAP32[$1 + 140 >> 2] != 0) | 0) + (HEAP32[$1 + 228 >> 2] != 0) | 0) + (HEAP32[$1 + 316 >> 2] != 0) | 0;
            $2 = $2 + 4 | 0;
            $7 = $7 + 4 | 0;
            if (($4 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
           if (!$3) {
            break block63
           }
          }
          $4 = 0;
          while (1) {
           $1 = (HEAP32[($6 + Math_imul($2, 88) | 0) + 52 >> 2] != 0) + $1 | 0;
           $2 = $2 + 1 | 0;
           $4 = $4 + 1 | 0;
           if (($3 | 0) != ($4 | 0)) {
            continue
           }
           break;
          };
         }
         HEAP32[$0 + 120 >> 2] = $1;
         HEAP32[$5 + 4 >> 2] = 159;
        }
        HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 84 >> 2] ? 1 : HEAP32[$0 + 120 >> 2];
        $3 = 0;
        $13 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 160) | 0;
        HEAP32[$0 + 476 >> 2] = $13;
        HEAP32[$13 + 8 >> 2] = 0;
        HEAP32[$13 + 4 >> 2] = 232;
        HEAP32[$13 >> 2] = 233;
        if (HEAP32[$0 + 308 >> 2]) {
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 26;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        }
        if (HEAP32[$0 + 36 >> 2] > 0) {
         $9 = $13 + 150 | 0;
         $8 = $13 + 140 | 0;
         $11 = $13 + 52 | 0;
         $5 = $13 + 100 | 0;
         $1 = HEAP32[$0 + 216 >> 2];
         while (1) {
          if (HEAP32[$1 + 52 >> 2]) {
           $16 = HEAP32[$0 + 320 >> 2];
           $18 = HEAP32[$0 + 316 >> 2];
           $6 = HEAP32[$0 + 324 >> 2];
           $4 = HEAP32[$1 + 36 >> 2];
           $2 = HEAP32[$1 + 8 >> 2];
           $10 = $3 << 2;
           $17 = (Math_imul(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 12 >> 2]) | 0) / HEAP32[$0 + 328 >> 2] | 0;
           HEAP32[$10 + $5 >> 2] = $17;
           $4 = (Math_imul($2, $4) | 0) / ($6 | 0) | 0;
           block64 : {
            if (!(($4 | 0) != ($18 | 0) | ($16 | 0) != ($17 | 0))) {
             $4 = 52;
             $2 = 234;
             break block64;
            }
            $2 = ($18 | 0) != $4 << 1;
            block65 : {
             if (!($2 | ($16 | 0) != ($17 | 0))) {
              HEAP32[$10 + $11 >> 2] = 235;
              break block65;
             }
             if (!($2 | ($16 | 0) != $17 << 1)) {
              HEAP32[$10 + $11 >> 2] = 236;
              break block65;
             }
             block66 : {
              $2 = $4;
              $4 = ($18 | 0) / ($4 | 0) | 0;
              if ($18 - Math_imul($2, $4) | 0) {
               break block66
              }
              $2 = ($16 | 0) / ($17 | 0) | 0;
              if ($16 - Math_imul($2, $17) | 0) {
               break block66
              }
              HEAP32[$10 + $11 >> 2] = 237;
              HEAP8[$3 + $8 | 0] = $4;
              HEAP8[$3 + $9 | 0] = $2;
              break block65;
             }
             $2 = HEAP32[$0 >> 2];
             HEAP32[$2 + 20 >> 2] = 39;
             FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
            }
            $2 = HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2];
            $4 = 12;
            $2 = FUNCTION_TABLE[$2 | 0]($0, 1, jround_up(HEAP32[$0 + 112 >> 2], HEAP32[$0 + 316 >> 2]), HEAP32[$0 + 320 >> 2]) | 0;
           }
           HEAP32[$10 + ($4 + $13 | 0) >> 2] = $2;
          }
          $1 = $1 + 88 | 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
           continue
          }
          break;
         };
        }
       }
       $1 = HEAP32[$0 + 108 >> 2];
       $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 28) | 0;
       HEAP32[$0 + 456 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = 0;
       HEAP32[$3 + 12 >> 2] = 0;
       HEAP32[$3 >> 2] = 228;
       if (HEAP32[$0 + 84 >> 2]) {
        block67 : {
         $6 = HEAP32[$0 + 320 >> 2];
         HEAP32[$3 + 16 >> 2] = $6;
         $4 = Math_imul(HEAP32[$0 + 120 >> 2], HEAP32[$0 + 112 >> 2]);
         $2 = HEAP32[$0 + 4 >> 2];
         if ($1) {
          $1 = HEAP32[$2 + 16 >> 2];
          (wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[$1 | 0]($0, 1, 0, $4, jround_up(HEAP32[$0 + 116 >> 2], $6), HEAP32[$3 + 16 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          break block67;
         }
         (wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0, 1, $4, $6) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
        }
       }
      }
      $2 = 0;
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 84) | 0;
      HEAP32[$0 + 472 >> 2] = $1;
      HEAP32[$1 >> 2] = 160;
      if (HEAP32[$0 + 36 >> 2] > 0) {
       $6 = $1 + 44 | 0;
       $1 = HEAP32[$0 + 216 >> 2];
       while (1) {
        $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 256) | 0;
        HEAP32[$1 + 84 >> 2] = $4;
        wasm2js_memory_fill($4, 0, 256);
        HEAP32[$6 + ($2 << 2) >> 2] = -1;
        $1 = $1 + 88 | 0;
        $2 = $2 + 1 | 0;
        if (($2 | 0) < HEAP32[$0 + 36 >> 2]) {
         continue
        }
        break;
       };
      }
      block69 : {
       if (HEAP32[$0 + 228 >> 2]) {
        $1 = 0;
        $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 192) | 0;
        HEAP32[$0 + 468 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = 195;
        HEAP32[$2 >> 2] = 196;
        wasm2js_memory_fill($2 + 60 | 0, 0, 128);
        HEAP8[$2 + 188 | 0] = 113;
        block68 : {
         if (!HEAP32[$0 + 224 >> 2]) {
          break block68
         }
         $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, HEAP32[$0 + 36 >> 2] << 8) | 0;
         HEAP32[$0 + 160 >> 2] = $2;
         if (HEAP32[$0 + 36 >> 2] <= 0) {
          break block68
         }
         while (1) {
          wasm2js_memory_fill($2, 255, 256);
          $2 = $2 + 256 | 0;
          $1 = $1 + 1 | 0;
          if (($1 | 0) < HEAP32[$0 + 36 >> 2]) {
           continue
          }
          break;
         };
        }
        break block69;
       }
       $3 = 0;
       $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 220) | 0;
       HEAP32[$0 + 468 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = 202;
       HEAP32[$2 >> 2] = 203;
       block70 : {
        if (!HEAP32[$0 + 224 >> 2]) {
         HEAP32[$2 + 92 >> 2] = 0;
         HEAP32[$2 + 96 >> 2] = 0;
         HEAP32[$2 + 84 >> 2] = 0;
         HEAP32[$2 + 88 >> 2] = 0;
         HEAP32[$2 + 76 >> 2] = 0;
         HEAP32[$2 + 80 >> 2] = 0;
         HEAP32[$2 + 68 >> 2] = 0;
         HEAP32[$2 + 72 >> 2] = 0;
         break block70;
        }
        $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, HEAP32[$0 + 36 >> 2] << 8) | 0;
        HEAP32[$0 + 160 >> 2] = $1;
        if (HEAP32[$0 + 36 >> 2] > 0) {
         while (1) {
          wasm2js_memory_fill($1, 255, 256);
          $1 = $1 + 256 | 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
           continue
          }
          break;
         }
        }
        HEAP32[$2 + 56 >> 2] = 0;
        HEAP32[$2 + 60 >> 2] = 0;
        HEAP32[$2 + 48 >> 2] = 0;
        HEAP32[$2 + 52 >> 2] = 0;
       }
      }
      $3 = 0;
      $2 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
      block71 : {
       if (HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] ? 1 : HEAP32[$0 + 64 >> 2]) {
        $2 = FUNCTION_TABLE[$2 | 0]($0, 1, 116) | 0;
        if (HEAP32[$0 + 36 >> 2] > 0) {
         $5 = $2 + 72 | 0;
         $1 = HEAP32[$0 + 216 >> 2];
         while (1) {
          $8 = HEAP32[$1 + 12 >> 2];
          $6 = HEAP32[$0 + 224 >> 2];
          $4 = HEAP32[HEAP32[$0 + 4 >> 2] + 20 >> 2];
          (wasm2js_i32$0 = $5 + ($3 << 2) | 0, wasm2js_i32$1 = FUNCTION_TABLE[$4 | 0]($0, 1, 1, jround_up(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 8 >> 2]), jround_up(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 12 >> 2]), $6 ? Math_imul($8, 3) : $8) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          $1 = $1 + 88 | 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
           continue
          }
          break;
         };
        }
        HEAP32[$2 + 12 >> 2] = 210;
        HEAP32[$2 + 4 >> 2] = 211;
        $1 = $2 + 72 | 0;
        break block71;
       }
       $2 = FUNCTION_TABLE[$2 | 0]($0, 1, 1396) | 0;
       $1 = $2 + 116 | 0;
       if (!HEAP32[$0 + 436 >> 2]) {
        wasm2js_memory_fill($1, 0, 1280)
       }
       HEAP32[$2 + 32 >> 2] = $1;
       HEAP32[$2 + 12 >> 2] = 212;
       HEAP32[$2 + 4 >> 2] = 213;
       HEAP32[$2 + 68 >> 2] = $2 + 1268;
       HEAP32[$2 + 64 >> 2] = $2 + 1140;
       HEAP32[$2 + 60 >> 2] = $2 + 1012;
       HEAP32[$2 + 56 >> 2] = $2 + 884;
       HEAP32[$2 + 52 >> 2] = $2 + 756;
       HEAP32[$2 + 48 >> 2] = $2 + 628;
       HEAP32[$2 + 44 >> 2] = $2 + 500;
       HEAP32[$2 + 40 >> 2] = $2 + 372;
       HEAP32[$2 + 36 >> 2] = $2 + 244;
       $1 = 0;
      }
      HEAP32[$2 + 112 >> 2] = 0;
      HEAP32[$2 + 8 >> 2] = 214;
      HEAP32[$2 >> 2] = 215;
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$0 + 452 >> 2] = $2;
      if (!HEAP32[$0 + 68 >> 2]) {
       $1 = 0;
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 80) | 0;
       HEAP32[$0 + 448 >> 2] = $11;
       HEAP32[$11 >> 2] = 217;
       $3 = HEAP32[$0 + 328 >> 2];
       block72 : {
        if (HEAP32[HEAP32[$0 + 476 >> 2] + 8 >> 2]) {
         if (($3 | 0) <= 1) {
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 20 >> 2] = 48;
          FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
          $3 = HEAP32[$0 + 328 >> 2];
         }
         $9 = HEAP32[$0 + 448 >> 2];
         $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, HEAP32[$0 + 36 >> 2] << 3) | 0;
         HEAP32[$9 + 60 >> 2] = $2;
         $4 = HEAP32[$0 + 36 >> 2];
         HEAP32[$9 + 64 >> 2] = $2 + ($4 << 2);
         if (($4 | 0) > 0) {
          $8 = $3 + 4 | 0;
          $2 = HEAP32[$0 + 216 >> 2];
          while (1) {
           if (HEAP32[$2 + 52 >> 2]) {
            $5 = (Math_imul(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 12 >> 2]) | 0) / HEAP32[$0 + 328 >> 2] | 0;
            $3 = Math_imul($5, $8);
            $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, $3 << 3) | 0;
            $6 = $1 << 2;
            $4 = $4 + ($5 << 2) | 0;
            HEAP32[$6 + HEAP32[$9 + 60 >> 2] >> 2] = $4;
            HEAP32[$6 + HEAP32[$9 + 64 >> 2] >> 2] = $4 + ($3 << 2);
            $4 = HEAP32[$0 + 36 >> 2];
           }
           $2 = $2 + 88 | 0;
           $1 = $1 + 1 | 0;
           if (($4 | 0) > ($1 | 0)) {
            continue
           }
           break;
          };
         }
         $3 = HEAP32[$0 + 328 >> 2] + 2 | 0;
         break block72;
        }
        HEAP32[$11 + 52 >> 2] = $3;
        $4 = HEAP32[$0 + 36 >> 2];
       }
       if (($4 | 0) > 0) {
        $4 = $11 + 8 | 0;
        $2 = HEAP32[$0 + 216 >> 2];
        $1 = 0;
        while (1) {
         if (HEAP32[$2 + 52 >> 2]) {
          (wasm2js_i32$0 = $4 + ($1 << 2) | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, Math_imul(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 28 >> 2]), Math_imul((Math_imul(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 12 >> 2]) | 0) / HEAP32[$0 + 328 >> 2] | 0, $3)) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1
         }
         $2 = $2 + 88 | 0;
         $1 = $1 + 1 | 0;
         if (($1 | 0) < HEAP32[$0 + 36 >> 2]) {
          continue
         }
         break;
        };
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 24 >> 2]]($0);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 8 >> 2]]($0);
      $6 = HEAP32[$0 + 8 >> 2];
      if (!(!HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] | (HEAP32[$0 + 64 >> 2] | !$6))) {
       $2 = HEAP32[$0 + 224 >> 2];
       $4 = HEAP32[$0 + 36 >> 2];
       HEAP32[$6 + 4 >> 2] = 0;
       $1 = HEAP32[$0 + 332 >> 2];
       HEAP32[$6 + 12 >> 2] = 0;
       HEAP32[$6 + 8 >> 2] = Math_imul($1, $2 ? Math_imul($4, 3) + 2 | 0 : $4);
       HEAP32[$6 + 16 >> 2] = HEAP32[$0 + 108 >> 2] ? 3 : 2;
       HEAP32[$12 + 12 >> 2] = HEAP32[$12 + 12 >> 2] + 1;
      }
      if (HEAP32[$0 + 64 >> 2]) {
       HEAP32[$0 + 20 >> 2] = 207;
       return 1;
      }
      HEAP32[$0 + 20 >> 2] = 203;
     }
     block74 : {
      if (!HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2]) {
       break block74
      }
      $4 = HEAP32[$0 + 8 >> 2];
      while (1) {
       if ($4) {
        FUNCTION_TABLE[HEAP32[$4 >> 2]]($0)
       }
       block76 : {
        $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0;
        switch ($2 | 0) {
        case 2:
         break block74;
        case 0:
         break block75;
        default:
         break block76;
        };
       }
       $4 = HEAP32[$0 + 8 >> 2];
       if (!$4 | ($2 & -3) != 1) {
        continue
       }
       $1 = HEAP32[$4 + 4 >> 2] + 1 | 0;
       HEAP32[$4 + 4 >> 2] = $1;
       $2 = $1;
       $1 = HEAP32[$4 + 8 >> 2];
       if (($2 | 0) < ($1 | 0)) {
        continue
       }
       HEAP32[$4 + 8 >> 2] = $1 + HEAP32[$0 + 332 >> 2];
       continue;
      };
     }
     HEAP32[$0 + 152 >> 2] = HEAP32[$0 + 144 >> 2];
     break block2;
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 20 >> 2] = 21;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   if (HEAP32[$0 + 20 >> 2] != 204) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] >> 2]]($0);
    HEAP32[$0 + 20 >> 2] = 204;
    HEAP32[$0 + 140 >> 2] = 0;
   }
   block77 : {
    if (HEAP32[HEAP32[$0 + 444 >> 2] + 8 >> 2]) {
     $6 = $0 + 140 | 0;
     $4 = HEAP32[$0 + 140 >> 2];
     while (1) {
      $1 = HEAP32[$0 + 116 >> 2];
      if ($1 >>> 0 > $4 >>> 0) {
       $2 = HEAP32[$0 + 8 >> 2];
       if ($2) {
        HEAP32[$2 + 8 >> 2] = $1;
        HEAP32[$2 + 4 >> 2] = $4;
        FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
        $4 = HEAP32[$0 + 140 >> 2];
       }
       $2 = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] + 4 >> 2]]($0, 0, $6, 0);
       $1 = $4;
       $4 = HEAP32[$0 + 140 >> 2];
       if (($1 | 0) != ($4 | 0)) {
        continue
       }
       break block77;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] + 4 >> 2]]($0);
      FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] >> 2]]($0);
      $4 = 0;
      HEAP32[$0 + 140 >> 2] = 0;
      if (HEAP32[HEAP32[$0 + 444 >> 2] + 8 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 68 >> 2] ? 206 : 205;
    $2 = 1;
   }
  }
  return $2 | 0;
 }
 
 function jpeg_read_scanlines($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $3 = HEAP32[$0 + 20 >> 2];
  if (($3 | 0) != 205) {
   $5 = HEAP32[$0 >> 2];
   HEAP32[$5 + 24 >> 2] = $3;
   HEAP32[$5 + 20 >> 2] = 21;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $5 = HEAP32[$0 + 116 >> 2];
  $6 = HEAP32[$0 + 140 >> 2];
  block : {
   if ($5 >>> 0 <= $6 >>> 0) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 126;
    FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
    $2 = 0;
    break block;
   }
   $3 = HEAP32[$0 + 8 >> 2];
   if ($3) {
    HEAP32[$3 + 8 >> 2] = $5;
    HEAP32[$3 + 4 >> 2] = $6;
    FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
   }
   HEAP32[$4 + 12 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] + 4 >> 2]]($0, $1, $4 + 12 | 0, $2);
   $2 = HEAP32[$4 + 12 >> 2];
   HEAP32[$0 + 140 >> 2] = $2 + HEAP32[$0 + 140 >> 2];
  }
  __stack_pointer = $4 + 16 | 0;
  return $2 | 0;
 }
 
 function jpeg_stdio_src($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 + 24 >> 2];
  if (!$2) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 4132) | 0;
   HEAP32[$0 + 24 >> 2] = $2;
  }
  HEAP32[$2 + 28 >> 2] = $1;
  HEAP32[$2 + 24 >> 2] = 135;
  HEAP32[$2 + 20 >> 2] = 136;
  HEAP32[$2 + 16 >> 2] = 137;
  HEAP32[$2 + 12 >> 2] = 138;
  HEAP32[$2 + 8 >> 2] = 139;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
 }
 
 function skip_input_data($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  if (($1 | 0) > 0) {
   $2 = HEAP32[$0 + 24 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   if ($3 >>> 0 < $1 >>> 0) {
    while (1) {
     FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0;
     $1 = $1 - $3 | 0;
     $3 = HEAP32[$2 + 4 >> 2];
     if ($1 >>> 0 > $3 >>> 0) {
      continue
     }
     break;
    }
   }
   HEAP32[$2 + 4 >> 2] = $3 - $1;
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $1;
  }
 }
 
 function fill_input_buffer($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 24 >> 2];
  $3 = $2 + 32 | 0;
  $1 = fread($3, 1, 4096, HEAP32[$2 + 28 >> 2]);
  if (!$1) {
   if (HEAP32[$2 + 4128 >> 2]) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 43;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 123;
   FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
   HEAP16[$2 + 32 >> 1] = 55807;
   $1 = 2;
  }
  HEAP32[$2 + 4128 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 >> 2] = $3;
  return 1;
 }
 
 function init_source($0) {
  $0 = $0 | 0;
  HEAP32[HEAP32[$0 + 24 >> 2] + 4128 >> 2] = 1;
 }
 
 function finish_input_pass($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] + 8 >> 2]]($0);
  HEAP32[HEAP32[$0 + 460 >> 2] >> 2] = 143;
 }
 
 function start_input_pass($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = 1;
  $1 = HEAP32[$0 + 340 >> 2];
  block1 : {
   block : {
    if (($1 | 0) == 1) {
     $1 = HEAP32[$0 + 344 >> 2];
     HEAP32[$0 + 360 >> 2] = HEAP32[$1 + 28 >> 2];
     $2 = HEAP32[$1 + 32 >> 2];
     HEAP32[$0 + 364 >> 2] = $2;
     HEAP32[$1 + 64 >> 2] = 1;
     HEAP32[$1 + 56 >> 2] = 1;
     HEAP32[$1 + 60 >> 2] = 1;
     HEAP32[$1 + 72 >> 2] = 1;
     HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 36 >> 2];
     $5 = $1;
     $1 = HEAP32[$1 + 12 >> 2];
     $2 = ($2 >>> 0) % ($1 >>> 0) | 0;
     HEAP32[$5 + 76 >> 2] = $2 ? $2 : $1;
     HEAP32[$0 + 368 >> 2] = 1;
     HEAP32[$0 + 372 >> 2] = 0;
     break block;
    }
    if ($1 - 5 >>> 0 <= 4294967291) {
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 24 >> 2] = $1;
     HEAP32[$2 + 20 >> 2] = 27;
     HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 4;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2], Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 316 >> 2]))), HEAP32[wasm2js_i32$0 + 360 >> 2] = wasm2js_i32$1;
    HEAP32[$0 + 368 >> 2] = 0;
    HEAP32[$0 + 364 >> 2] = HEAP32[$0 + 332 >> 2];
    if (HEAP32[$0 + 340 >> 2] <= 0) {
     break block1
    }
    $6 = $0 + 372 | 0;
    $8 = $0 + 344 | 0;
    while (1) {
     $1 = HEAP32[($4 << 2) + $8 >> 2];
     $3 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 56 >> 2] = $3;
     $7 = HEAP32[$1 + 12 >> 2];
     HEAP32[$1 + 60 >> 2] = $7;
     $2 = Math_imul($3, $7);
     HEAP32[$1 + 64 >> 2] = $2;
     HEAP32[$1 + 68 >> 2] = Math_imul($3, HEAP32[$1 + 36 >> 2]);
     $5 = HEAPU32[$1 + 28 >> 2] % ($3 >>> 0) | 0;
     HEAP32[$1 + 72 >> 2] = $5 ? $5 : $3;
     $5 = $1;
     $1 = HEAPU32[$1 + 32 >> 2] % ($7 >>> 0) | 0;
     HEAP32[$5 + 76 >> 2] = $1 ? $1 : $7;
     if (($2 + HEAP32[$0 + 368 >> 2] | 0) >= 11) {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 20 >> 2] = 14;
      FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
     }
     block2 : {
      if (($2 | 0) <= 0) {
       break block2
      }
      $3 = 0;
      $1 = $2;
      $7 = $1 & 3;
      if ($7) {
       while (1) {
        $5 = HEAP32[$0 + 368 >> 2];
        HEAP32[$0 + 368 >> 2] = $5 + 1;
        HEAP32[$6 + ($5 << 2) >> 2] = $4;
        $1 = $1 - 1 | 0;
        $3 = $3 + 1 | 0;
        if (($7 | 0) != ($3 | 0)) {
         continue
        }
        break;
       }
      }
      if ($2 >>> 0 < 4) {
       break block2
      }
      while (1) {
       $2 = HEAP32[$0 + 368 >> 2];
       HEAP32[$0 + 368 >> 2] = $2 + 1;
       HEAP32[$6 + ($2 << 2) >> 2] = $4;
       $2 = HEAP32[$0 + 368 >> 2];
       HEAP32[$0 + 368 >> 2] = $2 + 1;
       HEAP32[$6 + ($2 << 2) >> 2] = $4;
       $2 = HEAP32[$0 + 368 >> 2];
       HEAP32[$0 + 368 >> 2] = $2 + 1;
       HEAP32[$6 + ($2 << 2) >> 2] = $4;
       $2 = HEAP32[$0 + 368 >> 2];
       HEAP32[$0 + 368 >> 2] = $2 + 1;
       HEAP32[$6 + ($2 << 2) >> 2] = $4;
       $2 = $1 - 5 | 0;
       $1 = $1 - 4 | 0;
       if ($2 >>> 0 < 4294967294) {
        continue
       }
       break;
      };
     }
     $3 = HEAP32[$0 + 340 >> 2];
     $4 = $4 + 1 | 0;
     if (($3 | 0) > ($4 | 0)) {
      continue
     }
     break;
    };
    if (($3 | 0) <= 0) {
     break block1
    }
   }
   $4 = $0 + 164 | 0;
   $7 = $0 + 344 | 0;
   $1 = 0;
   while (1) {
    $6 = HEAP32[$7 + ($1 << 2) >> 2];
    if (!HEAP32[$6 + 80 >> 2]) {
     $2 = HEAP32[$6 + 16 >> 2];
     if (!(HEAP32[$4 + ($2 << 2) >> 2] ? $2 >>> 0 <= 3 : 0)) {
      $3 = HEAP32[$0 >> 2];
      HEAP32[$3 + 24 >> 2] = $2;
      HEAP32[$3 + 20 >> 2] = 54;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 132) | 0;
     wasm2js_memory_copy($3, HEAP32[$4 + ($2 << 2) >> 2], 132);
     HEAP32[$6 + 80 >> 2] = $3;
     $3 = HEAP32[$0 + 340 >> 2];
    }
    $1 = $1 + 1 | 0;
    if (($3 | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] >> 2]]($0);
  HEAP32[HEAP32[$0 + 460 >> 2] >> 2] = HEAP32[HEAP32[$0 + 452 >> 2] + 4 >> 2];
 }
 
 function reset_input_controller($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 + 460 >> 2];
  HEAP32[$1 + 24 >> 2] = 1;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 >> 2] = 143;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] >> 2]]($0);
  HEAP32[$0 + 160 >> 2] = 0;
 }
 
 function consume_markers($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = 2;
  block : {
   $5 = HEAP32[$0 + 460 >> 2];
   if (HEAP32[$5 + 20 >> 2]) {
    break block
   }
   while (1) {
    block5 : {
     block21 : {
      block8 : {
       block1 : {
        $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] + 4 >> 2]]($0) | 0;
        if (($1 | 0) != 1) {
         if (($1 | 0) != 2) {
          break block
         }
         HEAP32[$5 + 20 >> 2] = 1;
         if (!HEAP32[$5 + 24 >> 2]) {
          break block1
         }
         $1 = 2;
         if (!HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
          break block
         }
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 62;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
         return 2;
        }
        block2 : {
         switch (HEAP32[$5 + 24 >> 2]) {
         default:
          $1 = HEAP32[$0 + 340 >> 2];
          break block5;
         case 1:
          if (!(HEAP32[$0 + 28 >> 2] < 65501 & HEAP32[$0 + 32 >> 2] <= 65500)) {
           $1 = HEAP32[$0 >> 2];
           HEAP32[$1 + 20 >> 2] = 42;
           HEAP32[$1 + 24 >> 2] = 65500;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          $2 = HEAP32[$0 + 212 >> 2];
          if ($2 - 13 >>> 0 <= 4294967290) {
           $1 = HEAP32[$0 >> 2];
           HEAP32[$1 + 24 >> 2] = $2;
           HEAP32[$1 + 20 >> 2] = 16;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          $4 = HEAP32[$0 + 36 >> 2];
          if (($4 | 0) >= 11) {
           $1 = HEAP32[$0 >> 2];
           HEAP32[$1 + 24 >> 2] = $4;
           HEAP32[$1 + 20 >> 2] = 27;
           HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 10;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
           $4 = HEAP32[$0 + 36 >> 2];
          }
          HEAP32[$0 + 316 >> 2] = 1;
          HEAP32[$0 + 320 >> 2] = 1;
          if (($4 | 0) > 0) {
           $1 = HEAP32[$0 + 216 >> 2];
           $8 = 0;
           $6 = 1;
           $3 = 1;
           while (1) {
            $7 = HEAP32[$1 + 8 >> 2];
            block7 : {
             if ($7 - 5 >>> 0 >= 4294967292) {
              $2 = HEAP32[$1 + 12 >> 2];
              if ($2 - 5 >>> 0 > 4294967291) {
               break block7
              }
             }
             $2 = HEAP32[$0 >> 2];
             HEAP32[$2 + 20 >> 2] = 19;
             FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
             $4 = HEAP32[$0 + 36 >> 2];
             $2 = HEAP32[$1 + 12 >> 2];
             $6 = HEAP32[$0 + 320 >> 2];
             $7 = HEAP32[$1 + 8 >> 2];
             $3 = HEAP32[$0 + 316 >> 2];
            }
            $6 = ($2 | 0) < ($6 | 0) ? $6 : $2;
            HEAP32[$0 + 320 >> 2] = $6;
            $3 = ($3 | 0) > ($7 | 0) ? $3 : $7;
            HEAP32[$0 + 316 >> 2] = $3;
            $1 = $1 + 88 | 0;
            $8 = $8 + 1 | 0;
            if (($8 | 0) < ($4 | 0)) {
             continue
            }
            break;
           };
          }
          if (HEAP32[$0 + 220 >> 2] | (HEAP32[$0 + 340 >> 2] ? HEAP32[$0 + 224 >> 2] : 0)) {
           break block8
          }
          block10 : {
           block23 : {
            block22 : {
             block20 : {
              block19 : {
               block18 : {
                block17 : {
                 block16 : {
                  block15 : {
                   block14 : {
                    block13 : {
                     block12 : {
                      block11 : {
                       block9 : {
                        $1 = HEAP32[$0 + 416 >> 2];
                        if (($1 | 0) <= 119) {
                         switch ($1 | 0) {
                         case 3:
                          break block11;
                         case 8:
                          break block12;
                         case 15:
                          break block13;
                         case 24:
                          break block14;
                         case 35:
                          break block15;
                         case 48:
                          break block16;
                         case 80:
                          break block17;
                         case 99:
                          break block18;
                         case 63:
                          break block8;
                         case 0:
                          break block9;
                         default:
                          break block10;
                         }
                        }
                        if (($1 | 0) <= 194) {
                         if (($1 | 0) == 120) {
                          break block19
                         }
                         if (($1 | 0) == 143) {
                          break block20
                         }
                         if (($1 | 0) != 168) {
                          break block10
                         }
                         HEAP32[$0 + 436 >> 2] = 63;
                         HEAP32[$0 + 432 >> 2] = 52304;
                         HEAP32[$0 + 428 >> 2] = 13;
                         $1 = 13;
                         break block21;
                        }
                        if (($1 | 0) == 195) {
                         break block22
                        }
                        if (($1 | 0) == 224) {
                         break block23
                        }
                        if (($1 | 0) != 255) {
                         break block10
                        }
                        HEAP32[$0 + 436 >> 2] = 63;
                        HEAP32[$0 + 432 >> 2] = 52304;
                        HEAP32[$0 + 428 >> 2] = 16;
                        $1 = 16;
                        break block21;
                       }
                       HEAP32[$0 + 436 >> 2] = 0;
                       HEAP32[$0 + 432 >> 2] = 52304;
                       HEAP32[$0 + 428 >> 2] = 1;
                       $1 = 1;
                       break block21;
                      }
                      HEAP32[$0 + 436 >> 2] = 3;
                      HEAP32[$0 + 432 >> 2] = 53520;
                      HEAP32[$0 + 428 >> 2] = 2;
                      $1 = 2;
                      break block21;
                     }
                     HEAP32[$0 + 436 >> 2] = 8;
                     HEAP32[$0 + 432 >> 2] = 53408;
                     HEAP32[$0 + 428 >> 2] = 3;
                     $1 = 3;
                     break block21;
                    }
                    HEAP32[$0 + 436 >> 2] = 15;
                    HEAP32[$0 + 432 >> 2] = 53280;
                    HEAP32[$0 + 428 >> 2] = 4;
                    $1 = 4;
                    break block21;
                   }
                   HEAP32[$0 + 436 >> 2] = 24;
                   HEAP32[$0 + 432 >> 2] = 53104;
                   HEAP32[$0 + 428 >> 2] = 5;
                   $1 = 5;
                   break block21;
                  }
                  HEAP32[$0 + 436 >> 2] = 35;
                  HEAP32[$0 + 432 >> 2] = 52896;
                  HEAP32[$0 + 428 >> 2] = 6;
                  $1 = 6;
                  break block21;
                 }
                 HEAP32[$0 + 436 >> 2] = 48;
                 HEAP32[$0 + 432 >> 2] = 52624;
                 HEAP32[$0 + 428 >> 2] = 7;
                 $1 = 7;
                 break block21;
                }
                HEAP32[$0 + 436 >> 2] = 63;
                HEAP32[$0 + 432 >> 2] = 52304;
                HEAP32[$0 + 428 >> 2] = 9;
                $1 = 9;
                break block21;
               }
               HEAP32[$0 + 436 >> 2] = 63;
               HEAP32[$0 + 432 >> 2] = 52304;
               HEAP32[$0 + 428 >> 2] = 10;
               $1 = 10;
               break block21;
              }
              HEAP32[$0 + 436 >> 2] = 63;
              HEAP32[$0 + 432 >> 2] = 52304;
              HEAP32[$0 + 428 >> 2] = 11;
              $1 = 11;
              break block21;
             }
             HEAP32[$0 + 436 >> 2] = 63;
             HEAP32[$0 + 432 >> 2] = 52304;
             HEAP32[$0 + 428 >> 2] = 12;
             $1 = 12;
             break block21;
            }
            HEAP32[$0 + 436 >> 2] = 63;
            HEAP32[$0 + 432 >> 2] = 52304;
            HEAP32[$0 + 428 >> 2] = 14;
            $1 = 14;
            break block21;
           }
           HEAP32[$0 + 436 >> 2] = 63;
           HEAP32[$0 + 432 >> 2] = 52304;
           HEAP32[$0 + 428 >> 2] = 15;
           $1 = 15;
           break block21;
          }
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 20 >> 2] = 17;
          HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 412 >> 2];
          HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$0 + 416 >> 2];
          HEAP32[HEAP32[$0 >> 2] + 32 >> 2] = HEAP32[$0 + 420 >> 2];
          HEAP32[HEAP32[$0 >> 2] + 36 >> 2] = HEAP32[$0 + 424 >> 2];
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          $4 = HEAP32[$0 + 36 >> 2];
          $1 = HEAP32[$0 + 428 >> 2];
          break block21;
         case 0:
          break block2;
         };
        }
        if (!HEAP32[$5 + 16 >> 2]) {
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 36;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        }
        if (!HEAP32[$0 + 340 >> 2]) {
         continue
        }
        start_input_pass($0);
        return 1;
       }
       $1 = 2;
       $2 = HEAP32[$0 + 144 >> 2];
       if (($2 | 0) >= HEAP32[$0 + 152 >> 2]) {
        break block
       }
       HEAP32[$0 + 152 >> 2] = $2;
       break block;
      }
      HEAP32[$0 + 436 >> 2] = 63;
      HEAP32[$0 + 432 >> 2] = 52304;
      HEAP32[$0 + 428 >> 2] = 8;
      $1 = 8;
     }
     HEAP32[$0 + 328 >> 2] = $1;
     HEAP32[$0 + 324 >> 2] = $1;
     if (($4 | 0) > 0) {
      $1 = HEAP32[$0 + 216 >> 2];
      $3 = 0;
      while (1) {
       $2 = HEAP32[$0 + 428 >> 2];
       HEAP32[$1 + 40 >> 2] = $2;
       HEAP32[$1 + 36 >> 2] = $2;
       (wasm2js_i32$0 = $1, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$1 + 8 >> 2], HEAP32[$0 + 28 >> 2]), Math_imul($2, HEAP32[$0 + 316 >> 2]))), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $1, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 32 >> 2]), Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 320 >> 2]))), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $1, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$1 + 8 >> 2], HEAP32[$0 + 28 >> 2]), HEAP32[$0 + 316 >> 2])), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       $2 = jdiv_round_up(Math_imul(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 32 >> 2]), HEAP32[$0 + 320 >> 2]);
       HEAP32[$1 + 80 >> 2] = 0;
       HEAP32[$1 + 52 >> 2] = 1;
       HEAP32[$1 + 48 >> 2] = $2;
       $1 = $1 + 88 | 0;
       $3 = $3 + 1 | 0;
       if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
        continue
       }
       break;
      };
      $1 = HEAP32[$0 + 428 >> 2];
     }
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 32 >> 2], Math_imul(HEAP32[$0 + 320 >> 2], $1))), HEAP32[wasm2js_i32$0 + 332 >> 2] = wasm2js_i32$1;
     $1 = HEAP32[$0 + 340 >> 2];
     HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] = HEAP32[$0 + 224 >> 2] != 0 | ($1 | 0) < HEAP32[$0 + 36 >> 2];
    }
    if (!$1) {
     HEAP32[$5 + 24 >> 2] = 2;
     continue;
    }
    break;
   };
   HEAP32[$5 + 24 >> 2] = 0;
   return 1;
  }
  return $1 | 0;
 }
 
 function jpeg_resync_to_restart($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 440 >> 2];
  HEAP32[$3 + 24 >> 2] = $2;
  HEAP32[$3 + 20 >> 2] = 124;
  HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
  $3 = $1 + 6 & 7 | 208;
  $5 = $1 - 1 & 7 | 208;
  $6 = $1 + 2 & 7 | 208;
  $1 = $1 + 1 & 7 | 208;
  while (1) {
   block1 : {
    block : {
     if (($2 | 0) < 192) {
      break block
     }
     if (($1 | 0) == ($2 | 0) | $2 - 216 >>> 0 < 4294967288 | ($2 | 0) == ($6 | 0)) {
      break block1
     }
     if (($2 | 0) == ($5 | 0) | ($2 | 0) == ($3 | 0)) {
      break block
     }
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 24 >> 2] = $2;
     HEAP32[$1 + 20 >> 2] = 99;
     HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 1;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 4);
     HEAP32[$0 + 440 >> 2] = 0;
     return 1;
    }
    $4 = HEAP32[$0 >> 2];
    HEAP32[$4 + 24 >> 2] = $2;
    HEAP32[$4 + 20 >> 2] = 99;
    HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 2;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 4);
    if (next_marker($0)) {
     $2 = HEAP32[$0 + 440 >> 2];
     continue;
    } else {
     return 0
    }
   }
   break;
  };
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = 99;
  HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 4);
  return 1;
 }
 
 function next_marker($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  $4 = HEAP32[$1 >> 2];
  while (1) {
   if (!$2) {
    if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
     return 0
    }
    $4 = HEAP32[$1 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
   }
   $3 = $4 + 1 | 0;
   $2 = $2 - 1 | 0;
   if (HEAPU8[$4 | 0] != 255) {
    while (1) {
     $4 = HEAP32[$0 + 464 >> 2];
     HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
     HEAP32[$1 + 4 >> 2] = $2;
     HEAP32[$1 >> 2] = $3;
     if (!$2) {
      if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
       return 0
      }
      $3 = HEAP32[$1 >> 2];
      $2 = HEAP32[$1 + 4 >> 2];
     }
     $2 = $2 - 1 | 0;
     $4 = HEAPU8[$3 | 0];
     $3 = $3 + 1 | 0;
     if (($4 | 0) != 255) {
      continue
     }
     break;
    }
   }
   while (1) {
    if (!$2) {
     if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
      return 0
     }
     $3 = HEAP32[$1 >> 2];
     $2 = HEAP32[$1 + 4 >> 2];
    }
    $2 = $2 - 1 | 0;
    $5 = HEAPU8[$3 | 0];
    $4 = $3 + 1 | 0;
    $3 = $4;
    if (($5 | 0) == 255) {
     continue
    }
    break;
   };
   if (!$5) {
    $3 = HEAP32[$0 + 464 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 2;
    HEAP32[$1 + 4 >> 2] = $2;
    HEAP32[$1 >> 2] = $4;
    continue;
   }
   break;
  };
  $3 = HEAP32[HEAP32[$0 + 464 >> 2] + 24 >> 2];
  if ($3) {
   $6 = HEAP32[$0 >> 2];
   HEAP32[$6 + 24 >> 2] = $3;
   HEAP32[$6 + 20 >> 2] = 119;
   HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $5;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
   HEAP32[HEAP32[$0 + 464 >> 2] + 24 >> 2] = 0;
  }
  HEAP32[$0 + 440 >> 2] = $5;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 >> 2] = $4;
  return 1;
 }
 
 function skip_variable($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  if (!$2) {
   if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
    return 0
   }
   $2 = HEAP32[$1 + 4 >> 2];
  }
  $3 = HEAP32[$1 >> 2];
  $4 = HEAPU8[$3 | 0];
  $5 = $2 - 1 | 0;
  if ($5) {
   $2 = $3 + 1 | 0
  } else {
   if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
    return 0
   }
   $5 = HEAP32[$1 + 4 >> 2];
   $2 = HEAP32[$1 >> 2];
  }
  $3 = HEAPU8[$2 | 0];
  $6 = HEAP32[$0 >> 2];
  HEAP32[$6 + 20 >> 2] = 93;
  HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
  $3 = $3 | $4 << 8;
  $4 = $3 - 2 | 0;
  HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
  HEAP32[$1 + 4 >> 2] = $5 - 1;
  HEAP32[$1 >> 2] = $2 + 1;
  if ($3 >>> 0 >= 3) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 16 >> 2]]($0, $4)
  }
  return 1;
 }
 
 function read_restart_marker($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  block1 : {
   $1 = HEAP32[$0 + 440 >> 2];
   block : {
    if (!$1) {
     if (!next_marker($0)) {
      break block
     }
     $1 = HEAP32[$0 + 440 >> 2];
    }
    $2 = HEAP32[HEAP32[$0 + 464 >> 2] + 20 >> 2];
    if (($2 + 208 | 0) == ($1 | 0)) {
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 24 >> 2] = $2;
     HEAP32[$1 + 20 >> 2] = 100;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 3);
     HEAP32[$0 + 440 >> 2] = 0;
     break block1;
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 20 >> 2]]($0, $2) | 0) {
     break block1
    }
   }
   return 0;
  }
  $0 = HEAP32[$0 + 464 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + 1 & 7;
  return 1;
 }
 
 function read_markers($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $11 = __stack_pointer - 288 | 0;
  __stack_pointer = $11;
  $8 = $0 + 248 | 0;
  $12 = $0 + 232 | 0;
  $14 = $0 + 180 | 0;
  $15 = $0 + 196 | 0;
  $16 = $0 + 164 | 0;
  $1 = HEAP32[$0 + 440 >> 2];
  while (1) {
   block21 : {
    block1 : {
     block : {
      if ($1) {
       break block
      }
      if (!HEAP32[HEAP32[$0 + 464 >> 2] + 12 >> 2]) {
       $2 = HEAP32[$0 + 24 >> 2];
       $1 = HEAP32[$2 + 4 >> 2];
       if (!$1) {
        if (!(FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break block1;
        }
        $1 = HEAP32[$2 + 4 >> 2];
       }
       $5 = HEAP32[$2 >> 2];
       $3 = HEAPU8[$5 | 0];
       $4 = $1 - 1 | 0;
       if ($4) {
        $1 = $5 + 1 | 0
       } else {
        if (!(FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break block1;
        }
        $4 = HEAP32[$2 + 4 >> 2];
        $1 = HEAP32[$2 >> 2];
       }
       $5 = $1 + 1 | 0;
       $1 = HEAPU8[$1 | 0];
       if (!(($3 | 0) == 255 & ($1 | 0) == 216)) {
        $6 = HEAP32[$0 >> 2];
        HEAP32[$6 + 24 >> 2] = $3;
        HEAP32[$6 + 20 >> 2] = 55;
        HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       }
       HEAP32[$0 + 440 >> 2] = $1;
       HEAP32[$2 + 4 >> 2] = $4 - 1;
       HEAP32[$2 >> 2] = $5;
       break block;
      }
      if (!next_marker($0)) {
       $1 = 0;
       break block1;
      }
      $1 = HEAP32[$0 + 440 >> 2];
     }
     block31 : {
      block4 : {
       switch ($1 - 1 | 0) {
       case 215:
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 20 >> 2] = 104;
        FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
        $1 = HEAP32[$0 + 464 >> 2];
        if (HEAP32[$1 + 12 >> 2]) {
         $2 = HEAP32[$0 >> 2];
         HEAP32[$2 + 20 >> 2] = 64;
         FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
         $1 = HEAP32[$0 + 464 >> 2];
        }
        $2 = $12;
        HEAP8[$2 + 8 | 0] = 0;
        HEAP8[$2 + 9 | 0] = 0;
        HEAP8[$2 + 10 | 0] = 0;
        HEAP8[$2 + 11 | 0] = 0;
        HEAP8[$2 + 12 | 0] = 0;
        HEAP8[$2 + 13 | 0] = 0;
        HEAP8[$2 + 14 | 0] = 0;
        HEAP8[$2 + 15 | 0] = 0;
        HEAP8[$2 | 0] = 0;
        HEAP8[$2 + 1 | 0] = 0;
        HEAP8[$2 + 2 | 0] = 0;
        HEAP8[$2 + 3 | 0] = 0;
        HEAP8[$2 + 4 | 0] = 0;
        HEAP8[$2 + 5 | 0] = 0;
        HEAP8[$2 + 6 | 0] = 0;
        HEAP8[$2 + 7 | 0] = 0;
        $2 = $8;
        HEAP8[$2 + 8 | 0] = 1;
        HEAP8[$2 + 9 | 0] = 1;
        HEAP8[$2 + 10 | 0] = 1;
        HEAP8[$2 + 11 | 0] = 1;
        HEAP8[$2 + 12 | 0] = 1;
        HEAP8[$2 + 13 | 0] = 1;
        HEAP8[$2 + 14 | 0] = 1;
        HEAP8[$2 + 15 | 0] = 1;
        HEAP8[$2 | 0] = 1;
        HEAP8[$2 + 1 | 0] = 1;
        HEAP8[$2 + 2 | 0] = 1;
        HEAP8[$2 + 3 | 0] = 1;
        HEAP8[$2 + 4 | 0] = 1;
        HEAP8[$2 + 5 | 0] = 1;
        HEAP8[$2 + 6 | 0] = 1;
        HEAP8[$2 + 7 | 0] = 1;
        HEAP8[$0 + 272 | 0] = 5;
        HEAP8[$0 + 273 | 0] = 5;
        HEAP8[$0 + 274 | 0] = 5;
        HEAP8[$0 + 275 | 0] = 5;
        HEAP8[$0 + 276 | 0] = 5;
        HEAP8[$0 + 277 | 0] = 5;
        HEAP8[$0 + 278 | 0] = 5;
        HEAP8[$0 + 279 | 0] = 5;
        HEAP8[$0 + 264 | 0] = 5;
        HEAP8[$0 + 265 | 0] = 5;
        HEAP8[$0 + 266 | 0] = 5;
        HEAP8[$0 + 267 | 0] = 5;
        HEAP8[$0 + 268 | 0] = 5;
        HEAP8[$0 + 269 | 0] = 5;
        HEAP8[$0 + 270 | 0] = 5;
        HEAP8[$0 + 271 | 0] = 5;
        HEAP32[$0 + 304 >> 2] = 0;
        HEAP32[$0 + 308 >> 2] = 0;
        HEAP32[$0 + 40 >> 2] = 0;
        HEAP32[$0 + 280 >> 2] = 0;
        HEAP32[$0 + 284 >> 2] = 0;
        HEAP8[$0 + 300 | 0] = 0;
        HEAP32[$0 + 292 >> 2] = 65537;
        HEAP32[$0 + 296 >> 2] = 0;
        HEAP8[$0 + 290 | 0] = 0;
        HEAP16[$0 + 288 >> 1] = 257;
        HEAP32[$1 + 12 >> 2] = 1;
        break block21;
       case 192:
        $1 = 0;
        if (get_sof($0, 0, 0, 0)) {
         break block21
        }
        break block1;
       case 193:
        $1 = 0;
        if (get_sof($0, 0, 1, 0)) {
         break block21
        }
        break block1;
       case 200:
        $1 = 0;
        if (get_sof($0, 0, 0, 1)) {
         break block21
        }
        break block1;
       case 201:
        $1 = 0;
        if (get_sof($0, 0, 1, 1)) {
         break block21
        }
        break block1;
       case 194:
       case 196:
       case 197:
       case 198:
       case 199:
       case 202:
       case 204:
       case 205:
       case 206:
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 24 >> 2] = $1;
        HEAP32[$2 + 20 >> 2] = 63;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        break block21;
       case 217:
        $8 = HEAP32[$0 + 24 >> 2];
        $1 = HEAP32[$8 + 4 >> 2];
        $3 = HEAP32[$8 >> 2];
        if (!HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
         $2 = HEAP32[$0 >> 2];
         HEAP32[$2 + 20 >> 2] = 60;
         wasm2js_memory_copy($2 + 24 | 0, 50210, 80);
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        }
        if (!$1) {
         if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$8 >> 2];
         $1 = HEAP32[$8 + 4 >> 2];
        }
        $5 = HEAPU8[$3 | 0];
        $2 = $1 - 1 | 0;
        if ($2) {
         $4 = $3 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $2 = HEAP32[$8 + 4 >> 2];
         $4 = HEAP32[$8 >> 2];
        }
        $1 = HEAPU8[$4 | 0];
        $3 = $2 - 1 | 0;
        if ($3) {
         $4 = $4 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$8 + 4 >> 2];
         $4 = HEAP32[$8 >> 2];
        }
        $2 = HEAP32[$0 >> 2];
        $10 = HEAPU8[$4 | 0];
        HEAP32[$2 + 24 >> 2] = $10;
        HEAP32[$2 + 20 >> 2] = 105;
        $2 = 1;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
        block24 : {
         block23 : {
          block22 : {
           if ((($10 << 1) + 6 | 0) != ($1 | $5 << 8) | $10 >>> 0 > 4) {
            break block22
           }
           if ($10) {
            HEAP32[$0 + 340 >> 2] = $10;
            $6 = $4 + 1 | 0;
            $4 = $3 - 1 | 0;
            break block23;
           }
           if (!HEAP32[$0 + 224 >> 2]) {
            break block22
           }
           HEAP32[$0 + 340 >> 2] = $10;
           $6 = $4 + 1 | 0;
           $4 = $3 - 1 | 0;
           break block24;
          }
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 20 >> 2] = 12;
          FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
          HEAP32[$0 + 340 >> 2] = $10;
          $6 = $4 + 1 | 0;
          $4 = $3 - 1 | 0;
          if (!$10) {
           break block24
          }
         }
         $12 = $0 + 344 | 0;
         $5 = 0;
         while (1) {
          if (!$4) {
           if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $6 = HEAP32[$8 >> 2];
           $4 = HEAP32[$8 + 4 >> 2];
          }
          $3 = HEAPU8[$6 | 0];
          block25 : {
           if (!$5) {
            break block25
           }
           $7 = $5 - 2 | 0;
           $2 = $5 - 1 | 0;
           $1 = 0;
           while (1) {
            if (HEAP32[HEAP32[$12 + ($1 << 2) >> 2] >> 2] != ($3 | 0)) {
             $1 = $1 + 1 | 0;
             if (($5 | 0) != ($1 | 0)) {
              continue
             }
             break block25;
            }
            break;
           };
           $1 = HEAP32[HEAP32[$12 >> 2] >> 2];
           block26 : {
            if (($5 | 0) == 1) {
             break block26
            }
            $9 = $2 & 3;
            $3 = 1;
            if ($7 >>> 0 >= 3) {
             $13 = $2 & -4;
             $7 = 0;
             while (1) {
              $2 = $12 + ($3 << 2) | 0;
              $14 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
              $15 = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
              $16 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
              $2 = HEAP32[HEAP32[$2 >> 2] >> 2];
              $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
              $2 = ($2 | 0) < ($16 | 0) ? $16 : $2;
              $2 = ($2 | 0) < ($15 | 0) ? $15 : $2;
              $1 = ($2 | 0) < ($14 | 0) ? $14 : $2;
              $3 = $3 + 4 | 0;
              $7 = $7 + 4 | 0;
              if (($13 | 0) != ($7 | 0)) {
               continue
              }
              break;
             };
             if (!$9) {
              break block26
             }
            }
            $2 = 0;
            while (1) {
             $7 = HEAP32[HEAP32[$12 + ($3 << 2) >> 2] >> 2];
             $1 = ($1 | 0) < ($7 | 0) ? $7 : $1;
             $3 = $3 + 1 | 0;
             $2 = $2 + 1 | 0;
             if (($9 | 0) != ($2 | 0)) {
              continue
             }
             break;
            };
           }
           $3 = $1 + 1 | 0;
          }
          $7 = $4 - 1 | 0;
          $1 = HEAP32[$0 + 216 >> 2];
          $9 = HEAP32[$0 + 36 >> 2];
          block27 : {
           if (($9 | 0) > 0) {
            $4 = Math_imul($9, 88) + $1 | 0;
            $2 = 0;
            while (1) {
             if (HEAP32[$1 >> 2] == ($3 | 0)) {
              break block27
             }
             $1 = $1 + 88 | 0;
             $2 = $2 + 1 | 0;
             if (($9 | 0) != ($2 | 0)) {
              continue
             }
             break;
            };
            $1 = $4;
           }
           $2 = HEAP32[$0 >> 2];
           HEAP32[$2 + 24 >> 2] = $3;
           HEAP32[$2 + 20 >> 2] = 4;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          HEAP32[$12 + ($5 << 2) >> 2] = $1;
          if ($7) {
           $4 = $6 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $7 = HEAP32[$8 + 4 >> 2];
           $4 = HEAP32[$8 >> 2];
          }
          $2 = HEAPU8[$4 | 0];
          HEAP32[$1 + 24 >> 2] = $2 & 15;
          HEAP32[$1 + 20 >> 2] = $2 >>> 4;
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
          $1 = HEAP32[$1 + 24 >> 2];
          HEAP32[$2 + 20 >> 2] = 106;
          HEAP32[$2 + 32 >> 2] = $1;
          FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
          $6 = $4 + 1 | 0;
          $4 = $7 - 1 | 0;
          $5 = $5 + 1 | 0;
          if (($10 | 0) != ($5 | 0)) {
           continue
          }
          break;
         };
         $2 = 0;
        }
        if (!$4) {
         if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $6 = HEAP32[$8 >> 2];
         $4 = HEAP32[$8 + 4 >> 2];
        }
        HEAP32[$0 + 412 >> 2] = HEAPU8[$6 | 0];
        $3 = $4 - 1 | 0;
        if ($3) {
         $4 = $6 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$8 + 4 >> 2];
         $4 = HEAP32[$8 >> 2];
        }
        HEAP32[$0 + 416 >> 2] = HEAPU8[$4 | 0];
        $5 = $3 - 1 | 0;
        if ($5) {
         $4 = $4 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $5 = HEAP32[$8 + 4 >> 2];
         $4 = HEAP32[$8 >> 2];
        }
        $1 = HEAPU8[$4 | 0];
        HEAP32[$0 + 424 >> 2] = $1 & 15;
        HEAP32[$0 + 420 >> 2] = $1 >>> 4;
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 412 >> 2];
        HEAP32[$3 + 28 >> 2] = HEAP32[$0 + 416 >> 2];
        HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 420 >> 2];
        HEAP32[$3 + 36 >> 2] = HEAP32[$0 + 424 >> 2];
        HEAP32[$3 + 20 >> 2] = 107;
        $1 = 1;
        FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, 1);
        HEAP32[HEAP32[$0 + 464 >> 2] + 20 >> 2] = 0;
        if (!$2) {
         HEAP32[$0 + 144 >> 2] = HEAP32[$0 + 144 >> 2] + 1
        }
        HEAP32[$8 + 4 >> 2] = $5 - 1;
        HEAP32[$8 >> 2] = $4 + 1;
        HEAP32[$0 + 440 >> 2] = 0;
        break block1;
       case 216:
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 20 >> 2] = 87;
        FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
        HEAP32[$0 + 440 >> 2] = 0;
        $1 = 2;
        break block1;
       case 203:
        $5 = HEAP32[$0 + 24 >> 2];
        $1 = HEAP32[$5 + 4 >> 2];
        if (!$1) {
         if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $1 = HEAP32[$5 + 4 >> 2];
        }
        $2 = HEAP32[$5 >> 2];
        $6 = HEAPU8[$2 | 0];
        $3 = $1 - 1 | 0;
        if ($3) {
         $4 = $2 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$5 + 4 >> 2];
         $4 = HEAP32[$5 >> 2];
        }
        $2 = $4 + 1 | 0;
        $3 = $3 - 1 | 0;
        $4 = HEAPU8[$4 | 0] | $6 << 8;
        $1 = $4 - 2 | 0;
        if ($4 >>> 0 >= 3) {
         while (1) {
          $4 = $1;
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$5 + 4 >> 2];
           $2 = HEAP32[$5 >> 2];
          }
          $1 = HEAPU8[$2 | 0];
          $7 = $3 - 1 | 0;
          if ($7) {
           $2 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $7 = HEAP32[$5 + 4 >> 2];
           $2 = HEAP32[$5 >> 2];
          }
          $3 = HEAPU8[$2 | 0];
          $6 = HEAP32[$0 >> 2];
          HEAP32[$6 + 24 >> 2] = $1;
          HEAP32[$6 + 20 >> 2] = 81;
          HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $3;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
          block30 : {
           block29 : {
            block28 : {
             if ($1 >>> 0 >= 32) {
              $6 = HEAP32[$0 >> 2];
              HEAP32[$6 + 24 >> 2] = $1;
              HEAP32[$6 + 20 >> 2] = 29;
              FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
              break block28;
             }
             if ($1 >>> 0 < 16) {
              break block29
             }
            }
            HEAP8[$1 + $8 | 0] = $3;
            break block30;
           }
           $6 = $3 & 15;
           HEAP8[$1 + $12 | 0] = $6;
           $10 = $1 + $8 | 0;
           $1 = $3 >>> 4 | 0;
           HEAP8[$10 | 0] = $1;
           if ($1 >>> 0 >= $6 >>> 0) {
            break block30
           }
           $1 = HEAP32[$0 >> 2];
           HEAP32[$1 + 24 >> 2] = $3;
           HEAP32[$1 + 20 >> 2] = 30;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          $2 = $2 + 1 | 0;
          $3 = $7 - 1 | 0;
          $1 = $4 - 2 | 0;
          if ($4 >>> 0 > 2) {
           continue
          }
          break;
         }
        }
        if ($1) {
         $4 = HEAP32[$0 >> 2];
         HEAP32[$4 + 20 >> 2] = 12;
         FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
        }
        HEAP32[$5 + 4 >> 2] = $3;
        HEAP32[$5 >> 2] = $2;
        break block21;
       case 195:
        $5 = HEAP32[$0 + 24 >> 2];
        $1 = HEAP32[$5 + 4 >> 2];
        if (!$1) {
         if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
          break block31
         }
         $1 = HEAP32[$5 + 4 >> 2];
        }
        $2 = HEAP32[$5 >> 2];
        $4 = HEAPU8[$2 | 0];
        $1 = $1 - 1 | 0;
        if ($1) {
         $2 = $2 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
          break block31
         }
         $1 = HEAP32[$5 + 4 >> 2];
         $2 = HEAP32[$5 >> 2];
        }
        $3 = $2 + 1 | 0;
        $1 = $1 - 1 | 0;
        $2 = HEAPU8[$2 | 0] | $4 << 8;
        $6 = $2 - 2 | 0;
        if ($2 >>> 0 >= 19) {
         while (1) {
          if (!$1) {
           if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
            break block31
           }
           $3 = HEAP32[$5 >> 2];
           $1 = HEAP32[$5 + 4 >> 2];
          }
          $2 = HEAP32[$0 >> 2];
          $10 = HEAPU8[$3 | 0];
          HEAP32[$2 + 24 >> 2] = $10;
          HEAP32[$2 + 20 >> 2] = 82;
          $2 = 1;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
          $4 = 0;
          HEAP8[$11 + 256 | 0] = 0;
          $3 = $3 + 1 | 0;
          $1 = $1 - 1 | 0;
          while (1) {
           if (!$1) {
            if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
             break block31
            }
            $3 = HEAP32[$5 >> 2];
            $1 = HEAP32[$5 + 4 >> 2];
           }
           $7 = HEAPU8[$3 | 0];
           HEAP8[($11 + 256 | 0) + $2 | 0] = $7;
           $3 = $3 + 1 | 0;
           $1 = $1 - 1 | 0;
           $4 = $4 + $7 | 0;
           $2 = $2 + 1 | 0;
           if (($2 | 0) != 17) {
            continue
           }
           break;
          };
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 24 >> 2] = HEAPU8[$11 + 257 | 0];
          HEAP32[$2 + 28 >> 2] = HEAPU8[$11 + 258 | 0];
          HEAP32[$2 + 32 >> 2] = HEAPU8[$11 + 259 | 0];
          HEAP32[$2 + 36 >> 2] = HEAPU8[$11 + 260 | 0];
          HEAP32[$2 + 40 >> 2] = HEAPU8[$11 + 261 | 0];
          HEAP32[$2 + 44 >> 2] = HEAPU8[$11 + 262 | 0];
          HEAP32[$2 + 48 >> 2] = HEAPU8[$11 + 263 | 0];
          $7 = HEAPU8[$11 + 264 | 0];
          HEAP32[$2 + 20 >> 2] = 88;
          HEAP32[$2 + 52 >> 2] = $7;
          FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 2);
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 24 >> 2] = HEAPU8[$11 + 265 | 0];
          HEAP32[$2 + 28 >> 2] = HEAPU8[$11 + 266 | 0];
          HEAP32[$2 + 32 >> 2] = HEAPU8[$11 + 267 | 0];
          HEAP32[$2 + 36 >> 2] = HEAPU8[$11 + 268 | 0];
          HEAP32[$2 + 40 >> 2] = HEAPU8[$11 + 269 | 0];
          HEAP32[$2 + 44 >> 2] = HEAPU8[$11 + 270 | 0];
          HEAP32[$2 + 48 >> 2] = HEAPU8[$11 + 271 | 0];
          $7 = HEAPU8[$11 + 272 | 0];
          HEAP32[$2 + 20 >> 2] = 88;
          HEAP32[$2 + 52 >> 2] = $7;
          FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 2);
          $6 = $6 - 17 | 0;
          if (!($4 >>> 0 <= 256 & ($6 | 0) >= ($4 | 0))) {
           $2 = HEAP32[$0 >> 2];
           HEAP32[$2 + 20 >> 2] = 9;
           FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
          }
          $2 = 0;
          if ($4) {
           while (1) {
            if (!$1) {
             if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
              break block31
             }
             $3 = HEAP32[$5 >> 2];
             $1 = HEAP32[$5 + 4 >> 2];
            }
            HEAP8[$2 + $11 | 0] = HEAPU8[$3 | 0];
            $3 = $3 + 1 | 0;
            $1 = $1 - 1 | 0;
            $2 = $2 + 1 | 0;
            if (($4 | 0) != ($2 | 0)) {
             continue
            }
            break;
           }
          }
          $2 = $10 - 16 | 0;
          $9 = $10 & 16;
          $7 = $9 ? $15 + ($2 << 2) | 0 : $14 + ($10 << 2) | 0;
          $2 = $9 ? $2 : $10;
          if (($2 | 0) >= 4) {
           $10 = HEAP32[$0 >> 2];
           HEAP32[$10 + 24 >> 2] = $2;
           HEAP32[$10 + 20 >> 2] = 31;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          $2 = HEAP32[$7 >> 2];
          if (!$2) {
           $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 280) | 0;
           HEAP32[$2 + 276 >> 2] = 0;
           HEAP32[$7 >> 2] = $2;
          }
          $6 = $6 - $4 | 0;
          HEAP8[$2 + 16 | 0] = HEAPU8[$11 + 272 | 0];
          $10 = HEAP32[$11 + 268 >> 2];
          HEAP32[$2 + 8 >> 2] = HEAP32[$11 + 264 >> 2];
          HEAP32[$2 + 12 >> 2] = $10;
          $10 = HEAP32[$11 + 260 >> 2];
          HEAP32[$2 >> 2] = HEAP32[$11 + 256 >> 2];
          HEAP32[$2 + 4 >> 2] = $10;
          if ($4) {
           wasm2js_memory_copy(HEAP32[$7 >> 2] + 17 | 0, $11, $4)
          }
          if (($6 | 0) > 16) {
           continue
          }
          break;
         }
        }
        if ($6) {
         $2 = HEAP32[$0 >> 2];
         HEAP32[$2 + 20 >> 2] = 12;
         FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
        }
        HEAP32[$5 + 4 >> 2] = $1;
        HEAP32[$5 >> 2] = $3;
        break block21;
       case 218:
        $9 = HEAP32[$0 + 24 >> 2];
        $1 = HEAP32[$9 + 4 >> 2];
        if (!$1) {
         if (!(FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $1 = HEAP32[$9 + 4 >> 2];
        }
        $4 = HEAP32[$9 >> 2];
        $5 = HEAPU8[$4 | 0];
        $2 = $1 - 1 | 0;
        if ($2) {
         $4 = $4 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $2 = HEAP32[$9 + 4 >> 2];
         $4 = HEAP32[$9 >> 2];
        }
        $3 = $4 + 1 | 0;
        $2 = $2 - 1 | 0;
        $1 = HEAPU8[$4 | 0] | $5 << 8;
        $4 = $1 - 2 | 0;
        if ($1 >>> 0 >= 3) {
         while (1) {
          if (!$2) {
           if (!(FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$9 >> 2];
           $2 = HEAP32[$9 + 4 >> 2];
          }
          $1 = HEAPU8[$3 | 0];
          $5 = HEAP32[$0 >> 2];
          HEAP32[$5 + 20 >> 2] = 83;
          $6 = $5;
          $5 = $1 & 15;
          HEAP32[$6 + 24 >> 2] = $5;
          HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1 >>> 4;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
          if ($5 >>> 0 >= 4) {
           $6 = HEAP32[$0 >> 2];
           HEAP32[$6 + 24 >> 2] = $5;
           HEAP32[$6 + 20 >> 2] = 32;
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          $6 = $16 + ($5 << 2) | 0;
          $5 = HEAP32[$6 >> 2];
          if (!$5) {
           $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 132) | 0;
           HEAP32[$5 + 128 >> 2] = 0;
           HEAP32[$6 >> 2] = $5;
          }
          $10 = $4 - 1 | 0;
          block41 : {
           block40 : {
            block34 : {
             $13 = $1 >>> 0 < 16;
             block32 : {
              block33 : {
               if (!$13) {
                $1 = 0;
                if ($4 >>> 0 > 128) {
                 $7 = 52304;
                 $6 = 64;
                 break block32;
                }
                while (1) {
                 $4 = ($1 << 1) + $5 | 0;
                 HEAP16[$4 + 8 >> 1] = 1;
                 HEAP16[$4 + 10 >> 1] = 1;
                 HEAP16[$4 + 12 >> 1] = 1;
                 HEAP16[$4 + 14 >> 1] = 1;
                 HEAP16[$4 >> 1] = 1;
                 HEAP16[$4 + 2 >> 1] = 1;
                 HEAP16[$4 + 4 >> 1] = 1;
                 HEAP16[$4 + 6 >> 1] = 1;
                 $1 = $1 + 8 | 0;
                 if (($1 | 0) != 64) {
                  continue
                 }
                 break;
                };
                $4 = $10 >>> 1 | 0;
                break block33;
               }
               $6 = 64;
               $1 = 0;
               if ($4 >>> 0 > 64) {
                $7 = 52304;
                break block32;
               }
               while (1) {
                $4 = ($1 << 1) + $5 | 0;
                HEAP16[$4 + 8 >> 1] = 1;
                HEAP16[$4 + 10 >> 1] = 1;
                HEAP16[$4 + 12 >> 1] = 1;
                HEAP16[$4 + 14 >> 1] = 1;
                HEAP16[$4 >> 1] = 1;
                HEAP16[$4 + 2 >> 1] = 1;
                HEAP16[$4 + 4 >> 1] = 1;
                HEAP16[$4 + 6 >> 1] = 1;
                $1 = $1 + 8 | 0;
                if (($1 | 0) != 64) {
                 continue
                }
                break;
               };
               $4 = $10;
              }
              $7 = 53520;
              block39 : {
               block38 : {
                block37 : {
                 block36 : {
                  block35 : {
                   $6 = $4;
                   switch ($4 - 4 | 0) {
                   case 0:
                    break block32;
                   case 5:
                    break block35;
                   case 12:
                    break block36;
                   case 21:
                    break block37;
                   case 32:
                    break block38;
                   case 45:
                    break block39;
                   default:
                    break block34;
                   };
                  }
                  $7 = 53408;
                  break block32;
                 }
                 $7 = 53280;
                 break block32;
                }
                $7 = 53104;
                break block32;
               }
               $7 = 52896;
               break block32;
              }
              $7 = 52624;
             }
             $3 = $3 + 1 | 0;
             $2 = $2 - 1 | 0;
             break block40;
            }
            $3 = $3 + 1 | 0;
            $2 = $2 - 1 | 0;
            $7 = 52304;
            if (($6 | 0) <= 0) {
             break block41
            }
           }
           $1 = 0;
           while (1) {
            block42 : {
             if (!$13) {
              if (!$2) {
               if (!(FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($0) | 0)) {
                $1 = 0;
                break block1;
               }
               $3 = HEAP32[$9 >> 2];
               $2 = HEAP32[$9 + 4 >> 2];
              }
              $4 = HEAPU8[$3 | 0];
              $2 = $2 - 1 | 0;
              if ($2) {
               $3 = $3 + 1 | 0
              } else {
               if (!(FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($0) | 0)) {
                $1 = 0;
                break block1;
               }
               $2 = HEAP32[$9 + 4 >> 2];
               $3 = HEAP32[$9 >> 2];
              }
              $4 = HEAPU8[$3 | 0] | $4 << 8;
              break block42;
             }
             if (!$2) {
              if (!(FUNCTION_TABLE[HEAP32[$9 + 12 >> 2]]($0) | 0)) {
               $1 = 0;
               break block1;
              }
              $3 = HEAP32[$9 >> 2];
              $2 = HEAP32[$9 + 4 >> 2];
             }
             $4 = HEAPU8[$3 | 0];
            }
            HEAP16[(HEAP32[($1 << 2) + $7 >> 2] << 1) + $5 >> 1] = $4;
            $3 = $3 + 1 | 0;
            $2 = $2 - 1 | 0;
            $1 = $1 + 1 | 0;
            if (($6 | 0) != ($1 | 0)) {
             continue
            }
            break;
           };
          }
          $7 = 0;
          if (HEAP32[HEAP32[$0 >> 2] + 104 >> 2] >= 2) {
           while (1) {
            $4 = HEAP32[$0 >> 2];
            $1 = ($7 << 1) + $5 | 0;
            HEAP32[$4 + 24 >> 2] = HEAPU16[$1 >> 1];
            HEAP32[$4 + 28 >> 2] = HEAPU16[$1 + 2 >> 1];
            HEAP32[$4 + 32 >> 2] = HEAPU16[$1 + 4 >> 1];
            HEAP32[$4 + 36 >> 2] = HEAPU16[$1 + 6 >> 1];
            HEAP32[$4 + 40 >> 2] = HEAPU16[$1 + 8 >> 1];
            HEAP32[$4 + 44 >> 2] = HEAPU16[$1 + 10 >> 1];
            HEAP32[$4 + 48 >> 2] = HEAPU16[$1 + 12 >> 1];
            $1 = HEAPU16[$1 + 14 >> 1];
            HEAP32[$4 + 20 >> 2] = 95;
            HEAP32[$4 + 52 >> 2] = $1;
            FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($0, 2);
            $4 = $7 >>> 0 < 56;
            $7 = $7 + 8 | 0;
            if ($4) {
             continue
            }
            break;
           }
          }
          $4 = $10 - (($13 ? 0 : $6) + $6 | 0) | 0;
          if (($4 | 0) > 0) {
           continue
          }
          break;
         }
        }
        if ($4) {
         $4 = HEAP32[$0 >> 2];
         HEAP32[$4 + 20 >> 2] = 12;
         FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
        }
        HEAP32[$9 + 4 >> 2] = $2;
        HEAP32[$9 >> 2] = $3;
        break block21;
       case 220:
        $1 = HEAP32[$0 + 24 >> 2];
        $3 = HEAP32[$1 + 4 >> 2];
        if (!$3) {
         if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$1 + 4 >> 2];
        }
        $2 = HEAP32[$1 >> 2];
        $4 = HEAPU8[$2 | 0];
        $3 = $3 - 1 | 0;
        if ($3) {
         $2 = $2 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$1 + 4 >> 2];
         $2 = HEAP32[$1 >> 2];
        }
        $3 = $3 - 1 | 0;
        if ((HEAPU8[$2 | 0] | $4 << 8) != 4) {
         $4 = HEAP32[$0 >> 2];
         HEAP32[$4 + 20 >> 2] = 12;
         FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
        }
        if ($3) {
         $2 = $2 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$1 + 4 >> 2];
         $2 = HEAP32[$1 >> 2];
        }
        $5 = HEAPU8[$2 | 0];
        $4 = $3 - 1 | 0;
        if ($4) {
         $2 = $2 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $4 = HEAP32[$1 + 4 >> 2];
         $2 = HEAP32[$1 >> 2];
        }
        $3 = HEAPU8[$2 | 0];
        $6 = HEAP32[$0 >> 2];
        HEAP32[$6 + 20 >> 2] = 84;
        $3 = $3 | $5 << 8;
        HEAP32[$6 + 24 >> 2] = $3;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
        HEAP32[$0 + 280 >> 2] = $3;
        HEAP32[$1 + 4 >> 2] = $4 - 1;
        HEAP32[$1 >> 2] = $2 + 1;
        break block21;
       case 247:
        $1 = HEAP32[$0 + 24 >> 2];
        $3 = HEAP32[$1 + 4 >> 2];
        $2 = HEAP32[$1 >> 2];
        if (!HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
         $4 = HEAP32[$0 >> 2];
         HEAP32[$4 + 20 >> 2] = 60;
         wasm2js_memory_copy($4 + 24 | 0, 50290, 80);
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        }
        block44 : {
         block43 : {
          if (HEAP32[$0 + 36 >> 2] < 3) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $4 = HEAPU8[$2 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $2 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $3 = $3 - 1 | 0;
          if ((HEAPU8[$2 | 0] | $4 << 8) != 24) {
           $4 = HEAP32[$0 >> 2];
           HEAP32[$4 + 20 >> 2] = 12;
           FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
          }
          if ($3) {
           $2 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $3 = $3 - 1 | 0;
          if (HEAPU8[$2 | 0] != 13) {
           $4 = HEAP32[$0 >> 2];
           HEAP32[$4 + 20 >> 2] = 70;
           HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
           FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          }
          if ($3) {
           $2 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$2 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if ((HEAPU8[$4 | 0] | $5 << 8) != 255) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $4 = $2 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (HEAPU8[$2 | 0] != 3) {
           $2 = $4;
           break block43;
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          $5 = HEAP32[$0 + 216 >> 2];
          if (HEAP32[$5 + 88 >> 2] != HEAPU8[$4 | 0]) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $5 = HEAP32[$0 + 216 >> 2];
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $4 = $2 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (HEAP32[$5 >> 2] != HEAPU8[$2 | 0]) {
           $2 = $4;
           break block43;
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $5 = HEAP32[$0 + 216 >> 2];
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (HEAP32[$5 + 176 >> 2] != HEAPU8[$4 | 0]) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $4 = $2 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (HEAPU8[$2 | 0] != 128) {
           $2 = $4;
           break block43;
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$4 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $4 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if ($5 | HEAPU8[$4 | 0]) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$2 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if ($5 | HEAPU8[$4 | 0]) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $4 = $2 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (HEAPU8[$2 | 0]) {
           $2 = $4;
           break block43;
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$4 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $4 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if ((HEAPU8[$4 | 0] | $5 << 8) != 1) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$2 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if ($5 | HEAPU8[$4 | 0]) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $4 = $2 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (HEAPU8[$2 | 0]) {
           $2 = $4;
           break block43;
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$4 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $4 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if ((HEAPU8[$4 | 0] | $5 << 8) != 1) {
           break block43
          }
          if (!$3) {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $2 = HEAP32[$1 >> 2];
          }
          $5 = HEAPU8[$2 | 0];
          $3 = $3 - 1 | 0;
          if ($3) {
           $4 = $2 + 1 | 0
          } else {
           if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
            $1 = 0;
            break block1;
           }
           $3 = HEAP32[$1 + 4 >> 2];
           $4 = HEAP32[$1 >> 2];
          }
          $2 = $4 + 1 | 0;
          $3 = $3 - 1 | 0;
          if (!($5 | HEAPU8[$4 | 0])) {
           break block44
          }
         }
         $4 = HEAP32[$0 >> 2];
         HEAP32[$4 + 20 >> 2] = 28;
         FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
        }
        HEAP32[$0 + 304 >> 2] = 1;
        HEAP32[$1 + 4 >> 2] = $3;
        HEAP32[$1 >> 2] = $2;
        break block21;
       case 223:
       case 224:
       case 225:
       case 226:
       case 227:
       case 228:
       case 229:
       case 230:
       case 231:
       case 232:
       case 233:
       case 234:
       case 235:
       case 236:
       case 237:
       case 238:
        if (FUNCTION_TABLE[HEAP32[(HEAP32[$0 + 464 >> 2] + ($1 << 2) | 0) - 864 >> 2]]($0) | 0) {
         break block21
        }
        $1 = 0;
        break block1;
       case 253:
        if (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] + 28 >> 2]]($0) | 0) {
         break block21
        }
        $1 = 0;
        break block1;
       case 0:
       case 207:
       case 208:
       case 209:
       case 210:
       case 211:
       case 212:
       case 213:
       case 214:
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 24 >> 2] = $1;
        HEAP32[$2 + 20 >> 2] = 94;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
        break block21;
       case 219:
        $4 = HEAP32[$0 + 24 >> 2];
        $3 = HEAP32[$4 + 4 >> 2];
        if (!$3) {
         if (!(FUNCTION_TABLE[HEAP32[$4 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $3 = HEAP32[$4 + 4 >> 2];
        }
        $1 = HEAP32[$4 >> 2];
        $5 = HEAPU8[$1 | 0];
        $2 = $3 - 1 | 0;
        if ($2) {
         $1 = $1 + 1 | 0
        } else {
         if (!(FUNCTION_TABLE[HEAP32[$4 + 12 >> 2]]($0) | 0)) {
          $1 = 0;
          break block1;
         }
         $2 = HEAP32[$4 + 4 >> 2];
         $1 = HEAP32[$4 >> 2];
        }
        $3 = HEAPU8[$1 | 0];
        $6 = HEAP32[$0 >> 2];
        HEAP32[$6 + 20 >> 2] = 93;
        HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
        $3 = $3 | $5 << 8;
        $5 = $3 - 2 | 0;
        HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $5;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
        HEAP32[$4 + 4 >> 2] = $2 - 1;
        HEAP32[$4 >> 2] = $1 + 1;
        if ($3 >>> 0 < 3) {
         break block21
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 16 >> 2]]($0, $5);
        break block21;
       default:
        $2 = HEAP32[$0 >> 2];
        HEAP32[$2 + 24 >> 2] = $1;
        HEAP32[$2 + 20 >> 2] = 70;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        break block21;
       case 191:
        break block4;
       };
      }
      $1 = 0;
      if (get_sof($0, 1, 0, 0)) {
       break block21
      }
      break block1;
     }
     $1 = 0;
    }
    __stack_pointer = $11 + 288 | 0;
    return $1 | 0;
   }
   $1 = 0;
   HEAP32[$0 + 440 >> 2] = 0;
   continue;
  };
 }
 
 function reset_marker_reader($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 216 >> 2] = 0;
  HEAP32[$0 + 440 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  $0 = HEAP32[$0 + 464 >> 2];
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
 }
 
 function get_interesting_appn($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $6 = HEAP32[$0 + 24 >> 2];
  $4 = HEAP32[$6 + 4 >> 2];
  block : {
   if (!$4) {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     $4 = 0;
     break block;
    }
    $4 = HEAP32[$6 + 4 >> 2];
   }
   $1 = HEAP32[$6 >> 2];
   $5 = HEAPU8[$1 | 0];
   $4 = $4 - 1 | 0;
   if ($4) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     $4 = 0;
     break block;
    }
    $4 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   $8 = $1 + 1 | 0;
   $4 = $4 - 1 | 0;
   $1 = HEAPU8[$1 | 0] | $5 << 8;
   $5 = $1 - 2 | 0;
   $1 = $1 >>> 0 > 15 ? 14 : $1 >>> 0 >= $5 >>> 0 ? $5 : 0;
   if ($1) {
    while (1) {
     if (!$4) {
      if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
       $4 = 0;
       break block;
      }
      $8 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
     }
     HEAP8[($2 + 2 | 0) + $3 | 0] = HEAPU8[$8 | 0];
     $8 = $8 + 1 | 0;
     $4 = $4 - 1 | 0;
     $3 = $3 + 1 | 0;
     if (($1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    }
   }
   $12 = $5 - $1 | 0;
   block11 : {
    block2 : {
     block1 : {
      $3 = HEAP32[$0 + 440 >> 2];
      $7 = $3 - 224 | 0;
      if ($7) {
       if (($7 | 0) == 14) {
        break block1
       }
       break block2;
      }
      $5 = $1 + $12 | 0;
      block5 : {
       block6 : {
        block3 : {
         block4 : {
          if ($1 >>> 0 >= 14) {
           if (HEAPU8[$2 + 2 | 0] != 74) {
            break block3
           }
           if (HEAPU8[$2 + 3 | 0] != 70 | HEAPU8[$2 + 4 | 0] != 73 | (HEAPU8[$2 + 6 | 0] | HEAPU8[$2 + 5 | 0] != 70)) {
            break block4
           }
           HEAP32[$0 + 284 >> 2] = 1;
           $1 = HEAPU8[$2 + 7 | 0];
           HEAP8[$0 + 288 | 0] = $1;
           $7 = HEAPU8[$2 + 8 | 0];
           HEAP8[$0 + 289 | 0] = $7;
           $9 = HEAPU8[$2 + 9 | 0];
           HEAP8[$0 + 290 | 0] = $9;
           $3 = HEAPU8[$2 + 10 | 0] | HEAPU8[$2 + 11 | 0] << 8;
           $10 = $3 << 8 | $3 >>> 8;
           HEAP16[$0 + 292 >> 1] = $10;
           $3 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8;
           $11 = $3 << 8 | $3 >>> 8;
           HEAP16[$0 + 294 >> 1] = $11;
           if (($1 - 1 & 255) >>> 0 >= 2) {
            $3 = HEAP32[$0 >> 2];
            HEAP32[$3 + 24 >> 2] = $1;
            HEAP32[$3 + 20 >> 2] = 122;
            HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAPU8[$0 + 289 | 0];
            FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
            $9 = HEAPU8[$0 + 290 | 0];
            $11 = HEAPU16[$0 + 294 >> 1];
            $10 = HEAPU16[$0 + 292 >> 1];
            $7 = HEAPU8[$0 + 289 | 0];
            $1 = HEAPU8[$0 + 288 | 0];
           }
           $3 = HEAP32[$0 >> 2];
           HEAP32[$3 + 40 >> 2] = $9;
           HEAP32[$3 + 36 >> 2] = $11 & 65535;
           HEAP32[$3 + 32 >> 2] = $10 & 65535;
           HEAP32[$3 + 28 >> 2] = $7;
           HEAP32[$3 + 24 >> 2] = $1;
           HEAP32[$3 + 20 >> 2] = 89;
           FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, 1);
           $1 = HEAPU8[$2 + 14 | 0];
           $3 = HEAPU8[$2 + 15 | 0];
           if ($1 | $3) {
            $1 = HEAP32[$0 >> 2];
            HEAP32[$1 + 20 >> 2] = 92;
            HEAP32[$1 + 24 >> 2] = HEAPU8[$2 + 14 | 0];
            HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAPU8[$2 + 15 | 0];
            FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
            $3 = HEAPU8[$2 + 15 | 0];
            $7 = HEAPU8[$2 + 14 | 0];
           } else {
            $7 = $1
           }
           $1 = $5 - 14 | 0;
           if ((Math_imul(Math_imul($7, $3), 3) | 0) == ($1 | 0)) {
            break block5
           }
           $5 = HEAP32[$0 >> 2];
           HEAP32[$5 + 24 >> 2] = $1;
           HEAP32[$5 + 20 >> 2] = 90;
           break block6;
          }
          if (HEAPU8[$2 + 2 | 0] != 74 | $1 >>> 0 < 6) {
           break block3
          }
         }
         if (HEAPU8[$2 + 3 | 0] != 70 | HEAPU8[$2 + 4 | 0] != 88 | (HEAPU8[$2 + 6 | 0] | HEAPU8[$2 + 5 | 0] != 88)) {
          break block3
         }
         $1 = HEAP32[$0 >> 2];
         block9 : {
          switch (HEAPU8[$2 + 7 | 0] - 16 | 0) {
          case 0:
           HEAP32[$1 + 24 >> 2] = $5;
           HEAP32[$1 + 20 >> 2] = 110;
           break block6;
          case 1:
           HEAP32[$1 + 24 >> 2] = $5;
           HEAP32[$1 + 20 >> 2] = 111;
           break block6;
          case 3:
           HEAP32[$1 + 24 >> 2] = $5;
           HEAP32[$1 + 20 >> 2] = 112;
           break block6;
          default:
           break block9;
          };
         }
         HEAP32[$1 + 20 >> 2] = 91;
         HEAP32[$1 + 24 >> 2] = HEAPU8[$2 + 7 | 0];
         HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $5;
         break block6;
        }
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 24 >> 2] = $5;
        HEAP32[$1 + 20 >> 2] = 79;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
      }
      break block11;
     }
     block12 : {
      if (HEAPU8[$2 + 2 | 0] != 65 | $1 >>> 0 < 12 | (HEAPU8[$2 + 3 | 0] != 100 | HEAPU8[$2 + 4 | 0] != 111)) {
       break block12
      }
      if (HEAPU8[$2 + 5 | 0] != 98 | HEAPU8[$2 + 6 | 0] != 101) {
       break block12
      }
      $5 = HEAPU8[$2 + 8 | 0];
      $3 = HEAPU8[$2 + 7 | 0];
      $7 = HEAPU8[$2 + 10 | 0];
      $9 = HEAPU8[$2 + 9 | 0];
      $10 = HEAPU8[$2 + 12 | 0];
      $11 = HEAPU8[$2 + 11 | 0];
      $1 = HEAP32[$0 >> 2];
      $13 = HEAPU8[$2 + 13 | 0];
      HEAP32[$1 + 36 >> 2] = $13;
      HEAP32[$1 + 20 >> 2] = 78;
      HEAP32[$1 + 32 >> 2] = $10 | $11 << 8;
      HEAP32[$1 + 28 >> 2] = $7 | $9 << 8;
      HEAP32[$1 + 24 >> 2] = $5 | $3 << 8;
      FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, 1);
      HEAP8[$0 + 300 | 0] = $13;
      HEAP32[$0 + 296 >> 2] = 1;
      break block11;
     }
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 24 >> 2] = $5;
     HEAP32[$1 + 20 >> 2] = 80;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
     break block11;
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 24 >> 2] = $3;
    HEAP32[$1 + 20 >> 2] = 70;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   HEAP32[$6 + 4 >> 2] = $4;
   HEAP32[$6 >> 2] = $8;
   $4 = 1;
   if (($12 | 0) <= 0) {
    break block
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 16 >> 2]]($0, $12);
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function get_sof($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = HEAP32[$0 + 24 >> 2];
  $5 = HEAP32[$6 + 4 >> 2];
  $4 = HEAP32[$6 >> 2];
  HEAP32[$0 + 228 >> 2] = $3;
  HEAP32[$0 + 224 >> 2] = $2;
  HEAP32[$0 + 220 >> 2] = $1;
  block : {
   if (!$5) {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $4 = HEAP32[$6 >> 2];
    $5 = HEAP32[$6 + 4 >> 2];
   }
   $7 = HEAPU8[$4 | 0];
   $3 = $5 - 1 | 0;
   if ($3) {
    $1 = $4 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $3 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   $5 = HEAPU8[$1 | 0];
   $4 = $3 - 1 | 0;
   if ($4) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $4 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   HEAP32[$0 + 212 >> 2] = HEAPU8[$1 | 0];
   $4 = $4 - 1 | 0;
   if ($4) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $4 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   $3 = HEAPU8[$1 | 0] << 8;
   HEAP32[$0 + 32 >> 2] = $3;
   $4 = $4 - 1 | 0;
   if ($4) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $3 = HEAP32[$0 + 32 >> 2];
    $4 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   HEAP32[$0 + 32 >> 2] = HEAPU8[$1 | 0] + $3;
   $4 = $4 - 1 | 0;
   if ($4) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $4 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   $3 = HEAPU8[$1 | 0] << 8;
   HEAP32[$0 + 28 >> 2] = $3;
   $4 = $4 - 1 | 0;
   if ($4) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $3 = HEAP32[$0 + 28 >> 2];
    $4 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   HEAP32[$0 + 28 >> 2] = HEAPU8[$1 | 0] + $3;
   $2 = $4 - 1 | 0;
   if ($2) {
    $1 = $1 + 1 | 0
   } else {
    if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
     break block
    }
    $2 = HEAP32[$6 + 4 >> 2];
    $1 = HEAP32[$6 >> 2];
   }
   HEAP32[$0 + 36 >> 2] = HEAPU8[$1 | 0];
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
   HEAP32[$3 + 28 >> 2] = HEAP32[$0 + 28 >> 2];
   HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
   $4 = HEAP32[$0 + 36 >> 2];
   HEAP32[$3 + 20 >> 2] = 102;
   HEAP32[$3 + 36 >> 2] = $4;
   FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, 1);
   if (HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
    $3 = HEAP32[$0 >> 2];
    HEAP32[$3 + 20 >> 2] = 61;
    FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
   }
   $3 = ($5 | $7 << 8) - 8 | 0;
   block2 : {
    if (!(!HEAP32[$0 + 32 >> 2] | !HEAP32[$0 + 28 >> 2])) {
     $4 = HEAP32[$0 + 36 >> 2];
     if (($4 | 0) > 0) {
      break block2
     }
    }
    $5 = HEAP32[$0 >> 2];
    HEAP32[$5 + 20 >> 2] = 33;
    FUNCTION_TABLE[HEAP32[$5 >> 2]]($0);
    $4 = HEAP32[$0 + 36 >> 2];
   }
   if (($3 | 0) != (Math_imul($4, 3) | 0)) {
    $3 = HEAP32[$0 >> 2];
    HEAP32[$3 + 20 >> 2] = 12;
    FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
    $4 = HEAP32[$0 + 36 >> 2];
   }
   $9 = $1 + 1 | 0;
   $5 = $2 - 1 | 0;
   if (!HEAP32[$0 + 216 >> 2]) {
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, Math_imul($4, 88)) | 0), HEAP32[wasm2js_i32$0 + 216 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$0 + 36 >> 2];
   }
   if (($4 | 0) > 0) {
    $3 = 0;
    while (1) {
     if (!$5) {
      if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
       break block
      }
      $9 = HEAP32[$6 >> 2];
      $5 = HEAP32[$6 + 4 >> 2];
     }
     $11 = $5 - 1 | 0;
     $1 = HEAP32[$0 + 216 >> 2];
     $2 = HEAPU8[$9 | 0];
     block3 : {
      if (!$3) {
       $5 = $1;
       break block3;
      }
      $10 = $3 - 2 | 0;
      $8 = $3 - 1 | 0;
      $7 = $1 + $12 | 0;
      $4 = 0;
      $5 = $1;
      while (1) {
       if (HEAP32[$5 >> 2] == ($2 | 0)) {
        $5 = $1 + 88 | 0;
        $4 = HEAP32[$1 >> 2];
        if (($3 | 0) != 1) {
         $1 = $8 & 3;
         block4 : {
          if ($10 >>> 0 >= 3) {
           $8 = $8 & -4;
           $2 = 0;
           while (1) {
            $10 = HEAP32[$5 + 264 >> 2];
            $13 = HEAP32[$5 + 176 >> 2];
            $14 = HEAP32[$5 + 88 >> 2];
            $15 = HEAP32[$5 >> 2];
            $4 = ($4 | 0) < ($15 | 0) ? $15 : $4;
            $4 = ($4 | 0) < ($14 | 0) ? $14 : $4;
            $4 = ($4 | 0) < ($13 | 0) ? $13 : $4;
            $4 = ($4 | 0) < ($10 | 0) ? $10 : $4;
            $5 = $5 + 352 | 0;
            $2 = $2 + 4 | 0;
            if (($8 | 0) != ($2 | 0)) {
             continue
            }
            break;
           };
           if (!$1) {
            break block4
           }
          }
          $2 = 0;
          while (1) {
           $8 = HEAP32[$5 >> 2];
           $4 = ($4 | 0) < ($8 | 0) ? $8 : $4;
           $5 = $5 + 88 | 0;
           $2 = $2 + 1 | 0;
           if (($1 | 0) != ($2 | 0)) {
            continue
           }
           break;
          };
         }
         $5 = $7;
        }
        $2 = $4 + 1 | 0;
        break block3;
       }
       $5 = $5 + 88 | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
      $5 = $7;
     }
     HEAP32[$5 + 4 >> 2] = $3;
     HEAP32[$5 >> 2] = $2;
     if ($11) {
      $2 = $9 + 1 | 0
     } else {
      if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
       break block
      }
      $11 = HEAP32[$6 + 4 >> 2];
      $2 = HEAP32[$6 >> 2];
     }
     $1 = HEAPU8[$2 | 0];
     HEAP32[$5 + 12 >> 2] = $1 & 15;
     HEAP32[$5 + 8 >> 2] = $1 >>> 4;
     $1 = $11 - 1 | 0;
     if ($1) {
      $7 = $2 + 1 | 0
     } else {
      if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
       break block
      }
      $1 = HEAP32[$6 + 4 >> 2];
      $7 = HEAP32[$6 >> 2];
     }
     HEAP32[$5 + 16 >> 2] = HEAPU8[$7 | 0];
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$5 + 8 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$5 + 12 >> 2];
     $5 = HEAP32[$5 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = 103;
     HEAP32[$2 + 36 >> 2] = $5;
     FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
     $12 = $12 + 88 | 0;
     $9 = $7 + 1 | 0;
     $5 = $1 - 1 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
      continue
     }
     break;
    };
   }
   HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2] = 1;
   HEAP32[$6 + 4 >> 2] = $5;
   HEAP32[$6 >> 2] = $9;
   return 1;
  }
  return 0;
 }
 
 function grayscale_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  jcopy_sample_rows(HEAP32[$1 >> 2] + ($2 << 2) | 0, $3, $4, HEAP32[$0 + 112 >> 2]);
 }
 
 function rgb_gray_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if (($4 | 0) > 0) {
   $5 = HEAP32[$0 + 112 >> 2];
   $0 = HEAP32[$0 + 480 >> 2];
   $6 = HEAP32[$0 + 32 >> 2];
   $7 = HEAP32[$0 + 28 >> 2];
   $8 = HEAP32[$0 + 24 >> 2];
   while (1) {
    $0 = $4;
    if ($5) {
     $4 = $2 << 2;
     $9 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
     $10 = HEAP32[$4 + HEAP32[$1 + 4 >> 2] >> 2];
     $11 = HEAP32[$4 + HEAP32[$1 >> 2] >> 2];
     $12 = HEAP32[$3 >> 2];
     $4 = 0;
     while (1) {
      HEAP8[$4 + $12 | 0] = HEAP32[(HEAPU8[$4 + $9 | 0] << 2) + $6 >> 2] + (HEAP32[(HEAPU8[$4 + $10 | 0] << 2) + $7 >> 2] + HEAP32[(HEAPU8[$4 + $11 | 0] << 2) + $8 >> 2] | 0) >>> 16;
      $4 = $4 + 1 | 0;
      if (($5 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $0 - 1 | 0;
    if ($0 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function rgb1_gray_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if (($4 | 0) > 0) {
   $6 = HEAP32[$0 + 112 >> 2];
   $0 = HEAP32[$0 + 480 >> 2];
   $7 = HEAP32[$0 + 32 >> 2];
   $8 = HEAP32[$0 + 28 >> 2];
   $9 = HEAP32[$0 + 24 >> 2];
   while (1) {
    $0 = $4;
    if ($6) {
     $4 = $2 << 2;
     $10 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
     $11 = HEAP32[$4 + HEAP32[$1 + 4 >> 2] >> 2];
     $12 = HEAP32[$4 + HEAP32[$1 >> 2] >> 2];
     $13 = HEAP32[$3 >> 2];
     $4 = 0;
     while (1) {
      $5 = HEAPU8[$4 + $11 | 0];
      HEAP8[$4 + $13 | 0] = (HEAP32[($5 << 2) + $8 >> 2] + HEAP32[(((HEAPU8[$4 + $12 | 0] + $5 ^ 128) & 255) << 2) + $9 >> 2] | 0) + HEAP32[(((HEAPU8[$4 + $10 | 0] + $5 ^ 128) & 255) << 2) + $7 >> 2] >>> 16;
      $4 = $4 + 1 | 0;
      if (($6 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $0 - 1 | 0;
    if ($0 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function gray_rgb_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if (($4 | 0) > 0) {
   $7 = HEAP32[$0 + 112 >> 2];
   $13 = $7 & -4;
   $10 = $7 & 3;
   while (1) {
    $11 = $4;
    block : {
     if (!$7) {
      break block
     }
     $12 = HEAP32[HEAP32[$1 >> 2] + ($2 << 2) >> 2];
     $4 = HEAP32[$3 >> 2];
     $8 = 0;
     $0 = 0;
     $9 = 0;
     if ($7 >>> 0 >= 4) {
      while (1) {
       $5 = $0 + $12 | 0;
       $6 = HEAPU8[$5 | 0];
       HEAP8[$4 + 1 | 0] = $6;
       HEAP8[$4 + 2 | 0] = $6;
       HEAP8[$4 | 0] = $6;
       $6 = HEAPU8[$5 + 1 | 0];
       HEAP8[$4 + 4 | 0] = $6;
       HEAP8[$4 + 5 | 0] = $6;
       HEAP8[$4 + 3 | 0] = $6;
       $6 = HEAPU8[$5 + 2 | 0];
       HEAP8[$4 + 7 | 0] = $6;
       HEAP8[$4 + 8 | 0] = $6;
       HEAP8[$4 + 6 | 0] = $6;
       $5 = HEAPU8[$5 + 3 | 0];
       HEAP8[$4 + 10 | 0] = $5;
       HEAP8[$4 + 11 | 0] = $5;
       HEAP8[$4 + 9 | 0] = $5;
       $0 = $0 + 4 | 0;
       $4 = $4 + 12 | 0;
       $9 = $9 + 4 | 0;
       if (($13 | 0) != ($9 | 0)) {
        continue
       }
       break;
      };
      if (!$10) {
       break block
      }
     }
     while (1) {
      $5 = HEAPU8[$0 + $12 | 0];
      HEAP8[$4 + 1 | 0] = $5;
      HEAP8[$4 + 2 | 0] = $5;
      HEAP8[$4 | 0] = $5;
      $0 = $0 + 1 | 0;
      $4 = $4 + 3 | 0;
      $8 = $8 + 1 | 0;
      if (($8 | 0) != ($10 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $11 - 1 | 0;
    if ($11 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function ycc_rgb_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  if (($4 | 0) > 0) {
   $6 = HEAP32[$0 + 336 >> 2];
   $8 = HEAP32[$0 + 112 >> 2];
   $0 = HEAP32[$0 + 480 >> 2];
   $11 = HEAP32[$0 + 20 >> 2];
   $12 = HEAP32[$0 + 16 >> 2];
   $13 = HEAP32[$0 + 12 >> 2];
   $14 = HEAP32[$0 + 8 >> 2];
   while (1) {
    $9 = $4;
    if ($8) {
     $0 = $2 << 2;
     $15 = HEAP32[$0 + HEAP32[$1 + 8 >> 2] >> 2];
     $16 = HEAP32[$0 + HEAP32[$1 + 4 >> 2] >> 2];
     $17 = HEAP32[$0 + HEAP32[$1 >> 2] >> 2];
     $4 = HEAP32[$3 >> 2];
     $0 = 0;
     while (1) {
      $5 = HEAPU8[$0 + $16 | 0];
      $7 = HEAPU8[$0 + $17 | 0];
      $10 = HEAPU8[$0 + $15 | 0] << 2;
      HEAP8[$4 | 0] = HEAPU8[$7 + (HEAP32[$10 + $14 >> 2] + $6 | 0) | 0];
      $5 = $5 << 2;
      HEAP8[$4 + 1 | 0] = HEAPU8[((HEAP32[$12 + $10 >> 2] + HEAP32[$5 + $11 >> 2] >> 16) + $6 | 0) + $7 | 0];
      HEAP8[$4 + 2 | 0] = HEAPU8[(HEAP32[$5 + $13 >> 2] + $6 | 0) + $7 | 0];
      $4 = $4 + 3 | 0;
      $0 = $0 + 1 | 0;
      if (($8 | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $9 - 1 | 0;
    if ($9 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function build_ycc_rgb_table($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = HEAP32[$0 + 480 >> 2];
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
  HEAP32[$1 + 20 >> 2] = $3;
  $4 = HEAP32[$1 + 16 >> 2];
  $5 = HEAP32[$1 + 12 >> 2];
  $6 = HEAP32[$1 + 8 >> 2];
  $1 = 0;
  $0 = -128;
  while (1) {
   $2 = $1 << 2;
   HEAP32[$6 + $2 >> 2] = Math_imul($0, 91881) + 32768 >> 16;
   HEAP32[$2 + $5 >> 2] = Math_imul($0, 116130) + 32768 >> 16;
   HEAP32[$2 + $4 >> 2] = Math_imul($0, -46802);
   HEAP32[$2 + $3 >> 2] = Math_imul($0, -22553) + 32768;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 256) {
    continue
   }
   break;
  };
 }
 
 function rgb_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if (($4 | 0) > 0) {
   $5 = HEAP32[$0 + 112 >> 2];
   $12 = $5 & -2;
   $13 = $5 & 1;
   while (1) {
    $11 = $4;
    block : {
     if (!$5) {
      break block
     }
     $0 = $2 << 2;
     $6 = HEAP32[$0 + HEAP32[$1 + 8 >> 2] >> 2];
     $7 = HEAP32[$0 + HEAP32[$1 + 4 >> 2] >> 2];
     $8 = HEAP32[$0 + HEAP32[$1 >> 2] >> 2];
     $4 = HEAP32[$3 >> 2];
     $0 = 0;
     $9 = 0;
     if (($5 | 0) != 1) {
      while (1) {
       HEAP8[$4 | 0] = HEAPU8[$0 + $8 | 0];
       HEAP8[$4 + 1 | 0] = HEAPU8[$0 + $7 | 0];
       HEAP8[$4 + 2 | 0] = HEAPU8[$0 + $6 | 0];
       $10 = $0 | 1;
       HEAP8[$4 + 3 | 0] = HEAPU8[$10 + $8 | 0];
       HEAP8[$4 + 4 | 0] = HEAPU8[$7 + $10 | 0];
       HEAP8[$4 + 5 | 0] = HEAPU8[$6 + $10 | 0];
       $0 = $0 + 2 | 0;
       $4 = $4 + 6 | 0;
       $9 = $9 + 2 | 0;
       if (($12 | 0) != ($9 | 0)) {
        continue
       }
       break;
      };
      if (!$13) {
       break block
      }
     }
     HEAP8[$4 | 0] = HEAPU8[$0 + $8 | 0];
     HEAP8[$4 + 1 | 0] = HEAPU8[$0 + $7 | 0];
     HEAP8[$4 + 2 | 0] = HEAPU8[$0 + $6 | 0];
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $11 - 1 | 0;
    if ($11 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function rgb1_rgb_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  if (($4 | 0) > 0) {
   $8 = HEAP32[$0 + 112 >> 2];
   $14 = $8 & -2;
   $15 = $8 & 1;
   while (1) {
    $13 = $4;
    block : {
     if (!$8) {
      break block
     }
     $0 = $2 << 2;
     $6 = HEAP32[$0 + HEAP32[$1 + 8 >> 2] >> 2];
     $9 = HEAP32[$0 + HEAP32[$1 + 4 >> 2] >> 2];
     $7 = HEAP32[$0 + HEAP32[$1 >> 2] >> 2];
     $4 = HEAP32[$3 >> 2];
     $0 = 0;
     $10 = 0;
     if (($8 | 0) != 1) {
      while (1) {
       $11 = HEAPU8[$0 + $7 | 0];
       $12 = HEAPU8[$0 + $6 | 0];
       $5 = HEAPU8[$0 + $9 | 0];
       HEAP8[$4 + 1 | 0] = $5;
       HEAP8[$4 + 2 | 0] = $5 + $12 ^ 128;
       HEAP8[$4 | 0] = $5 + $11 ^ 128;
       $5 = $0 | 1;
       $11 = HEAPU8[$5 + $7 | 0];
       $12 = HEAPU8[$5 + $6 | 0];
       $5 = HEAPU8[$5 + $9 | 0];
       HEAP8[$4 + 4 | 0] = $5;
       HEAP8[$4 + 5 | 0] = $5 + $12 ^ 128;
       HEAP8[$4 + 3 | 0] = $5 + $11 ^ 128;
       $0 = $0 + 2 | 0;
       $4 = $4 + 6 | 0;
       $10 = $10 + 2 | 0;
       if (($14 | 0) != ($10 | 0)) {
        continue
       }
       break;
      };
      if (!$15) {
       break block
      }
     }
     $7 = HEAPU8[$0 + $7 | 0];
     $6 = HEAPU8[$0 + $6 | 0];
     $0 = HEAPU8[$0 + $9 | 0];
     HEAP8[$4 + 1 | 0] = $0;
     HEAP8[$4 + 2 | 0] = $0 + $6 ^ 128;
     HEAP8[$4 | 0] = $0 + $7 ^ 128;
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $13 - 1 | 0;
    if ($13 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function ycck_cmyk_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  if (($4 | 0) > 0) {
   $6 = HEAP32[$0 + 336 >> 2];
   $8 = HEAP32[$0 + 112 >> 2];
   $0 = HEAP32[$0 + 480 >> 2];
   $11 = HEAP32[$0 + 20 >> 2];
   $12 = HEAP32[$0 + 16 >> 2];
   $13 = HEAP32[$0 + 12 >> 2];
   $14 = HEAP32[$0 + 8 >> 2];
   while (1) {
    $9 = $4;
    if ($8) {
     $0 = $2 << 2;
     $15 = HEAP32[$0 + HEAP32[$1 + 12 >> 2] >> 2];
     $16 = HEAP32[$0 + HEAP32[$1 + 8 >> 2] >> 2];
     $17 = HEAP32[$0 + HEAP32[$1 + 4 >> 2] >> 2];
     $18 = HEAP32[$0 + HEAP32[$1 >> 2] >> 2];
     $4 = HEAP32[$3 >> 2];
     $0 = 0;
     while (1) {
      $5 = HEAPU8[$0 + $17 | 0];
      $7 = HEAPU8[$0 + $18 | 0] ^ 255;
      $10 = HEAPU8[$0 + $16 | 0] << 2;
      HEAP8[$4 | 0] = HEAPU8[($7 - HEAP32[$10 + $14 >> 2] | 0) + $6 | 0];
      $5 = $5 << 2;
      HEAP8[$4 + 1 | 0] = HEAPU8[($7 - (HEAP32[$12 + $10 >> 2] + HEAP32[$5 + $11 >> 2] >> 16) | 0) + $6 | 0];
      HEAP8[$4 + 2 | 0] = HEAPU8[($7 - HEAP32[$5 + $13 >> 2] | 0) + $6 | 0];
      HEAP8[$4 + 3 | 0] = HEAPU8[$0 + $15 | 0];
      $4 = $4 + 4 | 0;
      $0 = $0 + 1 | 0;
      if (($8 | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $9 - 1 | 0;
    if ($9 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function cmyk_yk_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if (($4 | 0) > 0) {
   $5 = HEAP32[$0 + 112 >> 2];
   $0 = HEAP32[$0 + 480 >> 2];
   $7 = HEAP32[$0 + 32 >> 2];
   $8 = HEAP32[$0 + 28 >> 2];
   $9 = HEAP32[$0 + 24 >> 2];
   while (1) {
    $6 = $4;
    if ($5) {
     $0 = $2 << 2;
     $10 = HEAP32[$0 + HEAP32[$1 + 12 >> 2] >> 2];
     $11 = HEAP32[$0 + HEAP32[$1 + 8 >> 2] >> 2];
     $12 = HEAP32[$0 + HEAP32[$1 + 4 >> 2] >> 2];
     $13 = HEAP32[$0 + HEAP32[$1 >> 2] >> 2];
     $0 = HEAP32[$3 >> 2];
     $4 = 0;
     while (1) {
      HEAP8[$0 | 0] = HEAP32[((HEAPU8[$4 + $11 | 0] ^ 255) << 2) + $7 >> 2] + (HEAP32[((HEAPU8[$4 + $12 | 0] ^ 255) << 2) + $8 >> 2] + HEAP32[((HEAPU8[$4 + $13 | 0] ^ 255) << 2) + $9 >> 2] | 0) >>> 16;
      HEAP8[$0 + 1 | 0] = HEAPU8[$4 + $10 | 0];
      $0 = $0 + 2 | 0;
      $4 = $4 + 1 | 0;
      if (($5 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $4 = $6 - 1 | 0;
    if ($6 >>> 0 >= 2) {
     continue
    }
    break;
   };
  }
 }
 
 function null_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if (($4 | 0) > 0) {
   $7 = HEAP32[$0 + 120 >> 2];
   $9 = HEAP32[$0 + 112 >> 2];
   $13 = $9 & 3;
   $6 = HEAP32[$0 + 36 >> 2];
   while (1) {
    if (($6 | 0) > 0) {
     $5 = HEAP32[$3 >> 2];
     $11 = HEAP32[$0 + 216 >> 2];
     $10 = 0;
     while (1) {
      if (HEAP32[$11 + 52 >> 2]) {
       $14 = $5 + 1 | 0;
       if ($9) {
        $6 = HEAP32[HEAP32[($10 << 2) + $1 >> 2] + ($2 << 2) >> 2];
        $12 = 0;
        $8 = $9;
        if ($13) {
         while (1) {
          HEAP8[$5 | 0] = HEAPU8[$6 | 0];
          $8 = $8 - 1 | 0;
          $5 = $5 + $7 | 0;
          $6 = $6 + 1 | 0;
          $12 = $12 + 1 | 0;
          if (($12 | 0) != ($13 | 0)) {
           continue
          }
          break;
         }
        }
        if ($9 >>> 0 >= 4) {
         while (1) {
          HEAP8[$5 | 0] = HEAPU8[$6 | 0];
          $5 = $5 + $7 | 0;
          HEAP8[$5 | 0] = HEAPU8[$6 + 1 | 0];
          $5 = $5 + $7 | 0;
          HEAP8[$5 | 0] = HEAPU8[$6 + 2 | 0];
          $5 = $5 + $7 | 0;
          HEAP8[$5 | 0] = HEAPU8[$6 + 3 | 0];
          $6 = $6 + 4 | 0;
          $5 = $5 + $7 | 0;
          $8 = $8 - 4 | 0;
          if ($8) {
           continue
          }
          break;
         }
        }
        $6 = HEAP32[$0 + 36 >> 2];
       }
       $5 = $14;
      }
      $11 = $11 + 88 | 0;
      $10 = $10 + 1 | 0;
      if (($10 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    $5 = ($4 | 0) > 1;
    $4 = $4 - 1 | 0;
    if ($5) {
     continue
    }
    break;
   };
  }
 }
 
 function start_pass($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0;
  if (HEAP32[$0 + 36 >> 2] > 0) {
   $1 = HEAP32[$0 + 472 >> 2];
   $11 = $1 + 44 | 0;
   $12 = $1 + 4 | 0;
   $8 = HEAP32[$0 + 216 >> 2];
   $1 = 0;
   while (1) {
    $2 = $4;
    $7 = $1;
    block5 : {
     block40 : {
      block39 : {
       block38 : {
        block2 : {
         block25 : {
          block23 : {
           block6 : {
            block3 : {
             block9 : {
              block12 : {
               block15 : {
                block18 : {
                 block21 : {
                  block24 : {
                   block : {
                    block10 : {
                     block16 : {
                      block22 : {
                       block26 : {
                        block29 : {
                         block32 : {
                          block35 : {
                           block36 : {
                            block37 : {
                             block33 : {
                              block31 : {
                               block30 : {
                                block28 : {
                                 block27 : {
                                  block20 : {
                                   block17 : {
                                    block14 : {
                                     block11 : {
                                      block8 : {
                                       block1 : {
                                        $6 = HEAP32[$8 + 36 >> 2];
                                        $3 = HEAP32[$8 + 40 >> 2] + ($6 << 8) | 0;
                                        if (($3 | 0) <= 2051) {
                                         if (($3 | 0) <= 1025) {
                                          block4 : {
                                           switch ($3 - 513 | 0) {
                                           case 0:
                                            break block;
                                           case 1:
                                            break block1;
                                           case 2:
                                            break block2;
                                           case 3:
                                            break block3;
                                           default:
                                            break block4;
                                           };
                                          }
                                          $4 = 161;
                                          $1 = 0;
                                          block7 : {
                                           switch ($3 - 257 | 0) {
                                           case 0:
                                            break block5;
                                           case 1:
                                            break block6;
                                           default:
                                            break block7;
                                           };
                                          }
                                          switch ($3 - 771 | 0) {
                                          case 0:
                                           break block8;
                                          case 3:
                                           break block9;
                                          default:
                                           break block2;
                                          };
                                         }
                                         if (($3 | 0) <= 1538) {
                                          block13 : {
                                           switch ($3 - 1026 | 0) {
                                           case 0:
                                            break block10;
                                           case 2:
                                            break block11;
                                           case 6:
                                            break block12;
                                           case 1:
                                           case 3:
                                           case 4:
                                           case 5:
                                            break block2;
                                           default:
                                            break block13;
                                           };
                                          }
                                          switch ($3 - 1285 | 0) {
                                          case 0:
                                           break block14;
                                          case 5:
                                           break block15;
                                          default:
                                           break block2;
                                          };
                                         }
                                         block19 : {
                                          switch ($3 - 1539 | 0) {
                                          case 0:
                                           break block16;
                                          case 3:
                                           break block17;
                                          case 9:
                                           break block18;
                                          case 1:
                                          case 2:
                                          case 4:
                                          case 5:
                                          case 6:
                                          case 7:
                                          case 8:
                                           break block2;
                                          default:
                                           break block19;
                                          };
                                         }
                                         switch ($3 - 1799 | 0) {
                                         case 0:
                                          break block20;
                                         case 7:
                                          break block21;
                                         default:
                                          break block2;
                                         };
                                        }
                                        if (($3 | 0) <= 3077) {
                                         if (($3 | 0) <= 2564) {
                                          switch ($3 - 2052 | 0) {
                                          case 1:
                                          case 2:
                                          case 3:
                                          case 5:
                                          case 6:
                                          case 7:
                                          case 8:
                                          case 9:
                                          case 10:
                                          case 11:
                                           break block2;
                                          case 0:
                                           break block22;
                                          case 4:
                                           break block23;
                                          case 12:
                                           break block24;
                                          default:
                                           break block25;
                                          }
                                         }
                                         switch ($3 - 2565 | 0) {
                                         case 1:
                                         case 2:
                                         case 3:
                                         case 4:
                                          break block2;
                                         case 0:
                                          break block26;
                                         case 5:
                                          break block27;
                                         default:
                                          break block28;
                                         };
                                        }
                                        if (($3 | 0) <= 3590) {
                                         switch ($3 - 3078 | 0) {
                                         case 1:
                                         case 2:
                                         case 3:
                                         case 4:
                                         case 5:
                                          break block2;
                                         case 0:
                                          break block29;
                                         case 6:
                                          break block30;
                                         default:
                                          break block31;
                                         }
                                        }
                                        block34 : {
                                         switch ($3 - 3591 | 0) {
                                         case 1:
                                         case 2:
                                         case 3:
                                         case 4:
                                         case 5:
                                         case 6:
                                          break block2;
                                         case 0:
                                          break block32;
                                         case 7:
                                          break block33;
                                         default:
                                          break block34;
                                         };
                                        }
                                        switch ($3 - 4104 | 0) {
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                        case 5:
                                        case 6:
                                        case 7:
                                         break block2;
                                        case 0:
                                         break block35;
                                        case 8:
                                         break block36;
                                        default:
                                         break block37;
                                        };
                                       }
                                       $4 = 162;
                                       $1 = 0;
                                       break block5;
                                      }
                                      $4 = 163;
                                      break block5;
                                     }
                                     $4 = 164;
                                     $1 = 0;
                                     break block5;
                                    }
                                    $4 = 165;
                                    $1 = 0;
                                    break block5;
                                   }
                                   $4 = 166;
                                   $1 = 0;
                                   break block5;
                                  }
                                  $4 = 167;
                                  $1 = 0;
                                  break block5;
                                 }
                                 $4 = 168;
                                 $1 = 0;
                                 break block5;
                                }
                                if (($3 | 0) != 2827) {
                                 break block2
                                }
                                $4 = 169;
                                $1 = 0;
                                break block5;
                               }
                               $4 = 170;
                               $1 = 0;
                               break block5;
                              }
                              if (($3 | 0) != 3341) {
                               break block2
                              }
                              $4 = 171;
                              $1 = 0;
                              break block5;
                             }
                             $4 = 172;
                             $1 = 0;
                             break block5;
                            }
                            if (($3 | 0) != 3855) {
                             break block2
                            }
                            $4 = 173;
                            $1 = 0;
                            break block5;
                           }
                           $4 = 174;
                           $1 = 0;
                           break block5;
                          }
                          $4 = 175;
                          $1 = 0;
                          break block5;
                         }
                         $4 = 176;
                         $1 = 0;
                         break block5;
                        }
                        $4 = 177;
                        $1 = 0;
                        break block5;
                       }
                       $4 = 178;
                       $1 = 0;
                       break block5;
                      }
                      $4 = 179;
                      $1 = 0;
                      break block5;
                     }
                     $4 = 180;
                     $1 = 0;
                     break block5;
                    }
                    $4 = 181;
                    $1 = 0;
                    break block5;
                   }
                   $4 = 182;
                   $1 = 0;
                   break block5;
                  }
                  $4 = 183;
                  $1 = 0;
                  break block5;
                 }
                 $4 = 184;
                 $1 = 0;
                 break block5;
                }
                $4 = 185;
                $1 = 0;
                break block5;
               }
               $4 = 186;
               $1 = 0;
               break block5;
              }
              $4 = 187;
              $1 = 0;
              break block5;
             }
             $4 = 188;
             break block5;
            }
            $4 = 189;
            $1 = 0;
            break block5;
           }
           $4 = 190;
           break block5;
          }
          $1 = HEAP32[$0 + 72 >> 2];
          if ($1 >>> 0 < 3) {
           break block38
          }
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 20 >> 2] = 49;
          FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
          break block39;
         }
         if (($3 | 0) == 2313) {
          break block40
         }
        }
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 24 >> 2] = $6;
        HEAP32[$1 + 20 >> 2] = 7;
        HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$8 + 40 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
        break block39;
       }
       $4 = HEAP32[($1 << 2) + 50576 >> 2];
       break block5;
      }
      $4 = $2;
      $1 = $7;
      break block5;
     }
     $4 = 191;
     $1 = 0;
    }
    $2 = $10 << 2;
    HEAP32[$2 + $12 >> 2] = $4;
    block41 : {
     if (!HEAP32[$8 + 52 >> 2]) {
      break block41
     }
     $2 = $2 + $11 | 0;
     if (HEAP32[$2 >> 2] == ($1 | 0)) {
      break block41
     }
     $7 = HEAP32[$8 + 80 >> 2];
     if (!$7) {
      break block41
     }
     HEAP32[$2 >> 2] = $1;
     $3 = HEAP32[$8 + 84 >> 2];
     $6 = 0;
     $2 = 0;
     block43 : {
      switch ($1 - 1 | 0) {
      default:
       $2 = $1;
       $5 = 0 - $2 & 3;
       if ($5) {
        while (1) {
         HEAP32[$3 + ($2 << 2) >> 2] = HEAPU16[$7 + ($2 << 1) >> 1];
         $2 = $2 + 1 | 0;
         $6 = $6 + 1 | 0;
         if (($5 | 0) != ($6 | 0)) {
          continue
         }
         break;
        }
       }
       if ($1 >>> 0 > 60) {
        break block41
       }
       while (1) {
        HEAP32[$3 + ($2 << 2) >> 2] = HEAPU16[$7 + ($2 << 1) >> 1];
        $6 = $2 + 1 | 0;
        HEAP32[$3 + ($6 << 2) >> 2] = HEAPU16[$7 + ($6 << 1) >> 1];
        $6 = $2 + 2 | 0;
        HEAP32[$3 + ($6 << 2) >> 2] = HEAPU16[$7 + ($6 << 1) >> 1];
        $6 = $2 + 3 | 0;
        HEAP32[$3 + ($6 << 2) >> 2] = HEAPU16[$7 + ($6 << 1) >> 1];
        $2 = $2 + 4 | 0;
        if (($2 | 0) != 64) {
         continue
        }
        break;
       };
       break block41;
      case 0:
       while (1) {
        $2 = $6 << 1;
        HEAP32[$3 + ($6 << 2) >> 2] = Math_imul(HEAP16[$2 + 50384 >> 1], HEAPU16[$2 + $7 >> 1]) + 2048 >> 12;
        $5 = $6 | 1;
        $2 = $5 << 1;
        HEAP32[$3 + ($5 << 2) >> 2] = Math_imul(HEAP16[$2 + 50384 >> 1], HEAPU16[$2 + $7 >> 1]) + 2048 >> 12;
        $6 = $6 + 2 | 0;
        if (($6 | 0) != 64) {
         continue
        }
        break;
       };
       break block41;
      case 1:
       break block43;
      };
     }
     while (1) {
      $9 = HEAPF64[($6 << 3) + 50512 >> 3];
      HEAPF32[$3 + ($2 << 2) >> 2] = $9 * +HEAPU16[$7 + ($2 << 1) >> 1] * .125;
      $5 = $2 | 1;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * 1.387039845 * .125;
      $5 = $2 | 2;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * 1.306562965 * .125;
      $5 = $2 | 3;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * 1.175875602 * .125;
      $5 = $2 | 4;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * .125;
      $5 = $2 | 5;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * .785694958 * .125;
      $5 = $2 | 6;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * .5411961 * .125;
      $5 = $2 | 7;
      HEAPF32[$3 + ($5 << 2) >> 2] = $9 * +HEAPU16[$7 + ($5 << 1) >> 1] * .275899379 * .125;
      $2 = $2 + 8 | 0;
      $6 = $6 + 1 | 0;
      if (($6 | 0) != 8) {
       continue
      }
      break;
     };
    }
    $8 = $8 + 88 | 0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) < HEAP32[$0 + 36 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function start_pass_1209($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $1 = HEAP32[$0 + 412 >> 2];
  $3 = HEAP32[$0 + 468 >> 2];
  block5 : {
   if (HEAP32[$0 + 224 >> 2]) {
    $2 = HEAP32[$0 + 416 >> 2];
    block3 : {
     block1 : {
      block : {
       if (!$1) {
        if (!$2) {
         break block
        }
        break block1;
       }
       if (($1 | 0) > ($2 | 0) | ($2 | 0) > HEAP32[$0 + 436 >> 2] | HEAP32[$0 + 340 >> 2] != 1) {
        break block1
       }
      }
      $2 = HEAP32[$0 + 420 >> 2];
      block2 : {
       if (!$2) {
        $2 = HEAP32[$0 + 424 >> 2];
        break block2;
       }
       $2 = $2 - 1 | 0;
       if (($2 | 0) != HEAP32[$0 + 424 >> 2]) {
        break block1
       }
      }
      if (($2 | 0) < 14) {
       break block3
      }
     }
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 24 >> 2] = $1;
     HEAP32[$2 + 20 >> 2] = 17;
     HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$0 + 416 >> 2];
     HEAP32[HEAP32[$0 >> 2] + 32 >> 2] = HEAP32[$0 + 420 >> 2];
     HEAP32[HEAP32[$0 >> 2] + 36 >> 2] = HEAP32[$0 + 424 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    $1 = HEAP32[$0 + 340 >> 2];
    if (($1 | 0) > 0) {
     $9 = $0 + 344 | 0;
     while (1) {
      $6 = HEAP32[HEAP32[$9 + ($4 << 2) >> 2] + 4 >> 2];
      $8 = HEAP32[$0 + 160 >> 2] + ($6 << 8) | 0;
      $2 = HEAP32[$0 + 412 >> 2];
      $1 = 0;
      block4 : {
       if (!$2) {
        break block4
       }
       $1 = $2;
       if (HEAP32[$8 >> 2] >= 0) {
        break block4
       }
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 24 >> 2] = $6;
       HEAP32[$1 + 20 >> 2] = 118;
       HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
       $1 = HEAP32[$0 + 412 >> 2];
      }
      if (($1 | 0) <= HEAP32[$0 + 416 >> 2]) {
       while (1) {
        $2 = $8 + ($1 << 2) | 0;
        $5 = HEAP32[$2 >> 2];
        if (HEAP32[$0 + 420 >> 2] != ((($5 | 0) > 0 ? $5 : 0) | 0)) {
         $5 = HEAP32[$0 >> 2];
         HEAP32[$5 + 24 >> 2] = $6;
         HEAP32[$5 + 20 >> 2] = 118;
         HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
        }
        HEAP32[$2 >> 2] = HEAP32[$0 + 424 >> 2];
        $2 = HEAP32[$0 + 416 >> 2] > ($1 | 0);
        $1 = $1 + 1 | 0;
        if ($2) {
         continue
        }
        break;
       }
      }
      $1 = HEAP32[$0 + 340 >> 2];
      $4 = $4 + 1 | 0;
      if (($1 | 0) > ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 412 >> 2];
    if (!HEAP32[$0 + 420 >> 2]) {
     if (!$2) {
      HEAP32[$3 + 4 >> 2] = 197;
      break block5;
     }
     HEAP32[$3 + 4 >> 2] = 198;
     break block5;
    }
    if (!$2) {
     HEAP32[$3 + 4 >> 2] = 199;
     break block5;
    }
    HEAP32[$3 + 4 >> 2] = 200;
    break block5;
   }
   block7 : {
    if (!(HEAP32[$0 + 424 >> 2] | (HEAP32[$0 + 420 >> 2] | $1))) {
     $1 = HEAP32[$0 + 416 >> 2];
     if (($1 | 0) > 63 | ($1 | 0) == HEAP32[$0 + 436 >> 2]) {
      break block7
     }
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 125;
    FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
   }
   HEAP32[$3 + 4 >> 2] = 201;
   $1 = HEAP32[$0 + 340 >> 2];
  }
  if (($1 | 0) > 0) {
   $8 = $3 + 124 | 0;
   $9 = $3 + 40 | 0;
   $5 = $3 + 24 | 0;
   $10 = $3 + 60 | 0;
   $11 = $0 + 344 | 0;
   $2 = 0;
   while (1) {
    $4 = $2 << 2;
    $6 = HEAP32[$11 + $4 >> 2];
    block9 : {
     block8 : {
      if (HEAP32[$0 + 224 >> 2]) {
       if (HEAP32[$0 + 412 >> 2]) {
        break block8
       }
       if (HEAP32[$0 + 420 >> 2]) {
        break block9
       }
      }
      $1 = HEAP32[$6 + 20 >> 2];
      if ($1 >>> 0 >= 16) {
       $7 = HEAP32[$0 >> 2];
       HEAP32[$7 + 24 >> 2] = $1;
       HEAP32[$7 + 20 >> 2] = 50;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
      }
      $7 = $10 + ($1 << 2) | 0;
      $1 = HEAP32[$7 >> 2];
      if (!$1) {
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 64) | 0;
       HEAP32[$7 >> 2] = $1;
      }
      HEAP8[$1 + 56 | 0] = 0;
      HEAP8[$1 + 57 | 0] = 0;
      HEAP8[$1 + 58 | 0] = 0;
      HEAP8[$1 + 59 | 0] = 0;
      HEAP8[$1 + 60 | 0] = 0;
      HEAP8[$1 + 61 | 0] = 0;
      HEAP8[$1 + 62 | 0] = 0;
      HEAP8[$1 + 63 | 0] = 0;
      HEAP8[$1 + 48 | 0] = 0;
      HEAP8[$1 + 49 | 0] = 0;
      HEAP8[$1 + 50 | 0] = 0;
      HEAP8[$1 + 51 | 0] = 0;
      HEAP8[$1 + 52 | 0] = 0;
      HEAP8[$1 + 53 | 0] = 0;
      HEAP8[$1 + 54 | 0] = 0;
      HEAP8[$1 + 55 | 0] = 0;
      HEAP8[$1 + 40 | 0] = 0;
      HEAP8[$1 + 41 | 0] = 0;
      HEAP8[$1 + 42 | 0] = 0;
      HEAP8[$1 + 43 | 0] = 0;
      HEAP8[$1 + 44 | 0] = 0;
      HEAP8[$1 + 45 | 0] = 0;
      HEAP8[$1 + 46 | 0] = 0;
      HEAP8[$1 + 47 | 0] = 0;
      HEAP8[$1 + 32 | 0] = 0;
      HEAP8[$1 + 33 | 0] = 0;
      HEAP8[$1 + 34 | 0] = 0;
      HEAP8[$1 + 35 | 0] = 0;
      HEAP8[$1 + 36 | 0] = 0;
      HEAP8[$1 + 37 | 0] = 0;
      HEAP8[$1 + 38 | 0] = 0;
      HEAP8[$1 + 39 | 0] = 0;
      HEAP8[$1 + 24 | 0] = 0;
      HEAP8[$1 + 25 | 0] = 0;
      HEAP8[$1 + 26 | 0] = 0;
      HEAP8[$1 + 27 | 0] = 0;
      HEAP8[$1 + 28 | 0] = 0;
      HEAP8[$1 + 29 | 0] = 0;
      HEAP8[$1 + 30 | 0] = 0;
      HEAP8[$1 + 31 | 0] = 0;
      HEAP8[$1 + 16 | 0] = 0;
      HEAP8[$1 + 17 | 0] = 0;
      HEAP8[$1 + 18 | 0] = 0;
      HEAP8[$1 + 19 | 0] = 0;
      HEAP8[$1 + 20 | 0] = 0;
      HEAP8[$1 + 21 | 0] = 0;
      HEAP8[$1 + 22 | 0] = 0;
      HEAP8[$1 + 23 | 0] = 0;
      HEAP8[$1 + 8 | 0] = 0;
      HEAP8[$1 + 9 | 0] = 0;
      HEAP8[$1 + 10 | 0] = 0;
      HEAP8[$1 + 11 | 0] = 0;
      HEAP8[$1 + 12 | 0] = 0;
      HEAP8[$1 + 13 | 0] = 0;
      HEAP8[$1 + 14 | 0] = 0;
      HEAP8[$1 + 15 | 0] = 0;
      HEAP8[$1 | 0] = 0;
      HEAP8[$1 + 1 | 0] = 0;
      HEAP8[$1 + 2 | 0] = 0;
      HEAP8[$1 + 3 | 0] = 0;
      HEAP8[$1 + 4 | 0] = 0;
      HEAP8[$1 + 5 | 0] = 0;
      HEAP8[$1 + 6 | 0] = 0;
      HEAP8[$1 + 7 | 0] = 0;
      HEAP32[$4 + $5 >> 2] = 0;
      HEAP32[$4 + $9 >> 2] = 0;
      if (!HEAP32[$0 + 224 >> 2]) {
       if (HEAP32[$0 + 436 >> 2]) {
        break block8
       }
       break block9;
      }
      if (!HEAP32[$0 + 412 >> 2]) {
       break block9
      }
     }
     $1 = HEAP32[$6 + 24 >> 2];
     if ($1 >>> 0 >= 16) {
      $4 = HEAP32[$0 >> 2];
      HEAP32[$4 + 24 >> 2] = $1;
      HEAP32[$4 + 20 >> 2] = 50;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     }
     $4 = $8 + ($1 << 2) | 0;
     $1 = HEAP32[$4 >> 2];
     if (!$1) {
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 256) | 0;
      HEAP32[$4 >> 2] = $1;
     }
     wasm2js_memory_fill($1, 0, 256);
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
     continue
    }
    break;
   };
  }
  HEAP32[$3 + 20 >> 2] = -16;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 56 >> 2] = HEAP32[$0 + 280 >> 2];
 }
 
 function decode_mcu_DC_first($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $5 = HEAP32[$0 + 468 >> 2];
  if (HEAP32[$0 + 280 >> 2]) {
   $2 = HEAP32[$5 + 56 >> 2];
   if (!$2) {
    process_restart($0);
    $2 = HEAP32[$5 + 56 >> 2];
   }
   HEAP32[$5 + 56 >> 2] = $2 - 1;
  }
  block3 : {
   if (!(HEAP32[$5 + 20 >> 2] == -1 | HEAP32[$0 + 368 >> 2] <= 0)) {
    $12 = $5 + 24 | 0;
    $14 = $0 + 248 | 0;
    $15 = $0 + 232 | 0;
    $16 = $5 + 40 | 0;
    $17 = $5 + 60 | 0;
    $18 = $0 + 344 | 0;
    $19 = $0 + 372 | 0;
    while (1) {
     $2 = $9 << 2;
     $20 = HEAP32[$2 + $1 >> 2];
     $8 = HEAP32[$2 + $19 >> 2] << 2;
     $6 = HEAP32[HEAP32[$18 + $8 >> 2] + 20 >> 2];
     $4 = ($6 << 2) + $17 | 0;
     $10 = $8 + $16 | 0;
     $3 = HEAP32[$4 >> 2] + HEAP32[$10 >> 2] | 0;
     block1 : {
      if (!arith_decode($0, $3)) {
       HEAP32[$10 >> 2] = 0;
       $2 = HEAP32[$8 + $12 >> 2];
       break block1;
      }
      $13 = 1;
      $7 = 0;
      $11 = arith_decode($0, $3 + 1 | 0);
      $3 = ($3 + $11 | 0) + 2 | 0;
      $2 = 0;
      block2 : {
       if (!arith_decode($0, $3)) {
        break block2
       }
       $4 = HEAP32[$4 >> 2];
       $3 = $4 + 20 | 0;
       $2 = 1;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $13 = 0;
       $3 = $4 + 21 | 0;
       $2 = 2;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 22 | 0;
       $2 = 4;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 23 | 0;
       $2 = 8;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 24 | 0;
       $2 = 16;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 25 | 0;
       $2 = 32;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 26 | 0;
       $2 = 64;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 27 | 0;
       $2 = 128;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 28 | 0;
       $2 = 256;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 29 | 0;
       $2 = 512;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 30 | 0;
       $2 = 1024;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 31 | 0;
       $2 = 2048;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 32 | 0;
       $2 = 4096;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 33 | 0;
       $2 = 8192;
       if (!arith_decode($0, $3)) {
        break block2
       }
       $3 = $4 + 34 | 0;
       if (arith_decode($0, $3)) {
        break block3
       }
       $2 = 16384;
      }
      block4 : {
       if (($2 | 0) < 1 << HEAPU8[$6 + $15 | 0] >> 1) {
        break block4
       }
       $4 = $11 << 2;
       if (1 << HEAPU8[$6 + $14 | 0] >> 1 < ($2 | 0)) {
        $7 = $4 + 12 | 0;
        break block4;
       }
       $7 = $4 + 4 | 0;
      }
      HEAP32[$10 >> 2] = $7;
      block5 : {
       if ($13) {
        $3 = $2;
        break block5;
       }
       $7 = $3 + 14 | 0;
       $3 = $2;
       while (1) {
        $4 = $2 >>> 1 | 0;
        $3 = (arith_decode($0, $7) ? $4 : 0) | $3;
        $6 = $2 >>> 0 > 3;
        $2 = $4;
        if ($6) {
         continue
        }
        break;
       };
      }
      $4 = $8 + $12 | 0;
      $2 = HEAP32[$4 >> 2] + ($11 ? $3 ^ -1 : $3 + 1 | 0) | 0;
      HEAP32[$4 >> 2] = $2;
     }
     HEAP16[$20 >> 1] = $2 << HEAP32[$0 + 424 >> 2];
     $9 = $9 + 1 | 0;
     if (($9 | 0) < HEAP32[$0 + 368 >> 2]) {
      continue
     }
     break;
    };
   }
   return 1;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 117;
  FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
  HEAP32[$5 + 20 >> 2] = -1;
  return 1;
 }
 
 function decode_mcu_AC_first($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $3 = HEAP32[$0 + 468 >> 2];
  if (HEAP32[$0 + 280 >> 2]) {
   $2 = HEAP32[$3 + 56 >> 2];
   if (!$2) {
    process_restart($0);
    $2 = HEAP32[$3 + 56 >> 2];
   }
   HEAP32[$3 + 56 >> 2] = $2 - 1;
  }
  block2 : {
   block : {
    if (HEAP32[$3 + 20 >> 2] == -1) {
     break block
    }
    $7 = $3 + 188 | 0;
    $4 = HEAP32[$0 + 412 >> 2] - 1 | 0;
    $2 = HEAP32[HEAP32[$0 + 344 >> 2] + 24 >> 2];
    $8 = $2 + $0 | 0;
    $5 = ($2 << 2) + $3 | 0;
    $9 = HEAP32[$1 >> 2];
    $10 = HEAP32[$0 + 432 >> 2];
    while (1) {
     $2 = $4;
     $1 = HEAP32[$5 + 124 >> 2] + Math_imul($2, 3) | 0;
     if (arith_decode($0, $1)) {
      break block
     }
     while (1) {
      block1 : {
       $4 = $2 + 1 | 0;
       if (arith_decode($0, $1 + 1 | 0)) {
        break block1
       }
       $1 = $1 + 3 | 0;
       $2 = $4;
       if (($2 | 0) < HEAP32[$0 + 416 >> 2]) {
        continue
       }
       break block2;
      }
      break;
     };
     $11 = arith_decode($0, $7);
     $1 = $1 + 2 | 0;
     block3 : {
      if (!arith_decode($0, $1)) {
       $2 = 0;
       break block3;
      }
      if (!arith_decode($0, $1)) {
       $2 = 1;
       break block3;
      }
      $2 = HEAP32[$5 + 124 >> 2] + (HEAPU8[$8 + 264 | 0] > ($2 | 0) ? 189 : 217) | 0;
      $1 = 2;
      block4 : {
       if (!arith_decode($0, $2)) {
        break block4
       }
       $1 = $2 + 1 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 4;
        break block4;
       }
       $1 = $2 + 2 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 8;
        break block4;
       }
       $1 = $2 + 3 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 16;
        break block4;
       }
       $1 = $2 + 4 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 32;
        break block4;
       }
       $1 = $2 + 5 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 64;
        break block4;
       }
       $1 = $2 + 6 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 128;
        break block4;
       }
       $1 = $2 + 7 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 256;
        break block4;
       }
       $1 = $2 + 8 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 512;
        break block4;
       }
       $1 = $2 + 9 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 1024;
        break block4;
       }
       $1 = $2 + 10 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 2048;
        break block4;
       }
       $1 = $2 + 11 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 4096;
        break block4;
       }
       $1 = $2 + 12 | 0;
       if (!arith_decode($0, $1)) {
        $2 = $1;
        $1 = 8192;
        break block4;
       }
       $2 = $2 + 13 | 0;
       if (arith_decode($0, $2)) {
        break block2
       }
       $1 = 16384;
      }
      $12 = $2 + 14 | 0;
      $2 = $1;
      while (1) {
       $6 = $1 >>> 1 | 0;
       $2 = (arith_decode($0, $12) ? $6 : 0) | $2;
       $13 = $1 >>> 0 > 3;
       $1 = $6;
       if ($13) {
        continue
       }
       break;
      };
     }
     HEAP16[(HEAP32[($4 << 2) + $10 >> 2] << 1) + $9 >> 1] = ($11 ? $2 ^ -1 : $2 + 1 | 0) << HEAP32[$0 + 424 >> 2];
     if (HEAP32[$0 + 416 >> 2] > ($4 | 0)) {
      continue
     }
     break;
    };
   }
   return 1;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 117;
  FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
  HEAP32[$3 + 20 >> 2] = -1;
  return 1;
 }
 
 function decode_mcu_DC_refine($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 468 >> 2];
  if (HEAP32[$0 + 280 >> 2]) {
   $3 = HEAP32[$2 + 56 >> 2];
   if (!$3) {
    process_restart($0);
    $3 = HEAP32[$2 + 56 >> 2];
   }
   HEAP32[$2 + 56 >> 2] = $3 - 1;
  }
  if (HEAP32[$0 + 368 >> 2] > 0) {
   $3 = $2 + 188 | 0;
   $5 = 1 << HEAP32[$0 + 424 >> 2];
   $2 = 0;
   while (1) {
    if (arith_decode($0, $3)) {
     $4 = HEAP32[($2 << 2) + $1 >> 2];
     HEAP16[$4 >> 1] = HEAPU16[$4 >> 1] | $5;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$0 + 368 >> 2]) {
     continue
    }
    break;
   };
  }
  return 1;
 }
 
 function decode_mcu_AC_refine($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $4 = HEAP32[$0 + 468 >> 2];
  if (HEAP32[$0 + 280 >> 2]) {
   $3 = HEAP32[$4 + 56 >> 2];
   if (!$3) {
    process_restart($0);
    $3 = HEAP32[$4 + 56 >> 2];
   }
   HEAP32[$4 + 56 >> 2] = $3 - 1;
  }
  block : {
   if (HEAP32[$4 + 20 >> 2] == -1) {
    break block
   }
   $5 = 1 << HEAP32[$0 + 424 >> 2];
   $9 = 0 - $5 | 0;
   $3 = HEAP32[$0 + 416 >> 2];
   $7 = HEAP32[$1 >> 2];
   $8 = HEAP32[$0 + 432 >> 2];
   $2 = HEAP32[HEAP32[$0 + 344 >> 2] + 24 >> 2];
   block1 : {
    while (1) {
     if (HEAPU16[(HEAP32[($3 << 2) + $8 >> 2] << 1) + $7 >> 1]) {
      break block1
     }
     $3 = $3 - 1 | 0;
     if ($3) {
      continue
     }
     break;
    };
    $3 = 0;
   }
   $10 = $4 + 188 | 0;
   $1 = HEAP32[$0 + 412 >> 2] - 1 | 0;
   $11 = ($2 << 2) + $4 | 0;
   while (1) {
    $2 = HEAP32[$11 + 124 >> 2] + Math_imul($1, 3) | 0;
    if (($1 | 0) >= ($3 | 0)) {
     if (arith_decode($0, $2)) {
      break block
     }
    }
    block2 : {
     block4 : {
      block3 : {
       while (1) {
        $1 = $1 + 1 | 0;
        $6 = (HEAP32[($1 << 2) + $8 >> 2] << 1) + $7 | 0;
        if (HEAPU16[$6 >> 1]) {
         if (!arith_decode($0, $2 + 2 | 0)) {
          break block2
         }
         $2 = HEAP16[$6 >> 1];
         if (($2 | 0) >= 0) {
          break block3
         }
         $2 = $2 - $5 | 0;
         break block4;
        }
        if (arith_decode($0, $2 + 1 | 0)) {
         $2 = arith_decode($0, $10) ? $9 : $5;
         break block4;
        }
        $2 = $2 + 3 | 0;
        if (HEAP32[$0 + 416 >> 2] > ($1 | 0)) {
         continue
        }
        break;
       };
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 20 >> 2] = 117;
       FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
       HEAP32[$4 + 20 >> 2] = -1;
       return 1;
      }
      $2 = $2 + $5 | 0;
     }
     HEAP16[$6 >> 1] = $2;
    }
    if (HEAP32[$0 + 416 >> 2] > ($1 | 0)) {
     continue
    }
    break;
   };
  }
  return 1;
 }
 
 function decode_mcu($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $6 = HEAP32[$0 + 468 >> 2];
  if (HEAP32[$0 + 280 >> 2]) {
   $3 = HEAP32[$6 + 56 >> 2];
   if (!$3) {
    process_restart($0);
    $3 = HEAP32[$6 + 56 >> 2];
   }
   HEAP32[$6 + 56 >> 2] = $3 - 1;
  }
  block3 : {
   if (!(HEAP32[$6 + 20 >> 2] == -1 | HEAP32[$0 + 368 >> 2] <= 0)) {
    $17 = HEAP32[$0 + 432 >> 2];
    $18 = $0 + 264 | 0;
    $19 = $6 + 188 | 0;
    $20 = $6 + 124 | 0;
    $14 = $6 + 24 | 0;
    $21 = $0 + 248 | 0;
    $22 = $0 + 232 | 0;
    $23 = $6 + 40 | 0;
    $24 = $6 + 60 | 0;
    $25 = $0 + 344 | 0;
    $26 = $0 + 372 | 0;
    while (1) {
     $3 = $13 << 2;
     $15 = HEAP32[$3 + $1 >> 2];
     $8 = HEAP32[$3 + $26 >> 2] << 2;
     $16 = HEAP32[$25 + $8 >> 2];
     $9 = HEAP32[$16 + 20 >> 2];
     $5 = ($9 << 2) + $24 | 0;
     $10 = $8 + $23 | 0;
     $3 = HEAP32[$5 >> 2] + HEAP32[$10 >> 2] | 0;
     block1 : {
      if (!arith_decode($0, $3)) {
       HEAP32[$10 >> 2] = 0;
       $5 = HEAP32[$8 + $14 >> 2];
       break block1;
      }
      $12 = 1;
      $7 = 0;
      $11 = arith_decode($0, $3 + 1 | 0);
      $2 = ($11 + $3 | 0) + 2 | 0;
      $4 = 0;
      block2 : {
       if (!arith_decode($0, $2)) {
        break block2
       }
       $3 = HEAP32[$5 >> 2];
       $2 = $3 + 20 | 0;
       $4 = 1;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $12 = 0;
       $2 = $3 + 21 | 0;
       $4 = 2;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 22 | 0;
       $4 = 4;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 23 | 0;
       $4 = 8;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 24 | 0;
       $4 = 16;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 25 | 0;
       $4 = 32;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 26 | 0;
       $4 = 64;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 27 | 0;
       $4 = 128;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 28 | 0;
       $4 = 256;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 29 | 0;
       $4 = 512;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 30 | 0;
       $4 = 1024;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 31 | 0;
       $4 = 2048;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 32 | 0;
       $4 = 4096;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 33 | 0;
       $4 = 8192;
       if (!arith_decode($0, $2)) {
        break block2
       }
       $2 = $3 + 34 | 0;
       if (arith_decode($0, $2)) {
        break block3
       }
       $4 = 16384;
      }
      $5 = $4;
      block4 : {
       if (($4 | 0) < 1 << HEAPU8[$9 + $22 | 0] >> 1) {
        break block4
       }
       $3 = $11 << 2;
       if (1 << HEAPU8[$9 + $21 | 0] >> 1 < ($4 | 0)) {
        $7 = $3 + 12 | 0;
        break block4;
       }
       $7 = $3 + 4 | 0;
      }
      HEAP32[$10 >> 2] = $7;
      block5 : {
       if ($12) {
        $2 = $5;
        break block5;
       }
       $7 = $2 + 14 | 0;
       $2 = $5;
       while (1) {
        $3 = $5 >>> 1 | 0;
        $2 = (arith_decode($0, $7) ? $3 : 0) | $2;
        $9 = $5 >>> 0 > 3;
        $5 = $3;
        if ($9) {
         continue
        }
        break;
       };
      }
      $3 = $8 + $14 | 0;
      $5 = HEAP32[$3 >> 2] + ($11 ? $2 ^ -1 : $2 + 1 | 0) | 0;
      HEAP32[$3 >> 2] = $5;
     }
     HEAP16[$15 >> 1] = $5;
     block6 : {
      if (!HEAP32[$0 + 436 >> 2]) {
       break block6
      }
      $3 = HEAP32[$16 + 24 >> 2];
      $9 = $3 + $18 | 0;
      $7 = ($3 << 2) + $20 | 0;
      $5 = 0;
      while (1) {
       $3 = $5;
       $2 = HEAP32[$7 >> 2] + Math_imul($3, 3) | 0;
       if (arith_decode($0, $2)) {
        break block6
       }
       while (1) {
        block7 : {
         $5 = $3 + 1 | 0;
         if (arith_decode($0, $2 + 1 | 0)) {
          break block7
         }
         $2 = $2 + 3 | 0;
         $3 = $5;
         if (($3 | 0) < HEAP32[$0 + 436 >> 2]) {
          continue
         }
         break block3;
        }
        break;
       };
       $10 = arith_decode($0, $19);
       $2 = $2 + 2 | 0;
       block8 : {
        if (!arith_decode($0, $2)) {
         $3 = 0;
         break block8;
        }
        if (!arith_decode($0, $2)) {
         $3 = 1;
         break block8;
        }
        $3 = HEAP32[$7 >> 2] + (HEAPU8[$9 | 0] > ($3 | 0) ? 189 : 217) | 0;
        $2 = 2;
        block9 : {
         if (!arith_decode($0, $3)) {
          break block9
         }
         $2 = $3 + 1 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 4;
          break block9;
         }
         $2 = $3 + 2 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 8;
          break block9;
         }
         $2 = $3 + 3 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 16;
          break block9;
         }
         $2 = $3 + 4 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 32;
          break block9;
         }
         $2 = $3 + 5 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 64;
          break block9;
         }
         $2 = $3 + 6 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 128;
          break block9;
         }
         $2 = $3 + 7 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 256;
          break block9;
         }
         $2 = $3 + 8 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 512;
          break block9;
         }
         $2 = $3 + 9 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 1024;
          break block9;
         }
         $2 = $3 + 10 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 2048;
          break block9;
         }
         $2 = $3 + 11 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 4096;
          break block9;
         }
         $2 = $3 + 12 | 0;
         if (!arith_decode($0, $2)) {
          $3 = $2;
          $2 = 8192;
          break block9;
         }
         $3 = $3 + 13 | 0;
         if (arith_decode($0, $3)) {
          break block3
         }
         $2 = 16384;
        }
        $12 = $3 + 14 | 0;
        $3 = $2;
        while (1) {
         $8 = $2 >>> 1 | 0;
         $3 = (arith_decode($0, $12) ? $8 : 0) | $3;
         $11 = $2 >>> 0 > 3;
         $2 = $8;
         if ($11) {
          continue
         }
         break;
        };
       }
       HEAP16[(HEAP32[($5 << 2) + $17 >> 2] << 1) + $15 >> 1] = $10 ? $3 ^ -1 : $3 + 1 | 0;
       if (HEAP32[$0 + 436 >> 2] > ($5 | 0)) {
        continue
       }
       break;
      };
     }
     $13 = $13 + 1 | 0;
     if (($13 | 0) < HEAP32[$0 + 368 >> 2]) {
      continue
     }
     break;
    };
   }
   return 1;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 117;
  FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
  HEAP32[$6 + 20 >> 2] = -1;
  return 1;
 }
 
 function process_restart($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $2 = HEAP32[$0 + 468 >> 2];
  if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] + 8 >> 2]]($0) | 0)) {
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 25;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
  }
  if (HEAP32[$0 + 340 >> 2] > 0) {
   $6 = $2 + 124 | 0;
   $7 = $2 + 40 | 0;
   $8 = $2 + 24 | 0;
   $9 = $2 + 60 | 0;
   $10 = $0 + 344 | 0;
   while (1) {
    $4 = $3 << 2;
    $5 = HEAP32[$10 + $4 >> 2];
    block1 : {
     block : {
      if (HEAP32[$0 + 224 >> 2]) {
       if (HEAP32[$0 + 412 >> 2]) {
        break block
       }
       if (HEAP32[$0 + 420 >> 2]) {
        break block1
       }
      }
      $1 = HEAP32[(HEAP32[$5 + 20 >> 2] << 2) + $9 >> 2];
      HEAP8[$1 + 56 | 0] = 0;
      HEAP8[$1 + 57 | 0] = 0;
      HEAP8[$1 + 58 | 0] = 0;
      HEAP8[$1 + 59 | 0] = 0;
      HEAP8[$1 + 60 | 0] = 0;
      HEAP8[$1 + 61 | 0] = 0;
      HEAP8[$1 + 62 | 0] = 0;
      HEAP8[$1 + 63 | 0] = 0;
      HEAP8[$1 + 48 | 0] = 0;
      HEAP8[$1 + 49 | 0] = 0;
      HEAP8[$1 + 50 | 0] = 0;
      HEAP8[$1 + 51 | 0] = 0;
      HEAP8[$1 + 52 | 0] = 0;
      HEAP8[$1 + 53 | 0] = 0;
      HEAP8[$1 + 54 | 0] = 0;
      HEAP8[$1 + 55 | 0] = 0;
      HEAP8[$1 + 40 | 0] = 0;
      HEAP8[$1 + 41 | 0] = 0;
      HEAP8[$1 + 42 | 0] = 0;
      HEAP8[$1 + 43 | 0] = 0;
      HEAP8[$1 + 44 | 0] = 0;
      HEAP8[$1 + 45 | 0] = 0;
      HEAP8[$1 + 46 | 0] = 0;
      HEAP8[$1 + 47 | 0] = 0;
      HEAP8[$1 + 32 | 0] = 0;
      HEAP8[$1 + 33 | 0] = 0;
      HEAP8[$1 + 34 | 0] = 0;
      HEAP8[$1 + 35 | 0] = 0;
      HEAP8[$1 + 36 | 0] = 0;
      HEAP8[$1 + 37 | 0] = 0;
      HEAP8[$1 + 38 | 0] = 0;
      HEAP8[$1 + 39 | 0] = 0;
      HEAP8[$1 + 24 | 0] = 0;
      HEAP8[$1 + 25 | 0] = 0;
      HEAP8[$1 + 26 | 0] = 0;
      HEAP8[$1 + 27 | 0] = 0;
      HEAP8[$1 + 28 | 0] = 0;
      HEAP8[$1 + 29 | 0] = 0;
      HEAP8[$1 + 30 | 0] = 0;
      HEAP8[$1 + 31 | 0] = 0;
      HEAP8[$1 + 16 | 0] = 0;
      HEAP8[$1 + 17 | 0] = 0;
      HEAP8[$1 + 18 | 0] = 0;
      HEAP8[$1 + 19 | 0] = 0;
      HEAP8[$1 + 20 | 0] = 0;
      HEAP8[$1 + 21 | 0] = 0;
      HEAP8[$1 + 22 | 0] = 0;
      HEAP8[$1 + 23 | 0] = 0;
      HEAP8[$1 + 8 | 0] = 0;
      HEAP8[$1 + 9 | 0] = 0;
      HEAP8[$1 + 10 | 0] = 0;
      HEAP8[$1 + 11 | 0] = 0;
      HEAP8[$1 + 12 | 0] = 0;
      HEAP8[$1 + 13 | 0] = 0;
      HEAP8[$1 + 14 | 0] = 0;
      HEAP8[$1 + 15 | 0] = 0;
      HEAP8[$1 | 0] = 0;
      HEAP8[$1 + 1 | 0] = 0;
      HEAP8[$1 + 2 | 0] = 0;
      HEAP8[$1 + 3 | 0] = 0;
      HEAP8[$1 + 4 | 0] = 0;
      HEAP8[$1 + 5 | 0] = 0;
      HEAP8[$1 + 6 | 0] = 0;
      HEAP8[$1 + 7 | 0] = 0;
      HEAP32[$4 + $8 >> 2] = 0;
      HEAP32[$4 + $7 >> 2] = 0;
      if (!HEAP32[$0 + 224 >> 2]) {
       if (HEAP32[$0 + 436 >> 2]) {
        break block
       }
       break block1;
      }
      if (!HEAP32[$0 + 412 >> 2]) {
       break block1
      }
     }
     wasm2js_memory_fill(HEAP32[(HEAP32[$5 + 24 >> 2] << 2) + $6 >> 2], 0, 256);
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 + 340 >> 2]) {
     continue
    }
    break;
   };
  }
  HEAP32[$2 + 20 >> 2] = -16;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 280 >> 2];
 }
 
 function arith_decode($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = HEAP32[$0 + 468 >> 2];
  $2 = HEAP32[$4 + 16 >> 2];
  block : {
   if (($2 | 0) >= 32768) {
    $3 = HEAP32[$4 + 20 >> 2];
    break block;
   }
   $3 = HEAP32[$4 + 20 >> 2];
   while (1) {
    $2 = $3 - 1 | 0;
    HEAP32[$4 + 20 >> 2] = $2;
    block1 : {
     if (($3 | 0) > 0) {
      $3 = $2;
      break block1;
     }
     $5 = 0;
     if (!HEAP32[$0 + 440 >> 2]) {
      $2 = HEAP32[$0 + 24 >> 2];
      block2 : {
       if (HEAP32[$2 + 4 >> 2]) {
        break block2
       }
       if (FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0) {
        break block2
       }
       $3 = HEAP32[$0 >> 2];
       HEAP32[$3 + 20 >> 2] = 25;
       FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
      }
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
      $3 = $2;
      $2 = HEAP32[$2 >> 2];
      HEAP32[$3 >> 2] = $2 + 1;
      $5 = HEAPU8[$2 | 0];
      block3 : {
       if (($5 | 0) != 255) {
        break block3
       }
       while (1) {
        $2 = HEAP32[$0 + 24 >> 2];
        block4 : {
         if (HEAP32[$2 + 4 >> 2]) {
          break block4
         }
         if (FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0) {
          break block4
         }
         $3 = HEAP32[$0 >> 2];
         HEAP32[$3 + 20 >> 2] = 25;
         FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
        }
        HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
        $3 = $2;
        $2 = HEAP32[$2 >> 2];
        HEAP32[$3 >> 2] = $2 + 1;
        $5 = 255;
        $2 = HEAPU8[$2 | 0];
        if (($2 | 0) == 255) {
         continue
        }
        break;
       };
       if (!$2) {
        break block3
       }
       HEAP32[$0 + 440 >> 2] = $2;
       $5 = 0;
      }
      $2 = HEAP32[$4 + 20 >> 2];
     }
     $3 = $2 + 8 | 0;
     HEAP32[$4 + 20 >> 2] = $3;
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] << 8 | $5;
     if (($2 | 0) > -9) {
      break block1
     }
     $3 = $2 + 9 | 0;
     HEAP32[$4 + 20 >> 2] = $3;
     if ($3) {
      break block1
     }
     HEAP32[$4 + 16 >> 2] = 32768;
     $3 = 0;
    }
    $2 = HEAP32[$4 + 16 >> 2] << 1;
    HEAP32[$4 + 16 >> 2] = $2;
    if (($2 | 0) < 32768) {
     continue
    }
    break;
   };
  }
  $0 = HEAPU8[$1 | 0];
  $5 = HEAP32[(($0 & 127) << 2) + 49280 >> 2];
  $6 = $5 >> 16;
  $2 = $2 - $6 | 0;
  HEAP32[$4 + 16 >> 2] = $2;
  $7 = $5 >>> 8 | 0;
  $8 = HEAP32[$4 + 12 >> 2];
  $3 = $2 << $3;
  block5 : {
   if (($8 | 0) >= ($3 | 0)) {
    HEAP32[$4 + 16 >> 2] = $6;
    HEAP32[$4 + 12 >> 2] = $8 - $3;
    $3 = $0 & 128;
    if (($2 | 0) < ($6 | 0)) {
     HEAP8[$1 | 0] = $3 ^ $7;
     break block5;
    }
    HEAP8[$1 | 0] = $3 ^ $5;
    $0 = $0 ^ 128;
    break block5;
   }
   if ($2 >>> 0 > 32767) {
    break block5
   }
   $3 = $0 & 128;
   if (($2 | 0) < ($6 | 0)) {
    HEAP8[$1 | 0] = $3 ^ $5;
    $0 = $0 ^ 128;
    break block5;
   }
   HEAP8[$1 | 0] = $3 ^ $7;
  }
  return $0 >>> 7 | 0;
 }
 
 function finish_pass_huff($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 + 464 >> 2];
  $0 = HEAP32[$0 + 468 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + (HEAP32[$0 + 16 >> 2] / 8 | 0);
  HEAP32[$0 + 16 >> 2] = 0;
 }
 
 function start_pass_huff_decoder($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $1 = HEAP32[$0 + 412 >> 2];
  $4 = HEAP32[$0 + 468 >> 2];
  block7 : {
   if (HEAP32[$0 + 224 >> 2]) {
    $2 = HEAP32[$0 + 416 >> 2];
    block3 : {
     block1 : {
      block : {
       if (!$1) {
        if (!$2) {
         break block
        }
        break block1;
       }
       if (($1 | 0) > ($2 | 0) | ($2 | 0) > HEAP32[$0 + 436 >> 2] | HEAP32[$0 + 340 >> 2] != 1) {
        break block1
       }
      }
      $2 = HEAP32[$0 + 420 >> 2];
      block2 : {
       if (!$2) {
        $3 = HEAP32[$0 + 424 >> 2];
        break block2;
       }
       $3 = $2 - 1 | 0;
       if (($3 | 0) != HEAP32[$0 + 424 >> 2]) {
        break block1
       }
      }
      if (($3 | 0) < 14) {
       break block3
      }
     }
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 24 >> 2] = $1;
     HEAP32[$2 + 20 >> 2] = 17;
     HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$0 + 416 >> 2];
     HEAP32[HEAP32[$0 >> 2] + 32 >> 2] = HEAP32[$0 + 420 >> 2];
     HEAP32[HEAP32[$0 >> 2] + 36 >> 2] = HEAP32[$0 + 424 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    block5 : {
     if (HEAP32[$0 + 340 >> 2] > 0) {
      $8 = $0 + 344 | 0;
      $3 = 0;
      while (1) {
       $6 = HEAP32[HEAP32[$8 + ($3 << 2) >> 2] + 4 >> 2];
       $7 = HEAP32[$0 + 160 >> 2] + ($6 << 8) | 0;
       $2 = HEAP32[$0 + 412 >> 2];
       $1 = 0;
       block4 : {
        if (!$2) {
         break block4
        }
        $1 = $2;
        if (HEAP32[$7 >> 2] >= 0) {
         break block4
        }
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 24 >> 2] = $6;
        HEAP32[$1 + 20 >> 2] = 118;
        HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
        $1 = HEAP32[$0 + 412 >> 2];
       }
       if (($1 | 0) <= HEAP32[$0 + 416 >> 2]) {
        while (1) {
         $2 = $7 + ($1 << 2) | 0;
         $5 = HEAP32[$2 >> 2];
         if (HEAP32[$0 + 420 >> 2] != ((($5 | 0) > 0 ? $5 : 0) | 0)) {
          $5 = HEAP32[$0 >> 2];
          HEAP32[$5 + 24 >> 2] = $6;
          HEAP32[$5 + 20 >> 2] = 118;
          HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
         }
         HEAP32[$2 >> 2] = HEAP32[$0 + 424 >> 2];
         $2 = HEAP32[$0 + 416 >> 2] > ($1 | 0);
         $1 = $1 + 1 | 0;
         if ($2) {
          continue
         }
         break;
        }
       }
       $3 = $3 + 1 | 0;
       $1 = HEAP32[$0 + 340 >> 2];
       if (($3 | 0) < ($1 | 0)) {
        continue
       }
       break;
      };
      $2 = HEAP32[$0 + 412 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 420 >> 2] ? ($2 ? 204 : 205) : $2 ? 206 : 207;
      if (($1 | 0) <= 0) {
       break block5
      }
      $6 = $4 + 24 | 0;
      $2 = $4 + 48 | 0;
      $7 = $0 + 344 | 0;
      $1 = 0;
      while (1) {
       $8 = $1 << 2;
       $3 = HEAP32[$8 + $7 >> 2];
       block6 : {
        if (!HEAP32[$0 + 412 >> 2]) {
         if (HEAP32[$0 + 420 >> 2]) {
          break block6
         }
         $3 = HEAP32[$3 + 20 >> 2];
         jpeg_make_d_derived_tbl($0, 1, $3, $2 + ($3 << 2) | 0);
         break block6;
        }
        $5 = HEAP32[$3 + 24 >> 2];
        $3 = $2 + ($5 << 2) | 0;
        jpeg_make_d_derived_tbl($0, 0, $5, $3);
        HEAP32[$4 + 64 >> 2] = HEAP32[$3 >> 2];
       }
       HEAP32[$6 + $8 >> 2] = 0;
       $1 = $1 + 1 | 0;
       if (($1 | 0) < HEAP32[$0 + 340 >> 2]) {
        continue
       }
       break;
      };
      break block5;
     }
     $1 = HEAP32[$0 + 412 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 420 >> 2] ? ($1 ? 204 : 205) : $1 ? 206 : 207;
    }
    HEAP32[$4 + 20 >> 2] = 0;
    break block7;
   }
   block9 : {
    if (!(HEAP32[$0 + 424 >> 2] | (HEAP32[$0 + 420 >> 2] | $1))) {
     $1 = HEAP32[$0 + 416 >> 2];
     if (!HEAP32[$0 + 220 >> 2] & ($1 | 0) > 63 | ($1 | 0) == HEAP32[$0 + 436 >> 2]) {
      break block9
     }
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 125;
    FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
   }
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 436 >> 2] == 63 ? 208 : 209;
   if (HEAP32[$0 + 340 >> 2] > 0) {
    $2 = $4 + 24 | 0;
    $3 = $4 + 84 | 0;
    $6 = $4 + 68 | 0;
    $7 = $0 + 344 | 0;
    $1 = 0;
    while (1) {
     $8 = $1 << 2;
     $5 = HEAP32[$8 + $7 >> 2];
     $9 = HEAP32[$5 + 20 >> 2];
     jpeg_make_d_derived_tbl($0, 1, $9, $6 + ($9 << 2) | 0);
     if (HEAP32[$0 + 436 >> 2]) {
      $5 = HEAP32[$5 + 24 >> 2];
      jpeg_make_d_derived_tbl($0, 0, $5, $3 + ($5 << 2) | 0);
     }
     HEAP32[$2 + $8 >> 2] = 0;
     $1 = $1 + 1 | 0;
     if (($1 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$0 + 368 >> 2] <= 0) {
    break block7
   }
   $8 = $4 + 180 | 0;
   $5 = $4 + 140 | 0;
   $9 = $4 + 84 | 0;
   $11 = $4 + 100 | 0;
   $12 = $4 + 68 | 0;
   $13 = $0 + 344 | 0;
   $14 = $0 + 372 | 0;
   $6 = 0;
   while (1) {
    $7 = $6 << 2;
    $2 = HEAP32[(HEAP32[$7 + $14 >> 2] << 2) + $13 >> 2];
    HEAP32[$7 + $11 >> 2] = HEAP32[(HEAP32[$2 + 20 >> 2] << 2) + $12 >> 2];
    $10 = HEAP32[$0 + 436 >> 2];
    HEAP32[$5 + $7 >> 2] = $10 ? HEAP32[$9 + (HEAP32[$2 + 24 >> 2] << 2) >> 2] : 0;
    block10 : {
     if (!HEAP32[$2 + 52 >> 2]) {
      $3 = 0;
      break block10;
     }
     $1 = HEAP32[$2 + 36 >> 2];
     $2 = HEAP32[$2 + 40 >> 2];
     $3 = 1;
     block11 : {
      switch ($10 | 0) {
      case 3:
       $3 = HEAP32[((($2 - 3 >>> 0 < 4294967294 ? 1 : $2 - 1 | 0) << 3) + (($1 - 3 >>> 0 < 4294967294 ? 1 : $1 - 1 | 0) << 2) | 0) + 50592 >> 2] + 1 | 0;
       break block10;
      case 8:
       $3 = HEAP32[(Math_imul($2 - 4 >>> 0 < 4294967293 ? 2 : $2 - 1 | 0, 12) + (($1 - 4 >>> 0 < 4294967293 ? 2 : $1 - 1 | 0) << 2) | 0) + 50608 >> 2] + 1 | 0;
       break block10;
      case 15:
       $3 = HEAP32[((($2 - 5 >>> 0 < 4294967292 ? 3 : $2 - 1 | 0) << 4) + (($1 - 5 >>> 0 < 4294967292 ? 3 : $1 - 1 | 0) << 2) | 0) + 50656 >> 2] + 1 | 0;
       break block10;
      case 24:
       $3 = HEAP32[(Math_imul($2 - 6 >>> 0 < 4294967291 ? 4 : $2 - 1 | 0, 20) + (($1 - 6 >>> 0 < 4294967291 ? 4 : $1 - 1 | 0) << 2) | 0) + 50720 >> 2] + 1 | 0;
       break block10;
      case 35:
       $3 = HEAP32[(Math_imul($2 - 7 >>> 0 < 4294967290 ? 5 : $2 - 1 | 0, 24) + (($1 - 7 >>> 0 < 4294967290 ? 5 : $1 - 1 | 0) << 2) | 0) + 50832 >> 2] + 1 | 0;
       break block10;
      case 48:
       $3 = HEAP32[(Math_imul($2 - 8 >>> 0 < 4294967289 ? 6 : $2 - 1 | 0, 28) + (($1 - 8 >>> 0 < 4294967289 ? 6 : $1 - 1 | 0) << 2) | 0) + 50976 >> 2] + 1 | 0;
       break block10;
      case 0:
       break block10;
      default:
       break block11;
      };
     }
     $3 = HEAP32[((($2 - 9 >>> 0 < 4294967288 ? 7 : $2 - 1 | 0) << 5) + (($1 - 9 >>> 0 < 4294967288 ? 7 : $1 - 1 | 0) << 2) | 0) + 51184 >> 2] + 1 | 0;
    }
    HEAP32[$7 + $8 >> 2] = $3;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 368 >> 2]) {
     continue
    }
    break;
   };
  }
  HEAP32[$4 + 40 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
 }
 
 function decode_mcu_AC_refine_1220($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $4 = __stack_pointer - 288 | 0;
  __stack_pointer = $4;
  $7 = HEAP32[$0 + 468 >> 2];
  $2 = HEAP32[$0 + 280 >> 2];
  block1 : {
   block : {
    if (!$2) {
     $2 = 0;
     break block;
    }
    if (HEAP32[$7 + 44 >> 2]) {
     break block
    }
    $2 = HEAP32[$0 + 464 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$7 + 16 >> 2] / 8 | 0);
    HEAP32[$7 + 16 >> 2] = 0;
    if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
     break block1
    }
    if (HEAP32[$0 + 340 >> 2] > 0) {
     $3 = $7 + 24 | 0;
     $2 = 0;
     while (1) {
      HEAP32[$3 + ($2 << 2) >> 2] = 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$7 + 20 >> 2] = 0;
    $2 = HEAP32[$0 + 280 >> 2];
    HEAP32[$7 + 44 >> 2] = $2;
    if (HEAP32[$0 + 440 >> 2]) {
     break block
    }
    HEAP32[$7 + 40 >> 2] = 0;
   }
   block4 : {
    if (!HEAP32[$7 + 40 >> 2]) {
     $14 = HEAP32[$0 + 432 >> 2];
     $11 = HEAP32[$0 + 416 >> 2];
     $2 = HEAP32[$0 + 424 >> 2];
     HEAP32[$4 + 284 >> 2] = $0;
     $3 = HEAP32[$0 + 24 >> 2];
     HEAP32[$4 + 268 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 272 >> 2] = HEAP32[$3 + 4 >> 2];
     $3 = 65536 << $2;
     $12 = $3 >> 16;
     $5 = HEAP32[$0 + 412 >> 2];
     $10 = HEAP32[$1 >> 2];
     $2 = HEAP32[$7 + 16 >> 2];
     $6 = HEAP32[$7 + 12 >> 2];
     block15 : {
      block2 : {
       $9 = HEAP32[$7 + 20 >> 2];
       if ($9) {
        $1 = 0;
        break block2;
       }
       $18 = 0 - $12 | 0;
       $15 = HEAP32[$7 + 64 >> 2];
       $19 = $15 + 1168 | 0;
       $20 = $15 + 144 | 0;
       $21 = 0 - $3 >> 16;
       $1 = 0;
       while (1) {
        block7 : {
         block6 : {
          block5 : {
           block3 : {
            if (($2 | 0) > 7) {
             break block3
            }
            if (!jpeg_fill_bit_buffer($4 + 268 | 0, $6, $2, 0)) {
             break block4
            }
            $6 = HEAP32[$4 + 276 >> 2];
            $2 = HEAP32[$4 + 280 >> 2];
            if (($2 | 0) >= 8) {
             break block3
            }
            $3 = 1;
            break block5;
           }
           $3 = $6 >> $2 - 8 & 255;
           $9 = HEAP32[($3 << 2) + $20 >> 2];
           if ($9) {
            break block6
           }
           $3 = 9;
          }
          $3 = jpeg_huff_decode($4 + 268 | 0, $6, $2, $15, $3);
          if (($3 | 0) < 0) {
           break block4
          }
          $6 = HEAP32[$4 + 276 >> 2];
          $2 = HEAP32[$4 + 280 >> 2];
          break block7;
         }
         $3 = HEAPU8[$3 + $19 | 0];
         $2 = $2 - $9 | 0;
        }
        $8 = $3 >>> 4 | 0;
        block12 : {
         block11 : {
          block8 : {
           switch ($3 & 15) {
           default:
            $3 = HEAP32[$0 >> 2];
            HEAP32[$3 + 20 >> 2] = 121;
            FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, -1);
           case 1:
            if (($2 | 0) <= 0) {
             if (!jpeg_fill_bit_buffer($4 + 268 | 0, $6, $2, 1)) {
              break block4
             }
             $6 = HEAP32[$4 + 276 >> 2];
             $2 = HEAP32[$4 + 280 >> 2];
            }
            $2 = $2 - 1 | 0;
            $13 = $6 >>> $2 & 1 ? $12 : $21;
            break block11;
           case 0:
            break block8;
           };
          }
          $13 = 0;
          if (($8 | 0) == 15) {
           break block11
          }
          $9 = 1 << $8;
          if ($3 >>> 0 < 16) {
           break block2
          }
          if (($2 | 0) < ($8 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 268 | 0, $6, $2, $8)) {
            break block4
           }
           $6 = HEAP32[$4 + 276 >> 2];
           $2 = HEAP32[$4 + 280 >> 2];
          }
          $2 = $2 - $8 | 0;
          $9 = (HEAP32[($8 << 2) + 51440 >> 2] & $6 >> $2) + $9 | 0;
          if ($9) {
           break block2
          }
          break block12;
         }
         $17 = ($5 | 0) > ($11 | 0) ? $5 : $11;
         $9 = $17 + 1 | 0;
         block14 : {
          while (1) {
           $3 = $5;
           $5 = (HEAP32[($3 << 2) + $14 >> 2] << 1) + $10 | 0;
           block13 : {
            if (HEAPU16[$5 >> 1]) {
             if (($2 | 0) <= 0) {
              if (!jpeg_fill_bit_buffer($4 + 268 | 0, $6, $2, 1)) {
               break block4
              }
              $6 = HEAP32[$4 + 276 >> 2];
              $2 = HEAP32[$4 + 280 >> 2];
             }
             $2 = $2 - 1 | 0;
             if (!($6 >>> $2 & 1)) {
              break block13
             }
             $16 = HEAP16[$5 >> 1];
             if ($16 & $12) {
              break block13
             }
             HEAP16[$5 >> 1] = (($16 | 0) < 0 ? $18 : $12) + $16;
             break block13;
            }
            if (($8 | 0) <= 0) {
             break block14
            }
            $8 = $8 - 1 | 0;
           }
           $5 = $3 + 1 | 0;
           if (($3 | 0) != ($17 | 0)) {
            continue
           }
           break;
          };
          $3 = $9;
         }
         if ($13) {
          $5 = HEAP32[($3 << 2) + $14 >> 2];
          HEAP16[($5 << 1) + $10 >> 1] = $13;
          HEAP32[($1 << 2) + $4 >> 2] = $5;
          $1 = $1 + 1 | 0;
         }
         $5 = $3 + 1 | 0;
         if (($3 | 0) < ($11 | 0)) {
          continue
         }
        }
        break;
       };
       $1 = 0;
       break block15;
      }
      $11 = ($5 | 0) > ($11 | 0) ? $5 : $11;
      $13 = 0 - $12 | 0;
      while (1) {
       $3 = $5;
       $5 = (HEAP32[($3 << 2) + $14 >> 2] << 1) + $10 | 0;
       block16 : {
        if (!HEAPU16[$5 >> 1]) {
         break block16
        }
        if (($2 | 0) <= 0) {
         if (!jpeg_fill_bit_buffer($4 + 268 | 0, $6, $2, 1)) {
          break block4
         }
         $6 = HEAP32[$4 + 276 >> 2];
         $2 = HEAP32[$4 + 280 >> 2];
        }
        $2 = $2 - 1 | 0;
        if (!($6 >>> $2 & 1)) {
         break block16
        }
        $8 = HEAP16[$5 >> 1];
        if ($8 & $12) {
         break block16
        }
        HEAP16[$5 >> 1] = $8 + (($8 | 0) < 0 ? $13 : $12);
       }
       $5 = $3 + 1 | 0;
       if (($3 | 0) != ($11 | 0)) {
        continue
       }
       break;
      };
      $1 = $9 - 1 | 0;
     }
     $3 = HEAP32[$0 + 24 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$4 + 268 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 272 >> 2];
     HEAP32[$7 + 20 >> 2] = $1;
     HEAP32[$7 + 16 >> 2] = $2;
     HEAP32[$7 + 12 >> 2] = $6;
     $2 = HEAP32[$0 + 280 >> 2];
    }
    $3 = 1;
    if (!$2) {
     break block1
    }
    HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] - 1;
    break block1;
   }
   if (!$1) {
    $3 = 0;
    break block1;
   }
   $2 = $1;
   $0 = $2 & 3;
   if ($0) {
    $5 = 0;
    while (1) {
     $2 = $2 - 1 | 0;
     HEAP16[(HEAP32[($2 << 2) + $4 >> 2] << 1) + $10 >> 1] = 0;
     $5 = $5 + 1 | 0;
     if (($0 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   if ($1 >>> 0 < 4) {
    $3 = 0;
    break block1;
   }
   while (1) {
    $3 = 0;
    $0 = ($2 << 2) + $4 | 0;
    HEAP16[(HEAP32[$0 - 4 >> 2] << 1) + $10 >> 1] = 0;
    HEAP16[(HEAP32[$0 - 8 >> 2] << 1) + $10 >> 1] = 0;
    HEAP16[(HEAP32[$0 - 12 >> 2] << 1) + $10 >> 1] = 0;
    $2 = $2 - 4 | 0;
    HEAP16[(HEAP32[($2 << 2) + $4 >> 2] << 1) + $10 >> 1] = 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $4 + 288 | 0;
  return $3 | 0;
 }
 
 function decode_mcu_DC_refine_1221($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $3 = HEAP32[$0 + 468 >> 2];
  $6 = HEAP32[$0 + 280 >> 2];
  block1 : {
   block : {
    if (!$6) {
     $6 = 0;
     break block;
    }
    if (HEAP32[$3 + 44 >> 2]) {
     break block
    }
    $2 = HEAP32[$0 + 464 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$3 + 16 >> 2] / 8 | 0);
    HEAP32[$3 + 16 >> 2] = 0;
    if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
     break block1
    }
    if (HEAP32[$0 + 340 >> 2] > 0) {
     $4 = $3 + 24 | 0;
     $2 = 0;
     while (1) {
      HEAP32[$4 + ($2 << 2) >> 2] = 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$3 + 20 >> 2] = 0;
    $6 = HEAP32[$0 + 280 >> 2];
    HEAP32[$3 + 44 >> 2] = $6;
    if (HEAP32[$0 + 440 >> 2]) {
     break block
    }
    HEAP32[$3 + 40 >> 2] = 0;
   }
   HEAP32[$5 + 28 >> 2] = $0;
   $4 = HEAP32[$0 + 24 >> 2];
   $7 = HEAP32[$4 >> 2];
   HEAP32[$5 + 12 >> 2] = $7;
   $9 = HEAP32[$4 + 4 >> 2];
   HEAP32[$5 + 16 >> 2] = $9;
   $10 = 1;
   $2 = HEAP32[$3 + 16 >> 2];
   $8 = HEAP32[$3 + 12 >> 2];
   if (HEAP32[$0 + 368 >> 2] > 0) {
    $6 = 1 << HEAP32[$0 + 424 >> 2];
    $4 = 0;
    while (1) {
     if (($2 | 0) <= 0) {
      if (!jpeg_fill_bit_buffer($5 + 12 | 0, $8, $2, 1)) {
       $10 = 0;
       break block1;
      }
      $8 = HEAP32[$5 + 20 >> 2];
      $2 = HEAP32[$5 + 24 >> 2];
     }
     $2 = $2 - 1 | 0;
     if ($8 >>> $2 & 1) {
      $7 = HEAP32[($4 << 2) + $1 >> 2];
      HEAP16[$7 >> 1] = $6 | HEAPU16[$7 >> 1];
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < HEAP32[$0 + 368 >> 2]) {
      continue
     }
     break;
    };
    $6 = HEAP32[$0 + 280 >> 2];
    $9 = HEAP32[$5 + 16 >> 2];
    $7 = HEAP32[$5 + 12 >> 2];
    $4 = HEAP32[$0 + 24 >> 2];
   }
   HEAP32[$4 + 4 >> 2] = $9;
   HEAP32[$4 >> 2] = $7;
   HEAP32[$3 + 16 >> 2] = $2;
   HEAP32[$3 + 12 >> 2] = $8;
   if (!$6) {
    break block1
   }
   HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] - 1;
  }
  __stack_pointer = $5 + 32 | 0;
  return $10 | 0;
 }
 
 function decode_mcu_AC_first_1222($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 + 468 >> 2];
  $2 = HEAP32[$0 + 280 >> 2];
  block1 : {
   block : {
    if (!$2) {
     $2 = 0;
     break block;
    }
    if (HEAP32[$5 + 44 >> 2]) {
     break block
    }
    $2 = HEAP32[$0 + 464 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$5 + 16 >> 2] / 8 | 0);
    HEAP32[$5 + 16 >> 2] = 0;
    if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
     break block1
    }
    if (HEAP32[$0 + 340 >> 2] > 0) {
     $3 = $5 + 24 | 0;
     $2 = 0;
     while (1) {
      HEAP32[$3 + ($2 << 2) >> 2] = 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$5 + 20 >> 2] = 0;
    $2 = HEAP32[$0 + 280 >> 2];
    HEAP32[$5 + 44 >> 2] = $2;
    if (HEAP32[$0 + 440 >> 2]) {
     break block
    }
    HEAP32[$5 + 40 >> 2] = 0;
   }
   if (!HEAP32[$5 + 40 >> 2]) {
    $3 = HEAP32[$5 + 20 >> 2];
    block2 : {
     if ($3) {
      $3 = $3 - 1 | 0;
      break block2;
     }
     HEAP32[$4 + 28 >> 2] = $0;
     $2 = HEAP32[$0 + 24 >> 2];
     HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[$2 + 4 >> 2];
     $2 = HEAP32[$5 + 16 >> 2];
     $6 = HEAP32[$5 + 12 >> 2];
     $8 = HEAP32[$0 + 412 >> 2];
     $10 = HEAP32[$0 + 416 >> 2];
     block9 : {
      block3 : {
       if (($8 | 0) > ($10 | 0)) {
        break block3
       }
       $11 = HEAP32[$1 >> 2];
       $12 = HEAP32[$0 + 432 >> 2];
       $13 = HEAP32[$0 + 424 >> 2];
       $9 = HEAP32[$5 + 64 >> 2];
       $14 = $9 + 1168 | 0;
       $15 = $9 + 144 | 0;
       while (1) {
        block7 : {
         block6 : {
          block5 : {
           block4 : {
            if (($2 | 0) > 7) {
             break block4
            }
            $3 = 0;
            if (!jpeg_fill_bit_buffer($4 + 12 | 0, $6, $2, 0)) {
             break block1
            }
            $6 = HEAP32[$4 + 20 >> 2];
            $2 = HEAP32[$4 + 24 >> 2];
            if (($2 | 0) >= 8) {
             break block4
            }
            $1 = 1;
            break block5;
           }
           $1 = $6 >> $2 - 8 & 255;
           $3 = HEAP32[($1 << 2) + $15 >> 2];
           if ($3) {
            break block6
           }
           $1 = 9;
          }
          $3 = 0;
          $1 = jpeg_huff_decode($4 + 12 | 0, $6, $2, $9, $1);
          if (($1 | 0) < 0) {
           break block1
          }
          $6 = HEAP32[$4 + 20 >> 2];
          $2 = HEAP32[$4 + 24 >> 2];
          break block7;
         }
         $1 = HEAPU8[$1 + $14 | 0];
         $2 = $2 - $3 | 0;
        }
        $3 = $1 >>> 4 | 0;
        $7 = $1 & 15;
        block8 : {
         if ($7) {
          if (($2 | 0) < ($7 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 12 | 0, $6, $2, $7)) {
            $3 = 0;
            break block1;
           }
           $6 = HEAP32[$4 + 20 >> 2];
           $2 = HEAP32[$4 + 24 >> 2];
          }
          $1 = $3 + $8 | 0;
          $2 = $2 - $7 | 0;
          $3 = $7 << 2;
          $7 = HEAP32[$3 + 51440 >> 2];
          $8 = $6 >> $2 & $7;
          HEAP16[(HEAP32[($1 << 2) + $12 >> 2] << 1) + $11 >> 1] = $8 - (($8 | 0) <= HEAP32[$3 + 51436 >> 2] ? $7 : 0) << $13;
          break block8;
         }
         if (($3 | 0) != 15) {
          if ($1 >>> 0 < 16) {
           break block3
          }
          if (($2 | 0) < ($3 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 12 | 0, $6, $2, $3)) {
            $3 = 0;
            break block1;
           }
           $6 = HEAP32[$4 + 20 >> 2];
           $2 = HEAP32[$4 + 24 >> 2];
          }
          $2 = $2 - $3 | 0;
          $3 = (HEAP32[($3 << 2) + 51440 >> 2] & $6 >> $2) + (-1 << $3 ^ -1) | 0;
          break block9;
         }
         $1 = $8 + 15 | 0;
        }
        $8 = $1 + 1 | 0;
        if (($1 | 0) < ($10 | 0)) {
         continue
        }
        break;
       };
      }
      $3 = 0;
     }
     $1 = HEAP32[$0 + 24 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$4 + 12 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 16 >> 2];
     HEAP32[$5 + 16 >> 2] = $2;
     HEAP32[$5 + 12 >> 2] = $6;
     $2 = HEAP32[$0 + 280 >> 2];
    }
    HEAP32[$5 + 20 >> 2] = $3;
   }
   $3 = 1;
   if (!$2) {
    break block1
   }
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] - 1;
  }
  __stack_pointer = $4 + 32 | 0;
  return $3 | 0;
 }
 
 function decode_mcu_DC_first_1223($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $11 = HEAP32[$0 + 424 >> 2];
  $5 = HEAP32[$0 + 468 >> 2];
  $2 = HEAP32[$0 + 280 >> 2];
  block1 : {
   block : {
    if (!$2) {
     $2 = 0;
     break block;
    }
    if (HEAP32[$5 + 44 >> 2]) {
     break block
    }
    $2 = HEAP32[$0 + 464 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$5 + 16 >> 2] / 8 | 0);
    HEAP32[$5 + 16 >> 2] = 0;
    if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
     break block1
    }
    if (HEAP32[$0 + 340 >> 2] > 0) {
     $3 = $5 + 24 | 0;
     $2 = 0;
     while (1) {
      HEAP32[$3 + ($2 << 2) >> 2] = 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$5 + 20 >> 2] = 0;
    $2 = HEAP32[$0 + 280 >> 2];
    HEAP32[$5 + 44 >> 2] = $2;
    if (HEAP32[$0 + 440 >> 2]) {
     break block
    }
    HEAP32[$5 + 40 >> 2] = 0;
   }
   if (!HEAP32[$5 + 40 >> 2]) {
    HEAP32[$4 + 44 >> 2] = $0;
    $3 = HEAP32[$0 + 24 >> 2];
    $9 = HEAP32[$3 >> 2];
    HEAP32[$4 + 28 >> 2] = $9;
    $6 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 32 >> 2] = $6;
    $2 = HEAP32[$5 + 16 >> 2];
    $8 = HEAP32[$5 + 12 >> 2];
    HEAP32[$4 + 24 >> 2] = HEAP32[$5 + 36 >> 2];
    $7 = HEAP32[$5 + 32 >> 2];
    HEAP32[$4 + 16 >> 2] = HEAP32[$5 + 28 >> 2];
    HEAP32[$4 + 20 >> 2] = $7;
    $7 = HEAP32[$5 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 20 >> 2];
    HEAP32[$4 + 12 >> 2] = $7;
    if (HEAP32[$0 + 368 >> 2] > 0) {
     $12 = $5 + 48 | 0;
     $13 = $0 + 344 | 0;
     $14 = $0 + 372 | 0;
     $15 = $4 + 8 | 4;
     $9 = 0;
     while (1) {
      $3 = $9 << 2;
      $16 = HEAP32[$3 + $1 >> 2];
      $10 = HEAP32[$3 + $14 >> 2] << 2;
      $3 = HEAP32[(HEAP32[HEAP32[$10 + $13 >> 2] + 20 >> 2] << 2) + $12 >> 2];
      block5 : {
       block4 : {
        block3 : {
         block2 : {
          if (($2 | 0) > 7) {
           break block2
          }
          $6 = 0;
          if (!jpeg_fill_bit_buffer($4 + 28 | 0, $8, $2, 0)) {
           break block1
          }
          $8 = HEAP32[$4 + 36 >> 2];
          $2 = HEAP32[$4 + 40 >> 2];
          if (($2 | 0) >= 8) {
           break block2
          }
          $7 = 1;
          break block3;
         }
         $6 = $8 >> $2 - 8 & 255;
         $7 = HEAP32[($3 + ($6 << 2) | 0) + 144 >> 2];
         if ($7) {
          break block4
         }
         $7 = 9;
        }
        $6 = 0;
        $3 = jpeg_huff_decode($4 + 28 | 0, $8, $2, $3, $7);
        if (($3 | 0) < 0) {
         break block1
        }
        $8 = HEAP32[$4 + 36 >> 2];
        $2 = HEAP32[$4 + 40 >> 2];
        break block5;
       }
       $3 = HEAPU8[($3 + $6 | 0) + 1168 | 0];
       $2 = $2 - $7 | 0;
      }
      if ($3) {
       if (($2 | 0) < ($3 | 0)) {
        if (!jpeg_fill_bit_buffer($4 + 28 | 0, $8, $2, $3)) {
         $6 = 0;
         break block1;
        }
        $8 = HEAP32[$4 + 36 >> 2];
        $2 = HEAP32[$4 + 40 >> 2];
       }
       $2 = $2 - $3 | 0;
       $3 = $3 << 2;
       $6 = HEAP32[$3 + 51440 >> 2];
       $7 = $8 >> $2 & $6;
       $3 = $7 - (($7 | 0) <= HEAP32[$3 + 51436 >> 2] ? $6 : 0) | 0;
      } else {
       $3 = 0
      }
      $6 = $15 + $10 | 0;
      $3 = $3 + HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $3;
      HEAP16[$16 >> 1] = $3 << $11;
      $9 = $9 + 1 | 0;
      if (($9 | 0) < HEAP32[$0 + 368 >> 2]) {
       continue
      }
      break;
     };
     $6 = HEAP32[$4 + 32 >> 2];
     $9 = HEAP32[$4 + 28 >> 2];
     $3 = HEAP32[$0 + 24 >> 2];
    }
    HEAP32[$3 + 4 >> 2] = $6;
    HEAP32[$3 >> 2] = $9;
    HEAP32[$5 + 16 >> 2] = $2;
    HEAP32[$5 + 12 >> 2] = $8;
    HEAP32[$5 + 36 >> 2] = HEAP32[$4 + 24 >> 2];
    $1 = HEAP32[$4 + 20 >> 2];
    HEAP32[$5 + 28 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$5 + 32 >> 2] = $1;
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$5 + 20 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$5 + 24 >> 2] = $1;
    $2 = HEAP32[$0 + 280 >> 2];
   }
   $6 = 1;
   if (!$2) {
    break block1
   }
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] - 1;
  }
  __stack_pointer = $4 + 48 | 0;
  return $6 | 0;
 }
 
 function jpeg_make_d_derived_tbl($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $9 = __stack_pointer - 1312 | 0;
  __stack_pointer = $9;
  if ($2 >>> 0 >= 4) {
   $4 = HEAP32[$0 >> 2];
   HEAP32[$4 + 24 >> 2] = $2;
   HEAP32[$4 + 20 >> 2] = 52;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $5 = HEAP32[(($1 ? 180 : 196) + $0 | 0) + ($2 << 2) >> 2];
  if (!$5) {
   $5 = HEAP32[$0 + 16 >> 2];
   block4 : {
    block3 : {
     block : {
      switch ($2 | 0) {
      case 1:
       $6 = $1 ? 49793 : 50048;
       $4 = $1 ? 49776 : 50016;
       break block3;
      default:
       $4 = HEAP32[$0 >> 2];
       HEAP32[$4 + 24 >> 2] = $2;
       HEAP32[$4 + 20 >> 2] = 52;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       $2 = 0;
       break block4;
      case 0:
       break block;
      };
     }
     $6 = $1 ? 49793 : 49840;
     $4 = $1 ? 49744 : 49808;
    }
    $5 = (($5 ? ($1 ? 180 : 196) : $1 ? 120 : 136) + $0 | 0) + ($2 << 2) | 0;
    $2 = HEAP32[$5 >> 2];
    if (!$2) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 280) | 0;
     HEAP32[$2 + 276 >> 2] = 0;
     HEAP32[$5 >> 2] = $2;
    }
    $5 = HEAPU8[$4 + 16 | 0];
    HEAP8[$2 + 16 | 0] = $5;
    $7 = HEAP32[$4 + 12 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$2 + 12 >> 2] = $7;
    $7 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 + 4 >> 2] = $7;
    $4 = $5 + (HEAPU8[$4 + 15 | 0] + (HEAPU8[$4 + 14 | 0] + (HEAPU8[$4 + 13 | 0] + (HEAPU8[$4 + 12 | 0] + (HEAPU8[$4 + 11 | 0] + (HEAPU8[$4 + 10 | 0] + (HEAPU8[$4 + 9 | 0] + (HEAPU8[$4 + 8 | 0] + (HEAPU8[$4 + 7 | 0] + (HEAPU8[$4 + 6 | 0] + (HEAPU8[$4 + 5 | 0] + (HEAPU8[$4 + 4 | 0] + (HEAPU8[$4 + 3 | 0] + (HEAPU8[$4 + 1 | 0] + HEAPU8[$4 + 2 | 0] | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0;
    block6 : {
     block5 : {
      if ($4 >>> 0 >= 257) {
       $5 = HEAP32[$0 >> 2];
       HEAP32[$5 + 20 >> 2] = 9;
       FUNCTION_TABLE[HEAP32[$5 >> 2]]($0);
       break block5;
      }
      if (!$4) {
       break block6
      }
     }
     if (!$4) {
      break block6
     }
     wasm2js_memory_copy($2 + 17 | 0, $6, $4);
    }
    HEAP32[$2 + 276 >> 2] = 0;
   }
   $5 = $2;
  }
  $7 = HEAP32[$3 >> 2];
  if (!$7) {
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1424) | 0;
   HEAP32[$3 >> 2] = $7;
  }
  HEAP32[$7 + 140 >> 2] = $5;
  $4 = 0;
  $2 = 1;
  while (1) {
   $6 = HEAPU8[$2 + $5 | 0];
   $3 = $6 + $4 | 0;
   if (($3 | 0) >= 257) {
    $8 = HEAP32[$0 >> 2];
    HEAP32[$8 + 20 >> 2] = 9;
    FUNCTION_TABLE[HEAP32[$8 >> 2]]($0);
   }
   if ($6) {
    if ($6) {
     wasm2js_memory_fill(($9 + 1040 | 0) + $4 | 0, $2, $6)
    }
    $4 = $3;
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 17) {
    continue
   }
   break;
  };
  $2 = 0;
  HEAP8[($9 + 1040 | 0) + $4 | 0] = 0;
  $8 = HEAPU8[$9 + 1040 | 0];
  if ($8) {
   $6 = $8 << 24 >> 24;
   $3 = 0;
   while (1) {
    if ($8 << 24 >> 24 == ($6 | 0)) {
     while (1) {
      HEAP32[($3 << 2) + $9 >> 2] = $2;
      $2 = $2 + 1 | 0;
      $3 = $3 + 1 | 0;
      $8 = HEAP8[$3 + ($9 + 1040 | 0) | 0];
      if (($8 | 0) == ($6 | 0)) {
       continue
      }
      break;
     }
    }
    if (1 << $6 <= ($2 | 0)) {
     $10 = HEAP32[$0 >> 2];
     HEAP32[$10 + 20 >> 2] = 9;
     FUNCTION_TABLE[HEAP32[$10 >> 2]]($0);
    }
    $6 = $6 + 1 | 0;
    $2 = $2 << 1;
    if ($8 & 255) {
     continue
    }
    break;
   };
  }
  $8 = $7 + 72 | 0;
  $3 = 0;
  $2 = 1;
  while (1) {
   $6 = $2 << 2;
   $10 = $6 + $7 | 0;
   $11 = $2 + $5 | 0;
   if (HEAPU8[$11 | 0]) {
    HEAP32[$6 + $8 >> 2] = $3 - HEAP32[($3 << 2) + $9 >> 2];
    $3 = HEAPU8[$11 | 0] + $3 | 0;
    $6 = HEAP32[(($3 << 2) + $9 | 0) - 4 >> 2];
   } else {
    $6 = -1
   }
   HEAP32[$10 >> 2] = $6;
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 17) {
    continue
   }
   break;
  };
  HEAP32[$7 + 68 >> 2] = 1048575;
  $8 = 0;
  $12 = $7 + 144 | 0;
  wasm2js_memory_fill($12, 0, 1024);
  $15 = $7 + 1168 | 0;
  $10 = $5 + 17 | 0;
  $7 = 1;
  while (1) {
   $13 = $5 + $7 | 0;
   if (HEAPU8[$13 | 0]) {
    $11 = 1;
    $14 = 8 - $7 | 0;
    $6 = 1 << $14;
    while (1) {
     $16 = $8 + $10 | 0;
     $2 = HEAP32[($8 << 2) + $9 >> 2] << $14;
     $3 = $6;
     while (1) {
      HEAP32[($2 << 2) + $12 >> 2] = $7;
      HEAP8[$2 + $15 | 0] = HEAPU8[$16 | 0];
      $2 = $2 + 1 | 0;
      $17 = ($3 | 0) > 1;
      $3 = $3 - 1 | 0;
      if ($17) {
       continue
      }
      break;
     };
     $8 = $8 + 1 | 0;
     $2 = HEAPU8[$13 | 0] > $11 >>> 0;
     $11 = $11 + 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   $7 = $7 + 1 | 0;
   if (($7 | 0) != 9) {
    continue
   }
   break;
  };
  block7 : {
   if (!$1 | ($4 | 0) <= 0) {
    break block7
   }
   $2 = 0;
   if (($4 | 0) != 1) {
    $1 = $4 & 1;
    $4 = $4 & -2;
    $3 = 0;
    while (1) {
     $5 = $2 + $10 | 0;
     if (HEAPU8[$5 | 0] >= 16) {
      $6 = HEAP32[$0 >> 2];
      HEAP32[$6 + 20 >> 2] = 9;
      FUNCTION_TABLE[HEAP32[$6 >> 2]]($0);
     }
     if (HEAPU8[$5 + 1 | 0] >= 16) {
      $5 = HEAP32[$0 >> 2];
      HEAP32[$5 + 20 >> 2] = 9;
      FUNCTION_TABLE[HEAP32[$5 >> 2]]($0);
     }
     $2 = $2 + 2 | 0;
     $3 = $3 + 2 | 0;
     if (($4 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    if (!$1) {
     break block7
    }
   }
   if (HEAPU8[$2 + $10 | 0] < 16) {
    break block7
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 9;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
  }
  __stack_pointer = $9 + 1312 | 0;
 }
 
 function decode_mcu_1225($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $7 = HEAP32[$0 + 468 >> 2];
  $2 = HEAP32[$0 + 280 >> 2];
  block1 : {
   block : {
    if (!$2) {
     $2 = 0;
     break block;
    }
    if (HEAP32[$7 + 44 >> 2]) {
     break block
    }
    $2 = HEAP32[$0 + 464 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$7 + 16 >> 2] / 8 | 0);
    HEAP32[$7 + 16 >> 2] = 0;
    if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
     break block1
    }
    if (HEAP32[$0 + 340 >> 2] > 0) {
     $6 = $7 + 24 | 0;
     $2 = 0;
     while (1) {
      HEAP32[$6 + ($2 << 2) >> 2] = 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$7 + 20 >> 2] = 0;
    $2 = HEAP32[$0 + 280 >> 2];
    HEAP32[$7 + 44 >> 2] = $2;
    if (HEAP32[$0 + 440 >> 2]) {
     break block
    }
    HEAP32[$7 + 40 >> 2] = 0;
   }
   if (!HEAP32[$7 + 40 >> 2]) {
    HEAP32[$4 + 44 >> 2] = $0;
    $3 = HEAP32[$0 + 24 >> 2];
    $8 = HEAP32[$3 >> 2];
    HEAP32[$4 + 28 >> 2] = $8;
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 32 >> 2] = $5;
    $2 = HEAP32[$7 + 16 >> 2];
    $6 = HEAP32[$7 + 12 >> 2];
    HEAP32[$4 + 24 >> 2] = HEAP32[$7 + 36 >> 2];
    $9 = HEAP32[$7 + 32 >> 2];
    HEAP32[$4 + 16 >> 2] = HEAP32[$7 + 28 >> 2];
    HEAP32[$4 + 20 >> 2] = $9;
    $9 = HEAP32[$7 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 20 >> 2];
    HEAP32[$4 + 12 >> 2] = $9;
    if (HEAP32[$0 + 368 >> 2] > 0) {
     $15 = $0 + 372 | 0;
     $16 = $7 + 180 | 0;
     $17 = $7 + 140 | 0;
     $18 = $7 + 100 | 0;
     $19 = $4 + 8 | 4;
     while (1) {
      $8 = $13 << 2;
      $3 = HEAP32[$8 + $18 >> 2];
      $11 = HEAP32[$1 + $8 >> 2];
      block5 : {
       block4 : {
        block3 : {
         block2 : {
          if (($2 | 0) > 7) {
           break block2
          }
          $5 = 0;
          if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, 0)) {
           break block1
          }
          $6 = HEAP32[$4 + 36 >> 2];
          $2 = HEAP32[$4 + 40 >> 2];
          if (($2 | 0) >= 8) {
           break block2
          }
          $9 = 1;
          break block3;
         }
         $5 = $6 >> $2 - 8 & 255;
         $9 = HEAP32[($3 + ($5 << 2) | 0) + 144 >> 2];
         if ($9) {
          break block4
         }
         $9 = 9;
        }
        $5 = 0;
        $3 = jpeg_huff_decode($4 + 28 | 0, $6, $2, $3, $9);
        if (($3 | 0) < 0) {
         break block1
        }
        $6 = HEAP32[$4 + 36 >> 2];
        $2 = HEAP32[$4 + 40 >> 2];
        break block5;
       }
       $3 = HEAPU8[($3 + $5 | 0) + 1168 | 0];
       $2 = $2 - $9 | 0;
      }
      $9 = HEAP32[$8 + $17 >> 2];
      $10 = HEAP32[$8 + $16 >> 2];
      block12 : {
       block6 : {
        if ($10) {
         if ($3) {
          if (($2 | 0) < ($3 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
            $5 = 0;
            break block1;
           }
           $6 = HEAP32[$4 + 36 >> 2];
           $2 = HEAP32[$4 + 40 >> 2];
          }
          $2 = $2 - $3 | 0;
          $3 = $3 << 2;
          $5 = HEAP32[$3 + 51440 >> 2];
          $12 = $6 >> $2 & $5;
          $3 = $12 - (($12 | 0) <= HEAP32[$3 + 51436 >> 2] ? $5 : 0) | 0;
         } else {
          $3 = 0
         }
         $5 = (HEAP32[$8 + $15 >> 2] << 2) + $19 | 0;
         $3 = $3 + HEAP32[$5 >> 2] | 0;
         HEAP32[$5 >> 2] = $3;
         HEAP16[$11 >> 1] = $3;
         $8 = 1;
         if (($10 | 0) < 2) {
          break block6
         }
         $12 = $9 + 1168 | 0;
         $20 = $9 + 144 | 0;
         while (1) {
          block10 : {
           block9 : {
            block8 : {
             block7 : {
              if (($2 | 0) > 7) {
               break block7
              }
              $5 = 0;
              if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, 0)) {
               break block1
              }
              $6 = HEAP32[$4 + 36 >> 2];
              $2 = HEAP32[$4 + 40 >> 2];
              if (($2 | 0) >= 8) {
               break block7
              }
              $3 = 1;
              break block8;
             }
             $3 = $6 >> $2 - 8 & 255;
             $5 = HEAP32[($3 << 2) + $20 >> 2];
             if ($5) {
              break block9
             }
             $3 = 9;
            }
            $5 = 0;
            $3 = jpeg_huff_decode($4 + 28 | 0, $6, $2, $9, $3);
            if (($3 | 0) < 0) {
             break block1
            }
            $6 = HEAP32[$4 + 36 >> 2];
            $2 = HEAP32[$4 + 40 >> 2];
            break block10;
           }
           $3 = HEAPU8[$3 + $12 | 0];
           $2 = $2 - $5 | 0;
          }
          $5 = $3 >>> 4 | 0;
          $3 = $3 & 15;
          block11 : {
           if ($3) {
            if (($2 | 0) < ($3 | 0)) {
             if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
              $5 = 0;
              break block1;
             }
             $6 = HEAP32[$4 + 36 >> 2];
             $2 = HEAP32[$4 + 40 >> 2];
            }
            $5 = $5 + $8 | 0;
            $8 = $3 << 2;
            $14 = HEAP32[$8 + 51440 >> 2];
            $2 = $2 - $3 | 0;
            $3 = $14 & $6 >> $2;
            HEAP16[$11 + (HEAP32[($5 << 2) + 52304 >> 2] << 1) >> 1] = $3 - (($3 | 0) <= HEAP32[$8 + 51436 >> 2] ? $14 : 0);
            break block11;
           }
           if (($5 | 0) != 15) {
            break block12
           }
           $5 = $8 + 15 | 0;
          }
          $8 = $5 + 1 | 0;
          if (($10 | 0) > ($8 | 0)) {
           continue
          }
          break;
         };
         if (($5 | 0) <= 62) {
          break block6
         }
         break block12;
        }
        $8 = 1;
        if (!$3) {
         break block6
        }
        if (($2 | 0) < ($3 | 0)) {
         if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
          $5 = 0;
          break block1;
         }
         $6 = HEAP32[$4 + 36 >> 2];
         $2 = HEAP32[$4 + 40 >> 2];
        }
        $2 = $2 - $3 | 0;
       }
       $11 = $9 + 1168 | 0;
       $10 = $9 + 144 | 0;
       while (1) {
        block16 : {
         block15 : {
          block14 : {
           block13 : {
            if (($2 | 0) > 7) {
             break block13
            }
            $5 = 0;
            if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, 0)) {
             break block1
            }
            $6 = HEAP32[$4 + 36 >> 2];
            $2 = HEAP32[$4 + 40 >> 2];
            if (($2 | 0) >= 8) {
             break block13
            }
            $3 = 1;
            break block14;
           }
           $3 = $6 >> $2 - 8 & 255;
           $5 = HEAP32[$10 + ($3 << 2) >> 2];
           if ($5) {
            break block15
           }
           $3 = 9;
          }
          $5 = 0;
          $3 = jpeg_huff_decode($4 + 28 | 0, $6, $2, $9, $3);
          if (($3 | 0) < 0) {
           break block1
          }
          $6 = HEAP32[$4 + 36 >> 2];
          $2 = HEAP32[$4 + 40 >> 2];
          break block16;
         }
         $3 = HEAPU8[$3 + $11 | 0];
         $2 = $2 - $5 | 0;
        }
        $5 = $3 >>> 4 | 0;
        $3 = $3 & 15;
        block17 : {
         if ($3) {
          if (($2 | 0) < ($3 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
            $5 = 0;
            break block1;
           }
           $6 = HEAP32[$4 + 36 >> 2];
           $2 = HEAP32[$4 + 40 >> 2];
          }
          $2 = $2 - $3 | 0;
          break block17;
         }
         if (($5 | 0) != 15) {
          break block12
         }
        }
        $8 = ($5 + $8 | 0) + 1 | 0;
        if (($8 | 0) < 64) {
         continue
        }
        break;
       };
      }
      $13 = $13 + 1 | 0;
      if (($13 | 0) < HEAP32[$0 + 368 >> 2]) {
       continue
      }
      break;
     };
     $8 = HEAP32[$4 + 28 >> 2];
     $5 = HEAP32[$4 + 32 >> 2];
     $3 = HEAP32[$0 + 24 >> 2];
    }
    HEAP32[$3 + 4 >> 2] = $5;
    HEAP32[$3 >> 2] = $8;
    HEAP32[$7 + 16 >> 2] = $2;
    HEAP32[$7 + 12 >> 2] = $6;
    HEAP32[$7 + 36 >> 2] = HEAP32[$4 + 24 >> 2];
    $1 = HEAP32[$4 + 20 >> 2];
    HEAP32[$7 + 28 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$7 + 32 >> 2] = $1;
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$7 + 20 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$7 + 24 >> 2] = $1;
    $2 = HEAP32[$0 + 280 >> 2];
   }
   $5 = 1;
   if (!$2) {
    break block1
   }
   HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] - 1;
  }
  __stack_pointer = $4 + 48 | 0;
  return $5 | 0;
 }
 
 function decode_mcu_sub($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $8 = HEAP32[$0 + 468 >> 2];
  $2 = HEAP32[$0 + 280 >> 2];
  block1 : {
   block : {
    if (!$2) {
     $2 = 0;
     break block;
    }
    if (HEAP32[$8 + 44 >> 2]) {
     break block
    }
    $2 = HEAP32[$0 + 464 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$8 + 16 >> 2] / 8 | 0);
    HEAP32[$8 + 16 >> 2] = 0;
    if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
     break block1
    }
    if (HEAP32[$0 + 340 >> 2] > 0) {
     $6 = $8 + 24 | 0;
     $2 = 0;
     while (1) {
      HEAP32[$6 + ($2 << 2) >> 2] = 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$8 + 20 >> 2] = 0;
    $2 = HEAP32[$0 + 280 >> 2];
    HEAP32[$8 + 44 >> 2] = $2;
    if (HEAP32[$0 + 440 >> 2]) {
     break block
    }
    HEAP32[$8 + 40 >> 2] = 0;
   }
   if (!HEAP32[$8 + 40 >> 2]) {
    $14 = HEAP32[$0 + 436 >> 2];
    $16 = HEAP32[$0 + 432 >> 2];
    HEAP32[$4 + 44 >> 2] = $0;
    $7 = HEAP32[$0 + 24 >> 2];
    $3 = HEAP32[$7 >> 2];
    HEAP32[$4 + 28 >> 2] = $3;
    $5 = HEAP32[$7 + 4 >> 2];
    HEAP32[$4 + 32 >> 2] = $5;
    $2 = HEAP32[$8 + 16 >> 2];
    $6 = HEAP32[$8 + 12 >> 2];
    HEAP32[$4 + 24 >> 2] = HEAP32[$8 + 36 >> 2];
    $9 = HEAP32[$8 + 32 >> 2];
    HEAP32[$4 + 16 >> 2] = HEAP32[$8 + 28 >> 2];
    HEAP32[$4 + 20 >> 2] = $9;
    $9 = HEAP32[$8 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$8 + 20 >> 2];
    HEAP32[$4 + 12 >> 2] = $9;
    if (HEAP32[$0 + 368 >> 2] > 0) {
     $17 = $0 + 372 | 0;
     $18 = $8 + 180 | 0;
     $19 = $8 + 140 | 0;
     $20 = $8 + 100 | 0;
     $21 = $4 + 8 | 4;
     while (1) {
      $7 = $13 << 2;
      $3 = HEAP32[$7 + $20 >> 2];
      $11 = HEAP32[$1 + $7 >> 2];
      block5 : {
       block4 : {
        block3 : {
         block2 : {
          if (($2 | 0) > 7) {
           break block2
          }
          $5 = 0;
          if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, 0)) {
           break block1
          }
          $6 = HEAP32[$4 + 36 >> 2];
          $2 = HEAP32[$4 + 40 >> 2];
          if (($2 | 0) >= 8) {
           break block2
          }
          $9 = 1;
          break block3;
         }
         $5 = $6 >> $2 - 8 & 255;
         $9 = HEAP32[($3 + ($5 << 2) | 0) + 144 >> 2];
         if ($9) {
          break block4
         }
         $9 = 9;
        }
        $5 = 0;
        $3 = jpeg_huff_decode($4 + 28 | 0, $6, $2, $3, $9);
        if (($3 | 0) < 0) {
         break block1
        }
        $6 = HEAP32[$4 + 36 >> 2];
        $2 = HEAP32[$4 + 40 >> 2];
        break block5;
       }
       $3 = HEAPU8[($3 + $5 | 0) + 1168 | 0];
       $2 = $2 - $9 | 0;
      }
      $9 = HEAP32[$7 + $19 >> 2];
      $10 = HEAP32[$7 + $18 >> 2];
      block12 : {
       block6 : {
        if ($10) {
         if ($3) {
          if (($2 | 0) < ($3 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
            $5 = 0;
            break block1;
           }
           $6 = HEAP32[$4 + 36 >> 2];
           $2 = HEAP32[$4 + 40 >> 2];
          }
          $2 = $2 - $3 | 0;
          $3 = $3 << 2;
          $5 = HEAP32[$3 + 51440 >> 2];
          $12 = $6 >> $2 & $5;
          $3 = $12 - (($12 | 0) <= HEAP32[$3 + 51436 >> 2] ? $5 : 0) | 0;
         } else {
          $3 = 0
         }
         $7 = (HEAP32[$7 + $17 >> 2] << 2) + $21 | 0;
         $3 = $3 + HEAP32[$7 >> 2] | 0;
         HEAP32[$7 >> 2] = $3;
         HEAP16[$11 >> 1] = $3;
         $7 = 1;
         if (($10 | 0) < 2) {
          break block6
         }
         $12 = $9 + 1168 | 0;
         $22 = $9 + 144 | 0;
         while (1) {
          block10 : {
           block9 : {
            block8 : {
             block7 : {
              if (($2 | 0) > 7) {
               break block7
              }
              $5 = 0;
              if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, 0)) {
               break block1
              }
              $6 = HEAP32[$4 + 36 >> 2];
              $2 = HEAP32[$4 + 40 >> 2];
              if (($2 | 0) >= 8) {
               break block7
              }
              $3 = 1;
              break block8;
             }
             $3 = $6 >> $2 - 8 & 255;
             $5 = HEAP32[($3 << 2) + $22 >> 2];
             if ($5) {
              break block9
             }
             $3 = 9;
            }
            $5 = 0;
            $3 = jpeg_huff_decode($4 + 28 | 0, $6, $2, $9, $3);
            if (($3 | 0) < 0) {
             break block1
            }
            $6 = HEAP32[$4 + 36 >> 2];
            $2 = HEAP32[$4 + 40 >> 2];
            break block10;
           }
           $3 = HEAPU8[$3 + $12 | 0];
           $2 = $2 - $5 | 0;
          }
          $5 = $3 >>> 4 | 0;
          $3 = $3 & 15;
          block11 : {
           if ($3) {
            if (($2 | 0) < ($3 | 0)) {
             if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
              $5 = 0;
              break block1;
             }
             $6 = HEAP32[$4 + 36 >> 2];
             $2 = HEAP32[$4 + 40 >> 2];
            }
            $7 = $5 + $7 | 0;
            $5 = $3 << 2;
            $15 = HEAP32[$5 + 51440 >> 2];
            $2 = $2 - $3 | 0;
            $3 = $15 & $6 >> $2;
            HEAP16[$11 + (HEAP32[($7 << 2) + $16 >> 2] << 1) >> 1] = $3 - (($3 | 0) <= HEAP32[$5 + 51436 >> 2] ? $15 : 0);
            break block11;
           }
           if (($5 | 0) != 15) {
            break block12
           }
           $7 = $7 + 15 | 0;
          }
          $7 = $7 + 1 | 0;
          if (($10 | 0) > ($7 | 0)) {
           continue
          }
          break;
         };
         break block6;
        }
        $7 = 1;
        if (!$3) {
         break block6
        }
        if (($2 | 0) < ($3 | 0)) {
         if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
          $5 = 0;
          break block1;
         }
         $6 = HEAP32[$4 + 36 >> 2];
         $2 = HEAP32[$4 + 40 >> 2];
        }
        $2 = $2 - $3 | 0;
       }
       if (($7 | 0) > ($14 | 0)) {
        break block12
       }
       $11 = $9 + 1168 | 0;
       $10 = $9 + 144 | 0;
       while (1) {
        block16 : {
         block15 : {
          block14 : {
           block13 : {
            if (($2 | 0) > 7) {
             break block13
            }
            $5 = 0;
            if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, 0)) {
             break block1
            }
            $6 = HEAP32[$4 + 36 >> 2];
            $2 = HEAP32[$4 + 40 >> 2];
            if (($2 | 0) >= 8) {
             break block13
            }
            $3 = 1;
            break block14;
           }
           $3 = $6 >> $2 - 8 & 255;
           $5 = HEAP32[$10 + ($3 << 2) >> 2];
           if ($5) {
            break block15
           }
           $3 = 9;
          }
          $5 = 0;
          $3 = jpeg_huff_decode($4 + 28 | 0, $6, $2, $9, $3);
          if (($3 | 0) < 0) {
           break block1
          }
          $6 = HEAP32[$4 + 36 >> 2];
          $2 = HEAP32[$4 + 40 >> 2];
          break block16;
         }
         $3 = HEAPU8[$3 + $11 | 0];
         $2 = $2 - $5 | 0;
        }
        $5 = $3 >>> 4 | 0;
        $3 = $3 & 15;
        block17 : {
         if ($3) {
          if (($2 | 0) < ($3 | 0)) {
           if (!jpeg_fill_bit_buffer($4 + 28 | 0, $6, $2, $3)) {
            $5 = 0;
            break block1;
           }
           $6 = HEAP32[$4 + 36 >> 2];
           $2 = HEAP32[$4 + 40 >> 2];
          }
          $2 = $2 - $3 | 0;
          break block17;
         }
         if (($5 | 0) != 15) {
          break block12
         }
        }
        $7 = ($5 + $7 | 0) + 1 | 0;
        if (($14 | 0) >= ($7 | 0)) {
         continue
        }
        break;
       };
      }
      $13 = $13 + 1 | 0;
      if (($13 | 0) < HEAP32[$0 + 368 >> 2]) {
       continue
      }
      break;
     };
     $7 = HEAP32[$0 + 24 >> 2];
     $5 = HEAP32[$4 + 32 >> 2];
     $3 = HEAP32[$4 + 28 >> 2];
    }
    HEAP32[$7 + 4 >> 2] = $5;
    HEAP32[$7 >> 2] = $3;
    HEAP32[$8 + 16 >> 2] = $2;
    HEAP32[$8 + 12 >> 2] = $6;
    HEAP32[$8 + 36 >> 2] = HEAP32[$4 + 24 >> 2];
    $1 = HEAP32[$4 + 20 >> 2];
    HEAP32[$8 + 28 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$8 + 32 >> 2] = $1;
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$8 + 20 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$8 + 24 >> 2] = $1;
    $2 = HEAP32[$0 + 280 >> 2];
   }
   $5 = 1;
   if (!$2) {
    break block1
   }
   HEAP32[$8 + 44 >> 2] = HEAP32[$8 + 44 >> 2] - 1;
  }
  __stack_pointer = $4 + 48 | 0;
  return $5 | 0;
 }
 
 function jpeg_fill_bit_buffer($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$0 + 4 >> 2];
  $6 = HEAP32[$0 >> 2];
  $5 = HEAP32[$0 + 16 >> 2];
  block1 : {
   block : {
    if (HEAP32[$5 + 440 >> 2]) {
     $4 = $6;
     break block;
    }
    if (($2 | 0) > 24) {
     $8 = $2;
     $4 = $6;
     break block1;
    }
    while (1) {
     if (!$7) {
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5 + 24 >> 2] + 12 >> 2]]($5) | 0)) {
       return 0
      }
      $4 = HEAP32[$5 + 24 >> 2];
      $7 = HEAP32[$4 + 4 >> 2];
      $6 = HEAP32[$4 >> 2];
     }
     $4 = $6 + 1 | 0;
     $7 = $7 - 1 | 0;
     block2 : {
      $8 = HEAPU8[$6 | 0];
      if (($8 | 0) == 255) {
       while (1) {
        if (!$7) {
         if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5 + 24 >> 2] + 12 >> 2]]($5) | 0)) {
          return 0
         }
         $4 = HEAP32[$5 + 24 >> 2];
         $7 = HEAP32[$4 + 4 >> 2];
         $4 = HEAP32[$4 >> 2];
        }
        $7 = $7 - 1 | 0;
        $6 = HEAPU8[$4 | 0];
        $8 = 255;
        $4 = $4 + 1 | 0;
        if (($6 | 0) == 255) {
         continue
        }
        break;
       };
       if ($6) {
        break block2
       }
      }
      $1 = $1 << 8 | $8;
      $9 = ($2 | 0) < 17;
      $6 = $4;
      $8 = $2 + 8 | 0;
      $2 = $8;
      if ($9) {
       continue
      }
      break block1;
     }
     break;
    };
    HEAP32[$5 + 440 >> 2] = $6;
   }
   if (($2 | 0) >= ($3 | 0)) {
    $8 = $2;
    break block1;
   }
   if (!HEAP32[HEAP32[$5 + 468 >> 2] + 40 >> 2]) {
    $3 = HEAP32[$5 >> 2];
    HEAP32[$3 + 20 >> 2] = 120;
    FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($5, -1);
    HEAP32[HEAP32[$5 + 468 >> 2] + 40 >> 2] = 1;
   }
   $8 = 25;
   $1 = $1 << 25 - $2;
  }
  HEAP32[$0 + 12 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $7;
  HEAP32[$0 >> 2] = $4;
  return 1;
 }
 
 function jpeg_huff_decode($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  if (($2 | 0) < ($4 | 0)) {
   if (!jpeg_fill_bit_buffer($0, $1, $2, $4)) {
    return -1
   }
   $2 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$0 + 8 >> 2];
  }
  block : {
   $5 = $4 << 2;
   $2 = $2 - $4 | 0;
   $6 = HEAP32[$5 + 51440 >> 2] & $1 >> $2;
   if (($6 | 0) <= HEAP32[$3 + $5 >> 2]) {
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$0 + 8 >> 2] = $1;
    break block;
   }
   while (1) {
    $5 = $4;
    if (($2 | 0) <= 0) {
     if (!jpeg_fill_bit_buffer($0, $1, $2, 1)) {
      return -1
     }
     $2 = HEAP32[$0 + 12 >> 2];
     $1 = HEAP32[$0 + 8 >> 2];
    }
    $2 = $2 - 1 | 0;
    $6 = $1 >>> $2 & 1 | $6 << 1;
    $4 = $5 + 1 | 0;
    if (($6 | 0) > HEAP32[($4 << 2) + $3 >> 2]) {
     continue
    }
    break;
   };
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $1;
   if ($5 >>> 0 < 16) {
    break block
   }
   $0 = HEAP32[$0 + 16 >> 2];
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 121;
   FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
   return 0;
  }
  return HEAPU8[(HEAP32[(($4 << 2) + $3 | 0) + 72 >> 2] + (HEAP32[$3 + 140 >> 2] + $6 | 0) | 0) + 17 | 0];
 }
 
 function decompress_data($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $11 = HEAP32[$0 + 332 >> 2] - 1 | 0;
  $2 = HEAP32[$0 + 452 >> 2];
  block : {
   while (1) {
    $5 = HEAP32[$0 + 144 >> 2];
    $3 = HEAP32[$0 + 152 >> 2];
    if (($5 | 0) >= ($3 | 0) & (($3 | 0) != ($5 | 0) | HEAPU32[$0 + 148 >> 2] > HEAPU32[$0 + 156 >> 2])) {
     break block
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0) {
     continue
    }
    break;
   };
   return 0;
  }
  if (HEAP32[$0 + 36 >> 2] > 0) {
   $12 = $2 + 72 | 0;
   $4 = HEAP32[$0 + 216 >> 2];
   while (1) {
    block1 : {
     if (!HEAP32[$4 + 52 >> 2]) {
      break block1
     }
     $2 = $7 << 2;
     $3 = HEAP32[$4 + 12 >> 2];
     $13 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[$2 + $12 >> 2], Math_imul($3, HEAP32[$0 + 156 >> 2]), $3, 0) | 0;
     if (HEAPU32[$0 + 156 >> 2] < $11 >>> 0) {
      $3 = HEAP32[$4 + 12 >> 2]
     } else {
      $5 = HEAP32[$4 + 12 >> 2];
      $3 = HEAPU32[$4 + 32 >> 2] % ($5 >>> 0) | 0;
      $3 = $3 ? $3 : $5;
     }
     if (($3 | 0) <= 0) {
      break block1
     }
     $14 = HEAP32[($2 + HEAP32[$0 + 472 >> 2] | 0) + 4 >> 2];
     $8 = HEAP32[$1 + $2 >> 2];
     $2 = HEAP32[$4 + 28 >> 2];
     $6 = 0;
     while (1) {
      $5 = 0;
      if ($2) {
       $2 = HEAP32[($6 << 2) + $13 >> 2];
       $9 = 0;
       $10 = 0;
       while (1) {
        FUNCTION_TABLE[$14 | 0]($0, $4, $2, $8, $9);
        $2 = $2 + 128 | 0;
        $9 = HEAP32[$4 + 36 >> 2] + $9 | 0;
        $5 = HEAP32[$4 + 28 >> 2];
        $10 = $10 + 1 | 0;
        if ($5 >>> 0 > $10 >>> 0) {
         continue
        }
        break;
       };
      }
      $8 = (HEAP32[$4 + 40 >> 2] << 2) + $8 | 0;
      $2 = $5;
      $6 = $6 + 1 | 0;
      if (($3 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
    }
    $4 = $4 + 88 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < HEAP32[$0 + 36 >> 2]) {
     continue
    }
    break;
   };
  }
  $1 = $0;
  $0 = HEAP32[$0 + 156 >> 2] + 1 | 0;
  HEAP32[$1 + 156 >> 2] = $0;
  return ($0 >>> 0 > $11 >>> 0 ? 4 : 3) | 0;
 }
 
 function consume_data($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  $6 = HEAP32[$0 + 452 >> 2];
  if (HEAP32[$0 + 340 >> 2] > 0) {
   $3 = $6 + 72 | 0;
   $4 = $0 + 344 | 0;
   while (1) {
    $8 = $2 << 2;
    $5 = HEAP32[$8 + $4 >> 2];
    $1 = HEAP32[$5 + 12 >> 2];
    (wasm2js_i32$0 = $8 + $9 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[$3 + (HEAP32[$5 + 4 >> 2] << 2) >> 2], Math_imul($1, HEAP32[$0 + 148 >> 2]), $1, 1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$6 + 28 >> 2];
  $7 = HEAP32[$6 + 24 >> 2];
  block : {
   if (($1 | 0) > ($7 | 0)) {
    $16 = $0 + 344 | 0;
    $8 = $6 + 32 | 0;
    $2 = HEAP32[$0 + 360 >> 2];
    $5 = HEAP32[$6 + 20 >> 2];
    while (1) {
     if ($2 >>> 0 > $5 >>> 0) {
      while (1) {
       $10 = 0;
       $1 = $8;
       $13 = HEAP32[$0 + 340 >> 2];
       if (($13 | 0) > 0) {
        while (1) {
         $3 = $10 << 2;
         $4 = HEAP32[$3 + $16 >> 2];
         $14 = HEAP32[$4 + 60 >> 2];
         if (($14 | 0) > 0) {
          $17 = HEAP32[$3 + $9 >> 2] + ($7 << 2) | 0;
          $4 = HEAP32[$4 + 56 >> 2];
          $15 = $4 & 7;
          $11 = 0;
          $18 = Math_imul($4, $5) << 7;
          $19 = $4 - 1 >>> 0 < 7;
          while (1) {
           $2 = HEAP32[($11 << 2) + $17 >> 2] + $18 | 0;
           $3 = $4;
           $12 = 0;
           if ($15) {
            while (1) {
             HEAP32[$1 >> 2] = $2;
             $3 = $3 - 1 | 0;
             $1 = $1 + 4 | 0;
             $2 = $2 + 128 | 0;
             $12 = $12 + 1 | 0;
             if (($12 | 0) != ($15 | 0)) {
              continue
             }
             break;
            }
           }
           if (!$19) {
            while (1) {
             HEAP32[$1 >> 2] = $2;
             HEAP32[$1 + 28 >> 2] = $2 + 896;
             HEAP32[$1 + 24 >> 2] = $2 + 768;
             HEAP32[$1 + 20 >> 2] = $2 + 640;
             HEAP32[$1 + 16 >> 2] = $2 + 512;
             HEAP32[$1 + 12 >> 2] = $2 + 384;
             HEAP32[$1 + 8 >> 2] = $2 + 256;
             HEAP32[$1 + 4 >> 2] = $2 + 128;
             $1 = $1 + 32 | 0;
             $2 = $2 + 1024 | 0;
             $3 = $3 - 8 | 0;
             if ($3) {
              continue
             }
             break;
            }
           }
           $11 = $11 + 1 | 0;
           if (($14 | 0) != ($11 | 0)) {
            continue
           }
           break;
          };
         }
         $10 = $10 + 1 | 0;
         if (($13 | 0) != ($10 | 0)) {
          continue
         }
         break;
        }
       }
       if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] + 4 >> 2]]($0, $8) | 0)) {
        HEAP32[$6 + 20 >> 2] = $5;
        HEAP32[$6 + 24 >> 2] = $7;
        $0 = 0;
        break block;
       }
       $2 = HEAP32[$0 + 360 >> 2];
       $5 = $5 + 1 | 0;
       if ($2 >>> 0 > $5 >>> 0) {
        continue
       }
       break;
      };
      $1 = HEAP32[$6 + 28 >> 2];
     }
     $5 = 0;
     HEAP32[$6 + 20 >> 2] = 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) < ($1 | 0)) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 148 >> 2] + 1 | 0;
   HEAP32[$0 + 148 >> 2] = $3;
   $4 = HEAP32[$0 + 332 >> 2];
   if ($4 >>> 0 > $3 >>> 0) {
    $1 = HEAP32[$0 + 452 >> 2];
    block1 : {
     if (HEAP32[$0 + 340 >> 2] >= 2) {
      HEAP32[$1 + 28 >> 2] = 1;
      break block1;
     }
     $0 = HEAP32[$0 + 344 >> 2];
     if ($3 >>> 0 < $4 - 1 >>> 0) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 12 >> 2];
      break block1;
     }
     HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 76 >> 2];
    }
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 24 >> 2] = 0;
    $0 = 3;
    break block;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 12 >> 2]]($0);
   $0 = 4;
  }
  __stack_pointer = $9 + 16 | 0;
  return $0 | 0;
 }
 
 function decompress_onepass($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $17 = HEAP32[$0 + 332 >> 2] - 1 | 0;
  $4 = HEAP32[$0 + 452 >> 2];
  $8 = HEAP32[$4 + 24 >> 2];
  block1 : {
   $2 = HEAP32[$4 + 28 >> 2];
   if (($8 | 0) < ($2 | 0)) {
    $13 = HEAP32[$0 + 360 >> 2] - 1 | 0;
    $20 = $0 + 344 | 0;
    $21 = $4 + 32 | 0;
    $18 = $4 + 116 | 0;
    $6 = HEAP32[$4 + 20 >> 2];
    while (1) {
     if ($6 >>> 0 <= $13 >>> 0) {
      while (1) {
       block : {
        if (!HEAP32[$0 + 436 >> 2]) {
         break block
        }
        $2 = HEAP32[$0 + 368 >> 2] << 7;
        if (!$2) {
         break block
        }
        wasm2js_memory_fill($18, 0, $2);
       }
       if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] + 4 >> 2]]($0, $21) | 0)) {
        break block1
       }
       $2 = HEAP32[$0 + 340 >> 2];
       if (($2 | 0) > 0) {
        $10 = 0;
        $5 = $18;
        while (1) {
         $3 = HEAP32[($10 << 2) + $20 >> 2];
         block2 : {
          if (!HEAP32[$3 + 52 >> 2]) {
           $5 = (HEAP32[$3 + 64 >> 2] << 7) + $5 | 0;
           break block2;
          }
          $7 = HEAP32[$3 + 60 >> 2];
          if (($7 | 0) <= 0) {
           break block2
          }
          $22 = Math_imul(HEAP32[$3 + 68 >> 2], $6);
          $2 = HEAP32[$3 + 4 >> 2] << 2;
          $14 = HEAP32[($2 + HEAP32[$0 + 472 >> 2] | 0) + 4 >> 2];
          $15 = HEAP32[$1 + $2 >> 2];
          $2 = HEAP32[$3 + 40 >> 2];
          $9 = $15 + (Math_imul($8, $2) << 2) | 0;
          $11 = HEAP32[($6 >>> 0 < $13 >>> 0 ? 56 : 72) + $3 >> 2];
          $23 = $11 & -2;
          $15 = $11 & 1;
          $12 = 0;
          while (1) {
           if (!(HEAP32[$3 + 76 >> 2] <= ($8 + $12 | 0) & HEAPU32[$0 + 148 >> 2] >= $17 >>> 0)) {
            if (($11 | 0) > 0) {
             $7 = 0;
             $2 = $22;
             $16 = 0;
             block4 : {
              if (($11 | 0) != 1) {
               while (1) {
                $19 = ($7 << 7) + $5 | 0;
                FUNCTION_TABLE[$14 | 0]($0, $3, $19, $9, $2);
                $2 = HEAP32[$3 + 36 >> 2] + $2 | 0;
                FUNCTION_TABLE[$14 | 0]($0, $3, $19 + 128 | 0, $9, $2);
                $7 = $7 + 2 | 0;
                $2 = $2 + HEAP32[$3 + 36 >> 2] | 0;
                $16 = $16 + 2 | 0;
                if (($23 | 0) != ($16 | 0)) {
                 continue
                }
                break;
               };
               if (!$15) {
                break block4
               }
              }
              FUNCTION_TABLE[$14 | 0]($0, $3, ($7 << 7) + $5 | 0, $9, $2);
             }
             $7 = HEAP32[$3 + 60 >> 2];
             $2 = HEAP32[$3 + 40 >> 2];
            }
            $9 = ($2 << 2) + $9 | 0;
           }
           $5 = (HEAP32[$3 + 56 >> 2] << 7) + $5 | 0;
           $12 = $12 + 1 | 0;
           if (($12 | 0) < ($7 | 0)) {
            continue
           }
           break;
          };
          $2 = HEAP32[$0 + 340 >> 2];
         }
         $10 = $10 + 1 | 0;
         if (($10 | 0) < ($2 | 0)) {
          continue
         }
         break;
        };
       }
       $6 = $6 + 1 | 0;
       if ($13 >>> 0 >= $6 >>> 0) {
        continue
       }
       break;
      };
      $2 = HEAP32[$4 + 28 >> 2];
     }
     $6 = 0;
     HEAP32[$4 + 20 >> 2] = 0;
     $8 = $8 + 1 | 0;
     if (($8 | 0) < ($2 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 156 >> 2] = HEAP32[$0 + 156 >> 2] + 1;
   $2 = HEAP32[$0 + 148 >> 2] + 1 | 0;
   HEAP32[$0 + 148 >> 2] = $2;
   if ($2 >>> 0 <= $17 >>> 0) {
    $1 = HEAP32[$0 + 452 >> 2];
    block5 : {
     if (HEAP32[$0 + 340 >> 2] >= 2) {
      HEAP32[$1 + 28 >> 2] = 1;
      break block5;
     }
     $5 = HEAP32[$0 + 344 >> 2];
     if ($2 >>> 0 < HEAP32[$0 + 332 >> 2] - 1 >>> 0) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$5 + 12 >> 2];
      break block5;
     }
     HEAP32[$1 + 28 >> 2] = HEAP32[$5 + 76 >> 2];
    }
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 24 >> 2] = 0;
    return 3;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 12 >> 2]]($0);
   return 4;
  }
  HEAP32[$4 + 20 >> 2] = $6;
  HEAP32[$4 + 24 >> 2] = $8;
  return 0;
 }
 
 function dummy_consume_data($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function start_output_pass($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $1 = HEAP32[$0 + 452 >> 2];
  if (HEAP32[$1 + 16 >> 2]) {
   $10 = $1;
   block1 : {
    block : {
     if (!HEAP32[$0 + 160 >> 2] | (!HEAP32[$0 + 80 >> 2] | !HEAP32[$0 + 224 >> 2])) {
      break block
     }
     $2 = HEAP32[$1 + 112 >> 2];
     if (!$2) {
      $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, Math_imul(HEAP32[$0 + 36 >> 2], 24)) | 0;
      HEAP32[$1 + 112 >> 2] = $2;
     }
     if (HEAP32[$0 + 36 >> 2] <= 0) {
      break block
     }
     $3 = HEAP32[$0 + 216 >> 2];
     while (1) {
      $1 = HEAP32[$3 + 80 >> 2];
      if (!$1 | !HEAPU16[$1 >> 1] | (!HEAPU16[$1 + 2 >> 1] | !HEAPU16[$1 + 16 >> 1])) {
       break block
      }
      if (!HEAPU16[$1 + 4 >> 1] | (!HEAPU16[$1 + 32 >> 1] | !HEAPU16[$1 + 18 >> 1])) {
       break block
      }
      $1 = HEAP32[$0 + 160 >> 2] + ($4 << 8) | 0;
      if (HEAP32[$1 >> 2] < 0) {
       break block
      }
      $5 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 4 >> 2] = $5;
      $6 = HEAP32[$1 + 8 >> 2];
      HEAP32[$2 + 8 >> 2] = $6;
      $7 = HEAP32[$1 + 12 >> 2];
      HEAP32[$2 + 12 >> 2] = $7;
      $8 = HEAP32[$1 + 16 >> 2];
      HEAP32[$2 + 16 >> 2] = $8;
      $1 = HEAP32[$1 + 20 >> 2];
      HEAP32[$2 + 20 >> 2] = $1;
      $9 = $1 | $8 | ($5 | $6 | $7) ? 1 : $9;
      $3 = $3 + 88 | 0;
      $2 = $2 + 24 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) < HEAP32[$0 + 36 >> 2]) {
       continue
      }
      break;
     };
     $1 = 216;
     if ($9) {
      break block1
     }
    }
    $1 = 210;
   }
   HEAP32[$10 + 12 >> 2] = $1;
  }
  HEAP32[$0 + 156 >> 2] = 0;
 }
 
 function start_input_pass_1235($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  $1 = HEAP32[$0 + 452 >> 2];
  block : {
   if (HEAP32[$0 + 340 >> 2] >= 2) {
    HEAP32[$1 + 28 >> 2] = 1;
    break block;
   }
   $2 = HEAP32[$0 + 344 >> 2];
   if (HEAP32[$0 + 332 >> 2] != 1) {
    HEAP32[$1 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
    break block;
   }
   HEAP32[$1 + 28 >> 2] = HEAP32[$2 + 76 >> 2];
  }
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
 }
 
 function decompress_smooth_data($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
  $9 = __stack_pointer - 128 | 0;
  __stack_pointer = $9;
  $23 = HEAP32[$0 + 332 >> 2] - 1 | 0;
  $27 = HEAP32[$0 + 452 >> 2];
  block1 : {
   block : {
    while (1) {
     $10 = HEAP32[$0 + 144 >> 2];
     $7 = HEAP32[$0 + 152 >> 2];
     if (($10 | 0) > ($7 | 0)) {
      break block
     }
     $3 = HEAP32[$0 + 460 >> 2];
     if (HEAP32[$3 + 20 >> 2] | ($7 | 0) == ($10 | 0) & HEAPU32[$0 + 148 >> 2] > HEAP32[$0 + 156 >> 2] + !HEAP32[$0 + 412 >> 2] >>> 0) {
      break block
     }
     if (FUNCTION_TABLE[HEAP32[$3 >> 2]]($0) | 0) {
      continue
     }
     break;
    };
    $0 = 0;
    break block1;
   }
   if (HEAP32[$0 + 36 >> 2] > 0) {
    $28 = $27 + 72 | 0;
    $12 = HEAP32[$0 + 216 >> 2];
    while (1) {
     block2 : {
      if (!HEAP32[$12 + 52 >> 2]) {
       break block2
      }
      $15 = HEAP32[$0 + 156 >> 2];
      block3 : {
       if ($23 >>> 0 > $15 >>> 0) {
        $3 = HEAP32[$12 + 12 >> 2];
        $11 = $3 << 1;
        $10 = $3;
        break block3;
       }
       $3 = HEAP32[$12 + 12 >> 2];
       $7 = HEAPU32[$12 + 32 >> 2] % ($3 >>> 0) | 0;
       $11 = $7 ? $7 : $3;
       $10 = $11;
      }
      $24 = $10;
      block4 : {
       if ($15) {
        $29 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[($13 << 2) + $28 >> 2], Math_imul($15 - 1 | 0, $3), $3 + $11 | 0, 0) | 0) + (HEAP32[$12 + 12 >> 2] << 2) | 0;
        break block4;
       }
       $29 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[($13 << 2) + $28 >> 2], 0, $11, 0) | 0;
      }
      if (($24 | 0) <= 0) {
       break block2
      }
      $7 = $13 << 2;
      $44 = HEAP32[($7 + HEAP32[$0 + 472 >> 2] | 0) + 4 >> 2];
      $45 = $24 - 1 | 0;
      $16 = HEAP32[$27 + 112 >> 2] + Math_imul($13, 24) | 0;
      $5 = HEAP32[$12 + 80 >> 2];
      $3 = HEAPU16[$5 + 4 >> 1];
      $30 = $3 << 8;
      $31 = $3 << 7;
      $3 = HEAPU16[$5 + 18 >> 1];
      $32 = $3 << 8;
      $33 = $3 << 7;
      $10 = HEAPU16[$5 >> 1];
      $46 = Math_imul($10, 5);
      $3 = HEAPU16[$5 + 32 >> 1];
      $34 = $3 << 8;
      $35 = $3 << 7;
      $36 = Math_imul($10, 9);
      $3 = HEAPU16[$5 + 16 >> 1];
      $37 = $3 << 8;
      $38 = $3 << 7;
      $3 = HEAPU16[$5 + 2 >> 1];
      $39 = $3 << 8;
      $40 = $3 << 7;
      $41 = Math_imul($10, 36);
      $25 = HEAP32[$1 + $7 >> 2];
      $14 = 0;
      while (1) {
       $7 = ($14 << 2) + $29 | 0;
       $11 = HEAP32[$7 >> 2];
       $18 = $14 | $15 ? HEAP32[$7 - 4 >> 2] : $11;
       $42 = HEAP32[$12 + 28 >> 2] - 1 | 0;
       $19 = 0;
       block5 : {
        if ($15 >>> 0 >= $23 >>> 0) {
         $3 = $11;
         if (($14 | 0) == ($45 | 0)) {
          break block5
         }
        }
        $3 = HEAP32[$7 + 4 >> 2];
       }
       $20 = $3;
       $21 = HEAP16[$20 >> 1];
       $3 = $21;
       $17 = HEAP16[$11 >> 1];
       $10 = $17;
       $22 = HEAP16[$18 >> 1];
       $7 = $22;
       $26 = 0;
       while (1) {
        $6 = $7;
        $7 = $22;
        $43 = $10;
        $10 = $17;
        $5 = $3;
        $3 = $21;
        wasm2js_memory_copy($9, $11, 128);
        if ($19 >>> 0 < $42 >>> 0) {
         $21 = HEAP16[$20 + 128 >> 1];
         $17 = HEAP16[$11 + 128 >> 1];
         $22 = HEAP16[$18 + 128 >> 1];
        }
        $8 = HEAP32[$16 + 4 >> 2];
        if (!(HEAPU16[$9 + 2 >> 1] | !$8)) {
         $2 = Math_imul($43 - $17 | 0, $41);
         block7 : {
          if (($2 | 0) >= 0) {
           $4 = ($2 + $40 >>> 0) / ($39 >>> 0) | 0;
           if (($8 | 0) <= 0) {
            break block7
           }
           $2 = -1 << $8 ^ -1;
           $4 = ($2 | 0) > ($4 | 0) ? $4 : $2;
           break block7;
          }
          $4 = ($40 - $2 >>> 0) / ($39 >>> 0) | 0;
          $2 = -1 << $8 ^ -1;
          $4 = 0 - (($8 | 0) > 0 ? (($2 | 0) > ($4 | 0) ? $4 : $2) : $4) | 0;
         }
         HEAP16[$9 + 2 >> 1] = $4;
        }
        $8 = HEAP32[$16 + 8 >> 2];
        if (!(HEAPU16[$9 + 16 >> 1] | !$8)) {
         $2 = Math_imul($7 - $3 | 0, $41);
         block9 : {
          if (($2 | 0) >= 0) {
           $4 = ($2 + $38 >>> 0) / ($37 >>> 0) | 0;
           if (($8 | 0) <= 0) {
            break block9
           }
           $2 = -1 << $8 ^ -1;
           $4 = ($2 | 0) > ($4 | 0) ? $4 : $2;
           break block9;
          }
          $4 = ($38 - $2 >>> 0) / ($37 >>> 0) | 0;
          $2 = -1 << $8 ^ -1;
          $4 = 0 - (($8 | 0) > 0 ? (($2 | 0) > ($4 | 0) ? $4 : $2) : $4) | 0;
         }
         HEAP16[$9 + 16 >> 1] = $4;
        }
        $8 = HEAP32[$16 + 12 >> 2];
        if (!(HEAPU16[$9 + 32 >> 1] | !$8)) {
         $2 = Math_imul(($7 - ($10 << 1) | 0) + $3 | 0, $36);
         block11 : {
          if (($2 | 0) >= 0) {
           $4 = ($2 + $35 >>> 0) / ($34 >>> 0) | 0;
           if (($8 | 0) <= 0) {
            break block11
           }
           $2 = -1 << $8 ^ -1;
           $4 = ($2 | 0) > ($4 | 0) ? $4 : $2;
           break block11;
          }
          $4 = ($35 - $2 >>> 0) / ($34 >>> 0) | 0;
          $2 = -1 << $8 ^ -1;
          $4 = 0 - (($8 | 0) > 0 ? (($2 | 0) > ($4 | 0) ? $4 : $2) : $4) | 0;
         }
         HEAP16[$9 + 32 >> 1] = $4;
        }
        $2 = HEAP32[$16 + 16 >> 2];
        if (!(HEAPU16[$9 + 18 >> 1] | !$2)) {
         $5 = Math_imul(($6 - ($5 + $22 | 0) | 0) + $21 | 0, $46);
         block13 : {
          if (($5 | 0) >= 0) {
           $6 = ($5 + $33 >>> 0) / ($32 >>> 0) | 0;
           if (($2 | 0) <= 0) {
            break block13
           }
           $5 = -1 << $2 ^ -1;
           $6 = ($5 | 0) > ($6 | 0) ? $6 : $5;
           break block13;
          }
          $6 = ($33 - $5 >>> 0) / ($32 >>> 0) | 0;
          $5 = -1 << $2 ^ -1;
          $6 = 0 - (($2 | 0) > 0 ? (($5 | 0) > ($6 | 0) ? $6 : $5) : $6) | 0;
         }
         HEAP16[$9 + 18 >> 1] = $6;
        }
        $2 = HEAP32[$16 + 20 >> 2];
        if (!(HEAPU16[$9 + 4 >> 1] | !$2)) {
         $5 = Math_imul(($43 - ($10 << 1) | 0) + $17 | 0, $36);
         block15 : {
          if (($5 | 0) >= 0) {
           $6 = ($5 + $31 >>> 0) / ($30 >>> 0) | 0;
           if (($2 | 0) <= 0) {
            break block15
           }
           $5 = -1 << $2 ^ -1;
           $6 = ($5 | 0) > ($6 | 0) ? $6 : $5;
           break block15;
          }
          $6 = ($31 - $5 >>> 0) / ($30 >>> 0) | 0;
          $5 = -1 << $2 ^ -1;
          $6 = 0 - (($2 | 0) > 0 ? (($5 | 0) > ($6 | 0) ? $6 : $5) : $6) | 0;
         }
         HEAP16[$9 + 4 >> 1] = $6;
        }
        FUNCTION_TABLE[$44 | 0]($0, $12, $9, $25, $26);
        $20 = $20 + 128 | 0;
        $18 = $18 + 128 | 0;
        $11 = $11 + 128 | 0;
        $26 = HEAP32[$12 + 36 >> 2] + $26 | 0;
        $19 = $19 + 1 | 0;
        if ($42 >>> 0 >= $19 >>> 0) {
         continue
        }
        break;
       };
       $25 = (HEAP32[$12 + 40 >> 2] << 2) + $25 | 0;
       $14 = $14 + 1 | 0;
       if (($24 | 0) != ($14 | 0)) {
        continue
       }
       break;
      };
     }
     $12 = $12 + 88 | 0;
     $13 = $13 + 1 | 0;
     if (($13 | 0) < HEAP32[$0 + 36 >> 2]) {
      continue
     }
     break;
    };
   }
   $1 = $0;
   $0 = HEAP32[$0 + 156 >> 2] + 1 | 0;
   HEAP32[$1 + 156 >> 2] = $0;
   $0 = $0 >>> 0 > $23 >>> 0 ? 4 : 3;
  }
  __stack_pointer = $9 + 128 | 0;
  return $0 | 0;
 }
 
 function start_pass_main($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $8 = HEAP32[$0 + 448 >> 2];
  block1 : {
   switch ($1 | 0) {
   case 0:
    if (HEAP32[HEAP32[$0 + 476 >> 2] + 8 >> 2]) {
     HEAP32[$8 + 4 >> 2] = 218;
     $16 = HEAP32[$0 + 36 >> 2];
     if (($16 | 0) > 0) {
      $14 = HEAP32[$0 + 328 >> 2];
      $17 = $14 - 2 | 0;
      $18 = $14 + 2 | 0;
      $19 = $8 + 8 | 0;
      $13 = HEAP32[$0 + 216 >> 2];
      while (1) {
       block3 : {
        if (!HEAP32[$13 + 52 >> 2]) {
         break block3
        }
        $0 = $15 << 2;
        $1 = HEAP32[$0 + $19 >> 2];
        $4 = HEAP32[$0 + HEAP32[$8 + 64 >> 2] >> 2];
        $9 = HEAP32[$0 + HEAP32[$8 + 60 >> 2] >> 2];
        $7 = (Math_imul(HEAP32[$13 + 40 >> 2], HEAP32[$13 + 12 >> 2]) | 0) / ($14 | 0) | 0;
        $2 = Math_imul($18, $7);
        block4 : {
         if (($2 | 0) <= 0) {
          break block4
         }
         $10 = $2 & 3;
         $3 = 0;
         $0 = 0;
         if ($2 >>> 0 >= 4) {
          $12 = $2 & 2147483644;
          $11 = 0;
          while (1) {
           $2 = $0 << 2;
           $5 = HEAP32[$2 + $1 >> 2];
           HEAP32[$2 + $4 >> 2] = $5;
           HEAP32[$2 + $9 >> 2] = $5;
           $5 = $2 | 4;
           $6 = HEAP32[$5 + $1 >> 2];
           HEAP32[$4 + $5 >> 2] = $6;
           HEAP32[$5 + $9 >> 2] = $6;
           $5 = $2 | 8;
           $6 = HEAP32[$5 + $1 >> 2];
           HEAP32[$4 + $5 >> 2] = $6;
           HEAP32[$5 + $9 >> 2] = $6;
           $2 = $2 | 12;
           $5 = HEAP32[$2 + $1 >> 2];
           HEAP32[$2 + $4 >> 2] = $5;
           HEAP32[$2 + $9 >> 2] = $5;
           $0 = $0 + 4 | 0;
           $11 = $11 + 4 | 0;
           if (($12 | 0) != ($11 | 0)) {
            continue
           }
           break;
          };
          if (!$10) {
           break block4
          }
         }
         while (1) {
          $2 = $0 << 2;
          $11 = HEAP32[$2 + $1 >> 2];
          HEAP32[$2 + $4 >> 2] = $11;
          HEAP32[$2 + $9 >> 2] = $11;
          $0 = $0 + 1 | 0;
          $3 = $3 + 1 | 0;
          if (($10 | 0) != ($3 | 0)) {
           continue
          }
          break;
         };
        }
        if (($7 | 0) <= 0) {
         break block3
        }
        $2 = Math_imul($7, $17);
        $10 = Math_imul($7, $14);
        $0 = 0;
        $3 = $7 << 1;
        $3 = ($3 | 0) <= 1 ? 1 : $3;
        block5 : {
         if (($3 | 0) != 1) {
          $11 = $3 & 1;
          $5 = $3 & 2147483646;
          $3 = 0;
          while (1) {
           $6 = $0 + $2 << 2;
           $12 = $0 + $10 << 2;
           HEAP32[$6 + $4 >> 2] = HEAP32[$12 + $1 >> 2];
           HEAP32[$4 + $12 >> 2] = HEAP32[$1 + $6 >> 2];
           $6 = $0 | 1;
           $12 = $6 + $2 << 2;
           $6 = $6 + $10 << 2;
           HEAP32[$12 + $4 >> 2] = HEAP32[$6 + $1 >> 2];
           HEAP32[$4 + $6 >> 2] = HEAP32[$1 + $12 >> 2];
           $0 = $0 + 2 | 0;
           $3 = $3 + 2 | 0;
           if (($5 | 0) != ($3 | 0)) {
            continue
           }
           break;
          };
          if (!$11) {
           break block5
          }
         }
         $3 = $0 + $2 << 2;
         $0 = $0 + $10 << 2;
         HEAP32[$3 + $4 >> 2] = HEAP32[$0 + $1 >> 2];
         HEAP32[$0 + $4 >> 2] = HEAP32[$1 + $3 >> 2];
        }
        $3 = $7 & 3;
        $4 = HEAP32[$9 >> 2];
        $0 = 0;
        $1 = 0;
        if ($7 >>> 0 >= 4) {
         $10 = $7 & 2147483644;
         $2 = 0;
         while (1) {
          HEAP32[($1 - $7 << 2) + $9 >> 2] = $4;
          HEAP32[(($1 | 1) - $7 << 2) + $9 >> 2] = $4;
          HEAP32[(($1 | 2) - $7 << 2) + $9 >> 2] = $4;
          HEAP32[(($1 | 3) - $7 << 2) + $9 >> 2] = $4;
          $1 = $1 + 4 | 0;
          $2 = $2 + 4 | 0;
          if (($10 | 0) != ($2 | 0)) {
           continue
          }
          break;
         };
         if (!$3) {
          break block3
         }
        }
        while (1) {
         HEAP32[($1 - $7 << 2) + $9 >> 2] = $4;
         $1 = $1 + 1 | 0;
         $0 = $0 + 1 | 0;
         if (($3 | 0) != ($0 | 0)) {
          continue
         }
         break;
        };
       }
       $13 = $13 + 88 | 0;
       $15 = $15 + 1 | 0;
       if (($16 | 0) != ($15 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP32[$8 + 76 >> 2] = 0;
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 72 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     return;
    }
    HEAP32[$8 + 4 >> 2] = 219;
    HEAP32[$8 + 48 >> 2] = HEAP32[$8 + 52 >> 2];
    return;
   case 2:
    HEAP32[$8 + 4 >> 2] = 220;
    return;
   default:
    break block1;
   };
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 3;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 
 function process_data_context_main($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  block : {
   $4 = HEAP32[$0 + 448 >> 2];
   if (!HEAP32[$4 + 56 >> 2]) {
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] + 12 >> 2]]($0, HEAP32[((HEAP32[$4 + 68 >> 2] << 2) + $4 | 0) + 60 >> 2]) | 0)) {
     break block
    }
    HEAP32[$4 + 56 >> 2] = 1;
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
   }
   block2 : {
    switch (HEAP32[$4 + 72 >> 2]) {
    case 2:
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, HEAP32[((HEAP32[$4 + 68 >> 2] << 2) + $4 | 0) + 60 >> 2], $4 + 48 | 0, HEAP32[$4 + 52 >> 2], $1, $2, $3);
     if (HEAPU32[$4 + 48 >> 2] < HEAPU32[$4 + 52 >> 2]) {
      break block
     }
     HEAP32[$4 + 72 >> 2] = 0;
     if (HEAPU32[$2 >> 2] >= $3 >>> 0) {
      break block
     }
    case 0:
     HEAP32[$4 + 48 >> 2] = 0;
     $12 = HEAP32[$0 + 328 >> 2];
     HEAP32[$4 + 52 >> 2] = $12 - 1;
     block4 : {
      if (HEAP32[$4 + 76 >> 2] != HEAP32[$0 + 332 >> 2]) {
       break block4
      }
      $17 = HEAP32[$0 + 36 >> 2];
      if (($17 | 0) <= 0) {
       break block4
      }
      $13 = HEAP32[$0 + 448 >> 2];
      $18 = $13 + 60 | 0;
      $7 = HEAP32[$0 + 216 >> 2];
      while (1) {
       block5 : {
        if (!HEAP32[$7 + 52 >> 2]) {
         break block5
        }
        $5 = Math_imul(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 12 >> 2]);
        $6 = HEAPU32[$7 + 48 >> 2] % ($5 >>> 0) | 0;
        $6 = $6 ? $6 : $5;
        $5 = ($5 | 0) / ($12 | 0) | 0;
        if (!$8) {
         HEAP32[$13 + 52 >> 2] = (($6 - 1 | 0) / ($5 | 0) | 0) + 1
        }
        if (($5 | 0) <= 0) {
         break block5
        }
        $9 = $5 << 1;
        $15 = ($9 | 0) <= 1 ? 1 : $9;
        $16 = $15 & 7;
        $14 = HEAP32[HEAP32[(HEAP32[$13 + 68 >> 2] << 2) + $18 >> 2] + ($8 << 2) >> 2] + ($6 << 2) | 0;
        $5 = HEAP32[$14 - 4 >> 2];
        $10 = 0;
        $11 = 0;
        if (($9 | 0) >= 8) {
         $15 = $15 & 2147483640;
         $9 = 0;
         while (1) {
          $6 = $14 + ($11 << 2) | 0;
          HEAP32[$6 >> 2] = $5;
          HEAP32[$6 + 28 >> 2] = $5;
          HEAP32[$6 + 24 >> 2] = $5;
          HEAP32[$6 + 20 >> 2] = $5;
          HEAP32[$6 + 16 >> 2] = $5;
          HEAP32[$6 + 12 >> 2] = $5;
          HEAP32[$6 + 8 >> 2] = $5;
          HEAP32[$6 + 4 >> 2] = $5;
          $11 = $11 + 8 | 0;
          $9 = $9 + 8 | 0;
          if (($15 | 0) != ($9 | 0)) {
           continue
          }
          break;
         };
         if (!$16) {
          break block5
         }
        }
        while (1) {
         HEAP32[$14 + ($11 << 2) >> 2] = $5;
         $11 = $11 + 1 | 0;
         $10 = $10 + 1 | 0;
         if (($16 | 0) != ($10 | 0)) {
          continue
         }
         break;
        };
       }
       $7 = $7 + 88 | 0;
       $8 = $8 + 1 | 0;
       if (($17 | 0) != ($8 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP32[$4 + 72 >> 2] = 1;
     break;
    case 1:
     break block2;
    default:
     break block;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, HEAP32[((HEAP32[$4 + 68 >> 2] << 2) + $4 | 0) + 60 >> 2], $4 + 48 | 0, HEAP32[$4 + 52 >> 2], $1, $2, $3);
   if (HEAPU32[$4 + 48 >> 2] < HEAPU32[$4 + 52 >> 2]) {
    break block
   }
   $1 = HEAP32[$0 + 328 >> 2];
   block6 : {
    if (HEAP32[$4 + 76 >> 2] != 1) {
     break block6
    }
    $11 = HEAP32[$0 + 36 >> 2];
    if (($11 | 0) <= 0) {
     break block6
    }
    $13 = $1 + 2 | 0;
    $9 = $1 + 1 | 0;
    $6 = HEAP32[$0 + 448 >> 2];
    $7 = HEAP32[$0 + 216 >> 2];
    $8 = 0;
    while (1) {
     block7 : {
      if (!HEAP32[$7 + 52 >> 2]) {
       break block7
      }
      $2 = (Math_imul(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 12 >> 2]) | 0) / ($1 | 0) | 0;
      if (($2 | 0) <= 0) {
       break block7
      }
      $0 = $8 << 2;
      $3 = HEAP32[$0 + HEAP32[$6 + 64 >> 2] >> 2];
      $5 = HEAP32[$0 + HEAP32[$6 + 60 >> 2] >> 2];
      $16 = Math_imul($2, $13);
      $14 = Math_imul($2, $9);
      $0 = 0;
      while (1) {
       $10 = $0 - $2 << 2;
       $12 = $0 + $14 << 2;
       HEAP32[$10 + $5 >> 2] = HEAP32[$12 + $5 >> 2];
       HEAP32[$3 + $10 >> 2] = HEAP32[$3 + $12 >> 2];
       $10 = $0 + $16 << 2;
       $12 = $0 << 2;
       HEAP32[$10 + $5 >> 2] = HEAP32[$12 + $5 >> 2];
       HEAP32[$3 + $10 >> 2] = HEAP32[$3 + $12 >> 2];
       $0 = $0 + 1 | 0;
       if (($2 | 0) != ($0 | 0)) {
        continue
       }
       break;
      };
     }
     $7 = $7 + 88 | 0;
     $8 = $8 + 1 | 0;
     if (($11 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$4 + 56 >> 2] = 0;
   HEAP32[$4 + 72 >> 2] = 2;
   HEAP32[$4 + 52 >> 2] = $1 + 2;
   HEAP32[$4 + 48 >> 2] = $1 + 1;
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] ^ 1;
  }
 }
 
 function process_data_simple_main($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  block : {
   $4 = HEAP32[$0 + 448 >> 2];
   $5 = HEAP32[$4 + 52 >> 2];
   if ($5 >>> 0 <= HEAPU32[$4 + 48 >> 2]) {
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] + 12 >> 2]]($0, $4 + 8 | 0) | 0)) {
     break block
    }
    HEAP32[$4 + 48 >> 2] = 0;
    $5 = HEAP32[$4 + 52 >> 2];
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, $4 + 8 | 0, $4 + 48 | 0, $5, $1, $2, $3);
  }
 }
 
 function process_data_crank_post($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, 0, 0, 0, $1, $2, $3);
 }
 
 function use_merged_upsample($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  block : {
   if (HEAP32[$0 + 308 >> 2]) {
    break block
   }
   block1 : {
    switch (HEAP32[$0 + 40 >> 2] - 3 | 0) {
    case 0:
    case 4:
     break block1;
    default:
     break block;
    };
   }
   if (HEAP32[$0 + 36 >> 2] != 3 | HEAP32[$0 + 44 >> 2] != 2 | (HEAP32[$0 + 304 >> 2] | HEAP32[$0 + 120 >> 2] != 3)) {
    break block
   }
   $1 = HEAP32[$0 + 216 >> 2];
   if (HEAP32[$1 + 8 >> 2] != 2 | HEAP32[$1 + 96 >> 2] != 1 | (HEAP32[$1 + 184 >> 2] != 1 | HEAP32[$1 + 12 >> 2] > 2)) {
    break block
   }
   if (HEAP32[$1 + 100 >> 2] != 1 | HEAP32[$1 + 188 >> 2] != 1) {
    break block
   }
   $2 = HEAP32[$1 + 36 >> 2];
   if (($2 | 0) != HEAP32[$0 + 324 >> 2] | ($2 | 0) != HEAP32[$1 + 124 >> 2] | ($2 | 0) != HEAP32[$1 + 212 >> 2]) {
    break block
   }
   $2 = HEAP32[$0 + 328 >> 2];
   $0 = HEAP32[$1 + 40 >> 2];
   if (($2 | 0) != ($0 | 0) | ($0 | 0) != HEAP32[$1 + 128 >> 2]) {
    break block
   }
   $3 = ($0 | 0) == HEAP32[$1 + 216 >> 2];
  }
  return $3;
 }
 
 function finish_output_pass($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 + 444 >> 2];
  if (HEAP32[$0 + 84 >> 2]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 8 >> 2]]($0)
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
 }
 
 function prepare_for_output_pass($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = HEAP32[$0 + 444 >> 2];
  block3 : {
   block : {
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] >> 2]]($0, 0);
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] >> 2]]($0, 2);
     $2 = 2;
     break block;
    }
    block1 : {
     if (HEAP32[$0 + 136 >> 2] | !HEAP32[$0 + 84 >> 2]) {
      break block1
     }
     if (!(!HEAP32[$0 + 92 >> 2] | !HEAP32[$0 + 108 >> 2])) {
      HEAP32[$0 + 484 >> 2] = HEAP32[$1 + 24 >> 2];
      HEAP32[$1 + 8 >> 2] = 1;
      break block1;
     }
     if (HEAP32[$0 + 100 >> 2]) {
      HEAP32[$0 + 484 >> 2] = HEAP32[$1 + 20 >> 2];
      break block1;
     }
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 20 >> 2] = 47;
     FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 472 >> 2] >> 2]]($0);
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] + 8 >> 2]]($0);
    if (HEAP32[$0 + 68 >> 2]) {
     break block3
    }
    if (!HEAP32[$1 + 16 >> 2]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 480 >> 2] >> 2]]($0)
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] >> 2]]($0);
    if (HEAP32[$0 + 84 >> 2]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] >> 2]]($0, HEAP32[$1 + 8 >> 2])
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] >> 2]]($0, HEAP32[$1 + 8 >> 2] ? 3 : 0);
    $2 = 0;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] >> 2]]($0, $2);
  }
  $2 = HEAP32[$0 + 8 >> 2];
  block4 : {
   if (!$2) {
    break block4
   }
   $3 = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   $1 = (HEAP32[$1 + 8 >> 2] ? 2 : 1) + $3 | 0;
   HEAP32[$2 + 16 >> 2] = $1;
   if (HEAP32[HEAP32[$0 + 460 >> 2] + 20 >> 2] | !HEAP32[$0 + 64 >> 2]) {
    break block4
   }
   HEAP32[$2 + 16 >> 2] = $1 + (HEAP32[$0 + 108 >> 2] ? 2 : 1);
  }
 }
 
 function start_pass_merged_upsample($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 + 476 >> 2];
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 116 >> 2];
 }
 
 function h2v2_merged_upsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $6 = $2 << 2;
  $4 = HEAP32[$6 + HEAP32[$1 + 8 >> 2] >> 2];
  $10 = HEAP32[$6 + HEAP32[$1 + 4 >> 2] >> 2];
  $1 = HEAP32[$1 >> 2] + ($2 << 3) | 0;
  $11 = HEAP32[$1 + 4 >> 2];
  $9 = HEAP32[$1 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  $2 = HEAP32[$3 >> 2];
  $6 = HEAP32[$0 + 336 >> 2];
  $3 = HEAP32[$0 + 476 >> 2];
  $14 = HEAP32[$3 + 28 >> 2];
  $15 = HEAP32[$3 + 24 >> 2];
  $16 = HEAP32[$3 + 20 >> 2];
  $17 = HEAP32[$3 + 16 >> 2];
  $3 = HEAP32[$0 + 112 >> 2];
  if ($3 >>> 0 >= 2) {
   $13 = $3 >>> 1 | 0;
   while (1) {
    $3 = HEAPU8[$10 | 0] << 2;
    $7 = HEAP32[$3 + $16 >> 2];
    $8 = HEAPU8[$4 | 0] << 2;
    $12 = HEAP32[$8 + $15 >> 2];
    $18 = HEAP32[$3 + $14 >> 2];
    $3 = $6 + HEAP32[$8 + $17 >> 2] | 0;
    $5 = HEAPU8[$9 | 0];
    HEAP8[$2 | 0] = HEAPU8[$3 + $5 | 0];
    $8 = $6 + ($12 + $18 >> 16) | 0;
    HEAP8[$2 + 1 | 0] = HEAPU8[$8 + $5 | 0];
    $12 = $5;
    $5 = $6 + $7 | 0;
    HEAP8[$2 + 2 | 0] = HEAPU8[$12 + $5 | 0];
    $7 = HEAPU8[$9 + 1 | 0];
    HEAP8[$2 + 3 | 0] = HEAPU8[$7 + $3 | 0];
    HEAP8[$2 + 4 | 0] = HEAPU8[$7 + $8 | 0];
    HEAP8[$2 + 5 | 0] = HEAPU8[$7 + $5 | 0];
    $7 = HEAPU8[$11 | 0];
    HEAP8[$1 | 0] = HEAPU8[$7 + $3 | 0];
    HEAP8[$1 + 1 | 0] = HEAPU8[$7 + $8 | 0];
    HEAP8[$1 + 2 | 0] = HEAPU8[$7 + $5 | 0];
    $12 = $3;
    $3 = HEAPU8[$11 + 1 | 0];
    HEAP8[$1 + 3 | 0] = HEAPU8[$12 + $3 | 0];
    HEAP8[$1 + 4 | 0] = HEAPU8[$3 + $8 | 0];
    HEAP8[$1 + 5 | 0] = HEAPU8[$3 + $5 | 0];
    $1 = $1 + 6 | 0;
    $11 = $11 + 2 | 0;
    $2 = $2 + 6 | 0;
    $9 = $9 + 2 | 0;
    $4 = $4 + 1 | 0;
    $10 = $10 + 1 | 0;
    $13 = $13 - 1 | 0;
    if ($13) {
     continue
    }
    break;
   };
   $3 = HEAP32[$0 + 112 >> 2];
  }
  if ($3 & 1) {
   $0 = HEAPU8[$10 | 0] << 2;
   $3 = HEAP32[$0 + $16 >> 2];
   $4 = HEAPU8[$4 | 0] << 2;
   $10 = HEAP32[$4 + $15 >> 2];
   $8 = HEAP32[$0 + $14 >> 2];
   $4 = $6 + HEAP32[$4 + $17 >> 2] | 0;
   $0 = HEAPU8[$9 | 0];
   HEAP8[$2 | 0] = HEAPU8[$4 + $0 | 0];
   $9 = $6 + ($8 + $10 >> 16) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$9 + $0 | 0];
   $5 = $2;
   $2 = $3 + $6 | 0;
   HEAP8[$5 + 2 | 0] = HEAPU8[$2 + $0 | 0];
   $0 = HEAPU8[$11 | 0];
   HEAP8[$1 | 0] = HEAPU8[$0 + $4 | 0];
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + $9 | 0];
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + $2 | 0];
  }
 }
 
 function merged_2v_upsample($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $3 = HEAP32[$0 + 476 >> 2];
  block : {
   if (HEAP32[$3 + 36 >> 2]) {
    jcopy_sample_rows($3 + 32 | 0, (HEAP32[$5 >> 2] << 2) + $4 | 0, 1, HEAP32[$3 + 40 >> 2]);
    HEAP32[$3 + 36 >> 2] = 0;
    $0 = 1;
    break block;
   }
   $8 = HEAP32[$3 + 44 >> 2];
   $9 = $4;
   $4 = HEAP32[$5 >> 2];
   $9 = $9 + ($4 << 2) | 0;
   HEAP32[$7 + 8 >> 2] = HEAP32[$9 >> 2];
   $4 = $6 - $4 | 0;
   $6 = $4 >>> 0 > $8 >>> 0 ? $8 : $4;
   $8 = $6 >>> 0 < 2;
   if ($8) {
    HEAP32[$3 + 36 >> 2] = 1;
    $4 = HEAP32[$3 + 32 >> 2];
   } else {
    $4 = HEAP32[$9 + 4 >> 2]
   }
   HEAP32[$7 + 12 >> 2] = $4;
   FUNCTION_TABLE[HEAP32[$3 + 12 >> 2]]($0, $1, HEAP32[$2 >> 2], $7 + 8 | 0);
   $0 = $8 ? $6 : 2;
  }
  HEAP32[$5 >> 2] = $0 + HEAP32[$5 >> 2];
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] - $0;
  if (!HEAP32[$3 + 36 >> 2]) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function h2v1_merged_upsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $2 = $2 << 2;
  $5 = HEAP32[$2 + HEAP32[$1 + 8 >> 2] >> 2];
  $8 = HEAP32[$2 + HEAP32[$1 + 4 >> 2] >> 2];
  $2 = HEAP32[$2 + HEAP32[$1 >> 2] >> 2];
  $1 = HEAP32[$3 >> 2];
  $6 = HEAP32[$0 + 336 >> 2];
  $3 = HEAP32[$0 + 476 >> 2];
  $11 = HEAP32[$3 + 28 >> 2];
  $12 = HEAP32[$3 + 24 >> 2];
  $13 = HEAP32[$3 + 20 >> 2];
  $14 = HEAP32[$3 + 16 >> 2];
  $3 = HEAP32[$0 + 112 >> 2];
  if ($3 >>> 0 >= 2) {
   $3 = $3 >>> 1 | 0;
   while (1) {
    $4 = HEAPU8[$8 | 0] << 2;
    $9 = HEAP32[$4 + $13 >> 2];
    $7 = HEAPU8[$5 | 0] << 2;
    $10 = HEAP32[$7 + $12 >> 2];
    $15 = HEAP32[$4 + $11 >> 2];
    $7 = $6 + HEAP32[$7 + $14 >> 2] | 0;
    $4 = HEAPU8[$2 | 0];
    HEAP8[$1 | 0] = HEAPU8[$7 + $4 | 0];
    $10 = $6 + ($10 + $15 >> 16) | 0;
    HEAP8[$1 + 1 | 0] = HEAPU8[$10 + $4 | 0];
    $9 = $6 + $9 | 0;
    HEAP8[$1 + 2 | 0] = HEAPU8[$9 + $4 | 0];
    $4 = HEAPU8[$2 + 1 | 0];
    HEAP8[$1 + 3 | 0] = HEAPU8[$4 + $7 | 0];
    HEAP8[$1 + 4 | 0] = HEAPU8[$4 + $10 | 0];
    HEAP8[$1 + 5 | 0] = HEAPU8[$4 + $9 | 0];
    $1 = $1 + 6 | 0;
    $2 = $2 + 2 | 0;
    $5 = $5 + 1 | 0;
    $8 = $8 + 1 | 0;
    $3 = $3 - 1 | 0;
    if ($3) {
     continue
    }
    break;
   };
   $3 = HEAP32[$0 + 112 >> 2];
  }
  if ($3 & 1) {
   $3 = HEAPU8[$8 | 0];
   $0 = HEAPU8[$2 | 0];
   $5 = HEAPU8[$5 | 0] << 2;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($6 + HEAP32[$5 + $14 >> 2] | 0) | 0];
   $2 = $3 << 2;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($6 + (HEAP32[$5 + $12 >> 2] + HEAP32[$2 + $11 >> 2] >> 16) | 0) | 0];
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($6 + HEAP32[$2 + $13 >> 2] | 0) | 0];
  }
 }
 
 function merged_1v_upsample($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] + 12 >> 2]]($0, $1, HEAP32[$2 >> 2], (HEAP32[$5 >> 2] << 2) + $4 | 0);
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
 }
 
 function start_pass_dpost($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[$0 + 456 >> 2];
  block4 : {
   block1 : {
    switch ($1 | 0) {
    case 0:
     if (HEAP32[$0 + 84 >> 2]) {
      HEAP32[$2 + 4 >> 2] = 229;
      if (HEAP32[$2 + 12 >> 2]) {
       break block4
      }
      (wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 28 >> 2]]($0, HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 16 >> 2], 1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      break block4;
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$0 + 476 >> 2] + 4 >> 2];
     break block4;
    case 3:
     if (!HEAP32[$2 + 8 >> 2]) {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 20 >> 2] = 3;
      FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
     }
     HEAP32[$2 + 4 >> 2] = 230;
     break block4;
    case 2:
     if (!HEAP32[$2 + 8 >> 2]) {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 20 >> 2] = 3;
      FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
     }
     HEAP32[$2 + 4 >> 2] = 231;
     break block4;
    default:
     break block1;
    };
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 3;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
  }
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
 }
 
 function post_process_1pass($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $8 = HEAP32[$0 + 456 >> 2];
  $9 = HEAP32[$8 + 16 >> 2];
  $10 = HEAP32[$5 >> 2];
  HEAP32[$7 + 12 >> 2] = 0;
  $11 = $1;
  $1 = $6 - $10 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] + 4 >> 2]]($0, $11, $2, $3, HEAP32[$8 + 12 >> 2], $7 + 12 | 0, $1 >>> 0 < $9 >>> 0 ? $1 : $9);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 4 >> 2]]($0, HEAP32[$8 + 12 >> 2], (HEAP32[$5 >> 2] << 2) + $4 | 0, HEAP32[$7 + 12 >> 2]);
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + HEAP32[$7 + 12 >> 2];
  __stack_pointer = $7 + 16 | 0;
 }
 
 function post_process_prepass($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $4 = HEAP32[$0 + 456 >> 2];
  $8 = $4 + 24 | 0;
  $6 = HEAP32[$4 + 24 >> 2];
  block : {
   if ($6) {
    $7 = HEAP32[$4 + 12 >> 2];
    break block;
   }
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], 1) | 0;
   HEAP32[$4 + 12 >> 2] = $7;
   $6 = HEAP32[$4 + 24 >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] + 4 >> 2]]($0, $1, $2, $3, $7, $8, HEAP32[$4 + 16 >> 2]);
  $1 = HEAP32[$4 + 24 >> 2];
  if ($1 >>> 0 > $6 >>> 0) {
   $1 = $1 - $6 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 4 >> 2]]($0, HEAP32[$4 + 12 >> 2] + ($6 << 2) | 0, 0, $1);
   HEAP32[$5 >> 2] = $1 + HEAP32[$5 >> 2];
   $1 = HEAP32[$4 + 24 >> 2];
  }
  $0 = HEAP32[$4 + 16 >> 2];
  if ($0 >>> 0 <= $1 >>> 0) {
   HEAP32[$4 + 24 >> 2] = 0;
   HEAP32[$4 + 20 >> 2] = $0 + HEAP32[$4 + 20 >> 2];
  }
 }
 
 function post_process_2pass($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $1 = HEAP32[$0 + 456 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  block : {
   if ($2) {
    $3 = HEAP32[$1 + 12 >> 2];
    break block;
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 28 >> 2]]($0, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], 0) | 0;
   HEAP32[$1 + 12 >> 2] = $3;
   $2 = HEAP32[$1 + 24 >> 2];
  }
  $7 = HEAP32[$1 + 16 >> 2] - $2 | 0;
  $8 = HEAP32[$5 >> 2];
  $6 = $6 - $8 | 0;
  $6 = $6 >>> 0 > $7 >>> 0 ? $7 : $6;
  $7 = HEAP32[$0 + 116 >> 2] - HEAP32[$1 + 20 >> 2] | 0;
  $6 = $6 >>> 0 < $7 >>> 0 ? $6 : $7;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 4 >> 2]]($0, ($2 << 2) + $3 | 0, ($8 << 2) + $4 | 0, $6);
  HEAP32[$5 >> 2] = $6 + HEAP32[$5 >> 2];
  $0 = $6 + HEAP32[$1 + 24 >> 2] | 0;
  HEAP32[$1 + 24 >> 2] = $0;
  $2 = $0;
  $0 = HEAP32[$1 + 16 >> 2];
  if ($2 >>> 0 >= $0 >>> 0) {
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 20 >> 2] = $0 + HEAP32[$1 + 20 >> 2];
  }
 }
 
 function sep_upsample($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $3 = HEAP32[$0 + 476 >> 2];
  $8 = HEAP32[$3 + 92 >> 2];
  $7 = HEAP32[$0 + 320 >> 2];
  if (($8 | 0) >= ($7 | 0)) {
   $9 = HEAP32[$0 + 36 >> 2];
   if (($9 | 0) > 0) {
    $10 = $3 + 12 | 0;
    $11 = $3 + 100 | 0;
    $12 = $3 + 52 | 0;
    $7 = HEAP32[$0 + 216 >> 2];
    $8 = 0;
    while (1) {
     if (HEAP32[$7 + 52 >> 2]) {
      $9 = $8 << 2;
      FUNCTION_TABLE[HEAP32[$9 + $12 >> 2]]($0, $7, HEAP32[$9 + $1 >> 2] + (Math_imul(HEAP32[$9 + $11 >> 2], HEAP32[$2 >> 2]) << 2) | 0, $9 + $10 | 0);
      $9 = HEAP32[$0 + 36 >> 2];
     }
     $7 = $7 + 88 | 0;
     $8 = $8 + 1 | 0;
     if (($9 | 0) > ($8 | 0)) {
      continue
     }
     break;
    };
    $7 = HEAP32[$0 + 320 >> 2];
   }
   HEAP32[$3 + 92 >> 2] = 0;
   $8 = 0;
  }
  $1 = $7 - $8 | 0;
  $7 = HEAP32[$3 + 96 >> 2];
  $1 = $1 >>> 0 < $7 >>> 0 ? $1 : $7;
  $7 = $6;
  $6 = HEAP32[$5 >> 2];
  $7 = $7 - $6 | 0;
  $1 = $1 >>> 0 < $7 >>> 0 ? $1 : $7;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 480 >> 2] + 4 >> 2]]($0, $3 + 12 | 0, $8, ($6 << 2) + $4 | 0, $1);
  HEAP32[$5 >> 2] = $1 + HEAP32[$5 >> 2];
  HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 96 >> 2] - $1;
  $1 = $1 + HEAP32[$3 + 92 >> 2] | 0;
  HEAP32[$3 + 92 >> 2] = $1;
  if (($1 | 0) >= HEAP32[$0 + 320 >> 2]) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1
  }
 }
 
 function start_pass_upsample($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 + 476 >> 2];
  HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 320 >> 2];
  HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 116 >> 2];
 }
 
 function fullsize_upsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  HEAP32[$3 >> 2] = $2;
 }
 
 function h2v1_upsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $1 = HEAP32[$0 + 320 >> 2];
  if (($1 | 0) > 0) {
   $6 = HEAP32[$3 >> 2];
   while (1) {
    $3 = HEAP32[$0 + 112 >> 2];
    if ($3) {
     $4 = $5 << 2;
     $1 = HEAP32[$4 + $6 >> 2];
     $7 = $3 + $1 | 0;
     $3 = HEAP32[$2 + $4 >> 2];
     while (1) {
      $4 = HEAPU8[$3 | 0];
      HEAP8[$1 + 1 | 0] = $4;
      HEAP8[$1 | 0] = $4;
      $3 = $3 + 1 | 0;
      $1 = $1 + 2 | 0;
      if ($7 >>> 0 > $1 >>> 0) {
       continue
      }
      break;
     };
     $1 = HEAP32[$0 + 320 >> 2];
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function h2v2_upsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = HEAP32[$0 + 320 >> 2];
  if (($4 | 0) > 0) {
   $1 = HEAP32[$3 >> 2];
   $6 = $1 + ($4 << 2) | 0;
   while (1) {
    $4 = HEAP32[$0 + 112 >> 2];
    if ($4) {
     $3 = HEAP32[$1 >> 2];
     $7 = $4 + $3 | 0;
     $4 = HEAP32[$2 >> 2];
     while (1) {
      $5 = HEAPU8[$4 | 0];
      HEAP8[$3 + 1 | 0] = $5;
      HEAP8[$3 | 0] = $5;
      $4 = $4 + 1 | 0;
      $3 = $3 + 2 | 0;
      if ($7 >>> 0 > $3 >>> 0) {
       continue
      }
      break;
     };
     $3 = HEAP32[$0 + 112 >> 2];
    } else {
     $3 = 0
    }
    $2 = $2 + 4 | 0;
    jcopy_sample_rows($1, $1 + 4 | 0, 1, $3);
    $1 = $1 + 8 | 0;
    if ($6 >>> 0 > $1 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function int_upsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $4 = HEAP32[$0 + 320 >> 2];
  if (($4 | 0) > 0) {
   $5 = HEAP32[$3 >> 2];
   $7 = $5 + ($4 << 2) | 0;
   $3 = HEAP32[$0 + 476 >> 2] + HEAP32[$1 + 4 >> 2] | 0;
   $1 = HEAPU8[$3 + 140 | 0];
   $6 = HEAPU8[$3 + 150 | 0];
   $8 = $6 - 1 | 0;
   $9 = $6 >>> 0 < 2;
   while (1) {
    $4 = HEAP32[$0 + 112 >> 2];
    if ($4) {
     $3 = HEAP32[$5 >> 2];
     $10 = $4 + $3 | 0;
     $4 = HEAP32[$2 >> 2];
     while (1) {
      if ($1) {
       if ($1) {
        wasm2js_memory_fill($3, HEAPU8[$4 | 0], $1)
       }
       $3 = $1 + $3 | 0;
      }
      $4 = $4 + 1 | 0;
      if ($3 >>> 0 < $10 >>> 0) {
       continue
      }
      break;
     };
    }
    if (!$9) {
     jcopy_sample_rows($5, $5 + 4 | 0, $8, HEAP32[$0 + 112 >> 2])
    }
    $2 = $2 + 4 | 0;
    $5 = ($6 << 2) + $5 | 0;
    if ($7 >>> 0 > $5 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function jpeg_std_error($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 238;
  HEAP32[$0 + 12 >> 2] = 239;
  HEAP32[$0 + 8 >> 2] = 240;
  HEAP32[$0 + 4 >> 2] = 241;
  HEAP32[$0 >> 2] = 242;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 126;
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 51504;
  HEAP32[$0 + 20 >> 2] = 0;
  return $0 | 0;
 }
 
 function reset_error_mgr($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
 }
 
 function format_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  $2 = HEAP32[$0 >> 2];
  $4 = HEAP32[$2 + 20 >> 2];
  block3 : {
   block2 : {
    block1 : {
     if (!(($4 | 0) <= 0 | ($4 | 0) > HEAP32[$2 + 116 >> 2])) {
      $0 = HEAP32[$2 + 112 >> 2] + ($4 << 2) | 0;
      break block1;
     }
     $5 = HEAP32[$2 + 120 >> 2];
     if (!$5) {
      break block2
     }
     $0 = HEAP32[$2 + 124 >> 2];
     if (($0 | 0) > ($4 | 0) | ($4 | 0) > HEAP32[$2 + 128 >> 2]) {
      break block2
     }
     $0 = $5 + ($4 - $0 << 2) | 0;
    }
    $5 = HEAP32[$0 >> 2];
    if ($5) {
     break block3
    }
   }
   HEAP32[$2 + 24 >> 2] = $4;
   $5 = HEAP32[HEAP32[$2 + 112 >> 2] >> 2];
  }
  $0 = $5;
  block5 : {
   block4 : {
    while (1) {
     $4 = HEAPU8[$0 | 0];
     if (!$4) {
      break block4
     }
     $0 = $0 + 1 | 0;
     if (($4 | 0) != 37) {
      continue
     }
     break;
    };
    if (HEAPU8[$0 | 0] != 115) {
     break block4
    }
    HEAP32[$3 + 32 >> 2] = $2 + 24;
    siprintf($1, $5, $3 + 32 | 0);
    break block5;
   }
   $6 = HEAP32[$2 + 24 >> 2];
   $7 = HEAP32[$2 + 28 >> 2];
   $8 = HEAP32[$2 + 32 >> 2];
   $9 = HEAP32[$2 + 36 >> 2];
   $10 = HEAP32[$2 + 40 >> 2];
   $4 = HEAP32[$2 + 44 >> 2];
   $0 = HEAP32[$2 + 52 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$2 + 48 >> 2];
   HEAP32[$3 + 28 >> 2] = $0;
   HEAP32[$3 + 16 >> 2] = $10;
   HEAP32[$3 + 20 >> 2] = $4;
   HEAP32[$3 + 8 >> 2] = $8;
   HEAP32[$3 + 12 >> 2] = $9;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $7;
   siprintf($1, $5, $3);
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function output_message($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 224 | 0;
  __stack_pointer = $1;
  $2 = $1 + 16 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $2);
  HEAP32[$1 >> 2] = $2;
  $2 = HEAP32[14356];
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $1;
  vfiprintf($2, 34148, $1);
  __stack_pointer = $0 + 16 | 0;
  __stack_pointer = $1 + 224 | 0;
 }
 
 function emit_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  if (($1 | 0) < 0) {
   $1 = HEAP32[$2 + 108 >> 2];
   if (!(HEAP32[$2 + 104 >> 2] < 3 ? $1 : 0)) {
    FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0);
    $1 = HEAP32[$2 + 108 >> 2];
   }
   HEAP32[$2 + 108 >> 2] = $1 + 1;
   return;
  }
  if (HEAP32[$2 + 104 >> 2] >= ($1 | 0)) {
   FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0)
  }
 }
 
 function error_exit($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  jpeg_destroy($0);
  exit(1);
  wasm2js_trap();
 }
 
 function jpeg_idct_float($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = 0;
  $21 = __stack_pointer - 256 | 0;
  __stack_pointer = $21;
  $24 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $21;
  $14 = 8;
  while (1) {
   block1 : {
    block : {
     $5 = HEAPU16[$2 + 32 >> 1];
     $22 = HEAPU16[$2 + 16 >> 1];
     if ($5 | $22) {
      break block
     }
     $5 = 0;
     if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
      break block
     }
     if (HEAPU16[$2 + 112 >> 1]) {
      break block
     }
     $7 = Math_fround(HEAPF32[$1 >> 2] * Math_fround(HEAP16[$2 >> 1]));
     HEAPF32[$0 + 192 >> 2] = $7;
     HEAPF32[$0 + 160 >> 2] = $7;
     HEAPF32[$0 + 128 >> 2] = $7;
     HEAPF32[$0 + 96 >> 2] = $7;
     HEAPF32[$0 + 64 >> 2] = $7;
     HEAPF32[$0 + 32 >> 2] = $7;
     HEAPF32[$0 >> 2] = $7;
     $5 = 224;
     break block1;
    }
    $8 = Math_fround(HEAPF32[$1 >> 2] * Math_fround(HEAP16[$2 >> 1]));
    $9 = Math_fround(HEAPF32[$1 + 128 >> 2] * Math_fround(HEAP16[$2 + 64 >> 1]));
    $15 = Math_fround($8 + $9);
    $10 = Math_fround(HEAPF32[$1 + 64 >> 2] * Math_fround($5 << 16 >> 16));
    $11 = Math_fround(HEAPF32[$1 + 192 >> 2] * Math_fround(HEAP16[$2 + 96 >> 1]));
    $7 = Math_fround($10 + $11);
    $12 = Math_fround($15 + $7);
    $13 = Math_fround(HEAPF32[$1 + 96 >> 2] * Math_fround(HEAP16[$2 + 48 >> 1]));
    $16 = Math_fround(HEAPF32[$1 + 160 >> 2] * Math_fround(HEAP16[$2 + 80 >> 1]));
    $17 = Math_fround($13 + $16);
    $18 = Math_fround(HEAPF32[$1 + 32 >> 2] * Math_fround($22 << 16 >> 16));
    $19 = Math_fround(HEAPF32[$1 + 224 >> 2] * Math_fround(HEAP16[$2 + 112 >> 1]));
    $20 = Math_fround($18 + $19);
    $6 = Math_fround($17 + $20);
    HEAPF32[$0 + 224 >> 2] = $12 - $6;
    HEAPF32[$0 >> 2] = $12 + $6;
    $8 = Math_fround($8 - $9);
    $9 = Math_fround(Math_fround(Math_fround($10 - $11) * Math_fround(1.4142135381698608)) - $7);
    $10 = Math_fround($8 + $9);
    $11 = Math_fround($16 - $13);
    $12 = Math_fround($18 - $19);
    $13 = Math_fround(Math_fround($11 + $12) * Math_fround(1.8477590084075928));
    $6 = Math_fround(Math_fround($13 + Math_fround($11 * Math_fround(-2.613126039505005))) - $6);
    HEAPF32[$0 + 192 >> 2] = $10 - $6;
    HEAPF32[$0 + 32 >> 2] = $10 + $6;
    $8 = Math_fround($8 - $9);
    $6 = Math_fround(Math_fround(Math_fround($20 - $17) * Math_fround(1.4142135381698608)) - $6);
    HEAPF32[$0 + 160 >> 2] = $8 - $6;
    HEAPF32[$0 + 64 >> 2] = $8 + $6;
    $7 = Math_fround($15 - $7);
    $6 = Math_fround(Math_fround($13 + Math_fround($12 * Math_fround(-1.0823922157287598))) - $6);
    HEAPF32[$0 + 96 >> 2] = $7 + $6;
    $7 = Math_fround($7 - $6);
    $5 = 128;
   }
   HEAPF32[$5 + $0 >> 2] = $7;
   $2 = $2 + 2 | 0;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $5 = $14 >>> 0 > 1;
   $14 = $14 - 1 | 0;
   if ($5) {
    continue
   }
   break;
  };
  $0 = $24 - 384 | 0;
  $2 = $21;
  $14 = 0;
  while (1) {
   $1 = HEAP32[($14 << 2) + $3 >> 2] + $4 | 0;
   $8 = Math_fround(HEAPF32[$2 >> 2] + Math_fround(512.5));
   $9 = HEAPF32[$2 + 16 >> 2];
   $15 = Math_fround($8 + $9);
   $10 = HEAPF32[$2 + 8 >> 2];
   $11 = HEAPF32[$2 + 24 >> 2];
   $7 = Math_fround($10 + $11);
   $12 = Math_fround($15 + $7);
   $13 = HEAPF32[$2 + 20 >> 2];
   $16 = HEAPF32[$2 + 12 >> 2];
   $17 = Math_fround($13 + $16);
   $18 = HEAPF32[$2 + 4 >> 2];
   $19 = HEAPF32[$2 + 28 >> 2];
   $20 = Math_fround($18 + $19);
   $6 = Math_fround($17 + $20);
   $23 = Math_fround($12 + $6);
   if (Math_fround(Math_abs($23)) < Math_fround(2147483648.0)) {
    $5 = ~~$23
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $12 = Math_fround($12 - $6);
   if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
    $5 = ~~$12
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 7 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $8 = Math_fround($8 - $9);
   $9 = Math_fround(Math_fround(Math_fround($10 - $11) * Math_fround(1.4142135381698608)) - $7);
   $10 = Math_fround($8 + $9);
   $11 = Math_fround($13 - $16);
   $12 = Math_fround($18 - $19);
   $13 = Math_fround(Math_fround($11 + $12) * Math_fround(1.8477590084075928));
   $6 = Math_fround(Math_fround($13 + Math_fround($11 * Math_fround(-2.613126039505005))) - $6);
   $11 = Math_fround($10 + $6);
   if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
    $5 = ~~$11
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 1 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $10 = Math_fround($10 - $6);
   if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
    $5 = ~~$10
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 6 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $8 = Math_fround($8 - $9);
   $6 = Math_fround(Math_fround(Math_fround($20 - $17) * Math_fround(1.4142135381698608)) - $6);
   $9 = Math_fround($8 + $6);
   if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
    $5 = ~~$9
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 2 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $8 = Math_fround($8 - $6);
   if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
    $5 = ~~$8
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 5 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $7 = Math_fround($15 - $7);
   $6 = Math_fround(Math_fround($13 + Math_fround($12 * Math_fround(-1.0823922157287598))) - $6);
   $8 = Math_fround($7 + $6);
   if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
    $5 = ~~$8
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 3 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $7 = Math_fround($7 - $6);
   if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
    $5 = ~~$7
   } else {
    $5 = -2147483648
   }
   HEAP8[$1 + 4 | 0] = HEAPU8[($5 & 1023) + $0 | 0];
   $2 = $2 + 32 | 0;
   $14 = $14 + 1 | 0;
   if (($14 | 0) != 8) {
    continue
   }
   break;
  };
  __stack_pointer = $21 + 256 | 0;
 }
 
 function jpeg_idct_ifast($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $20 = __stack_pointer - 256 | 0;
  __stack_pointer = $20;
  $9 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $20;
  $6 = 8;
  while (1) {
   block1 : {
    block : {
     $7 = HEAPU16[$2 + 32 >> 1];
     $5 = HEAP16[$2 + 16 >> 1];
     if (($7 | $5) & 65535) {
      break block
     }
     $7 = 0;
     if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
      break block
     }
     if (HEAPU16[$2 + 112 >> 1]) {
      break block
     }
     $7 = Math_imul(HEAP32[$1 >> 2], HEAP16[$2 >> 1]);
     HEAP32[$0 + 192 >> 2] = $7;
     HEAP32[$0 + 160 >> 2] = $7;
     HEAP32[$0 + 128 >> 2] = $7;
     HEAP32[$0 + 96 >> 2] = $7;
     HEAP32[$0 + 64 >> 2] = $7;
     HEAP32[$0 + 32 >> 2] = $7;
     HEAP32[$0 >> 2] = $7;
     $5 = 224;
     break block1;
    }
    $8 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
    $11 = Math_imul(HEAP32[$1 + 64 >> 2], $7 << 16 >> 16);
    $7 = $8 + $11 | 0;
    $10 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
    $12 = Math_imul(HEAP32[$1 >> 2], HEAP16[$2 >> 1]);
    $13 = $10 + $12 | 0;
    $14 = $7 + $13 | 0;
    $15 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
    $16 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
    $17 = $15 + $16 | 0;
    $18 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
    $19 = Math_imul($5, HEAP32[$1 + 32 >> 2]);
    $21 = $18 + $19 | 0;
    $5 = $17 + $21 | 0;
    HEAP32[$0 + 224 >> 2] = $14 - $5;
    HEAP32[$0 >> 2] = $5 + $14;
    $8 = (Math_imul($11 - $8 | 0, 362) >> 8) - $7 | 0;
    $11 = $12 - $10 | 0;
    $10 = $8 + $11 | 0;
    $12 = $19 - $18 | 0;
    $14 = $15 - $16 | 0;
    $15 = Math_imul($12 + $14 | 0, 473) >> 8;
    $5 = $15 - ($5 + (Math_imul($14, 669) >> 8) | 0) | 0;
    HEAP32[$0 + 192 >> 2] = $10 - $5;
    HEAP32[$0 + 32 >> 2] = $5 + $10;
    $8 = $11 - $8 | 0;
    $5 = (Math_imul($21 - $17 | 0, 362) >> 8) - $5 | 0;
    HEAP32[$0 + 160 >> 2] = $8 - $5;
    HEAP32[$0 + 64 >> 2] = $5 + $8;
    $5 = $15 - ($5 + (Math_imul($12, 277) >> 8) | 0) | 0;
    $7 = $13 - $7 | 0;
    HEAP32[$0 + 96 >> 2] = $5 + $7;
    $7 = $7 - $5 | 0;
    $5 = 128;
   }
   HEAP32[$5 + $0 >> 2] = $7;
   $2 = $2 + 2 | 0;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $7 = $6 >>> 0 > 1;
   $6 = $6 - 1 | 0;
   if ($7) {
    continue
   }
   break;
  };
  $1 = $9 - 384 | 0;
  $2 = $20;
  $7 = 0;
  while (1) {
   $5 = HEAP32[$2 >> 2] + 16400 | 0;
   $0 = HEAP32[($7 << 2) + $3 >> 2] + $4 | 0;
   block3 : {
    block2 : {
     $6 = HEAP32[$2 + 8 >> 2];
     $9 = HEAP32[$2 + 4 >> 2];
     if ($6 | $9) {
      break block2
     }
     $6 = 0;
     if (HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 16 >> 2] | (HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 24 >> 2])) {
      break block2
     }
     if (HEAP32[$2 + 28 >> 2]) {
      break block2
     }
     $6 = HEAPU8[$1 + ($5 >>> 5 & 1023) | 0];
     HEAP8[$0 + 6 | 0] = $6;
     HEAP8[$0 + 5 | 0] = $6;
     HEAP8[$0 + 4 | 0] = $6;
     HEAP8[$0 + 3 | 0] = $6;
     HEAP8[$0 + 2 | 0] = $6;
     HEAP8[$0 + 1 | 0] = $6;
     HEAP8[$0 | 0] = $6;
     $5 = 7;
     break block3;
    }
    $10 = HEAP32[$2 + 28 >> 2];
    $12 = $10 + $9 | 0;
    $13 = HEAP32[$2 + 12 >> 2];
    $14 = HEAP32[$2 + 20 >> 2];
    $15 = $13 + $14 | 0;
    $8 = $12 + $15 | 0;
    $16 = HEAP32[$2 + 24 >> 2];
    $11 = $16 + $6 | 0;
    $17 = HEAP32[$2 + 16 >> 2];
    $18 = $17 + $5 | 0;
    $19 = $11 + $18 | 0;
    HEAP8[$0 | 0] = HEAPU8[$1 + ($8 + $19 >>> 5 & 1023) | 0];
    HEAP8[$0 + 7 | 0] = HEAPU8[$1 + ($19 - $8 >>> 5 & 1023) | 0];
    $10 = $9 - $10 | 0;
    $9 = $14 - $13 | 0;
    $13 = Math_imul($10 + $9 | 0, 473) >> 8;
    $9 = $13 - ($8 + (Math_imul($9, 669) >> 8) | 0) | 0;
    $8 = (Math_imul($6 - $16 | 0, 362) >> 8) - $11 | 0;
    $5 = $5 - $17 | 0;
    $6 = $8 + $5 | 0;
    HEAP8[$0 + 1 | 0] = HEAPU8[$1 + ($9 + $6 >>> 5 & 1023) | 0];
    HEAP8[$0 + 6 | 0] = HEAPU8[$1 + ($6 - $9 >>> 5 & 1023) | 0];
    $6 = (Math_imul($12 - $15 | 0, 362) >> 8) - $9 | 0;
    $5 = $5 - $8 | 0;
    HEAP8[$0 + 2 | 0] = HEAPU8[$1 + ($6 + $5 >>> 5 & 1023) | 0];
    HEAP8[$0 + 5 | 0] = HEAPU8[$1 + ($5 - $6 >>> 5 & 1023) | 0];
    $6 = $13 - ($6 + (Math_imul($10, 277) >> 8) | 0) | 0;
    $5 = $18 - $11 | 0;
    HEAP8[$0 + 3 | 0] = HEAPU8[$1 + ($6 + $5 >>> 5 & 1023) | 0];
    $6 = HEAPU8[$1 + ($5 - $6 >>> 5 & 1023) | 0];
    $5 = 4;
   }
   HEAP8[$5 + $0 | 0] = $6;
   $2 = $2 + 32 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != 8) {
    continue
   }
   break;
  };
  __stack_pointer = $20 + 256 | 0;
 }
 
 function jpeg_idct_islow($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $21 = __stack_pointer - 256 | 0;
  __stack_pointer = $21;
  $15 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $21;
  $6 = 8;
  while (1) {
   block1 : {
    block : {
     $5 = HEAPU16[$2 + 32 >> 1];
     $7 = HEAP16[$2 + 16 >> 1];
     if (($5 | $7) & 65535) {
      break block
     }
     $5 = 0;
     if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
      break block
     }
     if (HEAPU16[$2 + 112 >> 1]) {
      break block
     }
     $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 2;
     HEAP32[$0 + 192 >> 2] = $5;
     HEAP32[$0 + 160 >> 2] = $5;
     HEAP32[$0 + 128 >> 2] = $5;
     HEAP32[$0 + 96 >> 2] = $5;
     HEAP32[$0 + 64 >> 2] = $5;
     HEAP32[$0 + 32 >> 2] = $5;
     HEAP32[$0 >> 2] = $5;
     $8 = 224;
     break block1;
    }
    $13 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
    $9 = Math_imul(HEAP32[$1 + 64 >> 2], $5 << 16 >> 16);
    $5 = Math_imul($13 + $9 | 0, 4433);
    $7 = Math_imul($7, HEAP32[$1 + 32 >> 2]);
    $10 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
    $16 = Math_imul($7 + $10 | 0, -7373);
    $17 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
    $8 = $17 + $7 | 0;
    $11 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
    $12 = $11 + $10 | 0;
    $14 = Math_imul($8 + $12 | 0, 9633);
    $9 = $5 + Math_imul($9, 6270) | 0;
    $18 = Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$1 + 128 >> 2]) << 13;
    $19 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
    $20 = $18 + $19 | 0;
    $22 = $9 + $20 | 0;
    $23 = $16 + Math_imul($7, 12299) | 0;
    $7 = $14 + Math_imul($8, -3196) | 0;
    $8 = $23 + $7 | 0;
    HEAP32[$0 + 224 >> 2] = $22 - $8 >> 11;
    HEAP32[$0 >> 2] = $8 + $22 >> 11;
    $5 = $5 + Math_imul($13, -15137) | 0;
    $13 = $19 - $18 | 0;
    $8 = $5 + $13 | 0;
    $14 = $14 + Math_imul($12, -16069) | 0;
    $12 = Math_imul($11, 25172);
    $11 = Math_imul($11 + $17 | 0, -20995);
    $12 = $14 + ($12 + $11 | 0) | 0;
    HEAP32[$0 + 192 >> 2] = $8 - $12 >> 11;
    HEAP32[$0 + 32 >> 2] = $8 + $12 >> 11;
    $5 = $13 - $5 | 0;
    $7 = $7 + ($11 + Math_imul($17, 16819) | 0) | 0;
    HEAP32[$0 + 160 >> 2] = $5 - $7 >> 11;
    HEAP32[$0 + 64 >> 2] = $5 + $7 >> 11;
    $5 = $14 + ($16 + Math_imul($10, 2446) | 0) | 0;
    $7 = $20 - $9 | 0;
    HEAP32[$0 + 96 >> 2] = $5 + $7 >> 11;
    $5 = $7 - $5 >> 11;
    $8 = 128;
   }
   HEAP32[$8 + $0 >> 2] = $5;
   $2 = $2 + 2 | 0;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $5 = $6 >>> 0 > 1;
   $6 = $6 - 1 | 0;
   if ($5) {
    continue
   }
   break;
  };
  $1 = $15 - 384 | 0;
  $2 = $21;
  $7 = 0;
  while (1) {
   $6 = HEAP32[$2 >> 2] + 16400 | 0;
   $0 = HEAP32[($7 << 2) + $3 >> 2] + $4 | 0;
   block3 : {
    block2 : {
     $5 = HEAP32[$2 + 8 >> 2];
     $10 = HEAP32[$2 + 4 >> 2];
     if ($5 | $10) {
      break block2
     }
     $5 = 0;
     if (HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 16 >> 2] | (HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 24 >> 2])) {
      break block2
     }
     if (HEAP32[$2 + 28 >> 2]) {
      break block2
     }
     $6 = HEAPU8[$1 + ($6 >>> 5 & 1023) | 0];
     HEAP8[$0 + 6 | 0] = $6;
     HEAP8[$0 + 5 | 0] = $6;
     HEAP8[$0 + 4 | 0] = $6;
     HEAP8[$0 + 3 | 0] = $6;
     HEAP8[$0 + 2 | 0] = $6;
     HEAP8[$0 + 1 | 0] = $6;
     HEAP8[$0 | 0] = $6;
     $5 = 7;
     break block3;
    }
    $16 = HEAP32[$2 + 28 >> 2];
    $17 = Math_imul($10 + $16 | 0, -7373);
    $11 = HEAP32[$2 + 12 >> 2];
    $13 = $11 + $16 | 0;
    $14 = HEAP32[$2 + 20 >> 2];
    $9 = $14 + $10 | 0;
    $15 = Math_imul($13 + $9 | 0, 9633);
    $8 = $17 + Math_imul($10, 12299) | 0;
    $10 = $15 + Math_imul($9, -3196) | 0;
    $9 = $8 + $10 | 0;
    $12 = Math_imul($5, 6270);
    $8 = $5;
    $5 = HEAP32[$2 + 24 >> 2];
    $8 = Math_imul($8 + $5 | 0, 4433);
    $12 = $12 + $8 | 0;
    $18 = HEAP32[$2 + 16 >> 2];
    $19 = $18 + $6 << 13;
    $20 = $12 + $19 | 0;
    HEAP8[$0 | 0] = HEAPU8[$1 + ($9 + $20 >>> 18 & 1023) | 0];
    HEAP8[$0 + 7 | 0] = HEAPU8[$1 + ($20 - $9 >>> 18 & 1023) | 0];
    $15 = $15 + Math_imul($13, -16069) | 0;
    $9 = Math_imul($11, 25172);
    $11 = Math_imul($11 + $14 | 0, -20995);
    $13 = $15 + ($9 + $11 | 0) | 0;
    $5 = $8 + Math_imul($5, -15137) | 0;
    $6 = $6 - $18 << 13;
    $9 = $5 + $6 | 0;
    HEAP8[$0 + 1 | 0] = HEAPU8[$1 + ($13 + $9 >>> 18 & 1023) | 0];
    HEAP8[$0 + 6 | 0] = HEAPU8[$1 + ($9 - $13 >>> 18 & 1023) | 0];
    $10 = $10 + ($11 + Math_imul($14, 16819) | 0) | 0;
    $5 = $6 - $5 | 0;
    HEAP8[$0 + 2 | 0] = HEAPU8[$1 + ($10 + $5 >>> 18 & 1023) | 0];
    HEAP8[$0 + 5 | 0] = HEAPU8[$1 + ($5 - $10 >>> 18 & 1023) | 0];
    $5 = $15 + ($17 + Math_imul($16, 2446) | 0) | 0;
    $6 = $19 - $12 | 0;
    HEAP8[$0 + 3 | 0] = HEAPU8[$1 + ($5 + $6 >>> 18 & 1023) | 0];
    $6 = HEAPU8[$1 + ($6 - $5 >>> 18 & 1023) | 0];
    $5 = 4;
   }
   HEAP8[$5 + $0 | 0] = $6;
   $2 = $2 + 32 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != 8) {
    continue
   }
   break;
  };
  __stack_pointer = $21 + 256 | 0;
 }
 
 function jpeg_idct_7x7($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $19 = __stack_pointer - 208 | 0;
  __stack_pointer = $19;
  $16 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $1 = $19;
  while (1) {
   $8 = HEAP32[$0 + 160 >> 2];
   $7 = HEAP16[$2 + 80 >> 1];
   $14 = HEAP32[$0 + 32 >> 2];
   $12 = HEAP16[$2 + 16 >> 1];
   $17 = HEAP32[$0 + 96 >> 2];
   $13 = HEAP16[$2 + 48 >> 1];
   $9 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $10 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $5 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $6 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $15 = $5 + $6 | 0;
   HEAP32[$1 + 84 >> 2] = $9 + Math_imul($10 - $15 | 0, 11585) >> 11;
   $8 = Math_imul($7, $8);
   $7 = Math_imul($14, $12);
   $14 = Math_imul($8 + $7 | 0, 5027);
   $15 = $9 + Math_imul($15, 10438) | 0;
   $12 = Math_imul($10 - $5 | 0, 7223);
   $11 = $15 + ($12 + Math_imul($5, -637) | 0) | 0;
   $5 = Math_imul($13, $17);
   $17 = Math_imul($5 + $7 | 0, 7663);
   $7 = Math_imul($7 - $5 | 0, 1395);
   $13 = $14 + ($17 - $7 | 0) | 0;
   HEAP32[$1 + 168 >> 2] = $11 - $13 >> 11;
   HEAP32[$1 >> 2] = $13 + $11 >> 11;
   $11 = Math_imul($6, -20239);
   $6 = Math_imul($6 - $10 | 0, 2578);
   $13 = $15 + ($11 + $6 | 0) | 0;
   $5 = Math_imul($5 + $8 | 0, -11295);
   $8 = $5 + ($14 + Math_imul($8, 15326) | 0) | 0;
   HEAP32[$1 + 112 >> 2] = $13 - $8 >> 11;
   HEAP32[$1 + 56 >> 2] = $8 + $13 >> 11;
   $10 = $12 + ($6 + ($9 + Math_imul($10, -15083) | 0) | 0) | 0;
   $5 = $5 + ($7 + $17 | 0) | 0;
   HEAP32[$1 + 140 >> 2] = $10 - $5 >> 11;
   HEAP32[$1 + 28 >> 2] = $5 + $10 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $18 = $18 + 1 | 0;
   if (($18 | 0) != 7) {
    continue
   }
   break;
  };
  $0 = $16 - 384 | 0;
  $2 = $19;
  $10 = 0;
  while (1) {
   $5 = HEAP32[$2 + 16 >> 2];
   $6 = HEAP32[$2 + 24 >> 2];
   $9 = Math_imul($5 - $6 | 0, 7223);
   $1 = HEAP32[($10 << 2) + $3 >> 2] + $4 | 0;
   $8 = HEAP32[$2 + 12 >> 2];
   $7 = HEAP32[$2 + 4 >> 2];
   $16 = Math_imul($8 + $7 | 0, 7663);
   $12 = Math_imul($7 - $8 | 0, 1395);
   $11 = $7;
   $7 = HEAP32[$2 + 20 >> 2];
   $17 = Math_imul($11 + $7 | 0, 5027);
   $13 = ($16 - $12 | 0) + $17 | 0;
   $18 = $9 + Math_imul($6, -637) | 0;
   $14 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
   $11 = $6;
   $6 = HEAP32[$2 + 8 >> 2];
   $15 = $11 + $6 | 0;
   $11 = $14 + Math_imul($15, 10438) | 0;
   $18 = $18 + $11 | 0;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($13 + $18 >>> 18 & 1023) | 0];
   HEAP8[$1 + 6 | 0] = HEAPU8[$0 + ($18 - $13 >>> 18 & 1023) | 0];
   $8 = Math_imul($7 + $8 | 0, -11295);
   $16 = $8 + ($12 + $16 | 0) | 0;
   $12 = Math_imul($6 - $5 | 0, 2578);
   $9 = $9 + ($12 + ($14 + Math_imul($5, -15083) | 0) | 0) | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($16 + $9 >>> 18 & 1023) | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[$0 + ($9 - $16 >>> 18 & 1023) | 0];
   $9 = $8 + ($17 + Math_imul($7, 15326) | 0) | 0;
   $6 = $11 + ($12 + Math_imul($6, -20239) | 0) | 0;
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($9 + $6 >>> 18 & 1023) | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[$0 + ($6 - $9 >>> 18 & 1023) | 0];
   HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($14 + Math_imul($5 - $15 | 0, 11585) >>> 18 & 1023) | 0];
   $2 = $2 + 28 | 0;
   $10 = $10 + 1 | 0;
   if (($10 | 0) != 7) {
    continue
   }
   break;
  };
  __stack_pointer = $19 + 208 | 0;
 }
 
 function jpeg_idct_6x6($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $15 = __stack_pointer - 144 | 0;
  __stack_pointer = $15;
  $16 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $1 = $15;
  while (1) {
   $6 = HEAP32[$0 + 64 >> 2];
   $10 = HEAP16[$2 + 32 >> 1];
   $8 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $9 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $13 = $8 + Math_imul($9, -11586) >> 11;
   $5 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $7 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $11 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $14 = $5 - ($7 + $11 | 0) << 2;
   HEAP32[$1 + 96 >> 2] = $13 - $14;
   HEAP32[$1 + 24 >> 2] = $13 + $14;
   $6 = Math_imul(Math_imul($6, $10), 10033);
   $10 = $8 + Math_imul($9, 5793) | 0;
   $9 = $6 + $10 | 0;
   $8 = $5 + $7 << 13;
   $5 = Math_imul($5 + $11 | 0, 2998);
   $8 = $8 + $5 | 0;
   HEAP32[$1 + 120 >> 2] = $9 - $8 >> 11;
   HEAP32[$1 >> 2] = $9 + $8 >> 11;
   $6 = $10 - $6 | 0;
   $5 = $5 + ($11 - $7 << 13) | 0;
   HEAP32[$1 + 72 >> 2] = $6 - $5 >> 11;
   HEAP32[$1 + 48 >> 2] = $5 + $6 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != 6) {
    continue
   }
   break;
  };
  $0 = $16 - 384 | 0;
  $2 = $15;
  $12 = 0;
  while (1) {
   $1 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
   $7 = HEAP32[$2 + 4 >> 2];
   $16 = Math_imul($5 + $7 | 0, 2998);
   $11 = HEAP32[$2 + 12 >> 2];
   $6 = $16 + ($11 + $7 << 13) | 0;
   $9 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
   $10 = HEAP32[$2 + 16 >> 2];
   $8 = $9 + Math_imul($10, 5793) | 0;
   $13 = Math_imul(HEAP32[$2 + 8 >> 2], 10033);
   $14 = $8 + $13 | 0;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($6 + $14 >>> 18 & 1023) | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[$0 + ($14 - $6 >>> 18 & 1023) | 0];
   $7 = $7 - ($5 + $11 | 0) << 13;
   $6 = $9 + Math_imul($10, -11586) | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($7 + $6 >>> 18 & 1023) | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[$0 + ($6 - $7 >>> 18 & 1023) | 0];
   $5 = ($5 - $11 << 13) + $16 | 0;
   $7 = $8 - $13 | 0;
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($5 + $7 >>> 18 & 1023) | 0];
   HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($7 - $5 >>> 18 & 1023) | 0];
   $2 = $2 + 24 | 0;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != 6) {
    continue
   }
   break;
  };
  __stack_pointer = $15 + 144 | 0;
 }
 
 function jpeg_idct_5x5($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $11 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $8 = __stack_pointer - 112 | 0;
  $1 = $8;
  while (1) {
   $6 = HEAP32[$0 + 96 >> 2];
   $7 = HEAP16[$2 + 48 >> 1];
   $5 = HEAP32[$0 + 32 >> 2];
   $12 = HEAP16[$2 + 16 >> 1];
   $14 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $9 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $10 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $15 = $9 - $10 | 0;
   HEAP32[$1 + 40 >> 2] = $14 + Math_imul($15, -11584) >> 11;
   $7 = Math_imul($6, $7);
   $5 = Math_imul($5, $12);
   $6 = Math_imul($7 + $5 | 0, 6810);
   $12 = $14 + Math_imul($15, 2896) | 0;
   $9 = Math_imul($9 + $10 | 0, 6476);
   $10 = $12 + $9 | 0;
   $5 = $6 + Math_imul($5, 4209) | 0;
   HEAP32[$1 + 80 >> 2] = $10 - $5 >> 11;
   HEAP32[$1 >> 2] = $5 + $10 >> 11;
   $5 = $12 - $9 | 0;
   $6 = $6 + Math_imul($7, -17828) | 0;
   HEAP32[$1 + 60 >> 2] = $5 - $6 >> 11;
   HEAP32[$1 + 20 >> 2] = $5 + $6 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $13 = $13 + 1 | 0;
   if (($13 | 0) != 5) {
    continue
   }
   break;
  };
  $0 = $11 - 384 | 0;
  $2 = $8;
  $13 = 0;
  while (1) {
   $6 = HEAP32[$2 + 12 >> 2];
   $11 = HEAP32[$2 + 4 >> 2];
   $8 = Math_imul($6 + $11 | 0, 6810);
   $1 = HEAP32[($13 << 2) + $3 >> 2] + $4 | 0;
   $11 = $8 + Math_imul($11, 4209) | 0;
   $9 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
   $7 = HEAP32[$2 + 8 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $12 = $7 - $5 | 0;
   $10 = $9 + Math_imul($12, 2896) | 0;
   $7 = Math_imul($5 + $7 | 0, 6476);
   $5 = $10 + $7 | 0;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($11 + $5 >>> 18 & 1023) | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[$0 + ($5 - $11 >>> 18 & 1023) | 0];
   $8 = $8 + Math_imul($6, -17828) | 0;
   $6 = $10 - $7 | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($8 + $6 >>> 18 & 1023) | 0];
   HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($6 - $8 >>> 18 & 1023) | 0];
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($9 + Math_imul($12, 268423872) >>> 18 & 1023) | 0];
   $2 = $2 + 20 | 0;
   $13 = $13 + 1 | 0;
   if (($13 | 0) != 5) {
    continue
   }
   break;
  };
 }
 
 function jpeg_idct_4x4($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $11 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $6 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $5 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $8 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $7 = Math_imul($5 + $8 | 0, 4433) + 1024 | 0;
  $0 = __stack_pointer + -64 | 0;
  $9 = Math_imul(HEAP32[$1 >> 2], HEAP16[$2 >> 1]);
  $10 = $9 + $6 << 2;
  $8 = $7 + Math_imul($8, 6270) >> 11;
  HEAP32[$0 + 48 >> 2] = $10 - $8;
  HEAP32[$0 >> 2] = $8 + $10;
  $6 = $9 - $6 << 2;
  $7 = $7 + Math_imul($5, -15137) >> 11;
  HEAP32[$0 + 32 >> 2] = $6 - $7;
  HEAP32[$0 + 16 >> 2] = $6 + $7;
  $7 = Math_imul(HEAP32[$1 + 100 >> 2], HEAP16[$2 + 50 >> 1]);
  $5 = Math_imul(HEAP32[$1 + 36 >> 2], HEAP16[$2 + 18 >> 1]);
  $6 = Math_imul($7 + $5 | 0, 4433) + 1024 | 0;
  $8 = Math_imul(HEAP32[$1 + 68 >> 2], HEAP16[$2 + 34 >> 1]);
  $9 = Math_imul(HEAP32[$1 + 4 >> 2], HEAP16[$2 + 2 >> 1]);
  $10 = $8 + $9 << 2;
  $5 = $6 + Math_imul($5, 6270) >> 11;
  HEAP32[$0 + 52 >> 2] = $10 - $5;
  HEAP32[$0 + 4 >> 2] = $5 + $10;
  $5 = $9 - $8 << 2;
  $6 = $6 + Math_imul($7, -15137) >> 11;
  HEAP32[$0 + 36 >> 2] = $5 - $6;
  HEAP32[$0 + 20 >> 2] = $6 + $5;
  $7 = Math_imul(HEAP32[$1 + 104 >> 2], HEAP16[$2 + 52 >> 1]);
  $5 = Math_imul(HEAP32[$1 + 40 >> 2], HEAP16[$2 + 20 >> 1]);
  $6 = Math_imul($7 + $5 | 0, 4433) + 1024 | 0;
  $8 = Math_imul(HEAP32[$1 + 72 >> 2], HEAP16[$2 + 36 >> 1]);
  $9 = Math_imul(HEAP32[$1 + 8 >> 2], HEAP16[$2 + 4 >> 1]);
  $10 = $8 + $9 << 2;
  $5 = $6 + Math_imul($5, 6270) >> 11;
  HEAP32[$0 + 56 >> 2] = $10 - $5;
  HEAP32[$0 + 8 >> 2] = $5 + $10;
  $5 = $9 - $8 << 2;
  $6 = $6 + Math_imul($7, -15137) >> 11;
  HEAP32[$0 + 40 >> 2] = $5 - $6;
  HEAP32[$0 + 24 >> 2] = $6 + $5;
  $7 = Math_imul(HEAP32[$1 + 108 >> 2], HEAP16[$2 + 54 >> 1]);
  $5 = Math_imul(HEAP32[$1 + 44 >> 2], HEAP16[$2 + 22 >> 1]);
  $6 = Math_imul($7 + $5 | 0, 4433) + 1024 | 0;
  $8 = Math_imul(HEAP32[$1 + 76 >> 2], HEAP16[$2 + 38 >> 1]);
  $1 = Math_imul(HEAP32[$1 + 12 >> 2], HEAP16[$2 + 6 >> 1]);
  $2 = $8 + $1 << 2;
  $5 = $6 + Math_imul($5, 6270) >> 11;
  HEAP32[$0 + 60 >> 2] = $2 - $5;
  HEAP32[$0 + 12 >> 2] = $2 + $5;
  $1 = $1 - $8 << 2;
  $2 = $6 + Math_imul($7, -15137) >> 11;
  HEAP32[$0 + 44 >> 2] = $1 - $2;
  HEAP32[$0 + 28 >> 2] = $1 + $2;
  $6 = $11 - 384 | 0;
  $2 = $0;
  $1 = 0;
  while (1) {
   $11 = HEAP32[$2 + 12 >> 2];
   $5 = HEAP32[$2 + 4 >> 2];
   $7 = Math_imul($11 + $5 | 0, 4433);
   $0 = HEAP32[($1 << 2) + $3 >> 2] + $4 | 0;
   $5 = $7 + Math_imul($5, 6270) | 0;
   $8 = HEAP32[$2 >> 2] + 16400 | 0;
   $9 = HEAP32[$2 + 8 >> 2];
   $10 = $8 + $9 << 13;
   HEAP8[$0 | 0] = HEAPU8[($5 + $10 >>> 18 & 1023) + $6 | 0];
   HEAP8[$0 + 3 | 0] = HEAPU8[($10 - $5 >>> 18 & 1023) + $6 | 0];
   $7 = $7 + Math_imul($11, -15137) | 0;
   $11 = $8 - $9 << 13;
   HEAP8[$0 + 1 | 0] = HEAPU8[($7 + $11 >>> 18 & 1023) + $6 | 0];
   HEAP8[$0 + 2 | 0] = HEAPU8[($11 - $7 >>> 18 & 1023) + $6 | 0];
   $2 = $2 + 16 | 0;
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 4) {
    continue
   }
   break;
  };
 }
 
 function jpeg_idct_3x3($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $5 = HEAP32[$3 >> 2] + $4 | 0;
  $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
  $1 = HEAP32[$1 + 84 >> 2];
  $8 = Math_imul(Math_imul(HEAP16[$2 + 16 >> 1], HEAP32[$1 + 32 >> 2]), 10033);
  $6 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $7 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $9 = $6 + Math_imul($7, 5793) | 0;
  $10 = ($8 + $9 << 2 & -8192) + 134348800 | 0;
  $11 = Math_imul(Math_imul(HEAP16[$2 + 20 >> 1], HEAP32[$1 + 40 >> 2]), 10033);
  $12 = Math_imul(HEAP16[$2 + 4 >> 1], HEAP32[$1 + 8 >> 2]) << 13 | 1024;
  $13 = Math_imul(HEAP32[$1 + 72 >> 2], HEAP16[$2 + 36 >> 1]);
  $14 = $12 + Math_imul($13, 5793) | 0;
  $15 = $11 + $14 >> 11;
  $16 = $10 + Math_imul($15, 5793) | 0;
  $17 = Math_imul(Math_imul(HEAP16[$2 + 18 >> 1], HEAP32[$1 + 36 >> 2]), 10033);
  $18 = Math_imul(HEAP16[$2 + 2 >> 1], HEAP32[$1 + 4 >> 2]) << 13 | 1024;
  $2 = Math_imul(HEAP32[$1 + 68 >> 2], HEAP16[$2 + 34 >> 1]);
  $19 = $18 + Math_imul($2, 5793) | 0;
  $1 = Math_imul($17 + $19 >> 11, 10033);
  HEAP8[$5 | 0] = HEAPU8[$0 + ($16 + $1 >>> 18 & 1023) | 0];
  HEAP8[$5 + 2 | 0] = HEAPU8[$0 + ($16 - $1 >>> 18 & 1023) | 0];
  HEAP8[$5 + 1 | 0] = HEAPU8[$0 + (Math_imul($15, 268423870) + $10 >>> 18 & 1023) | 0];
  $1 = HEAP32[$3 + 4 >> 2] + $4 | 0;
  $7 = ($6 + Math_imul($7, 1073730238) << 2 & -8192) + 134348800 | 0;
  $5 = Math_imul($13, -11586) + $12 >> 11;
  $6 = $7 + Math_imul($5, 5793) | 0;
  $2 = Math_imul(Math_imul($2, -11586) + $18 >> 11, 10033);
  HEAP8[$1 | 0] = HEAPU8[$0 + ($6 + $2 >>> 18 & 1023) | 0];
  HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($6 - $2 >>> 18 & 1023) | 0];
  HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($7 + Math_imul($5, 268423870) >>> 18 & 1023) | 0];
  $1 = HEAP32[$3 + 8 >> 2] + $4 | 0;
  $3 = ($9 - $8 << 2 & -8192) + 134348800 | 0;
  $2 = $14 - $11 >> 11;
  $4 = $3 + Math_imul($2, 5793) | 0;
  $5 = Math_imul($19 - $17 >> 11, 10033);
  HEAP8[$1 | 0] = HEAPU8[$0 + ($4 + $5 >>> 18 & 1023) | 0];
  HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($4 - $5 >>> 18 & 1023) | 0];
  HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($3 + Math_imul($2, 268423870) >>> 18 & 1023) | 0];
 }
 
 function jpeg_idct_2x2($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $5 = HEAP32[$3 >> 2] + $4 | 0;
  $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
  $1 = HEAP32[$1 + 84 >> 2];
  $6 = Math_imul(HEAP32[$1 + 36 >> 2], HEAPU16[$2 + 18 >> 1]);
  $7 = Math_imul(HEAP32[$1 + 4 >> 2], HEAPU16[$2 + 2 >> 1]);
  $8 = $6 + $7 | 0;
  $9 = Math_imul(HEAP32[$1 + 32 >> 2], HEAPU16[$2 + 16 >> 1]);
  $1 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]) + 4100 | 0;
  $2 = $9 + $1 | 0;
  HEAP8[$5 | 0] = HEAPU8[$0 + ($8 + $2 >>> 3 & 1023) | 0];
  HEAP8[$5 + 1 | 0] = HEAPU8[$0 + ($2 - $8 >>> 3 & 1023) | 0];
  $2 = HEAP32[$3 + 4 >> 2] + $4 | 0;
  $3 = $7 - $6 | 0;
  $1 = $1 - $9 | 0;
  HEAP8[$2 | 0] = HEAPU8[$0 + ($3 + $1 >>> 3 & 1023) | 0];
  HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($1 - $3 >>> 3 & 1023) | 0];
 }
 
 function jpeg_idct_1x1($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP8[HEAP32[$3 >> 2] + $4 | 0] = HEAPU8[(HEAP32[$0 + 336 >> 2] + (Math_imul(HEAP32[HEAP32[$1 + 84 >> 2] >> 2], HEAPU16[$2 >> 1]) + 4100 >>> 3 & 1023) | 0) - 384 | 0];
 }
 
 function jpeg_idct_9x9($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $20 = __stack_pointer - 288 | 0;
  __stack_pointer = $20;
  $16 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $20;
  while (1) {
   $9 = HEAP32[$1 + 96 >> 2];
   $8 = HEAP16[$2 + 48 >> 1];
   $10 = HEAP32[$1 + 160 >> 2];
   $7 = HEAP16[$2 + 80 >> 1];
   $14 = HEAP32[$1 + 224 >> 2];
   $12 = HEAP16[$2 + 112 >> 1];
   $13 = HEAP32[$1 + 32 >> 2];
   $21 = HEAP16[$2 + 16 >> 1];
   $17 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $11 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $18 = $17 + Math_imul($11, -11586) | 0;
   $6 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $5 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $19 = $6 - $5 | 0;
   HEAP32[$0 + 128 >> 2] = $18 + Math_imul($19, -11586) >> 11;
   $22 = Math_imul($5 + $6 | 0, 10887);
   $23 = Math_imul($5, 2012);
   $5 = $17 + Math_imul($11, 5793) | 0;
   $11 = ($22 - $23 | 0) + $5 | 0;
   $10 = Math_imul($7, $10);
   $7 = Math_imul($13, $21);
   $13 = Math_imul($10 + $7 | 0, 7447);
   $9 = Math_imul(Math_imul($8, $9), -10033);
   $8 = Math_imul($12, $14);
   $14 = Math_imul($8 + $7 | 0, 3962);
   $12 = ($13 - $9 | 0) + $14 | 0;
   HEAP32[$0 + 256 >> 2] = $11 - $12 >> 11;
   HEAP32[$0 >> 2] = $12 + $11 >> 11;
   $12 = $18 + Math_imul($19, 5793) | 0;
   $7 = Math_imul($7 - ($8 + $10 | 0) | 0, 10033);
   HEAP32[$0 + 224 >> 2] = $12 - $7 >> 11;
   HEAP32[$0 + 32 >> 2] = $7 + $12 >> 11;
   $6 = Math_imul($6, 8875);
   $7 = $6 + ($5 - $22 | 0) | 0;
   $10 = Math_imul($10 - $8 | 0, 11409);
   $8 = $13 + ($9 - $10 | 0) | 0;
   HEAP32[$0 + 192 >> 2] = $7 - $8 >> 11;
   HEAP32[$0 + 64 >> 2] = $7 + $8 >> 11;
   $6 = ($5 - $6 | 0) + $23 | 0;
   $5 = $14 + ($9 + $10 | 0) | 0;
   HEAP32[$0 + 160 >> 2] = $6 - $5 >> 11;
   HEAP32[$0 + 96 >> 2] = $5 + $6 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $15 = $15 + 1 | 0;
   if (($15 | 0) != 8) {
    continue
   }
   break;
  };
  $1 = $16 - 384 | 0;
  $0 = $20;
  $15 = 0;
  while (1) {
   $2 = HEAP32[($15 << 2) + $3 >> 2] + $4 | 0;
   $6 = HEAP32[$0 + 20 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $14 = Math_imul($6 + $5 | 0, 7447);
   $10 = Math_imul(HEAP32[$0 + 12 >> 2], -10033);
   $7 = HEAP32[$0 + 28 >> 2];
   $12 = Math_imul($7 + $5 | 0, 3962);
   $13 = ($14 - $10 | 0) + $12 | 0;
   $17 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
   $11 = HEAP32[$0 + 24 >> 2];
   $16 = $17 + Math_imul($11, 5793) | 0;
   $9 = HEAP32[$0 + 16 >> 2];
   $8 = HEAP32[$0 + 8 >> 2];
   $21 = Math_imul($9 + $8 | 0, 10887);
   $19 = Math_imul($9, 2012);
   $18 = $16 + ($21 - $19 | 0) | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + ($13 + $18 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$1 + ($18 - $13 >>> 18 & 1023) | 0];
   $5 = Math_imul($5 - ($7 + $6 | 0) | 0, 10033);
   $13 = $17 + Math_imul($11, -11586) | 0;
   $9 = $8 - $9 | 0;
   $11 = $13 + Math_imul($9, 5793) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + ($5 + $11 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$1 + ($11 - $5 >>> 18 & 1023) | 0];
   $6 = Math_imul($6 - $7 | 0, 11409);
   $5 = $14 + ($10 - $6 | 0) | 0;
   $7 = Math_imul($8, 8875);
   $8 = $7 + ($16 - $21 | 0) | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + ($5 + $8 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$1 + ($8 - $5 >>> 18 & 1023) | 0];
   $6 = $12 + ($6 + $10 | 0) | 0;
   $5 = $19 + ($16 - $7 | 0) | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + ($6 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[$1 + ($5 - $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 4 | 0] = HEAPU8[$1 + ($13 + Math_imul($9, 268423870) >>> 18 & 1023) | 0];
   $0 = $0 + 32 | 0;
   $15 = $15 + 1 | 0;
   if (($15 | 0) != 9) {
    continue
   }
   break;
  };
  __stack_pointer = $20 + 288 | 0;
 }
 
 function jpeg_idct_10x10($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $21 = __stack_pointer - 320 | 0;
  __stack_pointer = $21;
  $18 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $21;
  while (1) {
   $7 = HEAP32[$1 + 192 >> 2];
   $11 = HEAP16[$2 + 96 >> 1];
   $12 = HEAP32[$1 + 64 >> 2];
   $19 = HEAP16[$2 + 32 >> 1];
   $6 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $5 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $10 = $6 + Math_imul($5, -11586) >> 11;
   $8 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $14 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $13 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $15 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $9 = $13 - $15 | 0;
   $16 = $8 - ($14 + $9 | 0) << 2;
   HEAP32[$0 + 224 >> 2] = $10 - $16;
   HEAP32[$0 + 64 >> 2] = $10 + $16;
   $11 = Math_imul($7, $11);
   $12 = Math_imul($12, $19);
   $7 = Math_imul($11 + $12 | 0, 6810);
   $12 = $7 + Math_imul($12, 4209) | 0;
   $19 = $6 + Math_imul($5, 9373) | 0;
   $10 = $12 + $19 | 0;
   $14 = $14 << 13;
   $16 = $14 + Math_imul($9, 2531) | 0;
   $13 = $13 + $15 | 0;
   $15 = Math_imul($13, 7791);
   $17 = $16 + ($15 + Math_imul($8, 11443) | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $10 - $17 >> 11;
   HEAP32[$0 >> 2] = $10 + $17 >> 11;
   $5 = $6 + Math_imul($5, -3580) | 0;
   $6 = $7 + Math_imul($11, -17828) | 0;
   $7 = $5 - $6 | 0;
   $9 = $14 + Math_imul($9, -6627) | 0;
   $11 = Math_imul($13, 4815);
   $10 = $9 + (Math_imul($8, 5260) - $11 | 0) | 0;
   HEAP32[$0 + 192 >> 2] = $7 - $10 >> 11;
   HEAP32[$0 + 96 >> 2] = $7 + $10 >> 11;
   $7 = $19 - $12 | 0;
   $12 = $16 + (Math_imul($8, 1812) - $15 | 0) | 0;
   HEAP32[$0 + 160 >> 2] = $7 - $12 >> 11;
   HEAP32[$0 + 128 >> 2] = $7 + $12 >> 11;
   $5 = $5 + $6 | 0;
   $8 = Math_imul($8, 10323) - ($9 + $11 | 0) | 0;
   HEAP32[$0 + 256 >> 2] = $5 - $8 >> 11;
   HEAP32[$0 + 32 >> 2] = $5 + $8 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $20 = $20 + 1 | 0;
   if (($20 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $18 - 384 | 0;
  $2 = $21;
  $20 = 0;
  while (1) {
   $18 = HEAP32[$2 + 24 >> 2];
   $9 = HEAP32[$2 + 8 >> 2];
   $5 = Math_imul($18 + $9 | 0, 6810);
   $1 = HEAP32[($20 << 2) + $3 >> 2] + $4 | 0;
   $6 = HEAP32[$2 + 28 >> 2];
   $7 = HEAP32[$2 + 12 >> 2];
   $11 = $6 + $7 | 0;
   $12 = Math_imul($11, 7791);
   $8 = HEAP32[$2 + 4 >> 2];
   $19 = HEAP32[$2 + 20 >> 2];
   $10 = $19 << 13;
   $6 = $7 - $6 | 0;
   $14 = $10 + Math_imul($6, 2531) | 0;
   $13 = ($12 + Math_imul($8, 11443) | 0) + $14 | 0;
   $15 = $5 + Math_imul($9, 4209) | 0;
   $7 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
   $9 = HEAP32[$2 + 16 >> 2];
   $16 = $7 + Math_imul($9, 9373) | 0;
   $17 = $15 + $16 | 0;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($13 + $17 >>> 18 & 1023) | 0];
   HEAP8[$1 + 9 | 0] = HEAPU8[$0 + ($17 - $13 >>> 18 & 1023) | 0];
   $11 = Math_imul($11, 4815);
   $10 = $10 + Math_imul($6, -6627) | 0;
   $13 = Math_imul($8, 10323) - ($11 + $10 | 0) | 0;
   $5 = $5 + Math_imul($18, -17828) | 0;
   $18 = $7 + Math_imul($9, -3580) | 0;
   $17 = $5 + $18 | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($13 + $17 >>> 18 & 1023) | 0];
   HEAP8[$1 + 8 | 0] = HEAPU8[$0 + ($17 - $13 >>> 18 & 1023) | 0];
   $6 = $8 - ($6 + $19 | 0) << 13;
   $9 = $7 + Math_imul($9, -11586) | 0;
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($6 + $9 >>> 18 & 1023) | 0];
   HEAP8[$1 + 7 | 0] = HEAPU8[$0 + ($9 - $6 >>> 18 & 1023) | 0];
   $6 = $10 + (Math_imul($8, 5260) - $11 | 0) | 0;
   $5 = $18 - $5 | 0;
   HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($6 + $5 >>> 18 & 1023) | 0];
   HEAP8[$1 + 6 | 0] = HEAPU8[$0 + ($5 - $6 >>> 18 & 1023) | 0];
   $8 = $14 + (Math_imul($8, 1812) - $12 | 0) | 0;
   $5 = $16 - $15 | 0;
   HEAP8[$1 + 4 | 0] = HEAPU8[$0 + ($8 + $5 >>> 18 & 1023) | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[$0 + ($5 - $8 >>> 18 & 1023) | 0];
   $2 = $2 + 32 | 0;
   $20 = $20 + 1 | 0;
   if (($20 | 0) != 10) {
    continue
   }
   break;
  };
  __stack_pointer = $21 + 320 | 0;
 }
 
 function jpeg_idct_11x11($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $22 = __stack_pointer - 352 | 0;
  __stack_pointer = $22;
  $23 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $22;
  while (1) {
   $8 = HEAP32[$1 + 224 >> 2];
   $16 = HEAP16[$2 + 112 >> 1];
   $7 = HEAP32[$1 + 96 >> 2];
   $10 = HEAP16[$2 + 48 >> 1];
   $11 = HEAP32[$1 + 160 >> 2];
   $12 = HEAP16[$2 + 80 >> 1];
   $5 = HEAP32[$1 + 32 >> 2];
   $15 = HEAP16[$2 + 16 >> 1];
   $6 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $13 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $19 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $14 = $13 + $19 | 0;
   $9 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $20 = $14 - $9 | 0;
   HEAP32[$0 + 160 >> 2] = $6 + Math_imul($20, -11585) >> 11;
   $7 = Math_imul($7, $10);
   $5 = Math_imul($5, $15);
   $17 = $7 + $5 | 0;
   $15 = Math_imul($17, 7274);
   $10 = Math_imul($11, $12);
   $11 = Math_imul($10 + $5 | 0, 5492);
   $8 = Math_imul($8, $16);
   $16 = Math_imul($8 + ($10 + $17 | 0) | 0, 3264);
   $12 = $6 + Math_imul($20, 11116) | 0;
   $20 = Math_imul($9 - $13 | 0, 20862);
   $6 = ($12 + $20 | 0) + Math_imul($13, 17333) | 0;
   $17 = $11 + ($15 + Math_imul($5, -7562) | 0) | 0;
   $5 = $16 + Math_imul($8 + $5 | 0, 3e3) | 0;
   $17 = $17 + $5 | 0;
   HEAP32[$0 + 320 >> 2] = $6 - $17 >> 11;
   HEAP32[$0 >> 2] = $6 + $17 >> 11;
   $6 = Math_imul($13, -6461);
   $13 = $12 + Math_imul($14, -9467) | 0;
   $14 = $6 + $13 | 0;
   $6 = $11 + Math_imul($10, -9766) | 0;
   $11 = $16 + Math_imul($7 + $10 | 0, -9527) | 0;
   $6 = $6 + $11 | 0;
   HEAP32[$0 + 256 >> 2] = $14 - $6 >> 11;
   HEAP32[$0 + 64 >> 2] = $14 + $6 >> 11;
   $12 = $12 + Math_imul($9 - $19 | 0, 3529) | 0;
   $14 = $12 + Math_imul($19, -12399) | 0;
   $6 = $5;
   $5 = Math_imul($8 + $7 | 0, -14731);
   $6 = $6 + ($5 + Math_imul($8, 17223) | 0) | 0;
   HEAP32[$0 + 224 >> 2] = $14 - $6 >> 11;
   HEAP32[$0 + 96 >> 2] = $14 + $6 >> 11;
   $13 = $13 + (Math_imul($9, 15929) + Math_imul($19, -11395) | 0) | 0;
   $10 = $16 + ((Math_imul($10, 8203) + Math_imul($7, -12019) | 0) + Math_imul($8, -13802) | 0) | 0;
   HEAP32[$0 + 192 >> 2] = $13 - $10 >> 11;
   HEAP32[$0 + 128 >> 2] = $10 + $13 >> 11;
   $9 = $20 + ($12 + Math_imul($9, -14924) | 0) | 0;
   $7 = $11 + ($5 + ($15 + Math_imul($7, 16984) | 0) | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $9 - $7 >> 11;
   HEAP32[$0 + 32 >> 2] = $7 + $9 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $18 = $18 + 1 | 0;
   if (($18 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $23 - 384 | 0;
  $1 = $22;
  $13 = 0;
  while (1) {
   $9 = HEAP32[$1 + 12 >> 2];
   $8 = HEAP32[$1 + 4 >> 2];
   $2 = $9 + $8 | 0;
   $15 = Math_imul($2, 7274);
   $7 = HEAP32[$1 + 20 >> 2];
   $11 = Math_imul($7 + $8 | 0, 5492);
   $10 = HEAP32[$1 + 28 >> 2];
   $19 = Math_imul($10 + ($2 + $7 | 0) | 0, 3264);
   $2 = HEAP32[($13 << 2) + $3 >> 2] + $4 | 0;
   $23 = $19 + Math_imul($8 + $10 | 0, 3e3) | 0;
   $14 = $23 + (($15 + Math_imul($8, -7562) | 0) + $11 | 0) | 0;
   $17 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $5 = HEAP32[$1 + 24 >> 2];
   $16 = HEAP32[$1 + 8 >> 2];
   $20 = $5 + $16 | 0;
   $8 = HEAP32[$1 + 16 >> 2];
   $6 = $20 - $8 | 0;
   $12 = $17 + Math_imul($6, 11116) | 0;
   $18 = Math_imul($8 - $5 | 0, 20862);
   $21 = ($12 + $18 | 0) + Math_imul($5, 17333) | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($14 + $21 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($21 - $14 >>> 18 & 1023) | 0];
   $14 = $12 + Math_imul($8 - $16 | 0, 3529) | 0;
   $18 = ($14 + Math_imul($8, -14924) | 0) + $18 | 0;
   $21 = $19 + Math_imul($7 + $9 | 0, -9527) | 0;
   $24 = $15 + Math_imul($9, 16984) | 0;
   $15 = Math_imul($10 + $9 | 0, -14731);
   $24 = $21 + ($24 + $15 | 0) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($18 + $24 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($18 - $24 >>> 18 & 1023) | 0];
   $11 = $21 + (Math_imul($7, -9766) + $11 | 0) | 0;
   $18 = Math_imul($5, -6461);
   $5 = $12 + Math_imul($20, -9467) | 0;
   $12 = $18 + $5 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($11 + $12 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($12 - $11 >>> 18 & 1023) | 0];
   $15 = $23 + ($15 + Math_imul($10, 17223) | 0) | 0;
   $11 = $14 + Math_imul($16, -12399) | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($15 + $11 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($11 - $15 >>> 18 & 1023) | 0];
   $9 = $19 + ((Math_imul($7, 8203) + Math_imul($9, -12019) | 0) + Math_imul($10, -13802) | 0) | 0;
   $7 = $5 + (Math_imul($8, 15929) + Math_imul($16, -11395) | 0) | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($9 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($7 - $9 >>> 18 & 1023) | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($17 + Math_imul($6, 268423871) >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $13 = $13 + 1 | 0;
   if (($13 | 0) != 11) {
    continue
   }
   break;
  };
  __stack_pointer = $22 + 352 | 0;
 }
 
 function jpeg_idct_12x12($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $22 = __stack_pointer - 384 | 0;
  __stack_pointer = $22;
  $15 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $22;
  while (1) {
   $18 = HEAP32[$1 + 128 >> 2];
   $11 = HEAP16[$2 + 64 >> 1];
   $14 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $9 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $8 = $14 - $9 | 0;
   $12 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $10 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $6 = $12 - $10 | 0;
   $7 = Math_imul($8 + $6 | 0, 4433);
   $13 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $16 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $19 = $13 - $16 << 13;
   $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $20 = $19 + $5 | 0;
   $8 = $7 + Math_imul($8, 6270) | 0;
   HEAP32[$0 + 320 >> 2] = $20 - $8 >> 11;
   HEAP32[$0 + 32 >> 2] = $8 + $20 >> 11;
   $8 = $5 - $19 | 0;
   $7 = $7 + Math_imul($6, -15137) | 0;
   HEAP32[$0 + 224 >> 2] = $8 - $7 >> 11;
   HEAP32[$0 + 128 >> 2] = $7 + $8 >> 11;
   $18 = Math_imul(Math_imul($11, $18), 10033);
   $11 = $18 + $5 | 0;
   $8 = $16 << 13;
   $6 = $8 + Math_imul($13, 11190) | 0;
   $16 = $11 - $6 | 0;
   $20 = $10 + $14 | 0;
   $7 = Math_imul($20 + $9 | 0, 7053);
   $19 = Math_imul($12, -4433);
   $21 = $7 + (($19 + Math_imul($14, -5540) | 0) + Math_imul($9, -16244) | 0) | 0;
   HEAP32[$0 + 192 >> 2] = $16 - $21 >> 11;
   HEAP32[$0 + 160 >> 2] = $16 + $21 >> 11;
   $11 = $6 + $11 | 0;
   $6 = Math_imul($14, 2295);
   $14 = Math_imul($12, 10703);
   $12 = $7 + Math_imul($20, 2139) | 0;
   $6 = ($6 + $14 | 0) + $12 | 0;
   HEAP32[$0 + 352 >> 2] = $11 - $6 >> 11;
   HEAP32[$0 >> 2] = $6 + $11 >> 11;
   $13 = Math_imul($13, 2998) - $8 | 0;
   $5 = $5 - $18 | 0;
   $18 = $13 + $5 | 0;
   $8 = $19 + Math_imul($10, -12112) | 0;
   $10 = Math_imul($9 + $10 | 0, -8565);
   $12 = $12 + ($8 + $10 | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $18 - $12 >> 11;
   HEAP32[$0 + 64 >> 2] = $12 + $18 >> 11;
   $5 = $5 - $13 | 0;
   $9 = $10 + ($7 + (Math_imul($9, 12998) - $14 | 0) | 0) | 0;
   HEAP32[$0 + 256 >> 2] = $5 - $9 >> 11;
   HEAP32[$0 + 96 >> 2] = $5 + $9 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $17 = $17 + 1 | 0;
   if (($17 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $15 - 384 | 0;
  $1 = $22;
  $14 = 0;
  while (1) {
   $10 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = $10 + $5 | 0;
   $9 = HEAP32[$1 + 28 >> 2];
   $12 = Math_imul($7 + $9 | 0, 7053);
   $2 = HEAP32[($14 << 2) + $3 >> 2] + $4 | 0;
   $11 = $12 + Math_imul($7, 2139) | 0;
   $13 = HEAP32[$1 + 12 >> 2];
   $18 = Math_imul($13, 10703);
   $8 = $11 + ($18 + Math_imul($10, 2295) | 0) | 0;
   $6 = HEAP32[$1 + 24 >> 2];
   $16 = $6 << 13;
   $15 = HEAP32[$1 + 8 >> 2];
   $19 = $16 + Math_imul($15, 11190) | 0;
   $7 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $20 = Math_imul(HEAP32[$1 + 16 >> 2], 10033);
   $21 = $7 + $20 | 0;
   $17 = $19 + $21 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($8 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($17 - $8 >>> 18 & 1023) | 0];
   $8 = $15 - $6 << 13;
   $6 = $8 + $7 | 0;
   $17 = $10 - $9 | 0;
   $23 = $13 - $5 | 0;
   $24 = Math_imul($17 + $23 | 0, 4433);
   $17 = $24 + Math_imul($17, 6270) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($6 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($6 - $17 >>> 18 & 1023) | 0];
   $13 = Math_imul($13, -4433);
   $6 = $13 + Math_imul($5, -12112) | 0;
   $5 = Math_imul($5 + $9 | 0, -8565);
   $11 = ($6 + $5 | 0) + $11 | 0;
   $15 = Math_imul($15, 2998) - $16 | 0;
   $6 = $7 - $20 | 0;
   $16 = $15 + $6 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($11 + $16 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($16 - $11 >>> 18 & 1023) | 0];
   $5 = $5 + ($12 + (Math_imul($9, 12998) - $18 | 0) | 0) | 0;
   $15 = $6 - $15 | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($5 + $15 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($15 - $5 >>> 18 & 1023) | 0];
   $5 = Math_imul($23, -15137) + $24 | 0;
   $7 = $7 - $8 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($5 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($7 - $5 >>> 18 & 1023) | 0];
   $9 = $12 + (($13 + Math_imul($10, -5540) | 0) + Math_imul($9, -16244) | 0) | 0;
   $10 = $21 - $19 | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($9 + $10 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($10 - $9 >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $14 = $14 + 1 | 0;
   if (($14 | 0) != 12) {
    continue
   }
   break;
  };
  __stack_pointer = $22 + 384 | 0;
 }
 
 function jpeg_idct_13x13($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $25 = __stack_pointer - 416 | 0;
  __stack_pointer = $25;
  $20 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $25;
  while (1) {
   $15 = HEAP32[$1 + 224 >> 2];
   $11 = HEAP16[$2 + 112 >> 1];
   $6 = HEAP32[$1 + 96 >> 2];
   $8 = HEAP16[$2 + 48 >> 1];
   $18 = HEAP32[$1 + 160 >> 2];
   $19 = HEAP16[$2 + 80 >> 1];
   $7 = HEAP32[$1 + 32 >> 2];
   $9 = HEAP16[$2 + 16 >> 1];
   $12 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $5 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $14 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $13 = $5 - $14 | 0;
   $10 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   HEAP32[$0 + 192 >> 2] = $12 + Math_imul($13 - $10 | 0, 11585) >> 11;
   $6 = Math_imul($6, $8);
   $7 = Math_imul($7, $9);
   $9 = Math_imul($6 + $7 | 0, 10832);
   $16 = $12 + Math_imul($13, 793) | 0;
   $5 = $5 + $14 | 0;
   $14 = Math_imul($5, 9465);
   $21 = $16 + ($14 + Math_imul($10, 11249) | 0) | 0;
   $8 = Math_imul($18, $19);
   $18 = Math_imul($8 + $7 | 0, 9534);
   $15 = Math_imul($15, $11);
   $11 = $15 + $7 | 0;
   $19 = Math_imul($11, 7682);
   $17 = ($18 + ($9 + Math_imul($7, -16549) | 0) | 0) + $19 | 0;
   HEAP32[$0 + 384 >> 2] = $21 - $17 >> 11;
   HEAP32[$0 >> 2] = $17 + $21 >> 11;
   $17 = $12 + Math_imul($13, 3989) | 0;
   $21 = Math_imul($5, 2592);
   $23 = $17 + (Math_imul($10, 8672) - $21 | 0) | 0;
   $24 = Math_imul($6 + $8 | 0, -2773);
   $22 = $24 + ($9 + Math_imul($6, 6859) | 0) | 0;
   $9 = Math_imul($6 + $15 | 0, -9534);
   $22 = $22 + $9 | 0;
   HEAP32[$0 + 352 >> 2] = $23 - $22 >> 11;
   HEAP32[$0 + 32 >> 2] = $23 + $22 >> 11;
   $14 = $16 + (Math_imul($10, 4108) - $14 | 0) | 0;
   $16 = $18 + (Math_imul($8, -12879) + $24 | 0) | 0;
   $18 = Math_imul($8 + $15 | 0, -5384);
   $16 = $16 + $18 | 0;
   HEAP32[$0 + 320 >> 2] = $14 - $16 >> 11;
   HEAP32[$0 + 64 >> 2] = $14 + $16 >> 11;
   $13 = $12 + Math_imul($13, -7678) | 0;
   $5 = Math_imul($5, 3570);
   $12 = $13 + (Math_imul($10, -1396) - $5 | 0) | 0;
   $9 = $18 + ($19 + ($9 + Math_imul($15, 18068) | 0) | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $12 - $9 >> 11;
   HEAP32[$0 + 96 >> 2] = $9 + $12 >> 11;
   $13 = $13 + ($5 + Math_imul($10, -6581) | 0) | 0;
   $5 = Math_imul($7, 2611);
   $7 = Math_imul($11, 2773) + Math_imul($8 - $6 | 0, 7682) | 0;
   $6 = ($5 + $7 | 0) + Math_imul($6, -3818) | 0;
   HEAP32[$0 + 256 >> 2] = $13 - $6 >> 11;
   HEAP32[$0 + 128 >> 2] = $6 + $13 >> 11;
   $10 = $17 + ($21 + Math_imul($10, -10258) | 0) | 0;
   $6 = ($7 + Math_imul($8, 3150) | 0) + Math_imul($15, -14273) | 0;
   HEAP32[$0 + 224 >> 2] = $10 - $6 >> 11;
   HEAP32[$0 + 160 >> 2] = $6 + $10 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $26 = $26 + 1 | 0;
   if (($26 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $20 - 384 | 0;
  $1 = $25;
  $13 = 0;
  while (1) {
   $6 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$1 + 4 >> 2];
   $5 = Math_imul($6 + $7 | 0, 10832);
   $2 = HEAP32[($13 << 2) + $3 >> 2] + $4 | 0;
   $15 = HEAP32[$1 + 28 >> 2];
   $18 = $15 + $7 | 0;
   $19 = Math_imul($18, 7682);
   $8 = HEAP32[$1 + 20 >> 2];
   $11 = Math_imul($8 + $7 | 0, 9534);
   $14 = $19 + ($11 + ($5 + Math_imul($7, -16549) | 0) | 0) | 0;
   $12 = HEAP32[$1 + 24 >> 2];
   $9 = HEAP32[$1 + 16 >> 2];
   $20 = $12 + $9 | 0;
   $16 = Math_imul($20, 9465);
   $10 = HEAP32[$1 + 8 >> 2];
   $12 = $9 - $12 | 0;
   $9 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $21 = Math_imul($12, 793) + $9 | 0;
   $17 = ($16 + Math_imul($10, 11249) | 0) + $21 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($14 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 12 | 0] = HEAPU8[$0 + ($17 - $14 >>> 18 & 1023) | 0];
   $14 = Math_imul($6 + $15 | 0, -9534);
   $17 = $5 + Math_imul($6, 6859) | 0;
   $5 = Math_imul($6 + $8 | 0, -2773);
   $17 = $14 + ($17 + $5 | 0) | 0;
   $24 = $9 + Math_imul($12, 3989) | 0;
   $23 = Math_imul($20, 2592);
   $22 = $24 + (Math_imul($10, 8672) - $23 | 0) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($17 + $22 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($22 - $17 >>> 18 & 1023) | 0];
   $11 = $11 + ($5 + Math_imul($8, -12879) | 0) | 0;
   $5 = Math_imul($8 + $15 | 0, -5384);
   $11 = $11 + $5 | 0;
   $16 = $21 + (Math_imul($10, 4108) - $16 | 0) | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($11 + $16 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($16 - $11 >>> 18 & 1023) | 0];
   $5 = $5 + ($19 + ($14 + Math_imul($15, 18068) | 0) | 0) | 0;
   $11 = $9 + Math_imul($12, -7678) | 0;
   $20 = Math_imul($20, 3570);
   $19 = $11 + (Math_imul($10, -1396) - $20 | 0) | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($5 + $19 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($19 - $5 >>> 18 & 1023) | 0];
   $5 = Math_imul($7, 2611);
   $7 = Math_imul($18, 2773) + Math_imul($8 - $6 | 0, 7682) | 0;
   $6 = ($5 + $7 | 0) + Math_imul($6, -3818) | 0;
   $5 = $11 + ($20 + Math_imul($10, -6581) | 0) | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($6 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($5 - $6 >>> 18 & 1023) | 0];
   $6 = ($7 + Math_imul($8, 3150) | 0) + Math_imul($15, -14273) | 0;
   $8 = $24 + ($23 + Math_imul($10, -10258) | 0) | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($6 + $8 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($8 - $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($9 + Math_imul($12 - $10 | 0, 11585) >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $13 = $13 + 1 | 0;
   if (($13 | 0) != 13) {
    continue
   }
   break;
  };
  __stack_pointer = $25 + 416 | 0;
 }
 
 function jpeg_idct_14x14($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  $24 = __stack_pointer - 448 | 0;
  __stack_pointer = $24;
  $19 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $24;
  while (1) {
   $9 = HEAP32[$1 + 192 >> 2];
   $13 = HEAP16[$2 + 96 >> 1];
   $8 = HEAP32[$1 + 64 >> 2];
   $10 = HEAP16[$2 + 32 >> 1];
   $14 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $15 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $11 = $14 + Math_imul($15, -11586) >> 11;
   $7 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $12 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $5 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $20 = $12 - $5 | 0;
   $6 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $16 = $7 + ($20 - $6 | 0) << 2;
   HEAP32[$0 + 320 >> 2] = $11 - $16;
   HEAP32[$0 + 96 >> 2] = $11 + $16;
   $13 = Math_imul($9, $13);
   $8 = Math_imul($8, $10);
   $10 = Math_imul($13 + $8 | 0, 9058);
   $11 = $10 + Math_imul($13, -14084) | 0;
   $16 = $14 + Math_imul($15, 2578) | 0;
   $17 = $11 + $16 | 0;
   $9 = $7 << 13;
   $7 = Math_imul($5 + $6 | 0, -1297) - $9 | 0;
   $23 = Math_imul($5 + $12 | 0, 10935);
   $21 = $7 + ($23 + Math_imul($5, -3474) | 0) | 0;
   HEAP32[$0 + 384 >> 2] = $17 - $21 >> 11;
   HEAP32[$0 + 32 >> 2] = $17 + $21 >> 11;
   $13 = Math_imul($13, -11295) + Math_imul($8, 5027) | 0;
   $17 = $14 + Math_imul($15, -7223) | 0;
   $21 = $13 + $17 | 0;
   $18 = $7;
   $7 = $6 + $12 | 0;
   $22 = Math_imul($7, 9810);
   $18 = $18 + ($22 + Math_imul($6, -19447) | 0) | 0;
   HEAP32[$0 + 352 >> 2] = $21 - $18 >> 11;
   HEAP32[$0 + 64 >> 2] = $21 + $18 >> 11;
   $11 = $16 - $11 | 0;
   $20 = Math_imul($20, 3826) - $9 | 0;
   $18 = Math_imul($5, 5529);
   $5 = Math_imul($6 - $5 | 0, 11512);
   $16 = $20 + ($18 + $5 | 0) | 0;
   HEAP32[$0 + 256 >> 2] = $11 - $16 >> 11;
   HEAP32[$0 + 160 >> 2] = $11 + $16 >> 11;
   $15 = $14 + Math_imul($15, 10438) | 0;
   $14 = $10 + Math_imul($8, 2237) | 0;
   $8 = $15 - $14 | 0;
   $10 = Math_imul($7, 6164);
   $11 = $20 + ($10 + Math_imul($12, -8693) | 0) | 0;
   HEAP32[$0 + 224 >> 2] = $8 - $11 >> 11;
   HEAP32[$0 + 192 >> 2] = $8 + $11 >> 11;
   $15 = $15 + $14 | 0;
   $12 = $9 + ($22 + ($23 + Math_imul($12, -9232) | 0) | 0) | 0;
   HEAP32[$0 + 416 >> 2] = $15 - $12 >> 11;
   HEAP32[$0 >> 2] = $12 + $15 >> 11;
   $12 = $17 - $13 | 0;
   $5 = $9 + ($10 + ($5 + Math_imul($6, -13850) | 0) | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $12 - $5 >> 11;
   HEAP32[$0 + 128 >> 2] = $5 + $12 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $25 = $25 + 1 | 0;
   if (($25 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $19 - 384 | 0;
  $1 = $24;
  $15 = 0;
  while (1) {
   $5 = HEAP32[$1 + 12 >> 2];
   $12 = HEAP32[$1 + 4 >> 2];
   $8 = Math_imul($5 + $12 | 0, 10935);
   $10 = HEAP32[$1 + 24 >> 2];
   $19 = HEAP32[$1 + 8 >> 2];
   $11 = Math_imul($10 + $19 | 0, 9058);
   $2 = HEAP32[($15 << 2) + $3 >> 2] + $4 | 0;
   $16 = HEAP32[$1 + 28 >> 2];
   $14 = $16 << 13;
   $6 = HEAP32[$1 + 20 >> 2];
   $20 = $6 + $12 | 0;
   $7 = Math_imul($20, 9810);
   $17 = $14 + ($7 + ($8 + Math_imul($12, -9232) | 0) | 0) | 0;
   $23 = $11 + Math_imul($19, 2237) | 0;
   $13 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $9 = HEAP32[$1 + 16 >> 2];
   $21 = $13 + Math_imul($9, 10438) | 0;
   $22 = $23 + $21 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($17 + $22 >>> 18 & 1023) | 0];
   HEAP8[$2 + 13 | 0] = HEAPU8[$0 + ($22 - $17 >>> 18 & 1023) | 0];
   $18 = $8 + Math_imul($5, -3474) | 0;
   $8 = Math_imul($5 + $6 | 0, -1297) - $14 | 0;
   $17 = $18 + $8 | 0;
   $11 = $11 + Math_imul($10, -14084) | 0;
   $22 = $13 + Math_imul($9, 2578) | 0;
   $18 = $11 + $22 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($17 + $18 >>> 18 & 1023) | 0];
   HEAP8[$2 + 12 | 0] = HEAPU8[$0 + ($18 - $17 >>> 18 & 1023) | 0];
   $8 = $8 + ($7 + Math_imul($6, -19447) | 0) | 0;
   $10 = Math_imul($10, -11295) + Math_imul($19, 5027) | 0;
   $19 = $13 + Math_imul($9, -7223) | 0;
   $7 = $10 + $19 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($8 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($7 - $8 >>> 18 & 1023) | 0];
   $8 = $12 - $5 | 0;
   $7 = $16 + ($8 - $6 | 0) << 13;
   $9 = $13 + Math_imul($9, -11586) | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($7 + $9 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($9 - $7 >>> 18 & 1023) | 0];
   $9 = Math_imul($20, 6164);
   $7 = $14 + Math_imul($6, -13850) | 0;
   $6 = Math_imul($6 - $5 | 0, 11512);
   $13 = $9 + ($7 + $6 | 0) | 0;
   $10 = $19 - $10 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($13 + $10 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($10 - $13 >>> 18 & 1023) | 0];
   $7 = $6 + Math_imul($5, 5529) | 0;
   $5 = Math_imul($8, 3826) - $14 | 0;
   $6 = $7 + $5 | 0;
   $14 = $22 - $11 | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($6 + $14 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($14 - $6 >>> 18 & 1023) | 0];
   $5 = $5 + ($9 + Math_imul($12, -8693) | 0) | 0;
   $6 = $21 - $23 | 0;
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($5 + $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($6 - $5 >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $15 = $15 + 1 | 0;
   if (($15 | 0) != 14) {
    continue
   }
   break;
  };
  __stack_pointer = $24 + 448 | 0;
 }
 
 function jpeg_idct_15x15($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  $29 = __stack_pointer - 480 | 0;
  __stack_pointer = $29;
  $18 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $29;
  while (1) {
   $12 = HEAP32[$1 + 160 >> 2];
   $13 = HEAP16[$2 + 80 >> 1];
   $7 = HEAP32[$1 + 32 >> 2];
   $6 = HEAP16[$2 + 16 >> 1];
   $10 = HEAP32[$1 + 224 >> 2];
   $11 = HEAP16[$2 + 112 >> 1];
   $16 = HEAP32[$1 + 96 >> 2];
   $8 = HEAP16[$2 + 48 >> 1];
   $9 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $17 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $19 = $9 + Math_imul($17, -11586) | 0;
   $15 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $14 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $5 = $15 - $14 | 0;
   HEAP32[$0 + 224 >> 2] = $19 + Math_imul($5, -11584) >> 11;
   $24 = Math_imul($12, $13);
   $12 = Math_imul($24, 10033);
   $7 = Math_imul($7, $6);
   $6 = Math_imul($10, $11);
   $25 = $7 - $6 | 0;
   $13 = $12 + Math_imul($25, 11522) | 0;
   $11 = $9 + Math_imul($17, 9373) | 0;
   $20 = Math_imul($5, 374);
   $10 = $15 + $14 | 0;
   $14 = Math_imul($10, 10958);
   $21 = $11 + ($20 + $14 | 0) | 0;
   $16 = Math_imul($8, $16);
   $8 = Math_imul($16, -11018);
   $22 = $13 + (Math_imul($6, 20131) - $8 | 0) | 0;
   HEAP32[$0 + 448 >> 2] = $21 - $22 >> 11;
   HEAP32[$0 >> 2] = $21 + $22 >> 11;
   $17 = $9 + Math_imul($17, -3580) | 0;
   $21 = Math_imul($5, 2896);
   $22 = Math_imul($10, 6476);
   $9 = $17 + ($21 + $22 | 0) | 0;
   $26 = $16 - $6 | 0;
   $27 = Math_imul($26 + $7 | 0, 6810);
   $28 = $27 + Math_imul($7, 4209) | 0;
   HEAP32[$0 + 416 >> 2] = $9 - $28 >> 11;
   HEAP32[$0 + 32 >> 2] = $9 + $28 >> 11;
   $9 = $19 + Math_imul($5, 5792) | 0;
   $19 = Math_imul($25 - $24 | 0, 10033);
   HEAP32[$0 + 384 >> 2] = $9 - $19 >> 11;
   HEAP32[$0 + 64 >> 2] = $9 + $19 >> 11;
   $5 = Math_imul($5, -3271);
   $9 = Math_imul($10, 4482);
   $10 = $11 + ($5 - $9 | 0) | 0;
   $8 = ($8 + $12 | 0) + Math_imul($6, -7121) | 0;
   $6 = Math_imul($7 + $6 | 0, 4712);
   $8 = $8 + $6 | 0;
   HEAP32[$0 + 288 >> 2] = $10 - $8 >> 11;
   HEAP32[$0 + 160 >> 2] = $10 + $8 >> 11;
   $15 = Math_imul($15, 11795);
   $10 = $17 + ($20 + ($15 - $14 | 0) | 0) | 0;
   $16 = Math_imul($16, -6810);
   $6 = $6 + (($16 + Math_imul($7, 3897) | 0) - $12 | 0) | 0;
   HEAP32[$0 + 352 >> 2] = $10 - $6 >> 11;
   HEAP32[$0 + 96 >> 2] = $6 + $10 >> 11;
   $6 = $21 + ($11 - $22 | 0) | 0;
   $12 = $27 + Math_imul($26, -17828) | 0;
   HEAP32[$0 + 320 >> 2] = $6 - $12 >> 11;
   HEAP32[$0 + 128 >> 2] = $6 + $12 >> 11;
   $5 = $17 + ($5 + ($9 - $15 | 0) | 0) | 0;
   $7 = $13 + ($16 + Math_imul($7, -9113) | 0) | 0;
   HEAP32[$0 + 256 >> 2] = $5 - $7 >> 11;
   HEAP32[$0 + 192 >> 2] = $7 + $5 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $23 = $23 + 1 | 0;
   if (($23 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $18 - 384 | 0;
  $1 = $29;
  $23 = 0;
  while (1) {
   $14 = HEAP32[$1 + 20 >> 2];
   $15 = Math_imul($14, 10033);
   $7 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$1 + 28 >> 2];
   $8 = $7 - $5 | 0;
   $17 = $15 + Math_imul($8, 11522) | 0;
   $2 = HEAP32[($23 << 2) + $3 >> 2] + $4 | 0;
   $9 = HEAP32[$1 + 12 >> 2];
   $19 = Math_imul($9, -11018);
   $18 = $17 + (Math_imul($5, 20131) - $19 | 0) | 0;
   $11 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $10 = HEAP32[$1 + 24 >> 2];
   $16 = $11 + Math_imul($10, 9373) | 0;
   $12 = HEAP32[$1 + 8 >> 2];
   $13 = HEAP32[$1 + 16 >> 2];
   $6 = $12 - $13 | 0;
   $25 = Math_imul($6, 374);
   $13 = $12 + $13 | 0;
   $24 = Math_imul($13, 10958);
   $20 = $16 + ($25 + $24 | 0) | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($18 + $20 >>> 18 & 1023) | 0];
   HEAP8[$2 + 14 | 0] = HEAPU8[$0 + ($20 - $18 >>> 18 & 1023) | 0];
   $20 = $9 - $5 | 0;
   $21 = Math_imul($20 + $7 | 0, 6810);
   $22 = $21 + Math_imul($7, 4209) | 0;
   $18 = $11 + Math_imul($10, -3580) | 0;
   $26 = Math_imul($6, 2896);
   $27 = Math_imul($13, 6476);
   $28 = $18 + ($26 + $27 | 0) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($22 + $28 >>> 18 & 1023) | 0];
   HEAP8[$2 + 13 | 0] = HEAPU8[$0 + ($28 - $22 >>> 18 & 1023) | 0];
   $8 = Math_imul($8 - $14 | 0, 10033);
   $10 = $11 + Math_imul($10, -11586) | 0;
   $11 = $10 + Math_imul($6, 5792) | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($8 + $11 >>> 18 & 1023) | 0];
   HEAP8[$2 + 12 | 0] = HEAPU8[$0 + ($11 - $8 >>> 18 & 1023) | 0];
   $11 = Math_imul($7 + $5 | 0, 4712);
   $9 = Math_imul($9, -6810);
   $8 = $11 + (($9 + Math_imul($7, 3897) | 0) - $15 | 0) | 0;
   $12 = Math_imul($12, 11795);
   $14 = $18 + ($25 + ($12 - $24 | 0) | 0) | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($8 + $14 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($14 - $8 >>> 18 & 1023) | 0];
   $8 = $21 + Math_imul($20, -17828) | 0;
   $14 = $26 + ($16 - $27 | 0) | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($8 + $14 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($14 - $8 >>> 18 & 1023) | 0];
   $5 = $11 + (($15 + $19 | 0) + Math_imul($5, -7121) | 0) | 0;
   $15 = Math_imul($6, -3271);
   $13 = Math_imul($13, 4482);
   $11 = $16 + ($15 - $13 | 0) | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($5 + $11 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($11 - $5 >>> 18 & 1023) | 0];
   $7 = $17 + ($9 + Math_imul($7, -9113) | 0) | 0;
   $5 = $18 + ($15 + ($13 - $12 | 0) | 0) | 0;
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($7 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($5 - $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($10 + Math_imul($6, 268423872) >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $23 = $23 + 1 | 0;
   if (($23 | 0) != 15) {
    continue
   }
   break;
  };
  __stack_pointer = $29 + 480 | 0;
 }
 
 function jpeg_idct_16x16($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
  $29 = __stack_pointer - 512 | 0;
  __stack_pointer = $29;
  $22 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $29;
  while (1) {
   $11 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $10 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $7 = $11 - $10 | 0;
   $14 = Math_imul($7, 11363);
   $8 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $12 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $15 = Math_imul($8 + $12 | 0, 11086);
   $24 = $14 + Math_imul($10, 20995) | 0;
   $9 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $25 = Math_imul($9, 10703);
   $13 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $19 = $25 + $13 | 0;
   $20 = $24 + $19 | 0;
   $5 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $26 = Math_imul($5 + $12 | 0, 8956);
   $6 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $17 = $6 + $12 | 0;
   $21 = Math_imul($17, 10217);
   $18 = $26 + ($21 + ($15 + Math_imul($12, -18730) | 0) | 0) | 0;
   HEAP32[$0 + 480 >> 2] = $20 - $18 >> 11;
   HEAP32[$0 >> 2] = $18 + $20 >> 11;
   $7 = Math_imul($7, 2260);
   $20 = $7 + Math_imul($11, 7373) | 0;
   $9 = Math_imul($9, 4433);
   $18 = $9 + $13 | 0;
   $16 = $20 + $18 | 0;
   $27 = Math_imul($6 + $8 | 0, 1136);
   $23 = $27 + ($15 + Math_imul($8, 589) | 0) | 0;
   $15 = $5 + $8 | 0;
   $28 = Math_imul($15, -5461);
   $23 = $23 + $28 | 0;
   HEAP32[$0 + 448 >> 2] = $16 - $23 >> 11;
   HEAP32[$0 + 32 >> 2] = $16 + $23 >> 11;
   $11 = $14 + Math_imul($11, -4926) | 0;
   $14 = $13 - $9 | 0;
   $9 = $11 + $14 | 0;
   $16 = $21 + (Math_imul($6, -9222) + $27 | 0) | 0;
   $21 = Math_imul($5 + $6 | 0, -11086);
   $16 = $16 + $21 | 0;
   HEAP32[$0 + 416 >> 2] = $9 - $16 >> 11;
   HEAP32[$0 + 64 >> 2] = $9 + $16 >> 11;
   $10 = $7 + Math_imul($10, -4176) | 0;
   $13 = $13 - $25 | 0;
   $7 = $10 + $13 | 0;
   $9 = $21 + ($26 + ($28 + Math_imul($5, 8728) | 0) | 0) | 0;
   HEAP32[$0 + 384 >> 2] = $7 - $9 >> 11;
   HEAP32[$0 + 96 >> 2] = $7 + $9 >> 11;
   $13 = $13 - $10 | 0;
   $10 = Math_imul($15, -10217);
   $15 = Math_imul($12 - $5 | 0, 7350);
   $7 = ($10 + Math_imul($5, 25733) | 0) + $15 | 0;
   $5 = Math_imul($5 - $6 | 0, 3363);
   $7 = $7 + $5 | 0;
   HEAP32[$0 + 352 >> 2] = $13 - $7 >> 11;
   HEAP32[$0 + 128 >> 2] = $7 + $13 >> 11;
   $13 = $14 - $11 | 0;
   $11 = Math_imul($17, 5461);
   $7 = Math_imul($6, -6278);
   $6 = Math_imul($6 - $8 | 0, 11529);
   $5 = $5 + ($11 + ($7 + $6 | 0) | 0) | 0;
   HEAP32[$0 + 320 >> 2] = $13 - $5 >> 11;
   HEAP32[$0 + 160 >> 2] = $5 + $13 >> 11;
   $5 = $18 - $20 | 0;
   $7 = Math_imul($8, 16154);
   $8 = Math_imul($12 - $8 | 0, 3363);
   $6 = $10 + ($6 + ($7 + $8 | 0) | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $5 - $6 >> 11;
   HEAP32[$0 + 192 >> 2] = $5 + $6 >> 11;
   $6 = $19 - $24 | 0;
   $8 = $15 + ($11 + ($8 + Math_imul($12, -15038) | 0) | 0) | 0;
   HEAP32[$0 + 256 >> 2] = $6 - $8 >> 11;
   HEAP32[$0 + 224 >> 2] = $6 + $8 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $30 = $30 + 1 | 0;
   if (($30 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $22 - 384 | 0;
  $1 = $29;
  $13 = 0;
  while (1) {
   $8 = HEAP32[$1 + 12 >> 2];
   $12 = HEAP32[$1 + 4 >> 2];
   $10 = Math_imul($8 + $12 | 0, 11086);
   $14 = HEAP32[$1 + 8 >> 2];
   $15 = HEAP32[$1 + 24 >> 2];
   $7 = $14 - $15 | 0;
   $22 = Math_imul($7, 11363);
   $2 = HEAP32[($13 << 2) + $3 >> 2] + $4 | 0;
   $5 = HEAP32[$1 + 28 >> 2];
   $25 = Math_imul($5 + $12 | 0, 8956);
   $6 = HEAP32[$1 + 20 >> 2];
   $24 = $6 + $12 | 0;
   $9 = Math_imul($24, 10217);
   $19 = $25 + ($9 + ($10 + Math_imul($12, -18730) | 0) | 0) | 0;
   $20 = $22 + Math_imul($15, 20995) | 0;
   $11 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $17 = HEAP32[$1 + 16 >> 2];
   $21 = Math_imul($17, 10703);
   $26 = $11 + $21 | 0;
   $18 = $20 + $26 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($19 + $18 >>> 18 & 1023) | 0];
   HEAP8[$2 + 15 | 0] = HEAPU8[$0 + ($18 - $19 >>> 18 & 1023) | 0];
   $19 = $5 + $8 | 0;
   $18 = Math_imul($19, -5461);
   $16 = $10 + Math_imul($8, 589) | 0;
   $10 = Math_imul($6 + $8 | 0, 1136);
   $16 = $18 + ($16 + $10 | 0) | 0;
   $7 = Math_imul($7, 2260);
   $27 = $7 + Math_imul($14, 7373) | 0;
   $17 = Math_imul($17, 4433);
   $28 = $17 + $11 | 0;
   $23 = $27 + $28 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($16 + $23 >>> 18 & 1023) | 0];
   HEAP8[$2 + 14 | 0] = HEAPU8[$0 + ($23 - $16 >>> 18 & 1023) | 0];
   $9 = $9 + ($10 + Math_imul($6, -9222) | 0) | 0;
   $10 = Math_imul($5 + $6 | 0, -11086);
   $9 = $9 + $10 | 0;
   $14 = $22 + Math_imul($14, -4926) | 0;
   $22 = $11 - $17 | 0;
   $17 = $14 + $22 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($9 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 13 | 0] = HEAPU8[$0 + ($17 - $9 >>> 18 & 1023) | 0];
   $10 = $10 + ($25 + ($18 + Math_imul($5, 8728) | 0) | 0) | 0;
   $15 = $7 + Math_imul($15, -4176) | 0;
   $11 = $11 - $21 | 0;
   $7 = $15 + $11 | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($10 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 12 | 0] = HEAPU8[$0 + ($7 - $10 >>> 18 & 1023) | 0];
   $7 = Math_imul($12 - $5 | 0, 7350);
   $10 = Math_imul($19, -10217);
   $9 = $7 + ($10 + Math_imul($5, 25733) | 0) | 0;
   $5 = Math_imul($5 - $6 | 0, 3363);
   $9 = $9 + $5 | 0;
   $11 = $11 - $15 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($9 + $11 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($11 - $9 >>> 18 & 1023) | 0];
   $11 = Math_imul($24, 5461);
   $9 = Math_imul($6, -6278);
   $6 = Math_imul($6 - $8 | 0, 11529);
   $5 = $5 + ($11 + ($9 + $6 | 0) | 0) | 0;
   $14 = $22 - $14 | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($5 + $14 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($14 - $5 >>> 18 & 1023) | 0];
   $5 = Math_imul($8, 16154);
   $8 = Math_imul($12 - $8 | 0, 3363);
   $6 = $10 + ($6 + ($5 + $8 | 0) | 0) | 0;
   $5 = $28 - $27 | 0;
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($6 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($5 - $6 >>> 18 & 1023) | 0];
   $8 = $7 + ($11 + ($8 + Math_imul($12, -15038) | 0) | 0) | 0;
   $12 = $26 - $20 | 0;
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($8 + $12 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($12 - $8 >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $13 = $13 + 1 | 0;
   if (($13 | 0) != 16) {
    continue
   }
   break;
  };
  __stack_pointer = $29 + 512 | 0;
 }
 
 function jpeg_idct_16x8($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  $24 = __stack_pointer - 256 | 0;
  __stack_pointer = $24;
  $17 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $24;
  $13 = 8;
  while (1) {
   block1 : {
    block : {
     $5 = HEAPU16[$2 + 32 >> 1];
     $6 = HEAP16[$2 + 16 >> 1];
     if (($5 | $6) & 65535) {
      break block
     }
     $5 = 0;
     if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
      break block
     }
     if (HEAPU16[$2 + 112 >> 1]) {
      break block
     }
     $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 2;
     HEAP32[$0 + 192 >> 2] = $5;
     HEAP32[$0 + 160 >> 2] = $5;
     HEAP32[$0 + 128 >> 2] = $5;
     HEAP32[$0 + 96 >> 2] = $5;
     HEAP32[$0 + 64 >> 2] = $5;
     HEAP32[$0 + 32 >> 2] = $5;
     HEAP32[$0 >> 2] = $5;
     $6 = 224;
     break block1;
    }
    $14 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
    $9 = Math_imul(HEAP32[$1 + 64 >> 2], $5 << 16 >> 16);
    $5 = Math_imul($14 + $9 | 0, 4433);
    $6 = Math_imul($6, HEAP32[$1 + 32 >> 2]);
    $8 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
    $19 = Math_imul($6 + $8 | 0, -7373);
    $10 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
    $15 = $10 + $6 | 0;
    $11 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
    $7 = $11 + $8 | 0;
    $12 = Math_imul($15 + $7 | 0, 9633);
    $9 = $5 + Math_imul($9, 6270) | 0;
    $22 = Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$1 + 128 >> 2]) << 13;
    $18 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
    $16 = $22 + $18 | 0;
    $23 = $9 + $16 | 0;
    $20 = $19 + Math_imul($6, 12299) | 0;
    $6 = $12 + Math_imul($15, -3196) | 0;
    $15 = $20 + $6 | 0;
    HEAP32[$0 + 224 >> 2] = $23 - $15 >> 11;
    HEAP32[$0 >> 2] = $15 + $23 >> 11;
    $5 = $5 + Math_imul($14, -15137) | 0;
    $14 = $18 - $22 | 0;
    $15 = $5 + $14 | 0;
    $12 = $12 + Math_imul($7, -16069) | 0;
    $7 = Math_imul($11, 25172);
    $11 = Math_imul($10 + $11 | 0, -20995);
    $7 = $12 + ($7 + $11 | 0) | 0;
    HEAP32[$0 + 192 >> 2] = $15 - $7 >> 11;
    HEAP32[$0 + 32 >> 2] = $7 + $15 >> 11;
    $5 = $14 - $5 | 0;
    $6 = $6 + ($11 + Math_imul($10, 16819) | 0) | 0;
    HEAP32[$0 + 160 >> 2] = $5 - $6 >> 11;
    HEAP32[$0 + 64 >> 2] = $5 + $6 >> 11;
    $5 = $12 + ($19 + Math_imul($8, 2446) | 0) | 0;
    $6 = $16 - $9 | 0;
    HEAP32[$0 + 96 >> 2] = $5 + $6 >> 11;
    $5 = $6 - $5 >> 11;
    $6 = 128;
   }
   HEAP32[$6 + $0 >> 2] = $5;
   $2 = $2 + 2 | 0;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $5 = $13 >>> 0 > 1;
   $13 = $13 - 1 | 0;
   if ($5) {
    continue
   }
   break;
  };
  $0 = $17 - 384 | 0;
  $1 = $24;
  $19 = 0;
  while (1) {
   $5 = HEAP32[$1 + 12 >> 2];
   $13 = HEAP32[$1 + 4 >> 2];
   $11 = Math_imul($5 + $13 | 0, 11086);
   $12 = HEAP32[$1 + 8 >> 2];
   $17 = HEAP32[$1 + 24 >> 2];
   $9 = $12 - $17 | 0;
   $14 = Math_imul($9, 11363);
   $2 = HEAP32[($19 << 2) + $3 >> 2] + $4 | 0;
   $8 = HEAP32[$1 + 28 >> 2];
   $22 = Math_imul($8 + $13 | 0, 8956);
   $6 = HEAP32[$1 + 20 >> 2];
   $15 = $6 + $13 | 0;
   $7 = Math_imul($15, 10217);
   $18 = $22 + ($7 + ($11 + Math_imul($13, -18730) | 0) | 0) | 0;
   $16 = HEAP32[$1 + 16 >> 2];
   $23 = Math_imul($16, 10703);
   $10 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $26 = $23 + $10 | 0;
   $27 = $14 + Math_imul($17, 20995) | 0;
   $20 = $26 + $27 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($18 + $20 >>> 18 & 1023) | 0];
   HEAP8[$2 + 15 | 0] = HEAPU8[$0 + ($20 - $18 >>> 18 & 1023) | 0];
   $9 = Math_imul($9, 2260);
   $18 = $9 + Math_imul($12, 7373) | 0;
   $16 = Math_imul($16, 4433);
   $20 = $16 + $10 | 0;
   $21 = $18 + $20 | 0;
   $28 = Math_imul($5 + $6 | 0, 1136);
   $25 = $28 + ($11 + Math_imul($5, 589) | 0) | 0;
   $11 = $5 + $8 | 0;
   $29 = Math_imul($11, -5461);
   $25 = $25 + $29 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($21 + $25 >>> 18 & 1023) | 0];
   HEAP8[$2 + 14 | 0] = HEAPU8[$0 + ($21 - $25 >>> 18 & 1023) | 0];
   $21 = $7 + (Math_imul($6, -9222) + $28 | 0) | 0;
   $7 = Math_imul($6 + $8 | 0, -11086);
   $21 = $21 + $7 | 0;
   $12 = $14 + Math_imul($12, -4926) | 0;
   $14 = $10 - $16 | 0;
   $16 = $12 + $14 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($21 + $16 >>> 18 & 1023) | 0];
   HEAP8[$2 + 13 | 0] = HEAPU8[$0 + ($16 - $21 >>> 18 & 1023) | 0];
   $7 = $7 + ($22 + ($29 + Math_imul($8, 8728) | 0) | 0) | 0;
   $17 = $9 + Math_imul($17, -4176) | 0;
   $10 = $10 - $23 | 0;
   $9 = $17 + $10 | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($7 + $9 >>> 18 & 1023) | 0];
   HEAP8[$2 + 12 | 0] = HEAPU8[$0 + ($9 - $7 >>> 18 & 1023) | 0];
   $9 = Math_imul($13 - $8 | 0, 7350);
   $11 = Math_imul($11, -10217);
   $7 = $9 + ($11 + Math_imul($8, 25733) | 0) | 0;
   $8 = Math_imul($8 - $6 | 0, 3363);
   $7 = $7 + $8 | 0;
   $10 = $10 - $17 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($7 + $10 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($10 - $7 >>> 18 & 1023) | 0];
   $10 = Math_imul($15, 5461);
   $7 = Math_imul($6, -6278);
   $6 = Math_imul($6 - $5 | 0, 11529);
   $8 = $8 + ($10 + ($7 + $6 | 0) | 0) | 0;
   $12 = $14 - $12 | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($8 + $12 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($12 - $8 >>> 18 & 1023) | 0];
   $8 = Math_imul($5, 16154);
   $5 = Math_imul($13 - $5 | 0, 3363);
   $6 = $11 + ($6 + ($8 + $5 | 0) | 0) | 0;
   $8 = $20 - $18 | 0;
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($6 + $8 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($8 - $6 >>> 18 & 1023) | 0];
   $5 = $9 + ($10 + ($5 + Math_imul($13, -15038) | 0) | 0) | 0;
   $13 = $26 - $27 | 0;
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($5 + $13 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($13 - $5 >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $19 = $19 + 1 | 0;
   if (($19 | 0) != 8) {
    continue
   }
   break;
  };
  __stack_pointer = $24 + 256 | 0;
 }
 
 function jpeg_idct_14x7($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $21 = __stack_pointer - 224 | 0;
  __stack_pointer = $21;
  $13 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $1 = $21;
  while (1) {
   $7 = HEAP32[$0 + 160 >> 2];
   $8 = HEAP16[$2 + 80 >> 1];
   $9 = HEAP32[$0 + 32 >> 2];
   $14 = HEAP16[$2 + 16 >> 1];
   $16 = HEAP32[$0 + 96 >> 2];
   $11 = HEAP16[$2 + 48 >> 1];
   $15 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $6 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $5 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $12 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $10 = $5 + $12 | 0;
   HEAP32[$1 + 96 >> 2] = $15 + Math_imul($6 - $10 | 0, 11585) >> 11;
   $7 = Math_imul($7, $8);
   $8 = Math_imul($9, $14);
   $9 = Math_imul($7 + $8 | 0, 5027);
   $10 = $15 + Math_imul($10, 10438) | 0;
   $14 = Math_imul($6 - $5 | 0, 7223);
   $18 = $10 + ($14 + Math_imul($5, -637) | 0) | 0;
   $5 = Math_imul($16, $11);
   $16 = Math_imul($5 + $8 | 0, 7663);
   $8 = Math_imul($8 - $5 | 0, 1395);
   $11 = $9 + ($16 - $8 | 0) | 0;
   HEAP32[$1 + 192 >> 2] = $18 - $11 >> 11;
   HEAP32[$1 >> 2] = $11 + $18 >> 11;
   $11 = Math_imul($12, -20239);
   $12 = Math_imul($12 - $6 | 0, 2578);
   $11 = $10 + ($11 + $12 | 0) | 0;
   $5 = Math_imul($5 + $7 | 0, -11295);
   $7 = $5 + ($9 + Math_imul($7, 15326) | 0) | 0;
   HEAP32[$1 + 128 >> 2] = $11 - $7 >> 11;
   HEAP32[$1 + 64 >> 2] = $7 + $11 >> 11;
   $6 = $14 + ($12 + ($15 + Math_imul($6, -15083) | 0) | 0) | 0;
   $5 = $5 + ($8 + $16 | 0) | 0;
   HEAP32[$1 + 160 >> 2] = $6 - $5 >> 11;
   HEAP32[$1 + 32 >> 2] = $5 + $6 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $17 = $17 + 1 | 0;
   if (($17 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $13 - 384 | 0;
  $1 = $21;
  $17 = 0;
  while (1) {
   $6 = HEAP32[$1 + 12 >> 2];
   $12 = HEAP32[$1 + 4 >> 2];
   $9 = Math_imul($6 + $12 | 0, 10935);
   $13 = HEAP32[$1 + 24 >> 2];
   $14 = HEAP32[$1 + 8 >> 2];
   $16 = Math_imul($13 + $14 | 0, 9058);
   $2 = HEAP32[($17 << 2) + $3 >> 2] + $4 | 0;
   $18 = HEAP32[$1 + 28 >> 2];
   $15 = $18 << 13;
   $5 = HEAP32[$1 + 20 >> 2];
   $11 = $5 + $12 | 0;
   $10 = Math_imul($11, 9810);
   $19 = $15 + ($10 + ($9 + Math_imul($12, -9232) | 0) | 0) | 0;
   $23 = $16 + Math_imul($14, 2237) | 0;
   $8 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $7 = HEAP32[$1 + 16 >> 2];
   $24 = $8 + Math_imul($7, 10438) | 0;
   $20 = $23 + $24 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($19 + $20 >>> 18 & 1023) | 0];
   HEAP8[$2 + 13 | 0] = HEAPU8[$0 + ($20 - $19 >>> 18 & 1023) | 0];
   $16 = $16 + Math_imul($13, -14084) | 0;
   $19 = $8 + Math_imul($7, 2578) | 0;
   $20 = $16 + $19 | 0;
   $22 = $9 + Math_imul($6, -3474) | 0;
   $9 = Math_imul($5 + $6 | 0, -1297) - $15 | 0;
   $22 = $22 + $9 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($20 + $22 >>> 18 & 1023) | 0];
   HEAP8[$2 + 12 | 0] = HEAPU8[$0 + ($20 - $22 >>> 18 & 1023) | 0];
   $9 = $9 + ($10 + Math_imul($5, -19447) | 0) | 0;
   $13 = Math_imul($13, -11295) + Math_imul($14, 5027) | 0;
   $14 = $8 + Math_imul($7, -7223) | 0;
   $10 = $13 + $14 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($9 + $10 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($10 - $9 >>> 18 & 1023) | 0];
   $9 = $12 - $6 | 0;
   $10 = $18 + ($9 - $5 | 0) << 13;
   $7 = $8 + Math_imul($7, -11586) | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($10 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($7 - $10 >>> 18 & 1023) | 0];
   $7 = Math_imul($11, 6164);
   $8 = $15 + Math_imul($5, -13850) | 0;
   $5 = Math_imul($5 - $6 | 0, 11512);
   $8 = $7 + ($8 + $5 | 0) | 0;
   $13 = $14 - $13 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($8 + $13 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($13 - $8 >>> 18 & 1023) | 0];
   $5 = $5 + Math_imul($6, 5529) | 0;
   $6 = Math_imul($9, 3826) - $15 | 0;
   $5 = $5 + $6 | 0;
   $15 = $19 - $16 | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($5 + $15 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($15 - $5 >>> 18 & 1023) | 0];
   $6 = $6 + ($7 + Math_imul($12, -8693) | 0) | 0;
   $5 = $24 - $23 | 0;
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($6 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($5 - $6 >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $17 = $17 + 1 | 0;
   if (($17 | 0) != 7) {
    continue
   }
   break;
  };
  __stack_pointer = $21 + 224 | 0;
 }
 
 function jpeg_idct_12x6($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $19 = __stack_pointer - 192 | 0;
  __stack_pointer = $19;
  $7 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $1 = $19;
  while (1) {
   $10 = HEAP32[$0 + 64 >> 2];
   $8 = HEAP16[$2 + 32 >> 1];
   $6 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $9 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $17 = $6 + Math_imul($9, -11586) >> 11;
   $5 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $13 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $11 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $14 = $5 - ($13 + $11 | 0) << 2;
   HEAP32[$1 + 128 >> 2] = $17 - $14;
   HEAP32[$1 + 32 >> 2] = $14 + $17;
   $10 = Math_imul(Math_imul($8, $10), 10033);
   $8 = $6 + Math_imul($9, 5793) | 0;
   $9 = $10 + $8 | 0;
   $6 = $5 + $13 << 13;
   $5 = Math_imul($5 + $11 | 0, 2998);
   $6 = $6 + $5 | 0;
   HEAP32[$1 + 160 >> 2] = $9 - $6 >> 11;
   HEAP32[$1 >> 2] = $6 + $9 >> 11;
   $10 = $8 - $10 | 0;
   $5 = $5 + ($11 - $13 << 13) | 0;
   HEAP32[$1 + 96 >> 2] = $10 - $5 >> 11;
   HEAP32[$1 + 64 >> 2] = $5 + $10 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $15 = $15 + 1 | 0;
   if (($15 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $7 - 384 | 0;
  $1 = $19;
  $13 = 0;
  while (1) {
   $11 = HEAP32[$1 + 4 >> 2];
   $7 = HEAP32[$1 + 20 >> 2];
   $8 = $11 + $7 | 0;
   $5 = HEAP32[$1 + 28 >> 2];
   $10 = Math_imul($8 + $5 | 0, 7053);
   $2 = HEAP32[($13 << 2) + $3 >> 2] + $4 | 0;
   $14 = $10 + Math_imul($8, 2139) | 0;
   $9 = HEAP32[$1 + 12 >> 2];
   $17 = Math_imul($9, 10703);
   $15 = $14 + ($17 + Math_imul($11, 2295) | 0) | 0;
   $12 = HEAP32[$1 + 24 >> 2];
   $18 = $12 << 13;
   $6 = HEAP32[$1 + 8 >> 2];
   $20 = $18 + Math_imul($6, 11190) | 0;
   $21 = Math_imul(HEAP32[$1 + 16 >> 2], 10033);
   $8 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
   $22 = $21 + $8 | 0;
   $16 = $20 + $22 | 0;
   HEAP8[$2 | 0] = HEAPU8[$0 + ($15 + $16 >>> 18 & 1023) | 0];
   HEAP8[$2 + 11 | 0] = HEAPU8[$0 + ($16 - $15 >>> 18 & 1023) | 0];
   $15 = $6 - $12 << 13;
   $12 = $15 + $8 | 0;
   $16 = $11 - $5 | 0;
   $23 = $9 - $7 | 0;
   $24 = Math_imul($16 + $23 | 0, 4433);
   $16 = $24 + Math_imul($16, 6270) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$0 + ($12 + $16 >>> 18 & 1023) | 0];
   HEAP8[$2 + 10 | 0] = HEAPU8[$0 + ($12 - $16 >>> 18 & 1023) | 0];
   $9 = Math_imul($9, -4433);
   $12 = $9 + Math_imul($7, -12112) | 0;
   $7 = Math_imul($5 + $7 | 0, -8565);
   $14 = ($12 + $7 | 0) + $14 | 0;
   $6 = Math_imul($6, 2998) - $18 | 0;
   $12 = $8 - $21 | 0;
   $18 = $6 + $12 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$0 + ($14 + $18 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$0 + ($18 - $14 >>> 18 & 1023) | 0];
   $7 = $7 + ($10 + (Math_imul($5, 12998) - $17 | 0) | 0) | 0;
   $6 = $12 - $6 | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$0 + ($7 + $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$0 + ($6 - $7 >>> 18 & 1023) | 0];
   $7 = Math_imul($23, -15137) + $24 | 0;
   $8 = $8 - $15 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$0 + ($7 + $8 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$0 + ($8 - $7 >>> 18 & 1023) | 0];
   $5 = $10 + (($9 + Math_imul($11, -5540) | 0) + Math_imul($5, -16244) | 0) | 0;
   $11 = $22 - $20 | 0;
   HEAP8[$2 + 5 | 0] = HEAPU8[$0 + ($5 + $11 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$0 + ($11 - $5 >>> 18 & 1023) | 0];
   $1 = $1 + 32 | 0;
   $13 = $13 + 1 | 0;
   if (($13 | 0) != 6) {
    continue
   }
   break;
  };
  __stack_pointer = $19 + 192 | 0;
 }
 
 function jpeg_idct_10x5($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $18 = __stack_pointer - 160 | 0;
  __stack_pointer = $18;
  $12 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $1 = $18;
  while (1) {
   $6 = HEAP32[$0 + 96 >> 2];
   $7 = HEAP16[$2 + 48 >> 1];
   $5 = HEAP32[$0 + 32 >> 2];
   $8 = HEAP16[$2 + 16 >> 1];
   $13 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $9 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $10 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $11 = $9 - $10 | 0;
   HEAP32[$1 + 64 >> 2] = $13 + Math_imul($11, -11584) >> 11;
   $7 = Math_imul($6, $7);
   $5 = Math_imul($5, $8);
   $6 = Math_imul($7 + $5 | 0, 6810);
   $8 = $13 + Math_imul($11, 2896) | 0;
   $9 = Math_imul($9 + $10 | 0, 6476);
   $10 = $8 + $9 | 0;
   $5 = $6 + Math_imul($5, 4209) | 0;
   HEAP32[$1 + 128 >> 2] = $10 - $5 >> 11;
   HEAP32[$1 >> 2] = $5 + $10 >> 11;
   $5 = $8 - $9 | 0;
   $6 = $6 + Math_imul($7, -17828) | 0;
   HEAP32[$1 + 96 >> 2] = $5 - $6 >> 11;
   HEAP32[$1 + 32 >> 2] = $5 + $6 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $14 = $14 + 1 | 0;
   if (($14 | 0) != 8) {
    continue
   }
   break;
  };
  $1 = $12 - 384 | 0;
  $0 = $18;
  $12 = 0;
  while (1) {
   $10 = HEAP32[$0 + 24 >> 2];
   $8 = HEAP32[$0 + 8 >> 2];
   $7 = Math_imul($10 + $8 | 0, 6810);
   $2 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
   $5 = HEAP32[$0 + 28 >> 2];
   $9 = HEAP32[$0 + 12 >> 2];
   $11 = $5 + $9 | 0;
   $13 = Math_imul($11, 7791);
   $6 = HEAP32[$0 + 4 >> 2];
   $14 = HEAP32[$0 + 20 >> 2];
   $15 = $14 << 13;
   $5 = $9 - $5 | 0;
   $19 = $15 + Math_imul($5, 2531) | 0;
   $16 = ($13 + Math_imul($6, 11443) | 0) + $19 | 0;
   $20 = $7 + Math_imul($8, 4209) | 0;
   $9 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
   $8 = HEAP32[$0 + 16 >> 2];
   $21 = $9 + Math_imul($8, 9373) | 0;
   $17 = $20 + $21 | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + ($16 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 9 | 0] = HEAPU8[$1 + ($17 - $16 >>> 18 & 1023) | 0];
   $11 = Math_imul($11, 4815);
   $15 = $15 + Math_imul($5, -6627) | 0;
   $16 = Math_imul($6, 10323) - ($11 + $15 | 0) | 0;
   $7 = $7 + Math_imul($10, -17828) | 0;
   $10 = $9 + Math_imul($8, -3580) | 0;
   $17 = $7 + $10 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + ($16 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 8 | 0] = HEAPU8[$1 + ($17 - $16 >>> 18 & 1023) | 0];
   $5 = $6 - ($5 + $14 | 0) << 13;
   $8 = $9 + Math_imul($8, -11586) | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + ($5 + $8 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$1 + ($8 - $5 >>> 18 & 1023) | 0];
   $5 = $15 + (Math_imul($6, 5260) - $11 | 0) | 0;
   $7 = $10 - $7 | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + ($5 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$1 + ($7 - $5 >>> 18 & 1023) | 0];
   $6 = $19 + (Math_imul($6, 1812) - $13 | 0) | 0;
   $7 = $21 - $20 | 0;
   HEAP8[$2 + 4 | 0] = HEAPU8[$1 + ($6 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[$1 + ($7 - $6 >>> 18 & 1023) | 0];
   $0 = $0 + 32 | 0;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != 5) {
    continue
   }
   break;
  };
  __stack_pointer = $18 + 160 | 0;
 }
 
 function jpeg_idct_8x4($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $16 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $5 = __stack_pointer - 128 | 0;
  $1 = $5;
  while (1) {
   $9 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $6 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $8 = Math_imul($9 + $6 | 0, 4433) + 1024 | 0;
   $10 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $11 = Math_imul(HEAP32[$0 >> 2], HEAP16[$2 >> 1]);
   $7 = $10 + $11 << 2;
   $6 = $8 + Math_imul($6, 6270) >> 11;
   HEAP32[$1 + 96 >> 2] = $7 - $6;
   HEAP32[$1 >> 2] = $6 + $7;
   $6 = $11 - $10 << 2;
   $8 = $8 + Math_imul($9, -15137) >> 11;
   HEAP32[$1 + 64 >> 2] = $6 - $8;
   HEAP32[$1 + 32 >> 2] = $6 + $8;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != 8) {
    continue
   }
   break;
  };
  $0 = $16 - 384 | 0;
  $2 = $5;
  $12 = 0;
  while (1) {
   $5 = HEAP32[$2 + 4 >> 2];
   $8 = HEAP32[$2 + 28 >> 2];
   $16 = Math_imul($5 + $8 | 0, -7373);
   $9 = HEAP32[$2 + 20 >> 2];
   $7 = $9 + $5 | 0;
   $6 = HEAP32[$2 + 12 >> 2];
   $13 = $6 + $8 | 0;
   $10 = Math_imul($7 + $13 | 0, 9633);
   $14 = HEAP32[$2 + 24 >> 2];
   $15 = HEAP32[$2 + 8 >> 2];
   $11 = Math_imul($14 + $15 | 0, 4433);
   $1 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
   $17 = HEAP32[$2 >> 2] + 16400 | 0;
   $18 = HEAP32[$2 + 16 >> 2];
   $19 = $17 + $18 << 13;
   $15 = $11 + Math_imul($15, 6270) | 0;
   $20 = $19 + $15 | 0;
   $21 = $16 + Math_imul($5, 12299) | 0;
   $5 = $10 + Math_imul($7, -3196) | 0;
   $7 = $21 + $5 | 0;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($20 + $7 >>> 18 & 1023) | 0];
   HEAP8[$1 + 7 | 0] = HEAPU8[$0 + ($20 - $7 >>> 18 & 1023) | 0];
   $10 = $10 + Math_imul($13, -16069) | 0;
   $7 = Math_imul($6, 25172);
   $6 = Math_imul($6 + $9 | 0, -20995);
   $7 = $10 + ($7 + $6 | 0) | 0;
   $11 = $11 + Math_imul($14, -15137) | 0;
   $13 = $17 - $18 << 13;
   $14 = $11 + $13 | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($7 + $14 >>> 18 & 1023) | 0];
   HEAP8[$1 + 6 | 0] = HEAPU8[$0 + ($14 - $7 >>> 18 & 1023) | 0];
   $5 = $5 + ($6 + Math_imul($9, 16819) | 0) | 0;
   $9 = $13 - $11 | 0;
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($5 + $9 >>> 18 & 1023) | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[$0 + ($9 - $5 >>> 18 & 1023) | 0];
   $5 = $10 + ($16 + Math_imul($8, 2446) | 0) | 0;
   $8 = $19 - $15 | 0;
   HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($5 + $8 >>> 18 & 1023) | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[$0 + ($8 - $5 >>> 18 & 1023) | 0];
   $2 = $2 + 32 | 0;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != 4) {
    continue
   }
   break;
  };
 }
 
 function jpeg_idct_6x3($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $9 = HEAP32[$0 + 336 >> 2];
  $6 = HEAP16[$2 + 16 >> 1];
  $1 = HEAP32[$1 + 84 >> 2];
  $7 = HEAP32[$1 + 32 >> 2];
  $0 = __stack_pointer - 80 | 0;
  $8 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  HEAP32[$0 + 24 >> 2] = $8 + Math_imul($5, -11586) >> 11;
  $5 = $8 + Math_imul($5, 5793) | 0;
  $6 = Math_imul(Math_imul($6, $7), 10033);
  HEAP32[$0 + 48 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 >> 2] = $6 + $5 >> 11;
  $6 = HEAP32[$1 + 36 >> 2];
  $7 = HEAP16[$2 + 18 >> 1];
  $8 = Math_imul(HEAP16[$2 + 2 >> 1], HEAP32[$1 + 4 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$1 + 68 >> 2], HEAP16[$2 + 34 >> 1]);
  HEAP32[$0 + 28 >> 2] = $8 + Math_imul($5, -11586) >> 11;
  $5 = $8 + Math_imul($5, 5793) | 0;
  $6 = Math_imul(Math_imul($6, $7), 10033);
  HEAP32[$0 + 52 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 4 >> 2] = $6 + $5 >> 11;
  $6 = HEAP32[$1 + 40 >> 2];
  $7 = HEAP16[$2 + 20 >> 1];
  $8 = Math_imul(HEAP16[$2 + 4 >> 1], HEAP32[$1 + 8 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$1 + 72 >> 2], HEAP16[$2 + 36 >> 1]);
  HEAP32[$0 + 32 >> 2] = $8 + Math_imul($5, -11586) >> 11;
  $5 = $8 + Math_imul($5, 5793) | 0;
  $6 = Math_imul(Math_imul($6, $7), 10033);
  HEAP32[$0 + 56 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 8 >> 2] = $6 + $5 >> 11;
  $6 = HEAP32[$1 + 44 >> 2];
  $7 = HEAP16[$2 + 22 >> 1];
  $8 = Math_imul(HEAP16[$2 + 6 >> 1], HEAP32[$1 + 12 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$1 + 76 >> 2], HEAP16[$2 + 38 >> 1]);
  HEAP32[$0 + 36 >> 2] = $8 + Math_imul($5, -11586) >> 11;
  $5 = $8 + Math_imul($5, 5793) | 0;
  $6 = Math_imul(Math_imul($6, $7), 10033);
  HEAP32[$0 + 60 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 12 >> 2] = $6 + $5 >> 11;
  $6 = HEAP32[$1 + 48 >> 2];
  $7 = HEAP16[$2 + 24 >> 1];
  $8 = Math_imul(HEAP16[$2 + 8 >> 1], HEAP32[$1 + 16 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$1 + 80 >> 2], HEAP16[$2 + 40 >> 1]);
  HEAP32[$0 + 40 >> 2] = $8 + Math_imul($5, -11586) >> 11;
  $5 = $8 + Math_imul($5, 5793) | 0;
  $6 = Math_imul(Math_imul($6, $7), 10033);
  HEAP32[$0 + 64 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 16 >> 2] = $6 + $5 >> 11;
  $6 = HEAP32[$1 + 52 >> 2];
  $7 = HEAP16[$2 + 26 >> 1];
  $5 = Math_imul(HEAP32[$1 + 84 >> 2], HEAP16[$2 + 42 >> 1]);
  $1 = Math_imul(HEAP16[$2 + 10 >> 1], HEAP32[$1 + 20 >> 2]) << 13 | 1024;
  HEAP32[$0 + 44 >> 2] = Math_imul($5, -11586) + $1 >> 11;
  $1 = $1 + Math_imul($5, 5793) | 0;
  $2 = Math_imul(Math_imul($6, $7), 10033);
  HEAP32[$0 + 68 >> 2] = $1 - $2 >> 11;
  HEAP32[$0 + 20 >> 2] = $1 + $2 >> 11;
  $1 = $9 - 384 | 0;
  $2 = $0;
  $9 = 0;
  while (1) {
   $6 = HEAP32[$2 + 20 >> 2];
   $7 = HEAP32[$2 + 4 >> 2];
   $5 = Math_imul($6 + $7 | 0, 2998);
   $0 = HEAP32[($9 << 2) + $3 >> 2] + $4 | 0;
   $10 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
   $11 = HEAP32[$2 + 16 >> 2];
   $12 = $10 + Math_imul($11, 5793) | 0;
   $13 = Math_imul(HEAP32[$2 + 8 >> 2], 10033);
   $14 = $12 + $13 | 0;
   $8 = HEAP32[$2 + 12 >> 2];
   $15 = $5 + ($8 + $7 << 13) | 0;
   HEAP8[$0 | 0] = HEAPU8[$1 + ($14 + $15 >>> 18 & 1023) | 0];
   HEAP8[$0 + 5 | 0] = HEAPU8[$1 + ($14 - $15 >>> 18 & 1023) | 0];
   $7 = $7 - ($6 + $8 | 0) << 13;
   $10 = Math_imul($11, -11586) + $10 | 0;
   HEAP8[$0 + 1 | 0] = HEAPU8[$1 + ($7 + $10 >>> 18 & 1023) | 0];
   HEAP8[$0 + 4 | 0] = HEAPU8[$1 + ($10 - $7 >>> 18 & 1023) | 0];
   $6 = $5 + ($6 - $8 << 13) | 0;
   $7 = $12 - $13 | 0;
   HEAP8[$0 + 2 | 0] = HEAPU8[$1 + ($6 + $7 >>> 18 & 1023) | 0];
   HEAP8[$0 + 3 | 0] = HEAPU8[$1 + ($7 - $6 >>> 18 & 1023) | 0];
   $2 = $2 + 24 | 0;
   $9 = $9 + 1 | 0;
   if (($9 | 0) != 3) {
    continue
   }
   break;
  };
 }
 
 function jpeg_idct_4x2($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $1 = HEAP32[$1 + 84 >> 2];
  $5 = Math_imul(HEAP32[$1 + 44 >> 2], HEAP16[$2 + 22 >> 1]);
  $6 = HEAP32[$3 >> 2] + $4 | 0;
  $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
  $7 = Math_imul(HEAP32[$1 + 32 >> 2], HEAPU16[$2 + 16 >> 1]);
  $9 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]);
  $8 = ($7 + $9 | 0) + 4100 | 0;
  $10 = Math_imul(HEAP32[$1 + 40 >> 2], HEAPU16[$2 + 20 >> 1]);
  $11 = Math_imul(HEAP32[$1 + 8 >> 2], HEAPU16[$2 + 4 >> 1]);
  $12 = $10 + $11 | 0;
  $13 = $8 + $12 << 13;
  $14 = Math_imul(HEAP32[$1 + 12 >> 2], HEAP16[$2 + 6 >> 1]);
  $15 = $14 + $5 | 0;
  $16 = Math_imul(HEAP32[$1 + 36 >> 2], HEAP16[$2 + 18 >> 1]);
  $1 = Math_imul(HEAP32[$1 + 4 >> 2], HEAP16[$2 + 2 >> 1]);
  $2 = $16 + $1 | 0;
  $17 = Math_imul($15 + $2 | 0, 4433);
  $2 = $17 + Math_imul($2, 6270) | 0;
  HEAP8[$6 | 0] = HEAPU8[$0 + ($13 + $2 >>> 16 & 1023) | 0];
  HEAP8[$6 + 3 | 0] = HEAPU8[$0 + ($13 - $2 >>> 16 & 1023) | 0];
  $2 = Math_imul($15, -15137) + $17 | 0;
  $8 = $8 - $12 << 13;
  HEAP8[$6 + 1 | 0] = HEAPU8[$0 + ($2 + $8 >>> 16 & 1023) | 0];
  HEAP8[$6 + 2 | 0] = HEAPU8[$0 + ($8 - $2 >>> 16 & 1023) | 0];
  $6 = $14 - $5 | 0;
  $5 = $1 - $16 | 0;
  $2 = Math_imul($6 + $5 | 0, 4433);
  $1 = HEAP32[$3 + 4 >> 2] + $4 | 0;
  $3 = $2 + Math_imul($5, 6270) | 0;
  $4 = ($9 - $7 | 0) + 4100 | 0;
  $5 = $11 - $10 | 0;
  $7 = $4 + $5 << 13;
  HEAP8[$1 | 0] = HEAPU8[$0 + ($3 + $7 >>> 16 & 1023) | 0];
  HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($7 - $3 >>> 16 & 1023) | 0];
  $2 = $2 + Math_imul($6, -15137) | 0;
  $3 = $4 - $5 << 13;
  HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($2 + $3 >>> 16 & 1023) | 0];
  HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($3 - $2 >>> 16 & 1023) | 0];
 }
 
 function jpeg_idct_2x1($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $3 = HEAP32[$3 >> 2] + $4 | 0;
  $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
  $1 = HEAP32[$1 + 84 >> 2];
  $4 = Math_imul(HEAP32[$1 + 4 >> 2], HEAPU16[$2 + 2 >> 1]);
  $1 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]) + 4100 | 0;
  HEAP8[$3 | 0] = HEAPU8[$0 + ($4 + $1 >>> 3 & 1023) | 0];
  HEAP8[$3 + 1 | 0] = HEAPU8[$0 + ($1 - $4 >>> 3 & 1023) | 0];
 }
 
 function jpeg_idct_8x16($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
  $23 = __stack_pointer - 512 | 0;
  __stack_pointer = $23;
  $18 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $23;
  while (1) {
   $11 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $13 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $8 = $11 - $13 | 0;
   $15 = Math_imul($8, 11363);
   $10 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $9 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $6 = Math_imul($10 + $9 | 0, 11086);
   $16 = $15 + Math_imul($13, 20995) | 0;
   $14 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $19 = Math_imul($14, 10703);
   $7 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $20 = $19 + $7 | 0;
   $17 = $16 + $20 | 0;
   $5 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $24 = Math_imul($5 + $9 | 0, 8956);
   $12 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $25 = $12 + $9 | 0;
   $21 = Math_imul($25, 10217);
   $22 = $24 + ($21 + ($6 + Math_imul($9, -18730) | 0) | 0) | 0;
   HEAP32[$0 + 480 >> 2] = $17 - $22 >> 11;
   HEAP32[$0 >> 2] = $17 + $22 >> 11;
   $8 = Math_imul($8, 2260);
   $17 = $8 + Math_imul($11, 7373) | 0;
   $14 = Math_imul($14, 4433);
   $22 = $14 + $7 | 0;
   $26 = $17 + $22 | 0;
   $27 = $5 + $10 | 0;
   $28 = Math_imul($27, -5461);
   $29 = Math_imul($10 + $12 | 0, 1136);
   $6 = $28 + ($29 + ($6 + Math_imul($10, 589) | 0) | 0) | 0;
   HEAP32[$0 + 448 >> 2] = $26 - $6 >> 11;
   HEAP32[$0 + 32 >> 2] = $6 + $26 >> 11;
   $11 = $15 + Math_imul($11, -4926) | 0;
   $15 = $7 - $14 | 0;
   $6 = $11 + $15 | 0;
   $14 = Math_imul($5 + $12 | 0, -11086);
   $21 = $14 + ($21 + (Math_imul($12, -9222) + $29 | 0) | 0) | 0;
   HEAP32[$0 + 416 >> 2] = $6 - $21 >> 11;
   HEAP32[$0 + 64 >> 2] = $6 + $21 >> 11;
   $13 = $8 + Math_imul($13, -4176) | 0;
   $7 = $7 - $19 | 0;
   $6 = $13 + $7 | 0;
   $8 = $14 + ((Math_imul($5, 8728) + $28 | 0) + $24 | 0) | 0;
   HEAP32[$0 + 384 >> 2] = $6 - $8 >> 11;
   HEAP32[$0 + 96 >> 2] = $6 + $8 >> 11;
   $7 = $7 - $13 | 0;
   $6 = Math_imul($9 - $5 | 0, 7350);
   $13 = Math_imul($27, -10217);
   $8 = $6 + ($13 + Math_imul($5, 25733) | 0) | 0;
   $5 = Math_imul($5 - $12 | 0, 3363);
   $8 = $8 + $5 | 0;
   HEAP32[$0 + 352 >> 2] = $7 - $8 >> 11;
   HEAP32[$0 + 128 >> 2] = $7 + $8 >> 11;
   $7 = $15 - $11 | 0;
   $11 = Math_imul($25, 5461);
   $8 = Math_imul($12, -6278);
   $12 = Math_imul($12 - $10 | 0, 11529);
   $5 = $5 + ($11 + ($8 + $12 | 0) | 0) | 0;
   HEAP32[$0 + 320 >> 2] = $7 - $5 >> 11;
   HEAP32[$0 + 160 >> 2] = $5 + $7 >> 11;
   $5 = $22 - $17 | 0;
   $7 = Math_imul($10, 16154);
   $10 = Math_imul($9 - $10 | 0, 3363);
   $12 = $13 + ($12 + ($7 + $10 | 0) | 0) | 0;
   HEAP32[$0 + 288 >> 2] = $5 - $12 >> 11;
   HEAP32[$0 + 192 >> 2] = $5 + $12 >> 11;
   $5 = $20 - $16 | 0;
   $10 = $6 + ($11 + ($10 + Math_imul($9, -15038) | 0) | 0) | 0;
   HEAP32[$0 + 256 >> 2] = $5 - $10 >> 11;
   HEAP32[$0 + 224 >> 2] = $5 + $10 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $30 = $30 + 1 | 0;
   if (($30 | 0) != 8) {
    continue
   }
   break;
  };
  $1 = $18 - 384 | 0;
  $0 = $23;
  $10 = 0;
  while (1) {
   $9 = HEAP32[$0 + 4 >> 2];
   $5 = HEAP32[$0 + 28 >> 2];
   $12 = Math_imul($9 + $5 | 0, -7373);
   $7 = HEAP32[$0 + 20 >> 2];
   $6 = $7 + $9 | 0;
   $11 = HEAP32[$0 + 12 >> 2];
   $18 = $11 + $5 | 0;
   $13 = Math_imul($6 + $18 | 0, 9633);
   $8 = HEAP32[$0 + 24 >> 2];
   $16 = HEAP32[$0 + 8 >> 2];
   $15 = Math_imul($8 + $16 | 0, 4433);
   $2 = HEAP32[($10 << 2) + $3 >> 2] + $4 | 0;
   $14 = $12 + Math_imul($9, 12299) | 0;
   $9 = $13 + Math_imul($6, -3196) | 0;
   $6 = $14 + $9 | 0;
   $16 = $15 + Math_imul($16, 6270) | 0;
   $14 = HEAP32[$0 >> 2] + 16400 | 0;
   $19 = HEAP32[$0 + 16 >> 2];
   $20 = $14 + $19 << 13;
   $17 = $16 + $20 | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + ($6 + $17 >>> 18 & 1023) | 0];
   HEAP8[$2 + 7 | 0] = HEAPU8[$1 + ($17 - $6 >>> 18 & 1023) | 0];
   $13 = $13 + Math_imul($18, -16069) | 0;
   $6 = Math_imul($11, 25172);
   $11 = Math_imul($7 + $11 | 0, -20995);
   $6 = $13 + ($6 + $11 | 0) | 0;
   $15 = $15 + Math_imul($8, -15137) | 0;
   $18 = $14 - $19 << 13;
   $8 = $15 + $18 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + ($6 + $8 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$1 + ($8 - $6 >>> 18 & 1023) | 0];
   $9 = $9 + ($11 + Math_imul($7, 16819) | 0) | 0;
   $7 = $18 - $15 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + ($9 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[$1 + ($7 - $9 >>> 18 & 1023) | 0];
   $9 = $13 + ($12 + Math_imul($5, 2446) | 0) | 0;
   $5 = $20 - $16 | 0;
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + ($9 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 4 | 0] = HEAPU8[$1 + ($5 - $9 >>> 18 & 1023) | 0];
   $0 = $0 + 32 | 0;
   $10 = $10 + 1 | 0;
   if (($10 | 0) != 16) {
    continue
   }
   break;
  };
  __stack_pointer = $23 + 512 | 0;
 }
 
 function jpeg_idct_7x14($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  $22 = __stack_pointer - 400 | 0;
  __stack_pointer = $22;
  $19 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $22;
  while (1) {
   $8 = HEAP32[$1 + 192 >> 2];
   $9 = HEAP16[$2 + 96 >> 1];
   $12 = HEAP32[$1 + 64 >> 2];
   $16 = HEAP16[$2 + 32 >> 1];
   $11 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $5 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $10 = $11 + Math_imul($5, -11586) >> 11;
   $13 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $6 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $7 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $17 = $6 - $7 | 0;
   $14 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $15 = $13 + ($17 - $14 | 0) << 2;
   HEAP32[$0 + 280 >> 2] = $10 - $15;
   HEAP32[$0 + 84 >> 2] = $10 + $15;
   $9 = Math_imul($8, $9);
   $12 = Math_imul($12, $16);
   $16 = Math_imul($9 + $12 | 0, 9058);
   $10 = $16 + Math_imul($9, -14084) | 0;
   $15 = $11 + Math_imul($5, 2578) | 0;
   $20 = $10 + $15 | 0;
   $8 = $13 << 13;
   $13 = Math_imul($7 + $14 | 0, -1297) - $8 | 0;
   $23 = Math_imul($6 + $7 | 0, 10935);
   $21 = $13 + ($23 + Math_imul($7, -3474) | 0) | 0;
   HEAP32[$0 + 336 >> 2] = $20 - $21 >> 11;
   HEAP32[$0 + 28 >> 2] = $20 + $21 >> 11;
   $9 = Math_imul($9, -11295) + Math_imul($12, 5027) | 0;
   $20 = $11 + Math_imul($5, -7223) | 0;
   $21 = $9 + $20 | 0;
   $18 = $13;
   $13 = $6 + $14 | 0;
   $24 = Math_imul($13, 9810);
   $18 = $18 + ($24 + Math_imul($14, -19447) | 0) | 0;
   HEAP32[$0 + 308 >> 2] = $21 - $18 >> 11;
   HEAP32[$0 + 56 >> 2] = $21 + $18 >> 11;
   $10 = $15 - $10 | 0;
   $17 = Math_imul($17, 3826) - $8 | 0;
   $18 = Math_imul($7, 5529);
   $7 = Math_imul($14 - $7 | 0, 11512);
   $15 = $17 + ($18 + $7 | 0) | 0;
   HEAP32[$0 + 224 >> 2] = $10 - $15 >> 11;
   HEAP32[$0 + 140 >> 2] = $10 + $15 >> 11;
   $5 = $11 + Math_imul($5, 10438) | 0;
   $11 = $16 + Math_imul($12, 2237) | 0;
   $12 = $5 - $11 | 0;
   $16 = Math_imul($13, 6164);
   $10 = $17 + ($16 + Math_imul($6, -8693) | 0) | 0;
   HEAP32[$0 + 196 >> 2] = $12 - $10 >> 11;
   HEAP32[$0 + 168 >> 2] = $12 + $10 >> 11;
   $5 = $5 + $11 | 0;
   $6 = $8 + ((Math_imul($6, -9232) + $23 | 0) + $24 | 0) | 0;
   HEAP32[$0 + 364 >> 2] = $5 - $6 >> 11;
   HEAP32[$0 >> 2] = $5 + $6 >> 11;
   $6 = $20 - $9 | 0;
   $7 = $8 + ($16 + ($7 + Math_imul($14, -13850) | 0) | 0) | 0;
   HEAP32[$0 + 252 >> 2] = $6 - $7 >> 11;
   HEAP32[$0 + 112 >> 2] = $6 + $7 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $25 = $25 + 1 | 0;
   if (($25 | 0) != 7) {
    continue
   }
   break;
  };
  $1 = $19 - 384 | 0;
  $0 = $22;
  $7 = 0;
  while (1) {
   $6 = HEAP32[$0 + 12 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $11 = Math_imul($6 + $5 | 0, 7663);
   $14 = HEAP32[$0 + 16 >> 2];
   $8 = HEAP32[$0 + 24 >> 2];
   $9 = Math_imul($14 - $8 | 0, 7223);
   $2 = HEAP32[($7 << 2) + $3 >> 2] + $4 | 0;
   $12 = HEAP32[$0 + 20 >> 2];
   $16 = Math_imul($12 + $5 | 0, 5027);
   $19 = Math_imul($5 - $6 | 0, 1395);
   $10 = $16 + ($11 - $19 | 0) | 0;
   $18 = $9 + Math_imul($8, -637) | 0;
   $5 = HEAP32[$0 + 8 >> 2];
   $17 = $5 + $8 | 0;
   $8 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
   $13 = Math_imul($17, 10438) + $8 | 0;
   $15 = $18 + $13 | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + ($10 + $15 >>> 18 & 1023) | 0];
   HEAP8[$2 + 6 | 0] = HEAPU8[$1 + ($15 - $10 >>> 18 & 1023) | 0];
   $6 = Math_imul($6 + $12 | 0, -11295);
   $11 = $6 + ($11 + $19 | 0) | 0;
   $19 = Math_imul($5 - $14 | 0, 2578);
   $9 = $9 + ($19 + ($8 + Math_imul($14, -15083) | 0) | 0) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + ($11 + $9 >>> 18 & 1023) | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[$1 + ($9 - $11 >>> 18 & 1023) | 0];
   $6 = $6 + (Math_imul($12, 15326) + $16 | 0) | 0;
   $5 = $13 + ($19 + Math_imul($5, -20239) | 0) | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + ($6 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 4 | 0] = HEAPU8[$1 + ($5 - $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + ($8 + Math_imul($14 - $17 | 0, 11585) >>> 18 & 1023) | 0];
   $0 = $0 + 28 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != 14) {
    continue
   }
   break;
  };
  __stack_pointer = $22 + 400 | 0;
 }
 
 function jpeg_idct_6x12($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
  $19 = __stack_pointer - 288 | 0;
  __stack_pointer = $19;
  $20 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $19;
  while (1) {
   $12 = HEAP32[$1 + 128 >> 2];
   $13 = HEAP16[$2 + 64 >> 1];
   $8 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $9 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $6 = $8 - $9 | 0;
   $10 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $5 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $14 = $10 - $5 | 0;
   $7 = Math_imul($6 + $14 | 0, 4433);
   $15 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
   $16 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $17 = $15 - $16 << 13;
   $11 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $18 = $17 + $11 | 0;
   $6 = $7 + Math_imul($6, 6270) | 0;
   HEAP32[$0 + 240 >> 2] = $18 - $6 >> 11;
   HEAP32[$0 + 24 >> 2] = $6 + $18 >> 11;
   $6 = $11 - $17 | 0;
   $7 = $7 + Math_imul($14, -15137) | 0;
   HEAP32[$0 + 168 >> 2] = $6 - $7 >> 11;
   HEAP32[$0 + 96 >> 2] = $7 + $6 >> 11;
   $12 = Math_imul(Math_imul($12, $13), 10033);
   $13 = $12 + $11 | 0;
   $6 = $16 << 13;
   $14 = $6 + Math_imul($15, 11190) | 0;
   $16 = $13 - $14 | 0;
   $18 = $5 + $8 | 0;
   $7 = Math_imul($18 + $9 | 0, 7053);
   $17 = Math_imul($10, -4433);
   $21 = $7 + (($17 + Math_imul($8, -5540) | 0) + Math_imul($9, -16244) | 0) | 0;
   HEAP32[$0 + 144 >> 2] = $16 - $21 >> 11;
   HEAP32[$0 + 120 >> 2] = $16 + $21 >> 11;
   $13 = $13 + $14 | 0;
   $14 = Math_imul($8, 2295);
   $8 = Math_imul($10, 10703);
   $10 = $7 + Math_imul($18, 2139) | 0;
   $14 = ($14 + $8 | 0) + $10 | 0;
   HEAP32[$0 + 264 >> 2] = $13 - $14 >> 11;
   HEAP32[$0 >> 2] = $13 + $14 >> 11;
   $15 = Math_imul($15, 2998) - $6 | 0;
   $11 = $11 - $12 | 0;
   $12 = $15 + $11 | 0;
   $6 = $17 + Math_imul($5, -12112) | 0;
   $5 = Math_imul($5 + $9 | 0, -8565);
   $10 = $10 + ($6 + $5 | 0) | 0;
   HEAP32[$0 + 216 >> 2] = $12 - $10 >> 11;
   HEAP32[$0 + 48 >> 2] = $10 + $12 >> 11;
   $11 = $11 - $15 | 0;
   $9 = $5 + ($7 + (Math_imul($9, 12998) - $8 | 0) | 0) | 0;
   HEAP32[$0 + 192 >> 2] = $11 - $9 >> 11;
   HEAP32[$0 + 72 >> 2] = $9 + $11 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $22 = $22 + 1 | 0;
   if (($22 | 0) != 6) {
    continue
   }
   break;
  };
  $1 = $20 - 384 | 0;
  $0 = $19;
  $9 = 0;
  while (1) {
   $8 = HEAP32[$0 + 20 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $11 = Math_imul($8 + $5 | 0, 2998);
   $2 = HEAP32[($9 << 2) + $3 >> 2] + $4 | 0;
   $10 = HEAP32[$0 + 12 >> 2];
   $7 = $11 + ($10 + $5 << 13) | 0;
   $20 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
   $15 = HEAP32[$0 + 16 >> 2];
   $12 = $20 + Math_imul($15, 5793) | 0;
   $13 = Math_imul(HEAP32[$0 + 8 >> 2], 10033);
   $6 = $12 + $13 | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + ($7 + $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[$1 + ($6 - $7 >>> 18 & 1023) | 0];
   $5 = $5 - ($8 + $10 | 0) << 13;
   $7 = $20 + Math_imul($15, -11586) | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + ($5 + $7 >>> 18 & 1023) | 0];
   HEAP8[$2 + 4 | 0] = HEAPU8[$1 + ($7 - $5 >>> 18 & 1023) | 0];
   $8 = $11 + ($8 - $10 << 13) | 0;
   $5 = $12 - $13 | 0;
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + ($8 + $5 >>> 18 & 1023) | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + ($5 - $8 >>> 18 & 1023) | 0];
   $0 = $0 + 24 | 0;
   $9 = $9 + 1 | 0;
   if (($9 | 0) != 12) {
    continue
   }
   break;
  };
  __stack_pointer = $19 + 288 | 0;
 }
 
 function jpeg_idct_5x10($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $19 = __stack_pointer - 208 | 0;
  __stack_pointer = $19;
  $13 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $0 = $19;
  while (1) {
   $5 = HEAP32[$1 + 192 >> 2];
   $11 = HEAP16[$2 + 96 >> 1];
   $7 = HEAP32[$1 + 64 >> 2];
   $14 = HEAP16[$2 + 32 >> 1];
   $9 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
   $6 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $12 = $9 + Math_imul($6, -11586) >> 11;
   $8 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $15 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $16 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $17 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $10 = $16 - $17 | 0;
   $18 = $8 - ($15 + $10 | 0) << 2;
   HEAP32[$0 + 140 >> 2] = $12 - $18;
   HEAP32[$0 + 40 >> 2] = $12 + $18;
   $11 = Math_imul($5, $11);
   $7 = Math_imul($7, $14);
   $5 = Math_imul($11 + $7 | 0, 6810);
   $7 = $5 + Math_imul($7, 4209) | 0;
   $14 = $9 + Math_imul($6, 9373) | 0;
   $12 = $7 + $14 | 0;
   $15 = $15 << 13;
   $18 = $15 + Math_imul($10, 2531) | 0;
   $16 = $16 + $17 | 0;
   $17 = Math_imul($16, 7791);
   $20 = $18 + ($17 + Math_imul($8, 11443) | 0) | 0;
   HEAP32[$0 + 180 >> 2] = $12 - $20 >> 11;
   HEAP32[$0 >> 2] = $12 + $20 >> 11;
   $6 = $9 + Math_imul($6, -3580) | 0;
   $9 = $5 + Math_imul($11, -17828) | 0;
   $5 = $6 - $9 | 0;
   $10 = $15 + Math_imul($10, -6627) | 0;
   $11 = Math_imul($16, 4815);
   $12 = $10 + (Math_imul($8, 5260) - $11 | 0) | 0;
   HEAP32[$0 + 120 >> 2] = $5 - $12 >> 11;
   HEAP32[$0 + 60 >> 2] = $5 + $12 >> 11;
   $5 = $14 - $7 | 0;
   $7 = $18 + (Math_imul($8, 1812) - $17 | 0) | 0;
   HEAP32[$0 + 100 >> 2] = $5 - $7 >> 11;
   HEAP32[$0 + 80 >> 2] = $5 + $7 >> 11;
   $6 = $6 + $9 | 0;
   $8 = Math_imul($8, 10323) - ($10 + $11 | 0) | 0;
   HEAP32[$0 + 160 >> 2] = $6 - $8 >> 11;
   HEAP32[$0 + 20 >> 2] = $6 + $8 >> 11;
   $0 = $0 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + 2 | 0;
   $21 = $21 + 1 | 0;
   if (($21 | 0) != 5) {
    continue
   }
   break;
  };
  $1 = $13 - 384 | 0;
  $0 = $19;
  $8 = 0;
  while (1) {
   $9 = HEAP32[$0 + 12 >> 2];
   $10 = HEAP32[$0 + 4 >> 2];
   $6 = Math_imul($9 + $10 | 0, 6810);
   $2 = HEAP32[($8 << 2) + $3 >> 2] + $4 | 0;
   $10 = $6 + Math_imul($10, 4209) | 0;
   $7 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
   $5 = HEAP32[$0 + 8 >> 2];
   $13 = HEAP32[$0 + 16 >> 2];
   $11 = $5 - $13 | 0;
   $14 = $7 + Math_imul($11, 2896) | 0;
   $5 = Math_imul($5 + $13 | 0, 6476);
   $13 = $14 + $5 | 0;
   HEAP8[$2 | 0] = HEAPU8[$1 + ($10 + $13 >>> 18 & 1023) | 0];
   HEAP8[$2 + 4 | 0] = HEAPU8[$1 + ($13 - $10 >>> 18 & 1023) | 0];
   $6 = $6 + Math_imul($9, -17828) | 0;
   $9 = $14 - $5 | 0;
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + ($6 + $9 >>> 18 & 1023) | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + ($9 - $6 >>> 18 & 1023) | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + ($7 + Math_imul($11, 268423872) >>> 18 & 1023) | 0];
   $0 = $0 + 20 | 0;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != 10) {
    continue
   }
   break;
  };
  __stack_pointer = $19 + 208 | 0;
 }
 
 function jpeg_idct_4x8($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $17 = HEAP32[$0 + 336 >> 2];
  $1 = HEAP32[$1 + 84 >> 2];
  $10 = __stack_pointer - 128 | 0;
  $0 = $10;
  $11 = 4;
  while (1) {
   block1 : {
    block : {
     $5 = HEAPU16[$2 + 32 >> 1];
     $6 = HEAP16[$2 + 16 >> 1];
     if (($5 | $6) & 65535) {
      break block
     }
     $5 = 0;
     if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
      break block
     }
     if (HEAPU16[$2 + 112 >> 1]) {
      break block
     }
     $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 2;
     HEAP32[$0 + 96 >> 2] = $5;
     HEAP32[$0 + 80 >> 2] = $5;
     HEAP32[$0 + 64 >> 2] = $5;
     HEAP32[$0 + 48 >> 2] = $5;
     HEAP32[$0 + 32 >> 2] = $5;
     HEAP32[$0 + 16 >> 2] = $5;
     HEAP32[$0 >> 2] = $5;
     $7 = 112;
     break block1;
    }
    $12 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
    $8 = Math_imul(HEAP32[$1 + 64 >> 2], $5 << 16 >> 16);
    $5 = Math_imul($12 + $8 | 0, 4433);
    $18 = $5 + Math_imul($8, 6270) | 0;
    $13 = Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$1 + 128 >> 2]) << 13;
    $14 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
    $19 = $13 + $14 | 0;
    $15 = $18 + $19 | 0;
    $6 = Math_imul($6, HEAP32[$1 + 32 >> 2]);
    $8 = Math_imul(HEAP32[$1 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
    $20 = Math_imul($6 + $8 | 0, -7373);
    $23 = $20 + Math_imul($6, 12299) | 0;
    $9 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
    $21 = $9 + $8 | 0;
    $7 = $6;
    $6 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
    $16 = $7 + $6 | 0;
    $22 = Math_imul($21 + $16 | 0, 9633);
    $16 = $22 + Math_imul($16, -3196) | 0;
    $7 = $23 + $16 | 0;
    HEAP32[$0 + 112 >> 2] = $15 - $7 >> 11;
    HEAP32[$0 >> 2] = $15 + $7 >> 11;
    $5 = $5 + Math_imul($12, -15137) | 0;
    $12 = $14 - $13 | 0;
    $13 = $5 + $12 | 0;
    $14 = Math_imul($21, -16069) + $22 | 0;
    $7 = Math_imul($9, 25172);
    $9 = Math_imul($6 + $9 | 0, -20995);
    $15 = $14 + ($7 + $9 | 0) | 0;
    HEAP32[$0 + 96 >> 2] = $13 - $15 >> 11;
    HEAP32[$0 + 16 >> 2] = $13 + $15 >> 11;
    $5 = $12 - $5 | 0;
    $6 = $16 + ($9 + Math_imul($6, 16819) | 0) | 0;
    HEAP32[$0 + 80 >> 2] = $5 - $6 >> 11;
    HEAP32[$0 + 32 >> 2] = $5 + $6 >> 11;
    $5 = $14 + (Math_imul($8, 2446) + $20 | 0) | 0;
    $6 = $19 - $18 | 0;
    HEAP32[$0 + 48 >> 2] = $5 + $6 >> 11;
    $5 = $6 - $5 >> 11;
    $7 = 64;
   }
   HEAP32[$7 + $0 >> 2] = $5;
   $2 = $2 + 2 | 0;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $5 = $11 >>> 0 > 1;
   $11 = $11 - 1 | 0;
   if ($5) {
    continue
   }
   break;
  };
  $0 = $17 - 384 | 0;
  $2 = $10;
  $11 = 0;
  while (1) {
   $5 = HEAP32[$2 + 12 >> 2];
   $6 = HEAP32[$2 + 4 >> 2];
   $10 = Math_imul($5 + $6 | 0, 4433);
   $1 = HEAP32[($11 << 2) + $3 >> 2] + $4 | 0;
   $6 = $10 + Math_imul($6, 6270) | 0;
   $8 = HEAP32[$2 + 8 >> 2];
   $9 = HEAP32[$2 >> 2] + 16400 | 0;
   $17 = $8 + $9 << 13;
   HEAP8[$1 | 0] = HEAPU8[$0 + ($6 + $17 >>> 18 & 1023) | 0];
   HEAP8[$1 + 3 | 0] = HEAPU8[$0 + ($17 - $6 >>> 18 & 1023) | 0];
   $10 = $10 + Math_imul($5, -15137) | 0;
   $5 = $9 - $8 << 13;
   HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($10 + $5 >>> 18 & 1023) | 0];
   HEAP8[$1 + 2 | 0] = HEAPU8[$0 + ($5 - $10 >>> 18 & 1023) | 0];
   $2 = $2 + 16 | 0;
   $11 = $11 + 1 | 0;
   if (($11 | 0) != 8) {
    continue
   }
   break;
  };
 }
 
 function jpeg_idct_3x6($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $12 = HEAP32[$0 + 336 >> 2];
  $0 = HEAP32[$1 + 84 >> 2];
  $8 = __stack_pointer - 80 | 0;
  $1 = $8;
  while (1) {
   $6 = HEAP32[$0 + 64 >> 2];
   $13 = HEAP16[$2 + 32 >> 1];
   $7 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $11 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $14 = $7 + Math_imul($11, -11586) >> 11;
   $5 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
   $9 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $10 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $15 = $5 - ($9 + $10 | 0) << 2;
   HEAP32[$1 + 48 >> 2] = $14 - $15;
   HEAP32[$1 + 12 >> 2] = $14 + $15;
   $6 = Math_imul(Math_imul($6, $13), 10033);
   $13 = $7 + Math_imul($11, 5793) | 0;
   $11 = $6 + $13 | 0;
   $7 = $5 + $9 << 13;
   $5 = Math_imul($5 + $10 | 0, 2998);
   $7 = $7 + $5 | 0;
   HEAP32[$1 + 60 >> 2] = $11 - $7 >> 11;
   HEAP32[$1 >> 2] = $11 + $7 >> 11;
   $6 = $13 - $6 | 0;
   $5 = $5 + ($10 - $9 << 13) | 0;
   HEAP32[$1 + 36 >> 2] = $6 - $5 >> 11;
   HEAP32[$1 + 24 >> 2] = $5 + $6 >> 11;
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = $2 + 2 | 0;
   $16 = $16 + 1 | 0;
   if (($16 | 0) != 3) {
    continue
   }
   break;
  };
  $0 = $12 - 384 | 0;
  $2 = $8;
  $1 = 0;
  while (1) {
   $8 = HEAP32[($1 << 2) + $3 >> 2] + $4 | 0;
   $9 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
   $5 = HEAP32[$2 + 8 >> 2];
   $10 = $9 + Math_imul($5, 5793) | 0;
   $12 = Math_imul(HEAP32[$2 + 4 >> 2], 10033);
   HEAP8[$8 | 0] = HEAPU8[$0 + ($10 + $12 >>> 18 & 1023) | 0];
   HEAP8[$8 + 2 | 0] = HEAPU8[$0 + ($10 - $12 >>> 18 & 1023) | 0];
   HEAP8[$8 + 1 | 0] = HEAPU8[$0 + ($9 + Math_imul($5, 268423870) >>> 18 & 1023) | 0];
   $2 = $2 + 12 | 0;
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 6) {
    continue
   }
   break;
  };
 }
 
 function jpeg_idct_2x4($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $1 = HEAP32[$1 + 84 >> 2];
  $5 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $7 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $6 = Math_imul($5 + $7 | 0, 4433);
  $8 = HEAP32[$3 >> 2] + $4 | 0;
  $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
  $9 = Math_imul(HEAP32[$1 + 100 >> 2], HEAP16[$2 + 50 >> 1]);
  $10 = Math_imul(HEAP32[$1 + 36 >> 2], HEAP16[$2 + 18 >> 1]);
  $11 = Math_imul($9 + $10 | 0, 4433);
  $10 = $11 + Math_imul($10, 6270) | 0;
  $12 = Math_imul(HEAP32[$1 + 68 >> 2], HEAPU16[$2 + 34 >> 1]);
  $13 = Math_imul(HEAP32[$1 + 4 >> 2], HEAPU16[$2 + 2 >> 1]);
  $14 = $12 + $13 << 13;
  $15 = $10 + $14 | 0;
  $16 = Math_imul(HEAP32[$1 + 64 >> 2], HEAPU16[$2 + 32 >> 1]);
  $1 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]);
  $2 = $16 + $1 << 13;
  $7 = $6 + Math_imul($7, 6270) | 0;
  $17 = ($2 + $7 | 0) + 33587200 | 0;
  HEAP8[$8 | 0] = HEAPU8[$0 + ($15 + $17 >>> 16 & 1023) | 0];
  HEAP8[$8 + 1 | 0] = HEAPU8[$0 + ($17 - $15 >>> 16 & 1023) | 0];
  $8 = HEAP32[$3 + 4 >> 2] + $4 | 0;
  $6 = $6 + Math_imul($5, -15137) | 0;
  $1 = $1 - $16 << 13;
  $5 = ($6 + $1 | 0) + 33587200 | 0;
  $9 = Math_imul($9, -15137) + $11 | 0;
  $11 = $13 - $12 << 13;
  $12 = $9 + $11 | 0;
  HEAP8[$8 | 0] = HEAPU8[$0 + ($5 + $12 >>> 16 & 1023) | 0];
  HEAP8[$8 + 1 | 0] = HEAPU8[$0 + ($5 - $12 >>> 16 & 1023) | 0];
  $5 = HEAP32[$3 + 8 >> 2] + $4 | 0;
  $1 = ($1 - $6 | 0) + 33587200 | 0;
  $6 = $11 - $9 | 0;
  HEAP8[$5 | 0] = HEAPU8[$0 + ($1 + $6 >>> 16 & 1023) | 0];
  HEAP8[$5 + 1 | 0] = HEAPU8[$0 + ($1 - $6 >>> 16 & 1023) | 0];
  $1 = HEAP32[$3 + 12 >> 2] + $4 | 0;
  $2 = ($2 - $7 | 0) + 33587200 | 0;
  $3 = $14 - $10 | 0;
  HEAP8[$1 | 0] = HEAPU8[$0 + ($2 + $3 >>> 16 & 1023) | 0];
  HEAP8[$1 + 1 | 0] = HEAPU8[$0 + ($2 - $3 >>> 16 & 1023) | 0];
 }
 
 function jpeg_idct_1x2($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
  $1 = HEAP32[$1 + 84 >> 2];
  $5 = Math_imul(HEAP32[$1 + 32 >> 2], HEAPU16[$2 + 16 >> 1]);
  $1 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]) + 4100 | 0;
  HEAP8[HEAP32[$3 >> 2] + $4 | 0] = HEAPU8[$0 + ($5 + $1 >>> 3 & 1023) | 0];
  HEAP8[HEAP32[$3 + 4 >> 2] + $4 | 0] = HEAPU8[$0 + ($1 - $5 >>> 3 & 1023) | 0];
 }
 
 function self_destruct($0) {
  $0 = $0 | 0;
  free_pool($0, 1);
  free_pool($0, 0);
  emscripten_builtin_free(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function free_pool($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($1 >>> 0 >= 2) {
    $2 = HEAP32[$0 >> 2];
    HEAP32[$2 + 24 >> 2] = $1;
    HEAP32[$2 + 20 >> 2] = 15;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    break block;
   }
   if (($1 | 0) != 1) {
    break block
   }
   $2 = HEAP32[$3 + 68 >> 2];
   if ($2) {
    while (1) {
     if (HEAP32[$2 + 40 >> 2]) {
      HEAP32[$2 + 40 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($0, $2 + 48 | 0);
     }
     $2 = HEAP32[$2 + 44 >> 2];
     if ($2) {
      continue
     }
     break;
    }
   }
   HEAP32[$3 + 68 >> 2] = 0;
   $2 = HEAP32[$3 + 72 >> 2];
   if ($2) {
    while (1) {
     if (HEAP32[$2 + 40 >> 2]) {
      HEAP32[$2 + 40 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($0, $2 + 48 | 0);
     }
     $2 = HEAP32[$2 + 44 >> 2];
     if ($2) {
      continue
     }
     break;
    }
   }
   HEAP32[$3 + 72 >> 2] = 0;
  }
  $1 = ($1 << 2) + $3 | 0;
  $2 = HEAP32[$1 + 60 >> 2];
  HEAP32[$1 + 60 >> 2] = 0;
  if ($2) {
   while (1) {
    $0 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 8 >> 2] | 0;
    emscripten_builtin_free($2);
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - ($4 + 16 | 0);
    $2 = $0;
    if ($2) {
     continue
    }
    break;
   }
  }
  $2 = HEAP32[$1 + 52 >> 2];
  HEAP32[$1 + 52 >> 2] = 0;
  if ($2) {
   while (1) {
    $0 = HEAP32[$2 >> 2];
    $1 = (HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 8 >> 2] | 0) + 16 | 0;
    emscripten_builtin_free($2);
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - $1;
    $2 = $0;
    if ($2) {
     continue
    }
    break;
   }
  }
 }
 
 function access_virt_barray($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = $2 + $3 | 0;
  if (HEAP32[$1 >> 2] ? HEAPU32[$1 + 12 >> 2] < $3 >>> 0 | $8 >>> 0 > HEAPU32[$1 + 4 >> 2] : 1) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 23;
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
  }
  $3 = HEAP32[$1 + 24 >> 2];
  block2 : {
   if ($3 >>> 0 <= $2 >>> 0 & $3 + HEAP32[$1 + 16 >> 2] >>> 0 >= $8 >>> 0) {
    break block2
   }
   if (!HEAP32[$1 + 40 >> 2]) {
    $3 = HEAP32[$0 >> 2];
    HEAP32[$3 + 20 >> 2] = 71;
    FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
   }
   if (HEAP32[$1 + 36 >> 2]) {
    $6 = HEAP32[$1 + 16 >> 2];
    block3 : {
     if (($6 | 0) <= 0) {
      break block3
     }
     $9 = $1 + 48 | 0;
     $10 = HEAP32[$1 + 8 >> 2] << 7;
     $7 = Math_imul($10, HEAP32[$1 + 24 >> 2]);
     $5 = HEAP32[$1 + 20 >> 2];
     $3 = 0;
     while (1) {
      $6 = $6 - $3 | 0;
      $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
      $6 = HEAP32[$1 + 24 >> 2] + $3 | 0;
      $11 = HEAP32[$1 + 28 >> 2] - $6 | 0;
      $5 = ($5 | 0) < ($11 | 0) ? $5 : $11;
      $6 = HEAP32[$1 + 4 >> 2] - $6 | 0;
      $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
      if (($5 | 0) <= 0) {
       break block3
      }
      $5 = Math_imul($5, $10);
      FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($0, $9, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $7, $5);
      $7 = $5 + $7 | 0;
      $5 = HEAP32[$1 + 20 >> 2];
      $3 = $5 + $3 | 0;
      $6 = HEAP32[$1 + 16 >> 2];
      if (($3 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$1 + 36 >> 2] = 0;
   }
   $3 = 0;
   $6 = HEAP32[$1 + 16 >> 2];
   $5 = $8 - $6 | 0;
   $5 = HEAPU32[$1 + 24 >> 2] < $2 >>> 0 ? $2 : ($5 | 0) > 0 ? $5 : 0;
   HEAP32[$1 + 24 >> 2] = $5;
   if (($6 | 0) <= 0) {
    break block2
   }
   $9 = $1 + 48 | 0;
   $10 = HEAP32[$1 + 8 >> 2] << 7;
   $7 = Math_imul($10, $5);
   $5 = HEAP32[$1 + 20 >> 2];
   while (1) {
    $6 = $6 - $3 | 0;
    $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
    $6 = HEAP32[$1 + 24 >> 2] + $3 | 0;
    $11 = HEAP32[$1 + 28 >> 2] - $6 | 0;
    $5 = ($5 | 0) < ($11 | 0) ? $5 : $11;
    $6 = HEAP32[$1 + 4 >> 2] - $6 | 0;
    $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
    if (($5 | 0) <= 0) {
     break block2
    }
    $5 = Math_imul($5, $10);
    FUNCTION_TABLE[HEAP32[$1 + 48 >> 2]]($0, $9, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $7, $5);
    $7 = $5 + $7 | 0;
    $5 = HEAP32[$1 + 20 >> 2];
    $3 = $5 + $3 | 0;
    $6 = HEAP32[$1 + 16 >> 2];
    if (($3 | 0) < ($6 | 0)) {
     continue
    }
    break;
   };
  }
  $5 = HEAP32[$1 + 28 >> 2];
  block9 : {
   block10 : {
    block4 : {
     if ($8 >>> 0 <= $5 >>> 0) {
      break block4
     }
     block8 : {
      block6 : {
       block7 : {
        block5 : {
         if ($2 >>> 0 > $5 >>> 0) {
          if (!$4) {
           break block5
          }
          $3 = HEAP32[$0 >> 2];
          HEAP32[$3 + 20 >> 2] = 23;
          FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
          $5 = $2;
          break block6;
         }
         if ($4) {
          break block6
         }
         break block7;
        }
        $5 = $2;
       }
       if (HEAP32[$1 + 32 >> 2]) {
        break block8
       }
       $3 = HEAP32[$0 >> 2];
       HEAP32[$3 + 20 >> 2] = 23;
       FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
       break block9;
      }
      HEAP32[$1 + 28 >> 2] = $8;
      if (!HEAP32[$1 + 32 >> 2]) {
       break block10
      }
     }
     $0 = HEAP32[$1 + 24 >> 2];
     $3 = $5 - $0 | 0;
     $6 = $8 - $0 | 0;
     if ($3 >>> 0 >= $6 >>> 0) {
      break block4
     }
     $0 = HEAP32[$1 + 8 >> 2] << 7;
     $9 = $8 - $5 & 3;
     if ($9) {
      $7 = 0;
      while (1) {
       if ($0) {
        wasm2js_memory_fill(HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], 0, $0)
       }
       $3 = $3 + 1 | 0;
       $7 = $7 + 1 | 0;
       if (($9 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if ($5 - $8 >>> 0 > 4294967292) {
      break block4
     }
     while (1) {
      $5 = $3 << 2;
      $7 = !$0;
      if (!$7) {
       wasm2js_memory_fill(HEAP32[$5 + HEAP32[$1 >> 2] >> 2], 0, $0)
      }
      if (!$7) {
       wasm2js_memory_fill(HEAP32[($5 + HEAP32[$1 >> 2] | 0) + 4 >> 2], 0, $0)
      }
      if (!$7) {
       wasm2js_memory_fill(HEAP32[($5 + HEAP32[$1 >> 2] | 0) + 8 >> 2], 0, $0)
      }
      if (!$7) {
       wasm2js_memory_fill(HEAP32[($5 + HEAP32[$1 >> 2] | 0) + 12 >> 2], 0, $0)
      }
      $3 = $3 + 4 | 0;
      if (($6 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$4) {
     break block9
    }
   }
   HEAP32[$1 + 36 >> 2] = 1;
  }
  return HEAP32[$1 >> 2] + ($2 - HEAP32[$1 + 24 >> 2] << 2) | 0;
 }
 
 function access_virt_sarray($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = $2 + $3 | 0;
  if (HEAP32[$1 >> 2] ? HEAPU32[$1 + 12 >> 2] < $3 >>> 0 | $8 >>> 0 > HEAPU32[$1 + 4 >> 2] : 1) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 23;
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
  }
  $3 = HEAP32[$1 + 24 >> 2];
  block2 : {
   if ($3 >>> 0 <= $2 >>> 0 & $3 + HEAP32[$1 + 16 >> 2] >>> 0 >= $8 >>> 0) {
    break block2
   }
   if (!HEAP32[$1 + 40 >> 2]) {
    $3 = HEAP32[$0 >> 2];
    HEAP32[$3 + 20 >> 2] = 71;
    FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
   }
   if (HEAP32[$1 + 36 >> 2]) {
    $6 = HEAP32[$1 + 16 >> 2];
    block3 : {
     if (($6 | 0) <= 0) {
      break block3
     }
     $9 = $1 + 48 | 0;
     $10 = HEAP32[$1 + 8 >> 2];
     $7 = Math_imul($10, HEAP32[$1 + 24 >> 2]);
     $5 = HEAP32[$1 + 20 >> 2];
     $3 = 0;
     while (1) {
      $6 = $6 - $3 | 0;
      $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
      $6 = HEAP32[$1 + 24 >> 2] + $3 | 0;
      $11 = HEAP32[$1 + 28 >> 2] - $6 | 0;
      $5 = ($5 | 0) < ($11 | 0) ? $5 : $11;
      $6 = HEAP32[$1 + 4 >> 2] - $6 | 0;
      $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
      if (($5 | 0) <= 0) {
       break block3
      }
      $5 = Math_imul($5, $10);
      FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($0, $9, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $7, $5);
      $7 = $5 + $7 | 0;
      $5 = HEAP32[$1 + 20 >> 2];
      $3 = $5 + $3 | 0;
      $6 = HEAP32[$1 + 16 >> 2];
      if (($3 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$1 + 36 >> 2] = 0;
   }
   $3 = 0;
   $6 = HEAP32[$1 + 16 >> 2];
   $5 = $8 - $6 | 0;
   $5 = HEAPU32[$1 + 24 >> 2] < $2 >>> 0 ? $2 : ($5 | 0) > 0 ? $5 : 0;
   HEAP32[$1 + 24 >> 2] = $5;
   if (($6 | 0) <= 0) {
    break block2
   }
   $9 = $1 + 48 | 0;
   $10 = HEAP32[$1 + 8 >> 2];
   $7 = Math_imul($10, $5);
   $5 = HEAP32[$1 + 20 >> 2];
   while (1) {
    $6 = $6 - $3 | 0;
    $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
    $6 = HEAP32[$1 + 24 >> 2] + $3 | 0;
    $11 = HEAP32[$1 + 28 >> 2] - $6 | 0;
    $5 = ($5 | 0) < ($11 | 0) ? $5 : $11;
    $6 = HEAP32[$1 + 4 >> 2] - $6 | 0;
    $5 = ($5 | 0) < ($6 | 0) ? $5 : $6;
    if (($5 | 0) <= 0) {
     break block2
    }
    $5 = Math_imul($5, $10);
    FUNCTION_TABLE[HEAP32[$1 + 48 >> 2]]($0, $9, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $7, $5);
    $7 = $5 + $7 | 0;
    $5 = HEAP32[$1 + 20 >> 2];
    $3 = $5 + $3 | 0;
    $6 = HEAP32[$1 + 16 >> 2];
    if (($3 | 0) < ($6 | 0)) {
     continue
    }
    break;
   };
  }
  $5 = HEAP32[$1 + 28 >> 2];
  block9 : {
   block10 : {
    block4 : {
     if ($8 >>> 0 <= $5 >>> 0) {
      break block4
     }
     block8 : {
      block6 : {
       block7 : {
        block5 : {
         if ($2 >>> 0 > $5 >>> 0) {
          if (!$4) {
           break block5
          }
          $3 = HEAP32[$0 >> 2];
          HEAP32[$3 + 20 >> 2] = 23;
          FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
          $5 = $2;
          break block6;
         }
         if ($4) {
          break block6
         }
         break block7;
        }
        $5 = $2;
       }
       if (HEAP32[$1 + 32 >> 2]) {
        break block8
       }
       $3 = HEAP32[$0 >> 2];
       HEAP32[$3 + 20 >> 2] = 23;
       FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
       break block9;
      }
      HEAP32[$1 + 28 >> 2] = $8;
      if (!HEAP32[$1 + 32 >> 2]) {
       break block10
      }
     }
     $0 = HEAP32[$1 + 24 >> 2];
     $3 = $5 - $0 | 0;
     $6 = $8 - $0 | 0;
     if ($3 >>> 0 >= $6 >>> 0) {
      break block4
     }
     $0 = HEAP32[$1 + 8 >> 2];
     $9 = $8 - $5 & 3;
     if ($9) {
      $7 = 0;
      while (1) {
       if ($0) {
        wasm2js_memory_fill(HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], 0, $0)
       }
       $3 = $3 + 1 | 0;
       $7 = $7 + 1 | 0;
       if (($9 | 0) != ($7 | 0)) {
        continue
       }
       break;
      };
     }
     if ($5 - $8 >>> 0 > 4294967292) {
      break block4
     }
     while (1) {
      $5 = $3 << 2;
      $7 = !$0;
      if (!$7) {
       wasm2js_memory_fill(HEAP32[$5 + HEAP32[$1 >> 2] >> 2], 0, $0)
      }
      if (!$7) {
       wasm2js_memory_fill(HEAP32[($5 + HEAP32[$1 >> 2] | 0) + 4 >> 2], 0, $0)
      }
      if (!$7) {
       wasm2js_memory_fill(HEAP32[($5 + HEAP32[$1 >> 2] | 0) + 8 >> 2], 0, $0)
      }
      if (!$7) {
       wasm2js_memory_fill(HEAP32[($5 + HEAP32[$1 >> 2] | 0) + 12 >> 2], 0, $0)
      }
      $3 = $3 + 4 | 0;
      if (($6 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    if (!$4) {
     break block9
    }
   }
   HEAP32[$1 + 36 >> 2] = 1;
  }
  return HEAP32[$1 >> 2] + ($2 - HEAP32[$1 + 24 >> 2] << 2) | 0;
 }
 
 function realize_virt_arrays($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$5 + 68 >> 2];
  if ($1) {
   while (1) {
    if (!HEAP32[$1 >> 2]) {
     $3 = HEAP32[$1 + 8 >> 2];
     $4 = Math_imul($3, HEAP32[$1 + 4 >> 2]) + $4 | 0;
     $2 = Math_imul($3, HEAP32[$1 + 12 >> 2]) + $2 | 0;
    }
    $1 = HEAP32[$1 + 44 >> 2];
    if ($1) {
     continue
    }
    break;
   }
  }
  $1 = HEAP32[$5 + 72 >> 2];
  if ($1) {
   while (1) {
    if (!HEAP32[$1 >> 2]) {
     $3 = HEAP32[$1 + 8 >> 2] << 7;
     $4 = Math_imul($3, HEAP32[$1 + 4 >> 2]) + $4 | 0;
     $2 = Math_imul($3, HEAP32[$1 + 12 >> 2]) + $2 | 0;
    }
    $1 = HEAP32[$1 + 44 >> 2];
    if ($1) {
     continue
    }
    break;
   }
  }
  block : {
   if (($2 | 0) <= 0) {
    break block
   }
   $3 = 1e9;
   $1 = HEAP32[HEAP32[$0 + 4 >> 2] + 44 >> 2];
   $1 = $1 ? $1 - HEAP32[$5 + 76 >> 2] | 0 : $4;
   if (($1 | 0) < ($4 | 0)) {
    $1 = ($1 | 0) / ($2 | 0) | 0;
    $3 = ($1 | 0) <= 1 ? 1 : $1;
   }
   $1 = HEAP32[$5 + 68 >> 2];
   if ($1) {
    while (1) {
     if (!HEAP32[$1 >> 2]) {
      $2 = HEAP32[$1 + 4 >> 2];
      $4 = HEAP32[$1 + 12 >> 2];
      block1 : {
       if (((($2 - 1 >>> 0) / ($4 >>> 0) | 0) + 1 | 0) <= ($3 | 0)) {
        HEAP32[$1 + 16 >> 2] = $2;
        break block1;
       }
       HEAP32[$1 + 16 >> 2] = Math_imul($3, $4);
       jpeg_open_backing_store($0);
       HEAP32[$1 + 40 >> 2] = 1;
       $2 = HEAP32[$1 + 16 >> 2];
      }
      (wasm2js_i32$0 = $1, wasm2js_i32$1 = alloc_sarray($0, 1, HEAP32[$1 + 8 >> 2], $2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $2 = HEAP32[$5 + 80 >> 2];
      HEAP32[$1 + 36 >> 2] = 0;
      HEAP32[$1 + 24 >> 2] = 0;
      HEAP32[$1 + 28 >> 2] = 0;
      HEAP32[$1 + 20 >> 2] = $2;
     }
     $1 = HEAP32[$1 + 44 >> 2];
     if ($1) {
      continue
     }
     break;
    }
   }
   $1 = HEAP32[$5 + 72 >> 2];
   if (!$1) {
    break block
   }
   while (1) {
    if (!HEAP32[$1 >> 2]) {
     $2 = HEAP32[$1 + 4 >> 2];
     $4 = HEAP32[$1 + 12 >> 2];
     block2 : {
      if (((($2 - 1 >>> 0) / ($4 >>> 0) | 0) + 1 | 0) <= ($3 | 0)) {
       HEAP32[$1 + 16 >> 2] = $2;
       break block2;
      }
      HEAP32[$1 + 16 >> 2] = Math_imul($3, $4);
      jpeg_open_backing_store($0);
      HEAP32[$1 + 40 >> 2] = 1;
      $2 = HEAP32[$1 + 16 >> 2];
     }
     (wasm2js_i32$0 = $1, wasm2js_i32$1 = alloc_barray($0, 1, HEAP32[$1 + 8 >> 2], $2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $2 = HEAP32[$5 + 80 >> 2];
     HEAP32[$1 + 36 >> 2] = 0;
     HEAP32[$1 + 24 >> 2] = 0;
     HEAP32[$1 + 28 >> 2] = 0;
     HEAP32[$1 + 20 >> 2] = $2;
    }
    $1 = HEAP32[$1 + 44 >> 2];
    if ($1) {
     continue
    }
    break;
   };
  }
 }
 
 function request_virt_barray($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  if (($1 | 0) != 1) {
   $7 = HEAP32[$0 >> 2];
   HEAP32[$7 + 24 >> 2] = $1;
   HEAP32[$7 + 20 >> 2] = 15;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $0 = alloc_small($0, $1, 128);
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = HEAP32[$6 + 72 >> 2];
  HEAP32[$6 + 72 >> 2] = $0;
  return $0 | 0;
 }
 
 function request_virt_sarray($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  if (($1 | 0) != 1) {
   $7 = HEAP32[$0 >> 2];
   HEAP32[$7 + 24 >> 2] = $1;
   HEAP32[$7 + 20 >> 2] = 15;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $0 = alloc_small($0, $1, 128);
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = HEAP32[$6 + 68 >> 2];
  HEAP32[$6 + 68 >> 2] = $0;
  return $0 | 0;
 }
 
 function alloc_barray($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $10 = $2 << 7;
  $5 = 999999984 / ($10 >>> 0) | 0;
  $4 = HEAP32[$0 + 4 >> 2];
  if ($10 >>> 0 >= 999999985) {
   $7 = HEAP32[$0 >> 2];
   HEAP32[$7 + 20 >> 2] = 72;
   FUNCTION_TABLE[HEAP32[$7 >> 2]]($0);
  }
  $5 = ($3 | 0) > ($5 | 0) ? $5 : $3;
  HEAP32[$4 + 80 >> 2] = $5;
  $11 = alloc_small($0, $1, $3 << 2);
  if ($3) {
   $13 = $1 >>> 0 < 2;
   $9 = $2 << 7;
   $7 = 0;
   while (1) {
    $4 = HEAP32[$0 + 4 >> 2];
    $2 = $3 - $7 | 0;
    $5 = $2 >>> 0 > $5 >>> 0 ? $5 : $2;
    $6 = Math_imul($10, $5);
    if ($6 >>> 0 >= 999999985) {
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 20 >> 2] = 56;
     HEAP32[$2 + 24 >> 2] = 3;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    if (!$13) {
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 24 >> 2] = $1;
     HEAP32[$2 + 20 >> 2] = 15;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    $8 = $6 | 16;
    $2 = emscripten_builtin_malloc($8);
    if (!$2) {
     $12 = HEAP32[$0 >> 2];
     HEAP32[$12 + 20 >> 2] = 56;
     HEAP32[$12 + 24 >> 2] = 4;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    HEAP32[$4 + 76 >> 2] = $8 + HEAP32[$4 + 76 >> 2];
    $4 = $4 + ($1 << 2) | 0;
    $8 = HEAP32[$4 + 60 >> 2];
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = $6;
    HEAP32[$2 >> 2] = $8;
    HEAP32[$4 + 60 >> 2] = $2;
    block : {
     if (!$5) {
      break block
     }
     $2 = $2 + 16 | 0;
     $6 = 0;
     $4 = $5;
     $8 = $5 & 3;
     if ($8) {
      while (1) {
       HEAP32[($7 << 2) + $11 >> 2] = $2;
       $4 = $4 - 1 | 0;
       $7 = $7 + 1 | 0;
       $2 = $2 + $9 | 0;
       $6 = $6 + 1 | 0;
       if (($8 | 0) != ($6 | 0)) {
        continue
       }
       break;
      }
     }
     if ($5 >>> 0 < 4) {
      break block
     }
     while (1) {
      $6 = ($7 << 2) + $11 | 0;
      HEAP32[$6 >> 2] = $2;
      $2 = $2 + $9 | 0;
      $8 = $2 + $9 | 0;
      HEAP32[$6 + 8 >> 2] = $8;
      HEAP32[$6 + 4 >> 2] = $2;
      $2 = $8 + $9 | 0;
      HEAP32[$6 + 12 >> 2] = $2;
      $2 = $2 + $9 | 0;
      $7 = $7 + 4 | 0;
      $4 = $4 - 4 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    if ($3 >>> 0 > $7 >>> 0) {
     continue
    }
    break;
   };
  }
  return $11 | 0;
 }
 
 function alloc_sarray($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $7 = 999999984 / ($2 >>> 0) | 0;
  $4 = HEAP32[$0 + 4 >> 2];
  if ($2 >>> 0 >= 999999985) {
   $8 = HEAP32[$0 >> 2];
   HEAP32[$8 + 20 >> 2] = 72;
   FUNCTION_TABLE[HEAP32[$8 >> 2]]($0);
  }
  $7 = ($3 | 0) > ($7 | 0) ? $7 : $3;
  HEAP32[$4 + 80 >> 2] = $7;
  $11 = alloc_small($0, $1, $3 << 2);
  if ($3) {
   $12 = $1 >>> 0 < 2;
   $8 = 0;
   while (1) {
    $6 = HEAP32[$0 + 4 >> 2];
    $4 = $3 - $8 | 0;
    $7 = $4 >>> 0 > $7 >>> 0 ? $7 : $4;
    $4 = Math_imul($7, $2);
    if ($4 >>> 0 >= 999999985) {
     $5 = HEAP32[$0 >> 2];
     HEAP32[$5 + 20 >> 2] = 56;
     HEAP32[$5 + 24 >> 2] = 3;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    if (!$12) {
     $5 = HEAP32[$0 >> 2];
     HEAP32[$5 + 24 >> 2] = $1;
     HEAP32[$5 + 20 >> 2] = 15;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    $5 = $4 + 7 & -8;
    $9 = $5 + 16 | 0;
    $4 = emscripten_builtin_malloc($9);
    if (!$4) {
     $10 = HEAP32[$0 >> 2];
     HEAP32[$10 + 20 >> 2] = 56;
     HEAP32[$10 + 24 >> 2] = 4;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    HEAP32[$6 + 76 >> 2] = $9 + HEAP32[$6 + 76 >> 2];
    $6 = $6 + ($1 << 2) | 0;
    $9 = HEAP32[$6 + 60 >> 2];
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = $5;
    HEAP32[$4 >> 2] = $9;
    HEAP32[$6 + 60 >> 2] = $4;
    block : {
     if (!$7) {
      break block
     }
     $6 = $4 + 16 | 0;
     $5 = 0;
     $4 = $7;
     $9 = $4 & 3;
     if ($9) {
      while (1) {
       HEAP32[($8 << 2) + $11 >> 2] = $6;
       $4 = $4 - 1 | 0;
       $6 = $2 + $6 | 0;
       $8 = $8 + 1 | 0;
       $5 = $5 + 1 | 0;
       if (($9 | 0) != ($5 | 0)) {
        continue
       }
       break;
      }
     }
     if ($7 >>> 0 < 4) {
      break block
     }
     while (1) {
      $5 = ($8 << 2) + $11 | 0;
      HEAP32[$5 >> 2] = $6;
      $6 = $2 + $6 | 0;
      $9 = $6 + $2 | 0;
      $10 = $9 + $2 | 0;
      HEAP32[$5 + 12 >> 2] = $10;
      HEAP32[$5 + 8 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $6;
      $8 = $8 + 4 | 0;
      $6 = $2 + $10 | 0;
      $4 = $4 - 4 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    if ($3 >>> 0 > $8 >>> 0) {
     continue
    }
    break;
   };
  }
  return $11 | 0;
 }
 
 function alloc_large($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$0 + 4 >> 2];
  if ($2 >>> 0 >= 999999985) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 56;
   HEAP32[$3 + 24 >> 2] = 3;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  if ($1 >>> 0 >= 2) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 24 >> 2] = $1;
   HEAP32[$3 + 20 >> 2] = 15;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $3 = $2 + 7 & -8;
  $5 = $3 + 16 | 0;
  $2 = emscripten_builtin_malloc($5);
  if (!$2) {
   $6 = HEAP32[$0 >> 2];
   HEAP32[$6 + 20 >> 2] = 56;
   HEAP32[$6 + 24 >> 2] = 4;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + $5;
  $0 = ($1 << 2) + $4 | 0;
  $1 = HEAP32[$0 + 60 >> 2];
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$0 + 60 >> 2] = $2;
  return $2 + 16 | 0;
 }
 
 function alloc_small($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  if ($2 >>> 0 >= 999999985) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 56;
   HEAP32[$3 + 24 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  if ($1 >>> 0 >= 2) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 24 >> 2] = $1;
   HEAP32[$3 + 20 >> 2] = 15;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $4 = $2 + 7 & -8;
  block1 : {
   block : {
    $7 = ($1 << 2) + $6 | 0;
    $2 = HEAP32[$7 + 52 >> 2];
    if (!$2) {
     $3 = 0;
     break block;
    }
    while (1) {
     $3 = $2;
     if (HEAPU32[$2 + 8 >> 2] < $4 >>> 0) {
      $2 = HEAP32[$2 >> 2];
      if ($2) {
       continue
      }
      break block;
     }
     break;
    };
    $1 = $3;
    break block1;
   }
   $1 = HEAP32[($1 << 2) + ($3 ? 52024 : 52016) >> 2];
   $2 = 999999984 - $4 | 0;
   $2 = $1 >>> 0 < $2 >>> 0 ? $1 : $2;
   $8 = $4 + 16 | 0;
   $5 = $2 + $8 | 0;
   $1 = emscripten_builtin_malloc($5);
   if (!$1) {
    while (1) {
     if ($2 >>> 0 <= 99) {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 20 >> 2] = 56;
      HEAP32[$1 + 24 >> 2] = 2;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     }
     $2 = $2 >>> 1 | 0;
     $5 = $8 + $2 | 0;
     $1 = emscripten_builtin_malloc($5);
     if (!$1) {
      continue
     }
     break;
    }
   }
   HEAP32[$6 + 76 >> 2] = HEAP32[$6 + 76 >> 2] + $5;
   HEAP32[$1 + 8 >> 2] = $2 + $4;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   if (!$3) {
    HEAP32[$7 + 52 >> 2] = $1;
    break block1;
   }
   HEAP32[$3 >> 2] = $1;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $0 + $4;
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - $4;
  return ($0 + $1 | 0) + 16 | 0;
 }
 
 function jpeg_open_backing_store($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 51;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 
 function new_color_map_1_quant($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 47;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 
 function start_pass_1_quant($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = HEAP32[$0 + 484 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$1 + 20 >> 2];
  block4 : {
   block3 : {
    switch (HEAP32[$0 + 88 >> 2]) {
    case 0:
     if (HEAP32[$0 + 120 >> 2] == 3) {
      HEAP32[$1 + 4 >> 2] = 257;
      return;
     }
     HEAP32[$1 + 4 >> 2] = 258;
     return;
    case 1:
     $2 = HEAP32[$0 + 120 >> 2];
     HEAP32[$1 + 48 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = ($2 | 0) == 3 ? 259 : 260;
     if (!HEAP32[$1 + 28 >> 2]) {
      create_colorindex($0)
     }
     if (HEAP32[$1 + 52 >> 2]) {
      break block4
     }
     $2 = HEAP32[$0 + 120 >> 2];
     if (($2 | 0) <= 0) {
      break block4
     }
     $1 = HEAP32[$0 + 484 >> 2];
     $6 = $1 + 52 | 0;
     $7 = $1 + 32 | 0;
     while (1) {
      $8 = $4 << 2;
      $5 = HEAP32[$8 + $7 >> 2];
      $1 = 0;
      block6 : {
       block5 : {
        if (!$4) {
         break block5
        }
        while (1) {
         $3 = $1 << 2;
         if (($5 | 0) != HEAP32[$3 + $7 >> 2]) {
          $1 = $1 + 1 | 0;
          if (($4 | 0) != ($1 | 0)) {
           continue
          }
          break block5;
         }
         break;
        };
        $3 = HEAP32[$3 + $6 >> 2];
        if ($3) {
         break block6
        }
       }
       $5 = ($5 << 9) - 512 | 0;
       $2 = 0;
       $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
       while (1) {
        $9 = ($2 << 6) + $3 | 0;
        $10 = ($2 << 4) + 52032 | 0;
        $1 = 0;
        while (1) {
         HEAP32[($1 << 2) + $9 >> 2] = (Math_imul(255 - (HEAPU8[$1 + $10 | 0] << 1) | 0, 255) | 0) / ($5 | 0);
         $11 = $1 | 1;
         HEAP32[($11 << 2) + $9 >> 2] = (Math_imul(255 - (HEAPU8[$10 + $11 | 0] << 1) | 0, 255) | 0) / ($5 | 0);
         $1 = $1 + 2 | 0;
         if (($1 | 0) != 16) {
          continue
         }
         break;
        };
        $2 = $2 + 1 | 0;
        if (($2 | 0) != 16) {
         continue
        }
        break;
       };
       $2 = HEAP32[$0 + 120 >> 2];
      }
      HEAP32[$6 + $8 >> 2] = $3;
      $4 = $4 + 1 | 0;
      if (($4 | 0) < ($2 | 0)) {
       continue
      }
      break;
     };
     break block4;
    case 2:
     HEAP32[$1 + 84 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 261;
     $4 = $1 + 68 | 0;
     block7 : {
      if (HEAP32[$1 + 68 >> 2]) {
       $2 = HEAP32[$0 + 120 >> 2];
       break block7;
      }
      if (HEAP32[$0 + 120 >> 2] <= 0) {
       break block4
      }
      $3 = (HEAP32[$0 + 112 >> 2] << 1) + 4 | 0;
      $1 = 0;
      while (1) {
       (wasm2js_i32$0 = $4 + ($1 << 2) | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $1 = $1 + 1 | 0;
       $2 = HEAP32[$0 + 120 >> 2];
       if (($1 | 0) < ($2 | 0)) {
        continue
       }
       break;
      };
     }
     if (($2 | 0) <= 0) {
      break block4
     }
     $2 = (HEAP32[$0 + 112 >> 2] << 1) + 4 | 0;
     $1 = 0;
     while (1) {
      if ($2) {
       wasm2js_memory_fill(HEAP32[$4 + ($1 << 2) >> 2], 0, $2)
      }
      $1 = $1 + 1 | 0;
      if (($1 | 0) < HEAP32[$0 + 120 >> 2]) {
       continue
      }
      break;
     };
     break block4;
    default:
     break block3;
    };
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 49;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
  }
 }
 
 function create_colorindex($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = HEAP32[$0 + 484 >> 2];
  $2 = HEAP32[$0 + 88 >> 2];
  $1 = ($2 | 0) == 1;
  HEAP32[$5 + 28 >> 2] = $1;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, $1 ? 766 : 256, HEAP32[$0 + 120 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  if (HEAP32[$0 + 120 >> 2] > 0) {
   $11 = $5 + 32 | 0;
   $7 = HEAP32[$5 + 20 >> 2];
   $9 = ($2 | 0) != 1;
   while (1) {
    $2 = $8 << 2;
    $1 = HEAP32[$2 + $11 >> 2];
    $7 = ($7 | 0) / ($1 | 0) | 0;
    $3 = $2 + HEAP32[$5 + 24 >> 2] | 0;
    $2 = HEAP32[$3 >> 2];
    if (!$9) {
     $2 = $2 + 255 | 0;
     HEAP32[$3 >> 2] = $2;
    }
    $6 = $1 + 254 | 0;
    $10 = ($1 << 1) - 2 | 0;
    $4 = ($6 | 0) / ($10 | 0) | 0;
    $1 = 0;
    $3 = 0;
    while (1) {
     if (($3 | 0) > ($4 | 0)) {
      while (1) {
       $1 = $1 + 1 | 0;
       $4 = ($6 + Math_imul($1, 510) | 0) / ($10 | 0) | 0;
       if (($4 | 0) < ($3 | 0)) {
        continue
       }
       break;
      }
     }
     HEAP8[$2 + $3 | 0] = Math_imul($1, $7);
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 256) {
      continue
     }
     break;
    };
    if (!$9) {
     $3 = HEAPU8[$2 | 0];
     $1 = 1;
     while (1) {
      $6 = $2 - $1 | 0;
      HEAP8[$6 | 0] = $3;
      $4 = $2 + $1 | 0;
      HEAP8[$4 + 255 | 0] = HEAPU8[$2 + 255 | 0];
      HEAP8[($1 ^ -1) + $2 | 0] = $3;
      HEAP8[$4 + 256 | 0] = HEAPU8[$2 + 255 | 0];
      HEAP8[$6 - 2 | 0] = $3;
      HEAP8[$4 + 257 | 0] = HEAPU8[$2 + 255 | 0];
      $1 = $1 + 3 | 0;
      if (($1 | 0) != 256) {
       continue
      }
      break;
     };
    }
    $8 = $8 + 1 | 0;
    if (($8 | 0) < HEAP32[$0 + 120 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function color_quantize3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if (($3 | 0) > 0) {
   $4 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
   $7 = HEAP32[$4 + 8 >> 2];
   $8 = HEAP32[$4 + 4 >> 2];
   $9 = HEAP32[$4 >> 2];
   $6 = HEAP32[$0 + 112 >> 2];
   $11 = $6 - 1 | 0;
   $12 = $6 & 1;
   while (1) {
    block : {
     if (!$6) {
      break block
     }
     $4 = $10 << 2;
     $0 = HEAP32[$4 + $1 >> 2];
     $5 = HEAP32[$2 + $4 >> 2];
     if ($12) {
      HEAP8[$5 | 0] = HEAPU8[HEAPU8[$0 + 2 | 0] + $7 | 0] + (HEAPU8[HEAPU8[$0 + 1 | 0] + $8 | 0] + HEAPU8[HEAPU8[$0 | 0] + $9 | 0] | 0);
      $5 = $5 + 1 | 0;
      $0 = $0 + 3 | 0;
      $4 = $11;
     } else {
      $4 = $6
     }
     if (($6 | 0) == 1) {
      break block
     }
     while (1) {
      HEAP8[$5 | 0] = HEAPU8[HEAPU8[$0 + 2 | 0] + $7 | 0] + (HEAPU8[HEAPU8[$0 + 1 | 0] + $8 | 0] + HEAPU8[HEAPU8[$0 | 0] + $9 | 0] | 0);
      HEAP8[$5 + 1 | 0] = HEAPU8[HEAPU8[$0 + 5 | 0] + $7 | 0] + (HEAPU8[HEAPU8[$0 + 4 | 0] + $8 | 0] + HEAPU8[HEAPU8[$0 + 3 | 0] + $9 | 0] | 0);
      $5 = $5 + 2 | 0;
      $0 = $0 + 6 | 0;
      $4 = $4 - 2 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $10 = $10 + 1 | 0;
    if (($10 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function color_quantize($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  if (($3 | 0) > 0) {
   $13 = HEAP32[$0 + 112 >> 2];
   $14 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
   $6 = HEAP32[$0 + 120 >> 2];
   $16 = $6 & 2147483644;
   $15 = $6 & 3;
   $17 = $6 >>> 0 < 4;
   while (1) {
    if ($13) {
     $0 = $7 << 2;
     $8 = HEAP32[$0 + $1 >> 2];
     $9 = HEAP32[$0 + $2 >> 2];
     $10 = $13;
     while (1) {
      block : {
       if (($6 | 0) <= 0) {
        $4 = 0;
        break block;
       }
       $11 = 0;
       $0 = $8;
       $12 = 0;
       $4 = 0;
       $5 = 0;
       block1 : {
        if (!$17) {
         while (1) {
          $18 = $4;
          $4 = ($5 << 2) + $14 | 0;
          $4 = ((($18 + HEAPU8[HEAP32[$4 >> 2] + HEAPU8[$0 | 0] | 0] | 0) + HEAPU8[HEAP32[$4 + 4 >> 2] + HEAPU8[$0 + 1 | 0] | 0] | 0) + HEAPU8[HEAP32[$4 + 8 >> 2] + HEAPU8[$0 + 2 | 0] | 0] | 0) + HEAPU8[HEAP32[$4 + 12 >> 2] + HEAPU8[$0 + 3 | 0] | 0] | 0;
          $5 = $5 + 4 | 0;
          $0 = $0 + 4 | 0;
          $12 = $12 + 4 | 0;
          if (($16 | 0) != ($12 | 0)) {
           continue
          }
          break;
         };
         if (!$15) {
          break block1
         }
        }
        while (1) {
         $4 = HEAPU8[HEAP32[($5 << 2) + $14 >> 2] + HEAPU8[$0 | 0] | 0] + $4 | 0;
         $5 = $5 + 1 | 0;
         $0 = $0 + 1 | 0;
         $11 = $11 + 1 | 0;
         if (($11 | 0) != ($15 | 0)) {
          continue
         }
         break;
        };
       }
       $8 = $6 + $8 | 0;
      }
      HEAP8[$9 | 0] = $4;
      $9 = $9 + 1 | 0;
      $10 = $10 - 1 | 0;
      if ($10) {
       continue
      }
      break;
     };
    }
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function quantize3_ord_dither($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  if (($3 | 0) > 0) {
   $11 = HEAP32[$0 + 112 >> 2];
   $4 = HEAP32[$0 + 484 >> 2];
   $0 = HEAP32[$4 + 24 >> 2];
   $12 = HEAP32[$0 + 8 >> 2];
   $13 = HEAP32[$0 + 4 >> 2];
   $14 = HEAP32[$0 >> 2];
   $6 = HEAP32[$4 + 48 >> 2];
   while (1) {
    if ($11) {
     $0 = $6 << 6;
     $15 = $0 + HEAP32[$4 + 60 >> 2] | 0;
     $16 = $0 + HEAP32[$4 + 56 >> 2] | 0;
     $17 = $0 + HEAP32[$4 + 52 >> 2] | 0;
     $5 = $7 << 2;
     $0 = HEAP32[$5 + $1 >> 2];
     $8 = HEAP32[$2 + $5 >> 2];
     $9 = 0;
     $5 = $11;
     while (1) {
      $10 = $9 << 2;
      HEAP8[$8 | 0] = (HEAPU8[HEAPU8[$0 + 1 | 0] + (HEAP32[$16 + $10 >> 2] + $13 | 0) | 0] + HEAPU8[HEAPU8[$0 | 0] + (HEAP32[$10 + $17 >> 2] + $14 | 0) | 0] | 0) + HEAPU8[HEAPU8[$0 + 2 | 0] + (HEAP32[$10 + $15 >> 2] + $12 | 0) | 0];
      $8 = $8 + 1 | 0;
      $0 = $0 + 3 | 0;
      $9 = $9 + 1 & 15;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $6 = $6 + 1 & 15;
    HEAP32[$4 + 48 >> 2] = $6;
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function quantize_ord_dither($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  if (($3 | 0) > 0) {
   $8 = HEAP32[$0 + 120 >> 2];
   $5 = HEAP32[$0 + 112 >> 2];
   $16 = $5 & -2;
   $17 = $5 & 1;
   $9 = HEAP32[$0 + 484 >> 2];
   $18 = $9 + 52 | 0;
   while (1) {
    $0 = $10 << 2;
    $14 = $0 + $2 | 0;
    if ($5) {
     wasm2js_memory_fill(HEAP32[$14 >> 2], 0, $5)
    }
    $15 = HEAP32[$9 + 48 >> 2];
    if (($8 | 0) > 0) {
     $19 = $0 + $1 | 0;
     $6 = 0;
     $20 = $15 << 6;
     while (1) {
      block : {
       if (!$5) {
        break block
       }
       $0 = $6 << 2;
       $11 = HEAP32[$0 + $18 >> 2] + $20 | 0;
       $12 = HEAP32[$0 + HEAP32[$9 + 24 >> 2] >> 2];
       $4 = HEAP32[$19 >> 2] + $6 | 0;
       $0 = HEAP32[$14 >> 2];
       $7 = 0;
       $13 = 0;
       if (($5 | 0) != 1) {
        while (1) {
         HEAP8[$0 | 0] = HEAPU8[$0 | 0] + HEAPU8[HEAPU8[$4 | 0] + (HEAP32[($7 << 2) + $11 >> 2] + $12 | 0) | 0];
         $4 = $4 + $8 | 0;
         HEAP8[$0 + 1 | 0] = HEAPU8[$0 + 1 | 0] + HEAPU8[HEAPU8[$4 | 0] + (HEAP32[(($7 + 1 & 15) << 2) + $11 >> 2] + $12 | 0) | 0];
         $0 = $0 + 2 | 0;
         $7 = $7 + 2 & 15;
         $4 = $4 + $8 | 0;
         $13 = $13 + 2 | 0;
         if (($16 | 0) != ($13 | 0)) {
          continue
         }
         break;
        };
        if (!$17) {
         break block
        }
       }
       HEAP8[$0 | 0] = HEAPU8[$0 | 0] + HEAPU8[HEAPU8[$4 | 0] + (HEAP32[($7 << 2) + $11 >> 2] + $12 | 0) | 0];
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($8 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$9 + 48 >> 2] = $15 + 1 & 15;
    $10 = $10 + 1 | 0;
    if (($10 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function quantize_fs_dither($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  if (($3 | 0) > 0) {
   $21 = HEAP32[$0 + 336 >> 2];
   $9 = HEAP32[$0 + 120 >> 2];
   $22 = 0 - $9 | 0;
   $7 = HEAP32[$0 + 484 >> 2];
   $16 = $7 + 68 | 0;
   $8 = HEAP32[$0 + 112 >> 2];
   $17 = $8 - 1 | 0;
   $23 = Math_imul($17, $9);
   $24 = ($9 | 0) <= 0;
   while (1) {
    $0 = $12 << 2;
    $18 = $0 + $2 | 0;
    if ($8) {
     wasm2js_memory_fill(HEAP32[$18 >> 2], 0, $8)
    }
    if (!$24) {
     $25 = $0 + $1 | 0;
     $6 = 0;
     while (1) {
      $10 = HEAP32[$25 >> 2] + $6 | 0;
      $0 = HEAP32[$18 >> 2];
      block : {
       if (HEAP32[$7 + 84 >> 2]) {
        $4 = (HEAP32[($6 << 2) + $16 >> 2] + ($8 << 1) | 0) + 2 | 0;
        $0 = $0 + $17 | 0;
        $10 = $10 + $23 | 0;
        $13 = -1;
        $5 = $22;
        break block;
       }
       $4 = HEAP32[($6 << 2) + $16 >> 2];
       $13 = 1;
       $5 = $9;
      }
      $26 = $5;
      $5 = 0;
      if ($8) {
       $11 = $6 << 2;
       $27 = HEAP32[$11 + HEAP32[$7 + 16 >> 2] >> 2];
       $28 = HEAP32[$11 + HEAP32[$7 + 24 >> 2] >> 2];
       $19 = 0;
       $14 = $8;
       $15 = 0;
       while (1) {
        $11 = ($13 << 1) + $4 | 0;
        $20 = HEAPU8[HEAPU8[$10 | 0] + (((HEAP16[$11 >> 1] + $5 | 0) + 8 >> 4) + $21 | 0) | 0];
        $5 = HEAPU8[$20 + $28 | 0];
        HEAP8[$0 | 0] = $5 + HEAPU8[$0 | 0];
        $29 = $4;
        $4 = $20 - HEAPU8[$5 + $27 | 0] | 0;
        HEAP16[$29 >> 1] = Math_imul($4, 3) + $15;
        $5 = Math_imul($4, 7);
        $15 = Math_imul($4, 5) + $19 | 0;
        $0 = $0 + $13 | 0;
        $10 = $10 + $26 | 0;
        $19 = $4;
        $4 = $11;
        $14 = $14 - 1 | 0;
        if ($14) {
         continue
        }
        break;
       };
       $5 = $15;
      }
      HEAP16[$4 >> 1] = $5;
      $6 = $6 + 1 | 0;
      if (($9 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$7 + 84 >> 2] = !HEAP32[$7 + 84 >> 2];
    $12 = $12 + 1 | 0;
    if (($12 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function new_color_map_2_quant($0) {
  $0 = $0 | 0;
  HEAP32[HEAP32[$0 + 484 >> 2] + 28 >> 2] = 1;
 }
 
 function start_pass_2_quant($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 484 >> 2];
  $2 = HEAP32[$4 + 24 >> 2];
  block3 : {
   block4 : {
    block : {
     block1 : {
      if (!HEAP32[$0 + 88 >> 2]) {
       if ($1) {
        break block
       }
       $1 = 264;
       break block1;
      }
      HEAP32[$0 + 88 >> 2] = 2;
      if ($1) {
       break block
      }
      $1 = 265;
     }
     HEAP32[$4 + 8 >> 2] = 266;
     HEAP32[$4 + 4 >> 2] = $1;
     $1 = 1;
     $3 = HEAP32[$0 + 132 >> 2];
     block2 : {
      if (($3 | 0) <= 0) {
       $3 = 58
      } else {
       if ($3 >>> 0 < 257) {
        break block2
       }
       $1 = 256;
       $3 = 59;
      }
      $5 = HEAP32[$0 >> 2];
      HEAP32[$5 + 24 >> 2] = $1;
      HEAP32[$5 + 20 >> 2] = $3;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     }
     if (HEAP32[$0 + 88 >> 2] != 2) {
      break block3
     }
     $3 = Math_imul(HEAP32[$0 + 112 >> 2], 6) + 12 | 0;
     $5 = HEAP32[$4 + 32 >> 2];
     if (!$5) {
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $3) | 0;
      HEAP32[$4 + 32 >> 2] = $5;
     }
     $1 = 0;
     if ($3) {
      wasm2js_memory_fill($5, 0, $3)
     }
     $3 = 36;
     if (HEAP32[$4 + 40 >> 2]) {
      break block4
     }
     init_error_limit($0);
     break block4;
    }
    HEAP32[$4 + 8 >> 2] = 267;
    HEAP32[$4 + 4 >> 2] = 268;
    $1 = 1;
    $3 = 28;
   }
   HEAP32[$4 + $3 >> 2] = $1;
  }
  if (HEAP32[$4 + 28 >> 2]) {
   wasm2js_memory_fill(HEAP32[$2 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 4 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 8 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 12 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 16 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 20 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 24 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 28 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 32 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 36 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 40 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 44 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 48 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 52 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 56 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 60 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 64 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 68 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 72 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 76 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 80 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 84 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 88 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 92 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 96 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 100 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 104 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 108 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 112 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 116 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 120 >> 2], 0, 4096);
   wasm2js_memory_fill(HEAP32[$2 + 124 >> 2], 0, 4096);
   HEAP32[$4 + 28 >> 2] = 0;
  }
 }
 
 function init_error_limit($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = HEAP32[$0 + 484 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 2044) | 0;
  $2 = $0 + 1020 | 0;
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$0 + 1016 >> 2] = -1;
  HEAP32[$0 + 1020 >> 2] = 0;
  HEAP32[$0 + 1024 >> 2] = 1;
  HEAP32[$0 + 1028 >> 2] = 2;
  HEAP32[$0 + 1032 >> 2] = 3;
  HEAP32[$0 + 1036 >> 2] = 4;
  HEAP32[$0 + 1008 >> 2] = -3;
  HEAP32[$0 + 1012 >> 2] = -2;
  HEAP32[$0 + 1040 >> 2] = 5;
  HEAP32[$0 + 1044 >> 2] = 6;
  HEAP32[$0 + 1e3 >> 2] = -5;
  HEAP32[$0 + 1004 >> 2] = -4;
  HEAP32[$0 + 1048 >> 2] = 7;
  HEAP32[$0 + 1052 >> 2] = 8;
  HEAP32[$0 + 992 >> 2] = -7;
  HEAP32[$0 + 996 >> 2] = -6;
  HEAP32[$0 + 1056 >> 2] = 9;
  HEAP32[$0 + 1060 >> 2] = 10;
  HEAP32[$0 + 984 >> 2] = -9;
  HEAP32[$0 + 988 >> 2] = -8;
  HEAP32[$0 + 1064 >> 2] = 11;
  HEAP32[$0 + 1068 >> 2] = 12;
  HEAP32[$0 + 976 >> 2] = -11;
  HEAP32[$0 + 980 >> 2] = -10;
  HEAP32[$0 + 1072 >> 2] = 13;
  HEAP32[$0 + 1076 >> 2] = 14;
  HEAP32[$0 + 968 >> 2] = -13;
  HEAP32[$0 + 972 >> 2] = -12;
  HEAP32[$0 + 1080 >> 2] = 15;
  HEAP32[$0 + 960 >> 2] = -15;
  HEAP32[$0 + 964 >> 2] = -14;
  $0 = 16;
  $3 = 16;
  while (1) {
   $1 = $3 << 2;
   HEAP32[$1 + $2 >> 2] = $0;
   $4 = 0 - $0 | 0;
   HEAP32[$2 - $1 >> 2] = $4;
   $1 = $1 | 4;
   HEAP32[$1 + $2 >> 2] = $0;
   HEAP32[$2 - $1 >> 2] = $4;
   $0 = $0 + 1 | 0;
   $1 = 48;
   $3 = $3 + 2 | 0;
   if (($3 | 0) != 48) {
    continue
   }
   break;
  };
  while (1) {
   $0 = $1 << 2;
   HEAP32[$0 + $2 >> 2] = 32;
   HEAP32[$2 - $0 >> 2] = -32;
   $3 = $0 | 4;
   HEAP32[$3 + $2 >> 2] = 32;
   HEAP32[$2 - $3 >> 2] = -32;
   $3 = $0 | 8;
   HEAP32[$3 + $2 >> 2] = 32;
   HEAP32[$2 - $3 >> 2] = -32;
   $0 = $0 | 12;
   HEAP32[$0 + $2 >> 2] = 32;
   HEAP32[$2 - $0 >> 2] = -32;
   $1 = $1 + 4 | 0;
   if (($1 | 0) != 256) {
    continue
   }
   break;
  };
 }
 
 function pass2_no_dither($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  if (($3 | 0) > 0) {
   $9 = HEAP32[$0 + 112 >> 2];
   $14 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
   while (1) {
    if ($9) {
     $4 = $6 << 2;
     $5 = HEAP32[$4 + $1 >> 2];
     $7 = HEAP32[$2 + $4 >> 2];
     $4 = $9;
     while (1) {
      $10 = HEAPU8[$5 | 0] >>> 3 | 0;
      $11 = HEAPU8[$5 + 1 | 0] >>> 2 | 0;
      $12 = HEAPU8[$5 + 2 | 0] >>> 3 | 0;
      $13 = (HEAP32[($10 << 2) + $14 >> 2] + ($11 << 6) | 0) + ($12 << 1) | 0;
      $8 = HEAPU16[$13 >> 1];
      if (!$8) {
       fill_inverse_cmap($0, $10, $11, $12);
       $8 = HEAPU8[$13 | 0];
      }
      $5 = $5 + 3 | 0;
      HEAP8[$7 | 0] = $8 - 1;
      $7 = $7 + 1 | 0;
      $4 = $4 - 1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function pass2_fs_dither($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
  if (($3 | 0) > 0) {
   $17 = HEAP32[$0 + 336 >> 2];
   $4 = HEAP32[$0 + 136 >> 2];
   $32 = HEAP32[$4 + 8 >> 2];
   $33 = HEAP32[$4 + 4 >> 2];
   $34 = HEAP32[$4 >> 2];
   $13 = HEAP32[$0 + 484 >> 2];
   $18 = HEAP32[$13 + 40 >> 2];
   $35 = HEAP32[$13 + 24 >> 2];
   $14 = HEAP32[$0 + 112 >> 2];
   $36 = Math_imul($14, 6);
   $23 = $14 - 1 | 0;
   $37 = Math_imul($23, 3);
   while (1) {
    $4 = $19 << 2;
    $11 = HEAP32[$4 + $2 >> 2];
    $9 = HEAP32[$1 + $4 >> 2];
    $4 = $13;
    block : {
     if (HEAP32[$4 + 36 >> 2]) {
      $11 = $11 + $23 | 0;
      $9 = $9 + $37 | 0;
      $20 = -3;
      $24 = -1;
      $5 = 0;
      $7 = (HEAP32[$4 + 32 >> 2] + $36 | 0) + 6 | 0;
      break block;
     }
     $20 = 3;
     $24 = 1;
     $5 = 1;
     $7 = HEAP32[$13 + 32 >> 2];
    }
    HEAP32[$4 + 36 >> 2] = $5;
    $21 = 0;
    block1 : {
     if ($14) {
      $12 = 0;
      $8 = 0;
      $10 = 0;
      $25 = 0;
      $26 = 0;
      $27 = 0;
      $15 = 0;
      $16 = 0;
      $22 = $14;
      $4 = $7;
      while (1) {
       $6 = $11;
       $7 = ($20 << 1) + $4 | 0;
       $28 = HEAPU8[HEAPU8[$9 | 0] + (HEAP32[((HEAP16[$7 >> 1] + $12 | 0) + 8 >> 4 << 2) + $18 >> 2] + $17 | 0) | 0];
       $29 = $28 >>> 3 | 0;
       $30 = HEAPU8[HEAPU8[$9 + 1 | 0] + (HEAP32[((HEAP16[$7 + 2 >> 1] + $8 | 0) + 8 >> 4 << 2) + $18 >> 2] + $17 | 0) | 0];
       $31 = $30 >>> 2 | 0;
       $12 = HEAPU8[HEAPU8[$9 + 2 | 0] + (HEAP32[((HEAP16[$7 + 4 >> 1] + $10 | 0) + 8 >> 4 << 2) + $18 >> 2] + $17 | 0) | 0];
       $8 = $12 >>> 3 | 0;
       $10 = (HEAP32[($29 << 2) + $35 >> 2] + ($31 << 6) | 0) + ($8 << 1) | 0;
       $5 = HEAPU16[$10 >> 1];
       if (!$5) {
        fill_inverse_cmap($0, $29, $31, $8);
        $5 = HEAPU16[$10 >> 1];
       }
       $8 = $6;
       $6 = $5 - 1 | 0;
       HEAP8[$8 | 0] = $6;
       $10 = HEAPU8[$6 + $34 | 0];
       $5 = HEAPU8[$6 + $33 | 0];
       $6 = $12 - HEAPU8[$6 + $32 | 0] | 0;
       HEAP16[$4 + 4 >> 1] = Math_imul($6, 3) + $21;
       $5 = $30 - $5 | 0;
       HEAP16[$4 + 2 >> 1] = Math_imul($5, 3) + $16;
       $8 = $4;
       $4 = $28 - $10 | 0;
       HEAP16[$8 >> 1] = Math_imul($4, 3) + $15;
       $11 = $11 + $24 | 0;
       $9 = $9 + $20 | 0;
       $10 = Math_imul($6, 7);
       $8 = Math_imul($5, 7);
       $12 = Math_imul($4, 7);
       $21 = Math_imul($6, 5) + $27 | 0;
       $16 = Math_imul($5, 5) + $26 | 0;
       $15 = Math_imul($4, 5) + $25 | 0;
       $25 = $4;
       $26 = $5;
       $27 = $6;
       $4 = $7;
       $22 = $22 - 1 | 0;
       if ($22) {
        continue
       }
       break;
      };
      break block1;
     }
     $16 = 0;
     $15 = 0;
    }
    HEAP16[$7 + 4 >> 1] = $21;
    HEAP16[$7 + 2 >> 1] = $16;
    HEAP16[$7 >> 1] = $15;
    $19 = $19 + 1 | 0;
    if (($19 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function finish_pass1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
  $18 = HEAP32[$0 + 484 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$18 + 16 >> 2];
  $11 = HEAP32[$18 + 20 >> 2];
  $12 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, $11 << 5) | 0;
  HEAP32[$12 + 16 >> 2] = 0;
  HEAP32[$12 + 20 >> 2] = 31;
  HEAP32[$12 + 8 >> 2] = 0;
  HEAP32[$12 + 12 >> 2] = 63;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 31;
  update_box($0, $12);
  $9 = 1;
  block : {
   if (($11 | 0) < 2) {
    break block
   }
   while (1) {
    block3 : {
     block2 : {
      block1 : {
       if (($11 | 0) >= $9 << 1) {
        if ($16) {
         break block1
        }
        $2 = 0;
        $3 = 0;
        $1 = $12;
        break block2;
       }
       $8 = $9 & 3;
       $10 = 0;
       $2 = 0;
       $3 = 0;
       $1 = $12;
       if ($16 >>> 0 >= 3) {
        $6 = $9 & 2147483644;
        $5 = 0;
        while (1) {
         $15 = $2;
         $2 = HEAP32[$1 + 24 >> 2];
         $4 = ($2 | 0) > ($3 | 0);
         $7 = HEAP32[$1 + 56 >> 2];
         $2 = $4 ? $2 : $3;
         $3 = ($7 | 0) > ($2 | 0);
         $15 = $3 ? $1 + 32 | 0 : $4 ? $1 : $15;
         $4 = HEAP32[$1 + 88 >> 2];
         $2 = $3 ? $7 : $2;
         $3 = ($4 | 0) > ($2 | 0);
         $15 = $3 ? $1 - -64 | 0 : $15;
         $7 = HEAP32[$1 + 120 >> 2];
         $3 = $3 ? $4 : $2;
         $4 = ($7 | 0) > ($3 | 0);
         $2 = $4 ? $1 + 96 | 0 : $15;
         $3 = $4 ? $7 : $3;
         $1 = $1 + 128 | 0;
         $5 = $5 + 4 | 0;
         if (($6 | 0) != ($5 | 0)) {
          continue
         }
         break;
        };
        if (!$8) {
         break block3
        }
       }
       while (1) {
        $5 = HEAP32[$1 + 24 >> 2];
        $6 = ($5 | 0) > ($3 | 0);
        $2 = $6 ? $1 : $2;
        $3 = $6 ? $5 : $3;
        $1 = $1 + 32 | 0;
        $10 = $10 + 1 | 0;
        if (($8 | 0) != ($10 | 0)) {
         continue
        }
        break;
       };
       break block3;
      }
      $5 = $9 & 1;
      $8 = $9 & 2147483646;
      $2 = 0;
      $3 = 0;
      $1 = $12;
      $10 = 0;
      while (1) {
       $6 = HEAP32[$1 + 28 >> 2];
       if (($6 | 0) > ($3 | 0)) {
        $4 = HEAP32[$1 + 24 >> 2] > 0;
        $2 = $4 ? $1 : $2;
        $3 = $4 ? $6 : $3;
       }
       $6 = HEAP32[$1 + 60 >> 2];
       if (($6 | 0) > ($3 | 0)) {
        $4 = HEAP32[$1 + 56 >> 2] > 0;
        $2 = $4 ? $1 + 32 | 0 : $2;
        $3 = $4 ? $6 : $3;
       }
       $1 = $1 - -64 | 0;
       $10 = $10 + 2 | 0;
       if (($8 | 0) != ($10 | 0)) {
        continue
       }
       break;
      };
      if (!$5) {
       break block3
      }
     }
     if (HEAP32[$1 + 28 >> 2] <= ($3 | 0)) {
      break block3
     }
     $2 = HEAP32[$1 + 24 >> 2] > 0 ? $1 : $2;
    }
    if (!$2) {
     break block
    }
    $1 = ($9 << 5) + $12 | 0;
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    $10 = HEAP32[$2 + 12 >> 2];
    HEAP32[$1 + 12 >> 2] = $10;
    $5 = HEAP32[$2 + 20 >> 2];
    HEAP32[$1 + 20 >> 2] = $5;
    $8 = HEAP32[$2 >> 2];
    HEAP32[$1 >> 2] = $8;
    $6 = HEAP32[$2 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $6;
    $4 = HEAP32[$2 + 16 >> 2];
    HEAP32[$1 + 16 >> 2] = $4;
    block7 : {
     block5 : {
      block4 : {
       block6 : {
        $7 = $3 - $8 << 4;
        $14 = Math_imul($10 - $6 | 0, 12);
        switch (($5 - $4 << 3 > ((($7 | 0) > ($14 | 0) ? $7 : $14) | 0) ? 2 : ($7 | 0) <= ($14 | 0)) - 1 | 0) {
        case 0:
         break block4;
        case 1:
         break block5;
        default:
         break block6;
        };
       }
       $3 = ($3 + $8 | 0) / 2 | 0;
       HEAP32[$2 + 4 >> 2] = $3;
       HEAP32[$1 >> 2] = $3 + 1;
       break block7;
      }
      $3 = ($6 + $10 | 0) / 2 | 0;
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$1 + 8 >> 2] = $3 + 1;
      break block7;
     }
     $3 = ($5 + $4 | 0) / 2 | 0;
     HEAP32[$2 + 20 >> 2] = $3;
     HEAP32[$1 + 16 >> 2] = $3 + 1;
    }
    update_box($0, $2);
    update_box($0, $1);
    $16 = $16 + 1 | 0;
    $9 = $9 + 1 | 0;
    if (($11 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   $9 = $11;
  }
  $23 = ($9 | 0) <= 1 ? 1 : $9;
  $7 = 0;
  while (1) {
   $1 = ($7 << 5) + $12 | 0;
   $17 = HEAP32[$1 + 20 >> 2];
   $11 = HEAP32[$1 + 16 >> 2];
   $24 = $17 + $11 & 1;
   $16 = $11 + 1 | 0;
   $25 = $11 << 3 | 4;
   $21 = HEAP32[$1 + 12 >> 2];
   $3 = HEAP32[$1 + 8 >> 2];
   $26 = HEAP32[$1 + 4 >> 2];
   $14 = HEAP32[$1 >> 2];
   $27 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
   $8 = 0;
   $6 = 0;
   $4 = 0;
   $5 = 0;
   while (1) {
    if (($3 | 0) <= ($21 | 0)) {
     $15 = HEAP32[($14 << 2) + $27 >> 2] + ($11 << 1) | 0;
     $19 = $14 << 3 | 4;
     $1 = $3;
     while (1) {
      $10 = $1;
      block8 : {
       if (($11 | 0) > ($17 | 0)) {
        break block8
       }
       $20 = $1 << 2 | 2;
       $2 = ($1 << 6) + $15 | 0;
       block9 : {
        if ($24) {
         $1 = $2;
         $2 = $11;
         break block9;
        }
        $1 = $2 + 2 | 0;
        $2 = HEAPU16[$2 >> 1];
        if ($2) {
         $8 = Math_imul($2, $25) + $8 | 0;
         $6 = Math_imul($2, $20) + $6 | 0;
         $4 = Math_imul($2, $19) + $4 | 0;
         $5 = $2 + $5 | 0;
        }
        $2 = $16;
       }
       if (($11 | 0) == ($17 | 0)) {
        break block8
       }
       while (1) {
        $13 = HEAPU16[$1 >> 1];
        if ($13) {
         $6 = Math_imul($13, $20) + $6 | 0;
         $4 = Math_imul($13, $19) + $4 | 0;
         $8 = Math_imul($13, $2 << 3 | 4) + $8 | 0;
         $5 = $5 + $13 | 0;
        }
        $22 = $2 + 1 | 0;
        $13 = HEAPU16[$1 + 2 >> 1];
        if ($13) {
         $6 = Math_imul($13, $20) + $6 | 0;
         $4 = Math_imul($13, $19) + $4 | 0;
         $8 = Math_imul($13, $22 << 3 | 4) + $8 | 0;
         $5 = $5 + $13 | 0;
        }
        $1 = $1 + 4 | 0;
        $2 = $2 + 2 | 0;
        if (($17 | 0) != ($22 | 0)) {
         continue
        }
        break;
       };
      }
      $1 = $10 + 1 | 0;
      if (($10 | 0) != ($21 | 0)) {
       continue
      }
      break;
     };
    }
    $1 = ($14 | 0) != ($26 | 0);
    $14 = $14 + 1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   $1 = $5 >> 1;
   HEAP8[HEAP32[HEAP32[$0 + 136 >> 2] >> 2] + $7 | 0] = ($1 + $4 | 0) / ($5 | 0);
   HEAP8[HEAP32[HEAP32[$0 + 136 >> 2] + 4 >> 2] + $7 | 0] = ($1 + $6 | 0) / ($5 | 0);
   HEAP8[HEAP32[HEAP32[$0 + 136 >> 2] + 8 >> 2] + $7 | 0] = ($1 + $8 | 0) / ($5 | 0);
   $7 = $7 + 1 | 0;
   if (($23 | 0) != ($7 | 0)) {
    continue
   }
   break;
  };
  HEAP32[$0 + 132 >> 2] = $9;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 24 >> 2] = $9;
  HEAP32[$1 + 20 >> 2] = 98;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
  HEAP32[$18 + 28 >> 2] = 1;
 }
 
 function prescan_quantize($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if (($3 | 0) > 0) {
   $2 = HEAP32[$0 + 112 >> 2];
   $9 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
   while (1) {
    if ($2) {
     $0 = HEAP32[($4 << 2) + $1 >> 2];
     $5 = $2;
     while (1) {
      $7 = (HEAP32[(HEAPU8[$0 | 0] >>> 1 & 124) + $9 >> 2] + (HEAPU8[$0 + 1 | 0] << 4 & 4032) | 0) + (HEAPU8[$0 + 2 | 0] >>> 2 & 62) | 0;
      $8 = HEAPU16[$7 >> 1];
      $6 = $8 + 1 | 0;
      HEAP16[$7 >> 1] = ($6 | 0) != ($6 & 65535) ? $8 : $6;
      $0 = $0 + 3 | 0;
      $5 = $5 - 1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function update_box($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $8 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $11 = HEAP32[$1 + 12 >> 2];
  $6 = HEAP32[$1 + 8 >> 2];
  $13 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $5 = HEAP32[$1 >> 2];
  block : {
   if (($7 | 0) > ($5 | 0)) {
    $10 = $5;
    while (1) {
     if (($6 | 0) <= ($11 | 0)) {
      $12 = HEAP32[($10 << 2) + $13 >> 2] + ($2 << 1) | 0;
      $3 = $6;
      while (1) {
       if (($2 | 0) <= ($8 | 0)) {
        $0 = $12 + ($3 << 6) | 0;
        $4 = $2;
        while (1) {
         if (HEAPU16[$0 >> 1]) {
          HEAP32[$1 >> 2] = $10;
          break block;
         }
         $0 = $0 + 2 | 0;
         $9 = ($4 | 0) != ($8 | 0);
         $4 = $4 + 1 | 0;
         if ($9) {
          continue
         }
         break;
        };
       }
       $0 = ($3 | 0) != ($11 | 0);
       $3 = $3 + 1 | 0;
       if ($0) {
        continue
       }
       break;
      };
     }
     $0 = ($7 | 0) != ($10 | 0);
     $10 = $10 + 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $10 = $5;
  }
  block1 : {
   if (($7 | 0) > ($10 | 0)) {
    $14 = $2 << 1;
    $9 = $7;
    while (1) {
     if (($6 | 0) <= ($11 | 0)) {
      $12 = $14 + HEAP32[($9 << 2) + $13 >> 2] | 0;
      $3 = $6;
      while (1) {
       if (($2 | 0) <= ($8 | 0)) {
        $0 = $12 + ($3 << 6) | 0;
        $4 = $2;
        while (1) {
         if (HEAPU16[$0 >> 1]) {
          HEAP32[$1 + 4 >> 2] = $9;
          break block1;
         }
         $0 = $0 + 2 | 0;
         $5 = ($4 | 0) != ($8 | 0);
         $4 = $4 + 1 | 0;
         if ($5) {
          continue
         }
         break;
        };
       }
       $0 = ($3 | 0) != ($11 | 0);
       $3 = $3 + 1 | 0;
       if ($0) {
        continue
       }
       break;
      };
     }
     $0 = ($9 | 0) > ($10 | 0);
     $9 = $9 - 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $9 = $7;
  }
  block2 : {
   if (($6 | 0) < ($11 | 0)) {
    $5 = $6;
    while (1) {
     $3 = $10;
     if (($9 | 0) >= ($3 | 0)) {
      while (1) {
       if (($2 | 0) <= ($8 | 0)) {
        $0 = (HEAP32[($3 << 2) + $13 >> 2] + ($5 << 6) | 0) + ($2 << 1) | 0;
        $4 = $2;
        while (1) {
         if (HEAPU16[$0 >> 1]) {
          HEAP32[$1 + 8 >> 2] = $5;
          break block2;
         }
         $0 = $0 + 2 | 0;
         $7 = ($4 | 0) != ($8 | 0);
         $4 = $4 + 1 | 0;
         if ($7) {
          continue
         }
         break;
        };
       }
       $0 = ($3 | 0) != ($9 | 0);
       $3 = $3 + 1 | 0;
       if ($0) {
        continue
       }
       break;
      }
     }
     $0 = ($5 | 0) != ($11 | 0);
     $5 = $5 + 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $5 = $6;
  }
  block3 : {
   if (($5 | 0) < ($11 | 0)) {
    $7 = $11;
    while (1) {
     $3 = $10;
     if (($9 | 0) >= ($3 | 0)) {
      while (1) {
       if (($2 | 0) <= ($8 | 0)) {
        $0 = (HEAP32[($3 << 2) + $13 >> 2] + ($7 << 6) | 0) + ($2 << 1) | 0;
        $4 = $2;
        while (1) {
         if (HEAPU16[$0 >> 1]) {
          HEAP32[$1 + 12 >> 2] = $7;
          break block3;
         }
         $0 = $0 + 2 | 0;
         $6 = ($4 | 0) != ($8 | 0);
         $4 = $4 + 1 | 0;
         if ($6) {
          continue
         }
         break;
        };
       }
       $0 = ($3 | 0) != ($9 | 0);
       $3 = $3 + 1 | 0;
       if ($0) {
        continue
       }
       break;
      }
     }
     $0 = ($5 | 0) < ($7 | 0);
     $7 = $7 - 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $7 = $11;
  }
  block4 : {
   if (($2 | 0) < ($8 | 0)) {
    $12 = $5 << 6;
    $6 = $2;
    while (1) {
     $3 = $10;
     if (($9 | 0) >= ($3 | 0)) {
      while (1) {
       if (($5 | 0) <= ($7 | 0)) {
        $0 = ($12 + HEAP32[($3 << 2) + $13 >> 2] | 0) + ($6 << 1) | 0;
        $4 = $5;
        while (1) {
         if (HEAPU16[$0 >> 1]) {
          HEAP32[$1 + 16 >> 2] = $6;
          break block4;
         }
         $0 = $0 - -64 | 0;
         $11 = ($4 | 0) != ($7 | 0);
         $4 = $4 + 1 | 0;
         if ($11) {
          continue
         }
         break;
        };
       }
       $0 = ($3 | 0) != ($9 | 0);
       $3 = $3 + 1 | 0;
       if ($0) {
        continue
       }
       break;
      }
     }
     $0 = ($6 | 0) != ($8 | 0);
     $6 = $6 + 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $6 = $2;
  }
  block5 : {
   if (($6 | 0) < ($8 | 0)) {
    $12 = $5 << 6;
    $3 = $8;
    while (1) {
     $2 = $10;
     if (($9 | 0) >= ($2 | 0)) {
      while (1) {
       if (($5 | 0) <= ($7 | 0)) {
        $0 = ($12 + HEAP32[($2 << 2) + $13 >> 2] | 0) + ($3 << 1) | 0;
        $4 = $5;
        while (1) {
         if (HEAPU16[$0 >> 1]) {
          HEAP32[$1 + 20 >> 2] = $3;
          break block5;
         }
         $0 = $0 - -64 | 0;
         $11 = ($4 | 0) != ($7 | 0);
         $4 = $4 + 1 | 0;
         if ($11) {
          continue
         }
         break;
        };
       }
       $0 = ($2 | 0) != ($9 | 0);
       $2 = $2 + 1 | 0;
       if ($0) {
        continue
       }
       break;
      }
     }
     $0 = ($3 | 0) > ($6 | 0);
     $3 = $3 - 1 | 0;
     if ($0) {
      continue
     }
     break;
    };
   }
   $3 = $8;
  }
  $0 = Math_imul($7 - $5 | 0, 12);
  $2 = Math_imul($0, $0);
  $0 = $9 - $10 << 4;
  $2 = $2 + Math_imul($0, $0) | 0;
  $15 = $3 - $6 | 0;
  $0 = $15 << 3;
  HEAP32[$1 + 24 >> 2] = $2 + Math_imul($0, $0);
  $4 = 0;
  if (($9 | 0) >= ($10 | 0)) {
   $14 = $15 + 1 & 3;
   while (1) {
    if (($5 | 0) <= ($7 | 0)) {
     $12 = HEAP32[($10 << 2) + $13 >> 2] + ($6 << 1) | 0;
     $2 = $5;
     while (1) {
      $11 = $2;
      block6 : {
       if (($3 | 0) < ($6 | 0)) {
        break block6
       }
       $2 = $12 + ($2 << 6) | 0;
       $8 = 0;
       $0 = $6;
       if ($14) {
        while (1) {
         $0 = $0 + 1 | 0;
         $4 = (HEAPU16[$2 >> 1] != 0) + $4 | 0;
         $2 = $2 + 2 | 0;
         $8 = $8 + 1 | 0;
         if (($14 | 0) != ($8 | 0)) {
          continue
         }
         break;
        }
       }
       if ($15 >>> 0 < 3) {
        break block6
       }
       while (1) {
        $4 = ((((HEAPU16[$2 >> 1] != 0) + $4 | 0) + (HEAPU16[$2 + 2 >> 1] != 0) | 0) + (HEAPU16[$2 + 4 >> 1] != 0) | 0) + (HEAPU16[$2 + 6 >> 1] != 0) | 0;
        $2 = $2 + 8 | 0;
        $8 = $0 + 3 | 0;
        $0 = $0 + 4 | 0;
        if (($3 | 0) != ($8 | 0)) {
         continue
        }
        break;
       };
      }
      $2 = $11 + 1 | 0;
      if (($7 | 0) != ($11 | 0)) {
       continue
      }
      break;
     };
    }
    $0 = ($9 | 0) != ($10 | 0);
    $10 = $10 + 1 | 0;
    if ($0) {
     continue
    }
    break;
   };
  }
  HEAP32[$1 + 28 >> 2] = $4;
 }
 
 function fill_inverse_cmap($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $12 = __stack_pointer - 1408 | 0;
  __stack_pointer = $12;
  $5 = $3 << 3;
  $17 = $5 & 224 | 4;
  $11 = $2 << 2;
  $18 = $11 & 224 | 2;
  $4 = $1 << 3;
  $19 = $4 & 224 | 4;
  $24 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
  $15 = HEAP32[$0 + 132 >> 2];
  block : {
   if (($15 | 0) <= 0) {
    break block
   }
   $10 = $5 | 28;
   $13 = $10 + $17 >>> 1 | 0;
   $11 = $11 | 30;
   $20 = $11 + $18 >>> 1 | 0;
   $6 = $4 | 28;
   $21 = $6 + $19 >>> 1 | 0;
   $5 = HEAP32[$0 + 136 >> 2];
   $22 = HEAP32[$5 + 8 >> 2];
   $23 = HEAP32[$5 + 4 >> 2];
   $16 = HEAP32[$5 >> 2];
   $4 = 0;
   $8 = 2147483647;
   while (1) {
    $9 = HEAPU8[$4 + $16 | 0];
    block1 : {
     if ($9 >>> 0 < $19 >>> 0) {
      $5 = $9 - $19 << 1;
      $7 = Math_imul($5, $5);
      $5 = $6;
      break block1;
     }
     if ($6 >>> 0 < $9 >>> 0) {
      $5 = $9 - $6 << 1;
      $7 = Math_imul($5, $5);
      $5 = $19;
      break block1;
     }
     $7 = 0;
     $5 = $9 >>> 0 > $21 >>> 0 ? $19 : $6;
    }
    $5 = $9 - $5 << 1;
    $14 = Math_imul($5, $5);
    $9 = HEAPU8[$4 + $23 | 0];
    block2 : {
     if ($9 >>> 0 < $18 >>> 0) {
      $5 = Math_imul($9 - $18 | 0, 3);
      $7 = Math_imul($5, $5) + $7 | 0;
      $5 = $11;
      break block2;
     }
     if ($9 >>> 0 > $11 >>> 0) {
      $5 = Math_imul($9 - $11 | 0, 3);
      $7 = Math_imul($5, $5) + $7 | 0;
      $5 = $18;
      break block2;
     }
     $5 = $9 >>> 0 > $20 >>> 0 ? $18 : $11;
    }
    $5 = Math_imul($9 - $5 | 0, 3);
    $14 = $14 + Math_imul($5, $5) | 0;
    $9 = HEAPU8[$4 + $22 | 0];
    block3 : {
     if ($9 >>> 0 < $17 >>> 0) {
      $5 = $9 - $17 | 0;
      $7 = Math_imul($5, $5) + $7 | 0;
      $5 = $10;
      break block3;
     }
     if ($9 >>> 0 > $10 >>> 0) {
      $5 = $9 - $10 | 0;
      $7 = Math_imul($5, $5) + $7 | 0;
      $5 = $17;
      break block3;
     }
     $5 = $9 >>> 0 > $13 >>> 0 ? $17 : $10;
    }
    HEAP32[($12 + 384 | 0) + ($4 << 2) >> 2] = $7;
    $5 = $9 - $5 | 0;
    $5 = Math_imul($5, $5) + $14 | 0;
    $8 = ($5 | 0) < ($8 | 0) ? $5 : $8;
    $4 = $4 + 1 | 0;
    if (($15 | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
   $13 = 0;
   $4 = 0;
   if (($15 | 0) != 1) {
    $5 = $15 & 1;
    $10 = $15 & 2147483646;
    $7 = 0;
    while (1) {
     if (HEAP32[($12 + 384 | 0) + ($4 << 2) >> 2] <= ($8 | 0)) {
      HEAP8[($12 + 128 | 0) + $13 | 0] = $4;
      $13 = $13 + 1 | 0;
     }
     $11 = $4 | 1;
     if (HEAP32[($12 + 384 | 0) + ($11 << 2) >> 2] <= ($8 | 0)) {
      HEAP8[($12 + 128 | 0) + $13 | 0] = $11;
      $13 = $13 + 1 | 0;
     }
     $4 = $4 + 2 | 0;
     $7 = $7 + 2 | 0;
     if (($10 | 0) != ($7 | 0)) {
      continue
     }
     break;
    };
    if (!$5) {
     break block
    }
   }
   if (HEAP32[($12 + 384 | 0) + ($4 << 2) >> 2] > ($8 | 0)) {
    break block
   }
   HEAP8[($12 + 128 | 0) + $13 | 0] = $4;
   $13 = $13 + 1 | 0;
  }
  $7 = 127;
  $4 = $12 + 384 | 0;
  while (1) {
   HEAP32[$4 + 24 >> 2] = 2147483647;
   HEAP32[$4 + 28 >> 2] = 2147483647;
   HEAP32[$4 + 16 >> 2] = 2147483647;
   HEAP32[$4 + 20 >> 2] = 2147483647;
   HEAP32[$4 + 8 >> 2] = 2147483647;
   HEAP32[$4 + 12 >> 2] = 2147483647;
   HEAP32[$4 >> 2] = 2147483647;
   HEAP32[$4 + 4 >> 2] = 2147483647;
   $4 = $4 + 32 | 0;
   $5 = ($7 | 0) == 7;
   $7 = $7 - 8 | 0;
   if (!$5) {
    continue
   }
   break;
  };
  if (($13 | 0) > 0) {
   $22 = 0;
   while (1) {
    $9 = HEAPU8[($12 + 128 | 0) + $22 | 0];
    $10 = HEAP32[$0 + 136 >> 2];
    $6 = $17 - HEAPU8[$9 + HEAP32[$10 + 8 >> 2] | 0] | 0;
    $5 = $6 << 4;
    $15 = $5 + 320 | 0;
    $20 = $5 + 192 | 0;
    $21 = $5 - -64 | 0;
    $8 = $19 - HEAPU8[$9 + HEAP32[$10 >> 2] | 0] | 0;
    $23 = $8 << 6;
    $16 = $23 + 256 | 0;
    $5 = 7;
    $4 = $12 + 384 | 0;
    $7 = $12;
    $14 = $18 - HEAPU8[$9 + HEAP32[$10 + 4 >> 2] | 0] | 0;
    $11 = Math_imul($14, 72) + 144 | 0;
    $10 = $11;
    $14 = Math_imul($14, 3);
    $8 = $8 << 1;
    $14 = (Math_imul($14, $14) + Math_imul($8, $8) | 0) + Math_imul($6, $6) | 0;
    $8 = $14;
    while (1) {
     if (HEAP32[$4 >> 2] > ($8 | 0)) {
      HEAP32[$4 >> 2] = $8;
      HEAP8[$7 | 0] = $9;
     }
     $6 = $8 + $21 | 0;
     if (($6 | 0) < HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 4 >> 2] = $6;
      HEAP8[$7 + 1 | 0] = $9;
     }
     $6 = $6 + $20 | 0;
     if (($6 | 0) < HEAP32[$4 + 8 >> 2]) {
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP8[$7 + 2 | 0] = $9;
     }
     $6 = $6 + $15 | 0;
     if (($6 | 0) < HEAP32[$4 + 12 >> 2]) {
      HEAP32[$4 + 12 >> 2] = $6;
      HEAP8[$7 + 3 | 0] = $9;
     }
     $6 = $5;
     $5 = $5 - 1 | 0;
     $8 = $8 + $10 | 0;
     $7 = $7 + 4 | 0;
     $4 = $4 + 16 | 0;
     $10 = $10 + 288 | 0;
     if ($6) {
      continue
     }
     break;
    };
    $5 = 7;
    $10 = $11;
    $16 = $14 + $16 | 0;
    $8 = $16;
    while (1) {
     if (HEAP32[$4 >> 2] > ($8 | 0)) {
      HEAP32[$4 >> 2] = $8;
      HEAP8[$7 | 0] = $9;
     }
     $6 = $8 + $21 | 0;
     if (($6 | 0) < HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 4 >> 2] = $6;
      HEAP8[$7 + 1 | 0] = $9;
     }
     $6 = $6 + $20 | 0;
     if (($6 | 0) < HEAP32[$4 + 8 >> 2]) {
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP8[$7 + 2 | 0] = $9;
     }
     $6 = $6 + $15 | 0;
     if (($6 | 0) < HEAP32[$4 + 12 >> 2]) {
      HEAP32[$4 + 12 >> 2] = $6;
      HEAP8[$7 + 3 | 0] = $9;
     }
     $6 = $5;
     $5 = $5 - 1 | 0;
     $8 = $8 + $10 | 0;
     $7 = $7 + 4 | 0;
     $4 = $4 + 16 | 0;
     $10 = $10 + 288 | 0;
     if ($6) {
      continue
     }
     break;
    };
    $5 = 7;
    $10 = $11;
    $16 = ($16 + $23 | 0) + 768 | 0;
    $8 = $16;
    while (1) {
     if (HEAP32[$4 >> 2] > ($8 | 0)) {
      HEAP32[$4 >> 2] = $8;
      HEAP8[$7 | 0] = $9;
     }
     $6 = $8 + $21 | 0;
     if (($6 | 0) < HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 4 >> 2] = $6;
      HEAP8[$7 + 1 | 0] = $9;
     }
     $6 = $6 + $20 | 0;
     if (($6 | 0) < HEAP32[$4 + 8 >> 2]) {
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP8[$7 + 2 | 0] = $9;
     }
     $6 = $6 + $15 | 0;
     if (($6 | 0) < HEAP32[$4 + 12 >> 2]) {
      HEAP32[$4 + 12 >> 2] = $6;
      HEAP8[$7 + 3 | 0] = $9;
     }
     $6 = $5;
     $5 = $5 - 1 | 0;
     $8 = $8 + $10 | 0;
     $7 = $7 + 4 | 0;
     $4 = $4 + 16 | 0;
     $10 = $10 + 288 | 0;
     if ($6) {
      continue
     }
     break;
    };
    $8 = ($16 + $23 | 0) + 1280 | 0;
    $5 = 7;
    while (1) {
     if (HEAP32[$4 >> 2] > ($8 | 0)) {
      HEAP32[$4 >> 2] = $8;
      HEAP8[$7 | 0] = $9;
     }
     $10 = $8 + $21 | 0;
     if (($10 | 0) < HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 4 >> 2] = $10;
      HEAP8[$7 + 1 | 0] = $9;
     }
     $10 = $10 + $20 | 0;
     if (($10 | 0) < HEAP32[$4 + 8 >> 2]) {
      HEAP32[$4 + 8 >> 2] = $10;
      HEAP8[$7 + 2 | 0] = $9;
     }
     $10 = $10 + $15 | 0;
     if (($10 | 0) < HEAP32[$4 + 12 >> 2]) {
      HEAP32[$4 + 12 >> 2] = $10;
      HEAP8[$7 + 3 | 0] = $9;
     }
     $10 = $5;
     $5 = $5 - 1 | 0;
     $8 = $8 + $11 | 0;
     $7 = $7 + 4 | 0;
     $4 = $4 + 16 | 0;
     $11 = $11 + 288 | 0;
     if ($10) {
      continue
     }
     break;
    };
    $22 = $22 + 1 | 0;
    if (($22 | 0) != ($13 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = (($1 & 28) << 2) + $24 | 0;
  $8 = 0;
  $4 = $12;
  $2 = ($2 & 56) << 6;
  $3 = ($3 & 28) << 1;
  while (1) {
   $0 = $3 + ($2 + HEAP32[$1 + ($8 << 2) >> 2] | 0) | 0;
   HEAP16[$0 >> 1] = HEAPU8[$4 | 0] + 1;
   HEAP16[$0 + 2 >> 1] = HEAPU8[$4 + 1 | 0] + 1;
   HEAP16[$0 + 4 >> 1] = HEAPU8[$4 + 2 | 0] + 1;
   HEAP16[$0 + 6 >> 1] = HEAPU8[$4 + 3 | 0] + 1;
   HEAP16[$0 + 64 >> 1] = HEAPU8[$4 + 4 | 0] + 1;
   HEAP16[$0 + 66 >> 1] = HEAPU8[$4 + 5 | 0] + 1;
   HEAP16[$0 + 68 >> 1] = HEAPU8[$4 + 6 | 0] + 1;
   HEAP16[$0 + 70 >> 1] = HEAPU8[$4 + 7 | 0] + 1;
   HEAP16[$0 + 128 >> 1] = HEAPU8[$4 + 8 | 0] + 1;
   HEAP16[$0 + 130 >> 1] = HEAPU8[$4 + 9 | 0] + 1;
   HEAP16[$0 + 132 >> 1] = HEAPU8[$4 + 10 | 0] + 1;
   HEAP16[$0 + 134 >> 1] = HEAPU8[$4 + 11 | 0] + 1;
   HEAP16[$0 + 192 >> 1] = HEAPU8[$4 + 12 | 0] + 1;
   HEAP16[$0 + 194 >> 1] = HEAPU8[$4 + 13 | 0] + 1;
   HEAP16[$0 + 196 >> 1] = HEAPU8[$4 + 14 | 0] + 1;
   HEAP16[$0 + 198 >> 1] = HEAPU8[$4 + 15 | 0] + 1;
   HEAP16[$0 + 256 >> 1] = HEAPU8[$4 + 16 | 0] + 1;
   HEAP16[$0 + 258 >> 1] = HEAPU8[$4 + 17 | 0] + 1;
   HEAP16[$0 + 260 >> 1] = HEAPU8[$4 + 18 | 0] + 1;
   HEAP16[$0 + 262 >> 1] = HEAPU8[$4 + 19 | 0] + 1;
   HEAP16[$0 + 320 >> 1] = HEAPU8[$4 + 20 | 0] + 1;
   HEAP16[$0 + 322 >> 1] = HEAPU8[$4 + 21 | 0] + 1;
   HEAP16[$0 + 324 >> 1] = HEAPU8[$4 + 22 | 0] + 1;
   HEAP16[$0 + 326 >> 1] = HEAPU8[$4 + 23 | 0] + 1;
   HEAP16[$0 + 384 >> 1] = HEAPU8[$4 + 24 | 0] + 1;
   HEAP16[$0 + 386 >> 1] = HEAPU8[$4 + 25 | 0] + 1;
   HEAP16[$0 + 388 >> 1] = HEAPU8[$4 + 26 | 0] + 1;
   HEAP16[$0 + 390 >> 1] = HEAPU8[$4 + 27 | 0] + 1;
   HEAP16[$0 + 448 >> 1] = HEAPU8[$4 + 28 | 0] + 1;
   HEAP16[$0 + 450 >> 1] = HEAPU8[$4 + 29 | 0] + 1;
   HEAP16[$0 + 452 >> 1] = HEAPU8[$4 + 30 | 0] + 1;
   HEAP16[$0 + 454 >> 1] = HEAPU8[$4 + 31 | 0] + 1;
   $4 = $4 + 32 | 0;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $12 + 1408 | 0;
 }
 
 function jdiv_round_up($0, $1) {
  return (($0 + $1 | 0) - 1 | 0) / ($1 | 0) | 0;
 }
 
 function jround_up($0, $1) {
  $0 = ($0 + $1 | 0) - 1 | 0;
  return $0 - (($0 | 0) % ($1 | 0) | 0) | 0;
 }
 
 function jcopy_sample_rows($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  block : {
   if (($2 | 0) <= 0) {
    break block
   }
   $5 = $2 & 3;
   block1 : {
    if (!$5) {
     $4 = $2;
     break block1;
    }
    $4 = $2;
    while (1) {
     if ($3) {
      wasm2js_memory_copy(HEAP32[$1 >> 2], HEAP32[$0 >> 2], $3)
     }
     $4 = $4 - 1 | 0;
     $1 = $1 + 4 | 0;
     $0 = $0 + 4 | 0;
     $6 = $6 + 1 | 0;
     if (($5 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   if ($2 >>> 0 < 4) {
    break block
   }
   while (1) {
    $2 = !$3;
    if (!$2) {
     wasm2js_memory_copy(HEAP32[$1 >> 2], HEAP32[$0 >> 2], $3)
    }
    if (!$2) {
     wasm2js_memory_copy(HEAP32[$1 + 4 >> 2], HEAP32[$0 + 4 >> 2], $3)
    }
    if (!$2) {
     wasm2js_memory_copy(HEAP32[$1 + 8 >> 2], HEAP32[$0 + 8 >> 2], $3)
    }
    if (!$2) {
     wasm2js_memory_copy(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 12 >> 2], $3)
    }
    $1 = $1 + 16 | 0;
    $0 = $0 + 16 | 0;
    $2 = $4 - 5 | 0;
    $4 = $4 - 4 | 0;
    if ($2 >>> 0 < 4294967294) {
     continue
    }
    break;
   };
  }
 }
 
 function abort() {
  _abort_js();
  wasm2js_trap();
 }
 
 function R($0) {
  return $0 * ($0 * ($0 * ($0 * ($0 * ($0 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / ($0 * ($0 * ($0 * ($0 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0);
 }
 
 function atan2f($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0;
  if (!(((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 < 2139095041 & ((wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 <= 2139095040)) {
   return Math_fround($0 + $1)
  }
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
  if (($2 | 0) == 1065353216) {
   return atanf($0)
  }
  $6 = $2 >>> 30 & 2;
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $4 = $6 | $3 >>> 31;
  folding_inner0 : {
   block7 : {
    $3 = $3 & 2147483647;
    block2 : {
     if (!$3) {
      block1 : {
       switch ($4 - 2 | 0) {
       case 0:
        return Math_fround(3.1415927410125732);
       case 1:
        break block1;
       default:
        break block2;
       };
      }
      return Math_fround(-3.1415927410125732);
     }
     $2 = $2 & 2147483647;
     if (($2 | 0) != 2139095040) {
      if (!$2 | !(($3 | 0) != 2139095040 & $3 >>> 0 <= $2 + 218103808 >>> 0)) {
       break folding_inner0
      }
      block3 : {
       if ($6) {
        $5 = Math_fround(0.0);
        if ($2 >>> 0 > $3 + 218103808 >>> 0) {
         break block3
        }
       }
       $5 = atanf(Math_fround(Math_abs(Math_fround($0 / $1))));
      }
      $0 = $5;
      block6 : {
       switch ($4 - 1 | 0) {
       case 0:
        return Math_fround(-$0);
       case 1:
        return Math_fround(Math_fround(3.1415927410125732) - Math_fround($0 + Math_fround(8.742277657347586e-08)));
       case 2:
        break block6;
       default:
        break block2;
       };
      }
      return Math_fround(Math_fround($0 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
     }
     if (($3 | 0) == 2139095040) {
      break block7
     }
     $0 = HEAPF32[($4 << 2) + 53616 >> 2];
    }
    return $0;
   }
   return HEAPF32[($4 << 2) + 53600 >> 2];
  }
  return wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141403), wasm2js_scratch_load_f32();
 }
 
 function atanf($0) {
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $5 & 2147483647;
  if ($2 >>> 0 >= 1283457024) {
   return ((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095040 ? $0 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32())
  }
  block1 : {
   block : {
    if ($2 >>> 0 <= 1054867455) {
     $1 = -1;
     if ($2 >>> 0 >= 964689920) {
      break block
     }
     break block1;
    }
    $0 = Math_fround(Math_abs($0));
    if ($2 >>> 0 <= 1066926079) {
     if ($2 >>> 0 <= 1060110335) {
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
      $1 = 0;
      break block;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
     $1 = 1;
     break block;
    }
    if ($2 >>> 0 <= 1075576831) {
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
     $1 = 2;
     break block;
    }
    $0 = Math_fround(Math_fround(-1.0) / $0);
    $1 = 3;
   }
   $4 = Math_fround($0 * $0);
   $3 = Math_fround($4 * $4);
   $6 = Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $3 = Math_fround($4 * Math_fround(Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if ($2 >>> 0 <= 1054867455) {
    return Math_fround($0 - Math_fround($0 * Math_fround($6 + $3)))
   }
   $1 = $1 << 2;
   $0 = Math_fround(HEAPF32[$1 + 53632 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $3)) - HEAPF32[$1 + 53648 >> 2]) - $0));
   $0 = ($5 | 0) < 0 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 
 function __isspace($0) {
  return ($0 | 0) == 32 | $0 - 9 >>> 0 < 5;
 }
 
 function __cos($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $5 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1));
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
  $7 = __stack_pointer - 560 | 0;
  __stack_pointer = $7;
  $6 = $2;
  $2 = ($2 - 3 | 0) / 24 | 0;
  $9 = ($2 | 0) > 0 ? $2 : 0;
  $13 = $6 + Math_imul($9, -24) | 0;
  $14 = HEAP32[($4 << 2) + 53664 >> 2];
  $12 = $3 - 1 | 0;
  if (($14 + $12 | 0) >= 0) {
   $6 = $3 + $14 | 0;
   $2 = $9 - $12 | 0;
   while (1) {
    HEAPF64[($7 + 320 | 0) + ($8 << 3) >> 3] = ($2 | 0) < 0 ? 0.0 : +HEAP32[($2 << 2) + 53680 >> 2];
    $2 = $2 + 1 | 0;
    $8 = $8 + 1 | 0;
    if (($6 | 0) != ($8 | 0)) {
     continue
    }
    break;
   };
  }
  $15 = $13 - 24 | 0;
  $6 = 0;
  $8 = ($14 | 0) > 0 ? $14 : 0;
  $11 = ($3 | 0) <= 0;
  while (1) {
   block : {
    if ($11) {
     $5 = 0.0;
     break block;
    }
    $17 = $6 + $12 | 0;
    $2 = 0;
    $5 = 0.0;
    while (1) {
     $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($17 - $2 << 3) >> 3] + $5;
     $2 = $2 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
   }
   HEAPF64[($6 << 3) + $7 >> 3] = $5;
   $2 = ($6 | 0) == ($8 | 0);
   $6 = $6 + 1 | 0;
   if (!$2) {
    continue
   }
   break;
  };
  $21 = 47 - $13 | 0;
  $17 = 48 - $13 | 0;
  $22 = ($9 << 2) + 53680 | 0;
  $23 = $13 - 25 | 0;
  $6 = $14;
  block11 : {
   while (1) {
    $5 = HEAPF64[($6 << 3) + $7 >> 3];
    $2 = 0;
    $8 = $6;
    if (($6 | 0) > 0) {
     while (1) {
      $12 = ($7 + 480 | 0) + ($2 << 2) | 0;
      $10 = $5 * 5.9604644775390625e-08;
      if (Math_abs($10) < 2147483647.0) {
       $9 = ~~$10
      } else {
       $9 = -2147483648
      }
      $10 = +($9 | 0);
      $5 = $10 * -16777216.0 + $5;
      if (Math_abs($5) < 2147483647.0) {
       $9 = ~~$5
      } else {
       $9 = -2147483648
      }
      HEAP32[$12 >> 2] = $9;
      $5 = HEAPF64[(($8 << 3) + $7 | 0) - 8 >> 3] + $10;
      $8 = $8 - 1 | 0;
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     }
    }
    $5 = scalbn($5, $15);
    $5 = $5 + Math_floor($5 * .125) * -8.0;
    if (Math_abs($5) < 2147483647.0) {
     $12 = ~~$5
    } else {
     $12 = -2147483648
    }
    $5 = $5 - +($12 | 0);
    block3 : {
     block4 : {
      block2 : {
       $18 = ($15 | 0) <= 0;
       block1 : {
        if (!$18) {
         $8 = ($6 << 2) + $7 | 0;
         $9 = HEAP32[$8 + 476 >> 2];
         $2 = $9 >> $17;
         $11 = $8;
         $8 = $9 - ($2 << $17) | 0;
         HEAP32[$11 + 476 >> 2] = $8;
         $12 = $2 + $12 | 0;
         $9 = $8 >> $21;
         break block1;
        }
        if ($15) {
         break block2
        }
        $9 = HEAP32[(($6 << 2) + $7 | 0) + 476 >> 2] >> 23;
       }
       if (($9 | 0) <= 0) {
        break block3
       }
       break block4;
      }
      $9 = 2;
      if ($5 >= .5) {
       break block4
      }
      $9 = 0;
      break block3;
     }
     $2 = 0;
     $11 = 0;
     $8 = 1;
     if (($6 | 0) > 0) {
      while (1) {
       $8 = ($7 + 480 | 0) + ($2 << 2) | 0;
       $19 = HEAP32[$8 >> 2];
       block6 : {
        block5 : {
         if ($11) {
          $11 = 16777215
         } else {
          if (!$19) {
           break block5
          }
          $11 = 16777216;
         }
         HEAP32[$8 >> 2] = $11 - $19;
         $11 = 1;
         $8 = 0;
         break block6;
        }
        $11 = 0;
        $8 = 1;
       }
       $2 = $2 + 1 | 0;
       if (($6 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     block7 : {
      if ($18) {
       break block7
      }
      $2 = 8388607;
      block8 : {
       switch ($23 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break block8;
       default:
        break block7;
       };
      }
      $11 = ($6 << 2) + $7 | 0;
      HEAP32[$11 + 476 >> 2] = HEAP32[$11 + 476 >> 2] & $2;
     }
     $12 = $12 + 1 | 0;
     if (($9 | 0) != 2) {
      break block3
     }
     $5 = 1.0 - $5;
     $9 = 2;
     if ($8) {
      break block3
     }
     $5 = $5 - scalbn(1.0, $15);
    }
    if ($5 == 0.0) {
     $8 = 0;
     $2 = $6;
     block10 : {
      if (($6 | 0) <= ($14 | 0)) {
       break block10
      }
      while (1) {
       $2 = $2 - 1 | 0;
       $8 = HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2] | $8;
       if (($2 | 0) > ($14 | 0)) {
        continue
       }
       break;
      };
      if (!$8) {
       break block10
      }
      while (1) {
       $15 = $15 - 24 | 0;
       $6 = $6 - 1 | 0;
       if (!HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2]) {
        continue
       }
       break;
      };
      break block11;
     }
     $2 = 1;
     while (1) {
      $8 = $2;
      $2 = $2 + 1 | 0;
      if (!HEAP32[($7 + 480 | 0) + ($14 - $8 << 2) >> 2]) {
       continue
      }
      break;
     };
     $8 = $6 + $8 | 0;
     while (1) {
      $9 = $3 + $6 | 0;
      $6 = $6 + 1 | 0;
      HEAPF64[($7 + 320 | 0) + ($9 << 3) >> 3] = HEAP32[($6 << 2) + $22 >> 2];
      $2 = 0;
      $5 = 0.0;
      if (($3 | 0) > 0) {
       while (1) {
        $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($9 - $2 << 3) >> 3] + $5;
        $2 = $2 + 1 | 0;
        if (($3 | 0) != ($2 | 0)) {
         continue
        }
        break;
       }
      }
      HEAPF64[($6 << 3) + $7 >> 3] = $5;
      if (($6 | 0) < ($8 | 0)) {
       continue
      }
      break;
     };
     $6 = $8;
     continue;
    }
    break;
   };
   $5 = scalbn($5, 24 - $13 | 0);
   block12 : {
    if ($5 >= 16777216.0) {
     $3 = ($7 + 480 | 0) + ($6 << 2) | 0;
     $10 = $5 * 5.9604644775390625e-08;
     if (Math_abs($10) < 2147483647.0) {
      $2 = ~~$10
     } else {
      $2 = -2147483648
     }
     $5 = +($2 | 0) * -16777216.0 + $5;
     if (Math_abs($5) < 2147483647.0) {
      $0 = ~~$5
     } else {
      $0 = -2147483648
     }
     HEAP32[$3 >> 2] = $0;
     $6 = $6 + 1 | 0;
     $15 = $13;
     break block12;
    }
    $2 = Math_abs($5) < 2147483647.0 ? ~~$5 : -2147483648;
   }
   HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2] = $2;
  }
  $5 = scalbn(1.0, $15);
  if (($6 | 0) >= 0) {
   $3 = $6;
   while (1) {
    $0 = $3;
    HEAPF64[($0 << 3) + $7 >> 3] = $5 * +HEAP32[($7 + 480 | 0) + ($0 << 2) >> 2];
    $3 = $0 - 1 | 0;
    $5 = $5 * 5.9604644775390625e-08;
    if ($0) {
     continue
    }
    break;
   };
   $11 = 0;
   $0 = $6;
   while (1) {
    $3 = ($11 | 0) > ($14 | 0) ? $14 : $11;
    $8 = $6 - $0 | 0;
    $15 = ($0 << 3) + $7 | 0;
    $2 = 0;
    $5 = 0.0;
    while (1) {
     $13 = $2 << 3;
     $5 = HEAPF64[$13 + 56448 >> 3] * HEAPF64[$13 + $15 >> 3] + $5;
     $13 = ($2 | 0) != ($3 | 0);
     $2 = $2 + 1 | 0;
     if ($13) {
      continue
     }
     break;
    };
    HEAPF64[($7 + 160 | 0) + ($8 << 3) >> 3] = $5;
    $0 = $0 - 1 | 0;
    $2 = ($6 | 0) != ($11 | 0);
    $11 = $11 + 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  block16 : {
   block18 : {
    block14 : {
     switch ($4 | 0) {
     case 3:
      $5 = 0.0;
      block17 : {
       if (($6 | 0) <= 0) {
        break block17
       }
       $2 = $6;
       while (1) {
        $0 = ($7 + 160 | 0) + ($2 << 3) | 0;
        $3 = $0 - 8 | 0;
        $10 = HEAPF64[$3 >> 3];
        $16 = HEAPF64[$0 >> 3];
        $20 = $10 + $16;
        HEAPF64[$3 >> 3] = $20;
        HEAPF64[$0 >> 3] = $16 + ($10 - $20);
        $0 = $2 >>> 0 > 1;
        $2 = $2 - 1 | 0;
        if ($0) {
         continue
        }
        break;
       };
       if (($6 | 0) == 1) {
        break block17
       }
       $2 = $6;
       while (1) {
        $0 = ($7 + 160 | 0) + ($2 << 3) | 0;
        $3 = $0 - 8 | 0;
        $5 = HEAPF64[$3 >> 3];
        $10 = HEAPF64[$0 >> 3];
        $16 = $5 + $10;
        HEAPF64[$3 >> 3] = $16;
        HEAPF64[$0 >> 3] = $10 + ($5 - $16);
        $0 = $2 >>> 0 > 2;
        $2 = $2 - 1 | 0;
        if ($0) {
         continue
        }
        break;
       };
       $5 = 0.0;
       while (1) {
        $5 = $5 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
        $0 = $6 >>> 0 > 2;
        $6 = $6 - 1 | 0;
        if ($0) {
         continue
        }
        break;
       };
      }
      $10 = HEAPF64[$7 + 160 >> 3];
      if ($9) {
       break block18
      }
      HEAPF64[$1 >> 3] = $10;
      $10 = HEAPF64[$7 + 168 >> 3];
      HEAPF64[$1 + 16 >> 3] = $5;
      HEAPF64[$1 + 8 >> 3] = $10;
      break block16;
     case 0:
      $5 = 0.0;
      if (($6 | 0) >= 0) {
       while (1) {
        $0 = $6;
        $6 = $6 - 1 | 0;
        $5 = $5 + HEAPF64[($7 + 160 | 0) + ($0 << 3) >> 3];
        if ($0) {
         continue
        }
        break;
       }
      }
      HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
      break block16;
     case 1:
     case 2:
      break block14;
     default:
      break block16;
     };
    }
    $5 = 0.0;
    if (($6 | 0) >= 0) {
     $3 = $6;
     while (1) {
      $0 = $3;
      $3 = $0 - 1 | 0;
      $5 = $5 + HEAPF64[($7 + 160 | 0) + ($0 << 3) >> 3];
      if ($0) {
       continue
      }
      break;
     };
    }
    HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
    $5 = HEAPF64[$7 + 160 >> 3] - $5;
    $2 = 1;
    if (($6 | 0) > 0) {
     while (1) {
      $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
      $0 = ($2 | 0) != ($6 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue
      }
      break;
     }
    }
    HEAPF64[$1 + 8 >> 3] = $9 ? -$5 : $5;
    break block16;
   }
   HEAPF64[$1 >> 3] = -$10;
   $10 = HEAPF64[$7 + 168 >> 3];
   HEAPF64[$1 + 16 >> 3] = -$5;
   HEAPF64[$1 + 8 >> 3] = -$10;
  }
  __stack_pointer = $7 + 560 | 0;
  return $12 & 7;
 }
 
 function __rem_pio2($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0;
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  wasm2js_scratch_store_f64(+$0);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  $6 = wasm2js_scratch_load_i32(0) | 0;
  block1 : {
   block2 : {
    $7 = $4 & 2147483647;
    block : {
     if ($7 >>> 0 <= 1074752122) {
      if (($4 & 1048575) == 598523) {
       break block
      }
      if ($7 >>> 0 <= 1073928572) {
       if (($4 | 0) > 0 | ($4 | 0) >= 0) {
        $0 = $0 + -1.5707963267341256;
        $2 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $2;
        HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
        $3 = 1;
        break block1;
       }
       $0 = $0 + 1.5707963267341256;
       $2 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
       $3 = -1;
       break block1;
      }
      if (($4 | 0) > 0 | ($4 | 0) >= 0) {
       $0 = $0 + -3.1415926534682512;
       $2 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
       $3 = 2;
       break block1;
      }
      $0 = $0 + 3.1415926534682512;
      $2 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
      $3 = -2;
      break block1;
     }
     if ($7 >>> 0 <= 1075594811) {
      if ($7 >>> 0 <= 1075183036) {
       if (($7 | 0) == 1074977148) {
        break block
       }
       if (($4 | 0) > 0 | ($4 | 0) >= 0) {
        $0 = $0 + -4.712388980202377;
        $2 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $2;
        HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
        $3 = 3;
        break block1;
       }
       $0 = $0 + 4.712388980202377;
       $2 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
       $3 = -3;
       break block1;
      }
      if (($7 | 0) == 1075388923) {
       break block
      }
      if (($4 | 0) > 0 | ($4 | 0) >= 0) {
       $0 = $0 + -6.2831853069365025;
       $2 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
       $3 = 4;
       break block1;
      }
      $0 = $0 + 6.2831853069365025;
      $2 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
      $3 = -4;
      break block1;
     }
     if ($7 >>> 0 > 1094263290) {
      break block2
     }
    }
    $5 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    if (Math_abs($5) < 2147483647.0) {
     $3 = ~~$5
    } else {
     $3 = -2147483648
    }
    $2 = $0 + $5 * -1.5707963267341256;
    $9 = $5 * 6.077100506506192e-11;
    $10 = $2 - $9;
    block3 : {
     if ($10 < -.7853981633974483) {
      $3 = $3 - 1 | 0;
      $5 = $5 + -1.0;
      $9 = $5 * 6.077100506506192e-11;
      $2 = $0 + $5 * -1.5707963267341256;
      break block3;
     }
     if (!($10 > .7853981633974483)) {
      break block3
     }
     $3 = $3 + 1 | 0;
     $5 = $5 + 1.0;
     $9 = $5 * 6.077100506506192e-11;
     $2 = $0 + $5 * -1.5707963267341256;
    }
    $0 = $2 - $9;
    HEAPF64[$1 >> 3] = $0;
    wasm2js_scratch_store_f64(+$0);
    $4 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $6 = $7 >>> 20 | 0;
    block4 : {
     if (($6 - ($4 >>> 20 & 2047) | 0) < 17) {
      break block4
     }
     $10 = $2;
     $0 = $5 * 6.077100506303966e-11;
     $2 = $2 - $0;
     $9 = $5 * 2.0222662487959506e-21 - ($10 - $2 - $0);
     $0 = $2 - $9;
     HEAPF64[$1 >> 3] = $0;
     wasm2js_scratch_store_f64(+$0);
     $4 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     if (($6 - ($4 >>> 20 & 2047) | 0) < 50) {
      break block4
     }
     $10 = $2;
     $0 = $5 * 2.0222662487111665e-21;
     $2 = $2 - $0;
     $9 = $5 * 8.4784276603689e-32 - ($10 - $2 - $0);
     $0 = $2 - $9;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[$1 + 8 >> 3] = $2 - $0 - $9;
    break block1;
   }
   if ($7 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[$1 + 8 >> 3] = $0;
    break block1;
   }
   $3 = $8 + 16 | 0;
   $11 = $3 | 8;
   wasm2js_scratch_store_i32(0, $6 | 0);
   wasm2js_scratch_store_i32(1, $4 & 1048575 | 1096810496);
   $0 = +wasm2js_scratch_load_f64();
   $6 = 1;
   while (1) {
    $2 = +((Math_abs($0) < 2147483647.0 ? ~~$0 : -2147483648) | 0);
    HEAPF64[$3 >> 3] = $2;
    $0 = ($0 - $2) * 16777216.0;
    $12 = $6;
    $6 = 0;
    $3 = $11;
    if ($12) {
     continue
    }
    break;
   };
   HEAPF64[$8 + 32 >> 3] = $0;
   $3 = 2;
   while (1) {
    $6 = $3;
    $3 = $3 - 1 | 0;
    $11 = $8 + 16 | 0;
    if (HEAPF64[$11 + ($6 << 3) >> 3] == 0.0) {
     continue
    }
    break;
   };
   $3 = __rem_pio2_large($11, $8, ($7 >>> 20 | 0) - 1046 | 0, $6 + 1 | 0, 1);
   $0 = HEAPF64[$8 >> 3];
   if (($4 | 0) < 0) {
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[$1 + 8 >> 3] = -HEAPF64[$8 + 8 >> 3];
    $3 = 0 - $3 | 0;
    break block1;
   }
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = HEAPF64[$8 + 8 >> 3];
  }
  __stack_pointer = $8 + 48 | 0;
  return $3;
 }
 
 function __sin($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $3 = $0 * $0;
  $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $4 = $0 * $3;
  if (!$2) {
   return $4 * ($3 * $5 + -.16666666666666632) + $0
  }
  return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
 }
 
 function __cosdf($0) {
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround($0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1.0)));
 }
 
 function __sindf($0) {
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $0 * $1;
  return Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
 }
 
 function __rem_pio2f($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $7 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $7 & 2147483647;
  block : {
   if ($2 >>> 0 <= 1305022426) {
    $6 = +$0;
    $5 = $6 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $3 = $6 + $5 * -1.5707963109016418 + $5 * -1.5893254773528196e-08;
    HEAPF64[$1 >> 3] = $3;
    $2 = Math_abs($5) < 2147483647.0 ? ~~$5 : -2147483648;
    if ($3 < -.7853981852531433) {
     $3 = $5 + -1.0;
     HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
     $2 = $2 - 1 | 0;
     break block;
    }
    if (!($3 > .7853981852531433)) {
     break block
    }
    $3 = $5 + 1.0;
    HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    $2 = $2 + 1 | 0;
    break block;
   }
   if ($2 >>> 0 >= 2139095040) {
    HEAPF64[$1 >> 3] = Math_fround($0 - $0);
    $2 = 0;
    break block;
   }
   $8 = $2;
   $2 = ($2 >>> 23 | 0) - 150 | 0;
   HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $8 - ($2 << 23) | 0), wasm2js_scratch_load_f32());
   $2 = __rem_pio2_large($4 + 8 | 0, $4, $2, 1, 0);
   $3 = HEAPF64[$4 >> 3];
   if (($7 | 0) < 0) {
    HEAPF64[$1 >> 3] = -$3;
    $2 = 0 - $2 | 0;
    break block;
   }
   HEAPF64[$1 >> 3] = $3;
  }
  __stack_pointer = $4 + 16 | 0;
  return $2;
 }
 
 function cosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0.0, $4 = 0, $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $4 & 2147483647;
  block : {
   if ($2 >>> 0 <= 1061752794) {
    $1 = Math_fround(1.0);
    if ($2 >>> 0 < 964689920) {
     break block
    }
    $1 = __cosdf(+$0);
    break block;
   }
   if ($2 >>> 0 <= 1081824209) {
    if ($2 >>> 0 >= 1075235812) {
     $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + +$0));
     break block;
    }
    $3 = +$0;
    if (($4 | 0) < 0) {
     $1 = __sindf($3 + 1.5707963267948966);
     break block;
    }
    $1 = __sindf(1.5707963267948966 - $3);
    break block;
   }
   if ($2 >>> 0 <= 1088565717) {
    if ($2 >>> 0 >= 1085271520) {
     $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
     break block;
    }
    if (($4 | 0) < 0) {
     $1 = __sindf(-4.71238898038469 - +$0);
     break block;
    }
    $1 = __sindf(+$0 + -4.71238898038469);
    break block;
   }
   $1 = Math_fround($0 - $0);
   if ($2 >>> 0 >= 2139095040) {
    break block
   }
   $2 = __rem_pio2f($0, $5 + 8 | 0);
   $3 = HEAPF64[$5 + 8 >> 3];
   block3 : {
    switch (($2 & 3) - 1 | 0) {
    default:
     $1 = __cosdf($3);
     break block;
    case 0:
     $1 = __sindf(-$3);
     break block;
    case 1:
     $1 = Math_fround(-__cosdf($3));
     break block;
    case 2:
     break block3;
    };
   }
   $1 = __sindf($3);
  }
  $0 = $1;
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function __time($0) {
  var $1 = 0.0, $2 = 0, $3 = 0;
  $1 = +emscripten_date_now() / 1.0e3;
  if (Math_abs($1) < 9223372036854775808.0) {
   $3 = ~~$1 >>> 0;
   if (Math_abs($1) >= 1.0) {
    $2 = ~~($1 > 0.0 ? Math_min(Math_floor($1 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($1 - +(~~$1 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
   } else {
    $2 = 0
   }
  } else {
   $2 = -2147483648
  }
  if ($0) {
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $2;
  }
  i64toi32_i32$HIGH_BITS = $2;
  return $3;
 }
 
 function __gettimeofday($0) {
  var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0;
  $3 = +emscripten_date_now();
  $1 = $3 / 1.0e3;
  if (Math_abs($1) < 9223372036854775808.0) {
   $4 = ~~$1 >>> 0;
   if (Math_abs($1) >= 1.0) {
    $2 = ~~($1 > 0.0 ? Math_min(Math_floor($1 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($1 - +(~~$1 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
   } else {
    $2 = 0
   }
  } else {
   $2 = -2147483648
  }
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $2;
  $1 = ($3 - (+(__wasm_i64_mul($4, $2, 1e3, 0) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0)) * 1.0e3;
  if (Math_abs($1) < 2147483647.0) {
   $2 = ~~$1
  } else {
   $2 = -2147483648
  }
  HEAP32[$0 + 8 >> 2] = $2;
 }
 
 function __math_xflowf($0, $1) {
  return Math_fround($1 * fp_barrierf($0 ? Math_fround(-$1) : $1));
 }
 
 function fp_barrierf($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF32[$1 + 12 >> 2] = $0;
  return HEAPF32[$1 + 12 >> 2];
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function fclose($0) {
  var $1 = 0, $2 = 0;
  fflush($0);
  FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($0) | 0;
  if (!(HEAP8[$0 | 0] & 1)) {
   $1 = HEAP32[$0 + 56 >> 2];
   $2 = HEAP32[$0 + 52 >> 2];
   if ($2) {
    HEAP32[$2 + 56 >> 2] = $1
   }
   if ($1) {
    HEAP32[$1 + 52 >> 2] = $2
   }
   if (HEAP32[19618] == ($0 | 0)) {
    HEAP32[19618] = $1
   }
   emscripten_builtin_free(HEAP32[$0 + 96 >> 2]);
   emscripten_builtin_free($0);
  }
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if (!$0) {
   if (HEAP32[18696]) {
    $1 = fflush(HEAP32[18696])
   }
   if (HEAP32[18658]) {
    $1 = fflush(HEAP32[18658]) | $1
   }
   $0 = HEAP32[19618];
   if ($0) {
    while (1) {
     if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
      $1 = fflush($0) | $1
     }
     $0 = HEAP32[$0 + 56 >> 2];
     if ($0) {
      continue
     }
     break;
    }
   }
   return $1 | 0;
  }
  $3 = HEAP32[$0 + 76 >> 2] < 0;
  block1 : {
   block : {
    if (HEAP32[$0 + 20 >> 2] == HEAP32[$0 + 28 >> 2]) {
     break block
    }
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    if (HEAP32[$0 + 20 >> 2]) {
     break block
    }
    $1 = -1;
    break block1;
   }
   $1 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   if (($1 | 0) != ($2 | 0)) {
    $1 = $2 - $1 | 0;
    FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
   }
   $1 = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   if ($3) {
    break block1
   }
  }
  return $1 | 0;
 }
 
 function __memcpy($0, $1, $2) {
  if ($2) {
   wasm2js_memory_copy($0, $1, $2)
  }
  return $0;
 }
 
 function __toread($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$0 + 72 >> 2] = $1 - 1 | $1;
  if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 4) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  return $1 << 27 >> 31;
 }
 
 function __uflow($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = -1;
  block : {
   if (__toread($0)) {
    break block
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
    break block
   }
   $2 = HEAPU8[$1 + 15 | 0];
  }
  __stack_pointer = $1 + 16 | 0;
  return $2;
 }
 
 function __memset($0, $1, $2) {
  if ($2) {
   wasm2js_memory_fill($0, $1 << 24 >> 24, $2)
  }
 }
 
 function __stdio_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = __wasi_syscall_ret(legalimport$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) | 0);
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $0 ? -1 : HEAP32[$4 + 12 >> 2];
  return ($0 ? -1 : HEAP32[$4 + 8 >> 2]) | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[$0 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $4;
  $5 = HEAP32[$0 + 20 >> 2];
  HEAP32[$3 + 28 >> 2] = $2;
  HEAP32[$3 + 24 >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[$3 + 20 >> 2] = $1;
  $5 = $1 + $2 | 0;
  $8 = 2;
  block3 : {
   block2 : {
    $1 = $3 + 16 | 0;
    block1 : {
     block : {
      if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, 2, $3 + 12 | 0) | 0)) {
       $4 = $1;
       break block;
      }
      while (1) {
       $6 = HEAP32[$3 + 12 >> 2];
       if (($6 | 0) == ($5 | 0)) {
        break block1
       }
       if (($6 | 0) < 0) {
        $4 = $1;
        break block2;
       }
       $7 = HEAP32[$1 + 4 >> 2];
       $9 = $7 >>> 0 < $6 >>> 0;
       $4 = ($9 ? 8 : 0) + $1 | 0;
       $7 = $6 - ($9 ? $7 : 0) | 0;
       HEAP32[$4 >> 2] = $7 + HEAP32[$4 >> 2];
       $1 = ($9 ? 12 : 4) + $1 | 0;
       HEAP32[$1 >> 2] = HEAP32[$1 >> 2] - $7;
       $5 = $5 - $6 | 0;
       $1 = $4;
       $8 = $8 - $9 | 0;
       if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $8 | 0, $3 + 12 | 0) | 0)) {
        continue
       }
       break;
      };
     }
     if (($5 | 0) != -1) {
      break block2
     }
    }
    $1 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 28 >> 2] = $1;
    HEAP32[$0 + 20 >> 2] = $1;
    HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
    $0 = $2;
    break block3;
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
   $0 = 0;
   if (($8 | 0) == 2) {
    break block3
   }
   $0 = $2 - HEAP32[$4 + 4 >> 2] | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 16 >> 2] = $1;
  $4 = HEAP32[$0 + 48 >> 2];
  HEAP32[$3 + 20 >> 2] = $2 - (($4 | 0) != 0);
  $6 = HEAP32[$0 + 44 >> 2];
  HEAP32[$3 + 28 >> 2] = $4;
  HEAP32[$3 + 24 >> 2] = $6;
  block1 : {
   block : {
    if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
     $1 = 32
    } else {
     $4 = HEAP32[$3 + 12 >> 2];
     if (($4 | 0) > 0) {
      break block
     }
     $1 = $4 ? 32 : 16;
    }
    HEAP32[$0 >> 2] = $1 | HEAP32[$0 >> 2];
    break block1;
   }
   $5 = $4;
   $6 = HEAP32[$3 + 20 >> 2];
   if ($6 >>> 0 >= $4 >>> 0) {
    break block1
   }
   $5 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 4 >> 2] = $5;
   HEAP32[$0 + 8 >> 2] = $5 + ($4 - $6 | 0);
   if (HEAP32[$0 + 48 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $5 + 1;
    HEAP8[($1 + $2 | 0) - 1 | 0] = HEAPU8[$5 | 0];
   }
   $5 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $5 | 0;
 }
 
 function dummy_1397($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_syscall_ret(__wasi_fd_close(HEAP32[$0 + 60 >> 2]) | 0) | 0;
 }
 
 function fopen($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  block1 : {
   block : {
    if (!strchr(30966, HEAP8[$1 | 0])) {
     HEAP32[19563] = 28;
     break block;
    }
    $2 = 2;
    if (!strchr($1, 43)) {
     $2 = HEAPU8[$1 | 0] != 114
    }
    $2 = strchr($1, 120) ? $2 | 128 : $2;
    $2 = strchr($1, 101) ? $2 | 524288 : $2;
    $4 = $2;
    $6 = $2 | 64;
    $2 = HEAPU8[$1 | 0];
    $4 = ($2 | 0) == 114 ? $4 : $6;
    $4 = ($2 | 0) == 119 ? $4 | 512 : $4;
    HEAP32[$5 >> 2] = 438;
    HEAP32[$5 + 4 >> 2] = 0;
    $2 = __syscall_ret(__syscall_openat(-100, $0 | 0, (($2 | 0) == 97 ? $4 | 1024 : $4) | 32768, $5 | 0) | 0);
    if (($2 | 0) < 0) {
     break block1
    }
    $3 = __stack_pointer - 32 | 0;
    __stack_pointer = $3;
    block4 : {
     block3 : {
      block2 : {
       if (!strchr(30966, HEAP8[$1 | 0])) {
        HEAP32[19563] = 28;
        break block2;
       }
       $0 = emscripten_builtin_malloc(1176);
       if ($0) {
        break block3
       }
      }
      $0 = 0;
      break block4;
     }
     __memset($0, 0, 144);
     if (!strchr($1, 43)) {
      HEAP32[$0 >> 2] = HEAPU8[$1 | 0] == 114 ? 8 : 4
     }
     block5 : {
      if (HEAPU8[$1 | 0] != 97) {
       $1 = HEAP32[$0 >> 2];
       break block5;
      }
      $1 = __syscall_fcntl64($2 | 0, 3, 0) | 0;
      if (!($1 & 1024)) {
       $1 = $1 | 1024;
       HEAP32[$3 + 16 >> 2] = $1;
       HEAP32[$3 + 20 >> 2] = $1 >> 31;
       __syscall_fcntl64($2 | 0, 4, $3 + 16 | 0) | 0;
      }
      $1 = HEAP32[$0 >> 2] | 128;
      HEAP32[$0 >> 2] = $1;
     }
     HEAP32[$0 + 80 >> 2] = -1;
     HEAP32[$0 + 48 >> 2] = 1024;
     HEAP32[$0 + 60 >> 2] = $2;
     HEAP32[$0 + 44 >> 2] = $0 + 152;
     block6 : {
      if ($1 & 8) {
       break block6
      }
      HEAP32[$3 >> 2] = $3 + 24;
      HEAP32[$3 + 4 >> 2] = 0;
      if (__syscall_ioctl($2 | 0, 21523, $3 | 0) | 0) {
       break block6
      }
      HEAP32[$0 + 80 >> 2] = 10;
     }
     HEAP32[$0 + 40 >> 2] = 269;
     HEAP32[$0 + 36 >> 2] = 270;
     HEAP32[$0 + 32 >> 2] = 271;
     HEAP32[$0 + 12 >> 2] = 272;
     if (!HEAPU8[78261]) {
      HEAP32[$0 + 76 >> 2] = -1
     }
     $1 = HEAP32[19618];
     HEAP32[$0 + 56 >> 2] = $1;
     if ($1) {
      HEAP32[$1 + 52 >> 2] = $0
     }
     HEAP32[19618] = $0;
    }
    __stack_pointer = $3 + 32 | 0;
    $3 = $0;
    if ($0) {
     break block1
    }
    __wasi_fd_close($2 | 0) | 0;
   }
   $3 = 0;
  }
  __stack_pointer = $5 + 16 | 0;
  return $3;
 }
 
 function __towrite($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$0 + 72 >> 2] = $1 - 1 | $1;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 8) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
  return 0;
 }
 
 function __overflow($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 15 | 0] = $1;
  $2 = HEAP32[$0 + 16 >> 2];
  block : {
   if (!$2) {
    if (__towrite($0)) {
     $2 = -1;
     break block;
    }
    $2 = HEAP32[$0 + 16 >> 2];
   }
   block1 : {
    $4 = HEAP32[$0 + 20 >> 2];
    if (($2 | 0) == ($4 | 0)) {
     break block1
    }
    $2 = $1 & 255;
    if (($2 | 0) == HEAP32[$0 + 80 >> 2]) {
     break block1
    }
    HEAP32[$0 + 20 >> 2] = $4 + 1;
    HEAP8[$4 | 0] = $1;
    break block;
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $3 + 15 | 0, 1) | 0) != 1) {
    $2 = -1;
    break block;
   }
   $2 = HEAPU8[$3 + 15 | 0];
  }
  __stack_pointer = $3 + 16 | 0;
  return $2;
 }
 
 function fputc($0) {
  var $1 = 0, $2 = 0;
  block2 : {
   $1 = HEAP32[$0 + 76 >> 2];
   if (!(($1 | 0) >= 0 & (!$1 | HEAP32[19625] != ($1 & 1073741823)))) {
    block1 : {
     if (HEAP32[$0 + 80 >> 2] == 10) {
      break block1
     }
     $1 = HEAP32[$0 + 20 >> 2];
     if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
      break block1
     }
     HEAP32[$0 + 20 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 10;
     break block2;
    }
    __overflow($0, 10);
    break block2;
   }
   $2 = $0 + 76 | 0;
   a_cas($2);
   block4 : {
    block3 : {
     if (HEAP32[$0 + 80 >> 2] == 10) {
      break block3
     }
     $1 = HEAP32[$0 + 20 >> 2];
     if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
      break block3
     }
     HEAP32[$0 + 20 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 10;
     break block4;
    }
    __overflow($0, 10);
   }
   a_swap($2);
  }
 }
 
 function a_cas($0) {
  var $1 = 0;
  $1 = $0;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$1 >> 2] = $0 ? $0 : 1073741823;
 }
 
 function a_swap($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  return $1;
 }
 
 function fread($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = Math_imul($1, $2);
  $4 = HEAP32[$3 + 72 >> 2];
  HEAP32[$3 + 72 >> 2] = $4 - 1 | $4;
  $4 = HEAP32[$3 + 4 >> 2];
  $5 = HEAP32[$3 + 8 >> 2];
  if (($4 | 0) == ($5 | 0)) {
   $4 = $6
  } else {
   $7 = $4;
   $4 = $5 - $4 | 0;
   $4 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
   __memcpy($0, $7, $4);
   HEAP32[$3 + 4 >> 2] = $4 + HEAP32[$3 + 4 >> 2];
   $0 = $0 + $4 | 0;
   $4 = $6 - $4 | 0;
  }
  if ($4) {
   while (1) {
    block : {
     if (!__toread($3)) {
      $5 = FUNCTION_TABLE[HEAP32[$3 + 32 >> 2]]($3, $0, $4) | 0;
      if ($5) {
       break block
      }
     }
     return ($6 - $4 >>> 0) / ($1 >>> 0) | 0;
    }
    $0 = $0 + $5 | 0;
    $4 = $4 - $5 | 0;
    if ($4) {
     continue
    }
    break;
   }
  }
  return $1 ? $2 : 0;
 }
 
 function __fseeko_unlocked($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  block : {
   if ($3 >>> 0 >= 3) {
    HEAP32[19563] = 28;
    break block;
   }
   block1 : {
    if (($3 | 0) != 1) {
     break block1
    }
    $4 = HEAP32[$0 + 8 >> 2];
    if (!$4) {
     break block1
    }
    $5 = $1;
    $4 = $4 - HEAP32[$0 + 4 >> 2] | 0;
    $1 = $1 - $4 | 0;
    $2 = $2 - (($4 >> 31) + ($4 >>> 0 > $5 >>> 0) | 0) | 0;
   }
   if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    if (!HEAP32[$0 + 20 >> 2]) {
     break block
    }
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $2, $3) | 0;
   if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
    break block
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
  }
 }
 
 function fseek($0, $1, $2) {
  __fseeko_unlocked($0, $1, $1 >> 31, $2);
 }
 
 function ftell($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, 0, 0, HEAPU8[$0 | 0] & 128 ? (HEAP32[$0 + 20 >> 2] == HEAP32[$0 + 28 >> 2] ? 1 : 2) : 1) | 0;
  $1 = i64toi32_i32$HIGH_BITS;
  block : {
   if (($1 | 0) < 0) {
    break block
   }
   $3 = HEAP32[$0 + 8 >> 2];
   if ($3) {
    $4 = 4
   } else {
    $3 = HEAP32[$0 + 28 >> 2];
    if (!$3) {
     break block
    }
    $4 = 20;
   }
   $0 = HEAP32[$4 + $0 >> 2] - $3 | 0;
   $2 = $0 + $2 | 0;
   $1 = ($0 >> 31) + $1 | 0;
   $1 = $0 >>> 0 > $2 >>> 0 ? $1 + 1 | 0 : $1;
  }
  i64toi32_i32$HIGH_BITS = $1;
  $0 = $2;
  $1 = i64toi32_i32$HIGH_BITS;
  if (($1 | 0) >= 0 & $0 >>> 0 >= 2147483648 | ($1 | 0) > 0) {
   HEAP32[19563] = 61;
   return -1;
  }
  return $0;
 }
 
 function __fwritex($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$2 + 16 >> 2];
  block : {
   if (!$3) {
    if (__towrite($2)) {
     break block
    }
    $3 = HEAP32[$2 + 16 >> 2];
   }
   $4 = HEAP32[$2 + 20 >> 2];
   if ($3 - $4 >>> 0 < $1 >>> 0) {
    return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0
   }
   block2 : {
    block1 : {
     if (!$1 | HEAP32[$2 + 80 >> 2] < 0) {
      break block1
     }
     $3 = $1;
     while (1) {
      $5 = $0 + $3 | 0;
      if (HEAPU8[$5 - 1 | 0] != 10) {
       $3 = $3 - 1 | 0;
       if ($3) {
        continue
       }
       break block1;
      }
      break;
     };
     $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
     if ($4 >>> 0 < $3 >>> 0) {
      break block
     }
     $1 = $1 - $3 | 0;
     $4 = HEAP32[$2 + 20 >> 2];
     break block2;
    }
    $5 = $0;
    $3 = 0;
   }
   __memcpy($4, $5, $1);
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
   $4 = $1 + $3 | 0;
  }
  return $4;
 }
 
 function fwrite($0, $1, $2, $3) {
  var $4 = 0;
  $4 = Math_imul($1, $2);
  block : {
   if (HEAP32[$3 + 76 >> 2] < 0) {
    $0 = __fwritex($0, $4, $3);
    break block;
   }
   $0 = __fwritex($0, $4, $3);
  }
  if (($4 | 0) == ($0 | 0)) {
   return $1 ? $2 : 0
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0;
 }
 
 function getenv($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = __strchrnul($0, 61);
  if (($1 | 0) == ($0 | 0)) {
   return 0
  }
  $4 = $1 - $0 | 0;
  block : {
   if (HEAPU8[$4 + $0 | 0]) {
    break block
   }
   $3 = HEAP32[19564];
   if (!$3) {
    break block
   }
   $2 = HEAP32[$3 >> 2];
   if (!$2) {
    break block
   }
   while (1) {
    block3 : {
     $5 = $0;
     $6 = $4;
     $1 = 0;
     block1 : {
      if (!$4) {
       break block1
      }
      $1 = HEAPU8[$0 | 0];
      if ($1) {
       block2 : {
        while (1) {
         $7 = HEAPU8[$2 | 0];
         if (($7 | 0) != ($1 | 0) | !$7) {
          break block2
         }
         $6 = $6 - 1 | 0;
         if (!$6) {
          break block2
         }
         $2 = $2 + 1 | 0;
         $1 = HEAPU8[$5 + 1 | 0];
         $5 = $5 + 1 | 0;
         if ($1) {
          continue
         }
         break;
        };
        $1 = 0;
       }
      } else {
       $1 = 0
      }
      $1 = $1 - HEAPU8[$2 | 0] | 0;
     }
     if (!$1) {
      $1 = HEAP32[$3 >> 2] + $4 | 0;
      if (HEAPU8[$1 | 0] == 61) {
       break block3
      }
     }
     $2 = HEAP32[$3 + 4 >> 2];
     $3 = $3 + 4 | 0;
     if ($2) {
      continue
     }
     break block;
    }
    break;
   };
   $8 = $1 + 1 | 0;
  }
  return $8;
 }
 
 function ldexp($0) {
  return scalbn(1.0, $0);
 }
 
 function __math_invalidf($0) {
  $0 = Math_fround($0 - $0);
  return Math_fround($0 / $0);
 }
 
 function logf($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0;
  $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  if (($1 | 0) == 1065353216) {
   return Math_fround(0.0)
  }
  block : {
   if ($1 - 2139095040 >>> 0 <= 2164260863) {
    $2 = $1 << 1;
    if (!$2) {
     return Math_fround(fp_barrierf(Math_fround(-1.0)) / Math_fround(0.0))
    }
    if (($1 | 0) == 2139095040) {
     break block
    }
    if (!($2 >>> 0 < 4278190080 & ($1 | 0) >= 0)) {
     return __math_invalidf($0)
    }
    $1 = (wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) - 192937984 | 0;
   }
   $2 = $1 - 1060306944 | 0;
   $4 = $2 >>> 15 & 240;
   $3 = +(wasm2js_scratch_store_i32(2, $1 - ($2 & -8388608) | 0), wasm2js_scratch_load_f32()) * HEAPF64[$4 + 56840 >> 3] + -1.0;
   $5 = $3 * $3;
   $0 = Math_fround((HEAPF64[7138] * $5 + (HEAPF64[7139] * $3 + HEAPF64[7140])) * $5 + (+($2 >> 23) * HEAPF64[7137] + HEAPF64[$4 + 56848 >> 3] + $3));
  }
  return $0;
 }
 
 function lroundf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0;
  $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $3 = $2 >>> 23 & 255;
  if ($3 >>> 0 <= 149) {
   if ($3 >>> 0 <= 125) {
    $0 = Math_fround($0 * Math_fround(0.0))
   } else {
    $0 = Math_fround(Math_abs($0));
    $1 = Math_fround(Math_fround(Math_fround($0 + Math_fround(8388608.0)) + Math_fround(-8388608.0)) - $0);
    block : {
     if ($1 > Math_fround(.5)) {
      $0 = Math_fround(Math_fround($0 + $1) + Math_fround(-1.0));
      break block;
     }
     $0 = Math_fround($0 + $1);
     if (!($1 <= Math_fround(-.5))) {
      break block
     }
     $0 = Math_fround($0 + Math_fround(1.0));
    }
    $0 = ($2 | 0) < 0 ? Math_fround(-$0) : $0;
   }
  }
  return Math_fround(Math_abs($0)) < Math_fround(2147483648.0) ? ~~$0 : -2147483648;
 }
 
 function memchr($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != 0;
  block2 : {
   block1 : {
    block : {
     if (!($0 & 3) | !$2) {
      break block
     }
     $4 = $1 & 255;
     while (1) {
      if (($4 | 0) == HEAPU8[$0 | 0]) {
       break block1
      }
      $2 = $2 - 1 | 0;
      $3 = ($2 | 0) != 0;
      $0 = $0 + 1 | 0;
      if (!($0 & 3)) {
       break block
      }
      if ($2) {
       continue
      }
      break;
     };
    }
    if (!$3) {
     break block2
    }
    $3 = $1 & 255;
    if (!(($3 | 0) == HEAPU8[$0 | 0] | $2 >>> 0 < 4)) {
     $3 = Math_imul($3, 16843009);
     while (1) {
      $4 = $3 ^ HEAP32[$0 >> 2];
      if (((16843008 - $4 | $4) & -2139062144) != -2139062144) {
       break block1
      }
      $0 = $0 + 4 | 0;
      $2 = $2 - 4 | 0;
      if ($2 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break block2
    }
   }
   $1 = $1 & 255;
   while (1) {
    if (($1 | 0) == HEAPU8[$0 | 0]) {
     return $0
    }
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function do_tzset() {
  if (!(HEAP8[78404] & 1)) {
   _tzset_js(78360, 78364, 78416, 78448);
   HEAP32[19593] = 78448;
   HEAP32[19592] = 78416;
   HEAP8[78404] = 1;
  }
 }
 
 function zeroinfnan($0) {
  return ($0 << 1) + 16777216 >>> 0 < 16777217;
 }
 
 function checkint($0) {
  var $1 = 0, $2 = 0;
  $2 = $0 >>> 23 & 255;
  $1 = 0;
  block : {
   if ($2 >>> 0 < 127) {
    break block
   }
   $1 = 2;
   if ($2 >>> 0 > 150) {
    break block
   }
   $2 = 1 << 150 - $2;
   $1 = 0;
   if ($2 - 1 & $0) {
    break block
   }
   $1 = $0 & $2 ? 1 : 2;
  }
  return $1;
 }
 
 function __small_printf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $1;
  __vfprintf_internal(74640, $0, $1, 276, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function puts($0) {
  var $1 = 0;
  block : {
   $1 = $0;
   $0 = strlen($0);
   if ((fwrite($1, 1, $0, 74640) | 0) != ($0 | 0)) {
    break block
   }
   block1 : {
    if (HEAP32[18680] == 10) {
     break block1
    }
    $0 = HEAP32[18665];
    if (($0 | 0) == HEAP32[18664]) {
     break block1
    }
    HEAP32[18665] = $0 + 1;
    HEAP8[$0 | 0] = 10;
    break block;
   }
   __overflow(74640, 10);
  }
 }
 
 function __qsort_r($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 8 >> 2] = 1;
  HEAP32[$4 + 12 >> 2] = 0;
  $6 = Math_imul($1, $2);
  block : {
   if (!$6) {
    break block
   }
   HEAP32[$4 + 16 >> 2] = $2;
   HEAP32[$4 + 20 >> 2] = $2;
   $1 = 2;
   while (1) {
    $5 = ($4 + 16 | 0) + ($1 << 2) | 0;
    $7 = HEAP32[$5 - 4 >> 2] + (HEAP32[$5 - 8 >> 2] + $2 | 0) | 0;
    HEAP32[$5 >> 2] = $7;
    $1 = $1 + 1 | 0;
    if ($6 >>> 0 > $7 >>> 0) {
     continue
    }
    break;
   };
   $1 = $6 - $2 | 0;
   block1 : {
    if (($1 | 0) <= 0) {
     $1 = 1;
     $6 = 0;
     break block1;
    }
    $6 = $0 + $1 | 0;
    $5 = 1;
    $1 = 1;
    while (1) {
     block2 : {
      if (($5 & 3) == 3) {
       sift($0, $2, $3, $1, $4 + 16 | 0);
       shr($4 + 8 | 0, 2);
       $1 = $1 + 2 | 0;
       break block2;
      }
      $7 = $4 + 16 | 0;
      $5 = $1 - 1 | 0;
      block3 : {
       if (HEAPU32[$7 + ($5 << 2) >> 2] >= $6 - $0 >>> 0) {
        trinkle($0, $2, $3, $4 + 8 | 0, $1, 0, $7);
        break block3;
       }
       sift($0, $2, $3, $1, $4 + 16 | 0);
      }
      if (($1 | 0) == 1) {
       shl($4 + 8 | 0, 1);
       $1 = 0;
       break block2;
      }
      shl($4 + 8 | 0, $5);
      $1 = 1;
     }
     $5 = HEAP32[$4 + 8 >> 2] | 1;
     HEAP32[$4 + 8 >> 2] = $5;
     $0 = $0 + $2 | 0;
     if ($6 >>> 0 > $0 >>> 0) {
      continue
     }
     break;
    };
    $6 = HEAP32[$4 + 12 >> 2] != 0;
   }
   $7 = 0 - $2 | 0;
   trinkle($0, $2, $3, $4 + 8 | 0, $1, 0, $4 + 16 | 0);
   if (!(($1 | 0) != 1 | HEAP32[$4 + 8 >> 2] != 1 | $6)) {
    break block
   }
   while (1) {
    block5 : {
     if (($1 | 0) <= 1) {
      $5 = $4 + 8 | 0;
      $6 = pntz($5);
      shr($5, $6);
      $1 = $1 + $6 | 0;
      break block5;
     }
     $5 = $4 + 8 | 0;
     shl($5, 2);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] ^ 7;
     shr($5, 1);
     $9 = $0 + $7 | 0;
     $8 = $4 + 16 | 0;
     $6 = $1 - 2 | 0;
     trinkle($9 - HEAP32[$8 + ($6 << 2) >> 2] | 0, $2, $3, $5, $1 - 1 | 0, 1, $8);
     shl($5, 1);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 1;
     trinkle($9, $2, $3, $5, $6, 1, $8);
     $1 = $6;
    }
    $0 = $0 + $7 | 0;
    if (HEAP32[$4 + 12 >> 2] | (($1 | 0) != 1 | HEAP32[$4 + 8 >> 2] != 1)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $4 + 208 | 0;
 }
 
 function sift($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $7 = __stack_pointer - 240 | 0;
  __stack_pointer = $7;
  HEAP32[$7 >> 2] = $0;
  $8 = 1;
  block : {
   if (($3 | 0) < 2) {
    break block
   }
   $10 = 0 - $1 | 0;
   $5 = $0;
   while (1) {
    $5 = $5 + $10 | 0;
    $9 = $3 - 2 | 0;
    $6 = $5 - HEAP32[($9 << 2) + $4 >> 2] | 0;
    if ((FUNCTION_TABLE[$2 | 0]($0, $6) | 0) >= 0) {
     if ((FUNCTION_TABLE[$2 | 0]($0, $5) | 0) >= 0) {
      break block
     }
    }
    $11 = $6;
    $6 = (FUNCTION_TABLE[$2 | 0]($6, $5) | 0) >= 0;
    $5 = $6 ? $11 : $5;
    HEAP32[($8 << 2) + $7 >> 2] = $5;
    $8 = $8 + 1 | 0;
    $3 = $6 ? $3 - 1 | 0 : $9;
    if (($3 | 0) > 1) {
     continue
    }
    break;
   };
  }
  cycle($1, $7, $8);
  __stack_pointer = $7 + 240 | 0;
 }
 
 function shr($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  block : {
   if ($1 >>> 0 <= 31) {
    $3 = HEAP32[$0 >> 2];
    break block;
   }
   $1 = $1 - 32 | 0;
   $3 = $2;
   $2 = 0;
  }
  HEAP32[$0 + 4 >> 2] = $2 >>> $1;
  HEAP32[$0 >> 2] = $2 << 32 - $1 | $3 >>> $1;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $8 = __stack_pointer - 240 | 0;
  __stack_pointer = $8;
  $7 = HEAP32[$3 >> 2];
  HEAP32[$8 + 232 >> 2] = $7;
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$8 >> 2] = $0;
  HEAP32[$8 + 236 >> 2] = $3;
  $12 = 0 - $1 | 0;
  $11 = !$5;
  block4 : {
   block3 : {
    block1 : {
     block : {
      if (($7 | 0) != 1) {
       $7 = $0;
       $5 = 1;
       break block;
      }
      $7 = $0;
      $5 = 1;
      if ($3) {
       break block
      }
      break block1;
     }
     while (1) {
      $9 = ($4 << 2) + $6 | 0;
      $3 = $7 - HEAP32[$9 >> 2] | 0;
      if ((FUNCTION_TABLE[$2 | 0]($3, $0) | 0) <= 0) {
       break block1
      }
      $10 = $11 ^ -1;
      $11 = 1;
      block2 : {
       if (!(($10 | ($4 | 0) < 2) & 1)) {
        $9 = HEAP32[$9 - 8 >> 2];
        $10 = $7 + $12 | 0;
        if ((FUNCTION_TABLE[$2 | 0]($10, $3) | 0) >= 0) {
         break block2
        }
        if ((FUNCTION_TABLE[$2 | 0]($10 - $9 | 0, $3) | 0) >= 0) {
         break block2
        }
       }
       HEAP32[($5 << 2) + $8 >> 2] = $3;
       $9 = $8 + 232 | 0;
       $7 = pntz($9);
       shr($9, $7);
       $5 = $5 + 1 | 0;
       $4 = $4 + $7 | 0;
       $7 = $3;
       if (HEAP32[$8 + 236 >> 2] | HEAP32[$8 + 232 >> 2] != 1) {
        continue
       }
       break block3;
      }
      break;
     };
     $3 = $7;
     break block3;
    }
    $3 = $7;
    if (!$11) {
     break block4
    }
   }
   cycle($1, $8, $5);
   sift($3, $1, $2, $4, $6);
  }
  __stack_pointer = $8 + 240 | 0;
 }
 
 function shl($0, $1) {
  var $2 = 0, $3 = 0;
  block : {
   if ($1 >>> 0 <= 31) {
    $3 = HEAP32[$0 >> 2];
    $2 = $0 + 4 | 0;
    break block;
   }
   $1 = $1 - 32 | 0;
   $2 = $0;
  }
  $2 = HEAP32[$2 >> 2];
  HEAP32[$0 >> 2] = $3 << $1;
  HEAP32[$0 + 4 >> 2] = $2 << $1 | $3 >>> 32 - $1;
 }
 
 function pntz($0) {
  var $1 = 0;
  $1 = a_ctz_32(HEAP32[$0 >> 2] - 1 | 0);
  if (!$1) {
   $0 = a_ctz_32(HEAP32[$0 + 4 >> 2]);
   $1 = $0 ? $0 | 32 : 0;
  }
  return $1;
 }
 
 function cycle($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  block : {
   if (($2 | 0) < 2) {
    break block
   }
   $7 = ($2 << 2) + $1 | 0;
   HEAP32[$7 >> 2] = $5;
   if (!$0) {
    break block
   }
   while (1) {
    $4 = $0 >>> 0 >= 256 ? 256 : $0;
    __memcpy(HEAP32[$7 >> 2], HEAP32[$1 >> 2], $4);
    $3 = 0;
    while (1) {
     $6 = ($3 << 2) + $1 | 0;
     $3 = $3 + 1 | 0;
     __memcpy(HEAP32[$6 >> 2], HEAP32[($3 << 2) + $1 >> 2], $4);
     HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + $4;
     if (($2 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    $0 = $0 - $4 | 0;
    if ($0) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function a_ctz_32($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return wasm2js_i32$0 = __wasm_ctz_i32($0), wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1;
 }
 
 function wrapper_cmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$2 | 0]($0, $1) | 0;
 }
 
 function rewind($0) {
  if (HEAP32[$0 + 76 >> 2] >= 0) {
   __fseeko_unlocked($0, 0, 0, 0);
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
   return;
  }
  __fseeko_unlocked($0, 0, 0, 0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
 }
 
 function scalbn($0, $1) {
  block : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    if ($1 >>> 0 < 2047) {
     $1 = $1 - 1023 | 0;
     break block;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = ($1 >>> 0 >= 3069 ? 3069 : $1) - 2046 | 0;
    break block;
   }
   if (($1 | 0) > -1023) {
    break block
   }
   $0 = $0 * 2.004168360008973e-292;
   if ($1 >>> 0 > 4294965304) {
    $1 = $1 + 969 | 0;
    break block;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = ($1 >>> 0 <= 4294964336 ? -2960 : $1) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function sin($0) {
  var $1 = 0, $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1 = $1 & 2147483647;
  block : {
   if ($1 >>> 0 <= 1072243195) {
    if ($1 >>> 0 < 1045430272) {
     break block
    }
    $0 = __sin($0, 0.0, 0);
    break block;
   }
   if ($1 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    break block;
   }
   $1 = __rem_pio2($0, $2);
   $0 = HEAPF64[$2 + 8 >> 3];
   $3 = HEAPF64[$2 >> 3];
   block3 : {
    switch (($1 & 3) - 1 | 0) {
    default:
     $0 = __sin($3, $0, 1);
     break block;
    case 0:
     $0 = __cos($3, $0);
     break block;
    case 1:
     $0 = -__sin($3, $0, 1);
     break block;
    case 2:
     break block3;
    };
   }
   $0 = -__cos($3, $0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function sinf($0) {
  var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $3 & 2147483647;
  block : {
   if ($2 >>> 0 <= 1061752794) {
    if ($2 >>> 0 < 964689920) {
     break block
    }
    $0 = __sindf(+$0);
    break block;
   }
   if ($2 >>> 0 <= 1081824209) {
    $1 = +$0;
    if ($2 >>> 0 <= 1075235811) {
     if (($3 | 0) < 0) {
      $0 = Math_fround(-__cosdf($1 + 1.5707963267948966));
      break block;
     }
     $0 = __cosdf($1 + -1.5707963267948966);
     break block;
    }
    $0 = __sindf(-((($3 | 0) >= 0 ? -3.141592653589793 : 3.141592653589793) + $1));
    break block;
   }
   if ($2 >>> 0 <= 1088565717) {
    if ($2 >>> 0 <= 1085271519) {
     $1 = +$0;
     if (($3 | 0) < 0) {
      $0 = __cosdf($1 + 4.71238898038469);
      break block;
     }
     $0 = Math_fround(-__cosdf($1 + -4.71238898038469));
     break block;
    }
    $0 = __sindf((($3 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    break block;
   }
   if ($2 >>> 0 >= 2139095040) {
    $0 = Math_fround($0 - $0);
    break block;
   }
   $2 = __rem_pio2f($0, $4 + 8 | 0);
   $1 = HEAPF64[$4 + 8 >> 3];
   block3 : {
    switch (($2 & 3) - 1 | 0) {
    default:
     $0 = __sindf($1);
     break block;
    case 0:
     $0 = __cosdf($1);
     break block;
    case 1:
     $0 = __sindf(-$1);
     break block;
    case 2:
     break block3;
    };
   }
   $0 = Math_fround(-__cosdf($1));
  }
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function snprintf($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $3;
  $0 = vsnprintf($0, $1, $2, $3);
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function siprintf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $2;
  $3 = __stack_pointer - 160 | 0;
  __stack_pointer = $3;
  $6 = $3 + 8 | 0;
  wasm2js_memory_copy($6, 60560, 144);
  HEAP32[$3 + 52 >> 2] = $0;
  HEAP32[$3 + 28 >> 2] = $0;
  $4 = -2 - $0 | 0;
  $4 = $4 >>> 0 > 2147483647 ? 2147483647 : $4;
  HEAP32[$3 + 56 >> 2] = $4;
  $4 = $0 + $4 | 0;
  HEAP32[$3 + 36 >> 2] = $4;
  HEAP32[$3 + 24 >> 2] = $4;
  vfiprintf($6, $1, $2);
  if (($0 | 0) != -2) {
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP8[$0 - (($0 | 0) == HEAP32[$3 + 24 >> 2]) | 0] = 0;
  }
  __stack_pointer = $3 + 160 | 0;
  __stack_pointer = $5 + 16 | 0;
 }
 
 function sscanf($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $2;
  $0 = vsscanf($0, $1, $2);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function __emscripten_stdout_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function strchr($0, $1) {
  $0 = __strchrnul($0, $1);
  return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
 }
 
 function __strchrnul($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   block2 : {
    block1 : {
     $3 = $1 & 255;
     if ($3) {
      if ($0 & 3) {
       while (1) {
        $2 = HEAPU8[$0 | 0];
        if (!$2 | ($2 | 0) == ($3 | 0)) {
         break block
        }
        $0 = $0 + 1 | 0;
        if ($0 & 3) {
         continue
        }
        break;
       }
      }
      $2 = HEAP32[$0 >> 2];
      if ((($2 | 16843008 - $2) & -2139062144) != -2139062144) {
       break block1
      }
      $4 = Math_imul($3, 16843009);
      while (1) {
       $3 = $2 ^ $4;
       if (((16843008 - $3 | $3) & -2139062144) != -2139062144) {
        break block1
       }
       $2 = HEAP32[$0 + 4 >> 2];
       $3 = $0 + 4 | 0;
       $0 = $3;
       if (((16843008 - $2 | $2) & -2139062144) == -2139062144) {
        continue
       }
       break;
      };
      break block2;
     }
     return strlen($0) + $0 | 0;
    }
    $3 = $0;
   }
   while (1) {
    $0 = $3;
    $2 = HEAPU8[$0 | 0];
    if (!$2) {
     break block
    }
    $3 = $0 + 1 | 0;
    if (($2 | 0) != ($1 & 255)) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function strcmp($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAPU8[$0 | 0];
  $3 = HEAPU8[$1 | 0];
  block : {
   if (!$2 | ($3 | 0) != ($2 | 0)) {
    break block
   }
   while (1) {
    $3 = HEAPU8[$1 + 1 | 0];
    $2 = HEAPU8[$0 + 1 | 0];
    if (!$2) {
     break block
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($2 | 0) == ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $2 - $3 | 0;
 }
 
 function __strerror_l($0) {
  return HEAPU16[(($0 >>> 0 <= 153 ? $0 : 0) << 1) + 59344 >> 1] + 57432 | 0;
 }
 
 function strerror($0) {
  $0 = $0 | 0;
  return __strerror_l($0) | 0;
 }
 
 function __nl_langinfo_l($0, $1) {
  var $2 = 0, $3 = 0;
  if (($0 | 0) == 14) {
   return HEAP32[$1 >> 2] ? 33099 : 31676
  }
  $2 = $0 & 65535;
  $3 = $0 >> 16;
  if (!(($2 | 0) != 65535 | ($3 | 0) > 5)) {
   $0 = HEAP32[($3 << 2) + $1 >> 2];
   return $0 ? $0 + 8 | 0 : 32305;
  }
  $0 = 34591;
  block2 : {
   block4 : {
    block3 : {
     switch ($3 - 1 | 0) {
     case 0:
      if ($2 >>> 0 > 1) {
       break block2
      }
      $0 = 59712;
      break block4;
     case 1:
      if ($2 >>> 0 > 49) {
       break block2
      }
      $0 = 59728;
      break block4;
     case 4:
      break block3;
     default:
      break block2;
     };
    }
    if ($2 >>> 0 > 3) {
     break block2
    }
    $0 = 60048;
   }
   if (!$2) {
    return $0
   }
   while (1) {
    $1 = HEAPU8[$0 | 0];
    $0 = $0 + 1 | 0;
    if ($1) {
     continue
    }
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function week_num($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = 53;
  $4 = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  $3 = $4 - $1 | 0;
  $1 = ((($1 - (($4 + 6 >>> 0) % 7 | 0) | 0) + 7 >>> 0) / 7 | 0) + (($3 + 369 >>> 0) % 7 >>> 0 < 3) | 0;
  block : {
   if (($1 | 0) != 53) {
    $2 = $1;
    if ($1) {
     break block
    }
    $2 = 52;
    block1 : {
     switch ((($3 + 6 >>> 0) % 7 | 0) - 4 | 0) {
     case 1:
      if (!is_leap((HEAP32[$0 + 20 >> 2] % 400 | 0) - 1 | 0)) {
       break block
      }
      break;
     case 0:
      break block1;
     default:
      break block;
     };
    }
    return 53;
   }
   block4 : {
    switch ((($3 + 371 >>> 0) % 7 | 0) - 3 | 0) {
    case 0:
     if (is_leap(HEAP32[$0 + 20 >> 2])) {
      break block
     }
     break;
    case 1:
     break block;
    default:
     break block4;
    };
   }
   $2 = 1;
  }
  return $2;
 }
 
 function __strftime_l($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10 = __stack_pointer - 128 | 0;
  __stack_pointer = $10;
  if ($1) {
   block1 : {
    while (1) {
     block63 : {
      block5 : {
       block3 : {
        block2 : {
         $9 = HEAPU8[$2 | 0];
         block : {
          if (($9 | 0) != 37) {
           if ($9) {
            break block
           }
           $6 = $12;
           break block1;
          }
          $5 = 0;
          $7 = 1;
          block4 : {
           $6 = HEAPU8[$2 + 1 | 0];
           switch ($6 - 45 | 0) {
           case 0:
           case 3:
            break block2;
           case 1:
           case 2:
            break block3;
           default:
            break block4;
           };
          }
          if (($6 | 0) == 95) {
           break block2
          }
          if ($6) {
           break block3
          }
         }
         HEAP8[$0 + $12 | 0] = $9;
         $12 = $12 + 1 | 0;
         break block5;
        }
        $5 = $6;
        $6 = HEAPU8[$2 + 2 | 0];
        $7 = 2;
       }
       $18 = 0;
       $23 = $6;
       $16 = ($2 + $7 | 0) + (($6 | 0) == 43) | 0;
       block6 : {
        if (HEAP8[$16 | 0] - 48 >>> 0 <= 9) {
         $2 = strtox($16, $10 + 12 | 0, 10, -1, 0);
         $9 = HEAP32[$10 + 12 >> 2];
         break block6;
        }
        HEAP32[$10 + 12 >> 2] = $16;
        $2 = 0;
        $9 = $16;
       }
       $6 = HEAPU8[$9 | 0];
       $7 = $6 - 67 | 0;
       block7 : {
        if ($7 >>> 0 > 22 | !(1 << $7 & 4194329)) {
         break block7
        }
        $18 = $2;
        if ($2) {
         break block7
        }
        $18 = ($9 | 0) != ($16 | 0);
       }
       if (($6 | 0) == 79 | ($6 | 0) == 69) {
        $6 = HEAPU8[$9 + 1 | 0];
        $2 = $9 + 1 | 0;
       } else {
        $2 = $9
       }
       $9 = $10 + 16 | 0;
       $16 = $5;
       $5 = 0;
       $14 = __stack_pointer - 80 | 0;
       __stack_pointer = $14;
       $8 = 24483;
       $21 = 48;
       $11 = 131112;
       block9 : {
        block61 : {
         block46 : {
          block52 : {
           block51 : {
            block48 : {
             block13 : {
              block30 : {
               block37 : {
                block47 : {
                 block45 : {
                  block50 : {
                   block8 : {
                    block27 : {
                     block44 : {
                      block26 : {
                       block43 : {
                        block25 : {
                         block42 : {
                          block60 : {
                           block41 : {
                            block23 : {
                             block24 : {
                              block22 : {
                               block40 : {
                                block21 : {
                                 block39 : {
                                  block20 : {
                                   block38 : {
                                    block19 : {
                                     block36 : {
                                      block35 : {
                                       block18 : {
                                        block34 : {
                                         block33 : {
                                          block17 : {
                                           block16 : {
                                            block15 : {
                                             block14 : {
                                              block31 : {
                                               block32 : {
                                                block12 : {
                                                 block11 : {
                                                  block29 : {
                                                   block10 : {
                                                    block28 : {
                                                     $13 = $6 << 24 >> 24;
                                                     switch ($13 - 37 | 0) {
                                                     case 28:
                                                      break block10;
                                                     case 29:
                                                      break block11;
                                                     case 30:
                                                      break block12;
                                                     case 31:
                                                      break block13;
                                                     case 33:
                                                      break block14;
                                                     case 34:
                                                     case 66:
                                                      break block15;
                                                     case 35:
                                                      break block16;
                                                     case 36:
                                                      break block17;
                                                     case 40:
                                                      break block18;
                                                     case 45:
                                                      break block19;
                                                     case 46:
                                                      break block20;
                                                     case 47:
                                                      break block21;
                                                     case 48:
                                                      break block22;
                                                     case 49:
                                                      break block23;
                                                     case 50:
                                                      break block24;
                                                     case 51:
                                                      break block25;
                                                     case 52:
                                                      break block26;
                                                     case 53:
                                                      break block27;
                                                     case 60:
                                                      break block28;
                                                     case 61:
                                                     case 67:
                                                      break block29;
                                                     case 62:
                                                      break block30;
                                                     case 63:
                                                      break block31;
                                                     case 64:
                                                      break block32;
                                                     case 69:
                                                      break block33;
                                                     case 72:
                                                      break block34;
                                                     case 73:
                                                      break block35;
                                                     case 75:
                                                      break block36;
                                                     case 77:
                                                      break block37;
                                                     case 78:
                                                      break block38;
                                                     case 79:
                                                      break block39;
                                                     case 80:
                                                      break block40;
                                                     case 82:
                                                      break block41;
                                                     case 83:
                                                      break block42;
                                                     case 84:
                                                      break block43;
                                                     case 85:
                                                      break block44;
                                                     case 0:
                                                      break block8;
                                                     default:
                                                      break block9;
                                                     };
                                                    }
                                                    $5 = HEAP32[$3 + 24 >> 2];
                                                    if ($5 >>> 0 <= 6) {
                                                     break block45
                                                    }
                                                    break block46;
                                                   }
                                                   $5 = HEAP32[$3 + 24 >> 2];
                                                   if ($5 >>> 0 > 6) {
                                                    break block46
                                                   }
                                                   $5 = $5 + 131079 | 0;
                                                   break block47;
                                                  }
                                                  $5 = HEAP32[$3 + 16 >> 2];
                                                  if ($5 >>> 0 > 11) {
                                                   break block46
                                                  }
                                                  $5 = $5 + 131086 | 0;
                                                  break block47;
                                                 }
                                                 $5 = HEAP32[$3 + 16 >> 2];
                                                 if ($5 >>> 0 > 11) {
                                                  break block46
                                                 }
                                                 $5 = $5 + 131098 | 0;
                                                 break block47;
                                                }
                                                $5 = HEAP32[$3 + 20 >> 2];
                                                $6 = $5 >> 31;
                                                $5 = $5 + 1900 | 0;
                                                $6 = $5 >>> 0 < 1900 ? $6 + 1 | 0 : $6;
                                                $6 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($5, $6, 100);
                                                $7 = i64toi32_i32$HIGH_BITS;
                                                break block48;
                                               }
                                               $21 = 95;
                                              }
                                              $6 = HEAP32[$3 + 12 >> 2];
                                              $7 = $6 >> 31;
                                              break block48;
                                             }
                                             $8 = 30035;
                                             break block13;
                                            }
                                            $8 = HEAP32[$3 + 20 >> 2];
                                            $5 = $8 >> 31;
                                            $6 = $8 + 1900 | 0;
                                            $7 = $6 >>> 0 < 1900 ? $5 + 1 | 0 : $5;
                                            $11 = HEAP32[$3 + 28 >> 2];
                                            block49 : {
                                             if (($11 | 0) <= 2) {
                                              $15 = $5 + 1 | 0;
                                              $17 = $5;
                                              $5 = $8 + 1899 | 0;
                                              $8 = $5 >>> 0 < 1899 ? $15 : $17;
                                              $17 = $5;
                                              $5 = (week_num($3) | 0) == 1;
                                              $6 = $5 ? $6 : $17;
                                              $7 = $5 ? $7 : $8;
                                              break block49;
                                             }
                                             if ($11 >>> 0 < 361) {
                                              break block49
                                             }
                                             $15 = $5 + 1 | 0;
                                             $17 = $5;
                                             $5 = $8 + 1901 | 0;
                                             $8 = $5 >>> 0 < 1901 ? $15 : $17;
                                             $17 = $5;
                                             $5 = (week_num($3) | 0) == 1;
                                             $6 = $5 ? $17 : $6;
                                             $7 = $5 ? $8 : $7;
                                            }
                                            if (($13 | 0) == 103) {
                                             break block50
                                            }
                                            break block51;
                                           }
                                           $6 = HEAP32[$3 + 8 >> 2];
                                           $7 = $6 >> 31;
                                           break block48;
                                          }
                                          $5 = 2;
                                          $7 = HEAP32[$3 + 8 >> 2];
                                          if (!$7) {
                                           $6 = 12;
                                           $7 = 0;
                                           break block52;
                                          }
                                          $8 = ($7 | 0) > 12;
                                          $6 = $8 ? $7 - 12 | 0 : $7;
                                          $11 = $7 >> 31;
                                          $7 = $8 ? $11 - ($7 >>> 0 < 12) | 0 : $11;
                                          break block52;
                                         }
                                         $6 = HEAP32[$3 + 28 >> 2] + 1 | 0;
                                         $7 = $6 >> 31;
                                         $5 = 3;
                                         break block52;
                                        }
                                        $6 = HEAP32[$3 + 16 >> 2] + 1 | 0;
                                        $7 = $6 >> 31;
                                        break block48;
                                       }
                                       $6 = HEAP32[$3 + 4 >> 2];
                                       $7 = $6 >> 31;
                                       break block48;
                                      }
                                      HEAP32[$10 + 124 >> 2] = 1;
                                      $5 = 34588;
                                      break block9;
                                     }
                                     $5 = HEAP32[$3 + 8 >> 2] > 11 ? 131111 : 131110;
                                     break block47;
                                    }
                                    $8 = 31536;
                                    break block13;
                                   }
                                   $11 = 0;
                                   $19 = 0;
                                   $20 = __stack_pointer - 16 | 0;
                                   __stack_pointer = $20;
                                   $6 = HEAP32[$3 + 20 >> 2];
                                   $7 = $6 >> 31;
                                   $8 = HEAP32[$3 + 16 >> 2];
                                   if ($8 >>> 0 >= 12) {
                                    $13 = ($8 | 0) / 12 | 0;
                                    $5 = $8 - Math_imul($13, 12) | 0;
                                    $8 = ($5 | 0) < 0 ? $5 + 12 | 0 : $5;
                                    $5 = $13 + ($5 >> 31) | 0;
                                    $7 = $7 + ($5 >> 31) | 0;
                                    $13 = $6;
                                    $6 = $5 + $6 | 0;
                                    $7 = $13 >>> 0 > $6 >>> 0 ? $7 + 1 | 0 : $7;
                                   }
                                   $13 = $20 + 12 | 0;
                                   block55 : {
                                    if (($6 >>> 0 < 2 | 0) == ($7 | 0) & $6 - 2 >>> 0 <= 136) {
                                     $5 = $6 - 68 >> 2;
                                     block53 : {
                                      block54 : {
                                       if (!($6 & 3)) {
                                        $5 = $5 - 1 | 0;
                                        if (!$13) {
                                         break block53
                                        }
                                        $7 = 1;
                                        break block54;
                                       }
                                       if (!$13) {
                                        break block53
                                       }
                                       $7 = 0;
                                      }
                                      HEAP32[$13 >> 2] = $7;
                                     }
                                     $6 = (Math_imul($6, 31536e3) + Math_imul($5, 86400) | 0) + 2087447296 | 0;
                                     $15 = $6 >> 31;
                                     break block55;
                                    }
                                    $5 = $6 - 100 | 0;
                                    $17 = $5;
                                    $6 = $7 - ($6 >>> 0 < 100) | 0;
                                    $15 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($5, $6, 400);
                                    $22 = __wasm_i64_mul($15, i64toi32_i32$HIGH_BITS, 400, 0);
                                    $7 = $5 - $22 | 0;
                                    $5 = $6 - (i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $22 >>> 0) | 0) | 0;
                                    $15 = $15 + ($5 >> 31) | 0;
                                    block59 : {
                                     block58 : {
                                      block57 : {
                                       $5 = ($5 | 0) < 0 ? $7 + 400 | 0 : $7;
                                       if ($5) {
                                        block56 : {
                                         if (($5 | 0) >= 200) {
                                          if ($5 >>> 0 >= 300) {
                                           $11 = 3;
                                           $5 = $5 - 300 | 0;
                                           break block56;
                                          }
                                          $11 = 2;
                                          $5 = $5 - 200 | 0;
                                          break block56;
                                         }
                                         $11 = ($5 | 0) > 99;
                                         $5 = $11 ? $5 - 100 | 0 : $5;
                                        }
                                        if ($5) {
                                         break block57
                                        }
                                        $5 = 0;
                                       } else {
                                        $5 = 1
                                       }
                                       if ($13) {
                                        break block58
                                       }
                                       break block59;
                                      }
                                      $19 = $5 >>> 2 | 0;
                                      $5 = !($5 & 3);
                                      if (!$13) {
                                       break block59
                                      }
                                     }
                                     HEAP32[$13 >> 2] = $5;
                                    }
                                    $6 = __wasm_i64_mul($17, $6, 31536e3, 0);
                                    $7 = i64toi32_i32$HIGH_BITS;
                                    $5 = ((Math_imul($11, 24) + Math_imul($15, 97) | 0) + $19 | 0) - $5 | 0;
                                    $11 = __wasm_i64_mul($5, $5 >> 31, 86400, 0);
                                    $5 = $6 + $11 | 0;
                                    $6 = i64toi32_i32$HIGH_BITS + $7 | 0;
                                    $6 = $5 >>> 0 < $11 >>> 0 ? $6 + 1 | 0 : $6;
                                    $13 = $6 + 1 | 0;
                                    $7 = $6;
                                    $6 = $5 + 946771200 | 0;
                                    $15 = $6 >>> 0 < 946771200 ? $13 : $7;
                                   }
                                   $7 = HEAP32[$3 + 8 >> 2];
                                   $11 = $7 >> 31;
                                   $13 = HEAP32[$3 + 4 >> 2];
                                   $19 = $13 >> 31;
                                   __stack_pointer = $20 + 16 | 0;
                                   $17 = HEAP32[$3 >> 2];
                                   $5 = HEAP32[($8 << 2) + 59664 >> 2];
                                   $5 = ($8 | 0) > 1 ? (HEAP32[$20 + 12 >> 2] ? $5 + 86400 | 0 : $5) : $5;
                                   $8 = $15 + ($5 >> 31) | 0;
                                   $15 = $5;
                                   $5 = $5 + $6 | 0;
                                   $6 = $15 >>> 0 > $5 >>> 0 ? $8 + 1 | 0 : $8;
                                   $15 = $5;
                                   $5 = HEAP32[$3 + 12 >> 2] - 1 | 0;
                                   $8 = __wasm_i64_mul($5, $5 >> 31, 86400, 0);
                                   $5 = $15 + $8 | 0;
                                   $6 = i64toi32_i32$HIGH_BITS + $6 | 0;
                                   $11 = __wasm_i64_mul($7, $11, 3600, 0);
                                   $7 = $11 + $5 | 0;
                                   $6 = i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $8 >>> 0 ? $6 + 1 | 0 : $6) | 0;
                                   $8 = __wasm_i64_mul($13, $19, 60, 0);
                                   $5 = $8 + $7 | 0;
                                   $6 = i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $11 >>> 0 ? $6 + 1 | 0 : $6) | 0;
                                   $6 = ($17 >> 31) + ($5 >>> 0 < $8 >>> 0 ? $6 + 1 | 0 : $6) | 0;
                                   $7 = $5;
                                   $5 = $5 + $17 | 0;
                                   $8 = $7 >>> 0 > $5 >>> 0 ? $6 + 1 | 0 : $6;
                                   $7 = HEAP32[$3 + 36 >> 2];
                                   $6 = $5 - $7 | 0;
                                   $7 = $8 - (($7 >> 31) + ($5 >>> 0 < $7 >>> 0) | 0) | 0;
                                   break block60;
                                  }
                                  $6 = HEAP32[$3 >> 2];
                                  $7 = $6 >> 31;
                                  break block48;
                                 }
                                 HEAP32[$10 + 124 >> 2] = 1;
                                 $5 = 34590;
                                 break block9;
                                }
                                $8 = 31310;
                                break block13;
                               }
                               $5 = HEAP32[$3 + 24 >> 2];
                               $6 = $5 ? $5 : 7;
                               $7 = $6 >> 31;
                               break block60;
                              }
                              $6 = ((HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 24 >> 2] | 0) + 7 >>> 0) / 7 | 0;
                              $7 = 0;
                              break block48;
                             }
                             $6 = ((HEAP32[$3 + 28 >> 2] - ((HEAP32[$3 + 24 >> 2] + 6 >>> 0) % 7 | 0) | 0) + 7 >>> 0) / 7 | 0;
                             $7 = 0;
                             break block48;
                            }
                            $6 = week_num($3);
                            $7 = 0;
                            break block48;
                           }
                           $6 = HEAP32[$3 + 24 >> 2];
                           $7 = $6 >> 31;
                          }
                          $5 = 1;
                          break block52;
                         }
                         $11 = 131113;
                         break block30;
                        }
                        $11 = 131114;
                        break block30;
                       }
                       $5 = HEAP32[$3 + 20 >> 2];
                       $6 = $5 >> 31;
                       $5 = $5 + 1900 | 0;
                       $6 = $5 >>> 0 < 1900 ? $6 + 1 | 0 : $6;
                       $6 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E($5, $6);
                       $5 = i64toi32_i32$HIGH_BITS;
                       $7 = $5;
                       $5 = $5 >> 31;
                       $8 = $6 ^ $5;
                       $6 = $8 - $5 | 0;
                       $7 = ($5 ^ $7) - (($5 >>> 0 > $8 >>> 0) + $5 | 0) | 0;
                       break block48;
                      }
                      $5 = HEAP32[$3 + 20 >> 2];
                      $6 = $5 >> 31;
                      $8 = $6;
                      $6 = $5 + 1900 | 0;
                      $7 = $6 >>> 0 < 1900 ? $8 + 1 | 0 : $8;
                      if ($5 >>> 0 < 8100 & ($8 | 0) <= 0 | ($8 | 0) < 0) {
                       break block51
                      }
                      HEAP32[$14 + 48 >> 2] = $6;
                      HEAP32[$14 + 52 >> 2] = $7;
                      (wasm2js_i32$0 = $10, wasm2js_i32$1 = snprintf($9, 100, 29376, $14 + 48 | 0)), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
                      $5 = $9;
                      break block9;
                     }
                     if (HEAP32[$3 + 32 >> 2] < 0) {
                      HEAP32[$10 + 124 >> 2] = 0;
                      $5 = 34591;
                      break block9;
                     }
                     $5 = HEAP32[$3 + 36 >> 2];
                     $6 = ($5 | 0) / 3600 | 0;
                     HEAP32[$14 + 64 >> 2] = Math_imul($6, 100) + (($5 - Math_imul($6, 3600) << 16 >> 16) / 60 << 16 >> 16);
                     (wasm2js_i32$0 = $10, wasm2js_i32$1 = snprintf($9, 100, 29382, $14 - -64 | 0)), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
                     $5 = $9;
                     break block9;
                    }
                    if (HEAP32[$3 + 32 >> 2] < 0) {
                     HEAP32[$10 + 124 >> 2] = 0;
                     $5 = 34591;
                     break block9;
                    }
                    $5 = HEAP32[$3 + 40 >> 2];
                    do_tzset();
                    break block61;
                   }
                   HEAP32[$10 + 124 >> 2] = 1;
                   $5 = 33755;
                   break block9;
                  }
                  $6 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E($6, $7);
                  $7 = i64toi32_i32$HIGH_BITS;
                  break block48;
                 }
                 $5 = $5 | 131072;
                }
                $5 = __nl_langinfo_l($5, $4);
                break block61;
               }
               $11 = 131115;
              }
              $8 = __nl_langinfo_l($11, $4);
             }
             $5 = __strftime_l($9, 100, $8, $3, $4);
             HEAP32[$10 + 124 >> 2] = $5;
             $5 = $5 ? $9 : 0;
             break block9;
            }
            $5 = 2;
            break block52;
           }
           $5 = 4;
          }
          block62 : {
           $16 = $16 ? $16 : $21;
           if (($16 | 0) != 95) {
            if (($16 | 0) != 45) {
             break block62
            }
            HEAP32[$14 + 16 >> 2] = $6;
            HEAP32[$14 + 20 >> 2] = $7;
            (wasm2js_i32$0 = $10, wasm2js_i32$1 = snprintf($9, 100, 29377, $14 + 16 | 0)), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
            $5 = $9;
            break block9;
           }
           HEAP32[$14 + 40 >> 2] = $6;
           HEAP32[$14 + 44 >> 2] = $7;
           HEAP32[$14 + 32 >> 2] = $5;
           (wasm2js_i32$0 = $10, wasm2js_i32$1 = snprintf($9, 100, 29370, $14 + 32 | 0)), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
           $5 = $9;
           break block9;
          }
          HEAP32[$14 + 8 >> 2] = $6;
          HEAP32[$14 + 12 >> 2] = $7;
          HEAP32[$14 >> 2] = $5;
          (wasm2js_i32$0 = $10, wasm2js_i32$1 = snprintf($9, 100, 29363, $14)), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
          $5 = $9;
          break block9;
         }
         $5 = 33657;
        }
        (wasm2js_i32$0 = $10, wasm2js_i32$1 = strlen($5)), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
       }
       __stack_pointer = $14 + 80 | 0;
       if (!$5) {
        break block63
       }
       block64 : {
        if (!$18) {
         $7 = HEAP32[$10 + 124 >> 2];
         break block64;
        }
        block67 : {
         block65 : {
          block66 : {
           $6 = HEAPU8[$5 | 0];
           switch ($6 - 43 | 0) {
           case 0:
           case 2:
            break block65;
           default:
            break block66;
           };
          }
          $7 = HEAP32[$10 + 124 >> 2];
          break block67;
         }
         $6 = HEAPU8[$5 + 1 | 0];
         $5 = $5 + 1 | 0;
         $7 = HEAP32[$10 + 124 >> 2] - 1 | 0;
        }
        block68 : {
         if (($6 & 255) != 48) {
          break block68
         }
         while (1) {
          $9 = HEAP8[$5 + 1 | 0];
          if ($9 - 48 >>> 0 > 9) {
           break block68
          }
          $5 = $5 + 1 | 0;
          $7 = $7 - 1 | 0;
          if (($9 | 0) == 48) {
           continue
          }
          break;
         };
        }
        HEAP32[$10 + 124 >> 2] = $7;
        $6 = 0;
        while (1) {
         $9 = $6;
         $6 = $6 + 1 | 0;
         if (HEAP8[$5 + $9 | 0] - 48 >>> 0 < 10) {
          continue
         }
         break;
        };
        $6 = $7 >>> 0 < $18 >>> 0 ? $18 : $7;
        $16 = $0 + $12 | 0;
        block69 : {
         if (HEAP32[$3 + 20 >> 2] < -1900) {
          $9 = 45
         } else {
          if (($23 | 0) != 43 | $9 + ($6 - $7 | 0) >>> 0 < (HEAPU8[HEAP32[$10 + 12 >> 2]] == 67 ? 3 : 5) >>> 0) {
           break block69
          }
          $9 = 43;
         }
         HEAP8[$16 | 0] = $9;
         $6 = $6 - 1 | 0;
         $12 = $12 + 1 | 0;
        }
        if ($6 >>> 0 <= $7 >>> 0 | $1 >>> 0 <= $12 >>> 0) {
         break block64
        }
        while (1) {
         HEAP8[$0 + $12 | 0] = 48;
         $12 = $12 + 1 | 0;
         $6 = $6 - 1 | 0;
         if ($7 >>> 0 >= $6 >>> 0) {
          break block64
         }
         if ($1 >>> 0 > $12 >>> 0) {
          continue
         }
         break;
        };
       }
       $9 = $1 - $12 | 0;
       $9 = $7 >>> 0 < $9 >>> 0 ? $7 : $9;
       HEAP32[$10 + 124 >> 2] = $9;
       __memcpy($0 + $12 | 0, $5, $9);
       $12 = HEAP32[$10 + 124 >> 2] + $12 | 0;
      }
      $2 = $2 + 1 | 0;
      if ($1 >>> 0 > $12 >>> 0) {
       continue
      }
     }
     break;
    };
    $12 = ($1 | 0) == ($12 | 0) ? $1 - 1 | 0 : $12;
    $6 = 0;
   }
   HEAP8[$0 + $12 | 0] = 0;
  }
  __stack_pointer = $10 + 128 | 0;
  return $6;
 }
 
 function is_leap($0) {
  $0 = ($0 | 0) > 2147481747 ? $0 - 2e3 | 0 : $0;
  if ($0 & 3) {
   return 0
  }
  $0 = $0 + 1900 | 0;
  if (($0 | 0) % 100 | 0) {
   return 1
  }
  return !(($0 | 0) % 400 | 0);
 }
 
 function strlen($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  block1 : {
   block : {
    $1 = $0;
    if (!($1 & 3)) {
     break block
    }
    if (!HEAPU8[$1 | 0]) {
     return 0
    }
    while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3)) {
      break block
     }
     if (HEAPU8[$1 | 0]) {
      continue
     }
     break;
    };
    break block1;
   }
   while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2];
    if ((($3 | 16843008 - $3) & -2139062144) == -2139062144) {
     continue
    }
    break;
   };
   while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 | 0]) {
     continue
    }
    break;
   };
  }
  return $1 - $0 | 0;
 }
 
 function strncpy($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = $0;
  block2 : {
   block3 : {
    block4 : {
     block : {
      if (($4 ^ $1) & 3) {
       break block
      }
      $3 = ($2 | 0) != 0;
      block1 : {
       if (!($1 & 3) | !$2) {
        break block1
       }
       while (1) {
        $3 = HEAPU8[$1 | 0];
        HEAP8[$4 | 0] = $3;
        if (!$3) {
         break block2
        }
        $4 = $4 + 1 | 0;
        $2 = $2 - 1 | 0;
        $3 = ($2 | 0) != 0;
        $1 = $1 + 1 | 0;
        if (!($1 & 3)) {
         break block1
        }
        if ($2) {
         continue
        }
        break;
       };
      }
      if (!$3) {
       break block3
      }
      if (!HEAPU8[$1 | 0]) {
       break block2
      }
      if ($2 >>> 0 < 4) {
       break block
      }
      while (1) {
       $3 = HEAP32[$1 >> 2];
       if (((16843008 - $3 | $3) & -2139062144) != -2139062144) {
        break block4
       }
       HEAP32[$4 >> 2] = $3;
       $4 = $4 + 4 | 0;
       $1 = $1 + 4 | 0;
       $2 = $2 - 4 | 0;
       if ($2 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break block3
     }
    }
    while (1) {
     $3 = HEAPU8[$1 | 0];
     HEAP8[$4 | 0] = $3;
     if (!$3) {
      break block2
     }
     $4 = $4 + 1 | 0;
     $1 = $1 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   $2 = 0;
  }
  __memset($4, 0, $2);
  return $0;
 }
 
 function memcmp($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  block : {
   if (!$2) {
    break block
   }
   while (1) {
    $3 = HEAPU8[$0 | 0];
    $4 = HEAPU8[$1 | 0];
    if (($3 | 0) == ($4 | 0)) {
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break block;
    }
    break;
   };
   $5 = $3 - $4 | 0;
  }
  return $5;
 }
 
 function strstr($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $2 = HEAP8[$1 | 0];
  if (!$2) {
   return $0
  }
  $0 = strchr($0, $2);
  block : {
   if (!$0) {
    break block
   }
   if (!HEAPU8[$1 + 1 | 0]) {
    return $0
   }
   if (!HEAPU8[$0 + 1 | 0]) {
    break block
   }
   if (!HEAPU8[$1 + 2 | 0]) {
    $2 = HEAPU8[$0 + 1 | 0];
    $3 = ($2 | 0) != 0;
    block1 : {
     if (!$2) {
      break block1
     }
     $2 = $2 | HEAPU8[$0 | 0] << 8;
     $5 = HEAPU8[$1 + 1 | 0] | HEAPU8[$1 | 0] << 8;
     if (($2 | 0) == ($5 | 0)) {
      break block1
     }
     $1 = $0 + 1 | 0;
     while (1) {
      $0 = $1;
      $4 = HEAPU8[$0 + 1 | 0];
      $3 = ($4 | 0) != 0;
      if (!$4) {
       break block1
      }
      $1 = $0 + 1 | 0;
      $2 = $4 | $2 << 8 & 65280;
      if (($5 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    return $3 ? $0 : 0;
   }
   if (!HEAPU8[$0 + 2 | 0]) {
    break block
   }
   if (!HEAPU8[$1 + 3 | 0]) {
    $2 = $0 + 2 | 0;
    $3 = HEAPU8[$0 + 2 | 0];
    $4 = ($3 | 0) != 0;
    block3 : {
     block2 : {
      if (!$3) {
       break block2
      }
      $3 = HEAPU8[$0 + 1 | 0] << 16 | HEAPU8[$0 | 0] << 24 | $3 << 8;
      $5 = HEAPU8[$1 + 1 | 0] << 16 | HEAPU8[$1 | 0] << 24 | HEAPU8[$1 + 2 | 0] << 8;
      if (($3 | 0) == ($5 | 0)) {
       break block2
      }
      while (1) {
       $0 = $2 + 1 | 0;
       $1 = HEAPU8[$2 + 1 | 0];
       $4 = ($1 | 0) != 0;
       if (!$1) {
        break block3
       }
       $2 = $0;
       $3 = ($1 | $3) << 8;
       if (($5 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
      break block3;
     }
     $0 = $2;
    }
    return $4 ? $0 - 2 | 0 : 0;
   }
   if (!HEAPU8[$0 + 3 | 0]) {
    break block
   }
   if (!HEAPU8[$1 + 4 | 0]) {
    $2 = $0 + 3 | 0;
    $3 = HEAPU8[$0 + 3 | 0];
    $4 = ($3 | 0) != 0;
    block5 : {
     block4 : {
      if (!$3) {
       break block4
      }
      $3 = $3 | (HEAPU8[$0 + 1 | 0] << 16 | HEAPU8[$0 | 0] << 24 | HEAPU8[$0 + 2 | 0] << 8);
      $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      $5 = $0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24);
      if (($3 | 0) == ($5 | 0)) {
       break block4
      }
      while (1) {
       $0 = $2 + 1 | 0;
       $1 = HEAPU8[$2 + 1 | 0];
       $4 = ($1 | 0) != 0;
       if (!$1) {
        break block5
       }
       $2 = $0;
       $3 = $1 | $3 << 8;
       if (($5 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
      break block5;
     }
     $0 = $2;
    }
    return $4 ? $0 - 3 | 0 : 0;
   }
   $3 = $0;
   $2 = 0;
   $9 = __stack_pointer - 1056 | 0;
   __stack_pointer = $9;
   HEAP32[$9 + 1048 >> 2] = 0;
   HEAP32[$9 + 1052 >> 2] = 0;
   HEAP32[$9 + 1040 >> 2] = 0;
   HEAP32[$9 + 1044 >> 2] = 0;
   HEAP32[$9 + 1032 >> 2] = 0;
   HEAP32[$9 + 1036 >> 2] = 0;
   HEAP32[$9 + 1024 >> 2] = 0;
   HEAP32[$9 + 1028 >> 2] = 0;
   $5 = $1;
   block10 : {
    block9 : {
     block8 : {
      block7 : {
       $1 = HEAPU8[$1 | 0];
       block6 : {
        if (!$1) {
         $6 = -1;
         $0 = 1;
         break block6;
        }
        while (1) {
         if (!HEAPU8[$3 + $7 | 0]) {
          break block7
         }
         $7 = $7 + 1 | 0;
         HEAP32[(($1 & 255) << 2) + $9 >> 2] = $7;
         $0 = ($9 + 1024 | 0) + ($1 >>> 3 & 28) | 0;
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1 << $1;
         $1 = HEAPU8[$5 + $7 | 0];
         if ($1) {
          continue
         }
         break;
        };
        $0 = 1;
        $6 = -1;
        if ($7 >>> 0 > 1) {
         break block8
        }
       }
       $4 = -1;
       $8 = 1;
       break block9;
      }
      $0 = 0;
      break block10;
     }
     $10 = 1;
     $1 = 1;
     while (1) {
      $4 = HEAPU8[($5 + $6 | 0) + $1 | 0];
      $8 = HEAPU8[$0 + $5 | 0];
      block11 : {
       if (($4 | 0) == ($8 | 0)) {
        if (($1 | 0) == ($10 | 0)) {
         $2 = $2 + $10 | 0;
         $1 = 1;
         break block11;
        }
        $1 = $1 + 1 | 0;
        break block11;
       }
       if ($4 >>> 0 > $8 >>> 0) {
        $10 = $0 - $6 | 0;
        $2 = $0;
        $1 = 1;
        break block11;
       }
       $6 = $2;
       $2 = $2 + 1 | 0;
       $10 = 1;
       $1 = 1;
      }
      $0 = $1 + $2 | 0;
      if ($7 >>> 0 > $0 >>> 0) {
       continue
      }
      break;
     };
     $4 = -1;
     $0 = 0;
     $2 = 1;
     $8 = 1;
     $1 = 1;
     while (1) {
      $12 = HEAPU8[($4 + $5 | 0) + $1 | 0];
      $11 = HEAPU8[$2 + $5 | 0];
      block12 : {
       if (($12 | 0) == ($11 | 0)) {
        if (($1 | 0) == ($8 | 0)) {
         $0 = $0 + $8 | 0;
         $1 = 1;
         break block12;
        }
        $1 = $1 + 1 | 0;
        break block12;
       }
       if ($11 >>> 0 > $12 >>> 0) {
        $8 = $2 - $4 | 0;
        $0 = $2;
        $1 = 1;
        break block12;
       }
       $4 = $0;
       $0 = $0 + 1 | 0;
       $8 = 1;
       $1 = 1;
      }
      $2 = $0 + $1 | 0;
      if ($7 >>> 0 > $2 >>> 0) {
       continue
      }
      break;
     };
     $0 = $10;
    }
    $1 = $0;
    $0 = $4 + 1 >>> 0 > $6 + 1 >>> 0;
    $10 = $0 ? $8 : $1;
    $11 = $0 ? $4 : $6;
    $12 = $11 + 1 | 0;
    block13 : {
     if (memcmp($5, $5 + $10 | 0, $12)) {
      $0 = ($11 ^ -1) + $7 | 0;
      $10 = ($0 >>> 0 < $11 >>> 0 ? $11 : $0) + 1 | 0;
      $2 = 0;
      break block13;
     }
     $2 = $7 - $10 | 0;
    }
    $13 = $7 | 63;
    $1 = 0;
    $0 = $3;
    while (1) {
     $8 = $1;
     $4 = $0;
     block14 : {
      if ($3 - $0 >>> 0 >= $7 >>> 0) {
       break block14
      }
      $0 = 0;
      $1 = memchr($3, 0, $13);
      $3 = $1 ? $1 : $3 + $13 | 0;
      if (!$1) {
       break block14
      }
      if ($1 - $4 >>> 0 < $7 >>> 0) {
       break block10
      }
     }
     $1 = 0;
     $0 = $4 + $7 | 0;
     $6 = HEAPU8[$0 - 1 | 0];
     if (!(HEAP32[($9 + 1024 | 0) + ($6 >>> 3 & 28) >> 2] >>> $6 & 1)) {
      continue
     }
     $0 = HEAP32[($6 << 2) + $9 >> 2];
     if (($0 | 0) != ($7 | 0)) {
      $0 = $7 - $0 | 0;
      $0 = $4 + ($0 >>> 0 > $8 >>> 0 ? $0 : $8) | 0;
      continue;
     }
     block15 : {
      $1 = $12;
      $0 = $1 >>> 0 > $8 >>> 0 ? $1 : $8;
      $6 = HEAPU8[$5 + $0 | 0];
      if ($6) {
       while (1) {
        if (HEAPU8[$0 + $4 | 0] != ($6 & 255)) {
         break block15
        }
        $0 = $0 + 1 | 0;
        $6 = HEAPU8[$5 + $0 | 0];
        if ($6) {
         continue
        }
        break;
       }
      }
      while (1) {
       if ($1 >>> 0 <= $8 >>> 0) {
        $0 = $4;
        break block10;
       }
       $1 = $1 - 1 | 0;
       if (HEAPU8[$5 + $1 | 0] == HEAPU8[$1 + $4 | 0]) {
        continue
       }
       break;
      };
      $0 = $4 + $10 | 0;
      $1 = $2;
      continue;
     }
     $0 = $4 + ($0 - $11 | 0) | 0;
     $1 = 0;
     continue;
    };
   }
   __stack_pointer = $9 + 1056 | 0;
   $3 = $0;
  }
  return $3;
 }
 
 function strtox($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  block2 : {
   block1 : {
    block : {
     if (($2 | 0) <= 36) {
      $6 = HEAPU8[$0 | 0];
      if ($6) {
       break block
      }
      $5 = $0;
      break block1;
     }
     HEAP32[19563] = 28;
     $3 = 0;
     $4 = 0;
     break block2;
    }
    $5 = $0;
    block3 : {
     while (1) {
      if (!__isspace($6 << 24 >> 24)) {
       break block3
      }
      $6 = HEAPU8[$5 + 1 | 0];
      $5 = $5 + 1 | 0;
      if ($6) {
       continue
      }
      break;
     };
     break block1;
    }
    block4 : {
     $7 = $6 & 255;
     switch ($7 - 43 | 0) {
     case 0:
     case 2:
      break block4;
     default:
      break block1;
     };
    }
    $9 = ($7 | 0) == 45 ? -1 : 0;
    $5 = $5 + 1 | 0;
   }
   block6 : {
    if (!(($2 | 16) != 16 | HEAPU8[$5 | 0] != 48)) {
     $13 = 1;
     if ((HEAPU8[$5 + 1 | 0] & 223) == 88) {
      $5 = $5 + 2 | 0;
      $12 = 16;
      break block6;
     }
     $5 = $5 + 1 | 0;
     $12 = $2 ? $2 : 8;
     break block6;
    }
    $12 = $2 ? $2 : 10;
   }
   $2 = 0;
   while (1) {
    block8 : {
     $7 = HEAPU8[$5 | 0];
     $6 = $7 - 48 | 0;
     block7 : {
      if (($6 & 255) >>> 0 < 10) {
       break block7
      }
      if (($7 - 97 & 255) >>> 0 <= 25) {
       $6 = $7 - 87 | 0;
       break block7;
      }
      if (($7 - 65 & 255) >>> 0 > 25) {
       break block8
      }
      $6 = $7 - 55 | 0;
     }
     $6 = $6 & 255;
     if (($6 | 0) >= ($12 | 0)) {
      break block8
     }
     __multi3($11, $12, 0, 0, 0, $10, $8, 0, 0);
     $7 = 1;
     block9 : {
      if (HEAP32[$11 + 8 >> 2] | HEAP32[$11 + 12 >> 2]) {
       break block9
      }
      $14 = __wasm_i64_mul($10, $8, $12, 0);
      $15 = i64toi32_i32$HIGH_BITS;
      if (($15 | 0) == -1 & ($6 ^ -1) >>> 0 < $14 >>> 0) {
       break block9
      }
      $8 = $15;
      $10 = $6 + $14 | 0;
      $8 = $10 >>> 0 < $6 >>> 0 ? $8 + 1 | 0 : $8;
      $13 = 1;
      $7 = $2;
     }
     $5 = $5 + 1 | 0;
     $2 = $7;
     continue;
    }
    break;
   };
   if ($1) {
    HEAP32[$1 >> 2] = $13 ? $5 : $0
   }
   block11 : {
    block10 : {
     if ($2) {
      HEAP32[19563] = 68;
      $0 = $3 & 1;
      $9 = $0 ? 0 : $9;
      $10 = $3;
      $8 = $4;
      break block10;
     }
     if (($4 | 0) == ($8 | 0) & $3 >>> 0 > $10 >>> 0 | $4 >>> 0 > $8 >>> 0) {
      break block11
     }
     $0 = $3 & 1;
    }
    if (!($0 | $9)) {
     HEAP32[19563] = 68;
     $0 = $3;
     $3 = $0 - 1 | 0;
     $4 = $4 - !$0 | 0;
     break block2;
    }
    if (($4 | 0) == ($8 | 0) & $3 >>> 0 >= $10 >>> 0 | $4 >>> 0 > $8 >>> 0) {
     break block11
    }
    HEAP32[19563] = 68;
    break block2;
   }
   $0 = $9 ^ $10;
   $3 = $0 - $9 | 0;
   $1 = $9 >> 31;
   $4 = ($1 ^ $8) - (($0 >>> 0 < $9 >>> 0) + $1 | 0) | 0;
  }
  __stack_pointer = $11 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $4;
  return $3;
 }
 
 function __syscall_ret($0) {
  if ($0 >>> 0 >= 4294963201) {
   HEAP32[19563] = 0 - $0;
   $0 = -1;
  }
  return $0;
 }
 
 function tolower($0) {
  return $0 - 65 >>> 0 < 26 ? $0 | 32 : $0;
 }
 
 function frexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $3 >>> 20 & 2047;
  if (($2 | 0) != 2047) {
   if (!$2) {
    if ($0 == 0.0) {
     $2 = 0
    } else {
     $0 = frexp($0 * 18446744073709551615.0, $1);
     $2 = HEAP32[$1 >> 2] + -64 | 0;
    }
    HEAP32[$1 >> 2] = $2;
    return $0;
   }
   HEAP32[$1 >> 2] = $2 - 1022;
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $3 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 204 >> 2] = $2;
  $2 = $5 + 160 | 0;
  wasm2js_memory_fill($2, 0, 40);
  HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 204 >> 2];
  block : {
   if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $2, $3, $4) | 0) < 0) {
    $4 = -1;
    break block;
   }
   $8 = HEAP32[$0 + 76 >> 2] < 0;
   $6 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $6 & -33;
   block3 : {
    block2 : {
     block1 : {
      if (!HEAP32[$0 + 48 >> 2]) {
       HEAP32[$0 + 48 >> 2] = 80;
       HEAP32[$0 + 28 >> 2] = 0;
       HEAP32[$0 + 16 >> 2] = 0;
       HEAP32[$0 + 20 >> 2] = 0;
       $7 = HEAP32[$0 + 44 >> 2];
       HEAP32[$0 + 44 >> 2] = $5;
       break block1;
      }
      if (HEAP32[$0 + 16 >> 2]) {
       break block2
      }
     }
     $2 = -1;
     if (__towrite($0)) {
      break block3
     }
    }
    $2 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
   }
   if ($7) {
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = $7;
    HEAP32[$0 + 28 >> 2] = 0;
    $1 = HEAP32[$0 + 20 >> 2];
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    $2 = $1 ? $2 : -1;
   }
   $1 = $0;
   $0 = HEAP32[$0 >> 2];
   HEAP32[$1 >> 2] = $0 | $6 & 32;
   $4 = $0 & 32 ? -1 : $2;
   if ($8) {
    break block
   }
  }
  __stack_pointer = $5 + 208 | 0;
  return $4;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
  $9 = __stack_pointer + -64 | 0;
  __stack_pointer = $9;
  HEAP32[$9 + 60 >> 2] = $1;
  $25 = $9 + 41 | 0;
  $26 = $9 + 39 | 0;
  $19 = $9 + 40 | 0;
  block46 : {
   block17 : {
    block14 : {
     block : {
      label4 : while (1) {
       $7 = 0;
       label1 : while (1) {
        $10 = $1;
        if (($14 ^ 2147483647) < ($7 | 0)) {
         break block
        }
        $14 = $7 + $14 | 0;
        block16 : {
         block19 : {
          block41 : {
           block8 : {
            $7 = $1;
            $8 = HEAPU8[$7 | 0];
            if ($8) {
             while (1) {
              block2 : {
               $1 = $8 & 255;
               block1 : {
                if (!$1) {
                 $1 = $7;
                 break block1;
                }
                if (($1 | 0) != 37) {
                 break block2
                }
                $8 = $7;
                while (1) {
                 if (HEAPU8[$8 + 1 | 0] != 37) {
                  $1 = $8;
                  break block1;
                 }
                 $7 = $7 + 1 | 0;
                 $13 = HEAPU8[$8 + 2 | 0];
                 $1 = $8 + 2 | 0;
                 $8 = $1;
                 if (($13 | 0) == 37) {
                  continue
                 }
                 break;
                };
               }
               $7 = $7 - $10 | 0;
               $24 = $14 ^ 2147483647;
               if (($7 | 0) > ($24 | 0)) {
                break block
               }
               if ($0) {
                out($0, $10, $7)
               }
               if ($7) {
                continue label1
               }
               HEAP32[$9 + 60 >> 2] = $1;
               $7 = $1 + 1 | 0;
               $16 = -1;
               $8 = HEAP8[$1 + 1 | 0] - 48 | 0;
               if (!(HEAPU8[$1 + 2 | 0] != 36 | $8 >>> 0 > 9)) {
                $20 = 1;
                $16 = $8;
                $7 = $1 + 3 | 0;
               }
               HEAP32[$9 + 60 >> 2] = $7;
               $12 = 0;
               $8 = HEAP8[$7 | 0];
               $1 = $8 - 32 | 0;
               block4 : {
                if ($1 >>> 0 > 31) {
                 $13 = $7;
                 break block4;
                }
                $13 = $7;
                $1 = 1 << $1;
                if (!($1 & 75913)) {
                 break block4
                }
                while (1) {
                 $13 = $7 + 1 | 0;
                 HEAP32[$9 + 60 >> 2] = $13;
                 $12 = $1 | $12;
                 $8 = HEAP8[$7 + 1 | 0];
                 $1 = $8 - 32 | 0;
                 if ($1 >>> 0 >= 32) {
                  break block4
                 }
                 $7 = $13;
                 $1 = 1 << $1;
                 if ($1 & 75913) {
                  continue
                 }
                 break;
                };
               }
               block9 : {
                if (($8 | 0) == 42) {
                 $1 = HEAP8[$13 + 1 | 0] - 48 | 0;
                 block7 : {
                  if (!(HEAPU8[$13 + 2 | 0] != 36 | $1 >>> 0 > 9)) {
                   block6 : {
                    if (!$0) {
                     HEAP32[($1 << 2) + $4 >> 2] = 10;
                     $15 = 0;
                     break block6;
                    }
                    $15 = HEAP32[($1 << 3) + $3 >> 2];
                   }
                   $1 = $13 + 3 | 0;
                   $20 = 1;
                   break block7;
                  }
                  if ($20) {
                   break block8
                  }
                  $1 = $13 + 1 | 0;
                  if (!$0) {
                   HEAP32[$9 + 60 >> 2] = $1;
                   $20 = 0;
                   $15 = 0;
                   break block9;
                  }
                  $7 = HEAP32[$2 >> 2];
                  HEAP32[$2 >> 2] = $7 + 4;
                  $15 = HEAP32[$7 >> 2];
                  $20 = 0;
                 }
                 HEAP32[$9 + 60 >> 2] = $1;
                 if (($15 | 0) >= 0) {
                  break block9
                 }
                 $15 = 0 - $15 | 0;
                 $12 = $12 | 8192;
                 break block9;
                }
                $15 = getint($9 + 60 | 0);
                if (($15 | 0) < 0) {
                 break block
                }
                $1 = HEAP32[$9 + 60 >> 2];
               }
               $7 = 0;
               $11 = -1;
               $8 = 0;
               block10 : {
                if (HEAPU8[$1 | 0] != 46) {
                 break block10
                }
                if (HEAPU8[$1 + 1 | 0] == 42) {
                 $8 = HEAP8[$1 + 2 | 0] - 48 | 0;
                 block13 : {
                  if (!(HEAPU8[$1 + 3 | 0] != 36 | $8 >>> 0 > 9)) {
                   $1 = $1 + 4 | 0;
                   block12 : {
                    if (!$0) {
                     HEAP32[($8 << 2) + $4 >> 2] = 10;
                     $11 = 0;
                     break block12;
                    }
                    $11 = HEAP32[($8 << 3) + $3 >> 2];
                   }
                   break block13;
                  }
                  if ($20) {
                   break block8
                  }
                  $1 = $1 + 2 | 0;
                  $11 = 0;
                  if (!$0) {
                   break block13
                  }
                  $8 = HEAP32[$2 >> 2];
                  HEAP32[$2 >> 2] = $8 + 4;
                  $11 = HEAP32[$8 >> 2];
                 }
                 HEAP32[$9 + 60 >> 2] = $1;
                 $8 = ($11 | 0) >= 0;
                 break block10;
                }
                HEAP32[$9 + 60 >> 2] = $1 + 1;
                $11 = getint($9 + 60 | 0);
                $1 = HEAP32[$9 + 60 >> 2];
                $8 = 1;
               }
               $22 = $8;
               while (1) {
                $21 = $7;
                $13 = 28;
                $17 = $1;
                $8 = HEAP8[$1 | 0];
                if ($8 - 123 >>> 0 < 4294967238) {
                 break block14
                }
                $1 = $1 + 1 | 0;
                $7 = HEAPU8[($8 + Math_imul($7, 58) | 0) + 60015 | 0];
                if (($7 - 1 & 255) >>> 0 < 8) {
                 continue
                }
                break;
               };
               HEAP32[$9 + 60 >> 2] = $1;
               block15 : {
                if (($7 | 0) != 27) {
                 if (!$7) {
                  break block14
                 }
                 if (($16 | 0) >= 0) {
                  if (!$0) {
                   HEAP32[($16 << 2) + $4 >> 2] = $7;
                   continue label4;
                  }
                  $7 = ($16 << 3) + $3 | 0;
                  $8 = HEAP32[$7 + 4 >> 2];
                  HEAP32[$9 + 48 >> 2] = HEAP32[$7 >> 2];
                  HEAP32[$9 + 52 >> 2] = $8;
                  break block15;
                 }
                 if (!$0) {
                  break block16
                 }
                 pop_arg($9 + 48 | 0, $7, $2, $6);
                 break block15;
                }
                if (($16 | 0) >= 0) {
                 break block14
                }
                $7 = 0;
                if (!$0) {
                 continue label1
                }
               }
               if (HEAPU8[$0 | 0] & 32) {
                break block17
               }
               $8 = $12 & -65537;
               $12 = $12 & 8192 ? $8 : $12;
               $16 = 0;
               $23 = 24829;
               $13 = $19;
               block20 : {
                block44 : {
                 block43 : {
                  block42 : {
                   block31 : {
                    block29 : {
                     block26 : {
                      block21 : {
                       block40 : {
                        block32 : {
                         block22 : {
                          block24 : {
                           block18 : {
                            block25 : {
                             block23 : {
                              block27 : {
                               block28 : {
                                $17 = HEAPU8[$17 | 0];
                                $7 = $17 << 24 >> 24;
                                $7 = $21 ? (($17 & 15) == 3 ? $7 & -45 : $7) : $7;
                                switch ($7 - 88 | 0) {
                                case 0:
                                case 32:
                                 break block18;
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 10:
                                case 16:
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                case 25:
                                case 26:
                                case 28:
                                case 30:
                                case 31:
                                 break block19;
                                case 9:
                                case 13:
                                case 14:
                                case 15:
                                 break block20;
                                case 11:
                                 break block21;
                                case 12:
                                case 17:
                                 break block22;
                                case 22:
                                 break block23;
                                case 23:
                                 break block24;
                                case 24:
                                 break block25;
                                case 27:
                                 break block26;
                                case 29:
                                 break block27;
                                default:
                                 break block28;
                                };
                               }
                               block30 : {
                                switch ($7 - 65 | 0) {
                                case 1:
                                case 3:
                                 break block19;
                                case 0:
                                case 4:
                                case 5:
                                case 6:
                                 break block20;
                                case 2:
                                 break block29;
                                default:
                                 break block30;
                                };
                               }
                               if (($7 | 0) == 83) {
                                break block31
                               }
                               break block19;
                              }
                              $8 = HEAP32[$9 + 48 >> 2];
                              $17 = HEAP32[$9 + 52 >> 2];
                              $1 = 24829;
                              break block32;
                             }
                             $7 = 0;
                             block39 : {
                              switch ($21 | 0) {
                              case 0:
                               HEAP32[HEAP32[$9 + 48 >> 2] >> 2] = $14;
                               continue label1;
                              case 1:
                               HEAP32[HEAP32[$9 + 48 >> 2] >> 2] = $14;
                               continue label1;
                              case 2:
                               $10 = HEAP32[$9 + 48 >> 2];
                               HEAP32[$10 >> 2] = $14;
                               HEAP32[$10 + 4 >> 2] = $14 >> 31;
                               continue label1;
                              case 3:
                               HEAP16[HEAP32[$9 + 48 >> 2] >> 1] = $14;
                               continue label1;
                              case 4:
                               HEAP8[HEAP32[$9 + 48 >> 2]] = $14;
                               continue label1;
                              case 6:
                               HEAP32[HEAP32[$9 + 48 >> 2] >> 2] = $14;
                               continue label1;
                              case 7:
                               break block39;
                              default:
                               continue label1;
                              };
                             }
                             $10 = HEAP32[$9 + 48 >> 2];
                             HEAP32[$10 >> 2] = $14;
                             HEAP32[$10 + 4 >> 2] = $14 >> 31;
                             continue label1;
                            }
                            $11 = $11 >>> 0 <= 8 ? 8 : $11;
                            $12 = $12 | 8;
                            $7 = 120;
                           }
                           $1 = $19;
                           $27 = $7 & 32;
                           $10 = HEAP32[$9 + 52 >> 2];
                           $17 = $10;
                           $8 = HEAP32[$9 + 48 >> 2];
                           $18 = $8;
                           if ($8 | $10) {
                            while (1) {
                             $1 = $1 - 1 | 0;
                             HEAP8[$1 | 0] = $27 | HEAPU8[($18 & 15) + 60544 | 0];
                             $21 = !$10 & $18 >>> 0 > 15 | ($10 | 0) != 0;
                             $18 = ($10 & 15) << 28 | $18 >>> 4;
                             $10 = $10 >>> 4 | 0;
                             if ($21) {
                              continue
                             }
                             break;
                            }
                           }
                           $10 = $1;
                           if (!($12 & 8) | !($8 | $17)) {
                            break block40
                           }
                           $23 = ($7 >>> 4 | 0) + 24829 | 0;
                           $16 = 2;
                           break block40;
                          }
                          $1 = $19;
                          $10 = HEAP32[$9 + 52 >> 2];
                          $17 = $10;
                          $8 = HEAP32[$9 + 48 >> 2];
                          $18 = $8;
                          if ($8 | $10) {
                           while (1) {
                            $1 = $1 - 1 | 0;
                            HEAP8[$1 | 0] = $18 & 7 | 48;
                            $21 = !$10 & $18 >>> 0 > 7 | ($10 | 0) != 0;
                            $18 = ($10 & 7) << 29 | $18 >>> 3;
                            $10 = $10 >>> 3 | 0;
                            if ($21) {
                             continue
                            }
                            break;
                           }
                          }
                          $10 = $1;
                          if (!($12 & 8)) {
                           break block40
                          }
                          $1 = $25 - $1 | 0;
                          $11 = ($1 | 0) < ($11 | 0) ? $11 : $1;
                          break block40;
                         }
                         $8 = HEAP32[$9 + 48 >> 2];
                         $1 = HEAP32[$9 + 52 >> 2];
                         $17 = $1;
                         if (($1 | 0) < 0) {
                          $7 = 0 - ($1 + (($8 | 0) != 0) | 0) | 0;
                          $17 = $7;
                          $8 = 0 - $8 | 0;
                          HEAP32[$9 + 48 >> 2] = $8;
                          HEAP32[$9 + 52 >> 2] = $7;
                          $16 = 1;
                          $1 = 24829;
                          break block32;
                         }
                         if ($12 & 2048) {
                          $16 = 1;
                          $1 = 24830;
                          break block32;
                         }
                         $16 = $12 & 1;
                         $1 = $16 ? 24831 : 24829;
                        }
                        $23 = $1;
                        $10 = fmt_u($8, $17, $19);
                       }
                       if (($11 | 0) < 0 & $22) {
                        break block
                       }
                       $12 = $22 ? $12 & -65537 : $12;
                       if (!(($8 | $17) != 0 | $11)) {
                        $10 = $19;
                        $11 = 0;
                        break block19;
                       }
                       $1 = !($8 | $17) + ($19 - $10 | 0) | 0;
                       $11 = ($1 | 0) < ($11 | 0) ? $11 : $1;
                       break block19;
                      }
                      $7 = HEAPU8[$9 + 48 | 0];
                      break block41;
                     }
                     $1 = HEAP32[$9 + 48 >> 2];
                     $10 = $1 ? $1 : 33659;
                     $1 = $11 >>> 0 >= 2147483647 ? 2147483647 : $11;
                     $7 = memchr($10, 0, $1);
                     $1 = $7 ? $7 - $10 | 0 : $1;
                     $13 = $1 + $10 | 0;
                     if (($11 | 0) >= 0) {
                      $12 = $8;
                      $11 = $1;
                      break block19;
                     }
                     $12 = $8;
                     $11 = $1;
                     if (HEAPU8[$13 | 0]) {
                      break block
                     }
                     break block19;
                    }
                    $7 = HEAP32[$9 + 48 >> 2];
                    if ($7 | HEAP32[$9 + 52 >> 2]) {
                     break block42
                    }
                    $7 = 0;
                    break block41;
                   }
                   if ($11) {
                    $8 = HEAP32[$9 + 48 >> 2];
                    break block43;
                   }
                   $7 = 0;
                   pad($0, 32, $15, 0, $12);
                   break block44;
                  }
                  HEAP32[$9 + 12 >> 2] = 0;
                  HEAP32[$9 + 8 >> 2] = $7;
                  $8 = $9 + 8 | 0;
                  HEAP32[$9 + 48 >> 2] = $8;
                  $11 = -1;
                 }
                 $7 = 0;
                 while (1) {
                  block45 : {
                   $10 = HEAP32[$8 >> 2];
                   if (!$10) {
                    break block45
                   }
                   $10 = wctomb($9 + 4 | 0, $10);
                   if (($10 | 0) < 0) {
                    break block17
                   }
                   if ($10 >>> 0 > $11 - $7 >>> 0) {
                    break block45
                   }
                   $8 = $8 + 4 | 0;
                   $7 = $7 + $10 | 0;
                   if ($11 >>> 0 > $7 >>> 0) {
                    continue
                   }
                  }
                  break;
                 };
                 $13 = 61;
                 if (($7 | 0) < 0) {
                  break block14
                 }
                 pad($0, 32, $15, $7, $12);
                 if (!$7) {
                  $7 = 0;
                  break block44;
                 }
                 $13 = 0;
                 $8 = HEAP32[$9 + 48 >> 2];
                 while (1) {
                  $10 = HEAP32[$8 >> 2];
                  if (!$10) {
                   break block44
                  }
                  $11 = $9 + 4 | 0;
                  $10 = wctomb($11, $10);
                  $13 = $10 + $13 | 0;
                  if ($13 >>> 0 > $7 >>> 0) {
                   break block44
                  }
                  out($0, $11, $10);
                  $8 = $8 + 4 | 0;
                  if ($7 >>> 0 > $13 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                pad($0, 32, $15, $7, $12 ^ 8192);
                $7 = ($7 | 0) < ($15 | 0) ? $15 : $7;
                continue label1;
               }
               if (($11 | 0) < 0 & $22) {
                break block
               }
               $13 = 61;
               $7 = FUNCTION_TABLE[$5 | 0]($0, HEAPF64[$9 + 48 >> 3], $15, $11, $12, $7) | 0;
               if (($7 | 0) >= 0) {
                continue label1
               }
               break block14;
              }
              $8 = HEAPU8[$7 + 1 | 0];
              $7 = $7 + 1 | 0;
              continue;
             }
            }
            if ($0) {
             break block46
            }
            if (!$20) {
             break block16
            }
            $7 = 1;
            while (1) {
             $0 = HEAP32[($7 << 2) + $4 >> 2];
             if ($0) {
              pop_arg(($7 << 3) + $3 | 0, $0, $2, $6);
              $14 = 1;
              $7 = $7 + 1 | 0;
              if (($7 | 0) != 10) {
               continue
              }
              break block46;
             }
             break;
            };
            if ($7 >>> 0 >= 10) {
             $14 = 1;
             break block46;
            }
            while (1) {
             if (HEAP32[($7 << 2) + $4 >> 2]) {
              break block8
             }
             $14 = 1;
             $7 = $7 + 1 | 0;
             if (($7 | 0) != 10) {
              continue
             }
             break;
            };
            break block46;
           }
           $13 = 28;
           break block14;
          }
          HEAP8[$9 + 39 | 0] = $7;
          $11 = 1;
          $10 = $26;
          $12 = $8;
         }
         $8 = $13 - $10 | 0;
         $11 = ($8 | 0) < ($11 | 0) ? $11 : $8;
         if (($11 | 0) > ($16 ^ 2147483647)) {
          break block
         }
         $13 = 61;
         $1 = $11 + $16 | 0;
         $7 = ($1 | 0) < ($15 | 0) ? $15 : $1;
         if ($24 >>> 0 < $7 >>> 0) {
          break block14
         }
         pad($0, 32, $7, $1, $12);
         out($0, $23, $16);
         pad($0, 48, $7, $1, $12 ^ 65536);
         pad($0, 48, $11, $8, 0);
         out($0, $10, $8);
         pad($0, 32, $7, $1, $12 ^ 8192);
         $1 = HEAP32[$9 + 60 >> 2];
         continue;
        }
        break;
       };
       break;
      };
      $14 = 0;
      break block46;
     }
     $13 = 61;
    }
    HEAP32[19563] = $13;
   }
   $14 = -1;
  }
  __stack_pointer = $9 - -64 | 0;
  return $14;
 }
 
 function out($0, $1, $2) {
  if (!(HEAPU8[$0 | 0] & 32)) {
   __fwritex($1, $2, $0)
  }
 }
 
 function getint($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$0 >> 2];
  $1 = HEAP8[$3 | 0] - 48 | 0;
  if ($1 >>> 0 > 9) {
   return 0
  }
  while (1) {
   $4 = -1;
   if ($2 >>> 0 <= 214748364) {
    $2 = Math_imul($2, 10);
    $4 = ($2 ^ 2147483647) >>> 0 < $1 >>> 0 ? -1 : $2 + $1 | 0;
   }
   $1 = $3 + 1 | 0;
   HEAP32[$0 >> 2] = $1;
   $5 = HEAP8[$3 + 1 | 0];
   $2 = $4;
   $3 = $1;
   $1 = $5 - 48 | 0;
   if ($1 >>> 0 < 10) {
    continue
   }
   break;
  };
  return $2;
 }
 
 function pop_arg($0, $1, $2, $3) {
  block3 : {
   switch ($1 - 9 | 0) {
   case 0:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    return;
   case 6:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAP16[$1 >> 1];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $1 >> 31;
    return;
   case 7:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
    HEAP32[$0 + 4 >> 2] = 0;
    return;
   case 8:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAP8[$1 | 0];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $1 >> 31;
    return;
   case 9:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
    HEAP32[$0 + 4 >> 2] = 0;
    return;
   case 16:
    $1 = HEAP32[$2 >> 2] + 7 & -8;
    HEAP32[$2 >> 2] = $1 + 8;
    HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3 | 0]($0, $2);
   default:
    return;
   case 1:
   case 4:
   case 14:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAP32[$1 >> 2];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $1 >> 31;
    return;
   case 2:
   case 5:
   case 11:
   case 15:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$0 + 4 >> 2] = 0;
    return;
   case 3:
   case 10:
   case 12:
   case 13:
    break block3;
   };
  }
  $1 = HEAP32[$2 >> 2] + 7 & -8;
  HEAP32[$2 >> 2] = $1 + 8;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function fmt_u($0, $1, $2) {
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block : {
   if (!$1) {
    $3 = $1;
    break block;
   }
   while (1) {
    $2 = $2 - 1 | 0;
    $4 = $0;
    $0 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, 10);
    $3 = i64toi32_i32$HIGH_BITS;
    (wasm2js_i32$0 = $2, wasm2js_i32$1 = $4 - __wasm_i64_mul($0, $3, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $4 = $1 >>> 0 > 9;
    $1 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  if ($0 | $3) {
   while (1) {
    $2 = $2 - 1 | 0;
    $1 = ($0 >>> 0) / 10 | 0;
    HEAP8[$2 | 0] = $0 - Math_imul($1, 10) | 48;
    $3 = $0 >>> 0 > 9;
    $0 = $1;
    if ($3) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function pad($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
   $3 = $2 - $3 | 0;
   $2 = $3 >>> 0 < 256;
   __memset($5, $1, $2 ? $3 : 256);
   if (!$2) {
    while (1) {
     out($0, $5, 256);
     $3 = $3 - 256 | 0;
     if ($3 >>> 0 > 255) {
      continue
     }
     break;
    }
   }
   out($0, $5, $3);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function vfprintf($0, $1, $2) {
  return __vfprintf_internal($0, $1, $2, 276, 277);
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $12 = __stack_pointer - 560 | 0;
  __stack_pointer = $12;
  HEAP32[$12 + 44 >> 2] = 0;
  wasm2js_scratch_store_f64(+$1);
  $8 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  block : {
   if (($8 | 0) < 0) {
    $19 = 1;
    $22 = 24839;
    $1 = -$1;
    wasm2js_scratch_store_f64(+$1);
    $8 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    break block;
   }
   if ($4 & 2048) {
    $19 = 1;
    $22 = 24842;
    break block;
   }
   $19 = $4 & 1;
   $22 = $19 ? 24845 : 24840;
   $24 = !$19;
  }
  block1 : {
   if (($8 & 2146435072) == 2146435072) {
    $3 = $19 + 3 | 0;
    pad($0, 32, $2, $3, $4 & -65537);
    out($0, $22, $19);
    $5 = $5 & 32;
    out($0, $1 != $1 ? ($5 ? 27550 : 31482) : $5 ? 28235 : 31902, 3);
    pad($0, 32, $2, $3, $4 ^ 8192);
    $10 = ($2 | 0) > ($3 | 0) ? $2 : $3;
    break block1;
   }
   $20 = $12 + 16 | 0;
   block3 : {
    block4 : {
     block2 : {
      $1 = frexp($1, $12 + 44 | 0);
      $1 = $1 + $1;
      if ($1 != 0.0) {
       $6 = HEAP32[$12 + 44 >> 2];
       HEAP32[$12 + 44 >> 2] = $6 - 1;
       $15 = $5 | 32;
       if (($15 | 0) != 97) {
        break block2
       }
       break block3;
      }
      $15 = $5 | 32;
      if (($15 | 0) == 97) {
       break block3
      }
      $10 = HEAP32[$12 + 44 >> 2];
      break block4;
     }
     $10 = $6 - 29 | 0;
     HEAP32[$12 + 44 >> 2] = $10;
     $1 = $1 * 268435456.0;
    }
    $11 = ($3 | 0) < 0 ? 6 : $3;
    $14 = ($12 + 48 | 0) + (($10 | 0) >= 0 ? 288 : 0) | 0;
    $7 = $14;
    while (1) {
     $3 = $1 < 4294967295.0 & $1 >= 0.0 ? ~~$1 >>> 0 : 0;
     HEAP32[$7 >> 2] = $3;
     $7 = $7 + 4 | 0;
     $1 = ($1 - +($3 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue
     }
     break;
    };
    block5 : {
     if (($10 | 0) <= 0) {
      $8 = $10;
      $6 = $7;
      $9 = $14;
      break block5;
     }
     $9 = $14;
     $8 = $10;
     while (1) {
      $23 = $8 >>> 0 >= 29 ? 29 : $8;
      $6 = $7 - 4 | 0;
      block6 : {
       if ($9 >>> 0 > $6 >>> 0) {
        break block6
       }
       $16 = 0;
       $8 = 0;
       while (1) {
        $21 = HEAP32[$6 >> 2];
        $13 = $23 & 31;
        if (($23 & 63) >>> 0 >= 32) {
         $3 = $21 << $13;
         $21 = 0;
        } else {
         $3 = (1 << $13) - 1 & $21 >>> 32 - $13;
         $21 = $21 << $13;
        }
        $13 = $21 + $16 | 0;
        $3 = $3 + $8 | 0;
        $3 = $13 >>> 0 < $16 >>> 0 ? $3 + 1 | 0 : $3;
        $16 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($13, $3, 1e9);
        $8 = i64toi32_i32$HIGH_BITS;
        (wasm2js_i32$0 = $6, wasm2js_i32$1 = $13 - __wasm_i64_mul($16, $8, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $6 = $6 - 4 | 0;
        if ($9 >>> 0 <= $6 >>> 0) {
         continue
        }
        break;
       };
       if (!$3 & $13 >>> 0 < 1e9) {
        break block6
       }
       $9 = $9 - 4 | 0;
       HEAP32[$9 >> 2] = $16;
      }
      while (1) {
       $6 = $7;
       if ($9 >>> 0 < $6 >>> 0) {
        $7 = $6 - 4 | 0;
        if (!HEAP32[$7 >> 2]) {
         continue
        }
       }
       break;
      };
      $8 = HEAP32[$12 + 44 >> 2] - $23 | 0;
      HEAP32[$12 + 44 >> 2] = $8;
      $7 = $6;
      if (($8 | 0) > 0) {
       continue
      }
      break;
     };
    }
    if (($8 | 0) < 0) {
     $17 = (($11 + 25 >>> 0) / 9 | 0) + 1 | 0;
     $16 = ($15 | 0) == 102;
     while (1) {
      $3 = 0 - $8 | 0;
      $3 = $3 >>> 0 >= 9 ? 9 : $3;
      block7 : {
       if ($6 >>> 0 <= $9 >>> 0) {
        $7 = HEAP32[$9 >> 2] ? 0 : 4;
        break block7;
       }
       $13 = 1e9 >>> $3 | 0;
       $23 = -1 << $3 ^ -1;
       $8 = 0;
       $7 = $9;
       while (1) {
        $21 = $8;
        $8 = HEAP32[$7 >> 2];
        HEAP32[$7 >> 2] = $21 + ($8 >>> $3 | 0);
        $8 = Math_imul($13, $8 & $23);
        $7 = $7 + 4 | 0;
        if ($7 >>> 0 < $6 >>> 0) {
         continue
        }
        break;
       };
       $7 = HEAP32[$9 >> 2] ? 0 : 4;
       if (!$8) {
        break block7
       }
       HEAP32[$6 >> 2] = $8;
       $6 = $6 + 4 | 0;
      }
      $8 = $3 + HEAP32[$12 + 44 >> 2] | 0;
      HEAP32[$12 + 44 >> 2] = $8;
      $9 = $7 + $9 | 0;
      $3 = $16 ? $14 : $9;
      $6 = $6 - $3 >> 2 > ($17 | 0) ? $3 + ($17 << 2) | 0 : $6;
      if (($8 | 0) < 0) {
       continue
      }
      break;
     };
    }
    $8 = 0;
    block8 : {
     if ($6 >>> 0 <= $9 >>> 0) {
      break block8
     }
     $8 = Math_imul($14 - $9 >> 2, 9);
     $7 = 10;
     $3 = HEAP32[$9 >> 2];
     if ($3 >>> 0 < 10) {
      break block8
     }
     while (1) {
      $8 = $8 + 1 | 0;
      $7 = Math_imul($7, 10);
      if ($3 >>> 0 >= $7 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = ($11 - (($15 | 0) != 102 ? $8 : 0) | 0) - (($15 | 0) == 103 & ($11 | 0) != 0) | 0;
    if (($3 | 0) < (Math_imul($6 - $14 >> 2, 9) - 9 | 0)) {
     $3 = $3 + 9216 | 0;
     $17 = ($3 | 0) / 9 | 0;
     $10 = (($12 + 48 | 0) + (($10 | 0) < 0 ? -4092 : -3804) | 0) + ($17 << 2) | 0;
     $7 = 10;
     $3 = $3 - Math_imul($17, 9) | 0;
     if (($3 | 0) <= 7) {
      while (1) {
       $7 = Math_imul($7, 10);
       $3 = $3 + 1 | 0;
       if (($3 | 0) != 8) {
        continue
       }
       break;
      }
     }
     $16 = HEAP32[$10 >> 2];
     $17 = ($16 >>> 0) / ($7 >>> 0) | 0;
     $3 = $16 - Math_imul($7, $17) | 0;
     $13 = $10 + 4 | 0;
     block9 : {
      if (!$3 & ($13 | 0) == ($6 | 0)) {
       break block9
      }
      block10 : {
       if (!($17 & 1)) {
        $1 = 9007199254740992.0;
        if (!(HEAP8[$10 - 4 | 0] & 1) | (($7 | 0) != 1e9 | $9 >>> 0 >= $10 >>> 0)) {
         break block10
        }
       }
       $1 = 9007199254740994.0;
      }
      $18 = ($6 | 0) == ($13 | 0) ? 1.0 : 1.5;
      $13 = $7 >>> 1 | 0;
      $18 = $3 >>> 0 < $13 >>> 0 ? .5 : ($13 | 0) == ($3 | 0) ? $18 : 1.5;
      if (!(HEAPU8[$22 | 0] != 45 | $24)) {
       $18 = -$18;
       $1 = -$1;
      }
      $3 = $16 - $3 | 0;
      HEAP32[$10 >> 2] = $3;
      if ($1 + $18 == $1) {
       break block9
      }
      $3 = $3 + $7 | 0;
      HEAP32[$10 >> 2] = $3;
      if ($3 >>> 0 >= 1e9) {
       while (1) {
        HEAP32[$10 >> 2] = 0;
        $10 = $10 - 4 | 0;
        if ($10 >>> 0 < $9 >>> 0) {
         $9 = $9 - 4 | 0;
         HEAP32[$9 >> 2] = 0;
        }
        $3 = HEAP32[$10 >> 2] + 1 | 0;
        HEAP32[$10 >> 2] = $3;
        if ($3 >>> 0 > 999999999) {
         continue
        }
        break;
       }
      }
      $8 = Math_imul($14 - $9 >> 2, 9);
      $7 = 10;
      $3 = HEAP32[$9 >> 2];
      if ($3 >>> 0 < 10) {
       break block9
      }
      while (1) {
       $8 = $8 + 1 | 0;
       $7 = Math_imul($7, 10);
       if ($3 >>> 0 >= $7 >>> 0) {
        continue
       }
       break;
      };
     }
     $3 = $10 + 4 | 0;
     $6 = $3 >>> 0 < $6 >>> 0 ? $3 : $6;
    }
    while (1) {
     $7 = $6;
     $10 = $6 >>> 0 <= $9 >>> 0;
     if (!$10) {
      $6 = $6 - 4 | 0;
      if (!HEAP32[$6 >> 2]) {
       continue
      }
     }
     break;
    };
    block12 : {
     if (($15 | 0) != 103) {
      $3 = $4 & 8;
      break block12;
     }
     $3 = $11 ? $11 : 1;
     $6 = ($3 | 0) > ($8 | 0) & ($8 | 0) > -5;
     $11 = ($6 ? $8 ^ -1 : -1) + $3 | 0;
     $5 = ($6 ? -1 : -2) + $5 | 0;
     $3 = $4 & 8;
     if ($3) {
      break block12
     }
     $6 = -9;
     block13 : {
      if ($10) {
       break block13
      }
      $15 = HEAP32[$7 - 4 >> 2];
      if (!$15) {
       break block13
      }
      $3 = 10;
      $6 = 0;
      if (($15 >>> 0) % 10 | 0) {
       break block13
      }
      while (1) {
       $10 = $6;
       $6 = $6 + 1 | 0;
       $3 = Math_imul($3, 10);
       if (!(($15 >>> 0) % ($3 >>> 0) | 0)) {
        continue
       }
       break;
      };
      $6 = $10 ^ -1;
     }
     $10 = Math_imul($7 - $14 >> 2, 9);
     if (($5 & -33) == 70) {
      $3 = 0;
      $6 = ($6 + $10 | 0) - 9 | 0;
      $6 = ($6 | 0) > 0 ? $6 : 0;
      $11 = ($6 | 0) > ($11 | 0) ? $11 : $6;
      break block12;
     }
     $3 = 0;
     $6 = (($8 + $10 | 0) + $6 | 0) - 9 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $11 = ($6 | 0) > ($11 | 0) ? $11 : $6;
    }
    $10 = -1;
    $16 = $3 | $11;
    if ((($16 ? 2147483645 : 2147483646) | 0) < ($11 | 0)) {
     break block1
    }
    $15 = ((($16 | 0) != 0) + $11 | 0) + 1 | 0;
    $13 = $5 & -33;
    block14 : {
     if (($13 | 0) == 70) {
      if (($15 ^ 2147483647) < ($8 | 0)) {
       break block1
      }
      $6 = ($8 | 0) > 0 ? $8 : 0;
      break block14;
     }
     $6 = $8 >> 31;
     $6 = fmt_u(($6 ^ $8) - $6 | 0, 0, $20);
     if (($20 - $6 | 0) <= 1) {
      while (1) {
       $6 = $6 - 1 | 0;
       HEAP8[$6 | 0] = 48;
       if (($20 - $6 | 0) < 2) {
        continue
       }
       break;
      }
     }
     $17 = $6 - 2 | 0;
     HEAP8[$17 | 0] = $5;
     HEAP8[$6 - 1 | 0] = ($8 | 0) < 0 ? 45 : 43;
     $6 = $20 - $17 | 0;
     if (($6 | 0) > ($15 ^ 2147483647)) {
      break block1
     }
    }
    $5 = $6 + $15 | 0;
    if (($5 | 0) > ($19 ^ 2147483647)) {
     break block1
    }
    $5 = $5 + $19 | 0;
    pad($0, 32, $2, $5, $4);
    out($0, $22, $19);
    pad($0, 48, $2, $5, $4 ^ 65536);
    block20 : {
     block17 : {
      block16 : {
       if (($13 | 0) == 70) {
        $3 = $12 + 16 | 9;
        $8 = $9 >>> 0 > $14 >>> 0 ? $14 : $9;
        $9 = $8;
        while (1) {
         $6 = fmt_u(HEAP32[$9 >> 2], 0, $3);
         block15 : {
          if (($8 | 0) != ($9 | 0)) {
           if ($12 + 16 >>> 0 >= $6 >>> 0) {
            break block15
           }
           while (1) {
            $6 = $6 - 1 | 0;
            HEAP8[$6 | 0] = 48;
            if ($12 + 16 >>> 0 < $6 >>> 0) {
             continue
            }
            break;
           };
           break block15;
          }
          if (($3 | 0) != ($6 | 0)) {
           break block15
          }
          $6 = $6 - 1 | 0;
          HEAP8[$6 | 0] = 48;
         }
         out($0, $6, $3 - $6 | 0);
         $9 = $9 + 4 | 0;
         if ($14 >>> 0 >= $9 >>> 0) {
          continue
         }
         break;
        };
        if ($16) {
         out($0, 33655, 1)
        }
        if (($11 | 0) <= 0 | $7 >>> 0 <= $9 >>> 0) {
         break block16
        }
        while (1) {
         $6 = fmt_u(HEAP32[$9 >> 2], 0, $3);
         if ($6 >>> 0 > $12 + 16 >>> 0) {
          while (1) {
           $6 = $6 - 1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($12 + 16 >>> 0 < $6 >>> 0) {
            continue
           }
           break;
          }
         }
         out($0, $6, ($11 | 0) >= 9 ? 9 : $11);
         $6 = $11 - 9 | 0;
         $9 = $9 + 4 | 0;
         if ($7 >>> 0 <= $9 >>> 0) {
          break block17
         }
         $8 = ($11 | 0) > 9;
         $11 = $6;
         if ($8) {
          continue
         }
         break;
        };
        break block17;
       }
       block18 : {
        if (($11 | 0) < 0) {
         break block18
        }
        $14 = $7 >>> 0 > $9 >>> 0 ? $7 : $9 + 4 | 0;
        $8 = $12 + 16 | 9;
        $7 = $9;
        while (1) {
         $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
         if (($8 | 0) == ($6 | 0)) {
          $6 = $6 - 1 | 0;
          HEAP8[$6 | 0] = 48;
         }
         block19 : {
          if (($7 | 0) != ($9 | 0)) {
           if ($12 + 16 >>> 0 >= $6 >>> 0) {
            break block19
           }
           while (1) {
            $6 = $6 - 1 | 0;
            HEAP8[$6 | 0] = 48;
            if ($12 + 16 >>> 0 < $6 >>> 0) {
             continue
            }
            break;
           };
           break block19;
          }
          out($0, $6, 1);
          $6 = $6 + 1 | 0;
          if (!($3 | $11)) {
           break block19
          }
          out($0, 33655, 1);
         }
         $10 = $6;
         $6 = $8 - $6 | 0;
         out($0, $10, ($6 | 0) < ($11 | 0) ? $6 : $11);
         $11 = $11 - $6 | 0;
         $7 = $7 + 4 | 0;
         if ($14 >>> 0 <= $7 >>> 0) {
          break block18
         }
         if (($11 | 0) >= 0) {
          continue
         }
         break;
        };
       }
       pad($0, 48, $11 + 18 | 0, 18, 0);
       out($0, $17, $20 - $17 | 0);
       break block20;
      }
      $6 = $11;
     }
     pad($0, 48, $6 + 9 | 0, 9, 0);
    }
    pad($0, 32, $2, $5, $4 ^ 8192);
    $10 = ($2 | 0) > ($5 | 0) ? $2 : $5;
    break block1;
   }
   $9 = ($5 << 26 >> 31 & 9) + $22 | 0;
   block21 : {
    if ($3 >>> 0 > 11) {
     break block21
    }
    $6 = 12 - $3 | 0;
    $18 = 16.0;
    while (1) {
     $18 = $18 * 16.0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
    if (HEAPU8[$9 | 0] == 45) {
     $1 = -($18 + (-$1 - $18));
     break block21;
    }
    $1 = $1 + $18 - $18;
   }
   $7 = HEAP32[$12 + 44 >> 2];
   $6 = $7 >> 31;
   $6 = fmt_u(($6 ^ $7) - $6 | 0, 0, $20);
   if (($20 | 0) == ($6 | 0)) {
    $6 = $6 - 1 | 0;
    HEAP8[$6 | 0] = 48;
    $7 = HEAP32[$12 + 44 >> 2];
   }
   $8 = $19 | 2;
   $14 = $5 & 32;
   $11 = $6 - 2 | 0;
   HEAP8[$11 | 0] = $5 + 15;
   HEAP8[$6 - 1 | 0] = ($7 | 0) < 0 ? 45 : 43;
   $6 = !($4 & 8) & ($3 | 0) <= 0;
   $7 = $12 + 16 | 0;
   while (1) {
    $5 = $7;
    $10 = Math_abs($1) < 2147483647.0 ? ~~$1 : -2147483648;
    HEAP8[$7 | 0] = $14 | HEAPU8[$10 + 60544 | 0];
    $1 = ($1 - +($10 | 0)) * 16.0;
    $7 = $7 + 1 | 0;
    if (!($6 & $1 == 0.0 | ($7 - ($12 + 16 | 0) | 0) != 1)) {
     HEAP8[$5 + 1 | 0] = 46;
     $7 = $5 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue
    }
    break;
   };
   $10 = -1;
   $6 = $20 - $11 | 0;
   $14 = $6 + $8 | 0;
   if ((2147483645 - $14 | 0) < ($3 | 0)) {
    break block1
   }
   $5 = $7;
   $7 = $12 + 16 | 0;
   $5 = $5 - $7 | 0;
   $10 = $3 ? (($5 - 2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $5) : $5;
   $3 = $14 + $10 | 0;
   pad($0, 32, $2, $3, $4);
   out($0, $9, $8);
   pad($0, 48, $2, $3, $4 ^ 65536);
   out($0, $7, $5);
   pad($0, 48, $10 - $5 | 0, 0, 0);
   out($0, $11, $6);
   pad($0, 32, $2, $3, $4 ^ 8192);
   $10 = ($2 | 0) > ($3 | 0) ? $2 : $3;
  }
  __stack_pointer = $12 + 560 | 0;
  return $10 | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2 = $1;
  $1 = HEAP32[$1 >> 2] + 7 & -8;
  HEAP32[$2 >> 2] = $1 + 16;
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = __trunctfdf2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2])), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function vfiprintf($0, $1, $2) {
  __vfprintf_internal($0, $1, $2, 0, 0);
 }
 
 function vsnprintf($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  $0 = $1 ? $0 : $4 + 158 | 0;
  HEAP32[$4 + 148 >> 2] = $0;
  $5 = $1 - 1 | 0;
  HEAP32[$4 + 152 >> 2] = $1 >>> 0 >= $5 >>> 0 ? $5 : 0;
  wasm2js_memory_fill($4, 0, 144);
  HEAP32[$4 + 76 >> 2] = -1;
  HEAP32[$4 + 36 >> 2] = 278;
  HEAP32[$4 + 80 >> 2] = -1;
  HEAP32[$4 + 44 >> 2] = $4 + 159;
  HEAP32[$4 + 84 >> 2] = $4 + 148;
  HEAP8[$0 | 0] = 0;
  $0 = vfprintf($4, $2, $3);
  __stack_pointer = $4 + 160 | 0;
  return $0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = HEAP32[$0 + 84 >> 2];
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $7 = HEAP32[$0 + 28 >> 2];
  $6 = HEAP32[$0 + 20 >> 2] - $7 | 0;
  $6 = $3 >>> 0 < $6 >>> 0 ? $3 : $6;
  if ($6) {
   __memcpy($5, $7, $6);
   $5 = $6 + HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $5;
   $3 = HEAP32[$4 + 4 >> 2] - $6 | 0;
   HEAP32[$4 + 4 >> 2] = $3;
  }
  $3 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
  if ($3) {
   __memcpy($5, $1, $3);
   $5 = $3 + HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] - $3;
  }
  HEAP8[$5 | 0] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  return $2 | 0;
 }
 
 function __shlim($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 + 112 >> 2] = $1;
  HEAP32[$0 + 116 >> 2] = $2;
  $5 = HEAP32[$0 + 4 >> 2];
  $4 = HEAP32[$0 + 44 >> 2] - $5 | 0;
  HEAP32[$0 + 120 >> 2] = $4;
  HEAP32[$0 + 124 >> 2] = $4 >> 31;
  $4 = $0;
  $0 = HEAP32[$0 + 8 >> 2];
  $3 = $0 - $5 | 0;
  $6 = $1 >>> 0 >= $3 >>> 0;
  $3 = $3 >> 31;
  if (!(!($1 | $2) | ($6 & ($3 | 0) <= ($2 | 0) | ($2 | 0) > ($3 | 0)))) {
   $0 = $1 + $5 | 0
  }
  HEAP32[$4 + 104 >> 2] = $0;
 }
 
 function __shgetc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $1 = HEAP32[$0 + 112 >> 2];
  $3 = HEAP32[$0 + 116 >> 2];
  $8 = !!($1 | $3);
  $7 = $1;
  $4 = HEAP32[$0 + 4 >> 2];
  $5 = HEAP32[$0 + 44 >> 2];
  $1 = $4 - $5 | 0;
  $6 = $1;
  $2 = $1 + HEAP32[$0 + 120 >> 2] | 0;
  $1 = HEAP32[$0 + 124 >> 2] + ($1 >> 31) | 0;
  block : {
   $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   if (!((($1 | 0) >= ($3 | 0) & $2 >>> 0 >= $7 >>> 0 | ($1 | 0) > ($3 | 0)) & $8)) {
    $8 = __uflow($0);
    if (($8 | 0) >= 0) {
     break block
    }
    $4 = HEAP32[$0 + 4 >> 2];
    $5 = HEAP32[$0 + 44 >> 2];
   }
   HEAP32[$0 + 112 >> 2] = -1;
   HEAP32[$0 + 116 >> 2] = -1;
   HEAP32[$0 + 104 >> 2] = $4;
   $6 = $2;
   $2 = $5 - $4 | 0;
   $3 = $6 + $2 | 0;
   $1 = ($2 >> 31) + $1 | 0;
   HEAP32[$0 + 120 >> 2] = $3;
   HEAP32[$0 + 124 >> 2] = $2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
   return -1;
  }
  $3 = $2 + 1 | 0;
  $1 = $3 ? $1 : $1 + 1 | 0;
  $7 = HEAP32[$0 + 4 >> 2];
  $5 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$0 + 116 >> 2];
  $6 = $2;
  $4 = HEAP32[$0 + 112 >> 2];
  block1 : {
   if (!($2 | $4)) {
    break block1
   }
   $2 = $4 - $3 | 0;
   $4 = $6 - ($1 + ($3 >>> 0 > $4 >>> 0) | 0) | 0;
   $9 = $5 - $7 | 0;
   $6 = $9 >> 31;
   if (($4 | 0) >= ($6 | 0) & $2 >>> 0 >= $9 >>> 0 | ($4 | 0) > ($6 | 0)) {
    break block1
   }
   $5 = $2 + $7 | 0;
  }
  HEAP32[$0 + 104 >> 2] = $5;
  $2 = HEAP32[$0 + 44 >> 2];
  $5 = $2 - $7 | 0;
  $3 = $5 + $3 | 0;
  $1 = ($5 >> 31) + $1 | 0;
  HEAP32[$0 + 120 >> 2] = $3;
  HEAP32[$0 + 124 >> 2] = $3 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1;
  if ($2 >>> 0 >= $7 >>> 0) {
   HEAP8[$7 - 1 | 0] = $8
  }
  return $8;
 }
 
 function copysignl($0, $1, $2, $3, $4, $5) {
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($5 >>> 16 & 32768 | ($4 & 2147418112) >>> 16) << 16;
 }
 
 function scalbnl($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  block : {
   if (($5 | 0) >= 16384) {
    __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    $3 = HEAP32[$6 + 40 >> 2];
    $4 = HEAP32[$6 + 44 >> 2];
    $1 = HEAP32[$6 + 32 >> 2];
    $2 = HEAP32[$6 + 36 >> 2];
    if ($5 >>> 0 < 32767) {
     $5 = $5 - 16383 | 0;
     break block;
    }
    __multf3($6 + 16 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    $5 = ($5 >>> 0 >= 49149 ? 49149 : $5) - 32766 | 0;
    $3 = HEAP32[$6 + 24 >> 2];
    $4 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 16 >> 2];
    $2 = HEAP32[$6 + 20 >> 2];
    break block;
   }
   if (($5 | 0) > -16383) {
    break block
   }
   __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 7471104);
   $3 = HEAP32[$6 + 72 >> 2];
   $4 = HEAP32[$6 + 76 >> 2];
   $1 = HEAP32[$6 + 64 >> 2];
   $2 = HEAP32[$6 + 68 >> 2];
   if ($5 >>> 0 > 4294934644) {
    $5 = $5 + 16269 | 0;
    break block;
   }
   __multf3($6 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 7471104);
   $5 = ($5 >>> 0 <= 4294918376 ? -48920 : $5) + 32538 | 0;
   $3 = HEAP32[$6 + 56 >> 2];
   $4 = HEAP32[$6 + 60 >> 2];
   $1 = HEAP32[$6 + 48 >> 2];
   $2 = HEAP32[$6 + 52 >> 2];
  }
  __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
  $1 = HEAP32[$6 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = HEAP32[$6 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  __stack_pointer = $6 + 80 | 0;
 }
 
 function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $9 = __stack_pointer - 128 | 0;
  __stack_pointer = $9;
  block4 : {
   block3 : {
    block : {
     if (!__letf2($5, $6, $7, $8, 0, 0, 0, 0)) {
      break block
     }
     $10 = $8 & 65535;
     $12 = $8 >>> 16 & 32767;
     block2 : {
      block1 : {
       if (($12 | 0) != 32767) {
        $13 = 4;
        if ($12) {
         break block1
        }
        $13 = $5 | $7 | ($6 | $10) ? 3 : 2;
        break block2;
       }
       $13 = !($5 | $7 | ($6 | $10));
      }
     }
     if (!$13) {
      break block
     }
     $18 = $4 >>> 16 | 0;
     $15 = $18 & 32767;
     if (($15 | 0) != 32767) {
      break block3
     }
    }
    __multf3($9 + 16 | 0, $1, $2, $3, $4, $5, $6, $7, $8);
    $1 = HEAP32[$9 + 16 >> 2];
    $3 = HEAP32[$9 + 20 >> 2];
    $4 = HEAP32[$9 + 24 >> 2];
    $2 = HEAP32[$9 + 28 >> 2];
    __divtf3($9, $1, $3, $4, $2, $1, $3, $4, $2);
    $3 = HEAP32[$9 + 8 >> 2];
    $4 = HEAP32[$9 + 12 >> 2];
    $7 = HEAP32[$9 >> 2];
    $8 = HEAP32[$9 + 4 >> 2];
    break block4;
   }
   $14 = $3;
   $13 = $4 & 2147483647;
   $10 = $13;
   $12 = $7;
   $11 = $8 & 2147483647;
   if ((__letf2($1, $2, $14, $10, $5, $6, $7, $11) | 0) <= 0) {
    if (__letf2($1, $2, $14, $10, $5, $6, $7, $11)) {
     $7 = $1;
     $8 = $2;
     break block4;
    }
    __multf3($9 + 112 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    $3 = HEAP32[$9 + 120 >> 2];
    $4 = HEAP32[$9 + 124 >> 2];
    $7 = HEAP32[$9 + 112 >> 2];
    $8 = HEAP32[$9 + 116 >> 2];
    break block4;
   }
   $16 = $8 >>> 16 & 32767;
   if ($15) {
    $8 = $2;
    $7 = $1;
   } else {
    __multf3($9 + 96 | 0, $1, $2, $14, $13, 0, 0, 0, 1081540608);
    $14 = HEAP32[$9 + 104 >> 2];
    $7 = HEAP32[$9 + 108 >> 2];
    $13 = $7;
    $15 = ($7 >>> 16 | 0) - 120 | 0;
    $8 = HEAP32[$9 + 100 >> 2];
    $7 = HEAP32[$9 + 96 >> 2];
   }
   if (!$16) {
    __multf3($9 + 80 | 0, $5, $6, $12, $11, 0, 0, 0, 1081540608);
    $12 = HEAP32[$9 + 88 >> 2];
    $5 = HEAP32[$9 + 92 >> 2];
    $11 = $5;
    $16 = ($5 >>> 16 | 0) - 120 | 0;
    $6 = HEAP32[$9 + 84 >> 2];
    $5 = HEAP32[$9 + 80 >> 2];
   }
   $17 = $12;
   $19 = $11 & 65535 | 65536;
   $13 = $13 & 65535 | 65536;
   if (($15 | 0) > ($16 | 0)) {
    while (1) {
     $11 = $14 - $17 | 0;
     $10 = ($6 | 0) == ($8 | 0) & $5 >>> 0 > $7 >>> 0 | $6 >>> 0 > $8 >>> 0;
     $12 = $11 - $10 | 0;
     $10 = ($13 - (($14 >>> 0 < $17 >>> 0) + $19 | 0) | 0) - ($10 >>> 0 > $11 >>> 0) | 0;
     block5 : {
      if (($10 | 0) >= 0 | ($10 | 0) > 0) {
       $14 = $7;
       $7 = $7 - $5 | 0;
       $8 = $8 - (($5 >>> 0 > $14 >>> 0) + $6 | 0) | 0;
       if (!($7 | $12 | ($8 | $10))) {
        __multf3($9 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
        $3 = HEAP32[$9 + 40 >> 2];
        $4 = HEAP32[$9 + 44 >> 2];
        $7 = HEAP32[$9 + 32 >> 2];
        $8 = HEAP32[$9 + 36 >> 2];
        break block4;
       }
       $10 = $10 << 1 | $12 >>> 31;
       $14 = $12 << 1 | $8 >>> 31;
       break block5;
      }
      $10 = $13 << 1 | $14 >>> 31;
      $14 = $14 << 1 | $8 >>> 31;
     }
     $13 = $10;
     $10 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $10;
     $15 = $15 - 1 | 0;
     if (($16 | 0) < ($15 | 0)) {
      continue
     }
     break;
    };
    $15 = $16;
   }
   $11 = $14 - $17 | 0;
   $10 = ($6 | 0) == ($8 | 0) & $5 >>> 0 > $7 >>> 0 | $6 >>> 0 > $8 >>> 0;
   $12 = $11 - $10 | 0;
   $10 = ($13 - (($14 >>> 0 < $17 >>> 0) + $19 | 0) | 0) - ($10 >>> 0 > $11 >>> 0) | 0;
   $11 = $10;
   block6 : {
    if (($10 | 0) < 0) {
     $12 = $14;
     $11 = $13;
     break block6;
    }
    $14 = $7;
    $7 = $7 - $5 | 0;
    $8 = $8 - (($5 >>> 0 > $14 >>> 0) + $6 | 0) | 0;
    if ($7 | $12 | ($8 | $11)) {
     break block6
    }
    __multf3($9 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    $3 = HEAP32[$9 + 56 >> 2];
    $4 = HEAP32[$9 + 60 >> 2];
    $7 = HEAP32[$9 + 48 >> 2];
    $8 = HEAP32[$9 + 52 >> 2];
    break block4;
   }
   if (($11 | 0) == 65535 | $11 >>> 0 < 65535) {
    while (1) {
     $1 = $8 >>> 31 | 0;
     $15 = $15 - 1 | 0;
     $13 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $13;
     $2 = $1;
     $1 = $11 << 1 | $12 >>> 31;
     $12 = $2 | $12 << 1;
     $11 = $1;
     if ($1 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1 = $18 & 32768;
   if (($15 | 0) <= 0) {
    __multf3($9 - -64 | 0, $7, $8, $12, $11 & 65535 | ($1 | $15 + 120) << 16, 0, 0, 0, 1065811968);
    $3 = HEAP32[$9 + 72 >> 2];
    $4 = HEAP32[$9 + 76 >> 2];
    $7 = HEAP32[$9 + 64 >> 2];
    $8 = HEAP32[$9 + 68 >> 2];
    break block4;
   }
   $3 = $12;
   $4 = $11 & 65535 | ($1 | $15) << 16;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
  __stack_pointer = $9 + 128 | 0;
 }
 
 function __floatscan($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0;
  $15 = __stack_pointer - 48 | 0;
  __stack_pointer = $15;
  block8 : {
   block : {
    if ($2 >>> 0 > 2) {
     break block
    }
    $2 = $2 << 2;
    $29 = HEAP32[$2 + 60764 >> 2];
    $27 = HEAP32[$2 + 60752 >> 2];
    while (1) {
     $2 = HEAP32[$1 + 4 >> 2];
     block1 : {
      if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
       HEAP32[$1 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break block1;
      }
      $2 = __shgetc($1);
     }
     if (__isspace($2)) {
      continue
     }
     break;
    };
    $18 = 1;
    block3 : {
     block2 : {
      switch ($2 - 43 | 0) {
      case 0:
      case 2:
       break block2;
      default:
       break block3;
      };
     }
     $18 = ($2 | 0) == 45 ? -1 : 1;
     $2 = HEAP32[$1 + 4 >> 2];
     if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break block3;
     }
     $2 = __shgetc($1);
    }
    block6 : {
     block4 : {
      if (($2 & -33) == 73) {
       while (1) {
        if (($6 | 0) == 7) {
         break block4
        }
        $2 = HEAP32[$1 + 4 >> 2];
        block5 : {
         if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
          HEAP32[$1 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break block5;
         }
         $2 = __shgetc($1);
        }
        $17 = HEAP8[$6 + 24359 | 0];
        $6 = $6 + 1 | 0;
        if (($2 | 32) == ($17 | 0)) {
         continue
        }
        break;
       }
      }
      if (($6 | 0) != 3) {
       $17 = ($6 | 0) == 8;
       if ($17) {
        break block4
       }
       if (!$3 | $6 >>> 0 < 4) {
        break block6
       }
       if ($17) {
        break block4
       }
      }
      $2 = HEAP32[$1 + 116 >> 2];
      if (($2 | 0) >= 0 | ($2 | 0) > 0) {
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
      }
      if (!$3 | $6 >>> 0 < 4) {
       break block4
      }
      $2 = ($2 | 0) < 0;
      while (1) {
       if (!$2) {
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
       }
       $6 = $6 - 1 | 0;
       if ($6 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     $16 = __stack_pointer - 16 | 0;
     __stack_pointer = $16;
     $3 = (wasm2js_scratch_store_f32(Math_fround(Math_fround($18 | 0) * Math_fround(Infinity))), wasm2js_scratch_load_i32(2));
     $6 = $3 & 8388607;
     $2 = $3 >>> 23 | 0;
     $1 = $2 & 255;
     block7 : {
      if ($1) {
       if (($1 | 0) != 255) {
        $7 = $6 << 25;
        $5 = $6 >>> 7 | 0;
        $1 = ($2 & 255) + 16256 | 0;
        break block7;
       }
       $7 = $6 << 25;
       $5 = $6 >>> 7 | 0;
       $1 = 32767;
       break block7;
      }
      $1 = 0;
      if (!$6) {
       break block7
      }
      $1 = Math_clz32($6);
      __ashlti3($16, $6, 0, 0, 0, $1 + 81 | 0);
      $7 = HEAP32[$16 + 8 >> 2];
      $5 = HEAP32[$16 + 12 >> 2] ^ 65536;
      $8 = HEAP32[$16 >> 2];
      $9 = HEAP32[$16 + 4 >> 2];
      $1 = 16265 - $1 | 0;
     }
     HEAP32[$15 >> 2] = $8;
     HEAP32[$15 + 4 >> 2] = $9;
     HEAP32[$15 + 8 >> 2] = $7;
     HEAP32[$15 + 12 >> 2] = $5 | ($3 & -2147483648 | $1 << 16);
     __stack_pointer = $16 + 16 | 0;
     $7 = HEAP32[$15 + 8 >> 2];
     $5 = HEAP32[$15 + 12 >> 2];
     $8 = HEAP32[$15 >> 2];
     $9 = HEAP32[$15 + 4 >> 2];
     break block8;
    }
    block18 : {
     block12 : {
      block19 : {
       block13 : {
        block10 : {
         block9 : {
          if ($6) {
           break block9
          }
          $6 = 0;
          if (($2 & -33) != 78) {
           break block9
          }
          while (1) {
           if (($6 | 0) == 2) {
            break block10
           }
           $2 = HEAP32[$1 + 4 >> 2];
           block11 : {
            if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
             HEAP32[$1 + 4 >> 2] = $2 + 1;
             $2 = HEAPU8[$2 | 0];
             break block11;
            }
            $2 = __shgetc($1);
           }
           $17 = HEAP8[$6 + 27551 | 0];
           $6 = $6 + 1 | 0;
           if (($2 | 32) == ($17 | 0)) {
            continue
           }
           break;
          };
         }
         switch ($6 | 0) {
         case 3:
          break block10;
         case 0:
          break block12;
         default:
          break block13;
         };
        }
        block15 : {
         $2 = HEAP32[$1 + 4 >> 2];
         block14 : {
          if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
           HEAP32[$1 + 4 >> 2] = $2 + 1;
           $2 = HEAPU8[$2 | 0];
           break block14;
          }
          $2 = __shgetc($1);
         }
         if (($2 | 0) == 40) {
          $6 = 1;
          break block15;
         }
         $5 = 2147450880;
         if (HEAP32[$1 + 116 >> 2] < 0) {
          break block8
         }
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
         break block8;
        }
        while (1) {
         $2 = HEAP32[$1 + 4 >> 2];
         block16 : {
          if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
           HEAP32[$1 + 4 >> 2] = $2 + 1;
           $2 = HEAPU8[$2 | 0];
           break block16;
          }
          $2 = __shgetc($1);
         }
         if (!(!($2 - 48 >>> 0 < 10 | $2 - 65 >>> 0 < 26 | ($2 | 0) == 95) & $2 - 97 >>> 0 >= 26)) {
          $6 = $6 + 1 | 0;
          continue;
         }
         break;
        };
        $5 = 2147450880;
        if (($2 | 0) == 41) {
         break block8
        }
        $2 = HEAP32[$1 + 116 >> 2];
        if (($2 | 0) >= 0 | ($2 | 0) > 0) {
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
        }
        block17 : {
         if ($3) {
          if ($6) {
           break block17
          }
          break block18;
         }
         break block19;
        }
        while (1) {
         if (($2 | 0) > 0 | ($2 | 0) >= 0) {
          HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
         }
         $6 = $6 - 1 | 0;
         if ($6) {
          continue
         }
         break;
        };
        break block18;
       }
       $2 = HEAP32[$1 + 116 >> 2];
       if (($2 | 0) > 0) {
        $2 = 1
       } else {
        $2 = ($2 | 0) >= 0
       }
       if ($2) {
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1
       }
      }
      HEAP32[19563] = 28;
      __shlim($1, 0, 0);
      break block;
     }
     block20 : {
      if (($2 | 0) != 48) {
       break block20
      }
      $6 = HEAP32[$1 + 4 >> 2];
      block21 : {
       if (($6 | 0) != HEAP32[$1 + 104 >> 2]) {
        HEAP32[$1 + 4 >> 2] = $6 + 1;
        $6 = HEAPU8[$6 | 0];
        break block21;
       }
       $6 = __shgetc($1);
      }
      if (($6 & -33) == 88) {
       $4 = __stack_pointer - 432 | 0;
       __stack_pointer = $4;
       $2 = HEAP32[$1 + 4 >> 2];
       block22 : {
        if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
         HEAP32[$1 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break block22;
        }
        $2 = __shgetc($1);
       }
       block23 : {
        block25 : {
         while (1) {
          if (($2 | 0) != 48) {
           block24 : {
            if (($2 | 0) != 46) {
             break block23
            }
            $2 = HEAP32[$1 + 4 >> 2];
            if (($2 | 0) == HEAP32[$1 + 104 >> 2]) {
             break block24
            }
            HEAP32[$1 + 4 >> 2] = $2 + 1;
            $2 = HEAPU8[$2 | 0];
            break block25;
           }
          } else {
           $2 = HEAP32[$1 + 4 >> 2];
           if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
            $28 = 1;
            HEAP32[$1 + 4 >> 2] = $2 + 1;
            $2 = HEAPU8[$2 | 0];
           } else {
            $28 = 1;
            $2 = __shgetc($1);
           }
           continue;
          }
          break;
         };
         $2 = __shgetc($1);
        }
        if (($2 | 0) != 48) {
         $24 = 1;
         break block23;
        }
        while (1) {
         $2 = $16;
         $16 = $2 - 1 | 0;
         $19 = $19 - !$2 | 0;
         $2 = HEAP32[$1 + 4 >> 2];
         block26 : {
          if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
           HEAP32[$1 + 4 >> 2] = $2 + 1;
           $2 = HEAPU8[$2 | 0];
           break block26;
          }
          $2 = __shgetc($1);
         }
         if (($2 | 0) == 48) {
          continue
         }
         break;
        };
        $24 = 1;
        $28 = 1;
       }
       $9 = 1073676288;
       while (1) {
        block28 : {
         block29 : {
          block27 : {
           $6 = $2;
           $10 = $2 - 48 | 0;
           if ($10 >>> 0 < 10) {
            break block27
           }
           $17 = ($2 | 0) != 46;
           $6 = $2 | 32;
           if ($17 & $6 - 97 >>> 0 > 5) {
            break block28
           }
           if ($17) {
            break block27
           }
           if ($24) {
            break block28
           }
           $24 = 1;
           $16 = $7;
           $19 = $5;
           break block29;
          }
          $2 = ($2 | 0) > 57 ? $6 - 87 | 0 : $10;
          block30 : {
           if (($5 | 0) <= 0 & $7 >>> 0 <= 7 | ($5 | 0) < 0) {
            $13 = $2 + ($13 << 4) | 0;
            break block30;
           }
           if (!$5 & $7 >>> 0 <= 28) {
            __floatsitf($4 + 48 | 0, $2);
            __multf3($4 + 32 | 0, $25, $26, $8, $9, 0, 0, 0, 1073414144);
            $25 = HEAP32[$4 + 32 >> 2];
            $26 = HEAP32[$4 + 36 >> 2];
            $8 = HEAP32[$4 + 40 >> 2];
            $9 = HEAP32[$4 + 44 >> 2];
            __multf3($4 + 16 | 0, HEAP32[$4 + 48 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $25, $26, $8, $9);
            __addtf3($4, HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 28 >> 2], $11, $12, $22, $23);
            $22 = HEAP32[$4 + 8 >> 2];
            $23 = HEAP32[$4 + 12 >> 2];
            $11 = HEAP32[$4 >> 2];
            $12 = HEAP32[$4 + 4 >> 2];
            break block30;
           }
           if (!$2 | $14) {
            break block30
           }
           __multf3($4 + 80 | 0, $25, $26, $8, $9, 0, 0, 0, 1073610752);
           __addtf3($4 - -64 | 0, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], $11, $12, $22, $23);
           $14 = 1;
           $22 = HEAP32[$4 + 72 >> 2];
           $23 = HEAP32[$4 + 76 >> 2];
           $11 = HEAP32[$4 + 64 >> 2];
           $12 = HEAP32[$4 + 68 >> 2];
          }
          $7 = $7 + 1 | 0;
          $5 = $7 ? $5 : $5 + 1 | 0;
          $28 = 1;
         }
         $2 = HEAP32[$1 + 4 >> 2];
         if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
          HEAP32[$1 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
         } else {
          $2 = __shgetc($1)
         }
         continue;
        }
        break;
       };
       block33 : {
        if (!$28) {
         $2 = HEAP32[$1 + 116 >> 2];
         if (($2 | 0) > 0) {
          $2 = 1
         } else {
          $2 = ($2 | 0) >= 0
         }
         block32 : {
          block31 : {
           if ($2) {
            $2 = HEAP32[$1 + 4 >> 2];
            HEAP32[$1 + 4 >> 2] = $2 - 1;
            if (!$3) {
             break block31
            }
            HEAP32[$1 + 4 >> 2] = $2 - 2;
            if (!$24) {
             break block32
            }
            HEAP32[$1 + 4 >> 2] = $2 - 3;
            break block32;
           }
           if ($3) {
            break block32
           }
          }
          __shlim($1, 0, 0);
         }
         wasm2js_scratch_store_f64(0.0);
         $2 = wasm2js_scratch_load_i32(1) | 0;
         $3 = wasm2js_scratch_load_i32(0) | 0;
         wasm2js_scratch_store_f64(+($18 | 0));
         $1 = wasm2js_scratch_load_i32(1) | 0;
         wasm2js_scratch_load_i32(0) | 0;
         wasm2js_scratch_store_i32(0, $3 | 0);
         wasm2js_scratch_store_i32(1, $2 & 2147483647 | $1 & -2147483648);
         __extenddftf2($4 + 96 | 0, +wasm2js_scratch_load_f64());
         $11 = HEAP32[$4 + 96 >> 2];
         $12 = HEAP32[$4 + 100 >> 2];
         $2 = HEAP32[$4 + 108 >> 2];
         $1 = HEAP32[$4 + 104 >> 2];
         break block33;
        }
        if (($5 | 0) <= 0 & $7 >>> 0 <= 7 | ($5 | 0) < 0) {
         $8 = $7;
         $9 = $5;
         while (1) {
          $13 = $13 << 4;
          $8 = $8 + 1 | 0;
          $9 = $8 ? $9 : $9 + 1 | 0;
          if ($9 | ($8 | 0) != 8) {
           continue
          }
          break;
         };
        }
        block34 : {
         block36 : {
          block35 : {
           if (($2 & -33) == 80) {
            $8 = scanexp($1, $3);
            $2 = i64toi32_i32$HIGH_BITS;
            $9 = $2;
            if ($8 | ($2 | 0) != -2147483648) {
             break block34
            }
            if ($3) {
             $2 = HEAP32[$1 + 116 >> 2];
             if (($2 | 0) > 0) {
              $2 = 1
             } else {
              $2 = ($2 | 0) >= 0
             }
             if ($2) {
              break block35
             }
             break block36;
            }
            $11 = 0;
            $12 = 0;
            __shlim($1, 0, 0);
            $2 = 0;
            $1 = 0;
            break block33;
           }
           $8 = 0;
           $9 = 0;
           if (HEAP32[$1 + 116 >> 2] < 0) {
            break block34
           }
          }
          HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
         }
         $8 = 0;
         $9 = 0;
        }
        if (!$13) {
         wasm2js_scratch_store_f64(0.0);
         $2 = wasm2js_scratch_load_i32(1) | 0;
         $3 = wasm2js_scratch_load_i32(0) | 0;
         wasm2js_scratch_store_f64(+($18 | 0));
         $1 = wasm2js_scratch_load_i32(1) | 0;
         wasm2js_scratch_load_i32(0) | 0;
         wasm2js_scratch_store_i32(0, $3 | 0);
         wasm2js_scratch_store_i32(1, $2 & 2147483647 | $1 & -2147483648);
         __extenddftf2($4 + 112 | 0, +wasm2js_scratch_load_f64());
         $11 = HEAP32[$4 + 112 >> 2];
         $12 = HEAP32[$4 + 116 >> 2];
         $2 = HEAP32[$4 + 124 >> 2];
         $1 = HEAP32[$4 + 120 >> 2];
         break block33;
        }
        $1 = $24 ? $16 : $7;
        $3 = $8 + ($1 << 2) | 0;
        $7 = $3 - 32 | 0;
        $2 = 0 - $29 | 0;
        $1 = $9 + (($24 ? $19 : $5) << 2 | $1 >>> 30) | 0;
        $5 = ($3 >>> 0 < $8 >>> 0 ? $1 + 1 | 0 : $1) - ($3 >>> 0 < 32) | 0;
        $1 = $5;
        if (($1 | 0) > 0) {
         $1 = 1
        } else {
         $1 = $2 >>> 0 < $7 >>> 0 & ($1 | 0) >= 0
        }
        if ($1) {
         HEAP32[19563] = 68;
         __floatsitf($4 + 160 | 0, $18);
         __multf3($4 + 144 | 0, HEAP32[$4 + 160 >> 2], HEAP32[$4 + 164 >> 2], HEAP32[$4 + 168 >> 2], HEAP32[$4 + 172 >> 2], -1, -1, -1, 2147418111);
         __multf3($4 + 128 | 0, HEAP32[$4 + 144 >> 2], HEAP32[$4 + 148 >> 2], HEAP32[$4 + 152 >> 2], HEAP32[$4 + 156 >> 2], -1, -1, -1, 2147418111);
         $11 = HEAP32[$4 + 128 >> 2];
         $12 = HEAP32[$4 + 132 >> 2];
         $2 = HEAP32[$4 + 140 >> 2];
         $1 = HEAP32[$4 + 136 >> 2];
         break block33;
        }
        $2 = $29 - 226 | 0;
        $1 = $2 >> 31;
        if (($5 | 0) >= ($1 | 0) & $2 >>> 0 <= $7 >>> 0 | ($1 | 0) < ($5 | 0)) {
         if (($13 | 0) >= 0) {
          while (1) {
           __addtf3($4 + 416 | 0, $11, $12, $22, $23, 0, 0, 0, -1073807360);
           $1 = __getf2($11, $12, $22, $23, 1073610752);
           $1 = ($1 | 0) >= 0;
           __addtf3($4 + 400 | 0, $11, $12, $22, $23, $1 ? HEAP32[$4 + 416 >> 2] : $11, $1 ? HEAP32[$4 + 420 >> 2] : $12, $1 ? HEAP32[$4 + 424 >> 2] : $22, $1 ? HEAP32[$4 + 428 >> 2] : $23);
           $2 = $13 << 1;
           $13 = $2 | $1;
           $1 = $7;
           $7 = $1 - 1 | 0;
           $5 = $5 - !$1 | 0;
           $22 = HEAP32[$4 + 408 >> 2];
           $23 = HEAP32[$4 + 412 >> 2];
           $11 = HEAP32[$4 + 400 >> 2];
           $12 = HEAP32[$4 + 404 >> 2];
           if (($2 | 0) >= 0) {
            continue
           }
           break;
          }
         }
         $1 = 32 - $29 | 0;
         $2 = $1 + $7 | 0;
         $1 = $1 >>> 0 > $2 >>> 0 ? $5 + 1 | 0 : $5;
         $1 = $2 >>> 0 < $27 >>> 0 & ($1 | 0) <= 0 | ($1 | 0) < 0 ? (($2 | 0) > 0 ? $2 : 0) : $27;
         block37 : {
          if ($1 >>> 0 >= 113) {
           __floatsitf($4 + 384 | 0, $18);
           $8 = HEAP32[$4 + 392 >> 2];
           $9 = HEAP32[$4 + 396 >> 2];
           $25 = HEAP32[$4 + 384 >> 2];
           $26 = HEAP32[$4 + 388 >> 2];
           $5 = 0;
           $2 = 0;
           break block37;
          }
          __extenddftf2($4 + 352 | 0, scalbn(1.0, 144 - $1 | 0));
          __floatsitf($4 + 336 | 0, $18);
          $25 = HEAP32[$4 + 336 >> 2];
          $26 = HEAP32[$4 + 340 >> 2];
          $8 = HEAP32[$4 + 344 >> 2];
          $9 = HEAP32[$4 + 348 >> 2];
          copysignl($4 + 368 | 0, HEAP32[$4 + 352 >> 2], HEAP32[$4 + 356 >> 2], HEAP32[$4 + 360 >> 2], HEAP32[$4 + 364 >> 2], $9);
          $20 = HEAP32[$4 + 376 >> 2];
          $21 = HEAP32[$4 + 380 >> 2];
          $5 = HEAP32[$4 + 372 >> 2];
          $2 = HEAP32[$4 + 368 >> 2];
         }
         $1 = !($13 & 1) & ((__letf2($11, $12, $22, $23, 0, 0, 0, 0) | 0) != 0 & $1 >>> 0 < 32);
         __floatunsitf($4 + 320 | 0, $1 | $13);
         __multf3($4 + 304 | 0, $25, $26, $8, $9, HEAP32[$4 + 320 >> 2], HEAP32[$4 + 324 >> 2], HEAP32[$4 + 328 >> 2], HEAP32[$4 + 332 >> 2]);
         __addtf3($4 + 272 | 0, HEAP32[$4 + 304 >> 2], HEAP32[$4 + 308 >> 2], HEAP32[$4 + 312 >> 2], HEAP32[$4 + 316 >> 2], $2, $5, $20, $21);
         __multf3($4 + 288 | 0, $25, $26, $8, $9, $1 ? 0 : $11, $1 ? 0 : $12, $1 ? 0 : $22, $1 ? 0 : $23);
         __addtf3($4 + 256 | 0, HEAP32[$4 + 288 >> 2], HEAP32[$4 + 292 >> 2], HEAP32[$4 + 296 >> 2], HEAP32[$4 + 300 >> 2], HEAP32[$4 + 272 >> 2], HEAP32[$4 + 276 >> 2], HEAP32[$4 + 280 >> 2], HEAP32[$4 + 284 >> 2]);
         __subtf3($4 + 240 | 0, HEAP32[$4 + 256 >> 2], HEAP32[$4 + 260 >> 2], HEAP32[$4 + 264 >> 2], HEAP32[$4 + 268 >> 2], $2, $5, $20, $21);
         $5 = HEAP32[$4 + 240 >> 2];
         $3 = HEAP32[$4 + 244 >> 2];
         $2 = HEAP32[$4 + 248 >> 2];
         $1 = HEAP32[$4 + 252 >> 2];
         if (!__letf2($5, $3, $2, $1, 0, 0, 0, 0)) {
          HEAP32[19563] = 68
         }
         scalbnl($4 + 224 | 0, $5, $3, $2, $1, $7);
         $11 = HEAP32[$4 + 224 >> 2];
         $12 = HEAP32[$4 + 228 >> 2];
         $2 = HEAP32[$4 + 236 >> 2];
         $1 = HEAP32[$4 + 232 >> 2];
         break block33;
        }
        HEAP32[19563] = 68;
        __floatsitf($4 + 208 | 0, $18);
        __multf3($4 + 192 | 0, HEAP32[$4 + 208 >> 2], HEAP32[$4 + 212 >> 2], HEAP32[$4 + 216 >> 2], HEAP32[$4 + 220 >> 2], 0, 0, 0, 65536);
        __multf3($4 + 176 | 0, HEAP32[$4 + 192 >> 2], HEAP32[$4 + 196 >> 2], HEAP32[$4 + 200 >> 2], HEAP32[$4 + 204 >> 2], 0, 0, 0, 65536);
        $11 = HEAP32[$4 + 176 >> 2];
        $12 = HEAP32[$4 + 180 >> 2];
        $2 = HEAP32[$4 + 188 >> 2];
        $1 = HEAP32[$4 + 184 >> 2];
       }
       HEAP32[$15 + 16 >> 2] = $11;
       HEAP32[$15 + 20 >> 2] = $12;
       HEAP32[$15 + 24 >> 2] = $1;
       HEAP32[$15 + 28 >> 2] = $2;
       __stack_pointer = $4 + 432 | 0;
       $7 = HEAP32[$15 + 24 >> 2];
       $5 = HEAP32[$15 + 28 >> 2];
       $8 = HEAP32[$15 + 16 >> 2];
       $9 = HEAP32[$15 + 20 >> 2];
       break block8;
      }
      if (HEAP32[$1 + 116 >> 2] < 0) {
       break block20
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
     }
     $10 = $1;
     $6 = $2;
     $17 = $3;
     $3 = 0;
     $4 = __stack_pointer - 8976 | 0;
     __stack_pointer = $4;
     $20 = 0 - $29 | 0;
     $28 = $20 - $27 | 0;
     block38 : {
      block40 : {
       while (1) {
        if (($6 | 0) != 48) {
         block39 : {
          if (($6 | 0) != 46) {
           break block38
          }
          $1 = HEAP32[$10 + 4 >> 2];
          if (($1 | 0) == HEAP32[$10 + 104 >> 2]) {
           break block39
          }
          HEAP32[$10 + 4 >> 2] = $1 + 1;
          $6 = HEAPU8[$1 | 0];
          break block40;
         }
        } else {
         $1 = HEAP32[$10 + 4 >> 2];
         if (($1 | 0) != HEAP32[$10 + 104 >> 2]) {
          HEAP32[$10 + 4 >> 2] = $1 + 1;
          $6 = HEAPU8[$1 | 0];
         } else {
          $6 = __shgetc($10)
         }
         $3 = 1;
         continue;
        }
        break;
       };
       $6 = __shgetc($10);
      }
      if (($6 | 0) == 48) {
       while (1) {
        $1 = $7;
        $7 = $1 - 1 | 0;
        $5 = $5 - !$1 | 0;
        $1 = HEAP32[$10 + 4 >> 2];
        block41 : {
         if (($1 | 0) != HEAP32[$10 + 104 >> 2]) {
          HEAP32[$10 + 4 >> 2] = $1 + 1;
          $6 = HEAPU8[$1 | 0];
          break block41;
         }
         $6 = __shgetc($10);
        }
        if (($6 | 0) == 48) {
         continue
        }
        break;
       };
       $3 = 1;
      }
      $24 = 1;
     }
     HEAP32[$4 + 784 >> 2] = 0;
     block49 : {
      block47 : {
       $1 = ($6 | 0) == 46;
       $2 = $6 - 48 | 0;
       block46 : {
        block48 : {
         block43 : {
          if ($1 | $2 >>> 0 <= 9) {
           while (1) {
            block42 : {
             if ($1 & 1) {
              if (!$24) {
               $7 = $8;
               $5 = $9;
               $24 = 1;
               break block42;
              }
              $1 = !$3;
              break block43;
             }
             $8 = $8 + 1 | 0;
             $9 = $8 ? $9 : $9 + 1 | 0;
             if (($13 | 0) <= 2044) {
              $21 = ($6 | 0) == 48 ? $21 : $8;
              $1 = ($4 + 784 | 0) + ($13 << 2) | 0;
              HEAP32[$1 >> 2] = $14 ? (Math_imul(HEAP32[$1 >> 2], 10) + $6 | 0) - 48 | 0 : $2;
              $3 = 1;
              $1 = $14 + 1 | 0;
              $2 = ($1 | 0) == 9;
              $14 = $2 ? 0 : $1;
              $13 = $2 + $13 | 0;
              break block42;
             }
             if (($6 | 0) == 48) {
              break block42
             }
             HEAP32[$4 + 8960 >> 2] = HEAP32[$4 + 8960 >> 2] | 1;
             $21 = 18396;
            }
            $1 = HEAP32[$10 + 4 >> 2];
            block44 : {
             if (($1 | 0) != HEAP32[$10 + 104 >> 2]) {
              HEAP32[$10 + 4 >> 2] = $1 + 1;
              $6 = HEAPU8[$1 | 0];
              break block44;
             }
             $6 = __shgetc($10);
            }
            $1 = ($6 | 0) == 46;
            $2 = $6 - 48 | 0;
            if ($1 | $2 >>> 0 < 10) {
             continue
            }
            break;
           }
          }
          $7 = $24 ? $7 : $8;
          $5 = $24 ? $5 : $9;
          if (!(!$3 | ($6 & -33) != 69)) {
           $11 = scanexp($10, $17);
           $1 = i64toi32_i32$HIGH_BITS;
           $12 = $1;
           block45 : {
            if ($11 | ($1 | 0) != -2147483648) {
             break block45
            }
            if (!$17) {
             break block46
            }
            $11 = 0;
            $12 = 0;
            if (HEAP32[$10 + 116 >> 2] < 0) {
             break block45
            }
            HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - 1;
           }
           $1 = $5 + $12 | 0;
           $7 = $7 + $11 | 0;
           $5 = $7 >>> 0 < $11 >>> 0 ? $1 + 1 | 0 : $1;
           break block47;
          }
          $1 = !$3;
          if (($6 | 0) < 0) {
           break block48
          }
         }
         if (HEAP32[$10 + 116 >> 2] < 0) {
          break block48
         }
         HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - 1;
        }
        if (!$1) {
         break block47
        }
        HEAP32[19563] = 28;
       }
       __shlim($10, 0, 0);
       $7 = 0;
       $5 = 0;
       $2 = 0;
       $1 = 0;
       break block49;
      }
      $1 = HEAP32[$4 + 784 >> 2];
      if (!$1) {
       wasm2js_scratch_store_f64(0.0);
       $2 = wasm2js_scratch_load_i32(1) | 0;
       $3 = wasm2js_scratch_load_i32(0) | 0;
       wasm2js_scratch_store_f64(+($18 | 0));
       $1 = wasm2js_scratch_load_i32(1) | 0;
       wasm2js_scratch_load_i32(0) | 0;
       wasm2js_scratch_store_i32(0, $3 | 0);
       wasm2js_scratch_store_i32(1, $2 & 2147483647 | $1 & -2147483648);
       __extenddftf2($4, +wasm2js_scratch_load_f64());
       $7 = HEAP32[$4 + 8 >> 2];
       $5 = HEAP32[$4 + 12 >> 2];
       $2 = HEAP32[$4 + 4 >> 2];
       $1 = HEAP32[$4 >> 2];
       break block49;
      }
      if (!(($7 | 0) != ($8 | 0) | ($5 | 0) != ($9 | 0) | ($8 >>> 0 > 9 & ($9 | 0) >= 0 | ($9 | 0) > 0) | ($1 >>> $27 | 0 ? $27 >>> 0 <= 30 : 0))) {
       __floatsitf($4 + 48 | 0, $18);
       __floatunsitf($4 + 32 | 0, $1);
       __multf3($4 + 16 | 0, HEAP32[$4 + 48 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2]);
       $7 = HEAP32[$4 + 24 >> 2];
       $5 = HEAP32[$4 + 28 >> 2];
       $2 = HEAP32[$4 + 20 >> 2];
       $1 = HEAP32[$4 + 16 >> 2];
       break block49;
      }
      if ($20 >>> 1 >>> 0 < $7 >>> 0 & ($5 | 0) >= 0 | ($5 | 0) > 0) {
       HEAP32[19563] = 68;
       __floatsitf($4 + 96 | 0, $18);
       __multf3($4 + 80 | 0, HEAP32[$4 + 96 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 104 >> 2], HEAP32[$4 + 108 >> 2], -1, -1, -1, 2147418111);
       __multf3($4 - -64 | 0, HEAP32[$4 + 80 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 92 >> 2], -1, -1, -1, 2147418111);
       $7 = HEAP32[$4 + 72 >> 2];
       $5 = HEAP32[$4 + 76 >> 2];
       $2 = HEAP32[$4 + 68 >> 2];
       $1 = HEAP32[$4 + 64 >> 2];
       break block49;
      }
      $1 = $29 - 226 | 0;
      $2 = $7 >>> 0 < $1 >>> 0;
      $1 = $1 >> 31;
      if ($2 & ($5 | 0) <= ($1 | 0) | ($1 | 0) > ($5 | 0)) {
       HEAP32[19563] = 68;
       __floatsitf($4 + 144 | 0, $18);
       __multf3($4 + 128 | 0, HEAP32[$4 + 144 >> 2], HEAP32[$4 + 148 >> 2], HEAP32[$4 + 152 >> 2], HEAP32[$4 + 156 >> 2], 0, 0, 0, 65536);
       __multf3($4 + 112 | 0, HEAP32[$4 + 128 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 140 >> 2], 0, 0, 0, 65536);
       $7 = HEAP32[$4 + 120 >> 2];
       $5 = HEAP32[$4 + 124 >> 2];
       $2 = HEAP32[$4 + 116 >> 2];
       $1 = HEAP32[$4 + 112 >> 2];
       break block49;
      }
      if ($14) {
       if (($14 | 0) <= 8) {
        $1 = ($4 + 784 | 0) + ($13 << 2) | 0;
        $6 = HEAP32[$1 >> 2];
        while (1) {
         $6 = Math_imul($6, 10);
         $14 = $14 + 1 | 0;
         if (($14 | 0) != 9) {
          continue
         }
         break;
        };
        HEAP32[$1 >> 2] = $6;
       }
       $13 = $13 + 1 | 0;
      }
      $14 = $7;
      block50 : {
       if ($7 >>> 0 > 17 & ($5 | 0) >= 0 | ($5 | 0) > 0 | ($21 | 0) >= 9 | ($7 | 0) < ($21 | 0)) {
        break block50
       }
       if (!$5 & ($7 | 0) == 9) {
        __floatsitf($4 + 192 | 0, $18);
        __floatunsitf($4 + 176 | 0, HEAP32[$4 + 784 >> 2]);
        __multf3($4 + 160 | 0, HEAP32[$4 + 192 >> 2], HEAP32[$4 + 196 >> 2], HEAP32[$4 + 200 >> 2], HEAP32[$4 + 204 >> 2], HEAP32[$4 + 176 >> 2], HEAP32[$4 + 180 >> 2], HEAP32[$4 + 184 >> 2], HEAP32[$4 + 188 >> 2]);
        $7 = HEAP32[$4 + 168 >> 2];
        $5 = HEAP32[$4 + 172 >> 2];
        $2 = HEAP32[$4 + 164 >> 2];
        $1 = HEAP32[$4 + 160 >> 2];
        break block49;
       }
       if (($5 | 0) <= 0 & $7 >>> 0 <= 8 | ($5 | 0) < 0) {
        __floatsitf($4 + 272 | 0, $18);
        __floatunsitf($4 + 256 | 0, HEAP32[$4 + 784 >> 2]);
        __multf3($4 + 240 | 0, HEAP32[$4 + 272 >> 2], HEAP32[$4 + 276 >> 2], HEAP32[$4 + 280 >> 2], HEAP32[$4 + 284 >> 2], HEAP32[$4 + 256 >> 2], HEAP32[$4 + 260 >> 2], HEAP32[$4 + 264 >> 2], HEAP32[$4 + 268 >> 2]);
        __floatsitf($4 + 224 | 0, HEAP32[(8 - $14 << 2) + 60720 >> 2]);
        __divtf3($4 + 208 | 0, HEAP32[$4 + 240 >> 2], HEAP32[$4 + 244 >> 2], HEAP32[$4 + 248 >> 2], HEAP32[$4 + 252 >> 2], HEAP32[$4 + 224 >> 2], HEAP32[$4 + 228 >> 2], HEAP32[$4 + 232 >> 2], HEAP32[$4 + 236 >> 2]);
        $7 = HEAP32[$4 + 216 >> 2];
        $5 = HEAP32[$4 + 220 >> 2];
        $2 = HEAP32[$4 + 212 >> 2];
        $1 = HEAP32[$4 + 208 >> 2];
        break block49;
       }
       $2 = (Math_imul($14, -3) + $27 | 0) + 27 | 0;
       $1 = HEAP32[$4 + 784 >> 2];
       if ($1 >>> $2 | 0 ? ($2 | 0) <= 30 : 0) {
        break block50
       }
       __floatsitf($4 + 352 | 0, $18);
       __floatunsitf($4 + 336 | 0, $1);
       __multf3($4 + 320 | 0, HEAP32[$4 + 352 >> 2], HEAP32[$4 + 356 >> 2], HEAP32[$4 + 360 >> 2], HEAP32[$4 + 364 >> 2], HEAP32[$4 + 336 >> 2], HEAP32[$4 + 340 >> 2], HEAP32[$4 + 344 >> 2], HEAP32[$4 + 348 >> 2]);
       __floatsitf($4 + 304 | 0, HEAP32[($14 << 2) + 60680 >> 2]);
       __multf3($4 + 288 | 0, HEAP32[$4 + 320 >> 2], HEAP32[$4 + 324 >> 2], HEAP32[$4 + 328 >> 2], HEAP32[$4 + 332 >> 2], HEAP32[$4 + 304 >> 2], HEAP32[$4 + 308 >> 2], HEAP32[$4 + 312 >> 2], HEAP32[$4 + 316 >> 2]);
       $7 = HEAP32[$4 + 296 >> 2];
       $5 = HEAP32[$4 + 300 >> 2];
       $2 = HEAP32[$4 + 292 >> 2];
       $1 = HEAP32[$4 + 288 >> 2];
       break block49;
      }
      while (1) {
       $1 = $13;
       $13 = $1 - 1 | 0;
       $9 = ($4 + 784 | 0) + ($1 << 2) | 0;
       if (!HEAP32[$9 - 4 >> 2]) {
        continue
       }
       break;
      };
      $21 = 0;
      $2 = ($14 | 0) % 9 | 0;
      block51 : {
       if (!$2) {
        $2 = 0;
        break block51;
       }
       $10 = ($5 | 0) < 0 ? $2 + 9 | 0 : $2;
       block52 : {
        if (!$1) {
         $2 = 0;
         $1 = 0;
         break block52;
        }
        $13 = HEAP32[(0 - $10 << 2) + 60752 >> 2];
        $8 = 1e9 / ($13 | 0) | 0;
        $3 = 0;
        $6 = 0;
        $2 = 0;
        while (1) {
         $12 = $3;
         $3 = ($4 + 784 | 0) + ($6 << 2) | 0;
         $5 = HEAP32[$3 >> 2];
         $7 = ($5 >>> 0) / ($13 >>> 0) | 0;
         $17 = $12 + $7 | 0;
         HEAP32[$3 >> 2] = $17;
         $3 = !$17 & ($2 | 0) == ($6 | 0);
         $2 = $3 ? $2 + 1 & 2047 : $2;
         $14 = $3 ? $14 - 9 | 0 : $14;
         $3 = Math_imul($8, $5 - Math_imul($7, $13) | 0);
         $6 = $6 + 1 | 0;
         if (($6 | 0) != ($1 | 0)) {
          continue
         }
         break;
        };
        if (!$3) {
         break block52
        }
        HEAP32[$9 >> 2] = $3;
        $1 = $1 + 1 | 0;
       }
       $14 = ($14 - $10 | 0) + 9 | 0;
      }
      while (1) {
       $10 = ($4 + 784 | 0) + ($2 << 2) | 0;
       $17 = ($14 | 0) < 36;
       block53 : {
        while (1) {
         if (!$17 & (($14 | 0) != 36 | HEAPU32[$10 >> 2] >= 10384593)) {
          break block53
         }
         $13 = $1 + 2047 | 0;
         $3 = 0;
         while (1) {
          $8 = $1;
          $20 = $13 & 2047;
          $6 = ($4 + 784 | 0) + ($20 << 2) | 0;
          $1 = HEAP32[$6 >> 2];
          $5 = $1 >>> 3 | 0;
          $1 = $1 << 29;
          $7 = $3 + $1 | 0;
          $5 = $1 >>> 0 > $7 >>> 0 ? $5 + 1 | 0 : $5;
          if (!$5 & $7 >>> 0 < 1000000001) {
           $3 = 0
          } else {
           $1 = $7;
           $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($1, $5, 1e9);
           $9 = __wasm_i64_mul($3, i64toi32_i32$HIGH_BITS, 1e9, 0);
           $7 = $1 - $9 | 0;
           $5 = $5 - (i64toi32_i32$HIGH_BITS + ($1 >>> 0 < $9 >>> 0) | 0) | 0;
          }
          HEAP32[$6 >> 2] = $7;
          $1 = ($2 | 0) == ($20 | 0) ? $8 : $5 | $7 ? $8 : $20;
          $7 = $8 - 1 & 2047;
          $1 = ($7 | 0) != ($20 | 0) ? $8 : $1;
          $13 = $20 - 1 | 0;
          if (($2 | 0) != ($20 | 0)) {
           continue
          }
          break;
         };
         $21 = $21 - 29 | 0;
         $1 = $8;
         if (!$3) {
          continue
         }
         break;
        };
        $2 = $2 - 1 & 2047;
        if (($2 | 0) == ($1 | 0)) {
         $5 = $4 + 784 | 0;
         $1 = $5 + (($1 + 2046 & 2047) << 2) | 0;
         HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | HEAP32[$5 + ($7 << 2) >> 2];
         $1 = $7;
        }
        $14 = $14 + 9 | 0;
        HEAP32[($4 + 784 | 0) + ($2 << 2) >> 2] = $3;
        continue;
       }
       break;
      };
      block57 : {
       label25 : while (1) {
        $7 = $1 + 1 & 2047;
        $10 = ($4 + 784 | 0) + (($1 - 1 & 2047) << 2) | 0;
        while (1) {
         $20 = ($14 | 0) > 45 ? 9 : 1;
         block56 : {
          while (1) {
           $3 = $2;
           $6 = 0;
           block55 : {
            while (1) {
             block54 : {
              $2 = $3 + $6 & 2047;
              if (($2 | 0) == ($1 | 0)) {
               break block54
              }
              $5 = HEAP32[($4 + 784 | 0) + ($2 << 2) >> 2];
              $2 = HEAP32[($6 << 2) + 60704 >> 2];
              if ($5 >>> 0 < $2 >>> 0) {
               break block54
              }
              if ($2 >>> 0 < $5 >>> 0) {
               break block55
              }
              $6 = $6 + 1 | 0;
              if (($6 | 0) != 4) {
               continue
              }
             }
             break;
            };
            if (($14 | 0) != 36) {
             break block55
            }
            $7 = 0;
            $5 = 0;
            $6 = 0;
            $8 = 0;
            $9 = 0;
            while (1) {
             $2 = $3 + $6 & 2047;
             if (($2 | 0) == ($1 | 0)) {
              $1 = $1 + 1 & 2047;
              HEAP32[(($1 << 2) + $4 | 0) + 780 >> 2] = 0;
             }
             __floatunsitf($4 + 768 | 0, HEAP32[($4 + 784 | 0) + ($2 << 2) >> 2]);
             __multf3($4 + 752 | 0, $7, $5, $8, $9, 0, 0, 1342177280, 1075633366);
             __addtf3($4 + 736 | 0, HEAP32[$4 + 752 >> 2], HEAP32[$4 + 756 >> 2], HEAP32[$4 + 760 >> 2], HEAP32[$4 + 764 >> 2], HEAP32[$4 + 768 >> 2], HEAP32[$4 + 772 >> 2], HEAP32[$4 + 776 >> 2], HEAP32[$4 + 780 >> 2]);
             $8 = HEAP32[$4 + 744 >> 2];
             $9 = HEAP32[$4 + 748 >> 2];
             $7 = HEAP32[$4 + 736 >> 2];
             $5 = HEAP32[$4 + 740 >> 2];
             $6 = $6 + 1 | 0;
             if (($6 | 0) != 4) {
              continue
             }
             break;
            };
            __floatsitf($4 + 720 | 0, $18);
            __multf3($4 + 704 | 0, $7, $5, $8, $9, HEAP32[$4 + 720 >> 2], HEAP32[$4 + 724 >> 2], HEAP32[$4 + 728 >> 2], HEAP32[$4 + 732 >> 2]);
            $7 = 0;
            $5 = 0;
            $8 = HEAP32[$4 + 712 >> 2];
            $9 = HEAP32[$4 + 716 >> 2];
            $11 = HEAP32[$4 + 704 >> 2];
            $12 = HEAP32[$4 + 708 >> 2];
            $6 = $21 + 113 | 0;
            $13 = $6 - $29 | 0;
            $17 = ($13 | 0) < ($27 | 0);
            $10 = $17 ? (($13 | 0) > 0 ? $13 : 0) : $27;
            if ($10 >>> 0 <= 112) {
             break block56
            }
            break block57;
           }
           $21 = $21 + $20 | 0;
           $2 = $1;
           if (($1 | 0) == ($3 | 0)) {
            continue
           }
           break;
          };
          $13 = 1e9 >>> $20 | 0;
          $17 = -1 << $20 ^ -1;
          $6 = 0;
          $2 = $3;
          while (1) {
           $9 = $4 + 784 | 0;
           $5 = $9 + ($3 << 2) | 0;
           $8 = HEAP32[$5 >> 2];
           $6 = $6 + ($8 >>> $20 | 0) | 0;
           HEAP32[$5 >> 2] = $6;
           $5 = !$6 & ($2 | 0) == ($3 | 0);
           $2 = $5 ? $2 + 1 & 2047 : $2;
           $14 = $5 ? $14 - 9 | 0 : $14;
           $6 = Math_imul($13, $8 & $17);
           $3 = $3 + 1 & 2047;
           if (($3 | 0) != ($1 | 0)) {
            continue
           }
           break;
          };
          if (!$6) {
           continue
          }
          if (($2 | 0) != ($7 | 0)) {
           HEAP32[$9 + ($1 << 2) >> 2] = $6;
           $1 = $7;
           continue label25;
          }
          HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 1;
          continue;
         }
         break;
        };
        break;
       };
       __extenddftf2($4 + 656 | 0, scalbn(1.0, 225 - $10 | 0));
       copysignl($4 + 688 | 0, HEAP32[$4 + 656 >> 2], HEAP32[$4 + 660 >> 2], HEAP32[$4 + 664 >> 2], HEAP32[$4 + 668 >> 2], $9);
       $25 = HEAP32[$4 + 696 >> 2];
       $26 = HEAP32[$4 + 700 >> 2];
       $22 = HEAP32[$4 + 688 >> 2];
       $23 = HEAP32[$4 + 692 >> 2];
       __extenddftf2($4 + 640 | 0, scalbn(1.0, 113 - $10 | 0));
       fmodl($4 + 672 | 0, $11, $12, $8, $9, HEAP32[$4 + 640 >> 2], HEAP32[$4 + 644 >> 2], HEAP32[$4 + 648 >> 2], HEAP32[$4 + 652 >> 2]);
       $7 = HEAP32[$4 + 672 >> 2];
       $5 = HEAP32[$4 + 676 >> 2];
       $16 = HEAP32[$4 + 680 >> 2];
       $19 = HEAP32[$4 + 684 >> 2];
       __subtf3($4 + 624 | 0, $11, $12, $8, $9, $7, $5, $16, $19);
       __addtf3($4 + 608 | 0, $22, $23, $25, $26, HEAP32[$4 + 624 >> 2], HEAP32[$4 + 628 >> 2], HEAP32[$4 + 632 >> 2], HEAP32[$4 + 636 >> 2]);
       $8 = HEAP32[$4 + 616 >> 2];
       $9 = HEAP32[$4 + 620 >> 2];
       $11 = HEAP32[$4 + 608 >> 2];
       $12 = HEAP32[$4 + 612 >> 2];
      }
      $2 = $3 + 4 & 2047;
      block58 : {
       if (($2 | 0) == ($1 | 0)) {
        break block58
       }
       $2 = HEAP32[($4 + 784 | 0) + ($2 << 2) >> 2];
       block59 : {
        if ($2 >>> 0 <= 499999999) {
         if (!$2 & ($3 + 5 & 2047) == ($1 | 0)) {
          break block59
         }
         __extenddftf2($4 + 496 | 0, +($18 | 0) * .25);
         __addtf3($4 + 480 | 0, $7, $5, $16, $19, HEAP32[$4 + 496 >> 2], HEAP32[$4 + 500 >> 2], HEAP32[$4 + 504 >> 2], HEAP32[$4 + 508 >> 2]);
         $16 = HEAP32[$4 + 488 >> 2];
         $19 = HEAP32[$4 + 492 >> 2];
         $7 = HEAP32[$4 + 480 >> 2];
         $5 = HEAP32[$4 + 484 >> 2];
         break block59;
        }
        if (($2 | 0) != 5e8) {
         __extenddftf2($4 + 592 | 0, +($18 | 0) * .75);
         __addtf3($4 + 576 | 0, $7, $5, $16, $19, HEAP32[$4 + 592 >> 2], HEAP32[$4 + 596 >> 2], HEAP32[$4 + 600 >> 2], HEAP32[$4 + 604 >> 2]);
         $16 = HEAP32[$4 + 584 >> 2];
         $19 = HEAP32[$4 + 588 >> 2];
         $7 = HEAP32[$4 + 576 >> 2];
         $5 = HEAP32[$4 + 580 >> 2];
         break block59;
        }
        $30 = +($18 | 0);
        if (($3 + 5 & 2047) == ($1 | 0)) {
         __extenddftf2($4 + 528 | 0, $30 * .5);
         __addtf3($4 + 512 | 0, $7, $5, $16, $19, HEAP32[$4 + 528 >> 2], HEAP32[$4 + 532 >> 2], HEAP32[$4 + 536 >> 2], HEAP32[$4 + 540 >> 2]);
         $16 = HEAP32[$4 + 520 >> 2];
         $19 = HEAP32[$4 + 524 >> 2];
         $7 = HEAP32[$4 + 512 >> 2];
         $5 = HEAP32[$4 + 516 >> 2];
         break block59;
        }
        __extenddftf2($4 + 560 | 0, $30 * .75);
        __addtf3($4 + 544 | 0, $7, $5, $16, $19, HEAP32[$4 + 560 >> 2], HEAP32[$4 + 564 >> 2], HEAP32[$4 + 568 >> 2], HEAP32[$4 + 572 >> 2]);
        $16 = HEAP32[$4 + 552 >> 2];
        $19 = HEAP32[$4 + 556 >> 2];
        $7 = HEAP32[$4 + 544 >> 2];
        $5 = HEAP32[$4 + 548 >> 2];
       }
       if ($10 >>> 0 > 111) {
        break block58
       }
       fmodl($4 + 464 | 0, $7, $5, $16, $19, 0, 0, 0, 1073676288);
       if (__letf2(HEAP32[$4 + 464 >> 2], HEAP32[$4 + 468 >> 2], HEAP32[$4 + 472 >> 2], HEAP32[$4 + 476 >> 2], 0, 0, 0, 0)) {
        break block58
       }
       __addtf3($4 + 448 | 0, $7, $5, $16, $19, 0, 0, 0, 1073676288);
       $16 = HEAP32[$4 + 456 >> 2];
       $19 = HEAP32[$4 + 460 >> 2];
       $7 = HEAP32[$4 + 448 >> 2];
       $5 = HEAP32[$4 + 452 >> 2];
      }
      __addtf3($4 + 432 | 0, $11, $12, $8, $9, $7, $5, $16, $19);
      __subtf3($4 + 416 | 0, HEAP32[$4 + 432 >> 2], HEAP32[$4 + 436 >> 2], HEAP32[$4 + 440 >> 2], HEAP32[$4 + 444 >> 2], $22, $23, $25, $26);
      $8 = HEAP32[$4 + 424 >> 2];
      $9 = HEAP32[$4 + 428 >> 2];
      $11 = HEAP32[$4 + 416 >> 2];
      $12 = HEAP32[$4 + 420 >> 2];
      block60 : {
       if (($28 - 2 | 0) >= ($6 & 2147483647)) {
        break block60
       }
       HEAP32[$4 + 408 >> 2] = $8;
       HEAP32[$4 + 412 >> 2] = $9 & 2147483647;
       HEAP32[$4 + 400 >> 2] = $11;
       HEAP32[$4 + 404 >> 2] = $12;
       __multf3($4 + 384 | 0, $11, $12, $8, $9, 0, 0, 0, 1073610752);
       $1 = __getf2(HEAP32[$4 + 400 >> 2], HEAP32[$4 + 404 >> 2], HEAP32[$4 + 408 >> 2], HEAP32[$4 + 412 >> 2], 1081081856);
       $2 = ($1 | 0) >= 0;
       $8 = $2 ? HEAP32[$4 + 392 >> 2] : $8;
       $9 = $2 ? HEAP32[$4 + 396 >> 2] : $9;
       $11 = $2 ? HEAP32[$4 + 384 >> 2] : $11;
       $12 = $2 ? HEAP32[$4 + 388 >> 2] : $12;
       $21 = $2 + $21 | 0;
       if (!($17 & (($10 | 0) != ($13 | 0) | ($1 | 0) < 0) & (__letf2($7, $5, $16, $19, 0, 0, 0, 0) | 0) != 0) & ($21 + 110 | 0) <= ($28 | 0)) {
        break block60
       }
       HEAP32[19563] = 68;
      }
      scalbnl($4 + 368 | 0, $11, $12, $8, $9, $21);
      $7 = HEAP32[$4 + 376 >> 2];
      $5 = HEAP32[$4 + 380 >> 2];
      $2 = HEAP32[$4 + 372 >> 2];
      $1 = HEAP32[$4 + 368 >> 2];
     }
     HEAP32[$15 + 40 >> 2] = $7;
     HEAP32[$15 + 44 >> 2] = $5;
     HEAP32[$15 + 32 >> 2] = $1;
     HEAP32[$15 + 36 >> 2] = $2;
     __stack_pointer = $4 + 8976 | 0;
     $7 = HEAP32[$15 + 40 >> 2];
     $5 = HEAP32[$15 + 44 >> 2];
     $8 = HEAP32[$15 + 32 >> 2];
     $9 = HEAP32[$15 + 36 >> 2];
     break block8;
    }
    break block8;
   }
   $5 = 0;
  }
  HEAP32[$0 >> 2] = $8;
  HEAP32[$0 + 4 >> 2] = $9;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $5;
  __stack_pointer = $15 + 48 | 0;
 }
 
 function scanexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  block10 : {
   block5 : {
    block4 : {
     block2 : {
      block1 : {
       $2 = HEAP32[$0 + 4 >> 2];
       block : {
        if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break block;
        }
        $2 = __shgetc($0);
       }
       switch ($2 - 43 | 0) {
       case 0:
       case 2:
        break block1;
       default:
        break block2;
       };
      }
      $3 = ($2 | 0) == 45;
      $6 = !$1;
      $2 = HEAP32[$0 + 4 >> 2];
      block3 : {
       if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break block3;
       }
       $2 = __shgetc($0);
      }
      $1 = $2 - 58 | 0;
      if ($6 | $1 >>> 0 > 4294967285) {
       break block4
      }
      if (HEAP32[$0 + 116 >> 2] < 0) {
       break block5
      }
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
      break block5;
     }
     $1 = $2 - 58 | 0;
    }
    if ($1 >>> 0 < 4294967286) {
     break block5
    }
    $6 = $3;
    block6 : {
     if ($2 - 48 >>> 0 >= 10) {
      break block6
     }
     while (1) {
      $4 = (Math_imul($4, 10) + $2 | 0) - 48 | 0;
      $3 = ($4 | 0) < 214748364;
      $2 = HEAP32[$0 + 4 >> 2];
      block7 : {
       if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break block7;
       }
       $2 = __shgetc($0);
      }
      $1 = $2 - 48 | 0;
      if ($3 & $1 >>> 0 <= 9) {
       continue
      }
      break;
     };
     $5 = $4 >> 31;
     if ($1 >>> 0 >= 10) {
      break block6
     }
     while (1) {
      $1 = $2;
      $2 = __wasm_i64_mul($4, $5, 10, 0);
      $3 = $1 + $2 | 0;
      $1 = i64toi32_i32$HIGH_BITS;
      $4 = $3 - 48 | 0;
      $3 = ($2 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1) - ($3 >>> 0 < 48) | 0;
      $5 = $3;
      $3 = $4 >>> 0 < 2061584302 & ($3 | 0) <= 21474836 | ($3 | 0) < 21474836;
      $2 = HEAP32[$0 + 4 >> 2];
      block8 : {
       if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break block8;
       }
       $2 = __shgetc($0);
      }
      $1 = $2 - 48 | 0;
      if ($3 & $1 >>> 0 <= 9) {
       continue
      }
      break;
     };
     if ($1 >>> 0 >= 10) {
      break block6
     }
     while (1) {
      $1 = HEAP32[$0 + 4 >> 2];
      block9 : {
       if (($1 | 0) != HEAP32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $1 + 1;
        $1 = HEAPU8[$1 | 0];
        break block9;
       }
       $1 = __shgetc($0);
      }
      if ($1 - 48 >>> 0 < 10) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 116 >> 2];
    if (($1 | 0) > 0) {
     $1 = 1
    } else {
     $1 = ($1 | 0) >= 0
    }
    if ($1) {
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1
    }
    $0 = $4;
    $4 = $6 ? 0 - $0 | 0 : $0;
    $5 = $6 ? 0 - ((($0 | 0) != 0) + $5 | 0) | 0 : $5;
    break block10;
   }
   $5 = -2147483648;
   if (HEAP32[$0 + 116 >> 2] < 0) {
    break block10
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
   i64toi32_i32$HIGH_BITS = -2147483648;
   return 0;
  }
  i64toi32_i32$HIGH_BITS = $5;
  return $4;
 }
 
 function mbrtowc($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = $3 ? $3 : 79660;
  $3 = HEAP32[$6 >> 2];
  block3 : {
   block1 : {
    block : {
     if (!$1) {
      if ($3) {
       break block
      }
      return 0;
     }
     $4 = -2;
     if (!$2) {
      break block1
     }
     block2 : {
      if ($3) {
       $4 = $2;
       break block2;
      }
      $3 = HEAPU8[$1 | 0];
      $5 = $3 << 24 >> 24;
      if (($5 | 0) >= 0) {
       if ($0) {
        HEAP32[$0 >> 2] = $3
       }
       return ($5 | 0) != 0;
      }
      if (!HEAP32[HEAP32[19643] >> 2]) {
       $4 = 1;
       if (!$0) {
        break block1
       }
       HEAP32[$0 >> 2] = $5 & 57343;
       return 1;
      }
      $3 = $3 - 194 | 0;
      if ($3 >>> 0 > 50) {
       break block
      }
      $3 = HEAP32[($3 << 2) + 61056 >> 2];
      $4 = $2 - 1 | 0;
      if (!$4) {
       break block3
      }
      $1 = $1 + 1 | 0;
     }
     $5 = HEAPU8[$1 | 0];
     $7 = $5 >>> 3 | 0;
     if (($7 - 16 | ($3 >> 26) + $7) >>> 0 > 7) {
      break block
     }
     while (1) {
      $4 = $4 - 1 | 0;
      $3 = ($5 & 255) - 128 | $3 << 6;
      if (($3 | 0) >= 0) {
       HEAP32[$6 >> 2] = 0;
       if ($0) {
        HEAP32[$0 >> 2] = $3
       }
       return $2 - $4 | 0;
      }
      if (!$4) {
       break block3
      }
      $1 = $1 + 1 | 0;
      $5 = HEAP8[$1 | 0];
      if (($5 | 0) < -64) {
       continue
      }
      break;
     };
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[19563] = 25;
    $4 = -1;
   }
   return $4;
  }
  HEAP32[$6 >> 2] = $3;
  return -2;
 }
 
 function store_int($0, $1, $2, $3) {
  block : {
   if (!$0) {
    break block
   }
   block4 : {
    switch ($1 + 2 | 0) {
    case 0:
     HEAP8[$0 | 0] = $2;
     return;
    case 1:
     HEAP16[$0 >> 1] = $2;
     return;
    case 2:
    case 3:
     HEAP32[$0 >> 2] = $2;
     return;
    case 5:
     break block4;
    default:
     break block;
    };
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $3;
  }
 }
 
 function vsscanf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  wasm2js_memory_fill($3, 0, 144);
  HEAP32[$3 + 76 >> 2] = -1;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 32 >> 2] = 279;
  HEAP32[$3 + 84 >> 2] = $0;
  $4 = $1;
  $20 = $2;
  $8 = __stack_pointer - 304 | 0;
  __stack_pointer = $8;
  block1 : {
   block : {
    if (!HEAP32[$3 + 4 >> 2]) {
     __toread($3);
     if (!HEAP32[$3 + 4 >> 2]) {
      break block
     }
    }
    $1 = HEAPU8[$4 | 0];
    if (!$1) {
     break block1
    }
    block29 : {
     block11 : {
      while (1) {
       block59 : {
        $0 = $1 & 255;
        block3 : {
         if (__isspace($0)) {
          while (1) {
           $1 = $4;
           $4 = $4 + 1 | 0;
           if (__isspace(HEAPU8[$1 + 1 | 0])) {
            continue
           }
           break;
          };
          __shlim($3, 0, 0);
          while (1) {
           $0 = HEAP32[$3 + 4 >> 2];
           block2 : {
            if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
             HEAP32[$3 + 4 >> 2] = $0 + 1;
             $0 = HEAPU8[$0 | 0];
             break block2;
            }
            $0 = __shgetc($3);
           }
           if (__isspace($0)) {
            continue
           }
           break;
          };
          $4 = HEAP32[$3 + 4 >> 2];
          $0 = HEAP32[$3 + 116 >> 2];
          if (($0 | 0) > 0) {
           $0 = 1
          } else {
           $0 = ($0 | 0) >= 0
          }
          if ($0) {
           $4 = $4 - 1 | 0;
           HEAP32[$3 + 4 >> 2] = $4;
          }
          $0 = $4 - HEAP32[$3 + 44 >> 2] | 0;
          $2 = $0;
          $7 = $18 + HEAP32[$3 + 124 >> 2] | 0;
          $4 = $0 >> 31;
          $0 = $11 + HEAP32[$3 + 120 >> 2] | 0;
          $9 = $4 + ($0 >>> 0 < $11 >>> 0 ? $7 + 1 | 0 : $7) | 0;
          $11 = $0 + $2 | 0;
          $18 = $11 >>> 0 < $0 >>> 0 ? $9 + 1 | 0 : $9;
          break block3;
         }
         block8 : {
          block5 : {
           block4 : {
            if (($0 | 0) == 37) {
             $0 = HEAPU8[$4 + 1 | 0];
             if (($0 | 0) == 42) {
              break block4
             }
             if (($0 | 0) != 37) {
              break block5
             }
            }
            __shlim($3, 0, 0);
            block7 : {
             if (HEAPU8[$4 | 0] == 37) {
              while (1) {
               $0 = HEAP32[$3 + 4 >> 2];
               block6 : {
                if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                 HEAP32[$3 + 4 >> 2] = $0 + 1;
                 $1 = HEAPU8[$0 | 0];
                 break block6;
                }
                $1 = __shgetc($3);
               }
               if (__isspace($1)) {
                continue
               }
               break;
              };
              $4 = $4 + 1 | 0;
              break block7;
             }
             $0 = HEAP32[$3 + 4 >> 2];
             if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
              HEAP32[$3 + 4 >> 2] = $0 + 1;
              $1 = HEAPU8[$0 | 0];
              break block7;
             }
             $1 = __shgetc($3);
            }
            if (HEAPU8[$4 | 0] != ($1 | 0)) {
             $0 = HEAP32[$3 + 116 >> 2];
             if (($0 | 0) > 0) {
              $0 = 1
             } else {
              $0 = ($0 | 0) >= 0
             }
             if ($0) {
              HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
             }
             if (($1 | 0) >= 0 | $19) {
              break block1
             }
             break block;
            }
            $0 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
            $5 = $0;
            $2 = $0 >> 31;
            $0 = $18 + HEAP32[$3 + 124 >> 2] | 0;
            $1 = $11 + HEAP32[$3 + 120 >> 2] | 0;
            $2 = ($1 >>> 0 < $11 >>> 0 ? $0 + 1 | 0 : $0) + $2 | 0;
            $11 = $1 + $5 | 0;
            $18 = $11 >>> 0 < $1 >>> 0 ? $2 + 1 | 0 : $2;
            $1 = $4;
            break block3;
           }
           $10 = 0;
           $1 = $4 + 2 | 0;
           break block8;
          }
          $0 = $0 - 48 | 0;
          if (!(HEAPU8[$4 + 2 | 0] != 36 | $0 >>> 0 > 9)) {
           $1 = __stack_pointer - 16 | 0;
           HEAP32[$1 + 12 >> 2] = $20;
           $0 = $0 >>> 0 > 1 ? (($0 << 2) + $20 | 0) - 4 | 0 : $20;
           HEAP32[$1 + 8 >> 2] = $0 + 4;
           $10 = HEAP32[$0 >> 2];
           $1 = $4 + 3 | 0;
           break block8;
          }
          $10 = HEAP32[$20 >> 2];
          $20 = $20 + 4 | 0;
          $1 = $4 + 1 | 0;
         }
         $17 = 0;
         $2 = 0;
         $4 = HEAPU8[$1 | 0];
         if (($4 - 48 & 255) >>> 0 <= 9) {
          while (1) {
           $2 = (Math_imul($2, 10) + ($4 & 255) | 0) - 48 | 0;
           $4 = HEAPU8[$1 + 1 | 0];
           $1 = $1 + 1 | 0;
           if (($4 - 48 & 255) >>> 0 < 10) {
            continue
           }
           break;
          }
         }
         if (($4 & 255) == 109) {
          $12 = 0;
          $17 = ($10 | 0) != 0;
          $4 = HEAPU8[$1 + 1 | 0];
          $13 = 0;
          $1 = $1 + 1 | 0;
         }
         $5 = $1;
         $1 = $5 + 1 | 0;
         $0 = 3;
         block14 : {
          block10 : {
           switch (($4 & 255) - 65 | 0) {
           case 39:
            $0 = HEAPU8[$5 + 1 | 0] == 104;
            $1 = $0 ? $5 + 2 | 0 : $1;
            $0 = $0 ? -2 : -1;
            break block14;
           case 43:
            $0 = HEAPU8[$5 + 1 | 0] == 108;
            $1 = $0 ? $5 + 2 | 0 : $1;
            $0 = $0 ? 3 : 1;
            break block14;
           case 51:
           case 57:
            $0 = 1;
            break block14;
           case 11:
            $0 = 2;
            break block14;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break block10;
           case 41:
            break block14;
           default:
            break block11;
           };
          }
          $0 = 0;
          $1 = $5;
         }
         $5 = $0;
         $0 = HEAPU8[$1 | 0];
         $4 = ($0 & 47) == 3;
         $21 = $4 ? 1 : $5;
         $15 = $4 ? $0 | 32 : $0;
         block17 : {
          if (($15 | 0) == 91) {
           break block17
          }
          block18 : {
           if (($15 | 0) != 110) {
            if (($15 | 0) != 99) {
             break block18
            }
            $2 = ($2 | 0) <= 1 ? 1 : $2;
            break block17;
           }
           store_int($10, $21, $11, $18);
           break block3;
          }
          __shlim($3, 0, 0);
          while (1) {
           $0 = HEAP32[$3 + 4 >> 2];
           block19 : {
            if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
             HEAP32[$3 + 4 >> 2] = $0 + 1;
             $0 = HEAPU8[$0 | 0];
             break block19;
            }
            $0 = __shgetc($3);
           }
           if (__isspace($0)) {
            continue
           }
           break;
          };
          $4 = HEAP32[$3 + 4 >> 2];
          $0 = HEAP32[$3 + 116 >> 2];
          if (($0 | 0) > 0) {
           $0 = 1
          } else {
           $0 = ($0 | 0) >= 0
          }
          if ($0) {
           $4 = $4 - 1 | 0;
           HEAP32[$3 + 4 >> 2] = $4;
          }
          $0 = $4 - HEAP32[$3 + 44 >> 2] | 0;
          $4 = $0;
          $7 = $18 + HEAP32[$3 + 124 >> 2] | 0;
          $5 = $0 >> 31;
          $0 = $11 + HEAP32[$3 + 120 >> 2] | 0;
          $7 = $5 + ($0 >>> 0 < $11 >>> 0 ? $7 + 1 | 0 : $7) | 0;
          $11 = $0 + $4 | 0;
          $18 = $11 >>> 0 < $0 >>> 0 ? $7 + 1 | 0 : $7;
         }
         $9 = $2;
         $16 = $2 >> 31;
         __shlim($3, $2, $16);
         $0 = HEAP32[$3 + 4 >> 2];
         block20 : {
          if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
           HEAP32[$3 + 4 >> 2] = $0 + 1;
           break block20;
          }
          if ((__shgetc($3) | 0) < 0) {
           break block11
          }
         }
         $0 = HEAP32[$3 + 116 >> 2];
         if (($0 | 0) > 0) {
          $0 = 1
         } else {
          $0 = ($0 | 0) >= 0
         }
         if ($0) {
          HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
         }
         $4 = 16;
         block22 : {
          block33 : {
           block32 : {
            block31 : {
             block30 : {
              block21 : {
               block26 : {
                switch ($15 - 88 | 0) {
                default:
                 $0 = $15 - 65 | 0;
                 if ($0 >>> 0 > 6 | !(1 << $0 & 113)) {
                  break block22
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 __floatscan($8 + 8 | 0, $3, $21, 0);
                 $0 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
                 if (HEAP32[$3 + 120 >> 2] == (0 - $0 | 0) & HEAP32[$3 + 124 >> 2] == (0 - (($0 >> 31) + (($0 | 0) != 0) | 0) | 0)) {
                  break block29
                 }
                 if (!$10) {
                  break block22
                 }
                 $0 = HEAP32[$8 + 16 >> 2];
                 $4 = HEAP32[$8 + 20 >> 2];
                 $2 = HEAP32[$8 + 8 >> 2];
                 $5 = HEAP32[$8 + 12 >> 2];
                 switch ($21 | 0) {
                 case 0:
                  break block30;
                 case 1:
                  break block31;
                 case 2:
                  break block32;
                 default:
                  break block22;
                 };
                case 3:
                case 11:
                case 27:
                 if (($15 | 16) == 115) {
                  __memset($8 + 32 | 0, -1, 257);
                  HEAP8[$8 + 32 | 0] = 0;
                  if (($15 | 0) != 115) {
                   break block33
                  }
                  HEAP8[$8 + 65 | 0] = 0;
                  HEAP8[$8 + 46 | 0] = 0;
                  HEAP16[$8 + 42 >> 1] = 0;
                  HEAP16[$8 + 44 >> 1] = 0;
                  break block33;
                 }
                 $4 = HEAPU8[$1 + 1 | 0];
                 $5 = ($4 | 0) == 94;
                 __memset($8 + 32 | 0, $5, 257);
                 HEAP8[$8 + 32 | 0] = 0;
                 $0 = $5 ? $1 + 2 | 0 : $1 + 1 | 0;
                 block35 : {
                  block36 : {
                   block34 : {
                    $1 = HEAPU8[($5 ? 2 : 1) + $1 | 0];
                    if (($1 | 0) != 45) {
                     if (($1 | 0) == 93) {
                      break block34
                     }
                     $6 = ($4 | 0) != 94;
                     break block35;
                    }
                    $6 = ($4 | 0) != 94;
                    HEAP8[$8 + 78 | 0] = $6;
                    break block36;
                   }
                   $6 = ($4 | 0) != 94;
                   HEAP8[$8 + 126 | 0] = $6;
                  }
                  $0 = $0 + 1 | 0;
                 }
                 $1 = $0;
                 while (1) {
                  $0 = HEAPU8[$1 | 0];
                  block37 : {
                   if (($0 | 0) != 45) {
                    if (!$0) {
                     break block11
                    }
                    if (($0 | 0) == 93) {
                     break block33
                    }
                    break block37;
                   }
                   $0 = 45;
                   $5 = HEAPU8[$1 + 1 | 0];
                   if (!$5 | ($5 | 0) == 93) {
                    break block37
                   }
                   $7 = $1 + 1 | 0;
                   $4 = HEAPU8[$1 - 1 | 0];
                   block38 : {
                    if ($5 >>> 0 <= $4 >>> 0) {
                     $0 = $5;
                     break block38;
                    }
                    while (1) {
                     $4 = $4 + 1 | 0;
                     HEAP8[$4 + ($8 + 32 | 0) | 0] = $6;
                     $0 = HEAPU8[$7 | 0];
                     if ($4 >>> 0 < $0 >>> 0) {
                      continue
                     }
                     break;
                    };
                   }
                   $1 = $7;
                  }
                  HEAP8[(($8 + 32 | 0) + $0 | 0) + 1 | 0] = $6;
                  $1 = $1 + 1 | 0;
                  continue;
                 };
                case 23:
                 $4 = 8;
                 break block21;
                case 12:
                case 29:
                 $4 = 10;
                 break block21;
                case 0:
                case 24:
                case 32:
                 break block21;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break block22;
                case 17:
                 break block26;
                };
               }
               $4 = 0;
              }
              $5 = 0;
              $7 = 0;
              $2 = 0;
              $9 = 0;
              $16 = 0;
              $22 = __stack_pointer - 16 | 0;
              __stack_pointer = $22;
              block39 : {
               if (!(($4 | 0) != 1 & $4 >>> 0 <= 36)) {
                HEAP32[19563] = 28;
                break block39;
               }
               while (1) {
                $0 = HEAP32[$3 + 4 >> 2];
                block40 : {
                 if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                  HEAP32[$3 + 4 >> 2] = $0 + 1;
                  $0 = HEAPU8[$0 | 0];
                  break block40;
                 }
                 $0 = __shgetc($3);
                }
                if (__isspace($0)) {
                 continue
                }
                break;
               };
               block42 : {
                block41 : {
                 switch ($0 - 43 | 0) {
                 case 0:
                 case 2:
                  break block41;
                 default:
                  break block42;
                 };
                }
                $16 = ($0 | 0) == 45 ? -1 : 0;
                $0 = HEAP32[$3 + 4 >> 2];
                if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                 HEAP32[$3 + 4 >> 2] = $0 + 1;
                 $0 = HEAPU8[$0 | 0];
                 break block42;
                }
                $0 = __shgetc($3);
               }
               block48 : {
                block51 : {
                 block45 : {
                  block46 : {
                   if (!(($4 | 0) != 0 & ($4 | 0) != 16 | ($0 | 0) != 48)) {
                    $0 = HEAP32[$3 + 4 >> 2];
                    block43 : {
                     if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $0 + 1;
                      $0 = HEAPU8[$0 | 0];
                      break block43;
                     }
                     $0 = __shgetc($3);
                    }
                    if (($0 & -33) == 88) {
                     $4 = 16;
                     $0 = HEAP32[$3 + 4 >> 2];
                     block44 : {
                      if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                       HEAP32[$3 + 4 >> 2] = $0 + 1;
                       $0 = HEAPU8[$0 | 0];
                       break block44;
                      }
                      $0 = __shgetc($3);
                     }
                     if (HEAPU8[$0 + 60785 | 0] < 16) {
                      break block45
                     }
                     $0 = HEAP32[$3 + 116 >> 2];
                     if (($0 | 0) > 0) {
                      $0 = 1
                     } else {
                      $0 = ($0 | 0) >= 0
                     }
                     if ($0) {
                      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                     }
                     __shlim($3, 0, 0);
                     break block39;
                    }
                    if ($4) {
                     break block46
                    }
                    $4 = 8;
                    break block45;
                   }
                   $4 = $4 ? $4 : 10;
                   if ($4 >>> 0 > HEAPU8[$0 + 60785 | 0]) {
                    break block46
                   }
                   $0 = HEAP32[$3 + 116 >> 2];
                   if (($0 | 0) > 0) {
                    $0 = 1
                   } else {
                    $0 = ($0 | 0) >= 0
                   }
                   if ($0) {
                    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                   }
                   __shlim($3, 0, 0);
                   HEAP32[19563] = 28;
                   break block39;
                  }
                  if (($4 | 0) != 10) {
                   break block45
                  }
                  $2 = $0 - 48 | 0;
                  if ($2 >>> 0 <= 9) {
                   $0 = 0;
                   while (1) {
                    $0 = Math_imul($0, 10) + $2 | 0;
                    $4 = $0 >>> 0 < 429496729;
                    $2 = HEAP32[$3 + 4 >> 2];
                    block47 : {
                     if (($2 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $2 + 1;
                      $2 = HEAPU8[$2 | 0];
                      break block47;
                     }
                     $2 = __shgetc($3);
                    }
                    $2 = $2 - 48 | 0;
                    if ($4 & $2 >>> 0 <= 9) {
                     continue
                    }
                    break;
                   };
                   $5 = $0;
                  }
                  if ($2 >>> 0 > 9) {
                   break block48
                  }
                  $4 = __wasm_i64_mul($5, 0, 10, 0);
                  $9 = i64toi32_i32$HIGH_BITS;
                  while (1) {
                   block50 : {
                    $5 = $2 + $4 | 0;
                    $7 = $5 >>> 0 < $2 >>> 0 ? $9 + 1 | 0 : $9;
                    $2 = ($7 | 0) == 429496729 & $5 >>> 0 < 2576980378 | $7 >>> 0 < 429496729;
                    $0 = HEAP32[$3 + 4 >> 2];
                    block49 : {
                     if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $0 + 1;
                      $0 = HEAPU8[$0 | 0];
                      break block49;
                     }
                     $0 = __shgetc($3);
                    }
                    $6 = $0 - 48 | 0;
                    if (!($2 & $6 >>> 0 <= 9)) {
                     if ($6 >>> 0 <= 9) {
                      break block50
                     }
                     break block48;
                    }
                    $4 = __wasm_i64_mul($5, $7, 10, 0);
                    $9 = i64toi32_i32$HIGH_BITS;
                    $2 = $6;
                    if (($9 | 0) == -1 & ($2 ^ -1) >>> 0 >= $4 >>> 0 | ($9 | 0) != -1) {
                     continue
                    }
                   }
                   break;
                  };
                  $4 = 10;
                  break block51;
                 }
                 block53 : {
                  block52 : {
                   if ($4 - 1 & $4) {
                    $9 = HEAPU8[$0 + 60785 | 0];
                    if ($9 >>> 0 < $4 >>> 0) {
                     break block52
                    }
                    break block53;
                   }
                   $2 = HEAPU8[$0 + 60785 | 0];
                   if ($4 >>> 0 <= $2 >>> 0) {
                    break block53
                   }
                   $6 = HEAP8[(Math_imul($4, 23) >>> 5 & 7) + 61041 | 0];
                   while (1) {
                    $5 = $9 << $6;
                    $9 = $5 | $2;
                    $0 = HEAP32[$3 + 4 >> 2];
                    block54 : {
                     if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $0 + 1;
                      $0 = HEAPU8[$0 | 0];
                      break block54;
                     }
                     $0 = __shgetc($3);
                    }
                    $2 = HEAPU8[$0 + 60785 | 0];
                    $14 = $4 >>> 0 <= $2 >>> 0;
                    if (!$14 & $5 >>> 0 < 134217728) {
                     continue
                    }
                    break;
                   };
                   $5 = $9;
                   if ($14) {
                    break block51
                   }
                   $14 = $6 & 31;
                   if (($6 & 63) >>> 0 >= 32) {
                    $9 = 0;
                    $14 = -1 >>> $14 | 0;
                   } else {
                    $9 = -1 >>> $14 | 0;
                    $14 = $9 | (1 << $14) - 1 << 32 - $14;
                   }
                   if (!$9 & $5 >>> 0 > $14 >>> 0) {
                    break block51
                   }
                   while (1) {
                    $23 = $2 & 255;
                    $2 = $5;
                    $0 = $6 & 31;
                    if (($6 & 63) >>> 0 >= 32) {
                     $7 = $2 << $0;
                     $0 = 0;
                    } else {
                     $7 = (1 << $0) - 1 & $2 >>> 32 - $0 | $7 << $0;
                     $0 = $2 << $0;
                    }
                    $5 = $23 | $0;
                    $0 = HEAP32[$3 + 4 >> 2];
                    block55 : {
                     if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $0 + 1;
                      $0 = HEAPU8[$0 | 0];
                      break block55;
                     }
                     $0 = __shgetc($3);
                    }
                    $2 = HEAPU8[$0 + 60785 | 0];
                    if ($4 >>> 0 <= $2 >>> 0) {
                     break block51
                    }
                    if (($7 | 0) == ($9 | 0) & $5 >>> 0 <= $14 >>> 0 | $7 >>> 0 < $9 >>> 0) {
                     continue
                    }
                    break;
                   };
                   break block51;
                  }
                  while (1) {
                   $2 = Math_imul($2, $4) + $9 | 0;
                   $0 = HEAP32[$3 + 4 >> 2];
                   block56 : {
                    if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                     HEAP32[$3 + 4 >> 2] = $0 + 1;
                     $0 = HEAPU8[$0 | 0];
                     break block56;
                    }
                    $0 = __shgetc($3);
                   }
                   $9 = HEAPU8[$0 + 60785 | 0];
                   $6 = $4 >>> 0 <= $9 >>> 0;
                   if (!$6 & $2 >>> 0 < 119304647) {
                    continue
                   }
                   break;
                  };
                  $5 = $2;
                  if ($6) {
                   break block51
                  }
                  while (1) {
                   $2 = __wasm_i64_mul($5, $7, $4, 0);
                   $6 = i64toi32_i32$HIGH_BITS;
                   $9 = $9 & 255;
                   if (($6 | 0) == -1 & ($9 ^ -1) >>> 0 < $2 >>> 0) {
                    break block51
                   }
                   $5 = $2 + $9 | 0;
                   $7 = $5 >>> 0 < $9 >>> 0 ? $6 + 1 | 0 : $6;
                   $0 = HEAP32[$3 + 4 >> 2];
                   block57 : {
                    if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                     HEAP32[$3 + 4 >> 2] = $0 + 1;
                     $0 = HEAPU8[$0 | 0];
                     break block57;
                    }
                    $0 = __shgetc($3);
                   }
                   $9 = HEAPU8[$0 + 60785 | 0];
                   if ($4 >>> 0 <= $9 >>> 0) {
                    break block51
                   }
                   __multi3($22, $4, 0, 0, 0, $5, $7, 0, 0);
                   if (!(HEAP32[$22 + 8 >> 2] | HEAP32[$22 + 12 >> 2])) {
                    continue
                   }
                   break;
                  };
                 }
                }
                if (HEAPU8[$0 + 60785 | 0] >= $4 >>> 0) {
                 break block48
                }
                while (1) {
                 $0 = HEAP32[$3 + 4 >> 2];
                 block58 : {
                  if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
                   HEAP32[$3 + 4 >> 2] = $0 + 1;
                   $0 = HEAPU8[$0 | 0];
                   break block58;
                  }
                  $0 = __shgetc($3);
                 }
                 if (HEAPU8[$0 + 60785 | 0] < $4 >>> 0) {
                  continue
                 }
                 break;
                };
                HEAP32[19563] = 68;
                $16 = 0;
                $5 = -1;
                $7 = -1;
               }
               $0 = HEAP32[$3 + 116 >> 2];
               if (($0 | 0) > 0) {
                $0 = 1
               } else {
                $0 = ($0 | 0) >= 0
               }
               if ($0) {
                HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
               }
               if (!($16 | 1) & ($5 & $7) == -1) {
                HEAP32[19563] = 68;
                $5 = -2;
                $7 = -1;
                break block39;
               }
               $0 = $5 ^ $16;
               $5 = $0 - $16 | 0;
               $2 = $16 >> 31;
               $7 = ($2 ^ $7) - (($0 >>> 0 < $16 >>> 0) + $2 | 0) | 0;
              }
              __stack_pointer = $22 + 16 | 0;
              $0 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
              if (HEAP32[$3 + 120 >> 2] == (0 - $0 | 0) & HEAP32[$3 + 124 >> 2] == (0 - (($0 >> 31) + (($0 | 0) != 0) | 0) | 0)) {
               break block29
              }
              if (!(!$10 | ($15 | 0) != 112)) {
               HEAP32[$10 >> 2] = $5;
               break block22;
              }
              store_int($10, $21, $5, $7);
              break block22;
             }
             (wasm2js_i32$0 = $10, wasm2js_f32$0 = __trunctfsf2($2, $5, $0, $4)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             break block22;
            }
            (wasm2js_i32$0 = $10, wasm2js_f64$0 = __trunctfdf2($2, $5, $0, $4)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
            break block22;
           }
           HEAP32[$10 >> 2] = $2;
           HEAP32[$10 + 4 >> 2] = $5;
           HEAP32[$10 + 8 >> 2] = $0;
           HEAP32[$10 + 12 >> 2] = $4;
           break block22;
          }
          $7 = ($15 | 0) != 99;
          $6 = $7 ? 31 : $2 + 1 | 0;
          block63 : {
           if (($21 | 0) == 1) {
            $2 = $10;
            if ($17) {
             $2 = emscripten_builtin_malloc($6 << 2);
             if (!$2) {
              break block59
             }
            }
            HEAP32[$8 + 296 >> 2] = 0;
            HEAP32[$8 + 300 >> 2] = 0;
            $4 = 0;
            block62 : {
             block61 : {
              while (1) {
               $0 = $2;
               while (1) {
                $2 = HEAP32[$3 + 4 >> 2];
                block60 : {
                 if (($2 | 0) != HEAP32[$3 + 104 >> 2]) {
                  HEAP32[$3 + 4 >> 2] = $2 + 1;
                  $2 = HEAPU8[$2 | 0];
                  break block60;
                 }
                 $2 = __shgetc($3);
                }
                if (!HEAPU8[($2 + $8 | 0) + 33 | 0]) {
                 break block61
                }
                HEAP8[$8 + 27 | 0] = $2;
                $2 = mbrtowc($8 + 28 | 0, $8 + 27 | 0, 1, $8 + 296 | 0);
                if (($2 | 0) == -2) {
                 continue
                }
                if (($2 | 0) == -1) {
                 $12 = 0;
                 break block62;
                }
                if ($0) {
                 HEAP32[($4 << 2) + $0 >> 2] = HEAP32[$8 + 28 >> 2];
                 $4 = $4 + 1 | 0;
                }
                if (!$17 | ($4 | 0) != ($6 | 0)) {
                 continue
                }
                break;
               };
               $6 = $6 << 1 | 1;
               $2 = emscripten_builtin_realloc($0, $6 << 2);
               if ($2) {
                continue
               }
               break;
              };
              $12 = 0;
              $13 = $0;
              $17 = 1;
              break block11;
             }
             $12 = 0;
             $13 = $0;
             if (!($8 + 296 | 0 ? HEAP32[$8 + 296 >> 2] : 0)) {
              break block63
             }
            }
            $13 = $0;
            break block11;
           }
           if ($17) {
            $4 = 0;
            $2 = emscripten_builtin_malloc($6);
            if (!$2) {
             break block59
            }
            while (1) {
             $0 = $2;
             while (1) {
              $2 = HEAP32[$3 + 4 >> 2];
              block64 : {
               if (($2 | 0) != HEAP32[$3 + 104 >> 2]) {
                HEAP32[$3 + 4 >> 2] = $2 + 1;
                $2 = HEAPU8[$2 | 0];
                break block64;
               }
               $2 = __shgetc($3);
              }
              if (!HEAPU8[($2 + $8 | 0) + 33 | 0]) {
               $12 = $0;
               $13 = 0;
               break block63;
              }
              HEAP8[$0 + $4 | 0] = $2;
              $4 = $4 + 1 | 0;
              if (($6 | 0) != ($4 | 0)) {
               continue
              }
              break;
             };
             $6 = $6 << 1 | 1;
             $2 = emscripten_builtin_realloc($0, $6);
             if ($2) {
              continue
             }
             break;
            };
            $13 = 0;
            $12 = $0;
            $17 = 1;
            break block11;
           }
           $4 = 0;
           if ($10) {
            while (1) {
             $0 = HEAP32[$3 + 4 >> 2];
             block65 : {
              if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
               HEAP32[$3 + 4 >> 2] = $0 + 1;
               $0 = HEAPU8[$0 | 0];
               break block65;
              }
              $0 = __shgetc($3);
             }
             if (HEAPU8[($0 + $8 | 0) + 33 | 0]) {
              HEAP8[$4 + $10 | 0] = $0;
              $4 = $4 + 1 | 0;
              continue;
             } else {
              $0 = $10;
              $12 = $0;
              $13 = 0;
              break block63;
             }
            }
           }
           while (1) {
            $0 = HEAP32[$3 + 4 >> 2];
            block66 : {
             if (($0 | 0) != HEAP32[$3 + 104 >> 2]) {
              HEAP32[$3 + 4 >> 2] = $0 + 1;
              $0 = HEAPU8[$0 | 0];
              break block66;
             }
             $0 = __shgetc($3);
            }
            if (HEAPU8[($0 + $8 | 0) + 33 | 0]) {
             continue
            }
            break;
           };
           $0 = 0;
           $12 = 0;
           $13 = 0;
          }
          $2 = HEAP32[$3 + 4 >> 2];
          $5 = HEAP32[$3 + 116 >> 2];
          if (($5 | 0) > 0) {
           $5 = 1
          } else {
           $5 = ($5 | 0) >= 0
          }
          if ($5) {
           $2 = $2 - 1 | 0;
           HEAP32[$3 + 4 >> 2] = $2;
          }
          $2 = $2 - HEAP32[$3 + 44 >> 2] | 0;
          $6 = $2;
          $5 = $2 + HEAP32[$3 + 120 >> 2] | 0;
          $2 = HEAP32[$3 + 124 >> 2] + ($2 >> 31) | 0;
          $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
          if (!($2 | $5) | !($7 | ($5 | 0) == ($9 | 0) & ($2 | 0) == ($16 | 0))) {
           break block29
          }
          if ($17) {
           HEAP32[$10 >> 2] = $0
          }
          if (($15 | 0) == 99) {
           break block22
          }
          if ($13) {
           HEAP32[($4 << 2) + $13 >> 2] = 0
          }
          if (!$12) {
           $12 = 0;
           break block22;
          }
          HEAP8[$4 + $12 | 0] = 0;
         }
         $0 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
         $4 = $0;
         $5 = $0 >> 31;
         $0 = $18 + HEAP32[$3 + 124 >> 2] | 0;
         $2 = $11 + HEAP32[$3 + 120 >> 2] | 0;
         $7 = ($2 >>> 0 < $11 >>> 0 ? $0 + 1 | 0 : $0) + $5 | 0;
         $11 = $2 + $4 | 0;
         $18 = $11 >>> 0 < $2 >>> 0 ? $7 + 1 | 0 : $7;
         $19 = (($10 | 0) != 0) + $19 | 0;
        }
        $4 = $1 + 1 | 0;
        $1 = HEAPU8[$1 + 1 | 0];
        if ($1) {
         continue
        }
        break block1;
       }
       break;
      };
      $17 = 1;
      $12 = 0;
      $13 = 0;
     }
     $19 = $19 ? $19 : -1;
    }
    if (!$17) {
     break block1
    }
    emscripten_builtin_free($12);
    emscripten_builtin_free($13);
    break block1;
   }
   $19 = -1;
  }
  __stack_pointer = $8 + 304 | 0;
  __stack_pointer = $3 + 144 | 0;
  return $19;
 }
 
 function string_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 84 >> 2];
  $3 = $2 + 256 | 0;
  $5 = memchr($4, 0, $3);
  $3 = $5 ? $5 - $4 | 0 : $3;
  $2 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
  __memcpy($1, $4, $2);
  $1 = $4 + $3 | 0;
  HEAP32[$0 + 84 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2 + $4;
  return $2 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  if (!$0) {
   return 0
  }
  HEAP32[19563] = $0;
  return -1;
 }
 
 function wcrtomb($0, $1) {
  block : {
   if ($0) {
    if ($1 >>> 0 <= 127) {
     break block
    }
    block1 : {
     if (!HEAP32[HEAP32[19643] >> 2]) {
      if (($1 & -128) == 57216) {
       break block
      }
      break block1;
     }
     if ($1 >>> 0 <= 2047) {
      HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 6 | 192;
      return 2;
     }
     if (!(($1 & -8192) != 57344 & $1 >>> 0 >= 55296)) {
      HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 12 | 224;
      HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
      return 3;
     }
     if ($1 - 65536 >>> 0 <= 1048575) {
      HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 18 | 240;
      HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
      HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
      return 4;
     }
    }
    HEAP32[19563] = 25;
    $0 = -1;
   } else {
    $0 = 1
   }
   return $0;
  }
  HEAP8[$0 | 0] = $1;
  return 1;
 }
 
 function wctomb($0, $1) {
  if (!$0) {
   return 0
  }
  return wcrtomb($0, $1);
 }
 
 function emscripten_builtin_malloc($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  block2 : {
   block39 : {
    block1 : {
     block3 : {
      if ($0 >>> 0 <= 244) {
       $4 = HEAP32[19916];
       $7 = $0 >>> 0 < 11 ? 16 : $0 + 11 & 504;
       $0 = $7 >>> 3 | 0;
       $1 = $4 >>> $0 | 0;
       if ($1 & 3) {
        $5 = $0 + (($1 ^ -1) & 1) | 0;
        $2 = $5 << 3;
        $3 = $2 + 79704 | 0;
        $1 = HEAP32[$2 + 79712 >> 2];
        $0 = HEAP32[$1 + 8 >> 2];
        block : {
         if (($3 | 0) == ($0 | 0)) {
          (wasm2js_i32$0 = 79664, wasm2js_i32$1 = __wasm_rotl_i32($5) & $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          break block;
         }
         if (($1 | 0) != HEAP32[$0 + 12 >> 2] | $0 >>> 0 < HEAPU32[19920]) {
          break block1
         }
         HEAP32[$0 + 12 >> 2] = $3;
         HEAP32[$3 + 8 >> 2] = $0;
        }
        $0 = $1 + 8 | 0;
        HEAP32[$1 + 4 >> 2] = $2 | 3;
        $1 = $1 + $2 | 0;
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
        break block2;
       }
       $9 = HEAP32[19918];
       if ($9 >>> 0 >= $7 >>> 0) {
        break block3
       }
       if ($1) {
        $2 = 2 << $0;
        $5 = __wasm_ctz_i32((0 - $2 | $2) & $1 << $0);
        $2 = $5 << 3;
        $3 = $2 + 79704 | 0;
        $1 = HEAP32[$2 + 79712 >> 2];
        $0 = HEAP32[$1 + 8 >> 2];
        block4 : {
         if (($3 | 0) == ($0 | 0)) {
          $4 = __wasm_rotl_i32($5) & $4;
          HEAP32[19916] = $4;
          break block4;
         }
         if (($1 | 0) != HEAP32[$0 + 12 >> 2] | $0 >>> 0 < HEAPU32[19920]) {
          break block1
         }
         HEAP32[$0 + 12 >> 2] = $3;
         HEAP32[$3 + 8 >> 2] = $0;
        }
        HEAP32[$1 + 4 >> 2] = $7 | 3;
        $6 = $1 + $7 | 0;
        $5 = $2 - $7 | 0;
        HEAP32[$6 + 4 >> 2] = $5 | 1;
        HEAP32[$1 + $2 >> 2] = $5;
        if ($9) {
         $0 = ($9 & -8) + 79704 | 0;
         $2 = HEAP32[19921];
         $3 = 1 << ($9 >>> 3);
         block5 : {
          if (!($3 & $4)) {
           HEAP32[19916] = $3 | $4;
           $3 = $0;
           break block5;
          }
          $3 = HEAP32[$0 + 8 >> 2];
          if ($3 >>> 0 < HEAPU32[19920]) {
           break block1
          }
         }
         HEAP32[$0 + 8 >> 2] = $2;
         HEAP32[$3 + 12 >> 2] = $2;
         HEAP32[$2 + 12 >> 2] = $0;
         HEAP32[$2 + 8 >> 2] = $3;
        }
        $0 = $1 + 8 | 0;
        HEAP32[19921] = $6;
        HEAP32[19918] = $5;
        break block2;
       }
       $12 = HEAP32[19917];
       if (!$12) {
        break block3
       }
       $2 = HEAP32[(__wasm_ctz_i32($12) << 2) + 79968 >> 2];
       $5 = (HEAP32[$2 + 4 >> 2] & -8) - $7 | 0;
       $1 = $2;
       while (1) {
        block6 : {
         $0 = HEAP32[$1 + 16 >> 2];
         if (!$0) {
          $0 = HEAP32[$1 + 20 >> 2];
          if (!$0) {
           break block6
          }
         }
         $3 = (HEAP32[$0 + 4 >> 2] & -8) - $7 | 0;
         $1 = $3 >>> 0 < $5 >>> 0;
         $5 = $1 ? $3 : $5;
         $2 = $1 ? $0 : $2;
         $1 = $0;
         continue;
        }
        break;
       };
       $8 = HEAP32[19920];
       if ($8 >>> 0 > $2 >>> 0) {
        break block1
       }
       $10 = HEAP32[$2 + 24 >> 2];
       $0 = HEAP32[$2 + 12 >> 2];
       block7 : {
        if (($2 | 0) != ($0 | 0)) {
         $1 = HEAP32[$2 + 8 >> 2];
         if ($1 >>> 0 < $8 >>> 0 | HEAP32[$1 + 12 >> 2] != ($2 | 0) | HEAP32[$0 + 8 >> 2] != ($2 | 0)) {
          break block1
         }
         HEAP32[$1 + 12 >> 2] = $0;
         HEAP32[$0 + 8 >> 2] = $1;
         break block7;
        }
        block8 : {
         $1 = HEAP32[$2 + 20 >> 2];
         if ($1) {
          $3 = $2 + 20 | 0
         } else {
          $1 = HEAP32[$2 + 16 >> 2];
          if (!$1) {
           break block8
          }
          $3 = $2 + 16 | 0;
         }
         while (1) {
          $6 = $3;
          $0 = $1;
          $3 = $0 + 20 | 0;
          $1 = HEAP32[$0 + 20 >> 2];
          if ($1) {
           continue
          }
          $3 = $0 + 16 | 0;
          $1 = HEAP32[$0 + 16 >> 2];
          if ($1) {
           continue
          }
          break;
         };
         if ($6 >>> 0 < $8 >>> 0) {
          break block1
         }
         HEAP32[$6 >> 2] = 0;
         break block7;
        }
        $0 = 0;
       }
       block9 : {
        if (!$10) {
         break block9
        }
        $1 = HEAP32[$2 + 28 >> 2];
        $3 = $1 << 2;
        block10 : {
         if (HEAP32[$3 + 79968 >> 2] == ($2 | 0)) {
          HEAP32[$3 + 79968 >> 2] = $0;
          if ($0) {
           break block10
          }
          (wasm2js_i32$0 = 79668, wasm2js_i32$1 = __wasm_rotl_i32($1) & $12), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          break block9;
         }
         if ($8 >>> 0 > $10 >>> 0) {
          break block1
         }
         block11 : {
          if (HEAP32[$10 + 16 >> 2] == ($2 | 0)) {
           HEAP32[$10 + 16 >> 2] = $0;
           break block11;
          }
          HEAP32[$10 + 20 >> 2] = $0;
         }
         if (!$0) {
          break block9
         }
        }
        if ($0 >>> 0 < $8 >>> 0) {
         break block1
        }
        HEAP32[$0 + 24 >> 2] = $10;
        $1 = HEAP32[$2 + 16 >> 2];
        if ($1) {
         if ($1 >>> 0 < $8 >>> 0) {
          break block1
         }
         HEAP32[$0 + 16 >> 2] = $1;
         HEAP32[$1 + 24 >> 2] = $0;
        }
        $1 = HEAP32[$2 + 20 >> 2];
        if (!$1) {
         break block9
        }
        if ($1 >>> 0 < $8 >>> 0) {
         break block1
        }
        HEAP32[$0 + 20 >> 2] = $1;
        HEAP32[$1 + 24 >> 2] = $0;
       }
       block12 : {
        if ($5 >>> 0 <= 15) {
         $0 = $5 + $7 | 0;
         HEAP32[$2 + 4 >> 2] = $0 | 3;
         $0 = $0 + $2 | 0;
         HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
         break block12;
        }
        HEAP32[$2 + 4 >> 2] = $7 | 3;
        $6 = $2 + $7 | 0;
        HEAP32[$6 + 4 >> 2] = $5 | 1;
        HEAP32[$5 + $6 >> 2] = $5;
        if ($9) {
         $0 = ($9 & -8) + 79704 | 0;
         $1 = HEAP32[19921];
         $3 = 1 << ($9 >>> 3);
         block13 : {
          if (!($3 & $4)) {
           HEAP32[19916] = $3 | $4;
           $3 = $0;
           break block13;
          }
          $3 = HEAP32[$0 + 8 >> 2];
          if ($8 >>> 0 > $3 >>> 0) {
           break block1
          }
         }
         HEAP32[$0 + 8 >> 2] = $1;
         HEAP32[$3 + 12 >> 2] = $1;
         HEAP32[$1 + 12 >> 2] = $0;
         HEAP32[$1 + 8 >> 2] = $3;
        }
        HEAP32[19921] = $6;
        HEAP32[19918] = $5;
       }
       $0 = $2 + 8 | 0;
       break block2;
      }
      $7 = -1;
      if ($0 >>> 0 > 4294967231) {
       break block3
      }
      $1 = $0 + 11 | 0;
      $7 = $1 & -8;
      $9 = HEAP32[19917];
      if (!$9) {
       break block3
      }
      $4 = 31;
      $5 = 0 - $7 | 0;
      if ($0 >>> 0 <= 16777204) {
       $0 = Math_clz32($1 >>> 8 | 0);
       $4 = (($7 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
      }
      $1 = HEAP32[($4 << 2) + 79968 >> 2];
      block17 : {
       block16 : {
        block14 : {
         if (!$1) {
          $0 = 0;
          break block14;
         }
         $0 = 0;
         $2 = $7 << (($4 | 0) != 31 ? 25 - ($4 >>> 1 | 0) | 0 : 0);
         while (1) {
          block15 : {
           $6 = (HEAP32[$1 + 4 >> 2] & -8) - $7 | 0;
           if ($6 >>> 0 >= $5 >>> 0) {
            break block15
           }
           $3 = $1;
           $5 = $6;
           if ($5) {
            break block15
           }
           $5 = 0;
           $0 = $1;
           break block16;
          }
          $6 = HEAP32[$1 + 20 >> 2];
          $1 = HEAP32[(($2 >>> 29 & 4) + $1 | 0) + 16 >> 2];
          $0 = $6 ? (($6 | 0) == ($1 | 0) ? $0 : $6) : $0;
          $2 = $2 << 1;
          if ($1) {
           continue
          }
          break;
         };
        }
        if (!($0 | $3)) {
         $3 = 0;
         $0 = 2 << $4;
         $0 = (0 - $0 | $0) & $9;
         if (!$0) {
          break block3
         }
         $0 = HEAP32[(__wasm_ctz_i32($0) << 2) + 79968 >> 2];
        }
        if (!$0) {
         break block17
        }
       }
       while (1) {
        $2 = (HEAP32[$0 + 4 >> 2] & -8) - $7 | 0;
        $1 = $2 >>> 0 < $5 >>> 0;
        $5 = $1 ? $2 : $5;
        $3 = $1 ? $0 : $3;
        $1 = HEAP32[$0 + 16 >> 2];
        if ($1) {
         $0 = $1
        } else {
         $0 = HEAP32[$0 + 20 >> 2]
        }
        if ($0) {
         continue
        }
        break;
       };
      }
      if (!$3 | HEAP32[19918] - $7 >>> 0 <= $5 >>> 0) {
       break block3
      }
      $6 = HEAP32[19920];
      if ($6 >>> 0 > $3 >>> 0) {
       break block1
      }
      $8 = HEAP32[$3 + 24 >> 2];
      $0 = HEAP32[$3 + 12 >> 2];
      block18 : {
       if (($3 | 0) != ($0 | 0)) {
        $1 = HEAP32[$3 + 8 >> 2];
        if ($1 >>> 0 < $6 >>> 0 | HEAP32[$1 + 12 >> 2] != ($3 | 0) | HEAP32[$0 + 8 >> 2] != ($3 | 0)) {
         break block1
        }
        HEAP32[$1 + 12 >> 2] = $0;
        HEAP32[$0 + 8 >> 2] = $1;
        break block18;
       }
       block19 : {
        $1 = HEAP32[$3 + 20 >> 2];
        if ($1) {
         $2 = $3 + 20 | 0
        } else {
         $1 = HEAP32[$3 + 16 >> 2];
         if (!$1) {
          break block19
         }
         $2 = $3 + 16 | 0;
        }
        while (1) {
         $4 = $2;
         $0 = $1;
         $2 = $0 + 20 | 0;
         $1 = HEAP32[$0 + 20 >> 2];
         if ($1) {
          continue
         }
         $2 = $0 + 16 | 0;
         $1 = HEAP32[$0 + 16 >> 2];
         if ($1) {
          continue
         }
         break;
        };
        if ($4 >>> 0 < $6 >>> 0) {
         break block1
        }
        HEAP32[$4 >> 2] = 0;
        break block18;
       }
       $0 = 0;
      }
      block20 : {
       if (!$8) {
        break block20
       }
       $1 = HEAP32[$3 + 28 >> 2];
       $2 = $1 << 2;
       block21 : {
        if (HEAP32[$2 + 79968 >> 2] == ($3 | 0)) {
         HEAP32[$2 + 79968 >> 2] = $0;
         if ($0) {
          break block21
         }
         $9 = __wasm_rotl_i32($1) & $9;
         HEAP32[19917] = $9;
         break block20;
        }
        if ($6 >>> 0 > $8 >>> 0) {
         break block1
        }
        block22 : {
         if (HEAP32[$8 + 16 >> 2] == ($3 | 0)) {
          HEAP32[$8 + 16 >> 2] = $0;
          break block22;
         }
         HEAP32[$8 + 20 >> 2] = $0;
        }
        if (!$0) {
         break block20
        }
       }
       if ($0 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$0 + 24 >> 2] = $8;
       $1 = HEAP32[$3 + 16 >> 2];
       if ($1) {
        if ($1 >>> 0 < $6 >>> 0) {
         break block1
        }
        HEAP32[$0 + 16 >> 2] = $1;
        HEAP32[$1 + 24 >> 2] = $0;
       }
       $1 = HEAP32[$3 + 20 >> 2];
       if (!$1) {
        break block20
       }
       if ($1 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$0 + 20 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $0;
      }
      block23 : {
       if ($5 >>> 0 <= 15) {
        $0 = $5 + $7 | 0;
        HEAP32[$3 + 4 >> 2] = $0 | 3;
        $0 = $0 + $3 | 0;
        HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
        break block23;
       }
       HEAP32[$3 + 4 >> 2] = $7 | 3;
       $4 = $3 + $7 | 0;
       HEAP32[$4 + 4 >> 2] = $5 | 1;
       HEAP32[$4 + $5 >> 2] = $5;
       if ($5 >>> 0 <= 255) {
        $0 = ($5 & 248) + 79704 | 0;
        $1 = HEAP32[19916];
        $2 = 1 << ($5 >>> 3);
        block24 : {
         if (!($1 & $2)) {
          HEAP32[19916] = $1 | $2;
          $5 = $0;
          break block24;
         }
         $5 = HEAP32[$0 + 8 >> 2];
         if ($6 >>> 0 > $5 >>> 0) {
          break block1
         }
        }
        HEAP32[$0 + 8 >> 2] = $4;
        HEAP32[$5 + 12 >> 2] = $4;
        HEAP32[$4 + 12 >> 2] = $0;
        HEAP32[$4 + 8 >> 2] = $5;
        break block23;
       }
       $0 = 31;
       if ($5 >>> 0 <= 16777215) {
        $0 = Math_clz32($5 >>> 8 | 0);
        $0 = (($5 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
       }
       HEAP32[$4 + 28 >> 2] = $0;
       HEAP32[$4 + 16 >> 2] = 0;
       HEAP32[$4 + 20 >> 2] = 0;
       $2 = ($0 << 2) + 79968 | 0;
       block26 : {
        $1 = 1 << $0;
        block25 : {
         if (!($1 & $9)) {
          HEAP32[19917] = $1 | $9;
          HEAP32[$2 >> 2] = $4;
          break block25;
         }
         $0 = $5 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
         $1 = HEAP32[$2 >> 2];
         while (1) {
          $2 = $1;
          if ((HEAP32[$1 + 4 >> 2] & -8) == ($5 | 0)) {
           break block26
          }
          $1 = $0 >>> 29 | 0;
          $0 = $0 << 1;
          $7 = ($1 & 4) + $2 | 0;
          $1 = HEAP32[$7 + 16 >> 2];
          if ($1) {
           continue
          }
          break;
         };
         if ($6 >>> 0 > $7 + 16 >>> 0) {
          break block1
         }
         HEAP32[$7 + 16 >> 2] = $4;
        }
        HEAP32[$4 + 24 >> 2] = $2;
        HEAP32[$4 + 12 >> 2] = $4;
        HEAP32[$4 + 8 >> 2] = $4;
        break block23;
       }
       if ($2 >>> 0 < $6 >>> 0) {
        break block1
       }
       $0 = HEAP32[$2 + 8 >> 2];
       if ($0 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$0 + 12 >> 2] = $4;
       HEAP32[$2 + 8 >> 2] = $4;
       HEAP32[$4 + 24 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = $2;
       HEAP32[$4 + 8 >> 2] = $0;
      }
      $0 = $3 + 8 | 0;
      break block2;
     }
     $3 = HEAP32[19918];
     if ($3 >>> 0 >= $7 >>> 0) {
      $0 = HEAP32[19921];
      $1 = $3 - $7 | 0;
      block27 : {
       if ($1 >>> 0 >= 16) {
        $2 = $0 + $7 | 0;
        HEAP32[$2 + 4 >> 2] = $1 | 1;
        HEAP32[$0 + $3 >> 2] = $1;
        HEAP32[$0 + 4 >> 2] = $7 | 3;
        break block27;
       }
       HEAP32[$0 + 4 >> 2] = $3 | 3;
       $1 = $0 + $3 | 0;
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
       $2 = 0;
       $1 = 0;
      }
      HEAP32[19918] = $1;
      HEAP32[19921] = $2;
      $0 = $0 + 8 | 0;
      break block2;
     }
     $2 = HEAP32[19919];
     if ($2 >>> 0 > $7 >>> 0) {
      $1 = $2 - $7 | 0;
      HEAP32[19919] = $1;
      $0 = HEAP32[19922];
      $2 = $0 + $7 | 0;
      HEAP32[19922] = $2;
      HEAP32[$2 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + 4 >> 2] = $7 | 3;
      $0 = $0 + 8 | 0;
      break block2;
     }
     $0 = 0;
     $5 = $7 + 47 | 0;
     if (HEAP32[20034]) {
      $1 = HEAP32[20036]
     } else {
      HEAP32[20037] = -1;
      HEAP32[20038] = -1;
      HEAP32[20035] = 4096;
      HEAP32[20036] = 4096;
      HEAP32[20034] = $11 + 12 & -16 ^ 1431655768;
      HEAP32[20039] = 0;
      HEAP32[20027] = 0;
      $1 = 4096;
     }
     $4 = $5 + $1 | 0;
     $6 = 0 - $1 | 0;
     $1 = $4 & $6;
     if ($1 >>> 0 <= $7 >>> 0) {
      break block2
     }
     $8 = HEAP32[20026];
     if ($8) {
      $9 = HEAP32[20024];
      $3 = $9 + $1 | 0;
      if ($3 >>> 0 <= $9 >>> 0 | $3 >>> 0 > $8 >>> 0) {
       break block2
      }
     }
     block34 : {
      block32 : {
       if (!(HEAPU8[80108] & 4)) {
        block30 : {
         block33 : {
          block31 : {
           block29 : {
            $3 = HEAP32[19922];
            if ($3) {
             $0 = 80112;
             while (1) {
              $8 = HEAP32[$0 >> 2];
              if ($8 >>> 0 <= $3 >>> 0 & $3 >>> 0 < $8 + HEAP32[$0 + 4 >> 2] >>> 0) {
               break block29
              }
              $0 = HEAP32[$0 + 8 >> 2];
              if ($0) {
               continue
              }
              break;
             };
            }
            $2 = sbrk(0);
            if (($2 | 0) == -1) {
             break block30
            }
            $4 = $1;
            $0 = HEAP32[20035];
            $3 = $0 - 1 | 0;
            if ($3 & $2) {
             $4 = ($1 - $2 | 0) + ($2 + $3 & 0 - $0) | 0
            }
            if ($4 >>> 0 <= $7 >>> 0) {
             break block30
            }
            $3 = HEAP32[20026];
            if ($3) {
             $6 = HEAP32[20024];
             $0 = $6 + $4 | 0;
             if ($0 >>> 0 <= $6 >>> 0 | $0 >>> 0 > $3 >>> 0) {
              break block30
             }
            }
            $0 = sbrk($4);
            if (($2 | 0) != ($0 | 0)) {
             break block31
            }
            break block32;
           }
           $4 = $6 & $4 - $2;
           $2 = sbrk($4);
           if (($2 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
            break block33
           }
           $0 = $2;
          }
          if (($0 | 0) == -1) {
           break block30
          }
          if ($7 + 48 >>> 0 <= $4 >>> 0) {
           $2 = $0;
           break block32;
          }
          $2 = HEAP32[20036];
          $2 = $2 + ($5 - $4 | 0) & 0 - $2;
          if ((sbrk($2) | 0) == -1) {
           break block30
          }
          $4 = $2 + $4 | 0;
          $2 = $0;
          break block32;
         }
         if (($2 | 0) != -1) {
          break block32
         }
        }
        HEAP32[20027] = HEAP32[20027] | 4;
       }
       $2 = sbrk($1);
       $0 = sbrk(0);
       if (($2 | 0) == -1 | ($0 | 0) == -1 | $0 >>> 0 <= $2 >>> 0) {
        break block34
       }
       $4 = $0 - $2 | 0;
       if ($4 >>> 0 <= $7 + 40 >>> 0) {
        break block34
       }
      }
      $0 = HEAP32[20024] + $4 | 0;
      HEAP32[20024] = $0;
      if ($0 >>> 0 > HEAPU32[20025]) {
       HEAP32[20025] = $0
      }
      block37 : {
       block36 : {
        block35 : {
         $5 = HEAP32[19922];
         if ($5) {
          $0 = 80112;
          while (1) {
           $1 = HEAP32[$0 >> 2];
           $3 = HEAP32[$0 + 4 >> 2];
           if (($1 + $3 | 0) == ($2 | 0)) {
            break block35
           }
           $0 = HEAP32[$0 + 8 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          break block36;
         }
         $0 = HEAP32[19920];
         if (!($0 >>> 0 <= $2 >>> 0 ? $0 : 0)) {
          HEAP32[19920] = $2
         }
         $0 = 0;
         HEAP32[20029] = $4;
         HEAP32[20028] = $2;
         HEAP32[19924] = -1;
         HEAP32[19925] = HEAP32[20034];
         HEAP32[20031] = 0;
         while (1) {
          $1 = $0 << 3;
          $3 = $1 + 79704 | 0;
          HEAP32[$1 + 79712 >> 2] = $3;
          HEAP32[$1 + 79716 >> 2] = $3;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != 32) {
           continue
          }
          break;
         };
         $0 = $4 - 40 | 0;
         $1 = -8 - $2 & 7;
         $3 = $0 - $1 | 0;
         HEAP32[19919] = $3;
         $1 = $1 + $2 | 0;
         HEAP32[19922] = $1;
         HEAP32[$1 + 4 >> 2] = $3 | 1;
         HEAP32[($0 + $2 | 0) + 4 >> 2] = 40;
         HEAP32[19923] = HEAP32[20038];
         break block37;
        }
        if (HEAP32[$0 + 12 >> 2] & 8 | ($2 >>> 0 <= $5 >>> 0 | $1 >>> 0 > $5 >>> 0)) {
         break block36
        }
        HEAP32[$0 + 4 >> 2] = $3 + $4;
        $0 = -8 - $5 & 7;
        $1 = $0 + $5 | 0;
        HEAP32[19922] = $1;
        $2 = HEAP32[19919] + $4 | 0;
        $0 = $2 - $0 | 0;
        HEAP32[19919] = $0;
        HEAP32[$1 + 4 >> 2] = $0 | 1;
        HEAP32[($2 + $5 | 0) + 4 >> 2] = 40;
        HEAP32[19923] = HEAP32[20038];
        break block37;
       }
       if (HEAPU32[19920] > $2 >>> 0) {
        HEAP32[19920] = $2
       }
       $3 = $2 + $4 | 0;
       $0 = 80112;
       block38 : {
        while (1) {
         $1 = HEAP32[$0 >> 2];
         if (($1 | 0) != ($3 | 0)) {
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue
          }
          break block38;
         }
         break;
        };
        if (!(HEAPU8[$0 + 12 | 0] & 8)) {
         break block39
        }
       }
       $0 = 80112;
       while (1) {
        block40 : {
         $1 = HEAP32[$0 >> 2];
         if ($1 >>> 0 <= $5 >>> 0) {
          $3 = $1 + HEAP32[$0 + 4 >> 2] | 0;
          if ($3 >>> 0 > $5 >>> 0) {
           break block40
          }
         }
         $0 = HEAP32[$0 + 8 >> 2];
         continue;
        }
        break;
       };
       $0 = $4 - 40 | 0;
       $1 = -8 - $2 & 7;
       $6 = $0 - $1 | 0;
       HEAP32[19919] = $6;
       $1 = $1 + $2 | 0;
       HEAP32[19922] = $1;
       HEAP32[$1 + 4 >> 2] = $6 | 1;
       HEAP32[($0 + $2 | 0) + 4 >> 2] = 40;
       HEAP32[19923] = HEAP32[20038];
       $0 = ($3 + (39 - $3 & 7) | 0) - 47 | 0;
       $1 = $0 >>> 0 < $5 + 16 >>> 0 ? $5 : $0;
       HEAP32[$1 + 4 >> 2] = 27;
       $0 = HEAP32[20031];
       HEAP32[$1 + 16 >> 2] = HEAP32[20030];
       HEAP32[$1 + 20 >> 2] = $0;
       $0 = HEAP32[20029];
       HEAP32[$1 + 8 >> 2] = HEAP32[20028];
       HEAP32[$1 + 12 >> 2] = $0;
       HEAP32[20030] = $1 + 8;
       HEAP32[20029] = $4;
       HEAP32[20028] = $2;
       HEAP32[20031] = 0;
       $0 = $1 + 24 | 0;
       while (1) {
        HEAP32[$0 + 4 >> 2] = 7;
        $2 = $0 + 8 | 0;
        $0 = $0 + 4 | 0;
        if ($2 >>> 0 < $3 >>> 0) {
         continue
        }
        break;
       };
       if (($1 | 0) == ($5 | 0)) {
        break block37
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -2;
       $2 = $1 - $5 | 0;
       HEAP32[$5 + 4 >> 2] = $2 | 1;
       HEAP32[$1 >> 2] = $2;
       block42 : {
        if ($2 >>> 0 <= 255) {
         $0 = ($2 & 248) + 79704 | 0;
         $1 = HEAP32[19916];
         $2 = 1 << ($2 >>> 3);
         block41 : {
          if (!($1 & $2)) {
           HEAP32[19916] = $1 | $2;
           $1 = $0;
           break block41;
          }
          $1 = HEAP32[$0 + 8 >> 2];
          if ($1 >>> 0 < HEAPU32[19920]) {
           break block1
          }
         }
         HEAP32[$0 + 8 >> 2] = $5;
         HEAP32[$1 + 12 >> 2] = $5;
         $3 = 8;
         $2 = 12;
         break block42;
        }
        $0 = 31;
        if ($2 >>> 0 <= 16777215) {
         $0 = Math_clz32($2 >>> 8 | 0);
         $0 = (($2 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
        }
        HEAP32[$5 + 28 >> 2] = $0;
        HEAP32[$5 + 16 >> 2] = 0;
        HEAP32[$5 + 20 >> 2] = 0;
        $1 = ($0 << 2) + 79968 | 0;
        block44 : {
         $3 = HEAP32[19917];
         $4 = 1 << $0;
         block43 : {
          if (!($3 & $4)) {
           HEAP32[19917] = $3 | $4;
           HEAP32[$1 >> 2] = $5;
           break block43;
          }
          $0 = $2 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
          $3 = HEAP32[$1 >> 2];
          while (1) {
           $1 = $3;
           if (($2 | 0) == (HEAP32[$1 + 4 >> 2] & -8)) {
            break block44
           }
           $4 = $0 >>> 29 | 0;
           $0 = $0 << 1;
           $4 = ($4 & 4) + $1 | 0;
           $3 = HEAP32[$4 + 16 >> 2];
           if ($3) {
            continue
           }
           break;
          };
          if (HEAPU32[19920] > $4 + 16 >>> 0) {
           break block1
          }
          HEAP32[$4 + 16 >> 2] = $5;
         }
         HEAP32[$5 + 24 >> 2] = $1;
         $1 = $5;
         $0 = $1;
         $3 = 12;
         $2 = 8;
         break block42;
        }
        $0 = HEAP32[19920];
        if ($0 >>> 0 > $1 >>> 0) {
         break block1
        }
        $2 = $0;
        $0 = HEAP32[$1 + 8 >> 2];
        if ($2 >>> 0 > $0 >>> 0) {
         break block1
        }
        HEAP32[$0 + 12 >> 2] = $5;
        HEAP32[$1 + 8 >> 2] = $5;
        HEAP32[$5 + 8 >> 2] = $0;
        $0 = 0;
        $3 = 12;
        $2 = 24;
       }
       HEAP32[$3 + $5 >> 2] = $1;
       HEAP32[$2 + $5 >> 2] = $0;
      }
      $0 = HEAP32[19919];
      if ($0 >>> 0 <= $7 >>> 0) {
       break block34
      }
      $1 = $0 - $7 | 0;
      HEAP32[19919] = $1;
      $0 = HEAP32[19922];
      $2 = $0 + $7 | 0;
      HEAP32[19922] = $2;
      HEAP32[$2 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + 4 >> 2] = $7 | 3;
      $0 = $0 + 8 | 0;
      break block2;
     }
     HEAP32[19563] = 48;
     $0 = 0;
     break block2;
    }
    abort();
    wasm2js_trap();
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $4;
   $9 = (-8 - $2 & 7) + $2 | 0;
   HEAP32[$9 + 4 >> 2] = $7 | 3;
   $6 = $1 + (-8 - $1 & 7) | 0;
   $4 = $7 + $9 | 0;
   $3 = $6 - $4 | 0;
   block55 : {
    block46 : {
     block45 : {
      if (HEAP32[19922] == ($6 | 0)) {
       HEAP32[19922] = $4;
       $0 = HEAP32[19919] + $3 | 0;
       HEAP32[19919] = $0;
       HEAP32[$4 + 4 >> 2] = $0 | 1;
       break block45;
      }
      if (HEAP32[19921] == ($6 | 0)) {
       HEAP32[19921] = $4;
       $0 = HEAP32[19918] + $3 | 0;
       HEAP32[19918] = $0;
       HEAP32[$4 + 4 >> 2] = $0 | 1;
       HEAP32[$0 + $4 >> 2] = $0;
       break block45;
      }
      $7 = HEAP32[$6 + 4 >> 2];
      if (($7 & 3) == 1) {
       $2 = HEAP32[$6 + 12 >> 2];
       block47 : {
        if ($7 >>> 0 <= 255) {
         $0 = HEAP32[$6 + 8 >> 2];
         $1 = ($7 & 248) + 79704 | 0;
         if (($0 | 0) != ($1 | 0) & (HEAP32[$0 + 12 >> 2] != ($6 | 0) | $0 >>> 0 < HEAPU32[19920])) {
          break block46
         }
         if (($0 | 0) == ($2 | 0)) {
          (wasm2js_i32$0 = 79664, wasm2js_i32$1 = HEAP32[19916] & __wasm_rotl_i32($7 >>> 3 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          break block47;
         }
         if ((HEAP32[$2 + 8 >> 2] != ($6 | 0) | HEAPU32[19920] > $2 >>> 0) & ($1 | 0) != ($2 | 0)) {
          break block46
         }
         HEAP32[$0 + 12 >> 2] = $2;
         HEAP32[$2 + 8 >> 2] = $0;
         break block47;
        }
        $8 = HEAP32[$6 + 24 >> 2];
        block48 : {
         if (($2 | 0) != ($6 | 0)) {
          $0 = HEAP32[$6 + 8 >> 2];
          if ($0 >>> 0 < HEAPU32[19920] | HEAP32[$0 + 12 >> 2] != ($6 | 0) | HEAP32[$2 + 8 >> 2] != ($6 | 0)) {
           break block46
          }
          HEAP32[$0 + 12 >> 2] = $2;
          HEAP32[$2 + 8 >> 2] = $0;
          break block48;
         }
         block49 : {
          $0 = HEAP32[$6 + 20 >> 2];
          if ($0) {
           $1 = $6 + 20 | 0
          } else {
           $0 = HEAP32[$6 + 16 >> 2];
           if (!$0) {
            break block49
           }
           $1 = $6 + 16 | 0;
          }
          while (1) {
           $5 = $1;
           $2 = $0;
           $1 = $0 + 20 | 0;
           $0 = HEAP32[$0 + 20 >> 2];
           if ($0) {
            continue
           }
           $1 = $2 + 16 | 0;
           $0 = HEAP32[$2 + 16 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          if ($5 >>> 0 < HEAPU32[19920]) {
           break block46
          }
          HEAP32[$5 >> 2] = 0;
          break block48;
         }
         $2 = 0;
        }
        if (!$8) {
         break block47
        }
        $0 = HEAP32[$6 + 28 >> 2];
        $1 = $0 << 2;
        block50 : {
         if (HEAP32[$1 + 79968 >> 2] == ($6 | 0)) {
          HEAP32[$1 + 79968 >> 2] = $2;
          if ($2) {
           break block50
          }
          (wasm2js_i32$0 = 79668, wasm2js_i32$1 = HEAP32[19917] & __wasm_rotl_i32($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          break block47;
         }
         if ($8 >>> 0 < HEAPU32[19920]) {
          break block46
         }
         block51 : {
          if (HEAP32[$8 + 16 >> 2] == ($6 | 0)) {
           HEAP32[$8 + 16 >> 2] = $2;
           break block51;
          }
          HEAP32[$8 + 20 >> 2] = $2;
         }
         if (!$2) {
          break block47
         }
        }
        $1 = HEAP32[19920];
        if ($1 >>> 0 > $2 >>> 0) {
         break block46
        }
        HEAP32[$2 + 24 >> 2] = $8;
        $0 = HEAP32[$6 + 16 >> 2];
        if ($0) {
         if ($0 >>> 0 < $1 >>> 0) {
          break block46
         }
         HEAP32[$2 + 16 >> 2] = $0;
         HEAP32[$0 + 24 >> 2] = $2;
        }
        $0 = HEAP32[$6 + 20 >> 2];
        if (!$0) {
         break block47
        }
        if ($0 >>> 0 < $1 >>> 0) {
         break block46
        }
        HEAP32[$2 + 20 >> 2] = $0;
        HEAP32[$0 + 24 >> 2] = $2;
       }
       $0 = $7 & -8;
       $3 = $0 + $3 | 0;
       $6 = $0 + $6 | 0;
       $7 = HEAP32[$6 + 4 >> 2];
      }
      HEAP32[$6 + 4 >> 2] = $7 & -2;
      HEAP32[$4 + 4 >> 2] = $3 | 1;
      HEAP32[$3 + $4 >> 2] = $3;
      if ($3 >>> 0 <= 255) {
       $0 = ($3 & 248) + 79704 | 0;
       $1 = HEAP32[19916];
       $2 = 1 << ($3 >>> 3);
       block52 : {
        if (!($1 & $2)) {
         HEAP32[19916] = $1 | $2;
         $3 = $0;
         break block52;
        }
        $3 = HEAP32[$0 + 8 >> 2];
        if ($3 >>> 0 < HEAPU32[19920]) {
         break block46
        }
       }
       HEAP32[$0 + 8 >> 2] = $4;
       HEAP32[$3 + 12 >> 2] = $4;
       HEAP32[$4 + 12 >> 2] = $0;
       HEAP32[$4 + 8 >> 2] = $3;
       break block45;
      }
      $2 = 31;
      if ($3 >>> 0 <= 16777215) {
       $0 = Math_clz32($3 >>> 8 | 0);
       $2 = (($3 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
      }
      HEAP32[$4 + 28 >> 2] = $2;
      HEAP32[$4 + 16 >> 2] = 0;
      HEAP32[$4 + 20 >> 2] = 0;
      $0 = ($2 << 2) + 79968 | 0;
      block54 : {
       $1 = HEAP32[19917];
       $5 = 1 << $2;
       block53 : {
        if (!($1 & $5)) {
         HEAP32[19917] = $1 | $5;
         HEAP32[$0 >> 2] = $4;
         break block53;
        }
        $2 = $3 << (($2 | 0) != 31 ? 25 - ($2 >>> 1 | 0) | 0 : 0);
        $1 = HEAP32[$0 >> 2];
        while (1) {
         $0 = $1;
         if ((HEAP32[$0 + 4 >> 2] & -8) == ($3 | 0)) {
          break block54
         }
         $1 = $2 >>> 29 | 0;
         $2 = $2 << 1;
         $5 = ($1 & 4) + $0 | 0;
         $1 = HEAP32[$5 + 16 >> 2];
         if ($1) {
          continue
         }
         break;
        };
        if (HEAPU32[19920] > $5 + 16 >>> 0) {
         break block46
        }
        HEAP32[$5 + 16 >> 2] = $4;
       }
       HEAP32[$4 + 24 >> 2] = $0;
       HEAP32[$4 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $4;
       break block45;
      }
      $1 = HEAP32[19920];
      if ($1 >>> 0 > $0 >>> 0) {
       break block46
      }
      $2 = $1;
      $1 = HEAP32[$0 + 8 >> 2];
      if ($2 >>> 0 > $1 >>> 0) {
       break block46
      }
      HEAP32[$1 + 12 >> 2] = $4;
      HEAP32[$0 + 8 >> 2] = $4;
      HEAP32[$4 + 24 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = $0;
      HEAP32[$4 + 8 >> 2] = $1;
     }
     $0 = $9 + 8 | 0;
     break block55;
    }
    abort();
    wasm2js_trap();
   }
  }
  __stack_pointer = $11 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten_builtin_free($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  block1 : {
   block : {
    if (!$0) {
     break block
    }
    $3 = $0 - 8 | 0;
    $6 = HEAP32[19920];
    if ($3 >>> 0 < $6 >>> 0) {
     break block1
    }
    $1 = HEAP32[$0 - 4 >> 2];
    if (($1 & 3) == 1) {
     break block1
    }
    $0 = $1 & -8;
    $5 = $3 + $0 | 0;
    block2 : {
     if ($1 & 1) {
      break block2
     }
     if (!($1 & 2)) {
      break block
     }
     $4 = HEAP32[$3 >> 2];
     $3 = $3 - $4 | 0;
     if ($6 >>> 0 > $3 >>> 0) {
      break block1
     }
     $0 = $0 + $4 | 0;
     if (HEAP32[19921] != ($3 | 0)) {
      $2 = HEAP32[$3 + 12 >> 2];
      if ($4 >>> 0 <= 255) {
       $7 = HEAP32[$3 + 8 >> 2];
       $1 = ($4 & 248) + 79704 | 0;
       if (($7 | 0) != ($1 | 0) & (HEAP32[$7 + 12 >> 2] != ($3 | 0) | $6 >>> 0 > $7 >>> 0)) {
        break block1
       }
       if (($2 | 0) == ($7 | 0)) {
        (wasm2js_i32$0 = 79664, wasm2js_i32$1 = HEAP32[19916] & __wasm_rotl_i32($4 >>> 3 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block2;
       }
       if ((HEAP32[$2 + 8 >> 2] != ($3 | 0) | $2 >>> 0 < $6 >>> 0) & ($2 | 0) != ($1 | 0)) {
        break block1
       }
       HEAP32[$7 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $7;
       break block2;
      }
      $8 = HEAP32[$3 + 24 >> 2];
      block3 : {
       if (($2 | 0) != ($3 | 0)) {
        $1 = HEAP32[$3 + 8 >> 2];
        if ($1 >>> 0 < $6 >>> 0 | HEAP32[$1 + 12 >> 2] != ($3 | 0) | HEAP32[$2 + 8 >> 2] != ($3 | 0)) {
         break block1
        }
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break block3;
       }
       block4 : {
        $4 = HEAP32[$3 + 20 >> 2];
        if ($4) {
         $1 = $3 + 20 | 0
        } else {
         $4 = HEAP32[$3 + 16 >> 2];
         if (!$4) {
          break block4
         }
         $1 = $3 + 16 | 0;
        }
        while (1) {
         $7 = $1;
         $2 = $4;
         $1 = $2 + 20 | 0;
         $4 = HEAP32[$2 + 20 >> 2];
         if ($4) {
          continue
         }
         $1 = $2 + 16 | 0;
         $4 = HEAP32[$2 + 16 >> 2];
         if ($4) {
          continue
         }
         break;
        };
        if ($6 >>> 0 > $7 >>> 0) {
         break block1
        }
        HEAP32[$7 >> 2] = 0;
        break block3;
       }
       $2 = 0;
      }
      if (!$8) {
       break block2
      }
      $4 = HEAP32[$3 + 28 >> 2];
      $1 = $4 << 2;
      block5 : {
       if (HEAP32[$1 + 79968 >> 2] == ($3 | 0)) {
        HEAP32[$1 + 79968 >> 2] = $2;
        if ($2) {
         break block5
        }
        (wasm2js_i32$0 = 79668, wasm2js_i32$1 = HEAP32[19917] & __wasm_rotl_i32($4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block2;
       }
       if ($6 >>> 0 > $8 >>> 0) {
        break block1
       }
       block6 : {
        if (HEAP32[$8 + 16 >> 2] == ($3 | 0)) {
         HEAP32[$8 + 16 >> 2] = $2;
         break block6;
        }
        HEAP32[$8 + 20 >> 2] = $2;
       }
       if (!$2) {
        break block2
       }
      }
      if ($2 >>> 0 < $6 >>> 0) {
       break block1
      }
      HEAP32[$2 + 24 >> 2] = $8;
      $1 = HEAP32[$3 + 16 >> 2];
      if ($1) {
       if ($1 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$2 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$3 + 20 >> 2];
      if (!$1) {
       break block2
      }
      if ($1 >>> 0 < $6 >>> 0) {
       break block1
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
      break block2;
     }
     $1 = HEAP32[$5 + 4 >> 2];
     if (($1 & 3) != 3) {
      break block2
     }
     HEAP32[19918] = $0;
     HEAP32[$5 + 4 >> 2] = $1 & -2;
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$5 >> 2] = $0;
     return;
    }
    if ($3 >>> 0 >= $5 >>> 0) {
     break block1
    }
    $9 = HEAP32[$5 + 4 >> 2];
    if (!($9 & 1)) {
     break block1
    }
    block12 : {
     if (!($9 & 2)) {
      if (HEAP32[19922] == ($5 | 0)) {
       HEAP32[19922] = $3;
       $0 = HEAP32[19919] + $0 | 0;
       HEAP32[19919] = $0;
       HEAP32[$3 + 4 >> 2] = $0 | 1;
       if (HEAP32[19921] != ($3 | 0)) {
        break block
       }
       HEAP32[19918] = 0;
       HEAP32[19921] = 0;
       return;
      }
      $8 = HEAP32[19921];
      if (($8 | 0) == ($5 | 0)) {
       HEAP32[19921] = $3;
       $0 = HEAP32[19918] + $0 | 0;
       HEAP32[19918] = $0;
       HEAP32[$3 + 4 >> 2] = $0 | 1;
       HEAP32[$0 + $3 >> 2] = $0;
       return;
      }
      $2 = HEAP32[$5 + 12 >> 2];
      block7 : {
       if ($9 >>> 0 <= 255) {
        $4 = HEAP32[$5 + 8 >> 2];
        $1 = ($9 & 248) + 79704 | 0;
        if (($4 | 0) != ($1 | 0) & (HEAP32[$4 + 12 >> 2] != ($5 | 0) | $4 >>> 0 < $6 >>> 0)) {
         break block1
        }
        if (($2 | 0) == ($4 | 0)) {
         (wasm2js_i32$0 = 79664, wasm2js_i32$1 = HEAP32[19916] & __wasm_rotl_i32($9 >>> 3 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break block7;
        }
        if ((HEAP32[$2 + 8 >> 2] != ($5 | 0) | $2 >>> 0 < $6 >>> 0) & ($2 | 0) != ($1 | 0)) {
         break block1
        }
        HEAP32[$4 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $4;
        break block7;
       }
       $10 = HEAP32[$5 + 24 >> 2];
       block8 : {
        if (($2 | 0) != ($5 | 0)) {
         $1 = HEAP32[$5 + 8 >> 2];
         if ($1 >>> 0 < $6 >>> 0 | HEAP32[$1 + 12 >> 2] != ($5 | 0) | HEAP32[$2 + 8 >> 2] != ($5 | 0)) {
          break block1
         }
         HEAP32[$1 + 12 >> 2] = $2;
         HEAP32[$2 + 8 >> 2] = $1;
         break block8;
        }
        block9 : {
         $4 = HEAP32[$5 + 20 >> 2];
         if ($4) {
          $1 = $5 + 20 | 0
         } else {
          $4 = HEAP32[$5 + 16 >> 2];
          if (!$4) {
           break block9
          }
          $1 = $5 + 16 | 0;
         }
         while (1) {
          $7 = $1;
          $2 = $4;
          $1 = $2 + 20 | 0;
          $4 = HEAP32[$2 + 20 >> 2];
          if ($4) {
           continue
          }
          $1 = $2 + 16 | 0;
          $4 = HEAP32[$2 + 16 >> 2];
          if ($4) {
           continue
          }
          break;
         };
         if ($6 >>> 0 > $7 >>> 0) {
          break block1
         }
         HEAP32[$7 >> 2] = 0;
         break block8;
        }
        $2 = 0;
       }
       if (!$10) {
        break block7
       }
       $4 = HEAP32[$5 + 28 >> 2];
       $1 = $4 << 2;
       block10 : {
        if (HEAP32[$1 + 79968 >> 2] == ($5 | 0)) {
         HEAP32[$1 + 79968 >> 2] = $2;
         if ($2) {
          break block10
         }
         (wasm2js_i32$0 = 79668, wasm2js_i32$1 = HEAP32[19917] & __wasm_rotl_i32($4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break block7;
        }
        if ($6 >>> 0 > $10 >>> 0) {
         break block1
        }
        block11 : {
         if (HEAP32[$10 + 16 >> 2] == ($5 | 0)) {
          HEAP32[$10 + 16 >> 2] = $2;
          break block11;
         }
         HEAP32[$10 + 20 >> 2] = $2;
        }
        if (!$2) {
         break block7
        }
       }
       if ($2 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$2 + 24 >> 2] = $10;
       $1 = HEAP32[$5 + 16 >> 2];
       if ($1) {
        if ($1 >>> 0 < $6 >>> 0) {
         break block1
        }
        HEAP32[$2 + 16 >> 2] = $1;
        HEAP32[$1 + 24 >> 2] = $2;
       }
       $1 = HEAP32[$5 + 20 >> 2];
       if (!$1) {
        break block7
       }
       if ($1 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$2 + 20 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $2;
      }
      $0 = ($9 & -8) + $0 | 0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3 >> 2] = $0;
      if (($3 | 0) != ($8 | 0)) {
       break block12
      }
      HEAP32[19918] = $0;
      return;
     }
     HEAP32[$5 + 4 >> 2] = $9 & -2;
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
    }
    if ($0 >>> 0 <= 255) {
     $1 = ($0 & 248) + 79704 | 0;
     $4 = HEAP32[19916];
     $0 = 1 << ($0 >>> 3);
     block13 : {
      if (!($4 & $0)) {
       HEAP32[19916] = $0 | $4;
       $0 = $1;
       break block13;
      }
      $0 = HEAP32[$1 + 8 >> 2];
      if ($6 >>> 0 > $0 >>> 0) {
       break block1
      }
     }
     HEAP32[$1 + 8 >> 2] = $3;
     HEAP32[$0 + 12 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $1;
     HEAP32[$3 + 8 >> 2] = $0;
     return;
    }
    $2 = 31;
    if ($0 >>> 0 <= 16777215) {
     $1 = Math_clz32($0 >>> 8 | 0);
     $2 = (($0 >>> 38 - $1 & 1) - ($1 << 1) | 0) + 62 | 0;
    }
    HEAP32[$3 + 28 >> 2] = $2;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    $1 = ($2 << 2) + 79968 | 0;
    block16 : {
     block15 : {
      $7 = HEAP32[19917];
      $4 = 1 << $2;
      block14 : {
       if (!($7 & $4)) {
        HEAP32[19917] = $4 | $7;
        HEAP32[$1 >> 2] = $3;
        $2 = 24;
        break block14;
       }
       $2 = $0 << (($2 | 0) != 31 ? 25 - ($2 >>> 1 | 0) | 0 : 0);
       $1 = HEAP32[$1 >> 2];
       while (1) {
        $4 = $1;
        if ((HEAP32[$1 + 4 >> 2] & -8) == ($0 | 0)) {
         break block15
        }
        $1 = $2 >>> 29 | 0;
        $2 = $2 << 1;
        $7 = ($1 & 4) + $4 | 0;
        $1 = HEAP32[$7 + 16 >> 2];
        if ($1) {
         continue
        }
        break;
       };
       if ($7 + 16 >>> 0 < $6 >>> 0) {
        break block1
       }
       HEAP32[$7 + 16 >> 2] = $3;
       $1 = $4;
       $2 = 24;
      }
      $4 = $3;
      $7 = $3;
      $0 = 8;
      break block16;
     }
     if ($4 >>> 0 < $6 >>> 0) {
      break block1
     }
     $1 = HEAP32[$4 + 8 >> 2];
     if ($6 >>> 0 > $1 >>> 0) {
      break block1
     }
     HEAP32[$1 + 12 >> 2] = $3;
     HEAP32[$4 + 8 >> 2] = $3;
     $2 = 8;
     $7 = 0;
     $0 = 24;
    }
    HEAP32[$2 + $3 >> 2] = $1;
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$0 + $3 >> 2] = $7;
    $0 = HEAP32[19924] - 1 | 0;
    HEAP32[19924] = $0 ? $0 : -1;
   }
   return;
  }
  abort();
  wasm2js_trap();
 }
 
 function emscripten_builtin_realloc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if (!$0) {
   return emscripten_builtin_malloc($1)
  }
  if ($1 >>> 0 >= 4294967232) {
   HEAP32[19563] = 48;
   return 0;
  }
  $8 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
  block2 : {
   block1 : {
    block : {
     $4 = $0 - 8 | 0;
     $9 = HEAP32[19920];
     if ($4 >>> 0 < $9 >>> 0) {
      break block
     }
     $10 = HEAP32[$4 + 4 >> 2];
     $2 = $10 & 3;
     if (($2 | 0) == 1) {
      break block
     }
     $3 = $10 & -8;
     if (!$3) {
      break block
     }
     $7 = $3 + $4 | 0;
     $5 = HEAP32[$7 + 4 >> 2];
     if (!($5 & 1)) {
      break block
     }
     if (!$2) {
      $2 = 0;
      if ($8 >>> 0 < 256) {
       break block1
      }
      if ($3 >>> 0 >= $8 + 4 >>> 0) {
       $2 = $4;
       if ($3 - $8 >>> 0 <= HEAP32[20036] << 1 >>> 0) {
        break block1
       }
      }
      $2 = 0;
      break block1;
     }
     if ($3 >>> 0 >= $8 >>> 0) {
      $3 = $3 - $8 | 0;
      if ($3 >>> 0 >= 16) {
       HEAP32[$4 + 4 >> 2] = $10 & 1 | $8 | 2;
       $2 = $4 + $8 | 0;
       HEAP32[$2 + 4 >> 2] = $3 | 3;
       HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 1;
       dispose_chunk($2, $3);
      }
      break block2;
     }
     $2 = 0;
     if (HEAP32[19922] == ($7 | 0)) {
      $5 = $3 + HEAP32[19919] | 0;
      if ($5 >>> 0 <= $8 >>> 0) {
       break block1
      }
      HEAP32[$4 + 4 >> 2] = $10 & 1 | $8 | 2;
      $3 = $4 + $8 | 0;
      $2 = $5 - $8 | 0;
      HEAP32[$3 + 4 >> 2] = $2 | 1;
      HEAP32[19919] = $2;
      HEAP32[19922] = $3;
      break block2;
     }
     if (HEAP32[19921] == ($7 | 0)) {
      $5 = $3 + HEAP32[19918] | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       break block1
      }
      $2 = $5 - $8 | 0;
      block3 : {
       if ($2 >>> 0 >= 16) {
        HEAP32[$4 + 4 >> 2] = $10 & 1 | $8 | 2;
        $3 = $4 + $8 | 0;
        HEAP32[$3 + 4 >> 2] = $2 | 1;
        $5 = $4 + $5 | 0;
        HEAP32[$5 >> 2] = $2;
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -2;
        break block3;
       }
       HEAP32[$4 + 4 >> 2] = $5 | $10 & 1 | 2;
       $2 = $4 + $5 | 0;
       HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
       $2 = 0;
       $3 = 0;
      }
      HEAP32[19921] = $3;
      HEAP32[19918] = $2;
      break block2;
     }
     if ($5 & 2) {
      break block1
     }
     $12 = $3 + ($5 & -8) | 0;
     if ($12 >>> 0 < $8 >>> 0) {
      break block1
     }
     $6 = HEAP32[$7 + 12 >> 2];
     block4 : {
      if ($5 >>> 0 <= 255) {
       $3 = HEAP32[$7 + 8 >> 2];
       $2 = ($5 & 248) + 79704 | 0;
       if (($3 | 0) != ($2 | 0) & (HEAP32[$3 + 12 >> 2] != ($7 | 0) | $3 >>> 0 < $9 >>> 0)) {
        break block
       }
       if (($3 | 0) == ($6 | 0)) {
        (wasm2js_i32$0 = 79664, wasm2js_i32$1 = HEAP32[19916] & __wasm_rotl_i32($5 >>> 3 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block4;
       }
       if ((HEAP32[$6 + 8 >> 2] != ($7 | 0) | $6 >>> 0 < $9 >>> 0) & ($2 | 0) != ($6 | 0)) {
        break block
       }
       HEAP32[$3 + 12 >> 2] = $6;
       HEAP32[$6 + 8 >> 2] = $3;
       break block4;
      }
      $11 = HEAP32[$7 + 24 >> 2];
      block5 : {
       if (($6 | 0) != ($7 | 0)) {
        $2 = HEAP32[$7 + 8 >> 2];
        if ($2 >>> 0 < $9 >>> 0 | HEAP32[$2 + 12 >> 2] != ($7 | 0) | HEAP32[$6 + 8 >> 2] != ($7 | 0)) {
         break block
        }
        HEAP32[$2 + 12 >> 2] = $6;
        HEAP32[$6 + 8 >> 2] = $2;
        break block5;
       }
       block6 : {
        $2 = HEAP32[$7 + 20 >> 2];
        if ($2) {
         $3 = $7 + 20 | 0
        } else {
         $2 = HEAP32[$7 + 16 >> 2];
         if (!$2) {
          break block6
         }
         $3 = $7 + 16 | 0;
        }
        while (1) {
         $5 = $3;
         $6 = $2;
         $3 = $2 + 20 | 0;
         $2 = HEAP32[$2 + 20 >> 2];
         if ($2) {
          continue
         }
         $3 = $6 + 16 | 0;
         $2 = HEAP32[$6 + 16 >> 2];
         if ($2) {
          continue
         }
         break;
        };
        if ($5 >>> 0 < $9 >>> 0) {
         break block
        }
        HEAP32[$5 >> 2] = 0;
        break block5;
       }
       $6 = 0;
      }
      if (!$11) {
       break block4
      }
      $3 = HEAP32[$7 + 28 >> 2];
      $2 = $3 << 2;
      block7 : {
       if (HEAP32[$2 + 79968 >> 2] == ($7 | 0)) {
        HEAP32[$2 + 79968 >> 2] = $6;
        if ($6) {
         break block7
        }
        (wasm2js_i32$0 = 79668, wasm2js_i32$1 = HEAP32[19917] & __wasm_rotl_i32($3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block4;
       }
       if ($9 >>> 0 > $11 >>> 0) {
        break block
       }
       block8 : {
        if (HEAP32[$11 + 16 >> 2] == ($7 | 0)) {
         HEAP32[$11 + 16 >> 2] = $6;
         break block8;
        }
        HEAP32[$11 + 20 >> 2] = $6;
       }
       if (!$6) {
        break block4
       }
      }
      if ($6 >>> 0 < $9 >>> 0) {
       break block
      }
      HEAP32[$6 + 24 >> 2] = $11;
      $2 = HEAP32[$7 + 16 >> 2];
      if ($2) {
       if ($2 >>> 0 < $9 >>> 0) {
        break block
       }
       HEAP32[$6 + 16 >> 2] = $2;
       HEAP32[$2 + 24 >> 2] = $6;
      }
      $2 = HEAP32[$7 + 20 >> 2];
      if (!$2) {
       break block4
      }
      if ($2 >>> 0 < $9 >>> 0) {
       break block
      }
      HEAP32[$6 + 20 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $6;
     }
     $5 = $12 - $8 | 0;
     if ($5 >>> 0 <= 15) {
      HEAP32[$4 + 4 >> 2] = $10 & 1 | $12 | 2;
      $2 = $4 + $12 | 0;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
      break block2;
     }
     HEAP32[$4 + 4 >> 2] = $10 & 1 | $8 | 2;
     $3 = $4 + $8 | 0;
     HEAP32[$3 + 4 >> 2] = $5 | 3;
     $2 = $4 + $12 | 0;
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
     dispose_chunk($3, $5);
     break block2;
    }
    abort();
    wasm2js_trap();
   }
   $4 = $2;
  }
  if ($4) {
   return $4 + 8 | 0
  }
  $2 = emscripten_builtin_malloc($1);
  if (!$2) {
   return 0
  }
  $4 = HEAP32[$0 - 4 >> 2];
  $4 = ($4 & 3 ? -4 : -8) + ($4 & -8) | 0;
  __memcpy($2, $0, $1 >>> 0 > $4 >>> 0 ? $4 : $1);
  emscripten_builtin_free($0);
  return $2;
 }
 
 function dispose_chunk($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = $0 + $1 | 0;
  block2 : {
   block1 : {
    block : {
     $2 = HEAP32[$0 + 4 >> 2];
     if ($2 & 1) {
      $6 = HEAP32[19920];
      break block;
     }
     if (!($2 & 2)) {
      break block1
     }
     $4 = HEAP32[$0 >> 2];
     $0 = $0 - $4 | 0;
     $6 = HEAP32[19920];
     if ($0 >>> 0 < $6 >>> 0) {
      break block2
     }
     $1 = $1 + $4 | 0;
     if (HEAP32[19921] != ($0 | 0)) {
      $3 = HEAP32[$0 + 12 >> 2];
      if ($4 >>> 0 <= 255) {
       $2 = HEAP32[$0 + 8 >> 2];
       $7 = ($4 & 248) + 79704 | 0;
       if (($2 | 0) != ($7 | 0) & (HEAP32[$2 + 12 >> 2] != ($0 | 0) | $2 >>> 0 < $6 >>> 0)) {
        break block2
       }
       if (($2 | 0) == ($3 | 0)) {
        (wasm2js_i32$0 = 79664, wasm2js_i32$1 = HEAP32[19916] & __wasm_rotl_i32($4 >>> 3 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block;
       }
       if ((HEAP32[$3 + 8 >> 2] != ($0 | 0) | $3 >>> 0 < $6 >>> 0) & ($3 | 0) != ($7 | 0)) {
        break block2
       }
       HEAP32[$2 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2;
       break block;
      }
      $8 = HEAP32[$0 + 24 >> 2];
      block3 : {
       if (($0 | 0) != ($3 | 0)) {
        $2 = HEAP32[$0 + 8 >> 2];
        if ($2 >>> 0 < $6 >>> 0 | HEAP32[$2 + 12 >> 2] != ($0 | 0) | HEAP32[$3 + 8 >> 2] != ($0 | 0)) {
         break block2
        }
        HEAP32[$2 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $2;
        break block3;
       }
       block4 : {
        $4 = HEAP32[$0 + 20 >> 2];
        if ($4) {
         $2 = $0 + 20 | 0
        } else {
         $4 = HEAP32[$0 + 16 >> 2];
         if (!$4) {
          break block4
         }
         $2 = $0 + 16 | 0;
        }
        while (1) {
         $7 = $2;
         $3 = $4;
         $2 = $3 + 20 | 0;
         $4 = HEAP32[$3 + 20 >> 2];
         if ($4) {
          continue
         }
         $2 = $3 + 16 | 0;
         $4 = HEAP32[$3 + 16 >> 2];
         if ($4) {
          continue
         }
         break;
        };
        if ($6 >>> 0 > $7 >>> 0) {
         break block2
        }
        HEAP32[$7 >> 2] = 0;
        break block3;
       }
       $3 = 0;
      }
      if (!$8) {
       break block
      }
      $2 = HEAP32[$0 + 28 >> 2];
      $4 = $2 << 2;
      block5 : {
       if (HEAP32[$4 + 79968 >> 2] == ($0 | 0)) {
        HEAP32[$4 + 79968 >> 2] = $3;
        if ($3) {
         break block5
        }
        (wasm2js_i32$0 = 79668, wasm2js_i32$1 = HEAP32[19917] & __wasm_rotl_i32($2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break block;
       }
       if ($6 >>> 0 > $8 >>> 0) {
        break block2
       }
       block6 : {
        if (HEAP32[$8 + 16 >> 2] == ($0 | 0)) {
         HEAP32[$8 + 16 >> 2] = $3;
         break block6;
        }
        HEAP32[$8 + 20 >> 2] = $3;
       }
       if (!$3) {
        break block
       }
      }
      if ($3 >>> 0 < $6 >>> 0) {
       break block2
      }
      HEAP32[$3 + 24 >> 2] = $8;
      $2 = HEAP32[$0 + 16 >> 2];
      if ($2) {
       if ($2 >>> 0 < $6 >>> 0) {
        break block2
       }
       HEAP32[$3 + 16 >> 2] = $2;
       HEAP32[$2 + 24 >> 2] = $3;
      }
      $2 = HEAP32[$0 + 20 >> 2];
      if (!$2) {
       break block
      }
      if ($2 >>> 0 < $6 >>> 0) {
       break block2
      }
      HEAP32[$3 + 20 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $3;
      break block;
     }
     $2 = HEAP32[$5 + 4 >> 2];
     if (($2 & 3) != 3) {
      break block
     }
     HEAP32[19918] = $1;
     HEAP32[$5 + 4 >> 2] = $2 & -2;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$5 >> 2] = $1;
     return;
    }
    if ($5 >>> 0 < $6 >>> 0) {
     break block2
    }
    $9 = HEAP32[$5 + 4 >> 2];
    block12 : {
     if (!($9 & 2)) {
      if (HEAP32[19922] == ($5 | 0)) {
       HEAP32[19922] = $0;
       $1 = HEAP32[19919] + $1 | 0;
       HEAP32[19919] = $1;
       HEAP32[$0 + 4 >> 2] = $1 | 1;
       if (HEAP32[19921] != ($0 | 0)) {
        break block1
       }
       HEAP32[19918] = 0;
       HEAP32[19921] = 0;
       return;
      }
      $10 = HEAP32[19921];
      if (($10 | 0) == ($5 | 0)) {
       HEAP32[19921] = $0;
       $1 = HEAP32[19918] + $1 | 0;
       HEAP32[19918] = $1;
       HEAP32[$0 + 4 >> 2] = $1 | 1;
       HEAP32[$0 + $1 >> 2] = $1;
       return;
      }
      $3 = HEAP32[$5 + 12 >> 2];
      block7 : {
       if ($9 >>> 0 <= 255) {
        $2 = HEAP32[$5 + 8 >> 2];
        $4 = ($9 & 248) + 79704 | 0;
        if (($2 | 0) != ($4 | 0) & (HEAP32[$2 + 12 >> 2] != ($5 | 0) | $2 >>> 0 < $6 >>> 0)) {
         break block2
        }
        if (($2 | 0) == ($3 | 0)) {
         (wasm2js_i32$0 = 79664, wasm2js_i32$1 = HEAP32[19916] & __wasm_rotl_i32($9 >>> 3 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break block7;
        }
        if ((HEAP32[$3 + 8 >> 2] != ($5 | 0) | $3 >>> 0 < $6 >>> 0) & ($3 | 0) != ($4 | 0)) {
         break block2
        }
        HEAP32[$2 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $2;
        break block7;
       }
       $8 = HEAP32[$5 + 24 >> 2];
       block8 : {
        if (($3 | 0) != ($5 | 0)) {
         $2 = HEAP32[$5 + 8 >> 2];
         if ($2 >>> 0 < $6 >>> 0 | HEAP32[$2 + 12 >> 2] != ($5 | 0) | HEAP32[$3 + 8 >> 2] != ($5 | 0)) {
          break block2
         }
         HEAP32[$2 + 12 >> 2] = $3;
         HEAP32[$3 + 8 >> 2] = $2;
         break block8;
        }
        block9 : {
         $4 = HEAP32[$5 + 20 >> 2];
         if ($4) {
          $2 = $5 + 20 | 0
         } else {
          $4 = HEAP32[$5 + 16 >> 2];
          if (!$4) {
           break block9
          }
          $2 = $5 + 16 | 0;
         }
         while (1) {
          $7 = $2;
          $3 = $4;
          $2 = $3 + 20 | 0;
          $4 = HEAP32[$3 + 20 >> 2];
          if ($4) {
           continue
          }
          $2 = $3 + 16 | 0;
          $4 = HEAP32[$3 + 16 >> 2];
          if ($4) {
           continue
          }
          break;
         };
         if ($6 >>> 0 > $7 >>> 0) {
          break block2
         }
         HEAP32[$7 >> 2] = 0;
         break block8;
        }
        $3 = 0;
       }
       if (!$8) {
        break block7
       }
       $2 = HEAP32[$5 + 28 >> 2];
       $4 = $2 << 2;
       block10 : {
        if (HEAP32[$4 + 79968 >> 2] == ($5 | 0)) {
         HEAP32[$4 + 79968 >> 2] = $3;
         if ($3) {
          break block10
         }
         (wasm2js_i32$0 = 79668, wasm2js_i32$1 = HEAP32[19917] & __wasm_rotl_i32($2)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break block7;
        }
        if ($6 >>> 0 > $8 >>> 0) {
         break block2
        }
        block11 : {
         if (HEAP32[$8 + 16 >> 2] == ($5 | 0)) {
          HEAP32[$8 + 16 >> 2] = $3;
          break block11;
         }
         HEAP32[$8 + 20 >> 2] = $3;
        }
        if (!$3) {
         break block7
        }
       }
       if ($3 >>> 0 < $6 >>> 0) {
        break block2
       }
       HEAP32[$3 + 24 >> 2] = $8;
       $2 = HEAP32[$5 + 16 >> 2];
       if ($2) {
        if ($2 >>> 0 < $6 >>> 0) {
         break block2
        }
        HEAP32[$3 + 16 >> 2] = $2;
        HEAP32[$2 + 24 >> 2] = $3;
       }
       $2 = HEAP32[$5 + 20 >> 2];
       if (!$2) {
        break block7
       }
       if ($2 >>> 0 < $6 >>> 0) {
        break block2
       }
       HEAP32[$3 + 20 >> 2] = $2;
       HEAP32[$2 + 24 >> 2] = $3;
      }
      $1 = ($9 & -8) + $1 | 0;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + $1 >> 2] = $1;
      if (($0 | 0) != ($10 | 0)) {
       break block12
      }
      HEAP32[19918] = $1;
      return;
     }
     HEAP32[$5 + 4 >> 2] = $9 & -2;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
    }
    if ($1 >>> 0 <= 255) {
     $2 = ($1 & 248) + 79704 | 0;
     $3 = HEAP32[19916];
     $1 = 1 << ($1 >>> 3);
     block13 : {
      if (!($3 & $1)) {
       HEAP32[19916] = $1 | $3;
       $1 = $2;
       break block13;
      }
      $1 = HEAP32[$2 + 8 >> 2];
      if ($6 >>> 0 > $1 >>> 0) {
       break block2
      }
     }
     HEAP32[$2 + 8 >> 2] = $0;
     HEAP32[$1 + 12 >> 2] = $0;
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP32[$0 + 8 >> 2] = $1;
     return;
    }
    $3 = 31;
    if ($1 >>> 0 <= 16777215) {
     $2 = Math_clz32($1 >>> 8 | 0);
     $3 = (($1 >>> 38 - $2 & 1) - ($2 << 1) | 0) + 62 | 0;
    }
    HEAP32[$0 + 28 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    $2 = ($3 << 2) + 79968 | 0;
    block15 : {
     $4 = HEAP32[19917];
     $7 = 1 << $3;
     block14 : {
      if (!($4 & $7)) {
       HEAP32[19917] = $4 | $7;
       HEAP32[$2 >> 2] = $0;
       HEAP32[$0 + 24 >> 2] = $2;
       break block14;
      }
      $3 = $1 << (($3 | 0) != 31 ? 25 - ($3 >>> 1 | 0) | 0 : 0);
      $2 = HEAP32[$2 >> 2];
      while (1) {
       $4 = $2;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
        break block15
       }
       $2 = $3 >>> 29 | 0;
       $3 = $3 << 1;
       $7 = $4 + ($2 & 4) | 0;
       $2 = HEAP32[$7 + 16 >> 2];
       if ($2) {
        continue
       }
       break;
      };
      if ($7 + 16 >>> 0 < $6 >>> 0) {
       break block2
      }
      HEAP32[$7 + 16 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $4;
     }
     HEAP32[$0 + 12 >> 2] = $0;
     HEAP32[$0 + 8 >> 2] = $0;
     return;
    }
    if ($4 >>> 0 < $6 >>> 0) {
     break block2
    }
    $1 = HEAP32[$4 + 8 >> 2];
    if ($1 >>> 0 < $6 >>> 0) {
     break block2
    }
    HEAP32[$1 + 12 >> 2] = $0;
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = $4;
    HEAP32[$0 + 8 >> 2] = $1;
   }
   return;
  }
  abort();
  wasm2js_trap();
 }
 
 function emscripten_builtin_calloc($0) {
  var $1 = 0;
  $1 = emscripten_builtin_malloc($0);
  if (!(!$1 | !(HEAPU8[$1 - 4 | 0] & 3))) {
   __memset($1, 0, $0)
  }
  return $1;
 }
 
 function sbrk($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = HEAP32[18697];
  $0 = $0 + 7 | 0;
  $1 = $0 >>> 0 < 7 ? 1 : $1;
  $3 = $0 & -8;
  $0 = $3 + $2 | 0;
  block : {
   if (!($0 >>> 0 < $3 >>> 0 ? $1 + 1 | 0 : $1)) {
    if ($0 >>> 0 <= __wasm_memory_size() << 16 >>> 0) {
     break block
    }
    if (emscripten_resize_heap($0 | 0) | 0) {
     break block
    }
   }
   HEAP32[19563] = 48;
   return -1;
  }
  HEAP32[18697] = $0;
  return $2;
 }
 
 function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $10 = __stack_pointer - 112 | 0;
  __stack_pointer = $10;
  $9 = $8 & 2147483647;
  block1 : {
   block : {
    $13 = $4 & 2147483647;
    $11 = 2147418112;
    $12 = !($1 | $2);
    if (!($3 | $13 ? $13 - $11 >>> 0 < 2147549184 : $12)) {
     $17 = $9 - $11 | 0;
     if (!$7 & ($17 | 0) == -2147418112 ? $5 | $6 : ($17 | 0) == -2147418112 & ($7 | 0) != 0 | $17 >>> 0 > 2147549184) {
      break block
     }
    }
    if (!(!$3 & ($13 | 0) == 2147418112 ? $12 : $13 >>> 0 < 2147418112)) {
     $7 = $3;
     $8 = $4 | 32768;
     $5 = $1;
     $6 = $2;
     break block1;
    }
    if (!(!$7 & ($9 | 0) == 2147418112 ? !($5 | $6) : $9 >>> 0 < 2147418112)) {
     $8 = $8 | 32768;
     break block1;
    }
    if (!($1 | $3 | ($13 ^ 2147418112 | $2))) {
     $11 = $3;
     $3 = !($1 ^ $5 | $3 ^ $7 | ($2 ^ $6 | $4 ^ $8 ^ -2147483648));
     $7 = $3 ? 0 : $11;
     $8 = $3 ? 2147450880 : $4;
     $5 = $3 ? 0 : $1;
     $6 = $3 ? 0 : $2;
     break block1;
    }
    $11 = $5 | $7;
    if (!($11 | ($9 ^ 2147418112 | $6))) {
     break block1
    }
    if (!($1 | $3 | ($2 | $13))) {
     if ($6 | $9 | $11) {
      break block1
     }
     $5 = $1 & $5;
     $6 = $2 & $6;
     $7 = $3 & $7;
     $8 = $4 & $8;
     break block1;
    }
    if ($5 | $7 | ($6 | $9)) {
     break block
    }
    $5 = $1;
    $6 = $2;
    $7 = $3;
    $8 = $4;
    break block1;
   }
   $11 = ($9 | 0) == ($13 | 0);
   $15 = $11 & ($3 | 0) == ($7 | 0) ? ($2 | 0) == ($6 | 0) & $1 >>> 0 < $5 >>> 0 | $2 >>> 0 < $6 >>> 0 : $11 & $3 >>> 0 < $7 >>> 0 | $9 >>> 0 > $13 >>> 0;
   $12 = $15;
   $13 = $12 ? $5 : $1;
   $17 = $12 ? $6 : $2;
   $11 = $12 ? $8 : $4;
   $18 = $11;
   $12 = $12 ? $7 : $3;
   $16 = $11 & 65535;
   $9 = $15 ? $3 : $7;
   $11 = $15 ? $4 : $8;
   $7 = $11;
   $11 = $7 >>> 16 & 32767;
   $14 = $18 >>> 16 & 32767;
   if (!$14) {
    $14 = !($12 | $16);
    $3 = Math_clz32($14 ? $17 : $16);
    $14 = (($3 | 0) == 32 ? Math_clz32($14 ? $13 : $12) + 32 | 0 : $3) + ($14 ? 64 : 0) | 0;
    __ashlti3($10 + 96 | 0, $13, $17, $12, $16, $14 - 15 | 0);
    $12 = HEAP32[$10 + 104 >> 2];
    $16 = HEAP32[$10 + 108 >> 2];
    $17 = HEAP32[$10 + 100 >> 2];
    $14 = 16 - $14 | 0;
    $13 = HEAP32[$10 + 96 >> 2];
   }
   $5 = $15 ? $1 : $5;
   $6 = $15 ? $2 : $6;
   $1 = $9;
   $2 = $7 & 65535;
   if (!$11) {
    $9 = !($1 | $2);
    $15 = Math_clz32($9 ? $6 : $2);
    $9 = (($15 | 0) == 32 ? Math_clz32($9 ? $5 : $1) + 32 | 0 : $15) + ($9 ? 64 : 0) | 0;
    __ashlti3($10 + 80 | 0, $5, $6, $1, $2, $9 - 15 | 0);
    $11 = 16 - $9 | 0;
    $5 = HEAP32[$10 + 80 >> 2];
    $6 = HEAP32[$10 + 84 >> 2];
    $1 = HEAP32[$10 + 88 >> 2];
    $2 = HEAP32[$10 + 92 >> 2];
   }
   $3 = $2 << 3;
   $2 = $1;
   $1 = $3 | $1 >>> 29;
   $9 = $2 << 3;
   $2 = $1;
   $1 = $6 >>> 29 | $9;
   $2 = $2 | 524288;
   $9 = $16 << 3 | $12 >>> 29;
   $16 = $12 << 3 | $17 >>> 29;
   $15 = $9;
   $7 = $4 ^ $8;
   $9 = $6 << 3 | $5 >>> 29;
   $3 = $5 << 3;
   block2 : {
    if (($11 | 0) == ($14 | 0)) {
     break block2
    }
    $4 = $14 - $11 | 0;
    if ($4 >>> 0 > 127) {
     $1 = 0;
     $2 = 0;
     $9 = 0;
     $3 = 1;
     break block2;
    }
    __ashlti3($10 - -64 | 0, $3, $9, $1, $2, 128 - $4 | 0);
    __lshrti3($10 + 48 | 0, $3, $9, $1, $2, $4);
    $1 = HEAP32[$10 + 56 >> 2];
    $2 = HEAP32[$10 + 60 >> 2];
    $9 = HEAP32[$10 + 52 >> 2];
    $3 = HEAP32[$10 + 48 >> 2] | (HEAP32[$10 + 64 >> 2] | HEAP32[$10 + 72 >> 2] | (HEAP32[$10 + 68 >> 2] | HEAP32[$10 + 76 >> 2])) != 0;
   }
   $12 = $3;
   $11 = $9;
   $15 = $15 | 524288;
   $9 = $17 << 3 | $13 >>> 29;
   $13 = $13 << 3;
   block3 : {
    if (($7 | 0) < 0) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     if (!($13 ^ $12 | $1 ^ $16 | ($9 ^ $11 | $2 ^ $15))) {
      break block1
     }
     $3 = $13 - $12 | 0;
     $4 = $9 - (($13 >>> 0 < $12 >>> 0) + $11 | 0) | 0;
     $5 = $16 - $1 | 0;
     $6 = ($9 | 0) == ($11 | 0) & $13 >>> 0 < $12 >>> 0 | $9 >>> 0 < $11 >>> 0;
     $7 = $5 - $6 | 0;
     $1 = ($15 - (($1 >>> 0 > $16 >>> 0) + $2 | 0) | 0) - ($5 >>> 0 < $6 >>> 0) | 0;
     $8 = $1;
     if ($1 >>> 0 > 524287) {
      break block3
     }
     $2 = !($1 | $7);
     $6 = Math_clz32($2 ? $4 : $1);
     $2 = (($6 | 0) == 32 ? Math_clz32($2 ? $3 : $7) + 32 | 0 : $6) + ($2 ? 64 : 0) | 0;
     $1 = $2 - 12 | 0;
     __ashlti3($10 + 32 | 0, $3, $4, $7, $8, $1);
     $14 = $14 - $1 | 0;
     $7 = HEAP32[$10 + 40 >> 2];
     $8 = HEAP32[$10 + 44 >> 2];
     $3 = HEAP32[$10 + 32 >> 2];
     $4 = HEAP32[$10 + 36 >> 2];
     break block3;
    }
    $4 = $9 + $11 | 0;
    $3 = $13 + $12 | 0;
    $4 = $3 >>> 0 < $13 >>> 0 ? $4 + 1 | 0 : $4;
    $5 = ($11 | 0) == ($4 | 0) & $3 >>> 0 < $12 >>> 0 | $4 >>> 0 < $11 >>> 0;
    $9 = $2 + $15 | 0;
    $1 = $1 + $16 | 0;
    $9 = $1 >>> 0 < $16 >>> 0 ? $9 + 1 | 0 : $9;
    $7 = $1 + $5 | 0;
    $8 = $7 >>> 0 < $1 >>> 0 ? $9 + 1 | 0 : $9;
    if (!($8 & 1048576)) {
     break block3
    }
    $3 = $12 & 1 | (($4 & 1) << 31 | $3 >>> 1);
    $4 = $7 << 31 | $4 >>> 1;
    $14 = $14 + 1 | 0;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | 0;
   }
   $5 = 0;
   $1 = $18 & -2147483648;
   $6 = $1;
   if (($14 | 0) >= 32767) {
    $7 = $5;
    $8 = $1 | 2147418112;
    $6 = 0;
    break block1;
   }
   $11 = 0;
   block4 : {
    if (($14 | 0) > 0) {
     $11 = $14;
     break block4;
    }
    __ashlti3($10 + 16 | 0, $3, $4, $7, $8, $14 + 127 | 0);
    __lshrti3($10, $3, $4, $7, $8, 1 - $14 | 0);
    $3 = HEAP32[$10 >> 2] | (HEAP32[$10 + 16 >> 2] | HEAP32[$10 + 24 >> 2] | (HEAP32[$10 + 20 >> 2] | HEAP32[$10 + 28 >> 2])) != 0;
    $4 = HEAP32[$10 + 4 >> 2];
    $7 = HEAP32[$10 + 8 >> 2];
    $8 = HEAP32[$10 + 12 >> 2];
   }
   $2 = ($4 & 7) << 29 | $3 >>> 3;
   $4 = $7 << 29 | $4 >>> 3;
   $5 = $5 | (($8 & 7) << 29 | $7 >>> 3);
   $1 = $6 | ($8 >>> 3 & 65535 | $11 << 16);
   block6 : {
    block5 : {
     $9 = $3 & 7;
     if (($9 | 0) != 4) {
      $7 = $5;
      $3 = $4;
      $5 = $9 >>> 0 > 4;
      $4 = $5;
      $5 = $2 + $5 | 0;
      $6 = $4 >>> 0 > $5 >>> 0 ? $3 + 1 | 0 : $3;
      $2 = ($3 | 0) == ($6 | 0) & $2 >>> 0 > $5 >>> 0 | $3 >>> 0 > $6 >>> 0;
      $7 = $2 + $7 | 0;
      $8 = $2 >>> 0 > $7 >>> 0 ? $1 + 1 | 0 : $1;
      break block5;
     }
     $7 = $5;
     $3 = $1;
     $1 = $4;
     $5 = $2 & 1;
     $4 = $5;
     $5 = $2 + $5 | 0;
     $6 = $4 >>> 0 > $5 >>> 0 ? $1 + 1 | 0 : $1;
     $1 = ($6 | 0) == ($1 | 0) & $2 >>> 0 > $5 >>> 0 | $1 >>> 0 > $6 >>> 0;
     $7 = $1 + $7 | 0;
     $8 = $7 >>> 0 < $1 >>> 0 ? $3 + 1 | 0 : $3;
     break block6;
    }
    if (!$9) {
     break block1
    }
   }
  }
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8;
  __stack_pointer = $10 + 112 | 0;
 }
 
 function __ashlti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  block : {
   if ($5 & 64) {
    $4 = $5 + -64 | 0;
    $5 = $1;
    $3 = $4 & 31;
    if (($4 & 63) >>> 0 >= 32) {
     $4 = $5 << $3;
     $3 = 0;
    } else {
     $4 = (1 << $3) - 1 & $5 >>> 32 - $3 | $2 << $3;
     $3 = $5 << $3;
    }
    $1 = 0;
    $2 = 0;
    break block;
   }
   if (!$5) {
    break block
   }
   $7 = $3;
   $6 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $8 = $3 << $6;
    $7 = 0;
   } else {
    $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $4 << $6;
    $7 = $7 << $6;
   }
   $6 = $1;
   $4 = 64 - $5 | 0;
   $3 = $4 & 31;
   if (($4 & 63) >>> 0 >= 32) {
    $4 = 0;
    $3 = $2 >>> $3 | 0;
   } else {
    $4 = $2 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $2) << 32 - $3 | $6 >>> $3;
   }
   $3 = $7 | $3;
   $4 = $4 | $8;
   $7 = $1;
   $6 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $8 = $1 << $6;
    $1 = 0;
   } else {
    $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $2 << $6;
    $1 = $7 << $6;
   }
   $2 = $8;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
 }
 
 function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $10 = 1;
  $8 = $3 & 2147483647;
  $9 = $8;
  $11 = ($8 | 0) == 2147418112;
  block : {
   if ($11 & !$2 ? $0 | $1 : $11 & ($2 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break block
   }
   $8 = $7 & 2147483647;
   if (!$6 & ($8 | 0) == 2147418112 ? $4 | $5 : ($8 | 0) == 2147418112 & ($6 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break block
   }
   if (!($0 | $4 | ($2 | $6) | ($1 | $5 | ($8 | $9)))) {
    return 0
   }
   $8 = $3 & $7;
   if (($8 | 0) > 0) {
    $9 = 1
   } else {
    $9 = ($8 | 0) >= 0
   }
   if ($9) {
    if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 < $4 >>> 0 | $1 >>> 0 < $5 >>> 0 : $2 >>> 0 < $6 >>> 0 & ($3 | 0) <= ($7 | 0) | ($3 | 0) < ($7 | 0)) {
     return -1
    }
    return ($0 ^ $4 | $2 ^ $6 | ($1 ^ $5 | $3 ^ $7)) != 0;
   }
   if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 > $4 >>> 0 | $1 >>> 0 > $5 >>> 0 : $2 >>> 0 > $6 >>> 0 & ($3 | 0) >= ($7 | 0) | ($3 | 0) > ($7 | 0)) {
    return -1
   }
   $10 = ($0 ^ $4 | $2 ^ $6 | ($1 ^ $5 | $3 ^ $7)) != 0;
  }
  return $10;
 }
 
 function __getf2($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $7 = -1;
  $6 = $3 & 2147483647;
  $5 = ($6 | 0) == 2147418112;
  block : {
   if ($5 & !$2 ? $0 | $1 : $5 & ($2 | 0) != 0 | $6 >>> 0 > 2147418112) {
    break block
   }
   $5 = $4 & 2147483647;
   if ($5 >>> 0 > 2147418112 & ($5 | 0) != 2147418112) {
    break block
   }
   if (!($0 | $2 | ($5 | $6 | $1))) {
    return 0
   }
   $5 = $3 & $4;
   if (($5 | 0) > 0) {
    $5 = 1
   } else {
    $5 = ($5 | 0) >= 0
   }
   if ($5) {
    if ((($2 | 0) != 0 | ($3 | 0) != ($4 | 0)) & ($3 | 0) < ($4 | 0)) {
     break block
    }
    return ($0 | $2 | ($3 ^ $4 | $1)) != 0;
   }
   if (!$2 & ($3 | 0) == ($4 | 0) ? $0 | $1 : ($2 | 0) != 0 & ($3 | 0) >= ($4 | 0) | ($3 | 0) > ($4 | 0)) {
    break block
   }
   $7 = ($0 | $2 | ($3 ^ $4 | $1)) != 0;
  }
  return $7;
 }
 
 function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
  $10 = __stack_pointer - 336 | 0;
  __stack_pointer = $10;
  $9 = $7;
  $13 = $8 & 65535;
  $15 = $4 & 65535;
  $14 = $3;
  $19 = ($4 ^ $8) & -2147483648;
  $16 = $8 >>> 16 & 32767;
  $17 = $4 >>> 16 & 32767;
  block1 : {
   block : {
    if ($16 - 32767 >>> 0 > 4294934529 & $17 - 32767 >>> 0 >= 4294934530) {
     break block
    }
    $11 = $4 & 2147483647;
    if (!(!$3 & ($11 | 0) == 2147418112 ? !($1 | $2) : $11 >>> 0 < 2147418112)) {
     $21 = $3;
     $19 = $4 | 32768;
     break block1;
    }
    $4 = $8 & 2147483647;
    if (!(!$7 & ($4 | 0) == 2147418112 ? !($5 | $6) : $4 >>> 0 < 2147418112)) {
     $21 = $7;
     $19 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break block1;
    }
    if (!($1 | $3 | ($11 ^ 2147418112 | $2))) {
     if (!($5 | $7 | ($4 ^ 2147418112 | $6))) {
      $1 = 0;
      $2 = 0;
      $19 = 2147450880;
      break block1;
     }
     $19 = $19 | 2147418112;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($5 | $7 | ($4 ^ 2147418112 | $6))) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($1 | $3 | ($2 | $11))) {
     $1 = !($5 | $7 | ($4 | $6));
     $21 = $1 ? 0 : $21;
     $19 = $1 ? 2147450880 : $19;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($5 | $7 | ($4 | $6))) {
     $19 = $19 | 2147418112;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (($11 | 0) == 65535 | $11 >>> 0 < 65535) {
     $3 = !($14 | $15);
     $8 = Math_clz32($3 ? $2 : $15);
     $3 = (($8 | 0) == 32 ? Math_clz32($3 ? $1 : $14) + 32 | 0 : $8) + ($3 ? 64 : 0) | 0;
     __ashlti3($10 + 320 | 0, $1, $2, $14, $15, $3 - 15 | 0);
     $22 = 16 - $3 | 0;
     $14 = HEAP32[$10 + 328 >> 2];
     $15 = HEAP32[$10 + 332 >> 2];
     $2 = HEAP32[$10 + 324 >> 2];
     $1 = HEAP32[$10 + 320 >> 2];
    }
    if ($4 >>> 0 > 65535) {
     break block
    }
    $3 = !($9 | $13);
    $7 = Math_clz32($3 ? $6 : $13);
    $3 = (($7 | 0) == 32 ? Math_clz32($3 ? $5 : $9) + 32 | 0 : $7) + ($3 ? 64 : 0) | 0;
    __ashlti3($10 + 304 | 0, $5, $6, $9, $13, $3 - 15 | 0);
    $22 = ($3 + $22 | 0) - 16 | 0;
    $9 = HEAP32[$10 + 312 >> 2];
    $13 = HEAP32[$10 + 316 >> 2];
    $5 = HEAP32[$10 + 304 >> 2];
    $6 = HEAP32[$10 + 308 >> 2];
   }
   $3 = $13 | 65536;
   $27 = $3;
   $28 = $9;
   $4 = $9;
   $3 = $3 << 15 | $4 >>> 17;
   $7 = $4 << 15 | $6 >>> 17;
   $9 = 0 - $7 | 0;
   $8 = $3;
   $4 = $3;
   $3 = 1963258675 - ($3 + (($7 | 0) != 0) | 0) | 0;
   __multi3($10 + 288 | 0, $7, $4, 0, 0, $9, $3, 0, 0);
   $4 = HEAP32[$10 + 296 >> 2];
   __multi3($10 + 272 | 0, 0 - $4 | 0, 0 - (HEAP32[$10 + 300 >> 2] + (($4 | 0) != 0) | 0) | 0, 0, 0, $9, $3, 0, 0);
   $4 = HEAP32[$10 + 280 >> 2];
   $9 = $4 << 1 | HEAP32[$10 + 276 >> 2] >>> 31;
   $3 = HEAP32[$10 + 284 >> 2] << 1 | $4 >>> 31;
   __multi3($10 + 256 | 0, $9, $3, 0, 0, $7, $8, 0, 0);
   $4 = HEAP32[$10 + 264 >> 2];
   __multi3($10 + 240 | 0, $9, $3, 0, 0, 0 - $4 | 0, 0 - (HEAP32[$10 + 268 >> 2] + (($4 | 0) != 0) | 0) | 0, 0, 0);
   $3 = HEAP32[$10 + 248 >> 2];
   $9 = $3 << 1 | HEAP32[$10 + 244 >> 2] >>> 31;
   $3 = HEAP32[$10 + 252 >> 2] << 1 | $3 >>> 31;
   __multi3($10 + 224 | 0, $9, $3, 0, 0, $7, $8, 0, 0);
   $4 = HEAP32[$10 + 232 >> 2];
   __multi3($10 + 208 | 0, $9, $3, 0, 0, 0 - $4 | 0, 0 - (HEAP32[$10 + 236 >> 2] + (($4 | 0) != 0) | 0) | 0, 0, 0);
   $4 = HEAP32[$10 + 216 >> 2];
   $9 = $4 << 1 | HEAP32[$10 + 212 >> 2] >>> 31;
   $3 = HEAP32[$10 + 220 >> 2] << 1 | $4 >>> 31;
   __multi3($10 + 192 | 0, $9, $3, 0, 0, $7, $8, 0, 0);
   $4 = HEAP32[$10 + 200 >> 2];
   __multi3($10 + 176 | 0, $9, $3, 0, 0, 0 - $4 | 0, 0 - (HEAP32[$10 + 204 >> 2] + (($4 | 0) != 0) | 0) | 0, 0, 0);
   $3 = HEAP32[$10 + 184 >> 2];
   $4 = $7;
   $9 = $8;
   $11 = $3 << 1 | HEAP32[$10 + 180 >> 2] >>> 31;
   $7 = $11 - 1 | 0;
   $8 = (HEAP32[$10 + 188 >> 2] << 1 | $3 >>> 31) - !$11 | 0;
   __multi3($10 + 160 | 0, $4, $9, 0, 0, $7, $8, 0, 0);
   __multi3($10 + 144 | 0, $5 << 15, $6 << 15 | $5 >>> 17, 0, 0, $7, $8, 0, 0);
   $20 = $10 + 112 | 0;
   $29 = HEAP32[$10 + 168 >> 2];
   $4 = HEAP32[$10 + 172 >> 2];
   $11 = HEAP32[$10 + 160 >> 2];
   $9 = HEAP32[$10 + 152 >> 2];
   $13 = $11 + $9 | 0;
   $12 = HEAP32[$10 + 164 >> 2];
   $3 = $12 + HEAP32[$10 + 156 >> 2] | 0;
   $3 = $9 >>> 0 > $13 >>> 0 ? $3 + 1 | 0 : $3;
   $9 = $3;
   $3 = ($12 | 0) == ($3 | 0) & $11 >>> 0 > $13 >>> 0 | $3 >>> 0 < $12 >>> 0;
   $12 = $3 + $29 | 0;
   $3 = $3 >>> 0 > $12 >>> 0 ? $4 + 1 | 0 : $4;
   $11 = !$9 & $13 >>> 0 > 1 | ($9 | 0) != 0;
   $4 = $11 + $12 | 0;
   $3 = $11 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   __multi3($20, $7, $8, 0, 0, 0 - $4 | 0, 0 - ((($4 | 0) != 0) + $3 | 0) | 0, 0, 0);
   __multi3($10 + 128 | 0, 1 - $13 | 0, 0 - (($13 >>> 0 > 1) + $9 | 0) | 0, 0, 0, $7, $8, 0, 0);
   $35 = ($17 - $16 | 0) + $22 | 0;
   $22 = $35 + 16383 | 0;
   $7 = HEAP32[$10 + 116 >> 2];
   $25 = $7;
   $4 = HEAP32[$10 + 112 >> 2];
   $3 = $7 << 1 | $4 >>> 31;
   $11 = $4 << 1;
   $18 = $3;
   $4 = $3;
   $8 = HEAP32[$10 + 140 >> 2];
   $20 = $8;
   $7 = HEAP32[$10 + 136 >> 2];
   $3 = $8 << 1 | $7 >>> 31;
   $8 = $7 << 1 | HEAP32[$10 + 132 >> 2] >>> 31;
   $9 = $8 + $11 | 0;
   $4 = $3 + $4 | 0;
   $4 = $8 >>> 0 > $9 >>> 0 ? $4 + 1 | 0 : $4;
   $7 = $4;
   $3 = $4 - ($9 >>> 0 < 13927) | 0;
   $17 = $3;
   $8 = 0;
   $3 = $15 | 65536;
   $36 = $3;
   $37 = $14;
   $4 = $14;
   $3 = $3 << 1 | $4 >>> 31;
   $39 = $4 << 1;
   $40 = $3;
   $30 = $3;
   $3 = __wasm_i64_mul($17, $8, $3, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $23 = $3;
   $24 = $4;
   $33 = $1 << 1;
   $4 = $2 << 1 | $1 >>> 31;
   $16 = $4;
   $3 = 0;
   $29 = $3;
   $12 = $3;
   $13 = $9 - 13927 | 0;
   $26 = ($7 | 0) == ($17 | 0) & $13 >>> 0 < $9 >>> 0 | $7 >>> 0 > $17 >>> 0;
   $9 = ($7 | 0) == ($18 | 0) & $9 >>> 0 < $11 >>> 0 | $7 >>> 0 < $18 >>> 0;
   $3 = HEAP32[$10 + 120 >> 2];
   $4 = HEAP32[$10 + 124 >> 2] << 1 | $3 >>> 31;
   $11 = $20 >>> 31 | 0;
   $7 = $11 + ($3 << 1 | $25 >>> 31) | 0;
   $3 = $4;
   $3 = $7 >>> 0 < $11 >>> 0 ? $3 + 1 | 0 : $3;
   $4 = $7 + $9 | 0;
   $3 = $4 >>> 0 < $7 >>> 0 ? $3 + 1 | 0 : $3;
   $7 = $4;
   $4 = $4 + $26 | 0;
   $8 = $7 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $7 = $4 - 1 | 0;
   $26 = $8 - !$4 | 0;
   $18 = 0;
   $8 = __wasm_i64_mul($16, $12, $26, $18);
   $3 = $8 + $23 | 0;
   $4 = i64toi32_i32$HIGH_BITS + $24 | 0;
   $4 = $3 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
   $20 = ($24 | 0) == ($4 | 0) & $3 >>> 0 < $23 >>> 0 | $4 >>> 0 < $24 >>> 0;
   $11 = $3;
   $9 = $3;
   $8 = $4;
   $3 = 0;
   $25 = $7;
   $38 = $2 >>> 31 | 0;
   $23 = $38 | $14 << 1;
   $24 = 0;
   $7 = __wasm_i64_mul($7, $3, $23, $24);
   $4 = $7 + $9 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $15 = $4;
   $3 = $4 >>> 0 < $7 >>> 0 ? $3 + 1 | 0 : $3;
   $9 = $3;
   $3 = ($3 | 0) == ($8 | 0) & $4 >>> 0 < $11 >>> 0 | $3 >>> 0 < $8 >>> 0;
   $8 = 0;
   $4 = $3;
   $3 = $3 + $20 | 0;
   $8 = $4 >>> 0 > $3 >>> 0 ? 1 : $8;
   $7 = __wasm_i64_mul($30, $12, $26, $18);
   $4 = $7 + $3 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $20 = $4;
   $14 = $4 >>> 0 < $7 >>> 0 ? $3 + 1 | 0 : $3;
   $3 = __wasm_i64_mul($30, $12, $25, $24);
   $11 = i64toi32_i32$HIGH_BITS;
   $4 = $3;
   $7 = __wasm_i64_mul($23, $24, $26, $18);
   $8 = $3 + $7 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $3 = $7 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
   $7 = $3;
   $3 = ($11 | 0) == ($3 | 0) & $4 >>> 0 > $8 >>> 0 | $3 >>> 0 < $11 >>> 0;
   $11 = $20 + $7 | 0;
   $4 = $3 + $14 | 0;
   $14 = $11 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
   $4 = $8;
   $7 = 0;
   $8 = $7 + $15 | 0;
   $3 = $4 + $9 | 0;
   $4 = $8;
   $3 = $4 >>> 0 < $7 >>> 0 ? $3 + 1 | 0 : $3;
   $7 = $3;
   $8 = ($9 | 0) == ($3 | 0) & $4 >>> 0 < $15 >>> 0 | $3 >>> 0 < $9 >>> 0;
   $3 = $14;
   $9 = $8;
   $8 = $8 + $11 | 0;
   $3 = $9 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
   $11 = $8;
   $8 = $3;
   $15 = $4;
   $20 = $13;
   $3 = __wasm_i64_mul($13, 0, $23, $24);
   $14 = i64toi32_i32$HIGH_BITS;
   $9 = $3;
   $13 = __wasm_i64_mul($17, $12, $16, $12);
   $4 = $3 + $13 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $14 | 0;
   $3 = $4 >>> 0 < $13 >>> 0 ? $3 + 1 | 0 : $3;
   $31 = ($14 | 0) == ($3 | 0) & $4 >>> 0 < $9 >>> 0 | $3 >>> 0 < $14 >>> 0;
   $9 = $3;
   $32 = $33 & -2;
   $14 = __wasm_i64_mul($25, $24, $32, 0);
   $13 = $14 + $4 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $3 | 0;
   $3 = $13 >>> 0 < $14 >>> 0 ? $3 + 1 | 0 : $3;
   $14 = $3;
   $3 = ($3 | 0) == ($9 | 0) & $4 >>> 0 > $13 >>> 0 | $3 >>> 0 < $9 >>> 0;
   $4 = 0;
   $9 = $3;
   $3 = $3 + $31 | 0;
   $4 = ($9 >>> 0 > $3 >>> 0 ? 1 : $4) + $7 | 0;
   $9 = $3;
   $3 = $3 + $15 | 0;
   $4 = $9 >>> 0 > $3 >>> 0 ? $4 + 1 | 0 : $4;
   $9 = $4;
   $34 = $15;
   $15 = $3;
   $4 = ($4 | 0) == ($7 | 0) & $34 >>> 0 > $3 >>> 0 | $4 >>> 0 < $7 >>> 0;
   $3 = $8;
   $7 = $4;
   $4 = $4 + $11 | 0;
   $3 = $7 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $34 = $4;
   $11 = $3;
   $3 = __wasm_i64_mul($30, $12, $20, $21);
   $31 = i64toi32_i32$HIGH_BITS;
   $30 = $3;
   $7 = __wasm_i64_mul($32, $21, $26, $18);
   $4 = $3 + $7 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $31 | 0;
   $3 = $4 >>> 0 < $7 >>> 0 ? $3 + 1 | 0 : $3;
   $18 = $4;
   $8 = __wasm_i64_mul($17, $12, $23, $24);
   $7 = $4 + $8 | 0;
   $12 = $3;
   $4 = $3 + i64toi32_i32$HIGH_BITS | 0;
   $4 = $7 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
   $23 = $7;
   $3 = __wasm_i64_mul($16, $29, $25, $24);
   $7 = $7 + $3 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $4 | 0;
   $8 = $3 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
   $26 = $8;
   $25 = 0;
   $8 = ($4 | 0) == ($8 | 0) & $7 >>> 0 < $23 >>> 0 | $4 >>> 0 > $8 >>> 0;
   $3 = ($4 | 0) == ($12 | 0) & $18 >>> 0 > $23 >>> 0 | $4 >>> 0 < $12 >>> 0;
   $12 = $3 + (($12 | 0) == ($31 | 0) & $18 >>> 0 < $30 >>> 0 | $12 >>> 0 < $31 >>> 0) | 0;
   $4 = $8 + $12 | 0;
   $3 = ($4 | $25) + $9 | 0;
   $12 = $26;
   $18 = $12 + $15 | 0;
   $4 = $18;
   $3 = $12 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $12 = $3;
   $9 = ($9 | 0) == ($3 | 0) & $15 >>> 0 > $4 >>> 0 | $3 >>> 0 < $9 >>> 0;
   $3 = $11;
   $8 = $9;
   $9 = $9 + $34 | 0;
   $3 = $8 >>> 0 > $9 >>> 0 ? $3 + 1 | 0 : $3;
   $23 = $9;
   $11 = $3;
   $25 = $4;
   $18 = $12;
   $3 = __wasm_i64_mul($17, $29, $32, $21);
   $17 = i64toi32_i32$HIGH_BITS;
   $12 = $3;
   $4 = __wasm_i64_mul($16, $29, $20, $21);
   $9 = $3 + $4 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $17 | 0;
   $3 = $4 >>> 0 > $9 >>> 0 ? $3 + 1 | 0 : $3;
   $15 = $3;
   $3 = 0;
   $4 = ($15 | 0) == ($17 | 0) & $9 >>> 0 < $12 >>> 0 | $15 >>> 0 < $17 >>> 0;
   $12 = $15 + $13 | 0;
   $3 = ($3 | $4) + $14 | 0;
   $3 = $12 >>> 0 < $15 >>> 0 ? $3 + 1 | 0 : $3;
   $13 = ($14 | 0) == ($3 | 0) & $13 >>> 0 > $12 >>> 0 | $3 >>> 0 < $14 >>> 0;
   $4 = $3;
   $3 = $7;
   $14 = 0;
   $7 = $14 + $12 | 0;
   $8 = $3 + $4 | 0;
   $3 = 0;
   $8 = $7 >>> 0 < $14 >>> 0 ? $8 + 1 | 0 : $8;
   $14 = $8;
   $4 = ($8 | 0) == ($4 | 0) & $7 >>> 0 < $12 >>> 0 | $4 >>> 0 > $8 >>> 0;
   $8 = $4;
   $4 = $4 + $13 | 0;
   $3 = ($8 >>> 0 > $4 >>> 0 ? 1 : $3) + $18 | 0;
   $8 = $11;
   $12 = $4;
   $4 = $4 + $25 | 0;
   $3 = $12 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $13 = ($3 | 0) == ($18 | 0) & $4 >>> 0 < $25 >>> 0 | $3 >>> 0 < $18 >>> 0;
   $12 = $13;
   $13 = $13 + $23 | 0;
   $8 = $12 >>> 0 > $13 >>> 0 ? $8 + 1 | 0 : $8;
   $17 = $13;
   $12 = $4;
   $13 = $4;
   $11 = $3;
   $4 = $9;
   $15 = 0;
   $20 = __wasm_i64_mul($32, $21, $20, $21);
   $9 = $15 + $20 | 0;
   $3 = $4;
   $4 = $3 + i64toi32_i32$HIGH_BITS | 0;
   $4 = $9 >>> 0 < $20 >>> 0 ? $4 + 1 | 0 : $4;
   $3 = (($3 | 0) == ($4 | 0) & $9 >>> 0 < $15 >>> 0 | $3 >>> 0 > $4 >>> 0) ^ -1;
   $4 = ($14 | 0) == -1 & $3 >>> 0 < $7 >>> 0 & (($3 | 0) != ($7 | 0) | ($14 | 0) != -1);
   $3 = $11;
   $13 = $4 + $13 | 0;
   $3 = $13 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   $7 = $3;
   $4 = ($11 | 0) == ($3 | 0) & $13 >>> 0 < $12 >>> 0 | $3 >>> 0 < $11 >>> 0;
   $3 = $8;
   $9 = $4 + $17 | 0;
   $3 = $9 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   $4 = $3;
   block2 : {
    if (($3 | 0) == 131071 | $3 >>> 0 < 131071) {
     $37 = $39 | $38;
     $36 = $24 | $40;
     $17 = $10 + 80 | 0;
     $14 = $13;
     $11 = $3 >>> 0 < 65536;
     $8 = $11;
     if (($8 & 63) >>> 0 >= 32) {
      $3 = $13 << $8;
      $14 = 0;
     } else {
      $3 = (1 << $8) - 1 & $14 >>> 32 - $8 | $7 << $8;
      $14 = $14 << $8;
     }
     $15 = $3;
     $12 = $9;
     $8 = $11 & 31;
     $15 = $3;
     if (($11 & 63) >>> 0 >= 32) {
      $4 = $9 << $8;
      $2 = 0;
     } else {
      $4 = (1 << $8) - 1 & $12 >>> 32 - $8 | $4 << $8;
      $2 = $12 << $8;
     }
     $8 = $7 >>> 1 | 0;
     $13 = ($7 & 1) << 31 | $13 >>> 1;
     $9 = $11 ^ 63;
     $7 = $9 & 31;
     if (($9 & 63) >>> 0 >= 32) {
      $3 = 0;
      $7 = $8 >>> $7 | 0;
     } else {
      $3 = $8 >>> $7 | 0;
      $7 = ((1 << $7) - 1 & $8) << 32 - $7 | $13 >>> $7;
     }
     $7 = $2 | $7;
     $8 = $3 | $4;
     __multi3($17, $14, $15, $7, $8, $5, $6, $28, $27);
     $22 = ($11 ? $35 + 16382 | 0 : $22) - 1 | 0;
     $4 = HEAP32[$10 + 84 >> 2];
     $12 = $4;
     $3 = $1 << 17;
     $13 = 0;
     $11 = HEAP32[$10 + 88 >> 2];
     $1 = $13 - $11 | 0;
     $2 = HEAP32[$10 + 80 >> 2];
     $4 = ($4 | $2) != 0;
     $9 = $1 - $4 | 0;
     $13 = ($3 - (HEAP32[$10 + 92 >> 2] + ($11 >>> 0 > $13 >>> 0) | 0) | 0) - ($1 >>> 0 < $4 >>> 0) | 0;
     $11 = 0 - ((($2 | 0) != 0) + $12 | 0) | 0;
     $12 = 0 - $2 | 0;
     break block2;
    }
    $14 = ($7 & 1) << 31 | $13 >>> 1;
    $3 = $9 << 31 | $7 >>> 1;
    $15 = $3;
    $7 = ($4 & 1) << 31 | $9 >>> 1;
    $8 = $4 >>> 1 | 0;
    __multi3($10 + 96 | 0, $14, $3, $7, $8, $5, $6, $28, $27);
    $9 = HEAP32[$10 + 100 >> 2];
    $17 = $9;
    $16 = 0;
    $12 = HEAP32[$10 + 104 >> 2];
    $13 = $16 - $12 | 0;
    $4 = HEAP32[$10 + 96 >> 2];
    $11 = ($9 | $4) != 0;
    $9 = $13 - $11 | 0;
    $13 = (($1 << 16) - (HEAP32[$10 + 108 >> 2] + ($12 >>> 0 > $16 >>> 0) | 0) | 0) - ($11 >>> 0 > $13 >>> 0) | 0;
    $33 = $1;
    $16 = $2;
    $11 = 0 - ((($4 | 0) != 0) + $17 | 0) | 0;
    $12 = 0 - $4 | 0;
   }
   if (($22 | 0) >= 32767) {
    $19 = $19 | 2147418112;
    $1 = 0;
    $2 = 0;
    break block1;
   }
   block3 : {
    if (($22 | 0) > 0) {
     $1 = $9 << 1 | $11 >>> 31;
     $2 = $13 << 1 | $9 >>> 31;
     $9 = $7;
     $13 = $8 & 65535 | $22 << 16;
     $7 = $12 << 1;
     $4 = $11 << 1 | $12 >>> 31;
     break block3;
    }
    if (($22 | 0) <= -113) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    __lshrti3($10 - -64 | 0, $14, $15, $7, $8, 1 - $22 | 0);
    __ashlti3($10 + 48 | 0, $33, $16, $37, $36, $22 + 112 | 0);
    $14 = HEAP32[$10 + 64 >> 2];
    $15 = HEAP32[$10 + 68 >> 2];
    $9 = HEAP32[$10 + 72 >> 2];
    $13 = HEAP32[$10 + 76 >> 2];
    __multi3($10 + 32 | 0, $5, $6, $28, $27, $14, $15, $9, $13);
    $1 = HEAP32[$10 + 40 >> 2];
    $2 = HEAP32[$10 + 56 >> 2];
    $7 = HEAP32[$10 + 36 >> 2];
    $16 = $1 << 1 | $7 >>> 31;
    $8 = $2 - $16 | 0;
    $16 = HEAP32[$10 + 60 >> 2] - ((HEAP32[$10 + 44 >> 2] << 1 | $1 >>> 31) + ($2 >>> 0 < $16 >>> 0) | 0) | 0;
    $2 = HEAP32[$10 + 52 >> 2];
    $12 = $2;
    $1 = HEAP32[$10 + 32 >> 2];
    $4 = $7 << 1 | $1 >>> 31;
    $11 = $1 << 1;
    $3 = HEAP32[$10 + 48 >> 2];
    $2 = ($12 | 0) == ($4 | 0) & $11 >>> 0 > $3 >>> 0 | $12 >>> 0 < $4 >>> 0;
    $1 = $8 - $2 | 0;
    $2 = $16 - ($2 >>> 0 > $8 >>> 0) | 0;
    $7 = $3 - $11 | 0;
    $4 = $12 - (($3 >>> 0 < $11 >>> 0) + $4 | 0) | 0;
   }
   __multi3($10 + 16 | 0, $5, $6, $28, $27, 3, 0, 0, 0);
   __multi3($10, $5, $6, $28, $27, 5, 0, 0, 0);
   $3 = $13;
   $8 = $15;
   $13 = $5;
   $11 = 0;
   $4 = $4 + $11 | 0;
   $5 = $6;
   $6 = $7;
   $16 = $14 & 1;
   $7 = $7 + $16 | 0;
   $4 = $6 >>> 0 > $7 >>> 0 ? $4 + 1 | 0 : $4;
   $6 = $4;
   $13 = ($5 | 0) == ($4 | 0) & $7 >>> 0 > $13 >>> 0 | $4 >>> 0 > $5 >>> 0;
   $5 = ($4 | 0) == ($11 | 0) & $7 >>> 0 < $16 >>> 0 | $4 >>> 0 < $11 >>> 0;
   $4 = $2;
   $2 = $5;
   $5 = $1 + $5 | 0;
   $4 = $2 >>> 0 > $5 >>> 0 ? $4 + 1 | 0 : $4;
   $1 = ($27 | 0) == ($4 | 0);
   $1 = $1 & ($5 | 0) == ($28 | 0) ? $13 : $1 & $5 >>> 0 > $28 >>> 0 | $4 >>> 0 > $27 >>> 0;
   $2 = $1;
   $1 = $1 + $14 | 0;
   $8 = $2 >>> 0 > $1 >>> 0 ? $8 + 1 | 0 : $8;
   $2 = ($15 | 0) == ($8 | 0) & $1 >>> 0 < $14 >>> 0 | $8 >>> 0 < $15 >>> 0;
   $12 = $2;
   $2 = $2 + $9 | 0;
   $3 = $12 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
   $14 = $2;
   $2 = $3;
   $12 = $3 >>> 0 < 2147418112;
   $3 = HEAP32[$10 + 20 >> 2];
   $11 = ($3 | 0) == ($6 | 0) & HEAPU32[$10 + 16 >> 2] < $7 >>> 0 | $3 >>> 0 < $6 >>> 0;
   $3 = HEAP32[$10 + 28 >> 2];
   $9 = HEAP32[$10 + 24 >> 2];
   $9 = $12 & (($5 | 0) == ($9 | 0) & ($3 | 0) == ($4 | 0) ? $11 : ($3 | 0) == ($4 | 0) & $9 >>> 0 < $5 >>> 0 | $3 >>> 0 < $4 >>> 0);
   $3 = $8;
   $12 = $9;
   $9 = $1 + $9 | 0;
   $3 = $12 >>> 0 > $9 >>> 0 ? $3 + 1 | 0 : $3;
   $1 = ($8 | 0) == ($3 | 0) & $1 >>> 0 > $9 >>> 0 | $3 >>> 0 < $8 >>> 0;
   $8 = $2;
   $2 = $1;
   $1 = $1 + $14 | 0;
   $8 = $2 >>> 0 > $1 >>> 0 ? $8 + 1 | 0 : $8;
   $14 = $1;
   $2 = HEAP32[$10 + 4 >> 2];
   $6 = ($2 | 0) == ($6 | 0) & HEAPU32[$10 >> 2] < $7 >>> 0 | $2 >>> 0 < $6 >>> 0;
   $2 = HEAP32[$10 + 12 >> 2];
   $1 = HEAP32[$10 + 8 >> 2];
   $1 = $8 >>> 0 < 2147418112 & (($1 | 0) == ($5 | 0) & ($2 | 0) == ($4 | 0) ? $6 : ($2 | 0) == ($4 | 0) & $1 >>> 0 < $5 >>> 0 | $2 >>> 0 < $4 >>> 0);
   $2 = $1;
   $1 = $1 + $9 | 0;
   $4 = $2 >>> 0 > $1 >>> 0 ? $3 + 1 | 0 : $3;
   $2 = $4;
   $4 = ($3 | 0) == ($4 | 0) & $1 >>> 0 < $9 >>> 0 | $3 >>> 0 > $4 >>> 0;
   $3 = $8;
   $5 = $4;
   $4 = $4 + $14 | 0;
   $3 = $5 >>> 0 > $4 >>> 0 ? $3 + 1 | 0 : $3;
   $21 = $4 | $21;
   $19 = $3 | $19;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $21;
  HEAP32[$0 + 12 >> 2] = $19;
  __stack_pointer = $10 + 336 | 0;
 }
 
 function setThrew($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!HEAP32[20040]) {
   HEAP32[20041] = $1;
   HEAP32[20040] = $0;
  }
 }
 
 function __wasm_setjmp_test($0, $1) {
  return HEAP32[$0 >> 2] == ($1 | 0) ? HEAP32[$0 + 4 >> 2] : 0;
 }
 
 function emscripten_longjmp($0, $1) {
  setThrew($0, $1 >>> 0 <= 1 ? 1 : $1);
  _emscripten_throw_longjmp();
 }
 
 function _emscripten_tempret_set($0) {
  $0 = $0 | 0;
  tempRet0 = $0;
 }
 
 function __extenddftf2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  wasm2js_scratch_store_f64(+$1);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $5 = wasm2js_scratch_load_i32(0) | 0;
  $9 = $3;
  $2 = $3 & 1048575;
  $3 = $3 >>> 20 & 2047;
  block : {
   if ($3 | 0) {
    if (($3 | 0) != 2047 | $6) {
     $7 = ($2 & 15) << 28 | $5 >>> 4;
     $8 = $2 >>> 4 | 0;
     $6 = $3 + 15360 | 0;
     $3 = $5 << 28;
     $2 = 0;
     break block;
    }
    $7 = ($2 & 15) << 28 | $5 >>> 4;
    $8 = $2 >>> 4 | 0;
    $6 = 32767;
    $3 = $5 << 28;
    $2 = 0;
    break block;
   }
   if (!($2 | $5)) {
    $3 = 0;
    $2 = 0;
    break block;
   }
   $3 = $2;
   $2 = Math_clz32($2);
   $2 = ($2 | 0) == 32 ? Math_clz32($5) + 32 | 0 : $2;
   __ashlti3($4, $5, $3, 0, 0, $2 + 49 | 0);
   $7 = HEAP32[$4 + 8 >> 2];
   $8 = HEAP32[$4 + 12 >> 2] ^ 65536;
   $6 = 15372 - $2 | 0;
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 >> 2];
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8 | ($9 & -2147483648 | $6 << 16);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block : {
   if (!$1) {
    $1 = 0;
    break block;
   }
   $2 = $1 >> 31;
   $4 = ($2 ^ $1) - $2 | 0;
   $2 = Math_clz32($4);
   __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
   $4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
   $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
   $2 = $4 >>> 0 < $5 >>> 0 ? $2 + 1 | 0 : $2;
   $1 = ($1 | 0) < 0;
   $4 = 0 | $4;
   $5 = ($1 ? -2147483648 : 0) | $2;
   $2 = HEAP32[$3 + 4 >> 2];
   $1 = HEAP32[$3 >> 2];
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $5;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function __floatunsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block : {
   if (!$1) {
    $1 = 0;
    break block;
   }
   $3 = $1;
   $1 = Math_clz32($1);
   __ashlti3($2, $3, 0, 0, 0, 112 - ($1 ^ 31) | 0);
   $3 = 0 + HEAP32[$2 + 8 >> 2] | 0;
   $1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + (16414 - $1 << 16) | 0;
   $5 = $4 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
   $4 = HEAP32[$2 + 4 >> 2];
   $1 = HEAP32[$2 >> 2];
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __lshrti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  block : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (($2 & 63) >>> 0 >= 32) {
     $2 = 0;
     $1 = $4 >>> $1 | 0;
    } else {
     $2 = $4 >>> $1 | 0;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break block;
   }
   if (!$5) {
    break block
   }
   $8 = $3;
   $7 = 64 - $5 | 0;
   $6 = $7 & 31;
   if (($7 & 63) >>> 0 >= 32) {
    $7 = $3 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $4 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $1 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $6 = 0;
    $1 = $2 >>> $1 | 0;
   } else {
    $6 = $2 >>> $1 | 0;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $7 = 0;
    $3 = $4 >>> $3 | 0;
   } else {
    $7 = $4 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
 }
 
 function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
  $11 = __stack_pointer - 96 | 0;
  __stack_pointer = $11;
  $14 = $8 & 65535;
  $15 = ($4 ^ $8) & -2147483648;
  $10 = $4 & 65535;
  $21 = $10;
  $18 = $8 >>> 16 & 32767;
  $16 = $4 >>> 16 & 32767;
  block1 : {
   block : {
    if ($18 - 32767 >>> 0 > 4294934529 & $16 - 32767 >>> 0 >= 4294934530) {
     break block
    }
    $17 = $4 & 2147483647;
    $19 = $17;
    $9 = $3;
    if (!(!$9 & ($17 | 0) == 2147418112 ? !($1 | $2) : $17 >>> 0 < 2147418112)) {
     $13 = $9;
     $15 = $4 | 32768;
     break block1;
    }
    $17 = $8 & 2147483647;
    $4 = $7;
    if (!(!$4 & ($17 | 0) == 2147418112 ? !($5 | $6) : $17 >>> 0 < 2147418112)) {
     $13 = $4;
     $15 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break block1;
    }
    if (!($1 | $9 | ($19 ^ 2147418112 | $2))) {
     if (!($4 | $5 | ($6 | $17))) {
      $15 = 2147450880;
      $1 = 0;
      $2 = 0;
      break block1;
     }
     $15 = $15 | 2147418112;
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($4 | $5 | ($17 ^ 2147418112 | $6))) {
     $4 = $1 | $9;
     $3 = $2 | $19;
     $1 = 0;
     $2 = 0;
     if (!($3 | $4)) {
      $15 = 2147450880;
      break block1;
     }
     $15 = $15 | 2147418112;
     break block1;
    }
    if (!($1 | $9 | ($2 | $19))) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (!($4 | $5 | ($6 | $17))) {
     $1 = 0;
     $2 = 0;
     break block1;
    }
    if (($19 | 0) == 65535 | $19 >>> 0 < 65535) {
     $9 = !($3 | $10);
     $8 = Math_clz32($9 ? $2 : $10);
     $9 = (($8 | 0) == 32 ? Math_clz32($9 ? $1 : $3) + 32 | 0 : $8) + ($9 ? 64 : 0) | 0;
     __ashlti3($11 + 80 | 0, $1, $2, $3, $10, $9 - 15 | 0);
     $20 = 16 - $9 | 0;
     $3 = HEAP32[$11 + 88 >> 2];
     $21 = HEAP32[$11 + 92 >> 2];
     $2 = HEAP32[$11 + 84 >> 2];
     $1 = HEAP32[$11 + 80 >> 2];
    }
    if ($17 >>> 0 > 65535) {
     break block
    }
    $8 = !($7 | $14);
    $4 = Math_clz32($8 ? $6 : $14);
    $8 = (($4 | 0) == 32 ? Math_clz32($8 ? $5 : $7) + 32 | 0 : $4) + ($8 ? 64 : 0) | 0;
    __ashlti3($11 - -64 | 0, $5, $6, $7, $14, $8 - 15 | 0);
    $20 = ($20 - $8 | 0) + 16 | 0;
    $7 = HEAP32[$11 + 72 >> 2];
    $14 = HEAP32[$11 + 76 >> 2];
    $5 = HEAP32[$11 + 64 >> 2];
    $6 = HEAP32[$11 + 68 >> 2];
   }
   $20 = (($16 + $18 | 0) + $20 | 0) - 16383 | 0;
   $8 = $7 << 15;
   $10 = 0;
   $23 = $14 << 15 | $7 >>> 17 | -2147483648;
   $27 = $2;
   $7 = __wasm_i64_mul($23, $10, $2, 0);
   $2 = i64toi32_i32$HIGH_BITS;
   $17 = $5 << 15;
   $24 = $6 << 15 | $5 >>> 17;
   $18 = 0;
   $22 = $21 | 65536;
   $16 = $12;
   $5 = __wasm_i64_mul($24, $18, $22, $12);
   $4 = $5 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $2 | 0;
   $9 = $4 >>> 0 < $5 >>> 0 ? $9 + 1 | 0 : $9;
   $5 = $9;
   $7 = ($2 | 0) == ($9 | 0) & $4 >>> 0 < $7 >>> 0 | $2 >>> 0 > $9 >>> 0;
   $25 = $8 | $6 >>> 17;
   $14 = $3;
   $3 = __wasm_i64_mul($25, 0, $3, 0);
   $2 = $3 + $4 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $2 >>> 0 < $3 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = ($5 | 0) == ($9 | 0) & $2 >>> 0 < $4 >>> 0 | $5 >>> 0 > $9 >>> 0;
   $4 = $3;
   $3 = $3 + $7 | 0;
   $10 = $4 >>> 0 > $3 >>> 0 ? 1 : $10;
   $4 = $3;
   $3 = __wasm_i64_mul($23, $18, $22, $12);
   $4 = $4 + $3 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $8 = $3 >>> 0 > $4 >>> 0 ? $8 + 1 | 0 : $8;
   $19 = $4;
   $6 = $2;
   $3 = $2;
   $12 = $9;
   $26 = $17 & -32768;
   $2 = __wasm_i64_mul($26, 0, $14, $13);
   $7 = i64toi32_i32$HIGH_BITS;
   $4 = __wasm_i64_mul($27, $18, $24, $18);
   $5 = $4 + $2 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $7 | 0;
   $9 = $4 >>> 0 > $5 >>> 0 ? $9 + 1 | 0 : $9;
   $21 = ($7 | 0) == ($9 | 0) & $2 >>> 0 > $5 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $4 = $9;
   $2 = $5;
   $17 = $1;
   $1 = __wasm_i64_mul($25, $13, $1, 0);
   $5 = $2 + $1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $10 = 0;
   $9 = $1 >>> 0 > $5 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = $9;
   $1 = ($9 | 0) == ($4 | 0) & $2 >>> 0 > $5 >>> 0 | $4 >>> 0 > $9 >>> 0;
   $2 = $1;
   $1 = $1 + $21 | 0;
   $9 = ($2 >>> 0 > $1 >>> 0 ? 1 : $10) + $12 | 0;
   $4 = $1 + $3 | 0;
   $9 = $4 >>> 0 < $1 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = $9;
   $1 = ($9 | 0) == ($12 | 0) & $4 >>> 0 < $6 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $9 = $8;
   $2 = $1;
   $1 = $1 + $19 | 0;
   $9 = $2 >>> 0 > $1 >>> 0 ? $9 + 1 | 0 : $9;
   $12 = $1;
   $10 = $9;
   $6 = __wasm_i64_mul($25, $13, $22, $16);
   $9 = i64toi32_i32$HIGH_BITS;
   $2 = __wasm_i64_mul($23, $18, $14, $13);
   $1 = $2 + $6 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $8 = $1 >>> 0 < $2 >>> 0 ? $8 + 1 | 0 : $8;
   $2 = $8;
   $9 = (($9 | 0) == ($2 | 0) & $1 >>> 0 < $6 >>> 0 | $2 >>> 0 < $9 >>> 0) + $10 | 0;
   $12 = $2 + $12 | 0;
   $8 = $2 >>> 0 > $12 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $3;
   $6 = $3;
   $9 = $1;
   $1 = 0;
   $3 = $1 + $4 | 0;
   $9 = $6 + $9 | 0;
   $9 = $1 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $6 = $9;
   $1 = ($10 | 0) == ($9 | 0) & $3 >>> 0 < $4 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $2 = $1;
   $1 = $1 + $12 | 0;
   $8 = $2 >>> 0 > $1 >>> 0 ? $8 + 1 | 0 : $8;
   $28 = $1;
   $12 = __wasm_i64_mul($22, $16, $26, $13);
   $22 = i64toi32_i32$HIGH_BITS;
   $1 = __wasm_i64_mul($24, $18, $14, $13);
   $16 = $1 + $12 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $22 | 0;
   $2 = __wasm_i64_mul($17, $13, $23, $18);
   $14 = $2 + $16 | 0;
   $1 = $1 >>> 0 > $16 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = $1 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $2 >>> 0 > $14 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = __wasm_i64_mul($25, $13, $27, $18);
   $2 = $4 + $14 | 0;
   $21 = $9;
   $10 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $10 = $2 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10;
   $4 = 0;
   $19 = ($10 | 0) == ($9 | 0) & $2 >>> 0 < $14 >>> 0 | $10 >>> 0 < $9 >>> 0;
   $12 = ($1 | 0) == ($22 | 0) & $12 >>> 0 > $16 >>> 0 | $1 >>> 0 < $22 >>> 0;
   $1 = ($1 | 0) == ($21 | 0) & $14 >>> 0 < $16 >>> 0 | $1 >>> 0 > $21 >>> 0;
   $1 = $1 + $12 | 0;
   $1 = $1 + $19 | 0;
   $9 = $1;
   $1 = $10 + $3 | 0;
   $9 = ($4 | $9) + $6 | 0;
   $4 = $1;
   $9 = $1 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $16 = $9;
   $1 = ($6 | 0) == ($9 | 0) & $1 >>> 0 < $3 >>> 0 | $6 >>> 0 > $9 >>> 0;
   $9 = $8;
   $3 = $1;
   $1 = $1 + $28 | 0;
   $9 = $3 >>> 0 > $1 >>> 0 ? $9 + 1 | 0 : $9;
   $21 = $1;
   $3 = $9;
   $12 = __wasm_i64_mul($27, $18, $26, $13);
   $19 = i64toi32_i32$HIGH_BITS;
   $6 = __wasm_i64_mul($17, $13, $24, $18);
   $1 = $6 + $12 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $19 | 0;
   $8 = $1 >>> 0 < $6 >>> 0 ? $8 + 1 | 0 : $8;
   $6 = 0;
   $9 = ($8 | 0) == ($19 | 0) & $1 >>> 0 < $12 >>> 0 | $8 >>> 0 < $19 >>> 0;
   $12 = $8;
   $8 = $8 + $5 | 0;
   $9 = ($6 | $9) + $7 | 0;
   $9 = $8 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
   $18 = ($7 | 0) == ($9 | 0) & $5 >>> 0 > $8 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $5 = $9;
   $9 = $2;
   $2 = 0;
   $6 = $2 + $8 | 0;
   $10 = $5 + $9 | 0;
   $10 = $2 >>> 0 > $6 >>> 0 ? $10 + 1 | 0 : $10;
   $7 = $10;
   $2 = ($5 | 0) == ($10 | 0) & $6 >>> 0 < $8 >>> 0 | $10 >>> 0 < $5 >>> 0;
   $8 = 0;
   $5 = $2;
   $2 = $2 + $18 | 0;
   $9 = ($5 >>> 0 > $2 >>> 0 ? 1 : $8) + $16 | 0;
   $5 = $2 + $4 | 0;
   $9 = $5 >>> 0 < $2 >>> 0 ? $9 + 1 | 0 : $9;
   $12 = $9;
   $2 = ($16 | 0) == ($9 | 0) & $4 >>> 0 > $5 >>> 0 | $9 >>> 0 < $16 >>> 0;
   $4 = $2;
   $2 = $2 + $21 | 0;
   $10 = $4 >>> 0 > $2 >>> 0 ? $3 + 1 | 0 : $3;
   $16 = $2;
   $8 = $9;
   $3 = $7;
   $9 = $1;
   $14 = 0;
   $2 = __wasm_i64_mul($17, $13, $26, $13);
   $1 = $14 + $2 | 0;
   $4 = $9;
   $9 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $1 >>> 0 < $2 >>> 0 ? $9 + 1 | 0 : $9;
   $2 = $9;
   $4 = ($4 | 0) == ($9 | 0) & $1 >>> 0 < $14 >>> 0 | $4 >>> 0 > $9 >>> 0;
   $9 = $3;
   $3 = $4 + $6 | 0;
   $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $6 = ($7 | 0) == ($9 | 0) & $3 >>> 0 < $6 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $7 = $5 + $6 | 0;
   $8 = $6 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
   $9 = $10;
   $5 = ($8 | 0) == ($12 | 0) & $5 >>> 0 > $7 >>> 0 | $8 >>> 0 < $12 >>> 0;
   $6 = $5;
   $5 = $5 + $16 | 0;
   $9 = $6 >>> 0 > $5 >>> 0 ? $9 + 1 | 0 : $9;
   $6 = $9;
   block2 : {
    if ($9 & 65536) {
     $20 = $20 + 1 | 0;
     break block2;
    }
    $12 = $2 >>> 31 | 0;
    $10 = 0;
    $9 = $6 << 1 | $5 >>> 31;
    $5 = $5 << 1 | $8 >>> 31;
    $6 = $9;
    $9 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1 | $4 >>> 31;
    $8 = $9;
    $9 = $2 << 1 | $1 >>> 31;
    $1 = $1 << 1;
    $2 = $9;
    $9 = $4 << 1 | $3 >>> 31;
    $3 = $3 << 1 | $12;
    $4 = $9 | $10;
   }
   if (($20 | 0) >= 32767) {
    $15 = $15 | 2147418112;
    $1 = 0;
    $2 = 0;
    break block1;
   }
   block3 : {
    if (($20 | 0) <= 0) {
     $10 = 1 - $20 | 0;
     if ($10 >>> 0 <= 127) {
      $9 = $20 + 127 | 0;
      __ashlti3($11 + 48 | 0, $1, $2, $3, $4, $9);
      __ashlti3($11 + 32 | 0, $7, $8, $5, $6, $9);
      __lshrti3($11 + 16 | 0, $1, $2, $3, $4, $10);
      __lshrti3($11, $7, $8, $5, $6, $10);
      $1 = HEAP32[$11 + 32 >> 2] | HEAP32[$11 + 16 >> 2] | (HEAP32[$11 + 48 >> 2] | HEAP32[$11 + 56 >> 2] | (HEAP32[$11 + 52 >> 2] | HEAP32[$11 + 60 >> 2])) != 0;
      $2 = HEAP32[$11 + 36 >> 2] | HEAP32[$11 + 20 >> 2];
      $3 = HEAP32[$11 + 40 >> 2] | HEAP32[$11 + 24 >> 2];
      $4 = HEAP32[$11 + 44 >> 2] | HEAP32[$11 + 28 >> 2];
      $7 = HEAP32[$11 >> 2];
      $8 = HEAP32[$11 + 4 >> 2];
      $6 = HEAP32[$11 + 12 >> 2];
      $5 = HEAP32[$11 + 8 >> 2];
      break block3;
     }
     $1 = 0;
     $2 = 0;
     break block1;
    }
    $6 = $6 & 65535 | $20 << 16;
   }
   $13 = $5 | $13;
   $15 = $6 | $15;
   if (!(!$3 & ($4 | 0) == -2147483648 ? !($1 | $2) : ($4 | 0) > 0 | ($4 | 0) >= 0)) {
    $9 = $8;
    $1 = $7 + 1 | 0;
    $9 = $1 ? $9 : $9 + 1 | 0;
    $8 = $15;
    $2 = $9;
    $3 = !($9 | $1);
    $13 = $3 + $13 | 0;
    $15 = $3 >>> 0 > $13 >>> 0 ? $8 + 1 | 0 : $8;
    break block1;
   }
   if ($1 | $3 | ($4 ^ -2147483648 | $2)) {
    $1 = $7;
    $2 = $8;
    break block1;
   }
   $10 = $15;
   $9 = $8;
   $1 = $7 & 1;
   $2 = $1;
   $1 = $1 + $7 | 0;
   $9 = $2 >>> 0 > $1 >>> 0 ? $9 + 1 | 0 : $9;
   $2 = $9;
   $3 = ($8 | 0) == ($9 | 0) & $1 >>> 0 < $7 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $13 = $3 + $13 | 0;
   $15 = $3 >>> 0 > $13 >>> 0 ? $10 + 1 | 0 : $10;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $13;
  HEAP32[$0 + 12 >> 2] = $15;
  __stack_pointer = $11 + 96 | 0;
 }
 
 function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $8 = __wasm_i64_mul($1, $2, $7, $8);
  $7 = i64toi32_i32$HIGH_BITS;
  $4 = __wasm_i64_mul($3, $4, $5, $6);
  $8 = $4 + $8 | 0;
  $3 = i64toi32_i32$HIGH_BITS + $7 | 0;
  $7 = $4 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
  $9 = $6;
  $4 = 0;
  $10 = $2;
  $3 = 0;
  $2 = __wasm_i64_mul($6, $4, $2, $3);
  $6 = $2 + $8 | 0;
  $8 = i64toi32_i32$HIGH_BITS + $7 | 0;
  $11 = $6;
  $2 = $2 >>> 0 > $6 >>> 0 ? $8 + 1 | 0 : $8;
  $6 = __wasm_i64_mul($5, 0, $1, 0);
  $7 = i64toi32_i32$HIGH_BITS;
  $8 = 0;
  $3 = __wasm_i64_mul($5, $8, $10, $3);
  $7 = $7 + $3 | 0;
  $5 = i64toi32_i32$HIGH_BITS + $8 | 0;
  $5 = $3 >>> 0 > $7 >>> 0 ? $5 + 1 | 0 : $5;
  $8 = $5 + $11 | 0;
  $3 = $2;
  $5 = $5 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = __wasm_i64_mul($1, $12, $9, $4) + $7 | 0;
  $4 = i64toi32_i32$HIGH_BITS;
  $4 = $1 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
  $7 = $4 + $8 | 0;
  $8 = $5;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $4 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function emscripten_stack_init() {
  __stack_base = 149856;
  __stack_end = 84320;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
  $3 = HEAP32[$9 >> 2];
  $2 = HEAP32[$9 + 4 >> 2];
  $1 = HEAP32[$9 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
  __stack_pointer = $9 + 16 | 0;
 }
 
 function __trunctfdf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $4 = $3 & 65535;
  $5 = $3 >>> 16 & 32767;
  $9 = $5;
  block1 : {
   if ($5 - 15361 >>> 0 <= 2045) {
    $4 = $4 << 4 | $2 >>> 28;
    $2 = $2 << 4;
    $5 = $4;
    $4 = $1 >>> 28 | $2;
    $2 = $5;
    $5 = $9 - 15360 | 0;
    $1 = $1 & 268435455;
    block : {
     if (($1 | 0) == 134217728 & ($0 | 0) != 0 | $1 >>> 0 > 134217728) {
      $4 = $4 + 1 | 0;
      $2 = $4 ? $2 : $2 + 1 | 0;
      break block;
     }
     if ($0 | ($1 | 0) != 134217728) {
      break block
     }
     $0 = $4;
     $4 = $4 + ($4 & 1) | 0;
     $2 = $0 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
    }
    $7 = $2 >>> 0 > 1048575;
    $0 = $7 ? 0 : $4;
    $1 = $7 ? 0 : $2;
    $4 = 0;
    $2 = $5 + $7 | 0;
    $5 = $2 >>> 0 < $5 >>> 0 ? 1 : $4;
    break block1;
   }
   if (!(!($0 | $2 | ($1 | $4)) | (($5 | 0) != 32767 | ($7 | 0) != 0))) {
    $0 = $2;
    $2 = $4 << 4 | $2 >>> 28;
    $0 = $0 << 4 | $1 >>> 28;
    $1 = $2 | 524288;
    $2 = 2047;
    $5 = 0;
    break block1;
   }
   if ($9 >>> 0 > 17406) {
    $0 = 0;
    $1 = 0;
    $2 = 2047;
    $5 = 0;
    break block1;
   }
   $8 = !($5 | $7);
   $5 = $8 ? 15360 : 15361;
   $7 = $5 - $9 | 0;
   if (($7 | 0) > 112) {
    $0 = 0;
    $1 = 0;
    $2 = 0;
    $5 = 0;
    break block1;
   }
   $4 = $8 ? $4 : $4 | 65536;
   $8 = 0;
   if (($5 | 0) != ($9 | 0)) {
    __ashlti3($6 + 16 | 0, $0, $1, $2, $4, 128 - $7 | 0);
    $8 = (HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2] | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2])) != 0;
   }
   __lshrti3($6, $0, $1, $2, $4, $7);
   $0 = HEAP32[$6 + 8 >> 2];
   $7 = $0 << 4;
   $1 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
   $0 = HEAP32[$6 + 4 >> 2];
   $5 = $0;
   $0 = $0 >>> 28 | $7;
   $5 = $5 & 268435455;
   $2 = HEAP32[$6 >> 2] | $8;
   block2 : {
    if (($5 | 0) == 134217728 & ($2 | 0) != 0 | $5 >>> 0 > 134217728) {
     $0 = $0 + 1 | 0;
     $1 = $0 ? $1 : $1 + 1 | 0;
     break block2;
    }
    if ($2 | ($5 | 0) != 134217728) {
     break block2
    }
    $4 = $1;
    $1 = $0;
    $0 = $0 + ($0 & 1) | 0;
    $1 = $1 >>> 0 > $0 >>> 0 ? $4 + 1 | 0 : $4;
   }
   $2 = $1 >>> 0 > 1048575;
   $1 = $2 ? $1 ^ 1048576 : $1;
   $5 = 0;
  }
  __stack_pointer = $6 + 32 | 0;
  wasm2js_scratch_store_i32(0, $0 | 0);
  wasm2js_scratch_store_i32(1, $1 | ($3 & -2147483648 | $2 << 20));
  return +wasm2js_scratch_load_f64();
 }
 
 function __trunctfsf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = $3 & 65535;
  $7 = $3 >>> 16 & 32767;
  $9 = $7;
  block1 : {
   if ($7 - 16257 >>> 0 <= 253) {
    $4 = ($6 & 33554431) << 7 | $2 >>> 25;
    $6 = 0;
    $2 = $2 & 33554431;
    block : {
     if (!(!$6 & ($2 | 0) == 16777216 ? !($0 | $1) : 1 & $2 >>> 0 < 16777216)) {
      $4 = $4 + 1 | 0;
      break block;
     }
     if ($2 ^ 16777216 | $0 | ($1 | $6)) {
      break block
     }
     $4 = ($4 & 1) + $4 | 0;
    }
    $0 = $4 >>> 0 > 8388607;
    $4 = $0 ? 0 : $4;
    $0 = $9 + ($0 ? -16255 : -16256) | 0;
    break block1;
   }
   if (!(!($0 | $2 | ($1 | $6)) | ($8 | ($7 | 0) != 32767))) {
    $4 = ($6 & 33554431) << 7 | $2 >>> 25 | 4194304;
    $0 = 255;
    break block1;
   }
   if ($9 >>> 0 > 16510) {
    $0 = 255;
    break block1;
   }
   $8 = !($8 | $7);
   $7 = $8 ? 16256 : 16257;
   $4 = $7 - $9 | 0;
   if (($4 | 0) > 112) {
    $4 = 0;
    $0 = 0;
    break block1;
   }
   $6 = $8 ? $6 : $6 | 65536;
   $8 = 0;
   if (($7 | 0) != ($9 | 0)) {
    __ashlti3($5 + 16 | 0, $0, $1, $2, $6, 128 - $4 | 0);
    $8 = (HEAP32[$5 + 16 >> 2] | HEAP32[$5 + 24 >> 2] | (HEAP32[$5 + 20 >> 2] | HEAP32[$5 + 28 >> 2])) != 0;
   }
   __lshrti3($5, $0, $1, $2, $6, $4);
   $0 = HEAP32[$5 + 8 >> 2];
   $4 = (HEAP32[$5 + 12 >> 2] & 33554431) << 7 | $0 >>> 25;
   $7 = $0 & 33554431;
   $0 = $8 | HEAP32[$5 >> 2];
   $2 = HEAP32[$5 + 4 >> 2];
   $1 = 0;
   block2 : {
    if (!(!$1 & ($7 | 0) == 16777216 ? !($0 | $2) : 1 & $7 >>> 0 < 16777216)) {
     $4 = $4 + 1 | 0;
     break block2;
    }
    if ($7 ^ 16777216 | $0 | ($1 | $2)) {
     break block2
    }
    $4 = ($4 & 1) + $4 | 0;
   }
   $0 = $4 >>> 0 > 8388607;
   $4 = $0 ? $4 ^ 8388608 : $4;
  }
  __stack_pointer = $5 + 32 | 0;
  return wasm2js_scratch_store_i32(2, $3 & -2147483648 | $0 << 23 | $4), wasm2js_scratch_load_f32();
 }
 
 function std____2____next_prime_28unsigned_20long_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  block : {
   if ($0 >>> 0 <= 211) {
    $0 = HEAP32[unsigned_20int_20const__20std____2__lower_bound_5babi_nn200100_5d_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_void_2c_20void___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_void_2c_20void__29(61264, 61456, $4 + 12 | 0) >> 2];
    break block;
   }
   if ($0 >>> 0 >= 4294967292) {
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    HEAP32[$0 >> 2] = 24879;
    std____2____libcpp_verbose_abort_28char_20const__2c_20____29(33757, $0);
    wasm2js_trap();
   }
   $2 = $0;
   $5 = ($0 >>> 0) / 210 | 0;
   $0 = Math_imul($5, 210);
   HEAP32[$4 + 8 >> 2] = $2 - $0;
   $2 = unsigned_20int_20const__20std____2__lower_bound_5babi_nn200100_5d_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_void_2c_20void___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_void_2c_20void__29(61456, 61648, $4 + 8 | 0);
   $0 = $0 + HEAP32[$2 >> 2] | 0;
   $6 = $2 - 61456 >> 2;
   while (1) {
    $3 = 5;
    block2 : {
     block1 : {
      while (1) {
       $2 = $3;
       if (($2 | 0) == 47) {
        break block1
       }
       $7 = HEAP32[($2 << 2) + 61264 >> 2];
       $1 = ($0 >>> 0) / ($7 >>> 0) | 0;
       if ($1 >>> 0 < $7 >>> 0) {
        break block
       }
       $3 = $2 + 1 | 0;
       if ((Math_imul($1, $7) | 0) != ($0 | 0)) {
        continue
       }
       break;
      };
      if ($2 >>> 0 < 47) {
       break block2
      }
     }
     $3 = 211;
     while (1) {
      $2 = ($0 >>> 0) / ($3 >>> 0) | 0;
      if ($2 >>> 0 < $3 >>> 0) {
       break block
      }
      if ((Math_imul($2, $3) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 10 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 12 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 16 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 18 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 22 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 28 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 30 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 36 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 40 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 42 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 46 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 52 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 58 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 60 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 66 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 70 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 72 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 78 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 82 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 88 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 96 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 100 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 102 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 106 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 108 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 112 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 120 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 126 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 130 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 136 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 138 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 142 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 148 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 150 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 156 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 162 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 166 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 168 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 172 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 178 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 180 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 186 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 190 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 192 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 196 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 198 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      if ((Math_imul($2, $1) | 0) == ($0 | 0)) {
       break block2
      }
      $1 = $3 + 208 | 0;
      $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       break block
      }
      $3 = $3 + 210 | 0;
      if ((Math_imul($2, $1) | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
    }
    $0 = $6 + 1 | 0;
    $2 = ($0 | 0) == 48;
    $6 = $2 ? 0 : $0;
    $5 = $2 + $5 | 0;
    $0 = HEAP32[($6 << 2) + 61456 >> 2] + Math_imul($5, 210) | 0;
    continue;
   };
  }
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function unsigned_20int_20const__20std____2__lower_bound_5babi_nn200100_5d_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_void_2c_20void___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_void_2c_20void__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP8[$5 + 14 | 0] = 0;
  $3 = std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   if ($3) {
    HEAP32[$1 + 12 >> 2] = $0;
    $4 = $3 >>> 1 | 0;
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + ($4 << 2);
    $6 = ($4 ^ -1) + $3 | 0;
    $3 = $4;
    $4 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_unsigned_20int_2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const(HEAP32[$1 + 12 >> 2], $2);
    $3 = $4 ? $6 : $3;
    $0 = $4 ? HEAP32[$1 + 12 >> 2] + 4 | 0 : $0;
    continue;
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  return $1 - $0 >> 2;
 }
 
 function bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_unsigned_20int_2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($0, $1) {
  return HEAPU32[$0 >> 2] < HEAPU32[$1 >> 2];
 }
 
 function unsigned_20int_20const__20std____2____identity__operator_28_29_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $1 | 0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29($0) {
  $0 = $0 | 0;
  return std____2__ios_base___ios_base_28_29($0) | 0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29_1634($0) {
  $0 = $0 | 0;
  std____2__ios_base___ios_base_28_29($0);
  emscripten_builtin_free($0);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 61656;
  std____2__locale___locale_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29_1636($0) {
  $0 = $0 | 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29($0);
  emscripten_builtin_free($0);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____basic_streambuf_28_29($0) {
  return $1189($0, 61656);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____setbuf_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  std____2__fpos___mbstate_t___fpos_5babi_nn200100_5d_28long_20long_29($0);
 }
 
 function std____2__fpos___mbstate_t___fpos_5babi_nn200100_5d_28long_20long_29($0) {
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  std____2__fpos___mbstate_t___fpos_5babi_nn200100_5d_28long_20long_29($0);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsgetn_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  while (1) {
   block : {
    if (($2 | 0) <= ($5 | 0)) {
     break block
    }
    $3 = HEAP32[$0 + 16 >> 2];
    $6 = HEAP32[$0 + 12 >> 2];
    block1 : {
     if ($3 >>> 0 > $6 >>> 0) {
      HEAP32[$4 + 12 >> 2] = 2147483647;
      HEAP32[$4 + 8 >> 2] = $3 - $6;
      HEAP32[$4 + 4 >> 2] = $2 - $5;
      $3 = HEAP32[long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($4 + 12 | 0, long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($4 + 8 | 0, $4 + 4 | 0)) >> 2];
      char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($1, HEAP32[$0 + 12 >> 2], $3);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $3;
      break block1;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3 | 0) == -1) {
      break block
     }
     HEAP8[$1 | 0] = $3 << 24 >> 24;
     $3 = 1;
    }
    $1 = $1 + $3 | 0;
    $5 = $3 + $5 | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_long_2c_20long__28long_20const__2c_20long_20const__29_20const($1, $0);
  __stack_pointer = $2 + 16 | 0;
  return $3 ? $1 : $0;
 }
 
 function char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($0, $1, $2) {
  if ($2) {
   wasm2js_memory_copy($0, $1, $2)
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____underflow_28_29($0) {
  $0 = $0 | 0;
  return -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $0 + 1;
  return std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$0 | 0]) | 0;
 }
 
 function std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29($0) {
  return $0 & 255;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  while (1) {
   block : {
    if (($2 | 0) <= ($5 | 0)) {
     break block
    }
    $3 = HEAP32[$0 + 28 >> 2];
    $6 = HEAP32[$0 + 24 >> 2];
    if ($3 >>> 0 <= $6 >>> 0) {
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      break block
     }
     $5 = $5 + 1 | 0;
     $1 = $1 + 1 | 0;
    } else {
     HEAP32[$4 + 12 >> 2] = $3 - $6;
     HEAP32[$4 + 8 >> 2] = $2 - $5;
     $3 = HEAP32[long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($4 + 12 | 0, $4 + 8 | 0) >> 2];
     char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29(HEAP32[$0 + 24 >> 2], $1, $3);
     HEAP32[$0 + 24 >> 2] = $3 + HEAP32[$0 + 24 >> 2];
     $5 = $5 + $3 | 0;
     $1 = $1 + $3 | 0;
    }
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1660($0) {
  $0 = $0 | 0;
  std____2__ios_base___ios_base_28_29($0 + 8 | 0);
  return $0 | 0;
 }
 
 function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29($0) {
  $0 = $0 | 0;
  return std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1660(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) | 0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1662($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1660($0));
 }
 
 function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1663($0) {
  $0 = $0 | 0;
  std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1662(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn200100_5d_28_29_20const($0) {
  return !HEAP32[$0 + 16 >> 2];
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  if (HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2]) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($1 + 8 | 0, $0);
   block : {
    if (!HEAPU8[$1 + 8 | 0]) {
     break block
    }
    if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn200100_5d_28_29(HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2]) | 0) != -1) {
     break block
    }
    std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($1 + 8 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1) {
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char______test_for_eof_5babi_nn200100_5d_28_29_20const($0) ^ std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char______test_for_eof_5babi_nn200100_5d_28_29_20const($1) ^ 1;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0) {
  return std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sgetc_5babi_nn200100_5d_28_29(HEAP32[$0 >> 2]) << 24 >> 24;
 }
 
 function std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($0, $1, $2) {
  if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($2)) {
   $0 = (HEAP32[HEAP32[$0 + 8 >> 2] + ($2 << 2) >> 2] & $1) != 0
  } else {
   $0 = 0
  }
  return $0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0) {
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sbumpc_5babi_nn200100_5d_28_29(HEAP32[$0 >> 2]);
  return $0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn200100_5d_28_29($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 }
 
 function std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($0) {
  return $0 >>> 0 < 128;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sgetc_5babi_nn200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$1 | 0]);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sbumpc_5babi_nn200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1 + 1;
  return std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$1 | 0]);
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1689($0) {
  $0 = $0 | 0;
  std____2__ios_base___ios_base_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29($0) {
  $0 = $0 | 0;
  return std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1689(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1691($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1689($0));
 }
 
 function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1692($0) {
  $0 = $0 | 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1691(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($0, $1) {
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP8[$0 | 0] = 0;
  if (std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn200100_5d_28_29_20const(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0)) {
   $1 = HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 72 >> 2];
   if ($1) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29($1)
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($0) {
  var $1 = 0;
  block : {
   $1 = HEAP32[$0 + 4 >> 2];
   if (!HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 24 >> 2]) {
    break block
   }
   $1 = HEAP32[$0 + 4 >> 2];
   if (!std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn200100_5d_28_29_20const(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0)) {
    break block
   }
   $1 = HEAP32[$0 + 4 >> 2];
   if (!(HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 4 >> 2] & 8192)) {
    break block
   }
   $1 = HEAP32[$0 + 4 >> 2];
   if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn200100_5d_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 24 >> 2]) | 0) != -1) {
    break block
   }
   $0 = HEAP32[$0 + 4 >> 2];
   std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 1);
  }
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____ostreambuf_iterator_5babi_nn200100_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0) + 24 >> 2];
  return $0;
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____failed_5babi_nn200100_5d_28_29_20const($0) {
  return !HEAP32[$0 >> 2];
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____20std____2__basic_ostream_char_2c_20std____2__char_traits_char______put_num_integer_promote_5babi_nn200100_5d_int__28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($3 + 8 | 0, $0);
  block : {
   if (!HEAPU8[$3 + 8 | 0]) {
    break block
   }
   $4 = $3 + 4 | 0;
   std____2__ios_base__getloc_28_29_20const($4, HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
   $7 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4, 82448);
   std____2__locale___locale_28_29($4);
   $8 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____ostreambuf_iterator_5babi_nn200100_5d_28std____2__basic_ostream_char_2c_20std____2__char_traits_char____29($3, $0);
   $2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0;
   if (!HEAPU8[$2 + 80 | 0]) {
    $5 = __stack_pointer - 16 | 0;
    __stack_pointer = $5;
    $6 = $5 + 12 | 0;
    std____2__ios_base__getloc_28_29_20const($6, $2);
    $4 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const(std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($6), 32);
    std____2__locale___locale_28_29($6);
    __stack_pointer = $5 + 16 | 0;
    HEAP8[$2 + 76 | 0] = $4;
    HEAP8[$2 + 77 | 0] = $4 >>> 8;
    HEAP8[$2 + 78 | 0] = $4 >>> 16;
    HEAP8[$2 + 79 | 0] = $4 >>> 24;
    HEAP8[$2 + 80 | 0] = 1;
   }
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, HEAP32[$8 >> 2], $2, (HEAPU8[$2 + 76 | 0] | HEAPU8[$2 + 77 | 0] << 8 | (HEAPU8[$2 + 78 | 0] << 16 | HEAPU8[$2 + 79 | 0] << 24)) << 24 >> 24, $1) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____failed_5babi_nn200100_5d_28_29_20const($3 + 4 | 0)) {
    break block
   }
   std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 5);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($3 + 8 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28char_29($0, $1) {
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block : {
   $2 = HEAP32[$0 >> 2];
   if (!$2) {
    break block
   }
   $3 = HEAP32[$2 + 24 >> 2];
   block1 : {
    if (($3 | 0) == HEAP32[$2 + 28 >> 2]) {
     $1 = (((wasm2js_i32$1 = $2, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29($1)), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     break block1;
    }
    HEAP32[$2 + 24 >> 2] = $3 + 1;
    HEAP8[$3 | 0] = $1;
    $1 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29($1);
   }
   if (($1 | 0) != -1) {
    break block
   }
   HEAP32[$0 >> 2] = 0;
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, $1, $2) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2) | 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 61816;
  std____2__locale___locale_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29_1711($0) {
  $0 = $0 | 0;
  std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29($0);
  emscripten_builtin_free($0);
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____basic_streambuf_28_29($0) {
  return $1189($0, 61816);
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsgetn_28wchar_t__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  while (1) {
   block : {
    if (($2 | 0) <= ($6 | 0)) {
     break block
    }
    $3 = HEAP32[$0 + 12 >> 2];
    $5 = HEAP32[$0 + 16 >> 2];
    block1 : {
     if ($3 >>> 0 < $5 >>> 0) {
      HEAP32[$4 + 12 >> 2] = 2147483647;
      HEAP32[$4 + 8 >> 2] = $5 - $3 >> 2;
      HEAP32[$4 + 4 >> 2] = $2 - $6;
      $3 = HEAP32[long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($4 + 12 | 0, long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($4 + 8 | 0, $4 + 4 | 0)) >> 2];
      wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($1, HEAP32[$0 + 12 >> 2], $3);
      $5 = $3 << 2;
      HEAP32[$0 + 12 >> 2] = $5 + HEAP32[$0 + 12 >> 2];
      $1 = $1 + $5 | 0;
      break block1;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3 | 0) == -1) {
      break block
     }
     HEAP32[$1 >> 2] = $3;
     $3 = 1;
     $1 = $1 + 4 | 0;
    }
    $6 = $3 + $6 | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($0, $1, $2) {
  block : {
   if (!$2) {
    break block
   }
   $2 = $2 << 2;
   if (!$2) {
    break block
   }
   wasm2js_memory_copy($0, $1, $2);
  }
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  while (1) {
   block : {
    if (($2 | 0) <= ($4 | 0)) {
     break block
    }
    $5 = HEAP32[$0 + 24 >> 2];
    $6 = HEAP32[$0 + 28 >> 2];
    if ($5 >>> 0 >= $6 >>> 0) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1 >> 2]) | 0) == -1) {
      break block
     }
     $4 = $4 + 1 | 0;
     $1 = $1 + 4 | 0;
    } else {
     HEAP32[$3 + 12 >> 2] = $6 - $5 >> 2;
     HEAP32[$3 + 8 >> 2] = $2 - $4;
     $5 = HEAP32[long_20const__20std____2__min_5babi_nn200100_5d_long_2c_20std____2____less_void_2c_20void___28long_20const__2c_20long_20const__2c_20std____2____less_void_2c_20void__29($3 + 12 | 0, $3 + 8 | 0) >> 2];
     wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29(HEAP32[$0 + 24 >> 2], $1, $5);
     $6 = $5 << 2;
     HEAP32[$0 + 24 >> 2] = $6 + HEAP32[$0 + 24 >> 2];
     $4 = $4 + $5 | 0;
     $1 = $1 + $6 | 0;
    }
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  if (HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2]) {
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP8[$1 + 8 | 0] = 0;
   if (std____2__basic_ios_char_2c_20std____2__char_traits_char____good_5babi_nn200100_5d_28_29_20const(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0)) {
    $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 72 >> 2];
    if ($2) {
     std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29($2)
    }
    HEAP8[$1 + 8 | 0] = 1;
   }
   block : {
    if (!HEAPU8[$1 + 8 | 0]) {
     break block
    }
    if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn200100_5d_28_29(HEAP32[(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0) + 24 >> 2]) | 0) != -1) {
     break block
    }
    std____2__ios_base__setstate_5babi_ne200100_5d_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, 1);
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char____sentry___sentry_28_29($1 + 8 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82760);
 }
 
 function bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1) {
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t______test_for_eof_5babi_nn200100_5d_28_29_20const($0) ^ std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t______test_for_eof_5babi_nn200100_5d_28_29_20const($1) ^ 1;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0) {
  return std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sgetc_5babi_nn200100_5d_28_29(HEAP32[$0 >> 2]);
 }
 
 function std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($0, $1, $2) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0) {
  std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sbumpc_5babi_nn200100_5d_28_29(HEAP32[$0 >> 2]);
  return $0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sgetc_5babi_nn200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return HEAP32[$1 >> 2];
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sbumpc_5babi_nn200100_5d_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1 + 4;
  return HEAP32[$1 >> 2];
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28wchar_t_29($0, $1) {
  var $2 = 0, $3 = 0;
  block : {
   $2 = HEAP32[$0 >> 2];
   if (!$2) {
    break block
   }
   $3 = HEAP32[$2 + 24 >> 2];
   block1 : {
    if (($3 | 0) == HEAP32[$2 + 28 >> 2]) {
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 52 >> 2]]($2, $1) | 0;
     break block1;
    }
    HEAP32[$2 + 24 >> 2] = $3 + 4;
    HEAP32[$3 >> 2] = $1;
   }
   if (($1 | 0) != -1) {
    break block
   }
   HEAP32[$0 >> 2] = 0;
  }
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   $3 = HEAP32[$0 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0);
   void_20std____2____libcpp_deallocate_5babi_nn200100_5d_char__28std____2____type_identity_char___type__2c_20std____2____element_count_2c_20unsigned_20long_29($3);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($1);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($1, 0);
  HEAP8[$2 + 15 | 0] = 0;
  std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($1, $2 + 15 | 0);
  $1 = ($0 | 0) == ($1 | 0);
  block : {
   if (!($1 | $3)) {
    break block
   }
  }
  if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0) | $1)) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0)
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn200100_5d_28_29_20const($0, $1) {
  std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   return HEAP32[$0 >> 2]
  }
  return $0;
 }
 
 function std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $2;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0) {
  return HEAPU8[$0 + 11 | 0] >>> 7 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0) {
  return HEAPU8[$0 + 11 | 0] & 127;
 }
 
 function void_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_char__2c_200__28char__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  block1 : {
   $4 = std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn200100_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($1, $2);
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   if ($4 >>> 0 <= 2147483639) {
    block : {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($4)) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $4);
      $5 = $0;
      break block;
     }
     std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29($4) + 1 | 0);
     $5 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 >> 2] = $5;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
     HEAP32[$0 + 4 >> 2] = $4;
    }
    $0 = char__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______copy_non_overlapping_range_5babi_nn200100_5d_char__2c_20char___28char__2c_20char__2c_20char__29($1, $2, $5);
    HEAP8[$3 + 7 | 0] = 0;
    std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0, $3 + 7 | 0);
    __stack_pointer = $3 + 16 | 0;
    break block1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   return HEAP32[$0 + 4 >> 2]
  }
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0) - 1 | 0
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  block : {
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
   if ($2 >>> 0 < $1 >>> 0) {
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    $2 = $1 - $2 | 0;
    if ($2) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($0);
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
     if ($2 >>> 0 > $3 - $1 >>> 0) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, $1 + ($2 - $3 | 0) | 0, $1, $1)
     }
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
     std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20unsigned_20long_2c_20char_29($3 + $1 | 0, $2, 0);
     $5 = $0;
     $0 = $1 + $2 | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($5, $0);
     HEAP8[$4 + 15 | 0] = 0;
     std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0 + $3 | 0, $4 + 15 | 0);
    }
    __stack_pointer = $4 + 16 | 0;
    break block;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_5babi_nn200100_5d_28char__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0), $1);
  }
 }
 
 function std____2__char_traits_char___not_eof_5babi_nn200100_5d_28int_29($0) {
  return ($0 | 0) != -1 ? $0 : 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0) {
  return HEAP32[$0 + 8 >> 2] & 2147483647;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82776);
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function unsigned_20long_20const__20std____2__min_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_unsigned_20int_2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($1, $0);
  __stack_pointer = $2 + 16 | 0;
  return $3 ? $1 : $0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
 }
 
 function bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_long_2c_20long__28long_20const__2c_20long_20const__29_20const($0, $1) {
  return HEAP32[$0 >> 2] < HEAP32[$1 >> 2];
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  HEAP8[$0 + 11 | 0] = $1 & 127;
 }
 
 function std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0, $1) {
  HEAP8[$0 | 0] = HEAPU8[$1 | 0];
 }
 
 function void_20std____2____libcpp_deallocate_5babi_nn200100_5d_char__28std____2____type_identity_char___type__2c_20std____2____element_count_2c_20unsigned_20long_29($0) {
  if (std____2____is_overaligned_for_new_5babi_nn200100_5d_28unsigned_20long_29(1)) {
   emscripten_builtin_free($0);
   return;
  }
  emscripten_builtin_free($0);
 }
 
 function std____2____is_overaligned_for_new_5babi_nn200100_5d_28unsigned_20long_29($0) {
  return $0 >>> 0 > 8;
 }
 
 function std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn200100_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  return $1 - $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($0) {
  return $0 >>> 0 < 11;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 11) {
   $1 = $0 + 8 & -8;
   $0 = $1 - 1 | 0;
   $0 = ($0 | 0) == 11 ? $1 : $0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 8 >> 2] = $1 | -2147483648;
 }
 
 function char__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______copy_non_overlapping_range_5babi_nn200100_5d_char__2c_20char___28char__2c_20char__2c_20char__29($0, $1, $2) {
  var $3 = 0;
  $3 = $0;
  $0 = $1 - $0 | 0;
  char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $3, $0);
  return $0 + $2 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29() {
  std____2____throw_length_error_5babi_nn200100_5d_28char_20const__29(28114);
  wasm2js_trap();
 }
 
 function std____2____throw_length_error_5babi_nn200100_5d_28char_20const__29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 >> 2] = $0;
  std____2____libcpp_verbose_abort_28char_20const__2c_20____29(33825, $1);
  wasm2js_trap();
 }
 
 function std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  block : {
   if (std____2____is_overaligned_for_new_5babi_nn200100_5d_28unsigned_20long_29(1)) {
    $2 = operator_20new_28unsigned_20long_2c_20std__align_val_t_29($1, 1);
    break block;
   }
   $2 = operator_20new_28unsigned_20long_29($1);
  }
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char______test_for_eof_5babi_nn200100_5d_28_29_20const($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sgetc_5babi_nn200100_5d_28_29($1) | 0) != -1) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t______test_for_eof_5babi_nn200100_5d_28_29_20const($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   if ((std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sgetc_5babi_nn200100_5d_28_29($1) | 0) != -1) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1) | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_0__28char_20const__29($0, $1) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
 }
 
 function std____2__ios_base__getloc_28_29_20const($0, $1) {
  std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 28 | 0);
 }
 
 function unsigned_20long_20const__20std____2__max_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_unsigned_20int_2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($0, $1);
  __stack_pointer = $2 + 16 | 0;
  return $3 ? $1 : $0;
 }
 
 function std____2__ios_base___ios_base_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 62528;
  if (HEAP32[$0 + 28 >> 2]) {
   $1 = HEAP32[$0 + 40 >> 2];
   while (1) {
    if ($1) {
     $1 = $1 - 1 | 0;
     $2 = $1 << 2;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 32 >> 2] + $2 >> 2]](0, $0, HEAP32[$2 + HEAP32[$0 + 36 >> 2] >> 2]);
     continue;
    }
    break;
   };
   std____2__locale___locale_28_29($0 + 28 | 0);
   emscripten_builtin_free(HEAP32[$0 + 32 >> 2]);
   emscripten_builtin_free(HEAP32[$0 + 36 >> 2]);
   emscripten_builtin_free(HEAP32[$0 + 48 >> 2]);
   emscripten_builtin_free(HEAP32[$0 + 60 >> 2]);
  }
  return $0 | 0;
 }
 
 function std____2__ios_base___ios_base_28_29_1860($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__ios_base___ios_base_28_29($0));
 }
 
 function ungetc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = -1;
  block : {
   if (($0 | 0) == -1) {
    break block
   }
   $4 = HEAP32[$1 + 76 >> 2] < 0;
   block2 : {
    $2 = HEAP32[$1 + 4 >> 2];
    block1 : {
     if (!$2) {
      __toread($1);
      $2 = HEAP32[$1 + 4 >> 2];
      if (!$2) {
       break block1
      }
     }
     if (HEAP32[$1 + 44 >> 2] - 8 >>> 0 < $2 >>> 0) {
      break block2
     }
    }
    if ($4) {
     break block
    }
    return -1;
   }
   $2 = $2 - 1 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP8[$2 | 0] = $0;
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
   $3 = $0 & 255;
  }
  return $3;
 }
 
 function getc($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 76 >> 2];
  block1 : {
   if (!(($1 | 0) >= 0 & (!$1 | HEAP32[19625] != ($1 & 1073741823)))) {
    $1 = HEAP32[$0 + 4 >> 2];
    if (($1 | 0) != HEAP32[$0 + 8 >> 2]) {
     HEAP32[$0 + 4 >> 2] = $1 + 1;
     $0 = HEAPU8[$1 | 0];
     break block1;
    }
    $0 = __uflow($0);
    break block1;
   }
   $2 = $0 + 76 | 0;
   a_cas($2);
   $1 = HEAP32[$0 + 4 >> 2];
   block2 : {
    if (($1 | 0) != HEAP32[$0 + 8 >> 2]) {
     HEAP32[$0 + 4 >> 2] = $1 + 1;
     $0 = HEAPU8[$1 | 0];
     break block2;
    }
    $0 = __uflow($0);
   }
   a_swap($2);
  }
  return $0;
 }
 
 function fwide($0) {
  if (!HEAP32[$0 + 136 >> 2]) {
   HEAP32[$0 + 136 >> 2] = HEAP32[HEAP32[19643] >> 2] ? 62656 : 62632
  }
  if (!HEAP32[$0 + 72 >> 2]) {
   HEAP32[$0 + 72 >> 2] = 1
  }
 }
 
 function mbtowc($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if (!$1) {
   return 0
  }
  block1 : {
   block : {
    if (!$2) {
     break block
    }
    $3 = HEAPU8[$1 | 0];
    $4 = $3 << 24 >> 24;
    if (($4 | 0) >= 0) {
     if ($0) {
      HEAP32[$0 >> 2] = $3
     }
     return ($4 | 0) != 0;
    }
    if (!HEAP32[HEAP32[19643] >> 2]) {
     $1 = 1;
     if (!$0) {
      break block1
     }
     HEAP32[$0 >> 2] = $4 & 57343;
     return 1;
    }
    $3 = $3 - 194 | 0;
    if ($3 >>> 0 > 50) {
     break block
    }
    $3 = HEAP32[($3 << 2) + 61056 >> 2];
    if ($3 << Math_imul($2, 6) - 6 < 0 & $2 >>> 0 <= 3) {
     break block
    }
    $2 = HEAPU8[$1 + 1 | 0];
    $4 = $2 >>> 3 | 0;
    if (($4 - 16 | $4 + ($3 >> 26)) >>> 0 > 7) {
     break block
    }
    $2 = $2 - 128 | $3 << 6;
    if (($2 | 0) >= 0) {
     $1 = 2;
     if (!$0) {
      break block1
     }
     HEAP32[$0 >> 2] = $2;
     return 2;
    }
    $3 = HEAPU8[$1 + 2 | 0] - 128 | 0;
    if ($3 >>> 0 > 63) {
     break block
    }
    $4 = $3;
    $3 = $2 << 6;
    $2 = $4 | $3;
    if (($3 | 0) >= 0) {
     $1 = 3;
     if (!$0) {
      break block1
     }
     HEAP32[$0 >> 2] = $2;
     return 3;
    }
    $3 = HEAPU8[$1 + 3 | 0] - 128 | 0;
    if ($3 >>> 0 > 63) {
     break block
    }
    $1 = 4;
    if (!$0) {
     break block1
    }
    HEAP32[$0 >> 2] = $3 | $2 << 6;
    return 4;
   }
   HEAP32[19563] = 25;
   $1 = -1;
  }
  return $1;
 }
 
 function __fgetwc_unlocked($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $5 = HEAP32[19643];
  if (HEAP32[$0 + 72 >> 2] <= 0) {
   fwide($0)
  }
  HEAP32[19643] = HEAP32[$0 + 136 >> 2];
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block3 : {
   block1 : {
    block : {
     $1 = HEAP32[$0 + 4 >> 2];
     $3 = HEAP32[$0 + 8 >> 2];
     if (($1 | 0) == ($3 | 0)) {
      break block
     }
     $1 = mbtowc($2 + 28 | 0, $1, $3 - $1 | 0);
     if (($1 | 0) == -1) {
      break block
     }
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + ($1 >>> 0 <= 1 ? 1 : $1);
     break block1;
    }
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    $1 = 0;
    while (1) {
     $3 = $1;
     block2 : {
      $1 = HEAP32[$0 + 4 >> 2];
      if (($1 | 0) != HEAP32[$0 + 8 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $1 + 1;
       HEAP8[$2 + 15 | 0] = HEAPU8[$1 | 0];
       break block2;
      }
      $1 = __uflow($0);
      HEAP8[$2 + 15 | 0] = $1;
      if (($1 | 0) >= 0) {
       break block2
      }
      $1 = -1;
      if (!($3 & 1)) {
       break block3
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
      HEAP32[19563] = 25;
      break block3;
     }
     $1 = 1;
     $4 = mbrtowc($2 + 28 | 0, $2 + 15 | 0, 1, $2 + 16 | 0);
     if (($4 | 0) == -2) {
      continue
     }
     break;
    };
    $1 = -1;
    if (($4 | 0) != -1) {
     break block1
    }
    if (!($3 & 1)) {
     break block3
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
    ungetc(HEAPU8[$2 + 15 | 0], $0);
    break block3;
   }
   $1 = HEAP32[$2 + 28 >> 2];
  }
  __stack_pointer = $2 + 32 | 0;
  HEAP32[19643] = $5;
  return $1;
 }
 
 function __fputwc_unlocked($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $5 = HEAP32[19643];
  if (HEAP32[$1 + 72 >> 2] <= 0) {
   fwide($1)
  }
  HEAP32[19643] = HEAP32[$1 + 136 >> 2];
  block1 : {
   block3 : {
    block2 : {
     if ($0 >>> 0 <= 127) {
      block : {
       if (HEAP32[$1 + 80 >> 2] == ($0 | 0)) {
        break block
       }
       $2 = HEAP32[$1 + 20 >> 2];
       if (($2 | 0) == HEAP32[$1 + 16 >> 2]) {
        break block
       }
       HEAP32[$1 + 20 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $0;
       break block1;
      }
      $0 = __overflow($1, $0);
      break block2;
     }
     $2 = HEAP32[$1 + 20 >> 2];
     if (HEAPU32[$1 + 16 >> 2] > $2 + 4 >>> 0) {
      $2 = wctomb($2, $0);
      if (($2 | 0) < 0) {
       break block3
      }
      HEAP32[$1 + 20 >> 2] = $2 + HEAP32[$1 + 20 >> 2];
      break block2;
     }
     $4 = $3 + 12 | 0;
     $2 = wctomb($4, $0);
     if (($2 | 0) < 0) {
      break block3
     }
     if (__fwritex($4, $2, $1) >>> 0 < $2 >>> 0) {
      break block3
     }
    }
    if (($0 | 0) != -1) {
     break block1
    }
   }
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 32;
   $0 = -1;
  }
  HEAP32[19643] = $5;
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____basic_streambuf_28_29($0);
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 >> 2] = 62788;
  $1 = $3 + 12 | 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn200100_5d_28_29_20const($1, $0);
  $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  HEAP32[$0 + 40 >> 2] = $2;
  HEAP32[$0 + 36 >> 2] = $4;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const($4)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char____basic_ios_5babi_nn200100_5d_28_29($0 + 4 | 0);
  HEAP32[$0 >> 2] = 61772;
  HEAP32[$2 >> 2] = 61792;
  std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(HEAP32[15440] + $0 | 0, $1);
 }
 
 function std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____basic_streambuf_28_29($0);
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 >> 2] = 62992;
  $1 = $3 + 12 | 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char____getloc_5babi_nn200100_5d_28_29_20const($1, $0);
  $4 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  HEAP32[$0 + 40 >> 2] = $2;
  HEAP32[$0 + 36 >> 2] = $4;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const($4)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ostream_5babi_nn200100_5d_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ios_5babi_nn200100_5d_28_29($0 + 4 | 0);
  HEAP32[$0 >> 2] = 61932;
  HEAP32[$2 >> 2] = 61952;
  std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29(HEAP32[15480] + $0 | 0, $1);
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____basic_ios_5babi_nn200100_5d_28_29($0) {
  $0 = std____2__ios_base__ios_base_5babi_nn200100_5d_28_29($0);
  HEAP32[$0 >> 2] = 61976;
  return $0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char____init_5babi_nn200100_5d_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char____29($0, $1) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 4098;
  HEAP32[$0 + 8 >> 2] = 6;
  HEAP32[$0 + 16 >> 2] = !$1;
  wasm2js_memory_fill($0 + 32 | 0, 0, 40);
  std____2__locale__locale_28_29($0 + 28 | 0);
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 0;
  HEAP8[$0 + 76 | 0] = 255;
  HEAP8[$0 + 77 | 0] = 255;
  HEAP8[$0 + 78 | 0] = 255;
  HEAP8[$0 + 79 | 0] = 255;
 }
 
 function std____2__ios_base__setf_5babi_nn200100_5d_28unsigned_20int_29($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 }
 
 function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t____basic_ios_5babi_nn200100_5d_28_29($0) {
  $0 = std____2__ios_base__ios_base_5babi_nn200100_5d_28_29($0);
  HEAP32[$0 >> 2] = 62252;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82784);
 }
 
 function __cxx_global_array_dtor_1($0) {
  $0 = $0 | 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29(81392);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char____flush_28_29(81744);
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29(81480);
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t____flush_28_29(81832);
 }
 
 function std____2____stdinbuf_char______stdinbuf_28_29($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29($0));
 }
 
 function std____2____stdinbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn200100_5d_28_29($1)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const(HEAP32[$0 + 36 >> 2])), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   std____2____throw_runtime_error_28char_20const__29(25548);
   wasm2js_trap();
  }
 }
 
 function std____2____stdinbuf_char___underflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_char_____getchar_28bool_29($0, 0) | 0;
 }
 
 function std____2____stdinbuf_char_____getchar_28bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  block : {
   if (HEAPU8[$0 + 52 | 0] == 1) {
    $2 = HEAP32[$0 + 48 >> 2];
    if (!$1) {
     break block
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break block;
   }
   block1 : {
    if (HEAPU8[$0 + 53 | 0] == 1) {
     $2 = getc(HEAP32[$0 + 32 >> 2]);
     if (($2 | 0) != -1) {
      HEAP8[$3 + 24 | 0] = $2
     }
     if (($2 | 0) == -1) {
      break block1
     }
     $2 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$3 + 24 | 0]);
     block2 : {
      if (!$1) {
       if (!std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20char_29($2, HEAP32[$0 + 32 >> 2])) {
        break block1
       }
       break block2;
      }
      HEAP32[$0 + 48 >> 2] = $2;
     }
     $2 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$3 + 24 | 0]);
     break block;
    }
    HEAP32[$3 + 24 >> 2] = 1;
    $4 = HEAP32[int_20const__20std____2__max_5babi_nn200100_5d_int_2c_20std____2____less_void_2c_20void___28int_20const__2c_20int_20const__2c_20std____2____less_void_2c_20void__29($3 + 24 | 0, $0 + 44 | 0) >> 2];
    $5 = ($4 | 0) > 0 ? $4 : 0;
    while (1) {
     if (($2 | 0) != ($5 | 0)) {
      $6 = getc(HEAP32[$0 + 32 >> 2]);
      if (($6 | 0) == -1) {
       break block1
      }
      HEAP8[($3 + 24 | 0) + $2 | 0] = $6;
      $2 = $2 + 1 | 0;
      continue;
     }
     break;
    };
    $8 = $3 + 24 | 0;
    block5 : {
     while (1) {
      block4 : {
       $5 = HEAP32[$0 + 40 >> 2];
       $2 = HEAP32[$5 >> 2];
       $9 = HEAP32[$5 + 4 >> 2];
       $7 = $3 + 24 | 0;
       $6 = $7 + $4 | 0;
       block3 : {
        switch (std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], $5, $7, $6, $3 + 16 | 0, $3 + 23 | 0, $8, $3 + 12 | 0) - 1 | 0) {
        case 1:
         break block1;
        case 0:
         break block3;
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       $5 = HEAP32[$0 + 40 >> 2];
       HEAP32[$5 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = $9;
       if (($4 | 0) == 8) {
        break block1
       }
       $2 = getc(HEAP32[$0 + 32 >> 2]);
       if (($2 | 0) == -1) {
        break block1
       }
       HEAP8[$6 | 0] = $2;
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     };
     HEAP8[$3 + 23 | 0] = HEAPU8[$3 + 24 | 0];
    }
    block6 : {
     if (!$1) {
      while (1) {
       if (($4 | 0) <= 0) {
        break block6
       }
       $4 = $4 - 1 | 0;
       if ((ungetc(std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$4 + ($3 + 24 | 0) | 0]), HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break block1;
      }
     }
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$3 + 23 | 0])), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    }
    $2 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$3 + 23 | 0]);
    break block;
   }
   $2 = -1;
  }
  __stack_pointer = $3 + 32 | 0;
  return $2;
 }
 
 function std____2____stdinbuf_char___uflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_char_____getchar_28bool_29($0, 1) | 0;
 }
 
 function std____2____stdinbuf_char___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block : {
   if (($1 | 0) == -1) {
    if (HEAPU8[$0 + 52 | 0]) {
     break block
    }
    $1 = HEAP32[$0 + 48 >> 2];
    HEAP8[$0 + 52 | 0] = ($1 | 0) != -1;
    break block;
   }
   block2 : {
    block1 : {
     $3 = HEAPU8[$0 + 52 | 0];
     if (!(!($3 & 1) | HEAPU8[$0 + 53 | 0] != 1)) {
      if (std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20char_29(HEAP32[$0 + 48 >> 2], HEAP32[$0 + 32 >> 2])) {
       break block1
      }
      break block2;
     }
     if (!($3 & 1)) {
      break block1
     }
     HEAP8[$2 + 19 | 0] = HEAP32[$0 + 48 >> 2] << 24 >> 24;
     block4 : {
      block3 : {
       $3 = $2 + 20 | 0;
       switch (std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $2 + 19 | 0, $3, $2 + 12 | 0, $2 + 24 | 0, $2 + 32 | 0, $3) - 1 | 0) {
       case 0:
       case 1:
        break block2;
       case 2:
        break block3;
       default:
        break block4;
       };
      }
      $3 = HEAP32[$0 + 48 >> 2];
      HEAP32[$2 + 20 >> 2] = $2 + 25;
      HEAP8[$2 + 24 | 0] = $3;
     }
     while (1) {
      $3 = HEAP32[$2 + 20 >> 2];
      if ($3 >>> 0 <= $2 + 24 >>> 0) {
       break block1
      }
      $3 = $3 - 1 | 0;
      HEAP32[$2 + 20 >> 2] = $3;
      if ((ungetc(HEAP8[$3 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue
      }
      break;
     };
     break block2;
    }
    HEAP8[$0 + 52 | 0] = 1;
    HEAP32[$0 + 48 >> 2] = $1;
    break block;
   }
   $1 = -1;
  }
  __stack_pointer = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20char_29($0, $1) {
  return (ungetc($0, $1) | 0) != -1;
 }
 
 function int_20const__20std____2__max_5babi_nn200100_5d_int_2c_20std____2____less_void_2c_20void___28int_20const__2c_20int_20const__2c_20std____2____less_void_2c_20void__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_long_2c_20long__28long_20const__2c_20long_20const__29_20const($0, $1);
  __stack_pointer = $2 + 16 | 0;
  return $3 ? $1 : $0;
 }
 
 function std____2__ios_base__ios_base_5babi_nn200100_5d_28_29($0) {
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 >> 2] = 62528;
  return $0;
 }
 
 function std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_char_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const($1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 }
 
 function std____2____stdoutbuf_char___sync_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $4 = $1 + 16 | 0;
  block : {
   while (1) {
    $3 = HEAP32[$0 + 36 >> 2];
    $2 = $1 + 8 | 0;
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, HEAP32[$0 + 40 >> 2], $2, $4, $1 + 4 | 0) | 0;
    $3 = -1;
    $6 = $2;
    $2 = HEAP32[$1 + 4 >> 2] - $2 | 0;
    if ((fwrite($6, 1, $2, HEAP32[$0 + 32 >> 2]) | 0) != ($2 | 0)) {
     break block
    }
    block1 : {
     switch ($5 - 1 | 0) {
     case 1:
      break block;
     case 0:
      continue;
     default:
      break block1;
     };
    }
    break;
   };
   $3 = fflush(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $3 | 0;
 }
 
 function std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block : {
   if (!HEAPU8[$0 + 44 | 0]) {
    $2 = ($2 | 0) > 0 ? $2 : 0;
    while (1) {
     if (($2 | 0) == ($3 | 0)) {
      break block
     }
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_5babi_nn200100_5d_28char_29(HEAP8[$1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      return $3 | 0
     } else {
      $1 = $1 + 1 | 0;
      $3 = $3 + 1 | 0;
      continue;
     }
    };
   }
   $2 = fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2]);
  }
  return $2 | 0;
 }
 
 function std____2____stdoutbuf_char___overflow_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block2 : {
   block1 : {
    block : {
     if (($1 | 0) == -1) {
      break block
     }
     $3 = $1 << 24 >> 24;
     HEAP8[$2 + 23 | 0] = $3;
     if (HEAPU8[$0 + 44 | 0] == 1) {
      $4 = HEAP32[$0 + 32 >> 2];
      $0 = __stack_pointer - 16 | 0;
      __stack_pointer = $0;
      HEAP8[$0 + 15 | 0] = $3;
      $3 = fwrite($0 + 15 | 0, 1, 1, $4);
      __stack_pointer = $0 + 16 | 0;
      if (($3 | 0) != 1) {
       break block1
      }
      break block;
     }
     $5 = $2 + 24 | 0;
     HEAP32[$2 + 16 >> 2] = $5;
     $7 = $2 + 32 | 0;
     $3 = $2 + 23 | 0;
     while (1) {
      $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $5, $2 + 12 | 0, $2 + 24 | 0, $7, $2 + 16 | 0);
      if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
       break block1
      }
      if (($4 | 0) == 3) {
       if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
        break block
       }
       break block1;
      }
      if ($4 >>> 0 > 1) {
       break block1
      }
      $6 = $2 + 24 | 0;
      $3 = HEAP32[$2 + 16 >> 2] - $6 | 0;
      if ((fwrite($6, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
       break block1
      }
      $3 = HEAP32[$2 + 12 >> 2];
      if (($4 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = std____2__char_traits_char___not_eof_5babi_nn200100_5d_28int_29($1);
    break block2;
   }
   $0 = -1;
  }
  __stack_pointer = $2 + 32 | 0;
  return $0 | 0;
 }
 
 function std____2____stdinbuf_wchar_t______stdinbuf_28_29($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29($0));
 }
 
 function std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pubsync_5babi_nn200100_5d_28_29($1)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const(HEAP32[$0 + 36 >> 2])), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   std____2____throw_runtime_error_28char_20const__29(25548);
   wasm2js_trap();
  }
 }
 
 function std____2____stdinbuf_wchar_t___underflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 0) | 0;
 }
 
 function std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  block : {
   if (HEAPU8[$0 + 52 | 0] == 1) {
    $2 = HEAP32[$0 + 48 >> 2];
    if (!$1) {
     break block
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break block;
   }
   block2 : {
    if (HEAPU8[$0 + 53 | 0] == 1) {
     $2 = HEAP32[$0 + 32 >> 2];
     block1 : {
      if (HEAP32[$2 + 76 >> 2] < 0) {
       $2 = __fgetwc_unlocked($2);
       break block1;
      }
      $2 = __fgetwc_unlocked($2);
     }
     if (($2 | 0) != -1) {
      HEAP32[$3 + 24 >> 2] = $2
     }
     if (($2 | 0) == -1) {
      break block2
     }
     $2 = HEAP32[$3 + 24 >> 2];
     block3 : {
      if (!$1) {
       if (!std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20wchar_t_29($2, HEAP32[$0 + 32 >> 2])) {
        break block2
       }
       break block3;
      }
      HEAP32[$0 + 48 >> 2] = $2;
     }
     $2 = HEAP32[$3 + 24 >> 2];
     break block;
    }
    HEAP32[$3 + 24 >> 2] = 1;
    $4 = HEAP32[int_20const__20std____2__max_5babi_nn200100_5d_int_2c_20std____2____less_void_2c_20void___28int_20const__2c_20int_20const__2c_20std____2____less_void_2c_20void__29($3 + 24 | 0, $0 + 44 | 0) >> 2];
    $5 = ($4 | 0) > 0 ? $4 : 0;
    while (1) {
     if (($2 | 0) != ($5 | 0)) {
      $6 = getc(HEAP32[$0 + 32 >> 2]);
      if (($6 | 0) == -1) {
       break block2
      }
      HEAP8[($3 + 24 | 0) + $2 | 0] = $6;
      $2 = $2 + 1 | 0;
      continue;
     }
     break;
    };
    $8 = $3 + 24 | 0;
    block6 : {
     while (1) {
      block5 : {
       $5 = HEAP32[$0 + 40 >> 2];
       $2 = HEAP32[$5 >> 2];
       $9 = HEAP32[$5 + 4 >> 2];
       $7 = $3 + 24 | 0;
       $6 = $7 + $4 | 0;
       block4 : {
        switch (std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], $5, $7, $6, $3 + 16 | 0, $3 + 20 | 0, $8, $3 + 12 | 0) - 1 | 0) {
        case 1:
         break block2;
        case 0:
         break block4;
        case 2:
         break block5;
        default:
         break block6;
        };
       }
       $5 = HEAP32[$0 + 40 >> 2];
       HEAP32[$5 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = $9;
       if (($4 | 0) == 8) {
        break block2
       }
       $2 = getc(HEAP32[$0 + 32 >> 2]);
       if (($2 | 0) == -1) {
        break block2
       }
       HEAP8[$6 | 0] = $2;
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     };
     HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 24 | 0];
    }
    block7 : {
     if (!$1) {
      while (1) {
       if (($4 | 0) <= 0) {
        break block7
       }
       $4 = $4 - 1 | 0;
       if ((ungetc(HEAP8[$4 + ($3 + 24 | 0) | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break block2;
      }
     }
     HEAP32[$0 + 48 >> 2] = HEAP32[$3 + 20 >> 2];
    }
    $2 = HEAP32[$3 + 20 >> 2];
    break block;
   }
   $2 = -1;
  }
  __stack_pointer = $3 + 32 | 0;
  return $2;
 }
 
 function std____2____stdinbuf_wchar_t___uflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 1) | 0;
 }
 
 function std____2____stdinbuf_wchar_t___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block : {
   if (($1 | 0) == -1) {
    if (HEAPU8[$0 + 52 | 0]) {
     break block
    }
    $1 = HEAP32[$0 + 48 >> 2];
    HEAP8[$0 + 52 | 0] = ($1 | 0) != -1;
    break block;
   }
   block2 : {
    block1 : {
     $3 = HEAPU8[$0 + 52 | 0];
     if (!(!($3 & 1) | HEAPU8[$0 + 53 | 0] != 1)) {
      if (std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20wchar_t_29(HEAP32[$0 + 48 >> 2], HEAP32[$0 + 32 >> 2])) {
       break block1
      }
      break block2;
     }
     if (!($3 & 1)) {
      break block1
     }
     HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
     block4 : {
      block3 : {
       $3 = $2 + 20 | 0;
       switch (std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $2 + 16 | 0, $3, $2 + 12 | 0, $2 + 24 | 0, $2 + 32 | 0, $3) - 1 | 0) {
       case 0:
       case 1:
        break block2;
       case 2:
        break block3;
       default:
        break block4;
       };
      }
      $3 = HEAP32[$0 + 48 >> 2];
      HEAP32[$2 + 20 >> 2] = $2 + 25;
      HEAP8[$2 + 24 | 0] = $3;
     }
     while (1) {
      $3 = HEAP32[$2 + 20 >> 2];
      if ($3 >>> 0 <= $2 + 24 >>> 0) {
       break block1
      }
      $3 = $3 - 1 | 0;
      HEAP32[$2 + 20 >> 2] = $3;
      if ((ungetc(HEAP8[$3 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue
      }
      break;
     };
     break block2;
    }
    HEAP8[$0 + 52 | 0] = 1;
    HEAP32[$0 + 48 >> 2] = $1;
    break block;
   }
   $1 = -1;
  }
  __stack_pointer = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function std____2____do_ungetc_28int_2c_20_IO_FILE__2c_20wchar_t_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $6 = HEAP32[19643];
  if (HEAP32[$1 + 72 >> 2] <= 0) {
   fwide($1)
  }
  HEAP32[19643] = HEAP32[$1 + 136 >> 2];
  $2 = -1;
  if (HEAP32[$1 + 4 >> 2]) {
   $3 = 0
  } else {
   __toread($1);
   $3 = !HEAP32[$1 + 4 >> 2];
  }
  block : {
   if ($3 | ($0 | 0) == -1) {
    break block
   }
   $3 = wcrtomb($4 + 12 | 0, $0);
   if (($3 | 0) < 0) {
    break block
   }
   $5 = HEAP32[$1 + 4 >> 2];
   if ($5 >>> 0 < (HEAP32[$1 + 44 >> 2] + $3 | 0) - 8 >>> 0) {
    break block
   }
   block1 : {
    if ($0 >>> 0 <= 127) {
     $2 = $5 - 1 | 0;
     HEAP32[$1 + 4 >> 2] = $2;
     HEAP8[$2 | 0] = $0;
     break block1;
    }
    $2 = $5 - $3 | 0;
    HEAP32[$1 + 4 >> 2] = $2;
    __memcpy($2, $4 + 12 | 0, $3);
   }
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
   $2 = $0;
  }
  HEAP32[19643] = $6;
  __stack_pointer = $4 + 16 | 0;
  return ($2 | 0) != -1;
 }
 
 function std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_5babi_nn200100_5d_28_29_20const($1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 }
 
 function std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  block : {
   if (!HEAPU8[$0 + 44 | 0]) {
    $2 = ($2 | 0) > 0 ? $2 : 0;
    while (1) {
     if (($2 | 0) == ($3 | 0)) {
      break block
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1 >> 2]) | 0) == -1) {
      return $3 | 0
     } else {
      $1 = $1 + 4 | 0;
      $3 = $3 + 1 | 0;
      continue;
     }
    };
   }
   $2 = fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2]);
  }
  return $2 | 0;
 }
 
 function std____2____stdoutbuf_wchar_t___overflow_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block3 : {
   block2 : {
    block : {
     if (($1 | 0) == -1) {
      break block
     }
     HEAP32[$2 + 20 >> 2] = $1;
     if (HEAPU8[$0 + 44 | 0] == 1) {
      $0 = HEAP32[$0 + 32 >> 2];
      block1 : {
       if (HEAP32[$0 + 76 >> 2] < 0) {
        $0 = __fputwc_unlocked($1, $0);
        break block1;
       }
       $0 = __fputwc_unlocked($1, $0);
      }
      if (($0 | 0) == -1) {
       break block2
      }
      break block;
     }
     $5 = $2 + 24 | 0;
     HEAP32[$2 + 16 >> 2] = $5;
     $7 = $2 + 32 | 0;
     $3 = $2 + 20 | 0;
     while (1) {
      $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_5babi_nn200100_5d_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $5, $2 + 12 | 0, $2 + 24 | 0, $7, $2 + 16 | 0);
      if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
       break block2
      }
      if (($4 | 0) == 3) {
       if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
        break block
       }
       break block2;
      }
      if ($4 >>> 0 > 1) {
       break block2
      }
      $6 = $2 + 24 | 0;
      $3 = HEAP32[$2 + 16 >> 2] - $6 | 0;
      if ((fwrite($6, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
       break block2
      }
      $3 = HEAP32[$2 + 12 >> 2];
      if (($4 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = std____2__char_traits_char___not_eof_5babi_nn200100_5d_28int_29($1);
    break block3;
   }
   $0 = -1;
  }
  __stack_pointer = $2 + 32 | 0;
  return $0 | 0;
 }
 
 function toupper($0) {
  return $0 - 97 >>> 0 < 26 ? $0 & 95 : $0;
 }
 
 function __isxdigit_l($0) {
  return $0 - 48 >>> 0 < 10 | ($0 | 32) - 97 >>> 0 < 6;
 }
 
 function __isdigit_l($0) {
  return $0 - 48 >>> 0 < 10;
 }
 
 function __get_locale($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   if (HEAPU8[$1 | 0]) {
    break block
   }
   $1 = getenv(31542);
   if (HEAPU8[$1 | 0] ? $1 : 0) {
    break block
   }
   $1 = getenv(Math_imul($0, 12) + 63088 | 0);
   if (HEAPU8[$1 | 0] ? $1 : 0) {
    break block
   }
   $1 = getenv(31749);
   if (HEAPU8[$1 | 0] ? $1 : 0) {
    break block
   }
   $1 = 33097;
  }
  block1 : {
   while (1) {
    $3 = HEAPU8[$1 + $2 | 0];
    if (!(!$3 | ($3 | 0) == 47)) {
     $3 = 23;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 23) {
      continue
     }
     break block1;
    }
    break;
   };
   $3 = $2;
  }
  $4 = 33097;
  block6 : {
   block5 : {
    $2 = HEAPU8[$1 | 0];
    block4 : {
     block3 : {
      if (!(HEAPU8[$1 + $3 | 0] | ($2 | 0) == 46)) {
       $4 = $1;
       if (($2 | 0) != 67) {
        break block3
       }
      }
      if (!HEAPU8[$4 + 1 | 0]) {
       break block4
      }
     }
     if (!strcmp($4, 33097)) {
      break block4
     }
     if (strcmp($4, 31067)) {
      break block5
     }
    }
    if (!$0) {
     $2 = 62596;
     if (HEAPU8[$4 + 1 | 0] == 46) {
      break block6
     }
    }
    return 0;
   }
   $2 = HEAP32[20571];
   if ($2) {
    while (1) {
     if (!strcmp($4, $2 + 8 | 0)) {
      break block6
     }
     $2 = HEAP32[$2 + 32 >> 2];
     if ($2) {
      continue
     }
     break;
    }
   }
   $2 = emscripten_builtin_malloc(36);
   if ($2) {
    $1 = HEAP32[15650];
    HEAP32[$2 >> 2] = HEAP32[15649];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = $2 + 8 | 0;
    __memcpy($1, $4, $3);
    HEAP8[$1 + $3 | 0] = 0;
    HEAP32[$2 + 32 >> 2] = HEAP32[20571];
    HEAP32[20571] = $2;
   }
   $2 = $0 | $2 ? $2 : 62596;
  }
  return $2;
 }
 
 function __loc_is_allocated($0) {
  return ($0 | 0) != 0 & ($0 | 0) != 62632 & ($0 | 0) != 62656 & ($0 | 0) != 82288 & ($0 | 0) != 82312;
 }
 
 function freelocale($0) {
  if (__loc_is_allocated($0)) {
   emscripten_builtin_free($0)
  }
 }
 
 function __uselocale($0) {
  var $1 = 0;
  $1 = HEAP32[19643];
  if ($0) {
   HEAP32[19643] = ($0 | 0) == -1 ? 78292 : $0
  }
  return ($1 | 0) == 78292 ? -1 : $1;
 }
 
 function mbsrtowcs($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = HEAP32[$1 >> 2];
  block4 : {
   block19 : {
    block18 : {
     block10 : {
      block12 : {
       block8 : {
        block6 : {
         block7 : {
          block5 : {
           block1 : {
            block2 : {
             block : {
              if (!$3) {
               break block
              }
              $6 = HEAP32[$3 >> 2];
              if (!$6) {
               break block
              }
              if (!$0) {
               $3 = $2;
               break block1;
              }
              HEAP32[$3 >> 2] = 0;
              $3 = $2;
              break block2;
             }
             block3 : {
              if (!HEAP32[HEAP32[19643] >> 2]) {
               if (!$0) {
                break block3
               }
               if (!$2) {
                break block4
               }
               $6 = $2;
               while (1) {
                $3 = HEAP8[$4 | 0];
                if ($3) {
                 HEAP32[$0 >> 2] = $3 & 57343;
                 $0 = $0 + 4 | 0;
                 $4 = $4 + 1 | 0;
                 $6 = $6 - 1 | 0;
                 if ($6) {
                  continue
                 }
                 break block4;
                }
                break;
               };
               HEAP32[$0 >> 2] = 0;
               HEAP32[$1 >> 2] = 0;
               return $2 - $6 | 0;
              }
              $3 = $2;
              if (!$0) {
               break block5
              }
              break block6;
             }
             return strlen($4);
            }
            $5 = 1;
            break block6;
           }
           $5 = 0;
           break block7;
          }
          $5 = 1;
         }
         while (1) {
          if (!$5) {
           $5 = HEAPU8[$4 | 0] >>> 3 | 0;
           if (($5 - 16 | $5 + ($6 >> 26)) >>> 0 > 7) {
            break block8
           }
           $5 = $4 + 1 | 0;
           block9 : {
            if (!($6 & 33554432)) {
             break block9
            }
            if (HEAP8[$5 | 0] >= -64) {
             $4 = $4 - 1 | 0;
             break block10;
            }
            $5 = $4 + 2 | 0;
            if (!($6 & 524288)) {
             break block9
            }
            if (HEAP8[$5 | 0] >= -64) {
             $4 = $4 - 1 | 0;
             break block10;
            }
            $5 = $4 + 3 | 0;
           }
           $4 = $5;
           $3 = $3 - 1 | 0;
           $5 = 1;
           continue;
          }
          while (1) {
           $6 = HEAP8[$4 | 0];
           block11 : {
            if ($4 & 3 | ($6 | 0) <= 0) {
             break block11
            }
            $6 = HEAP32[$4 >> 2];
            if (($6 | $6 - 16843009) & -2139062144) {
             break block11
            }
            while (1) {
             $3 = $3 - 4 | 0;
             $6 = HEAP32[$4 + 4 >> 2];
             $4 = $4 + 4 | 0;
             if (!(($6 - 16843009 | $6) & -2139062144)) {
              continue
             }
             break;
            };
           }
           if ($6 << 24 >> 24 > 0) {
            $3 = $3 - 1 | 0;
            $4 = $4 + 1 | 0;
            continue;
           }
           break;
          };
          $5 = ($6 & 255) - 194 | 0;
          if ($5 >>> 0 > 50) {
           break block12
          }
          $4 = $4 + 1 | 0;
          $6 = HEAP32[($5 << 2) + 61056 >> 2];
          $5 = 0;
          continue;
         };
        }
        while (1) {
         if (!$5) {
          if (!$3) {
           break block4
          }
          while (1) {
           block13 : {
            $5 = HEAPU8[$4 | 0];
            $6 = $5 << 24 >> 24;
            if (($6 | 0) <= 0) {
             break block13
            }
            if (!($4 & 3 | $3 >>> 0 < 5)) {
             block14 : {
              while (1) {
               $6 = HEAP32[$4 >> 2];
               if (($6 | $6 - 16843009) & -2139062144) {
                break block14
               }
               HEAP32[$0 >> 2] = $6 & 255;
               HEAP32[$0 + 4 >> 2] = HEAPU8[$4 + 1 | 0];
               HEAP32[$0 + 8 >> 2] = HEAPU8[$4 + 2 | 0];
               HEAP32[$0 + 12 >> 2] = HEAPU8[$4 + 3 | 0];
               $0 = $0 + 16 | 0;
               $4 = $4 + 4 | 0;
               $3 = $3 - 4 | 0;
               if ($3 >>> 0 > 4) {
                continue
               }
               break;
              };
              $6 = HEAPU8[$4 | 0];
             }
             $5 = $6 & 255;
             if ($6 << 24 >> 24 <= 0) {
              break block13
             }
            }
            HEAP32[$0 >> 2] = $5;
            $0 = $0 + 4 | 0;
            $4 = $4 + 1 | 0;
            $3 = $3 - 1 | 0;
            if ($3) {
             continue
            }
            break block4;
           }
           break;
          };
          $5 = $5 - 194 | 0;
          if ($5 >>> 0 > 50) {
           break block12
          }
          $4 = $4 + 1 | 0;
          $6 = HEAP32[($5 << 2) + 61056 >> 2];
          $5 = 1;
          continue;
         }
         $5 = HEAPU8[$4 | 0];
         $7 = $5 >>> 3 | 0;
         if (($7 - 16 | $7 + ($6 >> 26)) >>> 0 > 7) {
          break block8
         }
         block17 : {
          block16 : {
           $7 = $4 + 1 | 0;
           $5 = $5 - 128 | $6 << 6;
           block15 : {
            if (($5 | 0) >= 0) {
             break block15
            }
            $7 = HEAPU8[$7 | 0] - 128 | 0;
            if ($7 >>> 0 > 63) {
             break block16
            }
            $8 = $5 << 6;
            $5 = $7 | $8;
            $7 = $4 + 2 | 0;
            if (($8 | 0) >= 0) {
             break block15
            }
            $7 = HEAPU8[$7 | 0] - 128 | 0;
            if ($7 >>> 0 > 63) {
             break block16
            }
            $5 = $7 | $5 << 6;
            $7 = $4 + 3 | 0;
           }
           $4 = $7;
           HEAP32[$0 >> 2] = $5;
           $3 = $3 - 1 | 0;
           $0 = $0 + 4 | 0;
           break block17;
          }
          HEAP32[19563] = 25;
          $4 = $4 - 1 | 0;
          break block18;
         }
         $5 = 0;
         continue;
        };
       }
       $4 = $4 - 1 | 0;
       if ($6) {
        break block10
       }
       $6 = HEAPU8[$4 | 0];
      }
      if ($6 & 255) {
       break block10
      }
      if ($0) {
       HEAP32[$0 >> 2] = 0;
       HEAP32[$1 >> 2] = 0;
      }
      return $2 - $3 | 0;
     }
     HEAP32[19563] = 25;
     if (!$0) {
      break block19
     }
    }
    HEAP32[$1 >> 2] = $4;
   }
   return -1;
  }
  HEAP32[$1 >> 2] = $4;
  return $2;
 }
 
 function strtoull_l($0, $1, $2) {
  $0 = strtox($0, $1, $2, -1, -1);
  return $0;
 }
 
 function strtoll_l($0, $1, $2) {
  $0 = strtox($0, $1, $2, 0, -2147483648);
  return $0;
 }
 
 function strtox_1974($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 60 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 24 >> 2] = -1;
  $5 = $4 + 16 | 0;
  __shlim($5, 0, 0);
  __floatscan($4, $5, $3, 1);
  $3 = HEAP32[$4 + 8 >> 2];
  $6 = HEAP32[$4 + 12 >> 2];
  $5 = HEAP32[$4 >> 2];
  $7 = HEAP32[$4 + 4 >> 2];
  if ($2) {
   HEAP32[$2 >> 2] = HEAP32[$4 + 136 >> 2] + ((HEAP32[$4 + 20 >> 2] - HEAP32[$4 + 60 >> 2] | 0) + $1 | 0)
  }
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $6;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $7;
  __stack_pointer = $4 + 160 | 0;
 }
 
 function std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  $7 = ($4 - $3 | 0) + $1 | 0;
  block : {
   while (1) {
    if (($3 | 0) != ($4 | 0)) {
     $0 = -1;
     if (($1 | 0) == ($2 | 0)) {
      break block
     }
     $5 = HEAP8[$1 | 0];
     $6 = HEAP8[$3 | 0];
     if (($5 | 0) < ($6 | 0)) {
      break block
     }
     if (($5 | 0) > ($6 | 0)) {
      return 1
     } else {
      $3 = $3 + 1 | 0;
      $1 = $1 + 1 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($2 | 0) != ($7 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  void_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_char__2c_200__28char__2c_20char__29($0, $2, $3);
 }
 
 function std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  block : {
   while (1) {
    if (($3 | 0) != ($4 | 0)) {
     $0 = -1;
     if (($1 | 0) == ($2 | 0)) {
      break block
     }
     $5 = HEAP32[$1 >> 2];
     $6 = HEAP32[$3 >> 2];
     if (($5 | 0) < ($6 | 0)) {
      break block
     }
     if (($5 | 0) > ($6 | 0)) {
      return 1
     } else {
      $3 = $3 + 4 | 0;
      $1 = $1 + 4 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1 | 0) != ($2 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  void_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______init_wchar_t_20const__2c_200__28wchar_t_20const__2c_20wchar_t_20const__29($0, $2, $3);
 }
 
 function void_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______init_wchar_t_20const__2c_200__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  block1 : {
   $4 = std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($1, $2);
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   if ($4 >>> 0 <= 1073741815) {
    block : {
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($4)) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $4);
      $5 = $0;
      break block;
     }
     std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29($4) + 1 | 0);
     $5 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 >> 2] = $5;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
     HEAP32[$0 + 4 >> 2] = $4;
    }
    $0 = wchar_t__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______copy_non_overlapping_range_5babi_nn200100_5d_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__2c_20wchar_t__29($1, $2, $5);
    HEAP32[$3 + 4 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($0, $3 + 4 | 0);
    __stack_pointer = $3 + 16 | 0;
    break block1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
 }
 
 function std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $1;
  block3 : {
   if (!(HEAP32[$3 + 4 >> 2] & 1)) {
    HEAP32[$6 >> 2] = -1;
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
    block2 : {
     switch (HEAP32[$6 >> 2]) {
     case 0:
      HEAP8[$5 | 0] = 0;
      break block3;
     case 1:
      HEAP8[$5 | 0] = 1;
      break block3;
     default:
      break block2;
     };
    }
    HEAP8[$5 | 0] = 1;
    HEAP32[$4 >> 2] = 4;
    break block3;
   }
   std____2__ios_base__getloc_28_29_20const($6, $3);
   $1 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
   std____2__locale___locale_28_29($6);
   std____2__ios_base__getloc_28_29_20const($6, $3);
   $0 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($6);
   std____2__locale___locale_28_29($6);
   std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($6, $0);
   std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($6 | 12, $0);
   $3 = $6 + 24 | 0;
   (wasm2js_i32$0 = $5, wasm2js_i32$1 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($6 + 28 | 0, $2, $6, $3, $1, $4, 1) | 0) == ($6 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1 = HEAP32[$6 + 28 >> 2];
   while (1) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3 - 12 | 0);
    if (($6 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function std____2__locale___locale_28_29($0) {
  $0 = HEAP32[$0 >> 2];
  if (($0 | 0) != 82584) {
   std____2____shared_count____release_shared_5babi_nn200100_5d_28_29($0)
  }
 }
 
 function std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82824);
 }
 
 function std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
 }
 
 function std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $10 = __stack_pointer - 128 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 124 >> 2] = $1;
  $9 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____difference_type_20std____2____distance_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__random_access_iterator_tag_29($2, $3);
  HEAP32[$10 + 16 >> 2] = 351;
  $8 = $10 + 16 | 0;
  $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($10 + 8 | 0, 0, $8);
  block2 : {
   block1 : {
    block : {
     if ($9 >>> 0 >= 101) {
      $8 = emscripten_builtin_malloc($9);
      if (!$8) {
       break block
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($15, $8);
     }
     $7 = $8;
     $1 = $2;
     while (1) if (($1 | 0) == ($3 | 0)) {
      label1 : while (1) {
       $1 = $10 + 124 | 0;
       if (wasm2js_i32$0 = bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1), wasm2js_i32$1 = 1, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
        if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1)) {
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
        }
        while (1) {
         if (($2 | 0) == ($3 | 0)) {
          break block1
         }
         if (HEAPU8[$8 | 0] == 2) {
          break block2
         }
         $8 = $8 + 1 | 0;
         $2 = $2 + 12 | 0;
         continue;
        };
       }
       $13 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0);
       if (!$6) {
        $13 = std____2__ctype_char___toupper_5babi_nn200100_5d_28char_29_20const($4, $13)
       }
       $16 = $14 + 1 | 0;
       $17 = 0;
       $7 = $8;
       $1 = $2;
       while (1) if (($1 | 0) == ($3 | 0)) {
        $14 = $16;
        if (!$17) {
         continue label1
        }
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
        $7 = $8;
        $1 = $2;
        if ($9 + $12 >>> 0 < 2) {
         continue label1
        }
        while (1) {
         if (($1 | 0) == ($3 | 0)) {
          continue label1
         }
         block3 : {
          if (HEAPU8[$7 | 0] != 2) {
           break block3
          }
          if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) | 0) == ($14 | 0)) {
           break block3
          }
          HEAP8[$7 | 0] = 0;
          $12 = $12 - 1 | 0;
         }
         $7 = $7 + 1 | 0;
         $1 = $1 + 12 | 0;
         continue;
        };
       } else {
        block4 : {
         if (HEAPU8[$7 | 0] != 1) {
          break block4
         }
         $11 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, $14) | 0];
         if (!$6) {
          $11 = std____2__ctype_char___toupper_5babi_nn200100_5d_28char_29_20const($4, $11)
         }
         block5 : {
          if (($11 | 0) == ($13 | 0)) {
           $17 = 1;
           if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) | 0) != ($16 | 0)) {
            break block4
           }
           HEAP8[$7 | 0] = 2;
           $12 = $12 + 1 | 0;
           break block5;
          }
          HEAP8[$7 | 0] = 0;
         }
         $9 = $9 - 1 | 0;
        }
        $7 = $7 + 1 | 0;
        $1 = $1 + 12 | 0;
        continue;
       };
      }
     } else {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($1);
      HEAP8[$7 | 0] = $11 ? 2 : 1;
      $7 = $7 + 1 | 0;
      $1 = $1 + 12 | 0;
      $12 = $12 + $11 | 0;
      $9 = $9 - $11 | 0;
      continue;
     };
    }
    std____throw_bad_alloc_28_29();
    wasm2js_trap();
   }
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($15);
  __stack_pointer = $10 + 128 | 0;
  return $2;
 }
 
 function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  $0 = std____2__locale__id____get_28_29($1);
  $1 = $2 + 8 | 0;
  if (emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1) >>> 0 > $0 >>> 0) {
   $1 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($1, $0) >> 2] != 0
  } else {
   $1 = 0
  }
  if (!$1) {
   std____2____libcpp_verbose_abort_28char_20const__2c_20____29(28869, 0);
   wasm2js_trap();
  }
  return HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($2 + 8 | 0, $0) >> 2];
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
  return $0;
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1;
  if ($2) {
   FUNCTION_TABLE[HEAP32[$0 + 4 >> 2]]($2)
  }
 }
 
 function std____2__ctype_char___toupper_5babi_nn200100_5d_28char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($0, $1) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) + $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($0) {
  return !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($0) {
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($0, 0);
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0 + 196 | 0, $3, $0 + 247 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 252 | 0;
    if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 66256)) {
     break block
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20std____2____num_get_signed_integral_5babi_nn200100_5d_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 252 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 256 | 0;
  return $2 | 0;
 }
 
 function std____2____num_get_base____get_base_28std____2__ios_base__29($0) {
  block : {
   $0 = HEAP32[$0 + 4 >> 2] & 74;
   if ($0) {
    if (($0 | 0) == 64) {
     return 8
    }
    if (($0 | 0) != 8) {
     break block
    }
    return 16;
   }
   return 0;
  }
  return 10;
 }
 
 function std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = $3 + 12 | 0;
  std____2__ios_base__getloc_28_29_20const($4, $1);
  $1 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($4);
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($0, $1);
  std____2__locale___locale_28_29($4);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  HEAP8[$10 + 15 | 0] = $0;
  block2 : {
   block1 : {
    block : {
     $11 = HEAP32[$3 >> 2];
     if (($11 | 0) != ($2 | 0)) {
      break block
     }
     $12 = $0 & 255;
     if (($12 | 0) == HEAPU8[$9 + 24 | 0]) {
      $0 = 43
     } else {
      if (HEAPU8[$9 + 25 | 0] != ($12 | 0)) {
       break block
      }
      $0 = 45;
     }
     HEAP32[$3 >> 2] = $11 + 1;
     HEAP8[$11 | 0] = $0;
     break block1;
    }
    if (!(!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | ($0 | 0) != ($5 | 0))) {
     $0 = 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 - $7 | 0) > 159) {
      break block2
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$8 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
     break block1;
    }
    $0 = -1;
    $5 = char_20const__20std____2__find_5babi_nn200100_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($9, $9 + 26 | 0, $10 + 15 | 0) - $9 | 0;
    if (($5 | 0) > 23) {
     break block2
    }
    block4 : {
     block5 : {
      switch ($1 - 8 | 0) {
      case 0:
      case 2:
       if (($1 | 0) > ($5 | 0)) {
        break block4
       }
       break block2;
      case 1:
       break block4;
      default:
       break block5;
      };
     }
     if (($1 | 0) != 16 | ($5 | 0) < 22) {
      break block4
     }
     $1 = HEAP32[$3 >> 2];
     if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2 | HEAPU8[$1 - 1 | 0] != 48) {
      break block2
     }
     $0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$3 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = HEAPU8[$5 + 66256 | 0];
     break block2;
    }
    $0 = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = HEAPU8[$5 + 66256 | 0];
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
    $0 = 0;
    break block2;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  __stack_pointer = $10 + 16 | 0;
  return $0;
 }
 
 function long_20std____2____num_get_signed_integral_5babi_nn200100_5d_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block3 : {
   block1 : {
    block2 : {
     if (($0 | 0) != ($1 | 0)) {
      $6 = HEAP32[19563];
      HEAP32[19563] = 0;
      std____2____cloc_28_29();
      $3 = strtoll_l($0, $4 + 12 | 0, $3);
      $0 = i64toi32_i32$HIGH_BITS;
      $5 = HEAP32[19563];
      block : {
       if ($5) {
        if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
         break block
        }
        if (($5 | 0) == 68) {
         break block1
        }
        break block2;
       }
       HEAP32[19563] = $6;
       if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
        break block2
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $1 = 0;
     break block3;
    }
    if (($0 | 0) < 0 & $3 >>> 0 < 2147483648 | ($0 | 0) < -1 | ($3 >>> 0 > 2147483647 & ($0 | 0) >= 0 | ($0 | 0) > 0)) {
     break block1
    }
    $1 = $3;
    break block3;
   }
   HEAP32[$2 >> 2] = 4;
   $1 = 2147483647;
   if (!!$3 & ($0 | 0) >= 0 | ($0 | 0) > 0) {
    break block3
   }
   $1 = -2147483648;
  }
  __stack_pointer = $4 + 16 | 0;
  return $1;
 }
 
 function std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  block : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) | ($2 - $1 | 0) < 5) {
    break block
   }
   void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
   $4 = $2 - 4 | 0;
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
   $5 = $2 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) | 0;
   block2 : {
    while (1) {
     block1 : {
      $0 = HEAP8[$2 | 0];
      if ($1 >>> 0 >= $4 >>> 0) {
       break block1
      }
      if (!(($0 | 0) <= 0 | ($0 | 0) >= 127) & HEAP32[$1 >> 2] != HEAP8[$2 | 0]) {
       break block2
      }
      $1 = $1 + 4 | 0;
      $2 = (($5 - $2 | 0) > 1) + $2 | 0;
      continue;
     }
     break;
    };
    if (($0 | 0) <= 0 | ($0 | 0) >= 127 | HEAP8[$2 | 0] >>> 0 > HEAP32[$4 >> 2] - 1 >>> 0) {
     break block
    }
   }
   HEAP32[$3 >> 2] = 4;
  }
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0 + 196 | 0, $3, $0 + 247 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 252 | 0;
    if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 66256)) {
     break block
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20long_20std____2____num_get_signed_integral_5babi_nn200100_5d_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 252 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 256 | 0;
  return $2 | 0;
 }
 
 function long_20long_20std____2____num_get_signed_integral_5babi_nn200100_5d_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block2 : {
   block1 : {
    if (($0 | 0) != ($1 | 0)) {
     $6 = HEAP32[19563];
     HEAP32[19563] = 0;
     std____2____cloc_28_29();
     $0 = strtoll_l($0, $4 + 12 | 0, $3);
     $3 = i64toi32_i32$HIGH_BITS;
     $5 = HEAP32[19563];
     block : {
      if ($5) {
       if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
        break block
       }
       if (($5 | 0) == 68) {
        break block1
       }
       break block2;
      }
      HEAP32[19563] = $6;
      if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
       break block2
      }
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = 0;
    $3 = 0;
    break block2;
   }
   HEAP32[$2 >> 2] = 4;
   if (!!$0 & ($3 | 0) >= 0 | ($3 | 0) > 0) {
    $0 = -1;
    $3 = 2147483647;
    break block2;
   }
   $0 = 0;
   $3 = -2147483648;
  }
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $3;
  return $0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0 + 196 | 0, $3, $0 + 247 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 252 | 0;
    if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 66256)) {
     break block
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20short_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 252 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 256 | 0;
  return $2 | 0;
 }
 
 function unsigned_20short_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block5 : {
   block6 : {
    block3 : {
     block4 : {
      if (($0 | 0) != ($1 | 0)) {
       block1 : {
        block : {
         $5 = HEAPU8[$0 | 0];
         if (($5 | 0) != 45) {
          break block
         }
         $0 = $0 + 1 | 0;
         if (($1 | 0) != ($0 | 0)) {
          break block
         }
         break block1;
        }
        $7 = HEAP32[19563];
        HEAP32[19563] = 0;
        std____2____cloc_28_29();
        $0 = strtoull_l($0, $4 + 12 | 0, $3);
        $3 = i64toi32_i32$HIGH_BITS;
        $6 = HEAP32[19563];
        block2 : {
         if ($6) {
          if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
           break block2
          }
          if (($6 | 0) == 68) {
           break block3
          }
          break block4;
         }
         HEAP32[19563] = $7;
         if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
          break block4
         }
        }
       }
      }
      HEAP32[$2 >> 2] = 4;
      $0 = 0;
      break block5;
     }
     if (!$3 & $0 >>> 0 <= 65535) {
      break block6
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = 65535;
    break block5;
   }
   $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $0 & 65535;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0 + 196 | 0, $3, $0 + 247 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 252 | 0;
    if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 66256)) {
     break block
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20int_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 252 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 256 | 0;
  return $2 | 0;
 }
 
 function unsigned_20int_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block5 : {
   block6 : {
    block3 : {
     block4 : {
      if (($0 | 0) != ($1 | 0)) {
       block1 : {
        block : {
         $5 = HEAPU8[$0 | 0];
         if (($5 | 0) != 45) {
          break block
         }
         $0 = $0 + 1 | 0;
         if (($1 | 0) != ($0 | 0)) {
          break block
         }
         break block1;
        }
        $7 = HEAP32[19563];
        HEAP32[19563] = 0;
        std____2____cloc_28_29();
        $0 = strtoull_l($0, $4 + 12 | 0, $3);
        $3 = i64toi32_i32$HIGH_BITS;
        $6 = HEAP32[19563];
        block2 : {
         if ($6) {
          if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
           break block2
          }
          if (($6 | 0) == 68) {
           break block3
          }
          break block4;
         }
         HEAP32[19563] = $7;
         if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
          break block4
         }
        }
       }
      }
      HEAP32[$2 >> 2] = 4;
      $0 = 0;
      break block5;
     }
     if (!$3) {
      break block6
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = -1;
    break block5;
   }
   $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0 + 196 | 0, $3, $0 + 247 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 252 | 0;
    if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP8[$0 + 247 | 0], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, 66256)) {
     break block
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20long_20long_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 252 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 256 | 0;
  return $2 | 0;
 }
 
 function unsigned_20long_20long_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block5 : {
   block4 : {
    block3 : {
     if (($0 | 0) != ($1 | 0)) {
      block1 : {
       block : {
        $5 = HEAPU8[$0 | 0];
        if (($5 | 0) != 45) {
         break block
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break block
        }
        break block1;
       }
       $7 = HEAP32[19563];
       HEAP32[19563] = 0;
       std____2____cloc_28_29();
       $0 = strtoull_l($0, $4 + 12 | 0, $3);
       $3 = i64toi32_i32$HIGH_BITS;
       $6 = HEAP32[19563];
       block2 : {
        if ($6) {
         if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
          break block2
         }
         if (($6 | 0) == 68) {
          break block3
         }
         break block4;
        }
        HEAP32[19563] = $7;
        if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
         break block4
        }
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $0 = 0;
     $1 = 0;
     break block5;
    }
    HEAP32[$2 >> 2] = 4;
    $0 = -1;
    $1 = -1;
    break block5;
   }
   $1 = $0;
   $2 = ($5 | 0) == 45;
   $0 = $2 ? 0 - $1 | 0 : $1;
   $1 = $2 ? 0 - ($3 + (($1 | 0) != 0) | 0) | 0 : $3;
  }
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 192 | 0, $3, $0 + 208 | 0, $0 + 207 | 0, $0 + 206 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 180 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
  HEAP32[$0 + 176 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP8[$0 + 7 | 0] = 1;
  HEAP8[$0 + 6 | 0] = 69;
  $3 = 0;
  while (1) {
   block7 : {
    block2 : {
     block1 : {
      block : {
       if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
        break block
       }
       if (HEAP32[$0 + 176 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) + $2 | 0)) {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
        HEAP32[$0 + 176 >> 2] = $1 + $2;
       }
       if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0 + 252 | 0), $0 + 7 | 0, $0 + 6 | 0, $2, $0 + 176 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $0 + 192 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 208 | 0)) {
        break block
       }
       if ($3) {
        break block1
       }
       $3 = 0;
       $7 = HEAP32[$0 + 176 >> 2] - $2 | 0;
       if (($7 | 0) <= 0) {
        break block2
       }
       block3 : {
        block4 : {
         $1 = HEAPU8[$2 | 0];
         $8 = $1 - 43 | 0;
         switch ($8 | 0) {
         case 0:
         case 2:
          break block3;
         default:
          break block4;
         };
        }
        if (($1 | 0) == 46) {
         break block1
        }
        $3 = 1;
        if (($1 - 48 & 255) >>> 0 < 10) {
         break block2
        }
        break block;
       }
       if (($7 | 0) == 1) {
        break block2
       }
       block5 : {
        switch ($8 | 0) {
        case 0:
        case 2:
         break block5;
        default:
         break block2;
        };
       }
       $1 = HEAPU8[$2 + 1 | 0];
       if (($1 | 0) == 46) {
        break block1
       }
       $3 = 1;
       if (($1 - 48 & 255) >>> 0 <= 9) {
        break block2
       }
      }
      block6 : {
       if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 192 | 0) | !(HEAP8[$0 + 7 | 0] & 1)) {
        break block6
       }
       $1 = HEAP32[$0 + 12 >> 2];
       if (($1 - ($0 + 16 | 0) | 0) > 159) {
        break block6
       }
       HEAP32[$0 + 12 >> 2] = $1 + 4;
       HEAP32[$1 >> 2] = HEAP32[$0 + 8 >> 2];
      }
      (wasm2js_i32$0 = $5, wasm2js_f32$0 = float_20std____2____num_get_float_5babi_nn200100_5d_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($2, HEAP32[$0 + 176 >> 2], $4)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 192 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
      if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
      }
      $1 = HEAP32[$0 + 252 >> 2];
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 192 | 0);
      __stack_pointer = $0 + 256 | 0;
      break block7;
     }
     $3 = 1;
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0 + 252 | 0);
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $5 = $6 + 12 | 0;
  std____2__ios_base__getloc_28_29_20const($5, $1);
  std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const(std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($5), 66256, 66284, $2);
  $1 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($5);
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($0, $1);
  std____2__locale___locale_28_29($5);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $12 = __stack_pointer - 16 | 0;
  __stack_pointer = $12;
  HEAP8[$12 + 15 | 0] = $0;
  block1 : {
   block : {
    if (($0 | 0) == ($5 | 0)) {
     if (HEAPU8[$1 | 0] != 1) {
      break block
     }
     $0 = 0;
     HEAP8[$1 | 0] = 0;
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 46;
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7)) {
      break block1
     }
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break block1
     }
     $2 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $2;
     break block1;
    }
    block3 : {
     block2 : {
      if (($0 | 0) != ($6 | 0)) {
       break block2
      }
      if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7)) {
       break block2
      }
      if (HEAPU8[$1 | 0] != 1) {
       break block
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block3
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
      $0 = 0;
      HEAP32[$10 >> 2] = 0;
      break block1;
     }
     $5 = char_20const__20std____2__find_5babi_nn200100_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($11, $11 + 28 | 0, $12 + 15 | 0) - $11 | 0;
     if (($5 | 0) > 27) {
      break block
     }
     $6 = HEAP8[$5 + 66256 | 0];
     block7 : {
      block5 : {
       switch (($5 & -2) - 22 | 0) {
       case 2:
        $1 = HEAP32[$4 >> 2];
        if (($1 | 0) != ($3 | 0)) {
         $0 = -1;
         if ((toupper(HEAP8[$1 - 1 | 0]) | 0) != (toupper(HEAP8[$2 | 0]) | 0)) {
          break block1
         }
        }
        HEAP32[$4 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = $6;
        break block3;
       case 0:
        HEAP8[$2 | 0] = 80;
        break block7;
       default:
        break block5;
       };
      }
      $0 = toupper($6);
      if (($0 | 0) != HEAP8[$2 | 0]) {
       break block7
      }
      (wasm2js_i32$0 = $2, wasm2js_i32$1 = tolower($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      if (HEAPU8[$1 | 0] != 1) {
       break block7
      }
      HEAP8[$1 | 0] = 0;
      if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7)) {
       break block7
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block7
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $6;
     $0 = 0;
     if (($5 | 0) > 21) {
      break block1
     }
     HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
     break block1;
    }
    $0 = 0;
    break block1;
   }
   $0 = -1;
  }
  __stack_pointer = $12 + 16 | 0;
  return $0;
 }
 
 function float_20std____2____num_get_float_5babi_nn200100_5d_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block2 : {
   block3 : {
    block1 : {
     if (($0 | 0) != ($1 | 0)) {
      $6 = HEAP32[19563];
      HEAP32[19563] = 0;
      std____2____cloc_28_29();
      $3 = __stack_pointer - 16 | 0;
      __stack_pointer = $3;
      strtox_1974($3, $0, $4 + 12 | 0, 0);
      $5 = __trunctfsf2(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
      __stack_pointer = $3 + 16 | 0;
      block : {
       $0 = HEAP32[19563];
       if ($0) {
        if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
         break block
        }
        break block1;
       }
       HEAP32[19563] = $6;
       if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
        break block1
       }
       break block2;
      }
      if (($0 | 0) != 68) {
       break block2
      }
      break block3;
     }
     HEAP32[$2 >> 2] = 4;
     break block2;
    }
    $5 = Math_fround(0.0);
   }
   HEAP32[$2 >> 2] = 4;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 192 | 0, $3, $0 + 208 | 0, $0 + 207 | 0, $0 + 206 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 180 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
  HEAP32[$0 + 176 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP8[$0 + 7 | 0] = 1;
  HEAP8[$0 + 6 | 0] = 69;
  $3 = 0;
  while (1) {
   block7 : {
    block2 : {
     block1 : {
      block : {
       if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
        break block
       }
       if (HEAP32[$0 + 176 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) + $2 | 0)) {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
        HEAP32[$0 + 176 >> 2] = $1 + $2;
       }
       if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0 + 252 | 0), $0 + 7 | 0, $0 + 6 | 0, $2, $0 + 176 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $0 + 192 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 208 | 0)) {
        break block
       }
       if ($3) {
        break block1
       }
       $3 = 0;
       $7 = HEAP32[$0 + 176 >> 2] - $2 | 0;
       if (($7 | 0) <= 0) {
        break block2
       }
       block3 : {
        block4 : {
         $1 = HEAPU8[$2 | 0];
         $8 = $1 - 43 | 0;
         switch ($8 | 0) {
         case 0:
         case 2:
          break block3;
         default:
          break block4;
         };
        }
        if (($1 | 0) == 46) {
         break block1
        }
        $3 = 1;
        if (($1 - 48 & 255) >>> 0 < 10) {
         break block2
        }
        break block;
       }
       if (($7 | 0) == 1) {
        break block2
       }
       block5 : {
        switch ($8 | 0) {
        case 0:
        case 2:
         break block5;
        default:
         break block2;
        };
       }
       $1 = HEAPU8[$2 + 1 | 0];
       if (($1 | 0) == 46) {
        break block1
       }
       $3 = 1;
       if (($1 - 48 & 255) >>> 0 <= 9) {
        break block2
       }
      }
      block6 : {
       if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 192 | 0) | !(HEAP8[$0 + 7 | 0] & 1)) {
        break block6
       }
       $1 = HEAP32[$0 + 12 >> 2];
       if (($1 - ($0 + 16 | 0) | 0) > 159) {
        break block6
       }
       HEAP32[$0 + 12 >> 2] = $1 + 4;
       HEAP32[$1 >> 2] = HEAP32[$0 + 8 >> 2];
      }
      (wasm2js_i32$0 = $5, wasm2js_f64$0 = double_20std____2____num_get_float_5babi_nn200100_5d_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($2, HEAP32[$0 + 176 >> 2], $4)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
      std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 192 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
      if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
      }
      $1 = HEAP32[$0 + 252 >> 2];
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 192 | 0);
      __stack_pointer = $0 + 256 | 0;
      break block7;
     }
     $3 = 1;
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0 + 252 | 0);
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function double_20std____2____num_get_float_5babi_nn200100_5d_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  block2 : {
   block3 : {
    block1 : {
     if (($0 | 0) != ($1 | 0)) {
      $6 = HEAP32[19563];
      HEAP32[19563] = 0;
      std____2____cloc_28_29();
      $3 = __stack_pointer - 16 | 0;
      __stack_pointer = $3;
      strtox_1974($3, $0, $4 + 12 | 0, 1);
      $5 = __trunctfdf2(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2]);
      __stack_pointer = $3 + 16 | 0;
      block : {
       $0 = HEAP32[19563];
       if ($0) {
        if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
         break block
        }
        break block1;
       }
       HEAP32[19563] = $6;
       if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
        break block1
       }
       break block2;
      }
      if (($0 | 0) != 68) {
       break block2
      }
      break block3;
     }
     HEAP32[$2 >> 2] = 4;
     break block2;
    }
    $5 = 0.0;
   }
   HEAP32[$2 >> 2] = 4;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $0 = __stack_pointer - 272 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 264 >> 2] = $2;
  HEAP32[$0 + 268 >> 2] = $1;
  std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 208 | 0, $3, $0 + 224 | 0, $0 + 223 | 0, $0 + 222 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 196 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
  HEAP32[$0 + 192 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = $0 + 32;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 23 | 0] = 1;
  HEAP8[$0 + 22 | 0] = 69;
  $3 = 0;
  while (1) {
   block7 : {
    block2 : {
     block1 : {
      block : {
       if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 268 | 0, $0 + 264 | 0)) {
        break block
       }
       if (HEAP32[$0 + 192 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) + $2 | 0)) {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
        HEAP32[$0 + 192 >> 2] = $1 + $2;
       }
       if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0 + 268 | 0), $0 + 23 | 0, $0 + 22 | 0, $2, $0 + 192 | 0, HEAP8[$0 + 223 | 0], HEAP8[$0 + 222 | 0], $0 + 208 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 224 | 0)) {
        break block
       }
       if ($3) {
        break block1
       }
       $3 = 0;
       $7 = HEAP32[$0 + 192 >> 2] - $2 | 0;
       if (($7 | 0) <= 0) {
        break block2
       }
       block3 : {
        block4 : {
         $1 = HEAPU8[$2 | 0];
         $8 = $1 - 43 | 0;
         switch ($8 | 0) {
         case 0:
         case 2:
          break block3;
         default:
          break block4;
         };
        }
        if (($1 | 0) == 46) {
         break block1
        }
        $3 = 1;
        if (($1 - 48 & 255) >>> 0 < 10) {
         break block2
        }
        break block;
       }
       if (($7 | 0) == 1) {
        break block2
       }
       block5 : {
        switch ($8 | 0) {
        case 0:
        case 2:
         break block5;
        default:
         break block2;
        };
       }
       $1 = HEAPU8[$2 + 1 | 0];
       if (($1 | 0) == 46) {
        break block1
       }
       $3 = 1;
       if (($1 - 48 & 255) >>> 0 <= 9) {
        break block2
       }
      }
      block6 : {
       if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 208 | 0) | !(HEAP8[$0 + 23 | 0] & 1)) {
        break block6
       }
       $1 = HEAP32[$0 + 28 >> 2];
       if (($1 - ($0 + 32 | 0) | 0) > 159) {
        break block6
       }
       HEAP32[$0 + 28 >> 2] = $1 + 4;
       HEAP32[$1 >> 2] = HEAP32[$0 + 24 >> 2];
      }
      long_20double_20std____2____num_get_float_5babi_nn200100_5d_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $2, HEAP32[$0 + 192 >> 2], $4);
      $1 = HEAP32[$0 >> 2];
      $2 = HEAP32[$0 + 4 >> 2];
      $3 = HEAP32[$0 + 12 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$5 + 12 >> 2] = $3;
      HEAP32[$5 >> 2] = $1;
      HEAP32[$5 + 4 >> 2] = $2;
      std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 208 | 0, $0 + 32 | 0, HEAP32[$0 + 28 >> 2], $4);
      if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 268 | 0, $0 + 264 | 0)) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
      }
      $1 = HEAP32[$0 + 268 >> 2];
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 208 | 0);
      __stack_pointer = $0 + 272 | 0;
      break block7;
     }
     $3 = 1;
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0 + 268 | 0);
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function long_20double_20std____2____num_get_float_5babi_nn200100_5d_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  block2 : {
   block1 : {
    block : {
     if (($1 | 0) != ($2 | 0)) {
      $10 = HEAP32[19563];
      HEAP32[19563] = 0;
      $7 = __stack_pointer - 16 | 0;
      __stack_pointer = $7;
      std____2____cloc_28_29();
      $5 = __stack_pointer - 16 | 0;
      __stack_pointer = $5;
      $4 = __stack_pointer - 16 | 0;
      __stack_pointer = $4;
      $6 = __stack_pointer - 16 | 0;
      __stack_pointer = $6;
      strtox_1974($6, $1, $8 + 28 | 0, 2);
      $11 = HEAP32[$6 >> 2];
      $9 = HEAP32[$6 + 4 >> 2];
      $1 = HEAP32[$6 + 12 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$4 + 12 >> 2] = $1;
      HEAP32[$4 >> 2] = $11;
      HEAP32[$4 + 4 >> 2] = $9;
      __stack_pointer = $6 + 16 | 0;
      $9 = HEAP32[$4 >> 2];
      $6 = HEAP32[$4 + 4 >> 2];
      $1 = HEAP32[$4 + 12 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      HEAP32[$5 + 12 >> 2] = $1;
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $6;
      __stack_pointer = $4 + 16 | 0;
      $6 = HEAP32[$5 >> 2];
      $4 = HEAP32[$5 + 4 >> 2];
      $1 = HEAP32[$5 + 12 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      HEAP32[$7 + 12 >> 2] = $1;
      HEAP32[$7 >> 2] = $6;
      HEAP32[$7 + 4 >> 2] = $4;
      __stack_pointer = $5 + 16 | 0;
      $5 = HEAP32[$7 >> 2];
      $4 = HEAP32[$7 + 4 >> 2];
      $1 = HEAP32[$7 + 12 >> 2];
      HEAP32[$8 + 16 >> 2] = HEAP32[$7 + 8 >> 2];
      HEAP32[$8 + 20 >> 2] = $1;
      HEAP32[$8 + 8 >> 2] = $5;
      HEAP32[$8 + 12 >> 2] = $4;
      __stack_pointer = $7 + 16 | 0;
      $5 = HEAP32[$8 + 16 >> 2];
      $7 = HEAP32[$8 + 20 >> 2];
      $4 = HEAP32[$8 + 8 >> 2];
      $1 = HEAP32[$8 + 12 >> 2];
      $6 = $1;
      $9 = HEAP32[19563];
      if (!$9) {
       break block
      }
      if (HEAP32[$8 + 28 >> 2] != ($2 | 0)) {
       break block1
      }
      $12 = $4;
      $13 = $6;
      $14 = $5;
      $15 = $7;
      if (($9 | 0) != 68) {
       break block2
      }
      break block1;
     }
     HEAP32[$3 >> 2] = 4;
     break block2;
    }
    HEAP32[19563] = $10;
    if (HEAP32[$8 + 28 >> 2] == ($2 | 0)) {
     break block2
    }
   }
   HEAP32[$3 >> 2] = 4;
   $4 = $12;
   $6 = $13;
   $5 = $14;
   $7 = $15;
  }
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $5;
  HEAP32[$0 + 12 >> 2] = $7;
  __stack_pointer = $8 + 32 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $0 = __stack_pointer - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 248 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = $1;
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 196 | 0);
  $2 = $0 + 16 | 0;
  std____2__ios_base__getloc_28_29_20const($2, $3);
  std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const(std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($2), 66256, 66282, $0 + 208 | 0);
  std____2__locale___locale_28_29($2);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($3));
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($3, 0);
  HEAP32[$0 + 180 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($3) + $1 | 0)) {
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($3);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($3) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($3));
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($3, 0);
     HEAP32[$0 + 180 >> 2] = $2 + $1;
    }
    $2 = $0 + 252 | 0;
    if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($2), 16, $1, $0 + 180 | 0, $0 + 8 | 0, 0, $6, $0 + 16 | 0, $0 + 12 | 0, $0 + 208 | 0)) {
     break block
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($2);
    continue;
   }
   break;
  };
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, HEAP32[$0 + 180 >> 2] - $1 | 0);
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($3);
  $1 = std____2____cloc_28_29();
  HEAP32[$0 + 4 >> 2] = $5;
  if ((int_20std____2____locale____sscanf_5babi_nn200100_5d_void____28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20void_____29($2, $1, $0 + 4 | 0) | 0) != 1) {
   HEAP32[$4 >> 2] = 4
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 252 | 0, $0 + 248 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $1 = HEAP32[$0 + 252 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
  __stack_pointer = $0 + 256 | 0;
  return $1 | 0;
 }
 
 function std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3) | 0;
 }
 
 function std____2____cloc_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if (HEAPU8[82580]) {
   return HEAP32[20644]
  }
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  block2 : {
   block1 : {
    while (1) {
     $4 = $2 + 8 | 0;
     $3 = $0 << 2;
     $6 = $4 + $3 | 0;
     $5 = 1 << $0 & 2147483647;
     if ($5 | 1) {
      $3 = __get_locale($0, $5 ? 32305 : 34591)
     } else {
      $3 = HEAP32[$3 >> 2]
     }
     HEAP32[$6 >> 2] = $3;
     if (($3 | 0) == -1) {
      break block1
     }
     $0 = $0 + 1 | 0;
     if (($0 | 0) != 6) {
      continue
     }
     break;
    };
    if (!__loc_is_allocated(0)) {
     $1 = 62632;
     if (!memcmp($4, 62632, 24)) {
      break block2
     }
     $1 = 62656;
     if (!memcmp($4, 62656, 24)) {
      break block2
     }
     $0 = 0;
     if (!HEAPU8[82336]) {
      while (1) {
       (wasm2js_i32$0 = $0 << 2, wasm2js_i32$1 = __get_locale($0, 34591)), HEAP32[wasm2js_i32$0 + 82288 >> 2] = wasm2js_i32$1;
       $0 = $0 + 1 | 0;
       if (($0 | 0) != 6) {
        continue
       }
       break;
      };
      HEAP8[82336] = 1;
      HEAP32[20578] = HEAP32[20572];
     }
     $1 = 82288;
     $0 = $2 + 8 | 0;
     if (!memcmp($0, 82288, 24)) {
      break block2
     }
     $1 = 82312;
     if (!memcmp($0, 82312, 24)) {
      break block2
     }
     $1 = emscripten_builtin_malloc(24);
     if (!$1) {
      break block1
     }
    }
    $0 = HEAP32[$2 + 28 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP32[$1 + 20 >> 2] = $0;
    $0 = HEAP32[$2 + 20 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$1 + 12 >> 2] = $0;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$1 + 4 >> 2] = $0;
    break block2;
   }
   $1 = 0;
  }
  __stack_pointer = $2 + 32 | 0;
  HEAP8[82580] = 1;
  HEAP32[20644] = $1;
  return $1;
 }
 
 function int_20std____2____locale____sscanf_5babi_nn200100_5d_void____28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20void_____29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  $1 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($2 + 4 | 0, $2 + 12 | 0);
  $0 = vsscanf($0, 27405, HEAP32[$2 + 8 >> 2]);
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($1);
  __stack_pointer = $2 + 16 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function char_20const__20std____2__find_5babi_nn200100_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = $0;
  $0 = memchr($0, HEAP8[$2 | 0], $1 - $0 | 0);
  $0 = std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($4, $0 ? $0 : $1);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 28 >> 2] = $1;
  block3 : {
   if (!(HEAP32[$3 + 4 >> 2] & 1)) {
    HEAP32[$6 >> 2] = -1;
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
    block2 : {
     switch (HEAP32[$6 >> 2]) {
     case 0:
      HEAP8[$5 | 0] = 0;
      break block3;
     case 1:
      HEAP8[$5 | 0] = 1;
      break block3;
     default:
      break block2;
     };
    }
    HEAP8[$5 | 0] = 1;
    HEAP32[$4 >> 2] = 4;
    break block3;
   }
   std____2__ios_base__getloc_28_29_20const($6, $3);
   $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
   std____2__locale___locale_28_29($6);
   std____2__ios_base__getloc_28_29_20const($6, $3);
   $0 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($6);
   std____2__locale___locale_28_29($6);
   std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($6, $0);
   std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($6 | 12, $0);
   $3 = $6 + 24 | 0;
   (wasm2js_i32$0 = $5, wasm2js_i32$1 = (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($6 + 28 | 0, $2, $6, $3, $1, $4, 1) | 0) == ($6 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1 = HEAP32[$6 + 28 >> 2];
   while (1) {
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($3 - 12 | 0);
    if (($6 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82832);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $10 = __stack_pointer - 128 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 124 >> 2] = $1;
  $9 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____difference_type_20std____2____distance_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__random_access_iterator_tag_29($2, $3);
  HEAP32[$10 + 16 >> 2] = 351;
  $8 = $10 + 16 | 0;
  $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($10 + 8 | 0, 0, $8);
  block2 : {
   block1 : {
    block : {
     if ($9 >>> 0 >= 101) {
      $8 = emscripten_builtin_malloc($9);
      if (!$8) {
       break block
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($15, $8);
     }
     $7 = $8;
     $1 = $2;
     while (1) if (($1 | 0) == ($3 | 0)) {
      label1 : while (1) {
       $1 = $10 + 124 | 0;
       if (wasm2js_i32$0 = bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1), wasm2js_i32$1 = 1, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
        if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1)) {
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
        }
        while (1) {
         if (($2 | 0) == ($3 | 0)) {
          break block1
         }
         if (HEAPU8[$8 | 0] == 2) {
          break block2
         }
         $8 = $8 + 1 | 0;
         $2 = $2 + 12 | 0;
         continue;
        };
       }
       $13 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0);
       if (!$6) {
        $13 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($4, $13)
       }
       $16 = $14 + 1 | 0;
       $17 = 0;
       $7 = $8;
       $1 = $2;
       while (1) if (($1 | 0) == ($3 | 0)) {
        $14 = $16;
        if (!$17) {
         continue label1
        }
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
        $7 = $8;
        $1 = $2;
        if ($9 + $12 >>> 0 < 2) {
         continue label1
        }
        while (1) {
         if (($1 | 0) == ($3 | 0)) {
          continue label1
         }
         block3 : {
          if (HEAPU8[$7 | 0] != 2) {
           break block3
          }
          if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) | 0) == ($14 | 0)) {
           break block3
          }
          HEAP8[$7 | 0] = 0;
          $12 = $12 - 1 | 0;
         }
         $7 = $7 + 1 | 0;
         $1 = $1 + 12 | 0;
         continue;
        };
       } else {
        block4 : {
         if (HEAPU8[$7 | 0] != 1) {
          break block4
         }
         $11 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, $14) >> 2];
         if (!$6) {
          $11 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($4, $11)
         }
         block5 : {
          if (($11 | 0) == ($13 | 0)) {
           $17 = 1;
           if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) | 0) != ($16 | 0)) {
            break block4
           }
           HEAP8[$7 | 0] = 2;
           $12 = $12 + 1 | 0;
           break block5;
          }
          HEAP8[$7 | 0] = 0;
         }
         $9 = $9 - 1 | 0;
        }
        $7 = $7 + 1 | 0;
        $1 = $1 + 12 | 0;
        continue;
       };
      }
     } else {
      $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($1);
      HEAP8[$7 | 0] = $11 ? 2 : 1;
      $7 = $7 + 1 | 0;
      $1 = $1 + 12 | 0;
      $12 = $12 + $11 | 0;
      $9 = $9 - $11 | 0;
      continue;
     };
    }
    std____throw_bad_alloc_28_29();
    wasm2js_trap();
   }
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($15);
  __stack_pointer = $10 + 128 | 0;
  return $2;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($0, $1) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) + ($1 << 2) | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 336 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 328 >> 2] = $2;
  HEAP32[$0 + 332 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $0 + 208 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0 + 196 | 0, $3, $0 + 324 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 332 | 0;
    if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $7)) {
     break block
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20std____2____num_get_signed_integral_5babi_nn200100_5d_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 332 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 336 | 0;
  return $2 | 0;
 }
 
 function std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 12 | 0;
  std____2__ios_base__getloc_28_29_20const($3, $0);
  std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($3), 66256, 66282, $1);
  std____2__locale___locale_28_29($3);
  __stack_pointer = $2 + 16 | 0;
  return $1;
 }
 
 function std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = $3 + 12 | 0;
  std____2__ios_base__getloc_28_29_20const($4, $1);
  $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($4);
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($0, $1);
  std____2__locale___locale_28_29($4);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  HEAP32[$10 + 12 >> 2] = $0;
  block2 : {
   block1 : {
    block : {
     $11 = HEAP32[$3 >> 2];
     if (($11 | 0) != ($2 | 0)) {
      break block
     }
     if (HEAP32[$9 + 96 >> 2] == ($0 | 0)) {
      $0 = 43
     } else {
      if (HEAP32[$9 + 100 >> 2] != ($0 | 0)) {
       break block
      }
      $0 = 45;
     }
     HEAP32[$3 >> 2] = $11 + 1;
     HEAP8[$11 | 0] = $0;
     break block1;
    }
    if (!(!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | ($0 | 0) != ($5 | 0))) {
     $0 = 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 - $7 | 0) > 159) {
      break block2
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$8 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
     break block1;
    }
    $0 = -1;
    $5 = wchar_t_20const__20std____2__find_5babi_nn200100_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($9, $9 + 104 | 0, $10 + 12 | 0) - $9 >> 2;
    if (($5 | 0) > 23) {
     break block2
    }
    block4 : {
     block5 : {
      switch ($1 - 8 | 0) {
      case 0:
      case 2:
       if (($1 | 0) > ($5 | 0)) {
        break block4
       }
       break block2;
      case 1:
       break block4;
      default:
       break block5;
      };
     }
     if (($1 | 0) != 16 | ($5 | 0) < 22) {
      break block4
     }
     $1 = HEAP32[$3 >> 2];
     if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2 | HEAPU8[$1 - 1 | 0] != 48) {
      break block2
     }
     $0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$3 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = HEAPU8[$5 + 66256 | 0];
     break block2;
    }
    $0 = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = HEAPU8[$5 + 66256 | 0];
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
    $0 = 0;
    break block2;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  __stack_pointer = $10 + 16 | 0;
  return $0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 336 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 328 >> 2] = $2;
  HEAP32[$0 + 332 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $0 + 208 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0 + 196 | 0, $3, $0 + 324 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 332 | 0;
    if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $7)) {
     break block
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20long_20std____2____num_get_signed_integral_5babi_nn200100_5d_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 332 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 336 | 0;
  return $2 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 336 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 328 >> 2] = $2;
  HEAP32[$0 + 332 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $0 + 208 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0 + 196 | 0, $3, $0 + 324 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 332 | 0;
    if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $7)) {
     break block
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20short_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 332 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 336 | 0;
  return $2 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 336 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 328 >> 2] = $2;
  HEAP32[$0 + 332 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $0 + 208 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0 + 196 | 0, $3, $0 + 324 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 332 | 0;
    if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $7)) {
     break block
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20int_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 332 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 336 | 0;
  return $2 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 336 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 328 >> 2] = $2;
  HEAP32[$0 + 332 >> 2] = $1;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
  $7 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($3, $0 + 208 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0 + 196 | 0, $3, $0 + 324 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
  HEAP32[$0 + 180 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) + $2 | 0)) {
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($1));
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$0 + 180 >> 2] = $3 + $2;
    }
    $3 = $0 + 332 | 0;
    if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($3), $6, $2, $0 + 180 | 0, $0 + 8 | 0, HEAP32[$0 + 324 >> 2], $0 + 196 | 0, $0 + 16 | 0, $0 + 12 | 0, $7)) {
     break block
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($3);
    continue;
   }
   break;
  };
  block1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 196 | 0)) {
    break block1
   }
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 - ($0 + 16 | 0) | 0) > 159) {
    break block1
   }
   HEAP32[$0 + 12 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20long_20long_20std____2____num_get_unsigned_integral_5babi_nn200100_5d_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($2, HEAP32[$0 + 180 >> 2], $4, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 196 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 332 | 0, $0 + 328 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $2 = HEAP32[$0 + 332 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 196 | 0);
  __stack_pointer = $0 + 336 | 0;
  return $2 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $0 = __stack_pointer - 352 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 344 >> 2] = $2;
  HEAP32[$0 + 348 >> 2] = $1;
  std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 204 | 0, $3, $0 + 224 | 0, $0 + 220 | 0, $0 + 216 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 192 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
  HEAP32[$0 + 188 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP8[$0 + 7 | 0] = 1;
  HEAP8[$0 + 6 | 0] = 69;
  $3 = 0;
  while (1) {
   block7 : {
    block2 : {
     block1 : {
      block : {
       if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 348 | 0, $0 + 344 | 0)) {
        break block
       }
       if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) + $2 | 0)) {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
        HEAP32[$0 + 188 >> 2] = $1 + $2;
       }
       if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0 + 348 | 0), $0 + 7 | 0, $0 + 6 | 0, $2, $0 + 188 | 0, HEAP32[$0 + 220 >> 2], HEAP32[$0 + 216 >> 2], $0 + 204 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
        break block
       }
       if ($3) {
        break block1
       }
       $3 = 0;
       $7 = HEAP32[$0 + 188 >> 2] - $2 | 0;
       if (($7 | 0) <= 0) {
        break block2
       }
       block3 : {
        block4 : {
         $1 = HEAPU8[$2 | 0];
         $8 = $1 - 43 | 0;
         switch ($8 | 0) {
         case 0:
         case 2:
          break block3;
         default:
          break block4;
         };
        }
        if (($1 | 0) == 46) {
         break block1
        }
        $3 = 1;
        if (($1 - 48 & 255) >>> 0 < 10) {
         break block2
        }
        break block;
       }
       if (($7 | 0) == 1) {
        break block2
       }
       block5 : {
        switch ($8 | 0) {
        case 0:
        case 2:
         break block5;
        default:
         break block2;
        };
       }
       $1 = HEAPU8[$2 + 1 | 0];
       if (($1 | 0) == 46) {
        break block1
       }
       $3 = 1;
       if (($1 - 48 & 255) >>> 0 <= 9) {
        break block2
       }
      }
      block6 : {
       if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 204 | 0) | !(HEAP8[$0 + 7 | 0] & 1)) {
        break block6
       }
       $1 = HEAP32[$0 + 12 >> 2];
       if (($1 - ($0 + 16 | 0) | 0) > 159) {
        break block6
       }
       HEAP32[$0 + 12 >> 2] = $1 + 4;
       HEAP32[$1 >> 2] = HEAP32[$0 + 8 >> 2];
      }
      (wasm2js_i32$0 = $5, wasm2js_f32$0 = float_20std____2____num_get_float_5babi_nn200100_5d_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($2, HEAP32[$0 + 188 >> 2], $4)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 204 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
      if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 348 | 0, $0 + 344 | 0)) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
      }
      $1 = HEAP32[$0 + 348 >> 2];
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 204 | 0);
      __stack_pointer = $0 + 352 | 0;
      break block7;
     }
     $3 = 1;
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0 + 348 | 0);
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $5 = $6 + 12 | 0;
  std____2__ios_base__getloc_28_29_20const($5, $1);
  std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($5), 66256, 66284, $2);
  $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($5);
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($0, $1);
  std____2__locale___locale_28_29($5);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $12 = __stack_pointer - 16 | 0;
  __stack_pointer = $12;
  HEAP32[$12 + 12 >> 2] = $0;
  block1 : {
   block : {
    if (($0 | 0) == ($5 | 0)) {
     if (HEAPU8[$1 | 0] != 1) {
      break block
     }
     $0 = 0;
     HEAP8[$1 | 0] = 0;
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 46;
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7)) {
      break block1
     }
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break block1
     }
     $2 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $2;
     break block1;
    }
    block3 : {
     block2 : {
      if (($0 | 0) != ($6 | 0)) {
       break block2
      }
      if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7)) {
       break block2
      }
      if (HEAPU8[$1 | 0] != 1) {
       break block
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block3
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
      $0 = 0;
      HEAP32[$10 >> 2] = 0;
      break block1;
     }
     $0 = wchar_t_20const__20std____2__find_5babi_nn200100_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($11, $11 + 112 | 0, $12 + 12 | 0) - $11 | 0;
     $6 = $0 >> 2;
     if (($6 | 0) > 27) {
      break block
     }
     $5 = HEAP8[$6 + 66256 | 0];
     block5 : {
      block4 : {
       $0 = $0 & -5;
       if (($0 | 0) != 88) {
        if (($0 | 0) != 96) {
         break block4
        }
        $1 = HEAP32[$4 >> 2];
        if (($1 | 0) != ($3 | 0)) {
         $0 = -1;
         if ((toupper(HEAP8[$1 - 1 | 0]) | 0) != (toupper(HEAP8[$2 | 0]) | 0)) {
          break block1
         }
        }
        HEAP32[$4 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = $5;
        break block3;
       }
       HEAP8[$2 | 0] = 80;
       break block5;
      }
      $0 = toupper($5);
      if (($0 | 0) != HEAP8[$2 | 0]) {
       break block5
      }
      (wasm2js_i32$0 = $2, wasm2js_i32$1 = tolower($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      if (HEAPU8[$1 | 0] != 1) {
       break block5
      }
      HEAP8[$1 | 0] = 0;
      if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7)) {
       break block5
      }
      $0 = HEAP32[$9 >> 2];
      if (($0 - $8 | 0) > 159) {
       break block5
      }
      $1 = HEAP32[$10 >> 2];
      HEAP32[$9 >> 2] = $0 + 4;
      HEAP32[$0 >> 2] = $1;
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $5;
     $0 = 0;
     if (($6 | 0) > 21) {
      break block1
     }
     HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
     break block1;
    }
    $0 = 0;
    break block1;
   }
   $0 = -1;
  }
  __stack_pointer = $12 + 16 | 0;
  return $0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $0 = __stack_pointer - 352 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 344 >> 2] = $2;
  HEAP32[$0 + 348 >> 2] = $1;
  std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 204 | 0, $3, $0 + 224 | 0, $0 + 220 | 0, $0 + 216 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 192 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
  HEAP32[$0 + 188 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP8[$0 + 7 | 0] = 1;
  HEAP8[$0 + 6 | 0] = 69;
  $3 = 0;
  while (1) {
   block7 : {
    block2 : {
     block1 : {
      block : {
       if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 348 | 0, $0 + 344 | 0)) {
        break block
       }
       if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) + $2 | 0)) {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
        HEAP32[$0 + 188 >> 2] = $1 + $2;
       }
       if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0 + 348 | 0), $0 + 7 | 0, $0 + 6 | 0, $2, $0 + 188 | 0, HEAP32[$0 + 220 >> 2], HEAP32[$0 + 216 >> 2], $0 + 204 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
        break block
       }
       if ($3) {
        break block1
       }
       $3 = 0;
       $7 = HEAP32[$0 + 188 >> 2] - $2 | 0;
       if (($7 | 0) <= 0) {
        break block2
       }
       block3 : {
        block4 : {
         $1 = HEAPU8[$2 | 0];
         $8 = $1 - 43 | 0;
         switch ($8 | 0) {
         case 0:
         case 2:
          break block3;
         default:
          break block4;
         };
        }
        if (($1 | 0) == 46) {
         break block1
        }
        $3 = 1;
        if (($1 - 48 & 255) >>> 0 < 10) {
         break block2
        }
        break block;
       }
       if (($7 | 0) == 1) {
        break block2
       }
       block5 : {
        switch ($8 | 0) {
        case 0:
        case 2:
         break block5;
        default:
         break block2;
        };
       }
       $1 = HEAPU8[$2 + 1 | 0];
       if (($1 | 0) == 46) {
        break block1
       }
       $3 = 1;
       if (($1 - 48 & 255) >>> 0 <= 9) {
        break block2
       }
      }
      block6 : {
       if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 204 | 0) | !(HEAP8[$0 + 7 | 0] & 1)) {
        break block6
       }
       $1 = HEAP32[$0 + 12 >> 2];
       if (($1 - ($0 + 16 | 0) | 0) > 159) {
        break block6
       }
       HEAP32[$0 + 12 >> 2] = $1 + 4;
       HEAP32[$1 >> 2] = HEAP32[$0 + 8 >> 2];
      }
      (wasm2js_i32$0 = $5, wasm2js_f64$0 = double_20std____2____num_get_float_5babi_nn200100_5d_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($2, HEAP32[$0 + 188 >> 2], $4)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
      std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 204 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
      if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 348 | 0, $0 + 344 | 0)) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
      }
      $1 = HEAP32[$0 + 348 >> 2];
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 204 | 0);
      __stack_pointer = $0 + 352 | 0;
      break block7;
     }
     $3 = 1;
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0 + 348 | 0);
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $0 = __stack_pointer - 368 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 360 >> 2] = $2;
  HEAP32[$0 + 364 >> 2] = $1;
  std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 220 | 0, $3, $0 + 240 | 0, $0 + 236 | 0, $0 + 232 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 208 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
  HEAP32[$0 + 204 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = $0 + 32;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 23 | 0] = 1;
  HEAP8[$0 + 22 | 0] = 69;
  $3 = 0;
  while (1) {
   block7 : {
    block2 : {
     block1 : {
      block : {
       if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 364 | 0, $0 + 360 | 0)) {
        break block
       }
       if (HEAP32[$0 + 204 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) + $2 | 0)) {
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 1);
        std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($6, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6));
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($6, 0);
        HEAP32[$0 + 204 >> 2] = $1 + $2;
       }
       if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0 + 364 | 0), $0 + 23 | 0, $0 + 22 | 0, $2, $0 + 204 | 0, HEAP32[$0 + 236 >> 2], HEAP32[$0 + 232 >> 2], $0 + 220 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 240 | 0)) {
        break block
       }
       if ($3) {
        break block1
       }
       $3 = 0;
       $7 = HEAP32[$0 + 204 >> 2] - $2 | 0;
       if (($7 | 0) <= 0) {
        break block2
       }
       block3 : {
        block4 : {
         $1 = HEAPU8[$2 | 0];
         $8 = $1 - 43 | 0;
         switch ($8 | 0) {
         case 0:
         case 2:
          break block3;
         default:
          break block4;
         };
        }
        if (($1 | 0) == 46) {
         break block1
        }
        $3 = 1;
        if (($1 - 48 & 255) >>> 0 < 10) {
         break block2
        }
        break block;
       }
       if (($7 | 0) == 1) {
        break block2
       }
       block5 : {
        switch ($8 | 0) {
        case 0:
        case 2:
         break block5;
        default:
         break block2;
        };
       }
       $1 = HEAPU8[$2 + 1 | 0];
       if (($1 | 0) == 46) {
        break block1
       }
       $3 = 1;
       if (($1 - 48 & 255) >>> 0 <= 9) {
        break block2
       }
      }
      block6 : {
       if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 220 | 0) | !(HEAP8[$0 + 23 | 0] & 1)) {
        break block6
       }
       $1 = HEAP32[$0 + 28 >> 2];
       if (($1 - ($0 + 32 | 0) | 0) > 159) {
        break block6
       }
       HEAP32[$0 + 28 >> 2] = $1 + 4;
       HEAP32[$1 >> 2] = HEAP32[$0 + 24 >> 2];
      }
      long_20double_20std____2____num_get_float_5babi_nn200100_5d_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $2, HEAP32[$0 + 204 >> 2], $4);
      $1 = HEAP32[$0 >> 2];
      $2 = HEAP32[$0 + 4 >> 2];
      $3 = HEAP32[$0 + 12 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
      HEAP32[$5 + 12 >> 2] = $3;
      HEAP32[$5 >> 2] = $1;
      HEAP32[$5 + 4 >> 2] = $2;
      std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 220 | 0, $0 + 32 | 0, HEAP32[$0 + 28 >> 2], $4);
      if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 364 | 0, $0 + 360 | 0)) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
      }
      $1 = HEAP32[$0 + 364 >> 2];
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 220 | 0);
      __stack_pointer = $0 + 368 | 0;
      break block7;
     }
     $3 = 1;
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0 + 364 | 0);
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $0 = __stack_pointer - 320 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 312 >> 2] = $2;
  HEAP32[$0 + 316 >> 2] = $1;
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 196 | 0);
  $2 = $0 + 16 | 0;
  std____2__ios_base__getloc_28_29_20const($2, $3);
  std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($2), 66256, 66282, $0 + 208 | 0);
  std____2__locale___locale_28_29($2);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 184 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($3));
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($3, 0);
  HEAP32[$0 + 180 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 316 | 0, $0 + 312 | 0)) {
     break block
    }
    if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($3) + $1 | 0)) {
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($3);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($3) << 1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($3));
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($3, 0);
     HEAP32[$0 + 180 >> 2] = $2 + $1;
    }
    $2 = $0 + 316 | 0;
    if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($2), 16, $1, $0 + 180 | 0, $0 + 8 | 0, 0, $6, $0 + 16 | 0, $0 + 12 | 0, $0 + 208 | 0)) {
     break block
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($2);
    continue;
   }
   break;
  };
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____resize_5babi_nn200100_5d_28unsigned_20long_29($3, HEAP32[$0 + 180 >> 2] - $1 | 0);
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($3);
  $1 = std____2____cloc_28_29();
  HEAP32[$0 + 4 >> 2] = $5;
  if ((int_20std____2____locale____sscanf_5babi_nn200100_5d_void____28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20void_____29($2, $1, $0 + 4 | 0) | 0) != 1) {
   HEAP32[$4 >> 2] = 4
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 316 | 0, $0 + 312 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  $1 = HEAP32[$0 + 316 >> 2];
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
  __stack_pointer = $0 + 320 | 0;
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2, $3) | 0;
 }
 
 function wchar_t_20const__20std____2__find_5babi_nn200100_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[$2 >> 2];
  $5 = $0;
  $2 = $1 - $0 >> 2;
  block : {
   if ($2) {
    while (1) {
     if (HEAP32[$0 >> 2] == ($4 | 0)) {
      break block
     }
     $0 = $0 + 4 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    }
   }
   $0 = 0;
  }
  $0 = std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($5, $0 ? $0 : $1);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
 }
 
 function std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
 }
 
 function std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $1;
  block : {
   if (!(HEAP32[$2 + 4 >> 2] & 1)) {
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
    break block;
   }
   $0 = $5 + 16 | 0;
   std____2__ios_base__getloc_28_29_20const($0, $2);
   $1 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($0);
   std____2__locale___locale_28_29($0);
   block1 : {
    if ($4) {
     std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($0, $1);
     break block1;
    }
    std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($5 + 16 | 0, $1);
   }
   (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($5 + 16 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   while (1) {
    $0 = $5 + 16 | 0;
    (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($5 + 12 | 0, $5 + 8 | 0)) {
     $2 = HEAP32[$5 + 28 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0);
    } else {
     $0 = $5 + 12 | 0;
     std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28char_29($5 + 28 | 0, HEAP8[HEAP32[$0 >> 2]]);
     std____2____wrap_iter_char____operator___5babi_nn200100_5d_28_29($0);
     continue;
    }
    break;
   };
  }
  __stack_pointer = $5 + 32 | 0;
  return $2 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($0) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn200100_5d_28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0));
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($0) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn200100_5d_28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) | 0);
 }
 
 function bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
  return HEAP32[$0 >> 2] == HEAP32[$1 >> 2];
 }
 
 function std____2____wrap_iter_char____operator___5babi_nn200100_5d_28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn200100_5d_28char__29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($1 + 12 | 0, $0);
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$0 >> 2];
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return $1193($1, $2, $3, $4, 1) | 0;
 }
 
 function std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0;
  block : {
   if (!($3 & 2048) | !$2) {
    break block
   }
   $4 = $3 & 74;
   if (($4 | 0) == 8 | ($4 | 0) == 64) {
    break block
   }
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($3 & 512) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if ($4) {
    HEAP8[$0 | 0] = $4;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  $4 = $3 & 74;
  $1 = 111;
  block1 : {
   if (($4 | 0) == 64) {
    break block1
   }
   $1 = $3 & 16384 ? 88 : 120;
   if (($4 | 0) == 8) {
    break block1
   }
   $1 = $2 ? 100 : 117;
  }
  HEAP8[$0 | 0] = $1;
 }
 
 function int_20std____2____locale____snprintf_5babi_nn200100_5d_long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long__29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $5);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $1, $2) {
  $2 = HEAP32[$2 + 4 >> 2] & 176;
  if (($2 | 0) == 32) {
   return $1
  }
  block : {
   if (($2 | 0) != 16) {
    break block
   }
   block2 : {
    block1 : {
     $2 = HEAPU8[$0 | 0];
     switch ($2 - 43 | 0) {
     case 0:
     case 2:
      break block1;
     default:
      break block2;
     };
    }
    return $0 + 1 | 0;
   }
   if (($2 | 0) != 48 | ($1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
    break block
   }
   $0 = $0 + 2 | 0;
  }
  return $0;
 }
 
 function std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  $11 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
  $7 = $10 + 4 | 0;
  $6 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($7, $6);
  block : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($7)) {
    std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($11, $0, $2, $3);
    $6 = ($2 - $0 | 0) + $3 | 0;
    HEAP32[$5 >> 2] = $6;
    break block;
   }
   HEAP32[$5 >> 2] = $3;
   block2 : {
    block1 : {
     $7 = $0;
     $8 = HEAPU8[$7 | 0];
     switch ($8 - 43 | 0) {
     case 0:
     case 2:
      break block1;
     default:
      break block2;
     };
    }
    $7 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($11, $8 << 24 >> 24);
    $8 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $8 + 1;
    HEAP8[$8 | 0] = $7;
    $7 = $0 + 1 | 0;
   }
   if (!(HEAPU8[$7 | 0] != 48 | ($2 - $7 | 0) < 2 | (HEAPU8[$7 + 1 | 0] | 32) != 120)) {
    $8 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($11, 48);
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 1;
    HEAP8[$9 | 0] = $8;
    $8 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($11, HEAP8[$7 + 1 | 0]);
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 1;
    HEAP8[$9 | 0] = $8;
    $7 = $7 + 2 | 0;
   }
   void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29($7, $2);
   $9 = 0;
   $14 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($6);
   $8 = 0;
   $6 = $7;
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29(($7 - $0 | 0) + $3 | 0, HEAP32[$5 >> 2]);
     $6 = HEAP32[$5 >> 2];
    } else {
     $12 = $10 + 4 | 0;
     block4 : {
      if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $8) | 0]) {
       break block4
      }
      if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $8) | 0] != ($9 | 0)) {
       break block4
      }
      $9 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $9 + 1;
      HEAP8[$9 | 0] = $14;
      $8 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($12) - 1 >>> 0 > $8 >>> 0) + $8 | 0;
      $9 = 0;
     }
     $12 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($11, HEAP8[$6 | 0]);
     $13 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $13 + 1;
     HEAP8[$13 | 0] = $12;
     $6 = $6 + 1 | 0;
     $9 = $9 + 1 | 0;
     continue;
    }
    break;
   };
  }
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10 + 4 | 0);
  __stack_pointer = $10 + 16 | 0;
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  block : {
   if (!$0) {
    break block
   }
   $6 = HEAP32[$4 + 12 >> 2];
   $8 = $2 - $1 | 0;
   if (($8 | 0) > 0) {
    if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, $1, $8) | 0) != ($8 | 0)) {
     break block
    }
   }
   $1 = $3 - $1 | 0;
   if (($1 | 0) < ($6 | 0)) {
    $1 = $6 - $1 | 0;
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28unsigned_20long_2c_20char_29($7 + 4 | 0, $1, $5);
    $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($5), $1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($5);
    if (($1 | 0) != ($6 | 0)) {
     break block
    }
   }
   $1 = $3 - $2 | 0;
   if (($1 | 0) > 0) {
    if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, $2, $1) | 0) != ($1 | 0)) {
     break block
    }
   }
   std____2__ios_base__width_5babi_nn200100_5d_28long_29($4);
   $9 = $0;
  }
  __stack_pointer = $7 + 16 | 0;
  return $9;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return $1192($1, $2, $3, $4, $5, 1) | 0;
 }
 
 function int_20std____2____locale____snprintf_5babi_nn200100_5d_long_20long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long_20long__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $5;
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, 24, $1, $2, $4);
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return $1193($1, $2, $3, $4, 0) | 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return $1192($1, $2, $3, $4, $5, 0) | 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $5 = __stack_pointer - 160 | 0;
  __stack_pointer = $5;
  HEAPF64[$5 + 152 >> 3] = $4;
  HEAP32[$5 + 144 >> 2] = 37;
  HEAP32[$5 + 148 >> 2] = 0;
  $6 = $5 + 144 | 0;
  $8 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($6 | 1, 34591, HEAP32[$2 + 4 >> 2]);
  $9 = $5 + 112 | 0;
  HEAP32[$5 + 108 >> 2] = $9;
  $0 = std____2____cloc_28_29();
  block : {
   if ($8) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
    $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_int_2c_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20double__29($9, $0, $6, $5 + 32 | 0, $5 + 152 | 0);
    break block;
   }
   $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20double__29($5 + 112 | 0, $0, $5 + 144 | 0, $5 + 152 | 0);
  }
  HEAP32[$5 + 32 >> 2] = 351;
  $7 = $5 + 32 | 0;
  $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 100 | 0, 0, $7);
  $6 = $5 + 112 | 0;
  block4 : {
   block2 : {
    if (($0 | 0) >= 30) {
     $0 = std____2____cloc_28_29();
     block1 : {
      if ($8) {
       HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
       $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_int_2c_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20double__29($5 + 108 | 0, $0, $5 + 144 | 0, $7, $5 + 152 | 0);
       break block1;
      }
      $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_double___28char___2c_20__locale_struct__2c_20char_20const__2c_20double__29($5 + 108 | 0, $0, $5 + 144 | 0, $5 + 152 | 0);
     }
     if (($0 | 0) == -1) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($9, HEAP32[$5 + 108 >> 2]);
     $6 = HEAP32[$5 + 108 >> 2];
    }
    $10 = $0 + $6 | 0;
    $11 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $10, $2);
    HEAP32[$5 + 32 >> 2] = 351;
    $6 = $5 + 32 | 0;
    $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 24 | 0, 0, $6);
    $7 = HEAP32[$5 + 108 >> 2];
    block3 : {
     if (($7 | 0) == ($5 + 112 | 0)) {
      $0 = $6;
      break block3;
     }
     $0 = emscripten_builtin_malloc($0 << 1);
     if (!$0) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($8, $0);
     $7 = HEAP32[$5 + 108 >> 2];
    }
    $6 = $5 + 12 | 0;
    std____2__ios_base__getloc_28_29_20const($6, $2);
    std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($7, $11, $10, $0, $5 + 20 | 0, $5 + 16 | 0, $6);
    std____2__locale___locale_28_29($6);
    $0 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $2, $3);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($8);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($9);
    __stack_pointer = $5 + 160 | 0;
    break block4;
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  return $0 | 0;
 }
 
 function std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if ($2 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($2 & 1024) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  $3 = $2 & 260;
  if (($3 | 0) != 260) {
   HEAP8[$0 | 0] = 46;
   HEAP8[$0 + 1 | 0] = 42;
   $0 = $0 + 2 | 0;
  }
  $2 = $2 & 16384;
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if ($4) {
    HEAP8[$0 | 0] = $4;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  block1 : {
   block : {
    if (($3 | 0) != 256) {
     if (($3 | 0) != 4) {
      break block
     }
     $1 = $2 ? 70 : 102;
     break block1;
    }
    $1 = $2 ? 69 : 101;
    break block1;
   }
   $1 = $2 ? 65 : 97;
   if (($3 | 0) == 260) {
    break block1
   }
   $1 = $2 ? 71 : 103;
  }
  HEAP8[$0 | 0] = $1;
  return ($3 | 0) != 260;
 }
 
 function std____2__ios_base__precision_5babi_nn200100_5d_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function int_20std____2____locale____snprintf_5babi_nn200100_5d_int_2c_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20double__29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = HEAP32[$3 >> 2];
  HEAPF64[$5 + 8 >> 3] = HEAPF64[$4 >> 3];
  HEAP32[$5 >> 2] = $3;
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, 30, $1, $2, $5);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function int_20std____2____locale____snprintf_5babi_nn200100_5d_double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20double__29($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAPF64[$4 >> 3] = HEAPF64[$3 >> 3];
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, 30, $1, $2, $4);
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function int_20std____2____locale____asprintf_5babi_nn200100_5d_int_2c_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20double__29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = HEAP32[$3 >> 2];
  HEAPF64[$5 + 8 >> 3] = HEAPF64[$4 >> 3];
  HEAP32[$5 >> 2] = $3;
  $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $5);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function int_20std____2____locale____asprintf_5babi_nn200100_5d_double___28char___2c_20__locale_struct__2c_20char_20const__2c_20double__29($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAPF64[$4 >> 3] = HEAPF64[$3 >> 3];
  $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $4);
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  $9 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
  $14 = std____2__numpunct_char__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_char___28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($10 + 4 | 0, $14);
  HEAP32[$5 >> 2] = $3;
  block1 : {
   block : {
    $7 = $0;
    $6 = HEAPU8[$7 | 0];
    switch ($6 - 43 | 0) {
    case 0:
    case 2:
     break block;
    default:
     break block1;
    };
   }
   $6 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, $6 << 24 >> 24);
   $8 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $8 + 1;
   HEAP8[$8 | 0] = $6;
   $7 = $0 + 1 | 0;
  }
  block3 : {
   $6 = $7;
   if (!(($2 - $6 | 0) <= 1 | HEAPU8[$6 | 0] != 48 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
    $8 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, 48);
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 1;
    HEAP8[$7 | 0] = $8;
    $8 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, HEAP8[$6 + 1 | 0]);
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 1;
    HEAP8[$7 | 0] = $8;
    $7 = $6 + 2 | 0;
    $6 = $7;
    while (1) {
     if ($2 >>> 0 <= $6 >>> 0) {
      break block3
     }
     $8 = HEAP8[$6 | 0];
     std____2____cloc_28_29();
     if (!__isxdigit_l($8)) {
      break block3
     }
     $6 = $6 + 1 | 0;
     continue;
    };
   }
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     break block3
    }
    $8 = HEAP8[$6 | 0];
    std____2____cloc_28_29();
    if (!__isdigit_l($8)) {
     break block3
    }
    $6 = $6 + 1 | 0;
    continue;
   };
  }
  block4 : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($10 + 4 | 0)) {
    std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($9, $7, $6, HEAP32[$5 >> 2]);
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $7 | 0);
    break block4;
   }
   void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29($7, $6);
   $16 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($14);
   $8 = $7;
   while (1) {
    if ($6 >>> 0 <= $8 >>> 0) {
     void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29(($7 - $0 | 0) + $3 | 0, HEAP32[$5 >> 2])
    } else {
     $12 = $10 + 4 | 0;
     block5 : {
      if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $13) | 0] <= 0) {
       break block5
      }
      if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $13) | 0] != ($11 | 0)) {
       break block5
      }
      $11 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $11 + 1;
      HEAP8[$11 | 0] = $16;
      $13 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($12) - 1 >>> 0 > $13 >>> 0) + $13 | 0;
      $11 = 0;
     }
     $12 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, HEAP8[$8 | 0]);
     $15 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $15 + 1;
     HEAP8[$15 | 0] = $12;
     $8 = $8 + 1 | 0;
     $11 = $11 + 1 | 0;
     continue;
    }
    break;
   };
  }
  while (1) {
   block7 : {
    block6 : {
     if ($2 >>> 0 <= $6 >>> 0) {
      $8 = $6;
      break block6;
     }
     $8 = $6 + 1 | 0;
     $6 = HEAP8[$6 | 0];
     if (($6 | 0) != 46) {
      break block7
     }
     $6 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($14);
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $6;
    }
    std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($9, $8, $2, HEAP32[$5 >> 2]);
    $6 = $5;
    $5 = HEAP32[$5 >> 2] + ($2 - $8 | 0) | 0;
    HEAP32[$6 >> 2] = $5;
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $5 : ($1 - $0 | 0) + $3 | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10 + 4 | 0);
    __stack_pointer = $10 + 16 | 0;
    return;
   }
   $6 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, $6);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $6 = $8;
   continue;
  };
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 176 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 168 >> 2] = $6;
  HEAP32[$8 + 172 >> 2] = $7;
  HEAP32[$8 + 160 >> 2] = $4;
  HEAP32[$8 + 164 >> 2] = $5;
  HEAP32[$8 + 152 >> 2] = 37;
  HEAP32[$8 + 156 >> 2] = 0;
  $4 = $8 + 152 | 0;
  $5 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($4 | 1, 31629, HEAP32[$2 + 4 >> 2]);
  $6 = $8 + 112 | 0;
  HEAP32[$8 + 108 >> 2] = $6;
  $0 = std____2____cloc_28_29();
  block : {
   if ($5) {
    HEAP32[$8 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
    $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_int_2c_20long_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20long_20double__29($6, $0, $4, $8 + 32 | 0, $8 + 160 | 0);
    break block;
   }
   $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($8 + 112 | 0, $0, $8 + 152 | 0, $8 + 160 | 0);
  }
  HEAP32[$8 + 32 >> 2] = 351;
  $7 = $8 + 32 | 0;
  $6 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 100 | 0, 0, $7);
  $4 = $8 + 112 | 0;
  block4 : {
   block2 : {
    if (($0 | 0) >= 30) {
     $0 = std____2____cloc_28_29();
     block1 : {
      if ($5) {
       HEAP32[$8 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
       $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_int_2c_20long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20long_20double__29($8 + 108 | 0, $0, $8 + 152 | 0, $7, $8 + 160 | 0);
       break block1;
      }
      $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($8 + 108 | 0, $0, $8 + 152 | 0, $8 + 160 | 0);
     }
     if (($0 | 0) == -1) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($6, HEAP32[$8 + 108 >> 2]);
     $4 = HEAP32[$8 + 108 >> 2];
    }
    $9 = $0 + $4 | 0;
    $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $9, $2);
    HEAP32[$8 + 32 >> 2] = 351;
    $4 = $8 + 32 | 0;
    $5 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 24 | 0, 0, $4);
    $7 = HEAP32[$8 + 108 >> 2];
    block3 : {
     if (($7 | 0) == ($8 + 112 | 0)) {
      $0 = $4;
      break block3;
     }
     $0 = emscripten_builtin_malloc($0 << 1);
     if (!$0) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($5, $0);
     $7 = HEAP32[$8 + 108 >> 2];
    }
    $4 = $8 + 12 | 0;
    std____2__ios_base__getloc_28_29_20const($4, $2);
    std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($7, $10, $9, $0, $8 + 20 | 0, $8 + 16 | 0, $4);
    std____2__locale___locale_28_29($4);
    $0 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0, HEAP32[$8 + 20 >> 2], HEAP32[$8 + 16 >> 2], $2, $3);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($5);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($6);
    __stack_pointer = $8 + 176 | 0;
    break block4;
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  return $0 | 0;
 }
 
 function int_20std____2____locale____snprintf_5babi_nn200100_5d_int_2c_20long_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20long_20double__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = HEAP32[$3 >> 2];
  $7 = HEAP32[$4 >> 2];
  $8 = HEAP32[$4 + 4 >> 2];
  $3 = HEAP32[$4 + 12 >> 2];
  HEAP32[$5 + 16 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$5 + 20 >> 2] = $3;
  HEAP32[$5 + 8 >> 2] = $7;
  HEAP32[$5 + 12 >> 2] = $8;
  HEAP32[$5 >> 2] = $6;
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, 30, $1, $2, $5);
  __stack_pointer = $5 + 32 | 0;
  return $0;
 }
 
 function int_20std____2____locale____snprintf_5babi_nn200100_5d_long_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$3 >> 2];
  $6 = HEAP32[$3 + 4 >> 2];
  $7 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = $7;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $6;
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, 30, $1, $2, $4);
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function int_20std____2____locale____asprintf_5babi_nn200100_5d_int_2c_20long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20long_20double__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = HEAP32[$3 >> 2];
  $7 = HEAP32[$4 >> 2];
  $8 = HEAP32[$4 + 4 >> 2];
  $3 = HEAP32[$4 + 12 >> 2];
  HEAP32[$5 + 16 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$5 + 20 >> 2] = $3;
  HEAP32[$5 + 8 >> 2] = $7;
  HEAP32[$5 + 12 >> 2] = $8;
  HEAP32[$5 >> 2] = $6;
  $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $5);
  __stack_pointer = $5 + 32 | 0;
  return $0;
 }
 
 function int_20std____2____locale____asprintf_5babi_nn200100_5d_long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$3 >> 2];
  $6 = HEAP32[$3 + 4 >> 2];
  $7 = HEAP32[$3 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = $7;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $6;
  $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $4);
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 76 >> 2] = $4;
  $4 = $0 + 48 | 0;
  $7 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long__29($4, 20, std____2____cloc_28_29(), 27405, $0 + 76 | 0);
  $5 = $4 + $7 | 0;
  $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
  std____2__ios_base__getloc_28_29_20const($0, $2);
  $6 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($0);
  std____2__locale___locale_28_29($0);
  std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($6, $4, $5, $0);
  $6 = $1;
  $1 = $0 + $7 | 0;
  $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($6, $0, ($5 | 0) == ($8 | 0) ? $1 : ($8 - $4 | 0) + $0 | 0, $1, $2, $3);
  __stack_pointer = $0 + 80 | 0;
  return $1 | 0;
 }
 
 function std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $2;
  HEAP32[$5 + 8 >> 2] = $4;
  $2 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($5 + 4 | 0, $5 + 12 | 0);
  $0 = vsnprintf($0, $1, $3, HEAP32[$5 + 8 >> 2]);
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($2);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function std____2__ios_base__width_5babi_nn200100_5d_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28unsigned_20long_2c_20char_29($0, $1, $2) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28unsigned_20long_2c_20char_29($0, $1, $2);
  return $0;
 }
 
 function std____2__ios_base__width_5babi_nn200100_5d_28long_29($0) {
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 28 >> 2] = $1;
  block : {
   if (!(HEAP32[$2 + 4 >> 2] & 1)) {
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
    break block;
   }
   $0 = $5 + 16 | 0;
   std____2__ios_base__getloc_28_29_20const($0, $2);
   $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($0);
   std____2__locale___locale_28_29($0);
   block1 : {
    if ($4) {
     std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($0, $1);
     break block1;
    }
    std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($5 + 16 | 0, $1);
   }
   (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($5 + 16 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   while (1) {
    $0 = $5 + 16 | 0;
    (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($5 + 12 | 0, $5 + 8 | 0)) {
     $2 = HEAP32[$5 + 28 >> 2];
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0);
    } else {
     $0 = $5 + 12 | 0;
     std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28wchar_t_29($5 + 28 | 0, HEAP32[HEAP32[$0 >> 2] >> 2]);
     std____2____wrap_iter_wchar_t____operator___5babi_nn200100_5d_28_29($0);
     continue;
    }
    break;
   };
  }
  __stack_pointer = $5 + 32 | 0;
  return $2 | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($0) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______make_iterator_5babi_nn200100_5d_28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) << 2) | 0);
 }
 
 function std____2____wrap_iter_wchar_t____operator___5babi_nn200100_5d_28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return $1195($1, $2, $3, $4, 1) | 0;
 }
 
 function std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
  $7 = $10 + 4 | 0;
  $6 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($7, $6);
  block : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($7)) {
    std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $0, $2, $3);
    $6 = ($2 - $0 << 2) + $3 | 0;
    HEAP32[$5 >> 2] = $6;
    break block;
   }
   HEAP32[$5 >> 2] = $3;
   block2 : {
    block1 : {
     $7 = $0;
     $8 = HEAPU8[$7 | 0];
     switch ($8 - 43 | 0) {
     case 0:
     case 2:
      break block1;
     default:
      break block2;
     };
    }
    $7 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($11, $8 << 24 >> 24);
    $8 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $7;
    $7 = $0 + 1 | 0;
   }
   if (!(HEAPU8[$7 | 0] != 48 | ($2 - $7 | 0) < 2 | (HEAPU8[$7 + 1 | 0] | 32) != 120)) {
    $8 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($11, 48);
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $8;
    $8 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($11, HEAP8[$7 + 1 | 0]);
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $8;
    $7 = $7 + 2 | 0;
   }
   void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29($7, $2);
   $9 = 0;
   $14 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($6);
   $8 = 0;
   $6 = $7;
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29(($7 - $0 << 2) + $3 | 0, HEAP32[$5 >> 2]);
     $6 = HEAP32[$5 >> 2];
    } else {
     $12 = $10 + 4 | 0;
     block4 : {
      if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $8) | 0]) {
       break block4
      }
      if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $8) | 0] != ($9 | 0)) {
       break block4
      }
      $9 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $9 + 4;
      HEAP32[$9 >> 2] = $14;
      $8 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($12) - 1 >>> 0 > $8 >>> 0) + $8 | 0;
      $9 = 0;
     }
     $12 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($11, HEAP8[$6 | 0]);
     $13 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $12;
     $6 = $6 + 1 | 0;
     $9 = $9 + 1 | 0;
     continue;
    }
    break;
   };
  }
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10 + 4 | 0);
  __stack_pointer = $10 + 16 | 0;
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  block : {
   if (!$0) {
    break block
   }
   $6 = HEAP32[$4 + 12 >> 2];
   $8 = $2 - $1 >> 2;
   if (($8 | 0) > 0) {
    if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, $1, $8) | 0) != ($8 | 0)) {
     break block
    }
   }
   $1 = $3 - $1 >> 2;
   if (($1 | 0) < ($6 | 0)) {
    $1 = $6 - $1 | 0;
    $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29($7 + 4 | 0, $1, $5);
    $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($5), $1);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($5);
    if (($1 | 0) != ($6 | 0)) {
     break block
    }
   }
   $1 = $3 - $2 >> 2;
   if (($1 | 0) > 0) {
    if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sputn_5babi_nn200100_5d_28char_20const__2c_20long_29($0, $2, $1) | 0) != ($1 | 0)) {
     break block
    }
   }
   std____2__ios_base__width_5babi_nn200100_5d_28long_29($4);
   $9 = $0;
  }
  __stack_pointer = $7 + 16 | 0;
  return $9;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return $1194($1, $2, $3, $4, $5, 1) | 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return $1195($1, $2, $3, $4, 0) | 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return $1194($1, $2, $3, $4, $5, 0) | 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $5 = __stack_pointer - 320 | 0;
  __stack_pointer = $5;
  HEAPF64[$5 + 312 >> 3] = $4;
  HEAP32[$5 + 304 >> 2] = 37;
  HEAP32[$5 + 308 >> 2] = 0;
  $6 = $5 + 304 | 0;
  $8 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($6 | 1, 34591, HEAP32[$2 + 4 >> 2]);
  $9 = $5 + 272 | 0;
  HEAP32[$5 + 268 >> 2] = $9;
  $0 = std____2____cloc_28_29();
  block : {
   if ($8) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
    $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_int_2c_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20double__29($9, $0, $6, $5 + 32 | 0, $5 + 312 | 0);
    break block;
   }
   $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20double__29($5 + 272 | 0, $0, $5 + 304 | 0, $5 + 312 | 0);
  }
  HEAP32[$5 + 32 >> 2] = 351;
  $7 = $5 + 32 | 0;
  $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 260 | 0, 0, $7);
  $6 = $5 + 272 | 0;
  block4 : {
   block2 : {
    if (($0 | 0) >= 30) {
     $0 = std____2____cloc_28_29();
     block1 : {
      if ($8) {
       HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
       $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_int_2c_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20double__29($5 + 268 | 0, $0, $5 + 304 | 0, $7, $5 + 312 | 0);
       break block1;
      }
      $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_double___28char___2c_20__locale_struct__2c_20char_20const__2c_20double__29($5 + 268 | 0, $0, $5 + 304 | 0, $5 + 312 | 0);
     }
     if (($0 | 0) == -1) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($9, HEAP32[$5 + 268 >> 2]);
     $6 = HEAP32[$5 + 268 >> 2];
    }
    $10 = $0 + $6 | 0;
    $11 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $10, $2);
    HEAP32[$5 + 32 >> 2] = 351;
    $6 = $5 + 32 | 0;
    $8 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 24 | 0, 0, $6);
    $7 = HEAP32[$5 + 268 >> 2];
    block3 : {
     if (($7 | 0) == ($5 + 272 | 0)) {
      $0 = $6;
      break block3;
     }
     $0 = emscripten_builtin_malloc($0 << 3);
     if (!$0) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($8, $0);
     $7 = HEAP32[$5 + 268 >> 2];
    }
    $6 = $5 + 12 | 0;
    std____2__ios_base__getloc_28_29_20const($6, $2);
    std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($7, $11, $10, $0, $5 + 20 | 0, $5 + 16 | 0, $6);
    std____2__locale___locale_28_29($6);
    $0 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $2, $3);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($8);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($9);
    __stack_pointer = $5 + 320 | 0;
    break block4;
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  return $0 | 0;
 }
 
 function std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  $10 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
  $14 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__numpunct_wchar_t___28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($11 + 4 | 0, $14);
  HEAP32[$5 >> 2] = $3;
  block1 : {
   block : {
    $7 = $0;
    $6 = HEAPU8[$7 | 0];
    switch ($6 - 43 | 0) {
    case 0:
    case 2:
     break block;
    default:
     break block1;
    };
   }
   $6 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($10, $6 << 24 >> 24);
   $8 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $8 + 4;
   HEAP32[$8 >> 2] = $6;
   $7 = $0 + 1 | 0;
  }
  block3 : {
   $6 = $7;
   if (!(($2 - $6 | 0) <= 1 | HEAPU8[$6 | 0] != 48 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
    $8 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($10, 48);
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 4;
    HEAP32[$7 >> 2] = $8;
    $8 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($10, HEAP8[$6 + 1 | 0]);
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 4;
    HEAP32[$7 >> 2] = $8;
    $7 = $6 + 2 | 0;
    $6 = $7;
    while (1) {
     if ($2 >>> 0 <= $6 >>> 0) {
      break block3
     }
     $8 = HEAP8[$6 | 0];
     std____2____cloc_28_29();
     if (!__isxdigit_l($8)) {
      break block3
     }
     $6 = $6 + 1 | 0;
     continue;
    };
   }
   while (1) {
    if ($2 >>> 0 <= $6 >>> 0) {
     break block3
    }
    $8 = HEAP8[$6 | 0];
    std____2____cloc_28_29();
    if (!__isdigit_l($8)) {
     break block3
    }
    $6 = $6 + 1 | 0;
    continue;
   };
  }
  block4 : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($11 + 4 | 0)) {
    std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($10, $7, $6, HEAP32[$5 >> 2]);
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $7 << 2);
    break block4;
   }
   void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29($7, $6);
   $16 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($14);
   $8 = $7;
   while (1) {
    if ($6 >>> 0 <= $8 >>> 0) {
     void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29(($7 - $0 << 2) + $3 | 0, HEAP32[$5 >> 2])
    } else {
     $12 = $11 + 4 | 0;
     block5 : {
      if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $13) | 0] <= 0) {
       break block5
      }
      if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($12, $13) | 0] != ($9 | 0)) {
       break block5
      }
      $9 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $9 + 4;
      HEAP32[$9 >> 2] = $16;
      $13 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($12) - 1 >>> 0 > $13 >>> 0) + $13 | 0;
      $9 = 0;
     }
     $12 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($10, HEAP8[$8 | 0]);
     $15 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $15 + 4;
     HEAP32[$15 >> 2] = $12;
     $8 = $8 + 1 | 0;
     $9 = $9 + 1 | 0;
     continue;
    }
    break;
   };
  }
  block7 : {
   block6 : {
    while (1) {
     if ($2 >>> 0 <= $6 >>> 0) {
      break block6
     }
     $8 = $6 + 1 | 0;
     $6 = HEAP8[$6 | 0];
     if (($6 | 0) != 46) {
      $6 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($10, $6);
      $7 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $7 + 4;
      HEAP32[$7 >> 2] = $6;
      $6 = $8;
      continue;
     }
     break;
    };
    $6 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($14);
    $7 = HEAP32[$5 >> 2];
    $9 = $7 + 4 | 0;
    HEAP32[$5 >> 2] = $9;
    HEAP32[$7 >> 2] = $6;
    break block7;
   }
   $9 = HEAP32[$5 >> 2];
   $8 = $6;
  }
  std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($10, $8, $2, $9);
  $6 = $5;
  $5 = HEAP32[$5 >> 2] + ($2 - $8 << 2) | 0;
  HEAP32[$6 >> 2] = $5;
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $5 : ($1 - $0 << 2) + $3 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($11 + 4 | 0);
  __stack_pointer = $11 + 16 | 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 336 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 328 >> 2] = $6;
  HEAP32[$8 + 332 >> 2] = $7;
  HEAP32[$8 + 320 >> 2] = $4;
  HEAP32[$8 + 324 >> 2] = $5;
  HEAP32[$8 + 312 >> 2] = 37;
  HEAP32[$8 + 316 >> 2] = 0;
  $4 = $8 + 312 | 0;
  $5 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($4 | 1, 31629, HEAP32[$2 + 4 >> 2]);
  $6 = $8 + 272 | 0;
  HEAP32[$8 + 268 >> 2] = $6;
  $0 = std____2____cloc_28_29();
  block : {
   if ($5) {
    HEAP32[$8 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
    $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_int_2c_20long_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20long_20double__29($6, $0, $4, $8 + 32 | 0, $8 + 320 | 0);
    break block;
   }
   $0 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long_20double___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($8 + 272 | 0, $0, $8 + 312 | 0, $8 + 320 | 0);
  }
  HEAP32[$8 + 32 >> 2] = 351;
  $7 = $8 + 32 | 0;
  $6 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 260 | 0, 0, $7);
  $4 = $8 + 272 | 0;
  block4 : {
   block2 : {
    if (($0 | 0) >= 30) {
     $0 = std____2____cloc_28_29();
     block1 : {
      if ($5) {
       HEAP32[$8 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
       $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_int_2c_20long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20int___2c_20long_20double__29($8 + 268 | 0, $0, $8 + 312 | 0, $7, $8 + 320 | 0);
       break block1;
      }
      $0 = int_20std____2____locale____asprintf_5babi_nn200100_5d_long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($8 + 268 | 0, $0, $8 + 312 | 0, $8 + 320 | 0);
     }
     if (($0 | 0) == -1) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($6, HEAP32[$8 + 268 >> 2]);
     $4 = HEAP32[$8 + 268 >> 2];
    }
    $9 = $0 + $4 | 0;
    $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $9, $2);
    HEAP32[$8 + 32 >> 2] = 351;
    $4 = $8 + 32 | 0;
    $5 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($8 + 24 | 0, 0, $4);
    $7 = HEAP32[$8 + 268 >> 2];
    block3 : {
     if (($7 | 0) == ($8 + 272 | 0)) {
      $0 = $4;
      break block3;
     }
     $0 = emscripten_builtin_malloc($0 << 3);
     if (!$0) {
      break block2
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($5, $0);
     $7 = HEAP32[$8 + 268 >> 2];
    }
    $4 = $8 + 12 | 0;
    std____2__ios_base__getloc_28_29_20const($4, $2);
    std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($7, $10, $9, $0, $8 + 20 | 0, $8 + 16 | 0, $4);
    std____2__locale___locale_28_29($4);
    $0 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0, HEAP32[$8 + 20 >> 2], HEAP32[$8 + 16 >> 2], $2, $3);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($5);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($6);
    __stack_pointer = $8 + 336 | 0;
    break block4;
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  return $0 | 0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = __stack_pointer - 192 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 188 >> 2] = $4;
  $4 = $0 + 160 | 0;
  $7 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long__29($4, 20, std____2____cloc_28_29(), 27405, $0 + 188 | 0);
  $5 = $4 + $7 | 0;
  $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
  std____2__ios_base__getloc_28_29_20const($0, $2);
  $6 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($0);
  std____2__locale___locale_28_29($0);
  std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($6, $4, $5, $0);
  $6 = $1;
  $1 = ($7 << 2) + $0 | 0;
  $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($6, $0, ($5 | 0) == ($8 | 0) ? $1 : ($8 - $4 << 2) + $0 | 0, $1, $2, $3);
  __stack_pointer = $0 + 192 | 0;
  return $1 | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block1 : {
   if ($1 >>> 0 <= 1073741815) {
    block : {
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($1)) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $1);
      $4 = $0;
      break block;
     }
     std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29($1) + 1 | 0);
     $4 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 >> 2] = $4;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
     HEAP32[$0 + 4 >> 2] = $1;
    }
    $5 = __stack_pointer - 16 | 0;
    __stack_pointer = $5;
    HEAP32[$5 + 12 >> 2] = $2;
    $6 = $4;
    $2 = $1;
    while (1) {
     if ($2) {
      HEAP32[$6 >> 2] = HEAP32[$5 + 12 >> 2];
      $2 = $2 - 1 | 0;
      $6 = $6 + 4 | 0;
      continue;
     }
     break;
    };
    __stack_pointer = $5 + 16 | 0;
    HEAP32[$3 + 4 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29(($1 << 2) + $4 | 0, $3 + 4 | 0);
    __stack_pointer = $3 + 16 | 0;
    break block1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
  return $0;
 }
 
 function void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  block : {
   if (($0 | 0) == ($1 | 0)) {
    break block
   }
   while (1) {
    $1 = $1 - 1 | 0;
    HEAP32[$2 + 8 >> 2] = $1;
    if ($0 >>> 0 >= $1 >>> 0) {
     break block
    }
    std____2__enable_if_is_move_constructible_char___value_20___20is_move_assignable_char___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_char__28char__2c_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    $0 = HEAP32[$2 + 12 >> 2] + 1 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    $1 = HEAP32[$2 + 8 >> 2];
    continue;
   };
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $0;
  block : {
   if (($0 | 0) == ($1 | 0)) {
    break block
   }
   while (1) {
    $1 = $1 - 4 | 0;
    HEAP32[$2 + 8 >> 2] = $1;
    if ($0 >>> 0 >= $1 >>> 0) {
     break block
    }
    std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    $0 = HEAP32[$2 + 12 >> 2] + 4 | 0;
    HEAP32[$2 + 12 >> 2] = $0;
    $1 = HEAP32[$2 + 8 >> 2];
    continue;
   };
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $1;
  $1 = $8 + 4 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $9 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  HEAP32[$4 >> 2] = 0;
  $1 = 0;
  block : {
   while (1) {
    if (($6 | 0) == ($7 | 0) | $1) {
     break block
    }
    block1 : {
     if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($8 + 12 | 0, $8 + 8 | 0)) {
      break block1
     }
     block4 : {
      if ((std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($9, HEAP8[$6 | 0]) | 0) == 37) {
       if (($6 + 1 | 0) == ($7 | 0)) {
        break block1
       }
       $2 = 0;
       block3 : {
        block2 : {
         $1 = std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($9, HEAP8[$6 + 1 | 0]);
         if (($1 | 0) == 69) {
          break block2
         }
         $10 = 1;
         if (($1 & 255) == 48) {
          break block2
         }
         break block3;
        }
        if (($6 + 2 | 0) == ($7 | 0)) {
         break block1
        }
        $10 = 2;
        $2 = $1;
        $1 = std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($9, HEAP8[$6 + 2 | 0]);
       }
       (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 12 >> 2], HEAP32[$8 + 8 >> 2], $3, $4, $5, $1, $2) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       $6 = ($6 + $10 | 0) + 1 | 0;
       break block4;
      }
      if (std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($9, 1, HEAP8[$6 | 0])) {
       while (1) {
        $6 = $6 + 1 | 0;
        if (($7 | 0) != ($6 | 0)) {
         if (std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($9, 1, HEAP8[$6 | 0])) {
          continue
         }
        }
        break;
       };
       while (1) {
        $1 = $8 + 12 | 0;
        if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($1, $8 + 8 | 0)) {
         break block4
        }
        if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($9, 1, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($1))) {
         break block4
        }
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($1);
        continue;
       };
      }
      $1 = $8 + 12 | 0;
      if ((std____2__ctype_char___toupper_5babi_nn200100_5d_28char_29_20const($9, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($1)) | 0) == (std____2__ctype_char___toupper_5babi_nn200100_5d_28char_29_20const($9, HEAP8[$6 | 0]) | 0)) {
       $6 = $6 + 1 | 0;
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($1);
       break block4;
      }
      HEAP32[$4 >> 2] = 4;
     }
     $1 = HEAP32[$4 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$4 >> 2] = 4;
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($8 + 12 | 0, $8 + 8 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  __stack_pointer = $8 + 16 | 0;
  return HEAP32[$8 + 12 >> 2];
 }
 
 function std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, 0) | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_date_order_28_29_20const($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 8 >> 2] = 624576549;
  HEAP32[$6 + 12 >> 2] = 1394948685;
  $7 = $0;
  $0 = $6 + 16 | 0;
  $1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($7, $1, $2, $3, $4, $5, $6 + 8 | 0, $0);
  __stack_pointer = $0;
  return $1 | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($6, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) | 0) | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 12 >> 2] = $1;
  $1 = $6 + 8 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $3 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $6 + 12 | 0, $2, $4, $3);
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 12 >> 2] = $1;
  $1 = $6 + 8 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $3 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $6 + 12 | 0, $2, $4, $3);
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = $0 + 8 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $3 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $0 + 12 | 0, $2, $4, $3);
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1 | 0) < 69 ? $1 + 2e3 | 0 : $1 >>> 0 < 100 ? $1 + 1900 | 0 : $1) - 1900
  }
 }
 
 function int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $1;
  $1 = 0;
  $6 = 6;
  block2 : {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $5 + 12 | 0)) {
     break block
    }
    $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0);
    $6 = 4;
    if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($3, 64, $7)) {
     break block
    }
    $1 = std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($3, $7);
    while (1) {
     block1 : {
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
      $1 = $1 - 48 | 0;
      if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $5 + 12 | 0) | ($4 | 0) < 2) {
       break block1
      }
      $7 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0);
      if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($3, 64, $7)) {
       break block2
      }
      $4 = $4 - 1 | 0;
      $1 = std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($3, $7) + Math_imul($1, 10) | 0;
      continue;
     }
     break;
    };
    if (!bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $5 + 12 | 0)) {
     break block2
    }
    $6 = 2;
   }
   HEAP32[$2 >> 2] = $6 | HEAP32[$2 >> 2];
  }
  __stack_pointer = $5 + 16 | 0;
  return $1;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 12 >> 2] = $1;
  HEAP32[$4 >> 2] = 0;
  std____2__ios_base__getloc_28_29_20const($7, $3);
  $8 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($7);
  std____2__locale___locale_28_29($7);
  block35 : {
   block24 : {
    block36 : {
     block2 : {
      switch ($6 - 65 | 0) {
      case 0:
      case 32:
       std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 12 | 0, $2, $4, $8);
       break block24;
      case 1:
      case 33:
      case 39:
       std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 12 | 0, $2, $4, $8);
       break block24;
      case 34:
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$7 + 12 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 35:
      case 36:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block25 : {
        if (!($1 & 4 | $0 - 1 >>> 0 > 30)) {
         HEAP32[$5 + 12 >> 2] = $0;
         break block25;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 3:
       HEAP32[$7 >> 2] = 623865125;
       HEAP32[$7 + 4 >> 2] = 2032480100;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 8 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 5:
       HEAP32[$7 >> 2] = 623728933;
       HEAP32[$7 + 4 >> 2] = 1680158061;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 8 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 7:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block26 : {
        if (!($1 & 4 | ($0 | 0) > 23)) {
         HEAP32[$5 + 8 >> 2] = $0;
         break block26;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 8:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block27 : {
        if (!($1 & 4 | $0 - 1 >>> 0 > 11)) {
         HEAP32[$5 + 8 >> 2] = $0;
         break block27;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 41:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 3);
       $1 = HEAP32[$4 >> 2];
       block28 : {
        if (!($1 & 4 | ($0 | 0) > 365)) {
         HEAP32[$5 + 28 >> 2] = $0;
         break block28;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 44:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       $0 = $0 - 1 | 0;
       block29 : {
        if (!($1 & 4 | $0 >>> 0 > 11)) {
         HEAP32[$5 + 16 >> 2] = $0;
         break block29;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 12:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block30 : {
        if (!($1 & 4 | ($0 | 0) > 59)) {
         HEAP32[$5 + 4 >> 2] = $0;
         break block30;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 45:
      case 51:
       $0 = $7 + 12 | 0;
       $1 = __stack_pointer - 16 | 0;
       __stack_pointer = $1;
       HEAP32[$1 + 12 >> 2] = $2;
       while (1) {
        block31 : {
         if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1 + 12 | 0)) {
          break block31
         }
         if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($8, 1, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0))) {
          break block31
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
         continue;
        }
        break;
       };
       if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $1 + 12 | 0)) {
        HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
       }
       __stack_pointer = $1 + 16 | 0;
       break block24;
      case 47:
       $1 = $7 + 12 | 0;
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
       block32 : {
        if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 12 | 0) | 0)) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
         break block32;
        }
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($1, $2, $0, $0 + 24 | 0, $8, $4, 0);
        $1 = HEAP32[$5 + 8 >> 2];
        if (!(($2 | 0) != ($0 | 0) | ($1 | 0) != 12)) {
         HEAP32[$5 + 8 >> 2] = 0;
         break block32;
        }
        if (!(($2 - $0 | 0) != 12 | ($1 | 0) > 11)) {
         HEAP32[$5 + 8 >> 2] = $1 + 12
        }
       }
       break block24;
      case 49:
       $6 = HEAPU8[66296] | HEAPU8[66297] << 8 | (HEAPU8[66298] << 16 | HEAPU8[66299] << 24);
       HEAP8[$7 + 7 | 0] = $6;
       HEAP8[$7 + 8 | 0] = $6 >>> 8;
       HEAP8[$7 + 9 | 0] = $6 >>> 16;
       HEAP8[$7 + 10 | 0] = $6 >>> 24;
       $6 = HEAPU8[66293] | HEAPU8[66294] << 8 | (HEAPU8[66295] << 16 | HEAPU8[66296] << 24);
       HEAP32[$7 >> 2] = HEAPU8[66289] | HEAPU8[66290] << 8 | (HEAPU8[66291] << 16 | HEAPU8[66292] << 24);
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 11 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 17:
       HEAP8[$7 + 4 | 0] = HEAPU8[66304];
       HEAP32[$7 >> 2] = HEAPU8[66300] | HEAPU8[66301] << 8 | (HEAPU8[66302] << 16 | HEAPU8[66303] << 24);
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 5 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 18:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block33 : {
        if (!($1 & 4 | ($0 | 0) > 60)) {
         HEAP32[$5 >> 2] = $0;
         break block33;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 19:
       HEAP32[$7 >> 2] = 624576549;
       HEAP32[$7 + 4 >> 2] = 1394948685;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 8 | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 54:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 1);
       $1 = HEAP32[$4 >> 2];
       block34 : {
        if (!($1 & 4 | ($0 | 0) > 6)) {
         HEAP32[$5 + 24 >> 2] = $0;
         break block34;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 55:
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
       break block35;
      case 23:
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$7 + 12 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) | 0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       break block24;
      case 56:
       std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $7 + 12 | 0, $2, $4, $8);
       break block24;
      case 24:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($7 + 12 | 0, $2, $4, $8, 4);
       if (!(HEAPU8[$4 | 0] & 4)) {
        HEAP32[$5 + 20 >> 2] = $0 - 1900
       }
       break block24;
      default:
       if (($6 | 0) == 37) {
        break block36
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break block2;
      };
     }
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
     break block24;
    }
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 12 >> 2] = $2;
    $2 = $7 + 12 | 0;
    $3 = $0 + 12 | 0;
    $1 = 6;
    block38 : {
     block37 : {
      if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($2, $3)) {
       break block37
      }
      $1 = 4;
      if ((std____2__ctype_char___narrow_5babi_nn200100_5d_28char_2c_20char_29_20const($8, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($2)) | 0) != 37) {
       break block37
      }
      if (!bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($2), $3)) {
       break block38
      }
      $1 = 2;
     }
     HEAP32[$4 >> 2] = $1 | HEAP32[$4 >> 2];
    }
    __stack_pointer = $0 + 16 | 0;
   }
   $0 = HEAP32[$7 + 12 >> 2];
  }
  __stack_pointer = $7 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  HEAP32[$8 + 8 >> 2] = $2;
  HEAP32[$8 + 12 >> 2] = $1;
  $1 = $8 + 4 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $9 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  HEAP32[$4 >> 2] = 0;
  $1 = 0;
  block : {
   while (1) {
    if (($6 | 0) == ($7 | 0) | $1) {
     break block
    }
    block1 : {
     if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($8 + 12 | 0, $8 + 8 | 0)) {
      break block1
     }
     block4 : {
      if ((std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($9, HEAP32[$6 >> 2]) | 0) == 37) {
       if (($6 + 4 | 0) == ($7 | 0)) {
        break block1
       }
       $2 = 0;
       block3 : {
        block2 : {
         $1 = std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($9, HEAP32[$6 + 4 >> 2]);
         if (($1 | 0) == 69) {
          break block2
         }
         $10 = 4;
         if (($1 & 255) == 48) {
          break block2
         }
         break block3;
        }
        if (($6 + 8 | 0) == ($7 | 0)) {
         break block1
        }
        $10 = 8;
        $2 = $1;
        $1 = std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($9, HEAP32[$6 + 8 >> 2]);
       }
       (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 12 >> 2], HEAP32[$8 + 8 >> 2], $3, $4, $5, $1, $2) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       $6 = ($6 + $10 | 0) + 4 | 0;
       break block4;
      }
      if (std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($9, 1, HEAP32[$6 >> 2])) {
       while (1) {
        $6 = $6 + 4 | 0;
        if (($7 | 0) != ($6 | 0)) {
         if (std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($9, 1, HEAP32[$6 >> 2])) {
          continue
         }
        }
        break;
       };
       while (1) {
        $1 = $8 + 12 | 0;
        if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($1, $8 + 8 | 0)) {
         break block4
        }
        if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($9, 1, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($1))) {
         break block4
        }
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($1);
        continue;
       };
      }
      $1 = $8 + 12 | 0;
      if ((std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($1)) | 0) == (std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($9, HEAP32[$6 >> 2]) | 0)) {
       $6 = $6 + 4 | 0;
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($1);
       break block4;
      }
      HEAP32[$4 >> 2] = 4;
     }
     $1 = HEAP32[$4 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$4 >> 2] = 4;
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($8 + 12 | 0, $8 + 8 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
  }
  __stack_pointer = $8 + 16 | 0;
  return HEAP32[$8 + 12 >> 2];
 }
 
 function std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, 0) | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $7 = HEAP32[16623];
  HEAP32[$6 + 24 >> 2] = HEAP32[16622];
  HEAP32[$6 + 28 >> 2] = $7;
  $7 = HEAP32[16621];
  HEAP32[$6 + 16 >> 2] = HEAP32[16620];
  HEAP32[$6 + 20 >> 2] = $7;
  $7 = HEAP32[16619];
  HEAP32[$6 + 8 >> 2] = HEAP32[16618];
  HEAP32[$6 + 12 >> 2] = $7;
  $7 = HEAP32[16617];
  HEAP32[$6 >> 2] = HEAP32[16616];
  HEAP32[$6 + 4 >> 2] = $7;
  $7 = $0;
  $0 = $6 + 32 | 0;
  $1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($7, $1, $2, $3, $4, $5, $6, $0);
  __stack_pointer = $0;
  return $1 | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($6, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) << 2) | 0) | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 12 >> 2] = $1;
  $1 = $6 + 8 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $6 + 12 | 0, $2, $4, $3);
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 12 >> 2] = $1;
  $1 = $6 + 8 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $6 + 12 | 0, $2, $4, $3);
  __stack_pointer = $6 + 16 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = $0 + 8 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $3);
  $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
  std____2__locale___locale_28_29($1);
  std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $0 + 12 | 0, $2, $4, $3);
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1 | 0) < 69 ? $1 + 2e3 | 0 : $1 >>> 0 < 100 ? $1 + 1900 | 0 : $1) - 1900
  }
 }
 
 function int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $1;
  $1 = 0;
  $6 = 6;
  block2 : {
   block : {
    if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $5 + 12 | 0)) {
     break block
    }
    $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0);
    $6 = 4;
    if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($3, 64, $7)) {
     break block
    }
    $1 = std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($3, $7);
    while (1) {
     block1 : {
      std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
      $1 = $1 - 48 | 0;
      if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $5 + 12 | 0) | ($4 | 0) < 2) {
       break block1
      }
      $7 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0);
      if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($3, 64, $7)) {
       break block2
      }
      $4 = $4 - 1 | 0;
      $1 = std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($3, $7) + Math_imul($1, 10) | 0;
      continue;
     }
     break;
    };
    if (!bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $5 + 12 | 0)) {
     break block2
    }
    $6 = 2;
   }
   HEAP32[$2 >> 2] = $6 | HEAP32[$2 >> 2];
  }
  __stack_pointer = $5 + 16 | 0;
  return $1;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  HEAP32[$7 + 44 >> 2] = $1;
  HEAP32[$4 >> 2] = 0;
  std____2__ios_base__getloc_28_29_20const($7, $3);
  $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($7);
  std____2__locale___locale_28_29($7);
  block35 : {
   block24 : {
    block36 : {
     block2 : {
      switch ($6 - 65 | 0) {
      case 0:
      case 32:
       std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 44 | 0, $2, $4, $8);
       break block24;
      case 1:
      case 33:
      case 39:
       std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 44 | 0, $2, $4, $8);
       break block24;
      case 34:
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, HEAP32[$7 + 44 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 2) | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 35:
      case 36:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block25 : {
        if (!($1 & 4 | $0 - 1 >>> 0 > 30)) {
         HEAP32[$5 + 12 >> 2] = $0;
         break block25;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 3:
       $6 = HEAP32[16587];
       HEAP32[$7 + 24 >> 2] = HEAP32[16586];
       HEAP32[$7 + 28 >> 2] = $6;
       $6 = HEAP32[16585];
       HEAP32[$7 + 16 >> 2] = HEAP32[16584];
       HEAP32[$7 + 20 >> 2] = $6;
       $6 = HEAP32[16583];
       HEAP32[$7 + 8 >> 2] = HEAP32[16582];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[16581];
       HEAP32[$7 >> 2] = HEAP32[16580];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 5:
       $6 = HEAP32[16595];
       HEAP32[$7 + 24 >> 2] = HEAP32[16594];
       HEAP32[$7 + 28 >> 2] = $6;
       $6 = HEAP32[16593];
       HEAP32[$7 + 16 >> 2] = HEAP32[16592];
       HEAP32[$7 + 20 >> 2] = $6;
       $6 = HEAP32[16591];
       HEAP32[$7 + 8 >> 2] = HEAP32[16590];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[16589];
       HEAP32[$7 >> 2] = HEAP32[16588];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 7:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block26 : {
        if (!($1 & 4 | ($0 | 0) > 23)) {
         HEAP32[$5 + 8 >> 2] = $0;
         break block26;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 8:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block27 : {
        if (!($1 & 4 | $0 - 1 >>> 0 > 11)) {
         HEAP32[$5 + 8 >> 2] = $0;
         break block27;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 41:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 3);
       $1 = HEAP32[$4 >> 2];
       block28 : {
        if (!($1 & 4 | ($0 | 0) > 365)) {
         HEAP32[$5 + 28 >> 2] = $0;
         break block28;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 44:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       $0 = $0 - 1 | 0;
       block29 : {
        if (!($1 & 4 | $0 >>> 0 > 11)) {
         HEAP32[$5 + 16 >> 2] = $0;
         break block29;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 12:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block30 : {
        if (!($1 & 4 | ($0 | 0) > 59)) {
         HEAP32[$5 + 4 >> 2] = $0;
         break block30;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 45:
      case 51:
       $0 = $7 + 44 | 0;
       $1 = __stack_pointer - 16 | 0;
       __stack_pointer = $1;
       HEAP32[$1 + 12 >> 2] = $2;
       while (1) {
        block31 : {
         if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1 + 12 | 0)) {
          break block31
         }
         if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($8, 1, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0))) {
          break block31
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
         continue;
        }
        break;
       };
       if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $1 + 12 | 0)) {
        HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
       }
       __stack_pointer = $1 + 16 | 0;
       break block24;
      case 47:
       $1 = $7 + 44 | 0;
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
       block32 : {
        if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0 + 12 | 0) | 0)) {
         HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
         break block32;
        }
        $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__20std____2____scan_keyword_5babi_nn200100_5d_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($1, $2, $0, $0 + 24 | 0, $8, $4, 0);
        $1 = HEAP32[$5 + 8 >> 2];
        if (!(($2 | 0) != ($0 | 0) | ($1 | 0) != 12)) {
         HEAP32[$5 + 8 >> 2] = 0;
         break block32;
        }
        if (!(($2 - $0 | 0) != 12 | ($1 | 0) > 11)) {
         HEAP32[$5 + 8 >> 2] = $1 + 12
        }
       }
       break block24;
      case 49:
       wasm2js_memory_copy($7, 66384, 44);
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 44 | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 17:
       HEAP32[$7 + 16 >> 2] = HEAP32[16612];
       $6 = HEAP32[16611];
       HEAP32[$7 + 8 >> 2] = HEAP32[16610];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[16609];
       HEAP32[$7 >> 2] = HEAP32[16608];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 20 | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 18:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 2);
       $1 = HEAP32[$4 >> 2];
       block33 : {
        if (!($1 & 4 | ($0 | 0) > 60)) {
         HEAP32[$5 >> 2] = $0;
         break block33;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 19:
       $6 = HEAP32[16623];
       HEAP32[$7 + 24 >> 2] = HEAP32[16622];
       HEAP32[$7 + 28 >> 2] = $6;
       $6 = HEAP32[16621];
       HEAP32[$7 + 16 >> 2] = HEAP32[16620];
       HEAP32[$7 + 20 >> 2] = $6;
       $6 = HEAP32[16619];
       HEAP32[$7 + 8 >> 2] = HEAP32[16618];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[16617];
       HEAP32[$7 >> 2] = HEAP32[16616];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 54:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 1);
       $1 = HEAP32[$4 >> 2];
       block34 : {
        if (!($1 & 4 | ($0 | 0) > 6)) {
         HEAP32[$5 + 24 >> 2] = $0;
         break block34;
        }
        HEAP32[$4 >> 2] = $1 | 4;
       }
       break block24;
      case 55:
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
       break block35;
      case 23:
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, HEAP32[$7 + 44 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1) << 2) | 0)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
       break block24;
      case 56:
       std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $7 + 44 | 0, $2, $4, $8);
       break block24;
      case 24:
       $0 = int_20std____2____get_up_to_n_digits_5babi_nn200100_5d_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($7 + 44 | 0, $2, $4, $8, 4);
       if (!(HEAPU8[$4 | 0] & 4)) {
        HEAP32[$5 + 20 >> 2] = $0 - 1900
       }
       break block24;
      default:
       if (($6 | 0) == 37) {
        break block36
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break block2;
      };
     }
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
     break block24;
    }
    $0 = __stack_pointer - 16 | 0;
    __stack_pointer = $0;
    HEAP32[$0 + 12 >> 2] = $2;
    $2 = $7 + 44 | 0;
    $3 = $0 + 12 | 0;
    $1 = 6;
    block38 : {
     block37 : {
      if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($2, $3)) {
       break block37
      }
      $1 = 4;
      if ((std____2__ctype_wchar_t___narrow_5babi_nn200100_5d_28wchar_t_2c_20char_29_20const($8, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($2)) | 0) != 37) {
       break block37
      }
      if (!bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($2), $3)) {
       break block38
      }
      $1 = 2;
     }
     HEAP32[$4 >> 2] = $1 | HEAP32[$4 >> 2];
    }
    __stack_pointer = $0 + 16 | 0;
   }
   $0 = HEAP32[$7 + 44 >> 2];
  }
  __stack_pointer = $7 + 48 | 0;
  return $0 | 0;
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 128 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $2 + 116;
  $3 = $2 + 16 | 0;
  std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $3, $2 + 12 | 0, $4, $5, $6);
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  auto_20std____2____unwrap_range_5babi_nn200100_5d_char__2c_20char___28char__2c_20char__29($0 + 24 | 0, $3, HEAP32[$2 + 12 >> 2]);
  $7 = $0 + 16 | 0;
  $8 = HEAP32[$0 + 28 >> 2];
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $4 = HEAP32[$0 + 24 >> 2];
  HEAP32[$5 + 8 >> 2] = $4;
  HEAP32[$5 + 12 >> 2] = $1;
  while (1) {
   if (($4 | 0) != ($8 | 0)) {
    std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28char_29($5 + 12 | 0, HEAP8[$4 | 0]);
    $4 = $4 + 1 | 0;
    HEAP32[$5 + 8 >> 2] = $4;
    continue;
   }
   break;
  };
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($7, $5 + 8 | 0, $5 + 12 | 0);
  __stack_pointer = $5 + 16 | 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($3, HEAP32[$0 + 16 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 20 >> 2];
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($6 + 8 | 0, $0 + 12 | 0, $0 + 8 | 0);
  __stack_pointer = $0 + 32 | 0;
  __stack_pointer = $6 + 16 | 0;
  __stack_pointer = $2 + 128 | 0;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP8[$6 + 15 | 0] = 0;
  HEAP8[$6 + 14 | 0] = $5;
  HEAP8[$6 + 13 | 0] = $4;
  HEAP8[$6 + 12 | 0] = 37;
  if ($5) {
   std____2__enable_if_is_move_constructible_char___value_20___20is_move_assignable_char___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_char__28char__2c_20char__29($6 + 13 | 0, $6 + 14 | 0)
  }
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = __strftime_l($1, std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn200100_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($1, HEAP32[$2 >> 2]), $6 + 12 | 0, $3, HEAP32[$0 >> 2]) + $1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  __stack_pointer = $6 + 16 | 0;
 }
 
 function std____2__enable_if_is_move_constructible_char___value_20___20is_move_assignable_char___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_char__28char__2c_20char__29($0, $1) {
  var $2 = 0;
  $2 = HEAPU8[$0 | 0];
  HEAP8[$0 | 0] = HEAPU8[$1 | 0];
  HEAP8[$1 | 0] = $2;
 }
 
 function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 416 | 0;
  __stack_pointer = $7;
  $3 = $7 + 416 | 0;
  HEAP32[$7 + 12 >> 2] = $3;
  $2 = __stack_pointer - 144 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 28 >> 2] = $2 + 132;
  $8 = $2 + 32 | 0;
  std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $8, $2 + 28 | 0, $4, $5, $6);
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = $8;
  $5 = $7 + 16 | 0;
  $6 = std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($5, HEAP32[$7 + 12 >> 2]);
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  $8 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
  $0 = mbsrtowcs($5, $2 + 12 | 0, $6, $2 + 16 | 0);
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($8);
  __stack_pointer = $4 + 16 | 0;
  if (($0 | 0) == -1) {
   std____2____throw_runtime_error_28char_20const__29(29422);
   wasm2js_trap();
  }
  HEAP32[$7 + 12 >> 2] = $5 + ($0 << 2);
  __stack_pointer = $2 + 144 | 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  auto_20std____2____unwrap_range_5babi_nn200100_5d_char__2c_20char___28char__2c_20char__29($0 + 24 | 0, $5, HEAP32[$7 + 12 >> 2]);
  $7 = $0 + 16 | 0;
  $8 = HEAP32[$0 + 28 >> 2];
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $2 = HEAP32[$0 + 24 >> 2];
  HEAP32[$4 + 8 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = $1;
  while (1) {
   if (($2 | 0) != ($8 | 0)) {
    std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28wchar_t_29($4 + 12 | 0, HEAP32[$2 >> 2]);
    $2 = $2 + 4 | 0;
    HEAP32[$4 + 8 >> 2] = $2;
    continue;
   }
   break;
  };
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($7, $4 + 8 | 0, $4 + 12 | 0);
  __stack_pointer = $4 + 16 | 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($5, HEAP32[$0 + 16 >> 2])), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 20 >> 2];
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($6 + 8 | 0, $0 + 12 | 0, $0 + 8 | 0);
  __stack_pointer = $0 + 32 | 0;
  __stack_pointer = $6 + 16 | 0;
  __stack_pointer = $3;
  return HEAP32[$6 + 12 >> 2];
 }
 
 function std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return 127;
 }
 
 function std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0);
 }
 
 function std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28unsigned_20long_2c_20char_29($0, 1, 45);
 }
 
 function std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 | 0] = 2;
  HEAP8[$0 + 1 | 0] = 3;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 4;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return 2147483647;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 272 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 264 >> 2] = $2;
  HEAP32[$0 + 268 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = 352;
  $1 = $0 + 16 | 0;
  $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 152 | 0, $0 + 160 | 0, $1);
  $8 = $0 + 144 | 0;
  std____2__ios_base__getloc_28_29_20const($8, $4);
  $9 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($8);
  HEAP8[$0 + 143 | 0] = 0;
  block : {
   if (!std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 268 | 0, $2, $3, $8, HEAP32[$4 + 4 >> 2], $5, $0 + 143 | 0, $9, $7, $0 + 148 | 0, $0 + 260 | 0)) {
    break block
   }
   $2 = HEAPU8[33093] | HEAPU8[33094] << 8 | (HEAPU8[33095] << 16 | HEAPU8[33096] << 24);
   HEAP8[$0 + 135 | 0] = $2;
   HEAP8[$0 + 136 | 0] = $2 >>> 8;
   HEAP8[$0 + 137 | 0] = $2 >>> 16;
   HEAP8[$0 + 138 | 0] = $2 >>> 24;
   $2 = HEAPU8[33090] | HEAPU8[33091] << 8 | (HEAPU8[33092] << 16 | HEAPU8[33093] << 24);
   HEAP32[$0 + 128 >> 2] = HEAPU8[33086] | HEAPU8[33087] << 8 | (HEAPU8[33088] << 16 | HEAPU8[33089] << 24);
   HEAP32[$0 + 132 >> 2] = $2;
   std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($9, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0);
   HEAP32[$0 + 16 >> 2] = 351;
   $3 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $1);
   $4 = $1;
   block1 : {
    $1 = HEAP32[$0 + 148 >> 2] - HEAP32[$7 >> 2] | 0;
    if (($1 | 0) >= 99) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($3, emscripten_builtin_malloc($1 + 2 | 0));
     if (!HEAP32[$3 >> 2]) {
      break block1
     }
     $4 = HEAP32[$3 >> 2];
    }
    if (HEAPU8[$0 + 143 | 0] == 1) {
     HEAP8[$4 | 0] = 45;
     $4 = $4 + 1 | 0;
    }
    $2 = HEAP32[$7 >> 2];
    while (1) {
     if (HEAPU32[$0 + 148 >> 2] <= $2 >>> 0) {
      block2 : {
       HEAP8[$4 | 0] = 0;
       HEAP32[$0 >> 2] = $6;
       if ((sscanf($0 + 16 | 0, 28245, $0) | 0) != 1) {
        break block2
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($3);
       break block;
      }
     } else {
      $1 = $0 + 118 | 0;
      (wasm2js_i32$0 = $4, wasm2js_i32$1 = HEAPU8[((char_20const__20std____2__find_5babi_nn200100_5d_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($1, $1 + 10 | 0, $2) - $0 | 0) + $0 | 0) + 10 | 0]), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      $4 = $4 + 1 | 0;
      $2 = $2 + 1 | 0;
      continue;
     }
     break;
    };
    std____2____throw_runtime_error_28char_20const__29(27040);
    wasm2js_trap();
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 268 | 0, $0 + 264 | 0)) {
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
  }
  $1 = HEAP32[$0 + 268 >> 2];
  std____2__locale___locale_28_29($0 + 144 | 0);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($7);
  __stack_pointer = $0 + 272 | 0;
  return $1 | 0;
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11 = __stack_pointer - 528 | 0;
  __stack_pointer = $11;
  HEAP32[$11 + 520 >> 2] = $10;
  HEAP32[$11 + 524 >> 2] = $1;
  block : {
   if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $0 = 0;
    break block;
   }
   HEAP32[$11 + 76 >> 2] = 352;
   $1 = $11 + 76 | 0;
   $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 104 | 0, $11 + 112 | 0, $1);
   $10 = HEAP32[$15 >> 2];
   HEAP32[$11 + 100 >> 2] = $10;
   HEAP32[$11 + 96 >> 2] = $10 + 400;
   $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($1);
   $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 - -64 | 0);
   $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 52 | 0);
   $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 40 | 0);
   $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 28 | 0);
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   block1 : {
    if ($2) {
     $10 = $1 + 4 | 0;
     $2 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_char_2c_20true___28std____2__locale_20const__29($3);
     std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($10, $2);
     break block1;
    }
    $10 = $1 + 4 | 0;
    $2 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_char_2c_20false___28std____2__locale_20const__29($3);
    std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($10, $2);
   }
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP8[$11 + 92 | 0] = $3;
   HEAP8[$11 + 93 | 0] = $3 >>> 8;
   HEAP8[$11 + 94 | 0] = $3 >>> 16;
   HEAP8[$11 + 95 | 0] = $3 >>> 24;
   std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($13, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
   std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($14, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
   (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($2)), HEAP8[wasm2js_i32$0 + 91 | 0] = wasm2js_i32$1;
   (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($2)), HEAP8[wasm2js_i32$0 + 90 | 0] = wasm2js_i32$1;
   std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($17, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
   std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($12, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
   (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn200100_5d_28_29_20const($2)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   __stack_pointer = $1 + 16 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   $18 = $4 & 512;
   $3 = 0;
   $1 = 0;
   while (1) {
    $2 = $1;
    block8 : {
     block9 : {
      block11 : {
       block2 : {
        if (($3 | 0) == 4) {
         break block2
        }
        if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
         break block2
        }
        $10 = 0;
        block7 : {
         block5 : {
          block6 : {
           block10 : {
            block3 : {
             block4 : {
              $4 = ($11 + 92 | 0) + $3 | 0;
              switch (HEAPU8[$4 | 0]) {
              case 0:
               break block3;
              case 1:
               break block4;
              case 2:
               break block5;
              case 3:
               break block6;
              case 4:
               break block7;
              default:
               break block8;
              };
             }
             if (($3 | 0) == 3) {
              break block9
             }
             if (std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($7, 1, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0))) {
              std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28int_29($11 + 16 | 0, $0);
              std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($16, HEAP8[$11 + 16 | 0]);
              break block10;
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break block11;
            }
            if (($3 | 0) == 3) {
             break block9
            }
           }
           while (1) {
            if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
             break block9
            }
            if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($7, 1, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0))) {
             break block9
            }
            std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28int_29($11 + 16 | 0, $0);
            std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($16, HEAP8[$11 + 16 | 0]);
            continue;
           };
          }
          block12 : {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14)) {
            break block12
           }
           if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0) & 255) != HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($14, 0) | 0]) {
            break block12
           }
           std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
           HEAP8[$6 | 0] = 0;
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14) >>> 0 > 1 ? $14 : $2;
           break block8;
          }
          block13 : {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)) {
            break block13
           }
           if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0) & 255) != HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($13, 0) | 0]) {
            break block13
           }
           std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
           HEAP8[$6 | 0] = 1;
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13) >>> 0 > 1 ? $13 : $2;
           break block8;
          }
          block14 : {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14)) {
            break block14
           }
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)) {
            break block14
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break block11;
          }
          if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14)) {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)) {
            break block9
           }
          }
          (wasm2js_i32$0 = $6, wasm2js_i32$1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
          break block9;
         }
         if (!($2 | $3 >>> 0 < 2 | $18)) {
          $1 = 0;
          if (!(($3 | 0) == 2 & HEAPU8[$11 + 95 | 0] != 0)) {
           break block8
          }
         }
         (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
         $1 = _ZNSt3__211__wrap_iterIPKcEC2B8nn200100IPcTnNS_9enable_ifIXsr4_AndINS_14is_convertibleIRKT_S2_EENS_7_OrImplIXaantcvbsr7is_sameIRS1_NS_15iterator_traitsIS8_E9referenceEEE5valuenesZT1_Li0EEE7_ResultINS_7is_sameISD_SG_EENSJ_ISD_RKu20__remove_reference_tISG_EEEEEEE5valueEiE4typeELi0EEERKNS0_IS8_EE($11 + 16 | 0, $11 + 12 | 0);
         block15 : {
          if (!$3 | HEAPU8[$4 - 1 | 0] > 1) {
           break block15
          }
          while (1) {
           block16 : {
            (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
            if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($1, $11 + 12 | 0)) {
             break block16
            }
            if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($7, 1, HEAP8[HEAP32[$1 >> 2]])) {
             break block16
            }
            std____2____wrap_iter_char____operator___5babi_nn200100_5d_28_29($1);
            continue;
           }
           break;
          };
          (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
          $10 = $11 + 12 | 0;
          $4 = HEAP32[$1 >> 2] - HEAP32[$10 >> 2] | 0;
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($16) >>> 0 >= $4 >>> 0) {
           (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($16)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
           $4 = std____2____wrap_iter_char____operator__5babi_nn200100_5d_28long_29_20const($10, 0 - $4 | 0);
           $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($16);
           $20 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12);
           $19 = __stack_pointer - 16 | 0;
           __stack_pointer = $19;
           $4 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($4);
           $10 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($10);
           $4 = memcmp($4, std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($20), $10 - $4 | 0);
           __stack_pointer = $19 + 16 | 0;
           if (!$4) {
            break block15
           }
          }
          (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[_ZNSt3__211__wrap_iterIPKcEC2B8nn200100IPcTnNS_9enable_ifIXsr4_AndINS_14is_convertibleIRKT_S2_EENS_7_OrImplIXaantcvbsr7is_sameIRS1_NS_15iterator_traitsIS8_E9referenceEEE5valuenesZT1_Li0EEE7_ResultINS_7is_sameISD_SG_EENSJ_ISD_RKu20__remove_reference_tISG_EEEEEEE5valueEiE4typeELi0EEERKNS0_IS8_EE($11 + 12 | 0, $11 + 8 | 0) >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         }
         HEAP32[$11 + 12 >> 2] = HEAP32[$1 >> 2];
         while (1) {
          block17 : {
           (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           $1 = $11 + 12 | 0;
           if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($1, $11 + 8 | 0)) {
            break block17
           }
           if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
            break block17
           }
           if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0) & 255) != HEAPU8[HEAP32[$1 >> 2]]) {
            break block17
           }
           std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
           std____2____wrap_iter_char____operator___5babi_nn200100_5d_28_29($1);
           continue;
          }
          break;
         };
         if (!$18) {
          break block9
         }
         (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($11 + 12 | 0, $11 + 8 | 0)) {
          break block9
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break block11;
        }
        while (1) {
         block18 : {
          if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
           break block18
          }
          $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0);
          block19 : {
           if (std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($7, 64, $1)) {
            $4 = HEAP32[$9 >> 2];
            if (($4 | 0) == HEAP32[$11 + 520 >> 2]) {
             void_20std____2____double_or_nothing_5babi_nn200100_5d_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 520 | 0);
             $4 = HEAP32[$9 >> 2];
            }
            HEAP32[$9 >> 2] = $4 + 1;
            HEAP8[$4 | 0] = $1;
            $10 = $10 + 1 | 0;
            break block19;
           }
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($17) | !$10 | HEAPU8[$11 + 90 | 0] != ($1 & 255)) {
            break block18
           }
           $1 = HEAP32[$11 + 100 >> 2];
           if (($1 | 0) == HEAP32[$11 + 96 >> 2]) {
            void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 100 | 0, $11 + 96 | 0);
            $1 = HEAP32[$11 + 100 >> 2];
           }
           HEAP32[$11 + 100 >> 2] = $1 + 4;
           HEAP32[$1 >> 2] = $10;
           $10 = 0;
          }
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
          continue;
         }
         break;
        };
        $1 = HEAP32[$11 + 100 >> 2];
        if (!(!$10 | ($1 | 0) == HEAP32[$15 >> 2])) {
         if (HEAP32[$11 + 96 >> 2] == ($1 | 0)) {
          void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 100 | 0, $11 + 96 | 0);
          $1 = HEAP32[$11 + 100 >> 2];
         }
         HEAP32[$11 + 100 >> 2] = $1 + 4;
         HEAP32[$1 >> 2] = $10;
        }
        block20 : {
         if (HEAP32[$11 + 24 >> 2] <= 0) {
          break block20
         }
         block21 : {
          if (!bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
           if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0) & 255) == HEAPU8[$11 + 91 | 0]) {
            break block21
           }
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break block11;
         }
         while (1) {
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
          if (HEAP32[$11 + 24 >> 2] <= 0) {
           break block20
          }
          block22 : {
           if (!bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
            if (std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($7, 64, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0))) {
             break block22
            }
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break block11;
          }
          if (HEAP32[$9 >> 2] == HEAP32[$11 + 520 >> 2]) {
           void_20std____2____double_or_nothing_5babi_nn200100_5d_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 520 | 0)
          }
          $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0);
          $4 = HEAP32[$9 >> 2];
          HEAP32[$9 >> 2] = $4 + 1;
          HEAP8[$4 | 0] = $1;
          HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] - 1;
          continue;
         };
        }
        $1 = $2;
        if (HEAP32[$8 >> 2] != HEAP32[$9 >> 2]) {
         break block8
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break block11;
       }
       block23 : {
        if (!$2) {
         break block23
        }
        $10 = 1;
        while (1) {
         if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($2) >>> 0 <= $10 >>> 0) {
          break block23
         }
         block24 : {
          if (!bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0, $11 + 524 | 0)) {
           if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator__5babi_nn200100_5d_28_29_20const($0) & 255) == HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($2, $10) | 0]) {
            break block24
           }
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break block11;
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28_29($0);
         $10 = $10 + 1 | 0;
         continue;
        };
       }
       $0 = 1;
       if (HEAP32[$15 >> 2] == HEAP32[$11 + 100 >> 2]) {
        break block11
       }
       $0 = 0;
       HEAP32[$11 + 16 >> 2] = 0;
       std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, HEAP32[$15 >> 2], HEAP32[$11 + 100 >> 2], $11 + 16 | 0);
       if (HEAP32[$11 + 16 >> 2]) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        break block11;
       }
       $0 = 1;
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($16);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($13);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($14);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($12);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($17);
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($15);
      break block;
     }
     $1 = $2;
    }
    $3 = $3 + 1 | 0;
    continue;
   };
  }
  __stack_pointer = $11 + 528 | 0;
  return $0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____operator___5babi_nn200100_5d_28int_29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char____sbumpc_5babi_nn200100_5d_28_29(HEAP32[$1 >> 2]);
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
  HEAP8[$0 | 0] = $2 << 24 >> 24;
 }
 
 function _ZNSt3__211__wrap_iterIPKcEC2B8nn200100IPcTnNS_9enable_ifIXsr4_AndINS_14is_convertibleIRKT_S2_EENS_7_OrImplIXaantcvbsr7is_sameIRS1_NS_15iterator_traitsIS8_E9referenceEEE5valuenesZT1_Li0EEE7_ResultINS_7is_sameISD_SG_EENSJ_ISD_RKu20__remove_reference_tISG_EEEEEEE5valueEiE4typeELi0EEERKNS0_IS8_EE($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  return $0;
 }
 
 function void_20std____2____double_or_nothing_5babi_nn200100_5d_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_5babi_nn200100_5d_28_29($0) >> 2];
  $3 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
  block : {
   if ($3 >>> 0 < 2147483647) {
    $3 = $3 << 1;
    break block;
   }
   $3 = -1;
  }
  $3 = $3 >>> 0 <= 1 ? 1 : $3;
  $7 = HEAP32[$1 >> 2];
  $8 = HEAP32[$0 >> 2];
  $6 = emscripten_builtin_realloc(($5 | 0) != 352 ? HEAP32[$0 >> 2] : 0, $3);
  if ($6) {
   if (($5 | 0) != 352) {
    a_swap($0)
   }
   HEAP32[$4 + 4 >> 2] = 351;
   $5 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__5babi_nn200100_5d_28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $5);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($5);
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2] + ($7 - $8 | 0);
   HEAP32[$2 >> 2] = $3 + HEAP32[$0 >> 2];
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  std____throw_bad_alloc_28_29();
  wasm2js_trap();
 }
 
 function void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_5babi_nn200100_5d_28_29($0) >> 2];
  $3 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
  block : {
   if ($3 >>> 0 < 2147483647) {
    $3 = $3 << 1;
    break block;
   }
   $3 = -1;
  }
  $3 = $3 ? $3 : 4;
  $7 = HEAP32[$1 >> 2];
  $8 = HEAP32[$0 >> 2];
  $6 = emscripten_builtin_realloc(($5 | 0) != 352 ? HEAP32[$0 >> 2] : 0, $3);
  if ($6) {
   if (($5 | 0) != 352) {
    a_swap($0)
   }
   HEAP32[$4 + 4 >> 2] = 351;
   $5 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__5babi_nn200100_5d_28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $5);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($5);
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2] + ($7 - $8 | 0);
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2] + ($3 & -4);
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  std____throw_bad_alloc_28_29();
  wasm2js_trap();
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 136 >> 2] = $2;
  HEAP32[$0 + 140 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = 352;
  $7 = $0 + 20 | 0;
  $9 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $7);
  $1 = $0 + 16 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $4);
  $8 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($1);
  HEAP8[$0 + 15 | 0] = 0;
  if (std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_______do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char____2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 140 | 0, $2, $3, $1, HEAP32[$4 + 4 >> 2], $5, $0 + 15 | 0, $8, $9, $7, $0 + 132 | 0)) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
   block : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($6)) {
     $2 = HEAP32[$6 >> 2];
     HEAP8[$1 + 15 | 0] = 0;
     std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($2, $1 + 15 | 0);
     HEAP32[$6 + 4 >> 2] = 0;
     break block;
    }
    HEAP8[$1 + 14 | 0] = 0;
    std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($6, $1 + 14 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($6, 0);
   }
   __stack_pointer = $1 + 16 | 0;
   if (HEAPU8[$0 + 15 | 0] == 1) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($6, std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($8, 45))
   }
   $1 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($8, 48);
   $2 = HEAP32[$9 >> 2];
   $4 = HEAP32[$0 + 20 >> 2];
   $3 = $4 - 1 | 0;
   $1 = $1 & 255;
   while (1) {
    if (!(($1 | 0) != HEAPU8[$2 | 0] | $2 >>> 0 >= $3 >>> 0)) {
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   };
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
   $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6);
   $7 = std____2__iterator_traits_char____difference_type_20std____2____distance_5babi_nn200100_5d_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($2, $4);
   block2 : {
    if (!$7) {
     break block2
    }
    if (!bool_20std____2____is_pointer_in_range_5babi_nn200100_5d_char_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6), (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | 0) + 1 | 0, $2)) {
     if ($7 >>> 0 > $8 - $3 >>> 0) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($6, $8, $7 + ($3 - $8 | 0) | 0, $3, $3)
     }
     $2 = char__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______copy_non_overlapping_range_5babi_nn200100_5d_char__2c_20char___28char__2c_20char__2c_20char__29($2, $4, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6) + $3 | 0);
     HEAP8[$1 + 15 | 0] = 0;
     std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($2, $1 + 15 | 0);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($6, $3 + $7 | 0);
     break block2;
    }
    void_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_char__2c_200__28char__2c_20char__29($1, $2, $4);
    $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($1);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($6);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
    block3 : {
     if ($2 >>> 0 <= $7 - $3 >>> 0) {
      if (!$2) {
       break block3
      }
      $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6);
      char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($7 + $3 | 0, $8, $2);
      $2 = $2 + $3 | 0;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($6, $2);
      HEAP8[$4 + 15 | 0] = 0;
      std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($2 + $7 | 0, $4 + 15 | 0);
      break block3;
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($6, $7, $3 + ($2 - $7 | 0) | 0, $3, $3, 0, $2, $8);
    }
    __stack_pointer = $4 + 16 | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
   }
   __stack_pointer = $1 + 16 | 0;
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___20const__29($0 + 140 | 0, $0 + 136 | 0)) {
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
  }
  $1 = HEAP32[$0 + 140 >> 2];
  std____2__locale___locale_28_29($0 + 16 | 0);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($9);
  __stack_pointer = $0 + 144 | 0;
  return $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $8 = $6 + 12 | 0;
  std____2____scope_guard_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__20std____2____make_scope_guard_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size_29($8, HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($6 + 8 | 0, $0) >> 2]);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  block : {
   if (2147483639 - $1 >>> 0 >= $2 >>> 0) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
    $9 = $5 + 4 | 0;
    if ($1 >>> 0 < 1073741811) {
     HEAP32[$5 + 12 >> 2] = $1 << 1;
     HEAP32[$5 + 4 >> 2] = $1 + $2;
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($9, $5 + 12 | 0) >> 2]) + 1 | 0;
    } else {
     $2 = 2147483639
    }
    std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($9, $2);
    $2 = HEAP32[$5 + 4 >> 2];
    if ($4) {
     char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $7, $4)
    }
    if (($3 | 0) != ($4 | 0)) {
     char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2 + $4 | 0, $4 + $7 | 0, $3 - $4 | 0)
    }
    if (($1 | 0) != 10) {
     void_20std____2____libcpp_deallocate_5babi_nn200100_5d_char__28std____2____type_identity_char___type__2c_20std____2____element_count_2c_20unsigned_20long_29($7)
    }
    HEAP32[$0 >> 2] = $2;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$5 + 8 >> 2]);
    __stack_pointer = $5 + 16 | 0;
    break block;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
  HEAP32[$0 + 4 >> 2] = $3;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__operator_28_29_5babi_nn200100_5d_28_29($8);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   HEAP32[$0 + 4 >> 2] = $1;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $1);
 }
 
 function std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_char_2c_20true___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82504);
 }
 
 function std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($0, $1);
 }
 
 function std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn200100_5d_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($0, $1);
 }
 
 function std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn200100_5d_28_29_20const($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_char_2c_20false___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82496);
 }
 
 function std____2____wrap_iter_char____operator__5babi_nn200100_5d_28long_29_20const($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + $1;
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_5babi_nn200100_5d_28_29($0) {
  return $0 + 4 | 0;
 }
 
 function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__5babi_nn200100_5d_28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($0, a_swap($1));
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_5babi_nn200100_5d_28_29($1) >> 2]), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = __stack_pointer - 624 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 616 >> 2] = $2;
  HEAP32[$0 + 620 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = 352;
  $1 = $0 + 16 | 0;
  $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, $0 + 208 | 0, $1);
  $8 = $0 + 192 | 0;
  std____2__ios_base__getloc_28_29_20const($8, $4);
  $9 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($8);
  HEAP8[$0 + 191 | 0] = 0;
  block : {
   if (!std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 620 | 0, $2, $3, $8, HEAP32[$4 + 4 >> 2], $5, $0 + 191 | 0, $9, $7, $0 + 196 | 0, $0 + 608 | 0)) {
    break block
   }
   $2 = HEAPU8[33093] | HEAPU8[33094] << 8 | (HEAPU8[33095] << 16 | HEAPU8[33096] << 24);
   HEAP8[$0 + 183 | 0] = $2;
   HEAP8[$0 + 184 | 0] = $2 >>> 8;
   HEAP8[$0 + 185 | 0] = $2 >>> 16;
   HEAP8[$0 + 186 | 0] = $2 >>> 24;
   $2 = HEAPU8[33090] | HEAPU8[33091] << 8 | (HEAPU8[33092] << 16 | HEAPU8[33093] << 24);
   HEAP32[$0 + 176 >> 2] = HEAPU8[33086] | HEAPU8[33087] << 8 | (HEAPU8[33088] << 16 | HEAPU8[33089] << 24);
   HEAP32[$0 + 180 >> 2] = $2;
   std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($9, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0);
   HEAP32[$0 + 16 >> 2] = 351;
   $3 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $1);
   $4 = $1;
   block1 : {
    $1 = HEAP32[$0 + 196 >> 2] - HEAP32[$7 >> 2] | 0;
    if (($1 | 0) >= 393) {
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($3, emscripten_builtin_malloc(($1 >> 2) + 2 | 0));
     if (!HEAP32[$3 >> 2]) {
      break block1
     }
     $4 = HEAP32[$3 >> 2];
    }
    if (HEAPU8[$0 + 191 | 0] == 1) {
     HEAP8[$4 | 0] = 45;
     $4 = $4 + 1 | 0;
    }
    $2 = HEAP32[$7 >> 2];
    while (1) {
     if (HEAPU32[$0 + 196 >> 2] <= $2 >>> 0) {
      block2 : {
       HEAP8[$4 | 0] = 0;
       HEAP32[$0 >> 2] = $6;
       if ((sscanf($0 + 16 | 0, 28245, $0) | 0) != 1) {
        break block2
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($3);
       break block;
      }
     } else {
      $1 = $0 + 128 | 0;
      (wasm2js_i32$0 = $4, wasm2js_i32$1 = HEAPU8[($0 + 176 | 0) + (wchar_t_20const__20std____2__find_5babi_nn200100_5d_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($1, $1 + 40 | 0, $2) - $1 >> 2) | 0]), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      $4 = $4 + 1 | 0;
      $2 = $2 + 4 | 0;
      continue;
     }
     break;
    };
    std____2____throw_runtime_error_28char_20const__29(27040);
    wasm2js_trap();
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 620 | 0, $0 + 616 | 0)) {
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
  }
  $1 = HEAP32[$0 + 620 >> 2];
  std____2__locale___locale_28_29($0 + 192 | 0);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($7);
  __stack_pointer = $0 + 624 | 0;
  return $1 | 0;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11 = __stack_pointer - 528 | 0;
  __stack_pointer = $11;
  HEAP32[$11 + 520 >> 2] = $10;
  HEAP32[$11 + 524 >> 2] = $1;
  block : {
   if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $0 = 0;
    break block;
   }
   HEAP32[$11 + 72 >> 2] = 352;
   $1 = $11 + 72 | 0;
   $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 104 | 0, $11 + 112 | 0, $1);
   $10 = HEAP32[$15 >> 2];
   HEAP32[$11 + 100 >> 2] = $10;
   HEAP32[$11 + 96 >> 2] = $10 + 400;
   $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($1);
   $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 60 | 0);
   $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 48 | 0);
   $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 36 | 0);
   $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($11 + 24 | 0);
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   block1 : {
    if ($2) {
     $10 = $1 + 4 | 0;
     $2 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_wchar_t_2c_20true___28std____2__locale_20const__29($3);
     std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($10, $2);
     break block1;
    }
    $10 = $1 + 4 | 0;
    $2 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_wchar_t_2c_20false___28std____2__locale_20const__29($3);
    std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($10, $2);
   }
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP8[$11 + 92 | 0] = $3;
   HEAP8[$11 + 93 | 0] = $3 >>> 8;
   HEAP8[$11 + 94 | 0] = $3 >>> 16;
   HEAP8[$11 + 95 | 0] = $3 >>> 24;
   std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn200100_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($13, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($10);
   std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn200100_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($14, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($10);
   (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($2)), HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($2)), HEAP32[wasm2js_i32$0 + 84 >> 2] = wasm2js_i32$1;
   std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($17, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
   std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($10, $2);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn200100_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($12, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($10);
   (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn200100_5d_28_29_20const($2)), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
   __stack_pointer = $1 + 16 | 0;
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
   $18 = $4 & 512;
   $3 = 0;
   $1 = 0;
   while (1) {
    $2 = $1;
    block8 : {
     block9 : {
      block11 : {
       block2 : {
        if (($3 | 0) == 4) {
         break block2
        }
        if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
         break block2
        }
        $10 = 0;
        block7 : {
         block5 : {
          block6 : {
           block10 : {
            block3 : {
             block4 : {
              $4 = ($11 + 92 | 0) + $3 | 0;
              switch (HEAPU8[$4 | 0]) {
              case 0:
               break block3;
              case 1:
               break block4;
              case 2:
               break block5;
              case 3:
               break block6;
              case 4:
               break block7;
              default:
               break block8;
              };
             }
             if (($3 | 0) == 3) {
              break block9
             }
             if (std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 1, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0))) {
              std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28int_29($11 + 12 | 0, $0);
              std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($16, HEAP32[$11 + 12 >> 2]);
              break block10;
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break block11;
            }
            if (($3 | 0) == 3) {
             break block9
            }
           }
           while (1) {
            if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
             break block9
            }
            if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 1, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0))) {
             break block9
            }
            std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28int_29($11 + 12 | 0, $0);
            std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($16, HEAP32[$11 + 12 >> 2]);
            continue;
           };
          }
          block12 : {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14)) {
            break block12
           }
           if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0) | 0) != HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($14) >> 2]) {
            break block12
           }
           std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
           HEAP8[$6 | 0] = 0;
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14) >>> 0 > 1 ? $14 : $2;
           break block8;
          }
          block13 : {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)) {
            break block13
           }
           if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0) | 0) != HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($13) >> 2]) {
            break block13
           }
           std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
           HEAP8[$6 | 0] = 1;
           $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13) >>> 0 > 1 ? $13 : $2;
           break block8;
          }
          block14 : {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14)) {
            break block14
           }
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)) {
            break block14
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break block11;
          }
          if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($14)) {
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)) {
            break block9
           }
          }
          (wasm2js_i32$0 = $6, wasm2js_i32$1 = !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
          break block9;
         }
         if (!($2 | $3 >>> 0 < 2 | $18)) {
          $1 = 0;
          if (!(($3 | 0) == 2 & HEAPU8[$11 + 95 | 0] != 0)) {
           break block8
          }
         }
         (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $1 = _ZNSt3__211__wrap_iterIPKcEC2B8nn200100IPcTnNS_9enable_ifIXsr4_AndINS_14is_convertibleIRKT_S2_EENS_7_OrImplIXaantcvbsr7is_sameIRS1_NS_15iterator_traitsIS8_E9referenceEEE5valuenesZT1_Li0EEE7_ResultINS_7is_sameISD_SG_EENSJ_ISD_RKu20__remove_reference_tISG_EEEEEEE5valueEiE4typeELi0EEERKNS0_IS8_EE($11 + 12 | 0, $11 + 8 | 0);
         block15 : {
          if (!$3 | HEAPU8[$4 - 1 | 0] > 1) {
           break block15
          }
          while (1) {
           block16 : {
            (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
            if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($1, $11 + 8 | 0)) {
             break block16
            }
            if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 1, HEAP32[HEAP32[$1 >> 2] >> 2])) {
             break block16
            }
            std____2____wrap_iter_wchar_t____operator___5babi_nn200100_5d_28_29($1);
            continue;
           }
           break;
          };
          (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          $10 = $11 + 8 | 0;
          $4 = HEAP32[$1 >> 2] - HEAP32[$10 >> 2] >> 2;
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($16) >>> 0 >= $4 >>> 0) {
           (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($16)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           $4 = std____2____wrap_iter_wchar_t____operator__5babi_nn200100_5d_28long_29_20const($10, 0 - $4 | 0);
           $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($16);
           $20 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12);
           $19 = __stack_pointer - 16 | 0;
           __stack_pointer = $19;
           $4 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($4);
           $10 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($10);
           $4 = memcmp($4, std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($20), $10 - $4 & -4);
           __stack_pointer = $19 + 16 | 0;
           if (!$4) {
            break block15
           }
          }
          (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[_ZNSt3__211__wrap_iterIPKcEC2B8nn200100IPcTnNS_9enable_ifIXsr4_AndINS_14is_convertibleIRKT_S2_EENS_7_OrImplIXaantcvbsr7is_sameIRS1_NS_15iterator_traitsIS8_E9referenceEEE5valuenesZT1_Li0EEE7_ResultINS_7is_sameISD_SG_EENSJ_ISD_RKu20__remove_reference_tISG_EEEEEEE5valueEiE4typeELi0EEERKNS0_IS8_EE($11 + 8 | 0, $11 + 4 | 0) >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         }
         HEAP32[$11 + 8 >> 2] = HEAP32[$1 >> 2];
         while (1) {
          block17 : {
           (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
           $1 = $11 + 8 | 0;
           if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($1, $11 + 4 | 0)) {
            break block17
           }
           if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
            break block17
           }
           if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0) | 0) != HEAP32[HEAP32[$1 >> 2] >> 2]) {
            break block17
           }
           std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
           std____2____wrap_iter_wchar_t____operator___5babi_nn200100_5d_28_29($1);
           continue;
          }
          break;
         };
         if (!$18) {
          break block9
         }
         (wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($12)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
         if (bool_20std____2__operator___5babi_nn200100_5d_char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($11 + 8 | 0, $11 + 4 | 0)) {
          break block9
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break block11;
        }
        while (1) {
         block18 : {
          if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
           break block18
          }
          $1 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0);
          block19 : {
           if (std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 64, $1)) {
            $4 = HEAP32[$9 >> 2];
            if (($4 | 0) == HEAP32[$11 + 520 >> 2]) {
             void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($8, $9, $11 + 520 | 0);
             $4 = HEAP32[$9 >> 2];
            }
            HEAP32[$9 >> 2] = $4 + 4;
            HEAP32[$4 >> 2] = $1;
            $10 = $10 + 1 | 0;
            break block19;
           }
           if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($17) | !$10 | ($1 | 0) != HEAP32[$11 + 84 >> 2]) {
            break block18
           }
           $1 = HEAP32[$11 + 100 >> 2];
           if (($1 | 0) == HEAP32[$11 + 96 >> 2]) {
            void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 100 | 0, $11 + 96 | 0);
            $1 = HEAP32[$11 + 100 >> 2];
           }
           HEAP32[$11 + 100 >> 2] = $1 + 4;
           HEAP32[$1 >> 2] = $10;
           $10 = 0;
          }
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
          continue;
         }
         break;
        };
        $1 = HEAP32[$11 + 100 >> 2];
        if (!(!$10 | ($1 | 0) == HEAP32[$15 >> 2])) {
         if (HEAP32[$11 + 96 >> 2] == ($1 | 0)) {
          void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 100 | 0, $11 + 96 | 0);
          $1 = HEAP32[$11 + 100 >> 2];
         }
         HEAP32[$11 + 100 >> 2] = $1 + 4;
         HEAP32[$1 >> 2] = $10;
        }
        block20 : {
         if (HEAP32[$11 + 20 >> 2] <= 0) {
          break block20
         }
         block21 : {
          if (!bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
           if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0) | 0) == HEAP32[$11 + 88 >> 2]) {
            break block21
           }
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break block11;
         }
         while (1) {
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
          if (HEAP32[$11 + 20 >> 2] <= 0) {
           break block20
          }
          block22 : {
           if (!bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
            if (std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($7, 64, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0))) {
             break block22
            }
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break block11;
          }
          if (HEAP32[$9 >> 2] == HEAP32[$11 + 520 >> 2]) {
           void_20std____2____double_or_nothing_5babi_nn200100_5d_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($8, $9, $11 + 520 | 0)
          }
          $1 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0);
          $4 = HEAP32[$9 >> 2];
          HEAP32[$9 >> 2] = $4 + 4;
          HEAP32[$4 >> 2] = $1;
          HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 20 >> 2] - 1;
          continue;
         };
        }
        $1 = $2;
        if (HEAP32[$8 >> 2] != HEAP32[$9 >> 2]) {
         break block8
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break block11;
       }
       block23 : {
        if (!$2) {
         break block23
        }
        $10 = 1;
        while (1) {
         if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($2) >>> 0 <= $10 >>> 0) {
          break block23
         }
         block24 : {
          if (!bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0, $11 + 524 | 0)) {
           if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator__5babi_nn200100_5d_28_29_20const($0) | 0) == HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($2, $10) >> 2]) {
            break block24
           }
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break block11;
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28_29($0);
         $10 = $10 + 1 | 0;
         continue;
        };
       }
       $0 = 1;
       if (HEAP32[$15 >> 2] == HEAP32[$11 + 100 >> 2]) {
        break block11
       }
       $0 = 0;
       HEAP32[$11 + 12 >> 2] = 0;
       std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, HEAP32[$15 >> 2], HEAP32[$11 + 100 >> 2], $11 + 12 | 0);
       if (HEAP32[$11 + 12 >> 2]) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        break block11;
       }
       $0 = 1;
      }
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($16);
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($13);
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($14);
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($12);
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($17);
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($15);
      break block;
     }
     $1 = $2;
    }
    $3 = $3 + 1 | 0;
    continue;
   };
  }
  __stack_pointer = $11 + 528 | 0;
  return $0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____operator___5babi_nn200100_5d_28int_29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____sbumpc_5babi_nn200100_5d_28_29(HEAP32[$1 >> 2]);
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 >> 2] = $2;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $0 = __stack_pointer - 448 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 440 >> 2] = $2;
  HEAP32[$0 + 444 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = 352;
  $8 = $0 + 20 | 0;
  $10 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $8);
  $1 = $0 + 16 | 0;
  std____2__ios_base__getloc_28_29_20const($1, $4);
  $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($1);
  HEAP8[$0 + 15 | 0] = 0;
  if (std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_______do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t____2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 444 | 0, $2, $3, $1, HEAP32[$4 + 4 >> 2], $5, $0 + 15 | 0, $7, $10, $8, $0 + 432 | 0)) {
   $1 = __stack_pointer - 16 | 0;
   __stack_pointer = $1;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
   block : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($6)) {
     $2 = HEAP32[$6 >> 2];
     HEAP32[$1 + 12 >> 2] = 0;
     std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($2, $1 + 12 | 0);
     HEAP32[$6 + 4 >> 2] = 0;
     break block;
    }
    HEAP32[$1 + 8 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($6, $1 + 8 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($6, 0);
   }
   __stack_pointer = $1 + 16 | 0;
   if (HEAPU8[$0 + 15 | 0] == 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($6, std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($7, 45))
   }
   $1 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($7, 48);
   $2 = HEAP32[$10 >> 2];
   $4 = HEAP32[$0 + 20 >> 2];
   $3 = $4 - 4 | 0;
   while (1) {
    if (!(($1 | 0) != HEAP32[$2 >> 2] | $2 >>> 0 >= $3 >>> 0)) {
     $2 = $2 + 4 | 0;
     continue;
    }
    break;
   };
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
   $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn200100_5d_28_29_20const($6);
   $8 = std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($2, $4);
   block2 : {
    if (!$8) {
     break block2
    }
    if (!bool_20std____2____is_pointer_in_range_5babi_nn200100_5d_char_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6), (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) << 2) | 0) + 4 | 0, $2)) {
     if ($8 >>> 0 > $7 - $1 >>> 0) {
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($6, $7, $8 + ($1 - $7 | 0) | 0, $1, $1)
     }
     $2 = wchar_t__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______copy_non_overlapping_range_5babi_nn200100_5d_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__2c_20wchar_t__29($2, $4, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6) + ($1 << 2) | 0);
     HEAP32[$3 + 4 >> 2] = 0;
     std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($2, $3 + 4 | 0);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($6, $1 + $8 | 0);
     break block2;
    }
    $7 = $3 + 4 | 0;
    void_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______init_wchar_t_20const__2c_200__28wchar_t_20const__2c_20wchar_t_20const__29($7, $2, $4);
    $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($7);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7);
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn200100_5d_28_29_20const($6);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6);
    block3 : {
     if ($1 >>> 0 <= $9 - $2 >>> 0) {
      if (!$1) {
       break block3
      }
      $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($6);
      wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($9 + ($2 << 2) | 0, $8, $1);
      $1 = $1 + $2 | 0;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($6, $1);
      HEAP32[$4 + 12 >> 2] = 0;
      std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($9 + ($1 << 2) | 0, $4 + 12 | 0);
      break block3;
     }
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($6, $9, $2 + ($1 - $9 | 0) | 0, $2, $2, 0, $1, $8);
    }
    __stack_pointer = $4 + 16 | 0;
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($7);
   }
   __stack_pointer = $3 + 16 | 0;
  }
  if (bool_20std____2__operator___5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20const__29($0 + 444 | 0, $0 + 440 | 0)) {
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
  }
  $1 = HEAP32[$0 + 444 >> 2];
  std____2__locale___locale_28_29($0 + 16 | 0);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($10);
  __stack_pointer = $0 + 448 | 0;
  return $1 | 0;
 }
 
 function std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn200100_5d_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0) - 1 | 0
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $9 = $7 + 12 | 0;
  std____2____scope_guard_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__20std____2____make_scope_guard_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size_29($9, HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($7 + 8 | 0, $0) >> 2]);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  block : {
   if (1073741815 - $1 >>> 0 >= $2 >>> 0) {
    $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
    $6 = $5 + 4 | 0;
    if ($1 >>> 0 < 536870899) {
     HEAP32[$5 + 12 >> 2] = $1 << 1;
     HEAP32[$5 + 4 >> 2] = $1 + $2;
     $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($6, $5 + 12 | 0) >> 2]) + 1 | 0;
    } else {
     $2 = 1073741815
    }
    std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($6, $2);
    $2 = HEAP32[$5 + 4 >> 2];
    if ($4) {
     wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($2, $8, $4)
    }
    if (($3 | 0) != ($4 | 0)) {
     $6 = $4 << 2;
     wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($6 + $2 | 0, $8 + $6 | 0, $3 - $4 | 0);
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) != 2) {
     void_20std____2____libcpp_deallocate_5babi_nn200100_5d_wchar_t__28std____2____type_identity_wchar_t___type__2c_20std____2____element_count_2c_20unsigned_20long_29($8)
    }
    HEAP32[$0 >> 2] = $2;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$5 + 8 >> 2]);
    __stack_pointer = $5 + 16 | 0;
    break block;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
  HEAP32[$0 + 4 >> 2] = $3;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__operator_28_29_5babi_nn200100_5d_28_29($9);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function wchar_t__20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______copy_non_overlapping_range_5babi_nn200100_5d_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0;
  $3 = $0;
  $0 = $1 - $0 | 0;
  wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($2, $3, $0 >> 2);
  return $0 + $2 | 0;
 }
 
 function std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_wchar_t_2c_20true___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82520);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn200100_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   $3 = HEAP32[$0 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0);
   void_20std____2____libcpp_deallocate_5babi_nn200100_5d_wchar_t__28std____2____type_identity_wchar_t___type__2c_20std____2____element_count_2c_20unsigned_20long_29($3);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($1);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($1);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $4;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($1, 0);
  HEAP32[$2 + 12 >> 2] = 0;
  std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($1, $2 + 12 | 0);
  $1 = ($0 | 0) == ($1 | 0);
  block : {
   if (!($1 | $3)) {
    break block
   }
  }
  if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0) | $1)) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0)
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_wchar_t_2c_20false___28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 82512);
 }
 
 function std____2____wrap_iter_wchar_t____operator__5babi_nn200100_5d_28long_29_20const($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + ($1 << 2);
  __stack_pointer = $2 + 16 | 0;
  return HEAP32[$2 + 12 >> 2];
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $0 = __stack_pointer - 448 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 440 >> 2] = $7;
  HEAP32[$0 + 444 >> 2] = $8;
  HEAP32[$0 + 432 >> 2] = $5;
  HEAP32[$0 + 436 >> 2] = $6;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8;
  $5 = $0 + 320 | 0;
  HEAP32[$0 + 316 >> 2] = $5;
  $5 = snprintf($5, 100, 28239, $0);
  HEAP32[$0 + 208 >> 2] = 351;
  $6 = $0 + 208 | 0;
  $14 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, 0, $6);
  HEAP32[$0 + 208 >> 2] = 351;
  $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 192 | 0, 0, $6);
  block : {
   if ($5 >>> 0 >= 100) {
    $5 = int_20std____2____locale____asprintf_5babi_nn200100_5d_long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($0 + 316 | 0, std____2____cloc_28_29(), 28239, $0 + 432 | 0);
    if (($5 | 0) == -1) {
     break block
    }
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($14, HEAP32[$0 + 316 >> 2]);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($7, emscripten_builtin_malloc($5));
    if (std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____failed_5babi_nn200100_5d_28_29_20const($7)) {
     break block
    }
    $6 = HEAP32[$7 >> 2];
   }
   $8 = $0 + 188 | 0;
   std____2__ios_base__getloc_28_29_20const($8, $3);
   $15 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($8);
   $8 = HEAP32[$0 + 316 >> 2];
   std____2__ctype_char___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20char__29_20const($15, $8, $5 + $8 | 0, $6);
   $11 = ($5 | 0) > 0 ? HEAPU8[HEAP32[$0 + 316 >> 2]] == 45 : $11;
   $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 168 | 0);
   $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 156 | 0);
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 144 | 0);
   std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20int__29($2, $11, $0 + 188 | 0, $0 + 184 | 0, $0 + 183 | 0, $0 + 182 | 0, $12, $8, $10, $0 + 140 | 0);
   HEAP32[$0 + 32 >> 2] = 351;
   $2 = $0 + 32 | 0;
   $13 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, 0, $2);
   $9 = HEAP32[$0 + 140 >> 2];
   block1 : {
    if (($9 | 0) < ($5 | 0)) {
     $9 = (((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($10) + ($5 - $9 << 1) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($8) | 0) + HEAP32[$0 + 140 >> 2] | 0) + 1 | 0;
     break block1;
    }
    $9 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($10) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($8) | 0) + HEAP32[$0 + 140 >> 2] | 0) + 2 | 0;
   }
   if ($9 >>> 0 >= 101) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($13, emscripten_builtin_malloc($9));
    $2 = HEAP32[$13 >> 2];
    if (!$2) {
     break block
    }
   }
   std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($2, $0 + 20 | 0, $0 + 16 | 0, HEAP32[$3 + 4 >> 2], $6, $5 + $6 | 0, $15, $11, $0 + 184 | 0, HEAP8[$0 + 183 | 0], HEAP8[$0 + 182 | 0], $12, $8, $10, HEAP32[$0 + 140 >> 2]);
   $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $3, $4);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($13);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($8);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($12);
   std____2__locale___locale_28_29($0 + 188 | 0);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($7);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($14);
   __stack_pointer = $0 + 448 | 0;
   return $1 | 0;
  }
  std____throw_bad_alloc_28_29();
  wasm2js_trap();
 }
 
 function std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  block : {
   if ($0) {
    $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_char_2c_20true___28std____2__locale_20const__29($2);
    break block;
   }
   $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_char_2c_20false___28std____2__locale_20const__29($2);
  }
  block1 : {
   if ($1) {
    $1 = $10 + 4 | 0;
    std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($1, $0);
    $2 = HEAP32[$10 + 4 >> 2];
    HEAP8[$3 | 0] = $2;
    HEAP8[$3 + 1 | 0] = $2 >>> 8;
    HEAP8[$3 + 2 | 0] = $2 >>> 16;
    HEAP8[$3 + 3 | 0] = $2 >>> 24;
    std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn200100_5d_28_29_20const($1, $0);
    break block1;
   }
   $1 = $10 + 4 | 0;
   std____2__moneypunct_char_2c_20true___pos_format_5babi_nn200100_5d_28_29_20const($1, $0);
   $2 = HEAP32[$10 + 4 >> 2];
   HEAP8[$3 | 0] = $2;
   HEAP8[$3 + 1 | 0] = $2 >>> 8;
   HEAP8[$3 + 2 | 0] = $2 >>> 16;
   HEAP8[$3 + 3 | 0] = $2 >>> 24;
   std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($1, $0);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($8, $1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1 = $10 + 4 | 0;
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($1, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($6, $1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($1, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($7, $1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  (wasm2js_i32$0 = $9, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn200100_5d_28_29_20const($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  __stack_pointer = $10 + 16 | 0;
 }
 
 function std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
  var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20 = __stack_pointer - 16 | 0;
  __stack_pointer = $20;
  HEAP32[$2 >> 2] = $0;
  $23 = $3 & 512;
  while (1) {
   if (($21 | 0) == 4) {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13) >>> 0 > 1) {
     (wasm2js_i32$0 = $20, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($13)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $2, wasm2js_i32$1 = char__20std____2__copy_5babi_nn200100_5d_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2____wrap_iter_char____operator__5babi_nn200100_5d_28long_29_20const($20 + 12 | 0, 1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($13), HEAP32[$2 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = $3 & 176;
    if (($3 | 0) != 16) {
     if (($3 | 0) == 32) {
      $0 = HEAP32[$2 >> 2]
     }
     HEAP32[$1 >> 2] = $0;
    }
    __stack_pointer = $20 + 16 | 0;
   } else {
    block5 : {
     block4 : {
      switch (HEAPU8[$8 + $21 | 0]) {
      case 0:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       break block5;
      case 1:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       $16 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($6, 32);
       $15 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $15 + 1;
       HEAP8[$15 | 0] = $16;
       break block5;
      case 3:
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($13)) {
        break block5
       }
       $16 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($13, 0) | 0];
       $15 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $15 + 1;
       HEAP8[$15 | 0] = $16;
       break block5;
      case 2:
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($12) | !$23) {
        break block5
       }
       (wasm2js_i32$0 = $2, wasm2js_i32$1 = char__20std____2__copy_5babi_nn200100_5d_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____end_5babi_nn200100_5d_28_29($12), HEAP32[$2 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break block5;
      case 4:
       break block4;
      default:
       break block5;
      };
     }
     $24 = HEAP32[$2 >> 2];
     $4 = $4 + $7 | 0;
     $17 = $4;
     while (1) {
      block6 : {
       if ($5 >>> 0 <= $17 >>> 0) {
        break block6
       }
       if (!std____2__ctype_char___is_5babi_nn200100_5d_28unsigned_20long_2c_20char_29_20const($6, 64, HEAP8[$17 | 0])) {
        break block6
       }
       $17 = $17 + 1 | 0;
       continue;
      }
      break;
     };
     $16 = $14;
     if (($16 | 0) > 0) {
      while (1) {
       if (!(!$16 | $4 >>> 0 >= $17 >>> 0)) {
        $16 = $16 - 1 | 0;
        $17 = $17 - 1 | 0;
        $15 = HEAPU8[$17 | 0];
        $18 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $18 + 1;
        HEAP8[$18 | 0] = $15;
        continue;
       }
       break;
      };
      if ($16) {
       $15 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($6, 48)
      } else {
       $15 = 0
      }
      while (1) {
       $18 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $18 + 1;
       if (($16 | 0) > 0) {
        HEAP8[$18 | 0] = $15;
        $16 = $16 - 1 | 0;
        continue;
       }
       break;
      };
      HEAP8[$18 | 0] = $9;
     }
     block7 : {
      if (($4 | 0) == ($17 | 0)) {
       $16 = std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($6, 48);
       $15 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $15 + 1;
       HEAP8[$15 | 0] = $16;
       break block7;
      }
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($11)) {
       $15 = -1
      } else {
       $15 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($11, 0) | 0]
      }
      $16 = 0;
      $19 = 0;
      while (1) {
       if (($4 | 0) == ($17 | 0)) {
        break block7
       }
       block8 : {
        if (($16 | 0) != ($15 | 0)) {
         $18 = $16;
         break block8;
        }
        $15 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $15 + 1;
        HEAP8[$15 | 0] = $10;
        $18 = 0;
        $19 = $19 + 1 | 0;
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($11) >>> 0 <= $19 >>> 0) {
         $15 = $16;
         break block8;
        }
        if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($11, $19) | 0] == 127) {
         $15 = -1;
         break block8;
        }
        $15 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($11, $19) | 0];
       }
       $17 = $17 - 1 | 0;
       $16 = HEAPU8[$17 | 0];
       $22 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $22 + 1;
       HEAP8[$22 | 0] = $16;
       $16 = $18 + 1 | 0;
       continue;
      };
     }
     void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20char__2c_20char___28char__2c_20char__29($24, HEAP32[$2 >> 2]);
    }
    $21 = $21 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $3;
  $6 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($4 + 4 | 0, $4 + 12 | 0);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = HEAP32[$4 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $3;
  HEAP32[$1 + 8 >> 2] = $3;
  $5 = -1;
  $3 = vsnprintf(0, 0, $2, $3);
  block : {
   if (($3 | 0) < 0) {
    break block
   }
   $7 = $0;
   $3 = $3 + 1 | 0;
   $0 = emscripten_builtin_malloc($3);
   HEAP32[$7 >> 2] = $0;
   if (!$0) {
    break block
   }
   $5 = vsnprintf($0, $3, $2, HEAP32[$1 + 12 >> 2]);
  }
  __stack_pointer = $1 + 16 | 0;
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($6);
  __stack_pointer = $4 + 16 | 0;
  return $5;
 }
 
 function std____2__moneypunct_char_2c_20true___pos_format_5babi_nn200100_5d_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($0, $1);
 }
 
 function char__20std____2__copy_5babi_nn200100_5d_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  std____2____unwrap_range_impl_std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const_______unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___29($3 + 24 | 0, $0, $1);
  $4 = HEAP32[$3 + 24 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $6 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 12 >> 2] = $6;
  $7 = $4;
  $4 = $6 - $4 | 0;
  char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $7, $4);
  HEAP32[$1 + 8 >> 2] = $2 + $4;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($3 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  $4 = HEAP32[$3 + 16 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  $0 = std____2____wrap_iter_char____operator__5babi_nn200100_5d_28long_29_20const($0, $4 - std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn200100_5d_28std____2____wrap_iter_char___20const__29($0) | 0);
  __stack_pointer = $1 + 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($2, HEAP32[$3 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($5 + 8 | 0, $3 + 12 | 0, $3 + 8 | 0);
  __stack_pointer = $3 + 32 | 0;
  __stack_pointer = $5 + 16 | 0;
  return HEAP32[$5 + 12 >> 2];
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $0 = __stack_pointer - 176 | 0;
  __stack_pointer = $0;
  $6 = $0 + 172 | 0;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $11 = std____2__ctype_char__20const__20std____2__use_facet_5babi_ne200100_5d_std____2__ctype_char___28std____2__locale_20const__29($6);
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5)) {
   $12 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($5, 0) | 0] == (std____2__ctype_char___widen_5babi_nn200100_5d_28char_29_20const($11, 45) & 255)
  }
  $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 152 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 140 | 0);
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 128 | 0);
  std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20int__29($2, $12, $0 + 172 | 0, $0 + 168 | 0, $0 + 167 | 0, $0 + 166 | 0, $9, $6, $7, $0 + 124 | 0);
  HEAP32[$0 + 16 >> 2] = 351;
  $2 = $0 + 16 | 0;
  $10 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $2);
  block1 : {
   block : {
    if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5) | 0) > HEAP32[$0 + 124 >> 2]) {
     $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5);
     $13 = HEAP32[$0 + 124 >> 2];
     $8 = (((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7) + ($8 - $13 << 1) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | 0) + HEAP32[$0 + 124 >> 2] | 0) + 1 | 0;
     break block;
    }
    $8 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | 0) + HEAP32[$0 + 124 >> 2] | 0) + 2 | 0;
   }
   if ($8 >>> 0 < 101) {
    break block1
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($10, emscripten_builtin_malloc($8));
   $2 = HEAP32[$10 >> 2];
   if ($2) {
    break block1
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20int_29($2, $0 + 4 | 0, $0, HEAP32[$3 + 4 >> 2], std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($5), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($5) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5) | 0, $11, $12, $0 + 168 | 0, HEAP8[$0 + 167 | 0], HEAP8[$0 + 166 | 0], $9, $6, $7, HEAP32[$0 + 124 >> 2]);
  $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($7);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($9);
  std____2__locale___locale_28_29($0 + 172 | 0);
  __stack_pointer = $0 + 176 | 0;
  return $1 | 0;
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $0 = __stack_pointer - 1056 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 1048 >> 2] = $7;
  HEAP32[$0 + 1052 >> 2] = $8;
  HEAP32[$0 + 1040 >> 2] = $5;
  HEAP32[$0 + 1044 >> 2] = $6;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8;
  $5 = $0 + 928 | 0;
  HEAP32[$0 + 924 >> 2] = $5;
  $5 = snprintf($5, 100, 28239, $0);
  HEAP32[$0 + 512 >> 2] = 351;
  $6 = $0 + 512 | 0;
  $14 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 504 | 0, 0, $6);
  HEAP32[$0 + 512 >> 2] = 351;
  $7 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 496 | 0, 0, $6);
  block : {
   if ($5 >>> 0 >= 100) {
    $5 = int_20std____2____locale____asprintf_5babi_nn200100_5d_long_20double___28char___2c_20__locale_struct__2c_20char_20const__2c_20long_20double__29($0 + 924 | 0, std____2____cloc_28_29(), 28239, $0 + 1040 | 0);
    if (($5 | 0) == -1) {
     break block
    }
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($14, HEAP32[$0 + 924 >> 2]);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($7, emscripten_builtin_malloc($5 << 2));
    if (std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char____failed_5babi_nn200100_5d_28_29_20const($7)) {
     break block
    }
    $6 = HEAP32[$7 >> 2];
   }
   $8 = $0 + 492 | 0;
   std____2__ios_base__getloc_28_29_20const($8, $3);
   $15 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($8);
   $8 = HEAP32[$0 + 924 >> 2];
   std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($15, $8, $5 + $8 | 0, $6);
   $11 = ($5 | 0) > 0 ? HEAPU8[HEAP32[$0 + 924 >> 2]] == 45 : $11;
   $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 468 | 0);
   $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 456 | 0);
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 444 | 0);
   std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20int__29($2, $11, $0 + 492 | 0, $0 + 488 | 0, $0 + 484 | 0, $0 + 480 | 0, $12, $8, $10, $0 + 440 | 0);
   HEAP32[$0 + 32 >> 2] = 351;
   $2 = $0 + 32 | 0;
   $13 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, 0, $2);
   $9 = HEAP32[$0 + 440 >> 2];
   block1 : {
    if (($9 | 0) < ($5 | 0)) {
     $9 = (((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($10) + ($5 - $9 << 1) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($8) | 0) + HEAP32[$0 + 440 >> 2] | 0) + 1 | 0;
     break block1;
    }
    $9 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($10) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($8) | 0) + HEAP32[$0 + 440 >> 2] | 0) + 2 | 0;
   }
   if ($9 >>> 0 >= 101) {
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($13, emscripten_builtin_malloc($9 << 2));
    $2 = HEAP32[$13 >> 2];
    if (!$2) {
     break block
    }
   }
   std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20int_29($2, $0 + 20 | 0, $0 + 16 | 0, HEAP32[$3 + 4 >> 2], $6, ($5 << 2) + $6 | 0, $15, $11, $0 + 488 | 0, HEAP32[$0 + 484 >> 2], HEAP32[$0 + 480 >> 2], $12, $8, $10, HEAP32[$0 + 440 >> 2]);
   $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $3, $4);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($13);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($8);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($12);
   std____2__locale___locale_28_29($0 + 492 | 0);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($7);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($14);
   __stack_pointer = $0 + 1056 | 0;
   return $1 | 0;
  }
  std____throw_bad_alloc_28_29();
  wasm2js_trap();
 }
 
 function std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  block : {
   if ($0) {
    $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_wchar_t_2c_20true___28std____2__locale_20const__29($2);
    break block;
   }
   $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__moneypunct_wchar_t_2c_20false___28std____2__locale_20const__29($2);
  }
  block1 : {
   if ($1) {
    $1 = $10 + 4 | 0;
    std____2__moneypunct_char_2c_20true___neg_format_5babi_nn200100_5d_28_29_20const($1, $0);
    $2 = HEAP32[$10 + 4 >> 2];
    HEAP8[$3 | 0] = $2;
    HEAP8[$3 + 1 | 0] = $2 >>> 8;
    HEAP8[$3 + 2 | 0] = $2 >>> 16;
    HEAP8[$3 + 3 | 0] = $2 >>> 24;
    std____2__moneypunct_char_2c_20true___negative_sign_5babi_nn200100_5d_28_29_20const($1, $0);
    break block1;
   }
   $1 = $10 + 4 | 0;
   std____2__moneypunct_char_2c_20true___pos_format_5babi_nn200100_5d_28_29_20const($1, $0);
   $2 = HEAP32[$10 + 4 >> 2];
   HEAP8[$3 | 0] = $2;
   HEAP8[$3 + 1 | 0] = $2 >>> 8;
   HEAP8[$3 + 2 | 0] = $2 >>> 16;
   HEAP8[$3 + 3 | 0] = $2 >>> 24;
   std____2__numpunct_char___falsename_5babi_nn200100_5d_28_29_20const($1, $0);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn200100_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($8, $1);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($1);
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_5babi_nn200100_5d_28_29_20const($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_5babi_nn200100_5d_28_29_20const($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1 = $10 + 4 | 0;
  std____2__numpunct_char___grouping_5babi_nn200100_5d_28_29_20const($1, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29($6, $1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($1);
  std____2__numpunct_char___truename_5babi_nn200100_5d_28_29_20const($1, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator__5babi_nn200100_5d_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____29($7, $1);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($1);
  (wasm2js_i32$0 = $9, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___frac_digits_5babi_nn200100_5d_28_29_20const($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  __stack_pointer = $10 + 16 | 0;
 }
 
 function std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
  var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20 = __stack_pointer - 16 | 0;
  __stack_pointer = $20;
  HEAP32[$2 >> 2] = $0;
  $22 = $7 ? 4 : 0;
  $23 = $3 & 512;
  while (1) {
   if (($21 | 0) == 4) {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($13) >>> 0 > 1) {
     (wasm2js_i32$0 = $20, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($13)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $2, wasm2js_i32$1 = wchar_t__20std____2__copy_5babi_nn200100_5d_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2____wrap_iter_wchar_t____operator__5babi_nn200100_5d_28long_29_20const($20 + 12 | 0, 1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($13), HEAP32[$2 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = $3 & 176;
    if (($3 | 0) != 16) {
     if (($3 | 0) == 32) {
      $0 = HEAP32[$2 >> 2]
     }
     HEAP32[$1 >> 2] = $0;
    }
    __stack_pointer = $20 + 16 | 0;
   } else {
    block5 : {
     block4 : {
      switch (HEAPU8[$8 + $21 | 0]) {
      case 0:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       break block5;
      case 1:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       $15 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($6, 32);
       $7 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $7 + 4;
       HEAP32[$7 >> 2] = $15;
       break block5;
      case 3:
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($13)) {
        break block5
       }
       $15 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($13, 0) >> 2];
       $7 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $7 + 4;
       HEAP32[$7 >> 2] = $15;
       break block5;
      case 2:
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($12) | !$23) {
        break block5
       }
       (wasm2js_i32$0 = $2, wasm2js_i32$1 = wchar_t__20std____2__copy_5babi_nn200100_5d_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____begin_5babi_nn200100_5d_28_29($12), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____end_5babi_nn200100_5d_28_29($12), HEAP32[$2 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break block5;
      case 4:
       break block4;
      default:
       break block5;
      };
     }
     $24 = HEAP32[$2 >> 2];
     $4 = $4 + $22 | 0;
     $7 = $4;
     while (1) {
      block6 : {
       if ($5 >>> 0 <= $7 >>> 0) {
        break block6
       }
       if (!std____2__ctype_wchar_t___is_5babi_nn200100_5d_28unsigned_20long_2c_20wchar_t_29_20const($6, 64, HEAP32[$7 >> 2])) {
        break block6
       }
       $7 = $7 + 4 | 0;
       continue;
      }
      break;
     };
     if (($14 | 0) > 0) {
      $15 = HEAP32[$2 >> 2];
      $16 = $14;
      while (1) {
       if (!(!$16 | $4 >>> 0 >= $7 >>> 0)) {
        $16 = $16 - 1 | 0;
        $7 = $7 - 4 | 0;
        $18 = HEAP32[$7 >> 2];
        $17 = $15 + 4 | 0;
        HEAP32[$2 >> 2] = $17;
        HEAP32[$15 >> 2] = $18;
        $15 = $17;
        continue;
       }
       break;
      };
      if ($16) {
       $18 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($6, 48)
      } else {
       $18 = 0
      }
      $15 = HEAP32[$2 >> 2];
      while (1) {
       if (($16 | 0) > 0) {
        $17 = $15 + 4 | 0;
        HEAP32[$2 >> 2] = $17;
        HEAP32[$15 >> 2] = $18;
        $16 = $16 - 1 | 0;
        $15 = $17;
        continue;
       }
       break;
      };
      $15 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $15 + 4;
      HEAP32[$15 >> 2] = $9;
     }
     block7 : {
      if (($4 | 0) == ($7 | 0)) {
       $15 = std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($6, 48);
       $7 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $7 + 4;
       HEAP32[$7 >> 2] = $15;
       break block7;
      }
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____empty_5babi_nn200100_5d_28_29_20const($11)) {
       $17 = -1
      } else {
       $17 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($11, 0) | 0]
      }
      $16 = 0;
      $19 = 0;
      while (1) {
       if (($4 | 0) == ($7 | 0)) {
        break block7
       }
       block8 : {
        if (($16 | 0) != ($17 | 0)) {
         $15 = $16;
         break block8;
        }
        $15 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $15 + 4;
        HEAP32[$15 >> 2] = $10;
        $15 = 0;
        $19 = $19 + 1 | 0;
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($11) >>> 0 <= $19 >>> 0) {
         $17 = $16;
         break block8;
        }
        if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($11, $19) | 0] == 127) {
         $17 = -1;
         break block8;
        }
        $17 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($11, $19) | 0];
       }
       $7 = $7 - 4 | 0;
       $18 = HEAP32[$7 >> 2];
       $16 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $16 + 4;
       HEAP32[$16 >> 2] = $18;
       $16 = $15 + 1 | 0;
       continue;
      };
     }
     void_20std____2____reverse_5babi_nn200100_5d_std____2___ClassicAlgPolicy_2c_20wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($24, HEAP32[$2 >> 2]);
    }
    $21 = $21 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function wchar_t__20std____2__copy_5babi_nn200100_5d_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  std____2____unwrap_range_impl_std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const_______unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___29($3 + 24 | 0, $0, $1);
  $4 = HEAP32[$3 + 24 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $6 = HEAP32[$3 + 28 >> 2];
  HEAP32[$1 + 12 >> 2] = $6;
  $7 = $4;
  $4 = $6 - $4 | 0;
  wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($2, $7, $4 >> 2);
  HEAP32[$1 + 8 >> 2] = $2 + $4;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($3 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
  __stack_pointer = $1 + 16 | 0;
  $4 = HEAP32[$3 + 16 >> 2];
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = $1 + 12 | 0;
  $0 = std____2____wrap_iter_wchar_t____operator__5babi_nn200100_5d_28long_29_20const($0, $4 - std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn200100_5d_28std____2____wrap_iter_char___20const__29($0) >> 2);
  __stack_pointer = $1 + 16 | 0;
  HEAP32[$3 + 12 >> 2] = $0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($2, HEAP32[$3 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($5 + 8 | 0, $3 + 12 | 0, $3 + 8 | 0);
  __stack_pointer = $3 + 32 | 0;
  __stack_pointer = $5 + 16 | 0;
  return HEAP32[$5 + 12 >> 2];
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $0 = __stack_pointer - 480 | 0;
  __stack_pointer = $0;
  $6 = $0 + 476 | 0;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_5babi_nn200100_5d_std____2__ctype_wchar_t___28std____2__locale_20const__29($6);
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5)) {
   $12 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29_20const($5, 0) >> 2] == (std____2__ctype_wchar_t___widen_5babi_nn200100_5d_28char_29_20const($11, 45) | 0)
  }
  $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 452 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 440 | 0);
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($0 + 428 | 0);
  std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____2c_20int__29($2, $12, $0 + 476 | 0, $0 + 472 | 0, $0 + 468 | 0, $0 + 464 | 0, $9, $6, $7, $0 + 424 | 0);
  HEAP32[$0 + 16 >> 2] = 351;
  $2 = $0 + 16 | 0;
  $10 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_5babi_nn200100_5d_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $2);
  block1 : {
   block : {
    if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5) | 0) > HEAP32[$0 + 424 >> 2]) {
     $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5);
     $13 = HEAP32[$0 + 424 >> 2];
     $8 = (((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7) + ($8 - $13 << 1) | 0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | 0) + HEAP32[$0 + 424 >> 2] | 0) + 1 | 0;
     break block;
    }
    $8 = ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($7) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($6) | 0) + HEAP32[$0 + 424 >> 2] | 0) + 2 | 0;
   }
   if ($8 >>> 0 < 101) {
    break block1
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_5babi_nn200100_5d_28unsigned_20char__29($10, emscripten_builtin_malloc($8 << 2));
   $2 = HEAP32[$10 >> 2];
   if ($2) {
    break block1
   }
   std____throw_bad_alloc_28_29();
   wasm2js_trap();
  }
  std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__2c_20int_29($2, $0 + 4 | 0, $0, HEAP32[$3 + 4 >> 2], std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($5), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($5) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($5) << 2) | 0, $11, $12, $0 + 472 | 0, HEAP32[$0 + 468 >> 2], HEAP32[$0 + 464 >> 2], $9, $6, $7, HEAP32[$0 + 424 >> 2]);
  $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_5babi_nn200100_5d_28_29($10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($7);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($9);
  std____2__locale___locale_28_29($0 + 476 | 0);
  __stack_pointer = $0 + 480 | 0;
  return $1 | 0;
 }
 
 function std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return -1;
 }
 
 function std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $5);
 }
 
 function std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  block : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($5)) {
    HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $1 = HEAP32[$5 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0);
    break block;
   }
   $4 = HEAP32[$5 >> 2];
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   block3 : {
    block2 : {
     $2 = HEAP32[$5 + 4 >> 2];
     block1 : {
      if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($2)) {
       $1 = $0;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $2);
       break block1;
      }
      if ($2 >>> 0 > 1073741815) {
       break block2
      }
      std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29($2) + 1 | 0);
      $1 = HEAP32[$3 + 8 >> 2];
      HEAP32[$0 >> 2] = $1;
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
      HEAP32[$0 + 4 >> 2] = $2;
     }
     wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($1, $4, $2 + 1 | 0);
     __stack_pointer = $3 + 16 | 0;
     break block3;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
    wasm2js_trap();
   }
  }
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 67608;
  if (HEAP32[$0 + 8 >> 2] != (std____2____cloc_28_29() | 0)) {
   freelocale(HEAP32[$0 + 8 >> 2])
  }
  return $0 | 0;
 }
 
 function std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 4 >> 2] = $1 - 1;
  HEAP32[$0 >> 2] = 73184;
  HEAP32[$0 >> 2] = 67984;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____clear_5babi_nn200100_5d_28_29($0) {
  emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($0);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______base_destruct_at_end_5babi_nn200100_5d_28std____2__locale__facet___29($0, HEAP32[$0 >> 2]);
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($0, $1) {
  HEAP32[$0 >> 2] = $1;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $2 = $3 + 4 | 0;
  HEAP32[$2 >> 2] = $0;
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $0 + ($1 << 2);
  $0 = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  while (1) {
   if (($0 | 0) == ($1 | 0)) {
    HEAP32[HEAP32[$2 >> 2] + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    __stack_pointer = $3 + 16 | 0;
   } else {
    std____2__locale__facet___20std____2____construct_at_5babi_nn200100_5d_std____2__locale__facet__2c_20std____2__locale__facet____28std____2__locale__facet___29($0);
    $0 = $0 + 4 | 0;
    HEAP32[$2 + 4 >> 2] = $0;
    continue;
   }
   break;
  };
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______base_destruct_at_end_5babi_nn200100_5d_28std____2__locale__facet___29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $2 = $2 - 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__locale__id____get_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (HEAP32[$0 >> 2] != -1) {
   $3 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($2 + 8 | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($2 + 12 | 0, $1 + 12 | 0));
   while (1) {
    if (HEAP32[$0 >> 2] == 1) {
     continue
    }
    break;
   };
   if (!HEAP32[$0 >> 2]) {
    HEAP32[$0 >> 2] = 1;
    void_20std____2____call_once_proxy_5babi_nn200100_5d_std____2__tuple_std____2__locale__id____get_28_29__$_0_____28void__29($3);
    HEAP32[$0 >> 2] = -1;
   }
  }
  __stack_pointer = $2 + 16 | 0;
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$0 + 4 >> 2] - 1 | 0;
 }
 
 function std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  std____2____shared_count____add_shared_5babi_nn200100_5d_28_29($1);
  $9 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($8 + 12 | 0, $1);
  $1 = $0 + 8 | 0;
  if (emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1) >>> 0 <= $2 >>> 0) {
   block2 : {
    $0 = $2 + 1 | 0;
    $4 = emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1);
    if ($0 >>> 0 > $4 >>> 0) {
     $10 = __stack_pointer - 32 | 0;
     __stack_pointer = $10;
     $6 = $0 - $4 | 0;
     block : {
      if ($6 >>> 0 <= HEAP32[$1 + 8 >> 2] - HEAP32[$1 + 4 >> 2] >> 2 >>> 0) {
       std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______construct_at_end_28unsigned_20long_29($1, $6);
       break block;
      }
      $4 = $10 + 12 | 0;
      $5 = emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1) + $6 | 0;
      $3 = __stack_pointer - 16 | 0;
      __stack_pointer = $3;
      HEAP32[$3 + 12 >> 2] = $5;
      block1 : {
       $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____max_size_5babi_nn200100_5d_28_29_20const();
       if ($5 >>> 0 <= $0 >>> 0) {
        $5 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____capacity_5babi_nn200100_5d_28_29_20const($1);
        if ($5 >>> 0 < $0 >>> 1 >>> 0) {
         HEAP32[$3 + 8 >> 2] = $5 << 1;
         $0 = HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0, $3 + 12 | 0) >> 2];
        }
        __stack_pointer = $3 + 16 | 0;
        break block1;
       }
       std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______throw_length_error_5babi_nn200100_5d_28_29();
       wasm2js_trap();
      }
      $5 = emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1);
      $3 = __stack_pointer - 16 | 0;
      __stack_pointer = $3;
      $11 = $1 + 12 | 0;
      HEAP32[$4 + 16 >> 2] = $11;
      HEAP32[$4 + 12 >> 2] = 0;
      if ($0) {
       std____2__allocation_result_std____2__locale__facet___2c_20unsigned_20long__20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____allocate_at_least_5babi_nn200100_5d_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($3 + 8 | 0, $11, $0);
       $7 = HEAP32[$3 + 8 >> 2];
       $0 = HEAP32[$3 + 12 >> 2];
      } else {
       $0 = 0
      }
      HEAP32[$4 >> 2] = $7;
      $5 = ($5 << 2) + $7 | 0;
      HEAP32[$4 + 8 >> 2] = $5;
      HEAP32[$4 + 12 >> 2] = ($0 << 2) + $7;
      HEAP32[$4 + 4 >> 2] = $5;
      __stack_pointer = $3 + 16 | 0;
      $7 = __stack_pointer - 16 | 0;
      __stack_pointer = $7;
      $0 = HEAP32[$4 + 8 >> 2];
      $3 = $7 + 4 | 0;
      HEAP32[$3 + 8 >> 2] = $4 + 8;
      HEAP32[$3 >> 2] = $0;
      HEAP32[$3 + 4 >> 2] = $0 + ($6 << 2);
      $0 = HEAP32[$3 >> 2];
      while (1) {
       if (HEAP32[$3 + 4 >> 2] != ($0 | 0)) {
        std____2__locale__facet___20std____2____construct_at_5babi_nn200100_5d_std____2__locale__facet__2c_20std____2__locale__facet____28std____2__locale__facet___29($0);
        $0 = HEAP32[$3 >> 2] + 4 | 0;
        HEAP32[$3 >> 2] = $0;
        continue;
       }
       break;
      };
      HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[$3 >> 2];
      __stack_pointer = $7 + 16 | 0;
      $0 = HEAP32[$1 >> 2];
      $3 = HEAP32[$4 + 4 >> 2] + ($0 - HEAP32[$1 + 4 >> 2] | 0) | 0;
      $6 = HEAP32[$1 + 4 >> 2] - $0 | 0;
      if ($6) {
       wasm2js_memory_copy($3, $0, $6)
      }
      HEAP32[$4 + 4 >> 2] = $3;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 >> 2];
      std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($1, $4 + 4 | 0);
      std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($1 + 4 | 0, $4 + 8 | 0);
      std____2__enable_if_is_move_constructible_unsigned_20int___value_20___20is_move_assignable_unsigned_20int___value_2c_20void___type_20std____2__swap_5babi_nn200100_5d_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($1 + 8 | 0, $4 + 12 | 0);
      HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2];
      emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1);
      $0 = HEAP32[$4 + 4 >> 2];
      while (1) {
       $3 = HEAP32[$4 + 8 >> 2];
       if (($3 | 0) != ($0 | 0)) {
        HEAP32[$4 + 8 >> 2] = $3 - 4;
        continue;
       }
       break;
      };
      $0 = HEAP32[$4 >> 2];
      if ($0) {
       std____2____sso_allocator_std____2__locale__facet__2c_2030ul___deallocate_5babi_nn200100_5d_28std____2__locale__facet___2c_20unsigned_20long_29(HEAP32[$4 + 16 >> 2], $0)
      }
     }
     __stack_pointer = $10 + 32 | 0;
     break block2;
    }
    if ($0 >>> 0 < $4 >>> 0) {
     $0 = HEAP32[$1 >> 2] + ($0 << 2) | 0;
     emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1);
     std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______base_destruct_at_end_5babi_nn200100_5d_28std____2__locale__facet___29($1, $0);
    }
   }
  }
  if (HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($1, $2) >> 2]) {
   std____2____shared_count____release_shared_5babi_nn200100_5d_28_29(HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($1, $2) >> 2])
  }
  $0 = a_swap($9);
  (wasm2js_i32$0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($1, $2), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = HEAP32[$9 >> 2];
  HEAP32[$9 >> 2] = 0;
  if ($0) {
   std____2____shared_count____release_shared_5babi_nn200100_5d_28_29($0)
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  return HEAP32[$0 >> 2] + ($1 << 2) | 0;
 }
 
 function std____2____shared_count____add_shared_5babi_nn200100_5d_28_29($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function std____2____shared_count____release_shared_5babi_nn200100_5d_28_29($0) {
  if ((long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn200100_5d_long__28long__29($0 + 4 | 0) | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0)
  }
 }
 
 function std____2__locale____imp_____imp_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 >> 2] = 66504;
  $1 = $0 + 8 | 0;
  while (1) {
   if (emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($1) >>> 0 > $2 >>> 0) {
    if (HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($1, $2) >> 2]) {
     std____2____shared_count____release_shared_5babi_nn200100_5d_28_29(HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____operator_5b_5d_5babi_nn200100_5d_28unsigned_20long_29($1, $2) >> 2])
    }
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 144 | 0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($2 + 12 | 0, $1);
  $3 = HEAP32[$1 >> 2];
  if (HEAP32[$3 >> 2]) {
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____clear_5babi_nn200100_5d_28_29($3);
   $1 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 >> 2];
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____capacity_5babi_nn200100_5d_28_29_20const($1);
   std____2____sso_allocator_std____2__locale__facet__2c_2030ul___deallocate_5babi_nn200100_5d_28std____2__locale__facet___2c_20unsigned_20long_29($1 + 12 | 0, $3);
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn200100_5d_long__28long__29($0) {
  var $1 = 0;
  $1 = $0;
  $0 = HEAP32[$0 >> 2] - 1 | 0;
  HEAP32[$1 >> 2] = $0;
  return $0;
 }
 
 function std____2__locale____imp_____imp_28_29_2589($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__locale____imp_____imp_28_29($0));
 }
 
 function std____2__locale__locale_28std____2__locale_20const__29($0, $1) {
  var $2 = 0;
  $2 = $0;
  $0 = HEAP32[$1 >> 2];
  HEAP32[$2 >> 2] = $0;
  std____2__locale____imp__acquire_28_29($0);
 }
 
 function std____2__locale____imp__acquire_28_29($0) {
  if (($0 | 0) != 82584) {
   std____2____shared_count____add_shared_5babi_nn200100_5d_28_29($0)
  }
 }
 
 function std____2__locale__locale_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if (!HEAPU8[82752]) {
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   if (!HEAPU8[82744]) {
    $6 = __stack_pointer - 16 | 0;
    __stack_pointer = $6;
    HEAP32[$6 + 12 >> 2] = 1;
    $2 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(82584, HEAP32[$6 + 12 >> 2]);
    HEAP32[$2 >> 2] = 66504;
    $3 = __stack_pointer - 16 | 0;
    __stack_pointer = $3;
    $1 = $2 + 8 | 0;
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP8[$1 + 132 | 0] = 0;
    std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($3 + 8 | 0, $1);
    HEAP8[$3 + 15 | 0] = 0;
    $4 = __stack_pointer - 16 | 0;
    __stack_pointer = $4;
    if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____max_size_5babi_nn200100_5d_28_29_20const() >>> 0 < 30) {
     std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______throw_length_error_5babi_nn200100_5d_28_29();
     wasm2js_trap();
    }
    std____2__allocation_result_std____2__locale__facet___2c_20unsigned_20long__20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____allocate_at_least_5babi_nn200100_5d_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($4 + 8 | 0, $1 + 12 | 0, 30);
    $7 = HEAP32[$4 + 8 >> 2];
    HEAP32[$1 + 4 >> 2] = $7;
    HEAP32[$1 >> 2] = $7;
    HEAP32[$1 + 8 >> 2] = (HEAP32[$4 + 12 >> 2] << 2) + $7;
    __stack_pointer = $4 + 16 | 0;
    std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______construct_at_end_28unsigned_20long_29($1, 30);
    HEAP8[$3 + 15 | 0] = 1;
    __stack_pointer = $3 + 16 | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_0__28char_20const__29($2 + 144 | 0, 32305);
    std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____clear_5babi_nn200100_5d_28_29($1);
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84012, 1), wasm2js_i32$1 = 69096), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84012, std____2__locale__id____get_28_29(82416));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84020, 1), wasm2js_i32$1 = 69128), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84020, std____2__locale__id____get_28_29(82424));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84028, 1);
    HEAP8[$1 + 12 | 0] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 >> 2] = 66524;
    HEAP32[$1 + 8 >> 2] = 66576;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84028, std____2__locale__id____get_28_29(82768));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84044, 1), wasm2js_i32$1 = 68040), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84044, std____2__locale__id____get_28_29(82760));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84052, 1), wasm2js_i32$1 = 68192), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84052, std____2__locale__id____get_28_29(82776));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84060, 1);
    HEAP32[$1 >> 2] = 67608;
    (wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____cloc_28_29()), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84060, std____2__locale__id____get_28_29(82784));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84072, 1), wasm2js_i32$1 = 68340), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84072, std____2__locale__id____get_28_29(82792));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84080, 1), wasm2js_i32$1 = 68572), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84080, std____2__locale__id____get_28_29(82808));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84088, 1), wasm2js_i32$1 = 68456), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84088, std____2__locale__id____get_28_29(82800));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84096, 1), wasm2js_i32$1 = 68688), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84096, std____2__locale__id____get_28_29(82816));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84104, 1);
    HEAP16[$1 + 8 >> 1] = 11310;
    HEAP32[$1 >> 2] = 67656;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($1 + 12 | 0);
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84104, std____2__locale__id____get_28_29(82824));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84128, 1);
    HEAP32[$1 + 8 >> 2] = 46;
    HEAP32[$1 + 12 >> 2] = 44;
    HEAP32[$1 >> 2] = 67696;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_28_29($1 + 16 | 0);
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84128, std____2__locale__id____get_28_29(82832));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84156, 1), wasm2js_i32$1 = 69160), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84156, std____2__locale__id____get_28_29(82432));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84164, 1), wasm2js_i32$1 = 69408), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84164, std____2__locale__id____get_28_29(82440));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84172, 1), wasm2js_i32$1 = 69620), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84172, std____2__locale__id____get_28_29(82448));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84180, 1), wasm2js_i32$1 = 69856), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84180, std____2__locale__id____get_28_29(82456));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84188, 1), wasm2js_i32$1 = 70852), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84188, std____2__locale__id____get_28_29(82496));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84196, 1), wasm2js_i32$1 = 71e3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84196, std____2__locale__id____get_28_29(82504));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84204, 1), wasm2js_i32$1 = 71116), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84204, std____2__locale__id____get_28_29(82512));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84212, 1), wasm2js_i32$1 = 71232), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84212, std____2__locale__id____get_28_29(82520));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84220, 1), wasm2js_i32$1 = 71348), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84220, std____2__locale__id____get_28_29(82528));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84228, 1), wasm2js_i32$1 = 71516), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84228, std____2__locale__id____get_28_29(82536));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84236, 1), wasm2js_i32$1 = 71684), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84236, std____2__locale__id____get_28_29(82544));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84244, 1), wasm2js_i32$1 = 71852), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84244, std____2__locale__id____get_28_29(82552));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84252, 1);
    HEAP32[$1 + 8 >> 2] = 73112;
    HEAP32[$1 >> 2] = 70056;
    HEAP32[$1 + 8 >> 2] = 70104;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84252, std____2__locale__id____get_28_29(82464));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84264, 1);
    HEAP32[$1 + 8 >> 2] = 73148;
    HEAP32[$1 >> 2] = 70324;
    HEAP32[$1 + 8 >> 2] = 70372;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84264, std____2__locale__id____get_28_29(82472));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84276, 1);
    std____2____time_put____time_put_5babi_nn200100_5d_28_29($1 + 8 | 0);
    HEAP32[$1 >> 2] = 70564;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84276, std____2__locale__id____get_28_29(82480));
    $1 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84288, 1);
    std____2____time_put____time_put_5babi_nn200100_5d_28_29($1 + 8 | 0);
    HEAP32[$1 >> 2] = 70724;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84288, std____2__locale__id____get_28_29(82488));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84300, 1), wasm2js_i32$1 = 72020), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84300, std____2__locale__id____get_28_29(82560));
    (wasm2js_i32$0 = std____2__locale__facet__facet_5babi_nn200100_5d_28unsigned_20long_29(84308, 1), wasm2js_i32$1 = 72140), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($2, 84308, std____2__locale__id____get_28_29(82568));
    __stack_pointer = $6 + 16 | 0;
    HEAP32[$5 + 8 >> 2] = 82584;
    std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29(82740, HEAP32[$5 + 8 >> 2]);
    HEAP8[82744] = 1;
   }
   __stack_pointer = $5 + 16 | 0;
   std____2__locale__locale_28std____2__locale_20const__29(82748, 82740);
   HEAP8[82752] = 1;
  }
  $1 = $0;
  $0 = HEAP32[20687];
  HEAP32[$1 >> 2] = $0;
  std____2__locale____imp__acquire_28_29($0);
 }
 
 function std____2__locale__facet____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 
 function void_20std____2____call_once_proxy_5babi_nn200100_5d_std____2__tuple_std____2__locale__id____get_28_29__$_0_____28void__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[HEAP32[HEAP32[$0 >> 2] >> 2] >> 2];
  $1 = HEAP32[20689] + 1 | 0;
  HEAP32[20689] = $1;
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__ctype_wchar_t___do_is_28unsigned_20long_2c_20wchar_t_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($2)) {
   $0 = (HEAP32[($2 << 2) + 66576 >> 2] & $1) != 0
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20long__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP32[$1 >> 2])) {
     $0 = HEAP32[(HEAP32[$1 >> 2] << 2) + 66576 >> 2]
    } else {
     $0 = 0
    }
    HEAP32[$3 >> 2] = $0;
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_scan_is_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  while (1) {
   block : {
    if (($2 | 0) == ($3 | 0)) {
     break block
    }
    if (wasm2js_i32$0 = std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP32[$2 >> 2]), wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAP32[(HEAP32[$2 >> 2] << 2) + 66576 >> 2] & $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
     break block
    }
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_scan_not_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   block : {
    if (($2 | 0) == ($3 | 0)) {
     break block
    }
    if (!std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP32[$2 >> 2]) | !(HEAP32[(HEAP32[$2 >> 2] << 2) + 66576 >> 2] & $1)) {
     break block
    }
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($1)) {
   $1 = HEAP32[HEAP32[15790] + ($1 << 2) >> 2]
  }
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $1191($1, $2, 63160) | 0;
 }
 
 function std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($1)) {
   $1 = HEAP32[HEAP32[16176] + ($1 << 2) >> 2]
  }
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $1191($1, $2, 64704) | 0;
 }
 
 function std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$3 >> 2] = HEAP8[$1 | 0];
    $3 = $3 + 4 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($1) ? $1 : $2) << 24 >> 24;
 }
 
 function std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = $3;
    if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP32[$1 >> 2])) {
     $0 = HEAP32[$1 >> 2]
    }
    HEAP8[$4 | 0] = $0;
    $4 = $4 + 1 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_char____ctype_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 66524;
  $1 = HEAP32[$0 + 8 >> 2];
  if (!(!$1 | !(HEAP8[$0 + 12 | 0] & 1))) {
   emscripten_builtin_free($1)
  }
  return $0 | 0;
 }
 
 function std____2__ctype_char____ctype_28_29_2629($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__ctype_char____ctype_28_29($0));
 }
 
 function std____2__ctype_char___do_toupper_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($1)) {
   $1 = HEAP32[HEAP32[15790] + (($1 & 255) << 2) >> 2]
  }
  return $1 << 24 >> 24;
 }
 
 function std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $1190($1, $2, 63160) | 0;
 }
 
 function std____2__ctype_char___do_tolower_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($1)) {
   $1 = HEAP32[HEAP32[16176] + ($1 << 2) >> 2]
  }
  return $1 << 24 >> 24;
 }
 
 function std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $1190($1, $2, 64704) | 0;
 }
 
 function std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__ctype_char___do_narrow_28char_2c_20char_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29($1) ? $1 : $2) | 0;
 }
 
 function std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = $3;
    if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP8[$1 | 0])) {
     $0 = HEAPU8[$1 | 0]
    }
    HEAP8[$4 | 0] = $0;
    $4 = $4 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1 | 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$7 >> 2] = $5;
  return 3;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP32[$4 >> 2] = $2;
  return 3;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $3 - $2;
  $1 = unsigned_20long_20const__20std____2__min_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 12 | 0, $0 + 8 | 0);
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$1 >> 2];
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_2647($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0));
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  $8 = $2;
  while (1) {
   block : {
    if (($3 | 0) == ($8 | 0)) {
     $8 = $3;
     break block;
    }
    if (!HEAP32[$8 >> 2]) {
     break block
    }
    $8 = $8 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5;
  HEAP32[$4 >> 2] = $2;
  block3 : {
   while (1) {
    block7 : {
     block8 : {
      if (!(($2 | 0) == ($3 | 0) | ($5 | 0) == ($6 | 0))) {
       $9 = HEAP32[$1 + 4 >> 2];
       HEAP32[$13 + 8 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$13 + 12 >> 2] = $9;
       $18 = 1;
       $9 = $5;
       $10 = $6 - $5 | 0;
       $14 = 0;
       $15 = __stack_pointer - 16 | 0;
       __stack_pointer = $15;
       HEAP32[$15 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
       $19 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($15 + 8 | 0, $15 + 12 | 0);
       $16 = __stack_pointer - 16 | 0;
       __stack_pointer = $16;
       $11 = HEAP32[$4 >> 2];
       $17 = $8 - $2 >> 2;
       block1 : {
        if (!$11 | !$17) {
         break block1
        }
        $10 = $5 ? $10 : 0;
        while (1) {
         $12 = wcrtomb($10 >>> 0 < 4 ? $16 + 12 | 0 : $9, HEAP32[$11 >> 2]);
         if (($12 | 0) == -1) {
          $14 = -1;
          break block1;
         }
         if ($9) {
          if ($10 >>> 0 <= 3) {
           if ($10 >>> 0 < $12 >>> 0) {
            break block1
           }
           __memcpy($9, $16 + 12 | 0, $12);
          }
          $10 = $10 - $12 | 0;
          $9 = $9 + $12 | 0;
         } else {
          $9 = 0
         }
         if (!HEAP32[$11 >> 2]) {
          $11 = 0;
          break block1;
         }
         $14 = $14 + $12 | 0;
         $11 = $11 + 4 | 0;
         $17 = $17 - 1 | 0;
         if ($17) {
          continue
         }
         break;
        };
       }
       if ($9) {
        HEAP32[$4 >> 2] = $11
       }
       __stack_pointer = $16 + 16 | 0;
       std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($19);
       __stack_pointer = $15 + 16 | 0;
       block6 : {
        block5 : {
         block4 : {
          switch ($14 + 1 | 0) {
          case 0:
           HEAP32[$7 >> 2] = $5;
           while (1) {
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break block5
            }
            $1 = std____2____libcpp_wcrtomb_l_5babi_nn200100_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, HEAP32[$2 >> 2], HEAP32[$0 + 8 >> 2]);
            if (($1 | 0) == -1) {
             break block5
            }
            $5 = $1 + HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $5;
            $2 = $2 + 4 | 0;
            continue;
           };
          case 1:
           break block3;
          default:
           break block4;
          };
         }
         $5 = $14 + HEAP32[$7 >> 2] | 0;
         HEAP32[$7 >> 2] = $5;
         if (($5 | 0) == ($6 | 0)) {
          break block6
         }
         if (($3 | 0) == ($8 | 0)) {
          $2 = HEAP32[$4 >> 2];
          $8 = $3;
          continue;
         }
         $2 = $13 + 4 | 0;
         $8 = std____2____libcpp_wcrtomb_l_5babi_nn200100_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($2, 0, HEAP32[$0 + 8 >> 2]);
         if (($8 | 0) == -1) {
          break block7
         }
         if ($6 - HEAP32[$7 >> 2] >>> 0 < $8 >>> 0) {
          break block3
         }
         while (1) {
          if ($8) {
           $5 = HEAPU8[$2 | 0];
           $9 = HEAP32[$7 >> 2];
           HEAP32[$7 >> 2] = $9 + 1;
           HEAP8[$9 | 0] = $5;
           $8 = $8 - 1 | 0;
           $2 = $2 + 1 | 0;
           continue;
          }
          break;
         };
         $2 = HEAP32[$4 >> 2] + 4 | 0;
         HEAP32[$4 >> 2] = $2;
         $8 = $2;
         while (1) {
          if (($3 | 0) == ($8 | 0)) {
           $8 = $3;
           break block8;
          }
          if (!HEAP32[$8 >> 2]) {
           break block8
          }
          $8 = $8 + 4 | 0;
          continue;
         };
        }
        HEAP32[$4 >> 2] = $2;
        break block7;
       }
       $2 = HEAP32[$4 >> 2];
      }
      $18 = ($2 | 0) != ($3 | 0);
      break block3;
     }
     $5 = HEAP32[$7 >> 2];
     continue;
    }
    break;
   };
   $18 = 2;
  }
  __stack_pointer = $13 + 16 | 0;
  return $18 | 0;
 }
 
 function std____2____libcpp_wcrtomb_l_5babi_nn200100_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $2;
  $2 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($3 + 8 | 0, $3 + 12 | 0);
  $0 = wcrtomb($0, $1);
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($2);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $16 = __stack_pointer - 16 | 0;
  __stack_pointer = $16;
  $8 = $2;
  while (1) {
   block : {
    if (($3 | 0) == ($8 | 0)) {
     $8 = $3;
     break block;
    }
    if (!HEAPU8[$8 | 0]) {
     break block
    }
    $8 = $8 + 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5;
  HEAP32[$4 >> 2] = $2;
  label4 : while (1) {
   block15 : {
    block17 : {
     block1 : {
      if (($2 | 0) == ($3 | 0) | ($5 | 0) == ($6 | 0)) {
       break block1
      }
      $10 = HEAP32[$1 + 4 >> 2];
      HEAP32[$16 + 8 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$16 + 12 >> 2] = $10;
      $17 = __stack_pointer - 16 | 0;
      __stack_pointer = $17;
      HEAP32[$17 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
      $20 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($17 + 8 | 0, $17 + 12 | 0);
      $14 = $8 - $2 | 0;
      $11 = 0;
      $13 = __stack_pointer - 1040 | 0;
      __stack_pointer = $13;
      $10 = HEAP32[$4 >> 2];
      HEAP32[$13 + 12 >> 2] = $10;
      $15 = $5 ? $5 : $13 + 16 | 0;
      $12 = $5 ? $6 - $5 >> 2 : 256;
      block4 : {
       block2 : {
        block3 : {
         if (!(!$10 | !$12)) {
          while (1) {
           $9 = $14 >>> 2 | 0;
           if (!($14 >>> 0 > 131 | $9 >>> 0 >= $12 >>> 0)) {
            $9 = $10;
            break block2;
           }
           $18 = mbsrtowcs($15, $13 + 12 | 0, $9 >>> 0 < $12 >>> 0 ? $9 : $12, $1);
           $9 = HEAP32[$13 + 12 >> 2];
           if (($18 | 0) == -1) {
            $12 = 0;
            $11 = -1;
            break block3;
           }
           $19 = ($13 + 16 | 0) != ($15 | 0) ? $18 : 0;
           $12 = $12 - $19 | 0;
           $15 = ($19 << 2) + $15 | 0;
           $14 = $9 ? ($10 + $14 | 0) - $9 | 0 : 0;
           $11 = $11 + $18 | 0;
           if (!$9) {
            break block3
           }
           $10 = $9;
           if ($12) {
            continue
           }
           break block3;
          }
         }
         $9 = $10;
        }
        if (!$9) {
         break block4
        }
       }
       if (!$12 | !$14) {
        break block4
       }
       $10 = $11;
       while (1) {
        block8 : {
         $11 = mbrtowc($15, $9, $14, $1);
         block7 : {
          if ($11 + 2 >>> 0 <= 2) {
           block6 : {
            switch ($11 + 1 | 0) {
            case 1:
             HEAP32[$13 + 12 >> 2] = 0;
             break block7;
            case 0:
             break block4;
            default:
             break block6;
            };
           }
           HEAP32[$1 >> 2] = 0;
           break block7;
          }
          $9 = HEAP32[$13 + 12 >> 2] + $11 | 0;
          HEAP32[$13 + 12 >> 2] = $9;
          $10 = $10 + 1 | 0;
          $12 = $12 - 1 | 0;
          if ($12) {
           break block8
          }
         }
         $11 = $10;
         break block4;
        }
        $15 = $15 + 4 | 0;
        $14 = $14 - $11 | 0;
        $11 = $10;
        if ($14) {
         continue
        }
        break;
       };
      }
      if ($5) {
       HEAP32[$4 >> 2] = HEAP32[$13 + 12 >> 2]
      }
      __stack_pointer = $13 + 1040 | 0;
      std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($20);
      __stack_pointer = $17 + 16 | 0;
      block14 : {
       block9 : {
        block16 : {
         block13 : {
          if (($11 | 0) == -1) {
           while (1) {
            HEAP32[$7 >> 2] = $5;
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break block1
            }
            $6 = 1;
            block11 : {
             block12 : {
              block10 : {
               $1 = std____2____libcpp_mbrtowc_l_5babi_nn200100_5d_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, $8 - $2 | 0, $16 + 8 | 0, HEAP32[$0 + 8 >> 2]);
               switch ($1 + 2 | 0) {
               case 1:
                break block10;
               case 2:
                break block11;
               case 0:
                break block9;
               default:
                break block12;
               };
              }
              HEAP32[$4 >> 2] = $2;
              break block13;
             }
             $6 = $1;
            }
            $2 = $2 + $6 | 0;
            $5 = HEAP32[$7 >> 2] + 4 | 0;
            continue;
           }
          }
          $5 = HEAP32[$7 >> 2] + ($11 << 2) | 0;
          HEAP32[$7 >> 2] = $5;
          if (($5 | 0) == ($6 | 0)) {
           break block14
          }
          $2 = HEAP32[$4 >> 2];
          if (($3 | 0) == ($8 | 0)) {
           break block15
          }
          if (!std____2____libcpp_mbrtowc_l_5babi_nn200100_5d_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, 1, $1, HEAP32[$0 + 8 >> 2])) {
           break block16
          }
         }
         $0 = 2;
         break block17;
        }
        $5 = HEAP32[$7 >> 2] + 4 | 0;
        HEAP32[$7 >> 2] = $5;
        $2 = HEAP32[$4 >> 2] + 1 | 0;
        HEAP32[$4 >> 2] = $2;
        $8 = $2;
        while (1) {
         if (($3 | 0) == ($8 | 0)) {
          break block15
         }
         if (!HEAPU8[$8 | 0]) {
          continue label4
         }
         $8 = $8 + 1 | 0;
         continue;
        };
       }
       HEAP32[$4 >> 2] = $2;
       $0 = 1;
       break block17;
      }
      $2 = HEAP32[$4 >> 2];
     }
     $0 = ($2 | 0) != ($3 | 0);
    }
    __stack_pointer = $16 + 16 | 0;
    return $0 | 0;
   }
   $8 = $3;
   continue;
  };
 }
 
 function std____2____libcpp_mbrtowc_l_5babi_nn200100_5d_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 12 >> 2] = $4;
  $4 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
  $0 = mbrtowc($0, $1, $2, $3);
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($4);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[$4 >> 2] = $2;
  $5 = $6 + 12 | 0;
  $0 = std____2____libcpp_wcrtomb_l_5babi_nn200100_5d_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, 0, HEAP32[$0 + 8 >> 2]);
  $1 = 2;
  block : {
   if ($0 + 1 >>> 0 < 2) {
    break block
   }
   $2 = $0 - 1 | 0;
   $1 = 1;
   if ($2 >>> 0 > $3 - HEAP32[$4 >> 2] >>> 0) {
    break block
   }
   while (1) {
    if ($2) {
     $0 = HEAPU8[$5 | 0];
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = $0;
     $2 = $2 - 1 | 0;
     $5 = $5 + 1 | 0;
     continue;
    }
    break;
   };
   $1 = 0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $1 | 0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  $2 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
  $3 = mbtowc(0, 0, 4);
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($2);
  __stack_pointer = $1 + 16 | 0;
  if ($3) {
   return -1
  }
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  return (std____2____libcpp_mb_cur_max_l_5babi_nn200100_5d_28__locale_struct__29($0) | 0) == 1 | 0;
 }
 
 function std____2____libcpp_mb_cur_max_l_5babi_nn200100_5d_28__locale_struct__29($0) {
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
  $2 = HEAP32[HEAP32[19643] >> 2];
  std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($0);
  __stack_pointer = $1 + 16 | 0;
  return $2 ? 4 : 1;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  while (1) {
   block : {
    if (($2 | 0) == ($3 | 0) | $4 >>> 0 <= $7 >>> 0) {
     break block
    }
    $6 = 1;
    $5 = __stack_pointer - 16 | 0;
    __stack_pointer = $5;
    HEAP32[$5 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
    $10 = std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
    $8 = mbrtowc(0, $2, $3 - $2 | 0, $1 ? $1 : 82412);
    std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($10);
    __stack_pointer = $5 + 16 | 0;
    block1 : {
     switch ($8 + 2 | 0) {
     default:
      $6 = $8;
      break;
     case 0:
     case 1:
      break block;
     case 2:
      break block1;
     };
    }
    $7 = $7 + 1 | 0;
    $9 = $6 + $9 | 0;
    $2 = $2 + $6 | 0;
    continue;
   }
   break;
  };
  return $9 | 0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  return std____2____libcpp_mb_cur_max_l_5babi_nn200100_5d_28__locale_struct__29($0) | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  block4 : {
   block2 : {
    while (1) {
     if ($2 >>> 0 >= $3 >>> 0) {
      $5 = 0;
      break block4;
     }
     $5 = 2;
     block3 : {
      $1 = HEAPU16[$2 >> 1];
      block1 : {
       if ($1 >>> 0 <= 127) {
        $5 = 1;
        $2 = HEAP32[$0 + 8 >> 2];
        if (($6 - $2 | 0) <= 0) {
         break block4
        }
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1;
        break block1;
       }
       if ($1 >>> 0 <= 2047) {
        $2 = HEAP32[$0 + 8 >> 2];
        if (($6 - $2 | 0) < 2) {
         break block2
        }
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 >>> 6 | 192;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 & 63 | 128;
        break block1;
       }
       if ($1 >>> 0 <= 55295) {
        $2 = HEAP32[$0 + 8 >> 2];
        if (($6 - $2 | 0) < 3) {
         break block2
        }
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 >>> 12 | 224;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 >>> 6 & 63 | 128;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 & 63 | 128;
        break block1;
       }
       if ($1 >>> 0 <= 56319) {
        $5 = 1;
        if (($3 - $2 | 0) < 3) {
         break block4
        }
        $8 = HEAPU16[$2 + 2 >> 1];
        if (($8 & 64512) != 56320) {
         break block3
        }
        $9 = HEAP32[$0 + 8 >> 2];
        if (($6 - $9 | 0) < 4) {
         break block4
        }
        $5 = $1 & 960;
        if (($8 & 1023 | ($1 << 10 & 64512 | $5 << 10)) >>> 0 > 1048575) {
         break block3
        }
        HEAP32[$0 + 12 >> 2] = $2 + 2;
        HEAP32[$0 + 8 >> 2] = $9 + 1;
        $2 = ($5 >>> 6 | 0) + 1 | 0;
        HEAP8[$9 | 0] = $2 >>> 2 | 240;
        $5 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $5 + 1;
        HEAP8[$5 | 0] = $2 << 4 & 48 | $1 >>> 2 & 15 | 128;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $8 >>> 6 & 15 | $1 << 4 & 48 | 128;
        $1 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = $8 & 63 | 128;
        break block1;
       }
       if ($1 >>> 0 < 57344) {
        break block4
       }
       $2 = HEAP32[$0 + 8 >> 2];
       if (($6 - $2 | 0) < 3) {
        break block2
       }
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 >>> 12 | 224;
       $2 = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 >>> 6 & 191;
       $2 = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 & 63 | 128;
      }
      $2 = HEAP32[$0 + 12 >> 2] + 2 | 0;
      HEAP32[$0 + 12 >> 2] = $2;
      continue;
     }
     break;
    };
    $5 = 2;
    break block4;
   }
   $5 = 1;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  block2 : {
   block1 : {
    block3 : {
     while (1) {
      if (!($2 >>> 0 >= $3 >>> 0 | $5 >>> 0 >= $6 >>> 0)) {
       $1 = 2;
       $12 = $2;
       $9 = HEAPU8[$2 | 0];
       block : {
        if ($9 << 24 >> 24 >= 0) {
         HEAP16[$5 >> 1] = $9;
         $1 = 1;
         break block;
        }
        if ($9 >>> 0 < 194) {
         break block1
        }
        if ($9 >>> 0 <= 223) {
         $8 = 1;
         if (($3 - $2 | 0) < 2) {
          break block2
         }
         $8 = HEAPU8[$2 + 1 | 0];
         if (($8 & 192) != 128) {
          break block3
         }
         HEAP16[$5 >> 1] = $8 & 63 | $9 << 6 & 1984;
         $1 = 2;
         break block;
        }
        if ($9 >>> 0 <= 239) {
         $1 = 1;
         $10 = $3 - $2 | 0;
         if (($10 | 0) < 2) {
          break block3
         }
         $8 = HEAP8[$2 + 1 | 0];
         block5 : {
          block4 : {
           if (($9 | 0) != 237) {
            if (($9 | 0) != 224) {
             break block4
            }
            if (($8 & -32) != -96) {
             break block1
            }
            break block5;
           }
           if (($8 | 0) >= -96) {
            break block1
           }
           break block5;
          }
          if (($8 | 0) > -65) {
           break block1
          }
         }
         if (($10 | 0) == 2) {
          break block3
         }
         $1 = HEAPU8[$2 + 2 | 0];
         if (($1 & 192) != 128) {
          break block1
         }
         HEAP16[$5 >> 1] = $1 & 63 | (($8 & 63) << 6 | $9 << 12);
         $1 = 3;
         break block;
        }
        if ($9 >>> 0 > 244) {
         break block1
        }
        $1 = 1;
        $10 = $3 - $2 | 0;
        if (($10 | 0) < 2) {
         break block3
        }
        $11 = HEAPU8[$2 + 1 | 0];
        $8 = $11 << 24 >> 24;
        block9 : {
         block7 : {
          switch ($9 - 240 | 0) {
          case 0:
           if (($8 + 112 & 255) >>> 0 >= 48) {
            break block1
           }
           break block9;
          case 4:
           if (($8 | 0) >= -112) {
            break block1
           }
           break block9;
          default:
           break block7;
          };
         }
         if (($8 | 0) > -65) {
          break block1
         }
        }
        if (($10 | 0) == 2) {
         break block3
        }
        $8 = HEAPU8[$2 + 2 | 0];
        if (($8 & 192) != 128) {
         break block1
        }
        if (($10 | 0) == 3) {
         break block3
        }
        $10 = HEAPU8[$2 + 3 | 0];
        if (($10 & 192) != 128) {
         break block1
        }
        if (($6 - $5 | 0) < 3) {
         break block3
        }
        $1 = 2;
        $10 = $10 & 63;
        $2 = $8 << 6;
        $9 = $9 & 7;
        if (($10 | ($2 & 4032 | ($11 << 12 & 258048 | $9 << 18))) >>> 0 > 1114111) {
         break block3
        }
        HEAP16[$5 + 2 >> 1] = $10 | $2 & 960 | 56320;
        $1 = $11 << 2;
        HEAP16[$5 >> 1] = ($8 >>> 4 & 3 | ($1 & 192 | $9 << 8 | $1 & 60)) + 16320 | 55296;
        $5 = $5 + 2 | 0;
        $1 = 4;
       }
       $2 = $12 + $1 | 0;
       HEAP32[$0 + 12 >> 2] = $2;
       $5 = $5 + 2 | 0;
       HEAP32[$0 + 8 >> 2] = $5;
       continue;
      }
      break;
     };
     $1 = $2 >>> 0 < $3 >>> 0;
    }
    $8 = $1;
    break block2;
   }
   $8 = 2;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = $2;
  while (1) {
   block : {
    if ($4 >>> 0 <= $6 >>> 0 | $0 >>> 0 >= $3 >>> 0) {
     break block
    }
    $1 = HEAPU8[$0 | 0];
    $5 = $0 + 1 | 0;
    block1 : {
     if ($1 << 24 >> 24 >= 0) {
      break block1
     }
     if ($1 >>> 0 < 194) {
      break block
     }
     if ($1 >>> 0 <= 223) {
      if ((HEAPU8[$0 + 1 | 0] & 192) != 128 | ($3 - $0 | 0) < 2) {
       break block
      }
      $5 = $0 + 2 | 0;
      break block1;
     }
     if ($1 >>> 0 <= 239) {
      if (($3 - $0 | 0) < 3) {
       break block
      }
      $7 = HEAPU8[$0 + 2 | 0];
      $5 = HEAP8[$0 + 1 | 0];
      block3 : {
       block2 : {
        if (($1 | 0) != 237) {
         if (($1 | 0) != 224) {
          break block2
         }
         if (($5 & -32) == -96) {
          break block3
         }
         break block;
        }
        if (($5 | 0) >= -96) {
         break block
        }
        break block3;
       }
       if (($5 | 0) > -65) {
        break block
       }
      }
      if (($7 & 192) != 128) {
       break block
      }
      $5 = $0 + 3 | 0;
      break block1;
     }
     if (($3 - $0 | 0) < 4 | $1 >>> 0 > 244 | $4 - $6 >>> 0 < 2) {
      break block
     }
     $7 = HEAPU8[$0 + 3 | 0];
     $8 = HEAPU8[$0 + 2 | 0];
     $5 = HEAP8[$0 + 1 | 0];
     block7 : {
      block5 : {
       switch ($1 - 240 | 0) {
       case 0:
        if (($5 + 112 & 255) >>> 0 >= 48) {
         break block
        }
        break block7;
       case 4:
        if (($5 | 0) >= -112) {
         break block
        }
        break block7;
       default:
        break block5;
       };
      }
      if (($5 | 0) > -65) {
       break block
      }
     }
     if (($8 & 192) != 128 | ($7 & 192) != 128 | ($7 & 63 | ($8 << 6 & 4032 | ($1 << 18 & 1835008 | ($5 & 63) << 12))) >>> 0 > 1114111) {
      break block
     }
     $6 = $6 + 1 | 0;
     $5 = $0 + 4 | 0;
    }
    $0 = $5;
    $6 = $6 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 - $2 | 0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
  $0 = $0 | 0;
  return 4;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  block3 : {
   block2 : {
    while (1) {
     block : {
      if ($2 >>> 0 >= $3 >>> 0) {
       $5 = 0;
       break block;
      }
      $5 = 2;
      $1 = HEAP32[$2 >> 2];
      if ($1 >>> 0 > 1114111 | ($1 & -2048) == 55296) {
       break block
      }
      block1 : {
       if ($1 >>> 0 <= 127) {
        $5 = 1;
        $2 = HEAP32[$0 + 8 >> 2];
        if (($6 - $2 | 0) <= 0) {
         break block
        }
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1;
        break block1;
       }
       if ($1 >>> 0 <= 2047) {
        $2 = HEAP32[$0 + 8 >> 2];
        if (($6 - $2 | 0) < 2) {
         break block2
        }
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 >>> 6 | 192;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 & 63 | 128;
        break block1;
       }
       $2 = HEAP32[$0 + 8 >> 2];
       $5 = $6 - $2 | 0;
       if ($1 >>> 0 <= 65535) {
        if (($5 | 0) < 3) {
         break block2
        }
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 >>> 12 | 224;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 >>> 6 & 63 | 128;
        $2 = HEAP32[$0 + 8 >> 2];
        HEAP32[$0 + 8 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $1 & 63 | 128;
        break block1;
       }
       if (($5 | 0) < 4) {
        break block2
       }
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 >>> 18 | 240;
       $2 = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 >>> 12 & 63 | 128;
       $2 = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 >>> 6 & 63 | 128;
       $2 = HEAP32[$0 + 8 >> 2];
       HEAP32[$0 + 8 >> 2] = $2 + 1;
       HEAP8[$2 | 0] = $1 & 63 | 128;
      }
      $2 = HEAP32[$0 + 12 >> 2] + 4 | 0;
      HEAP32[$0 + 12 >> 2] = $2;
      continue;
     }
     break;
    };
    break block3;
   }
   $5 = 1;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  block2 : {
   block : {
    while (1) {
     if (!($2 >>> 0 >= $3 >>> 0 | $5 >>> 0 >= $6 >>> 0)) {
      $8 = HEAP8[$2 | 0];
      $1 = $8 & 255;
      block1 : {
       if (($8 | 0) >= 0) {
        if ($1 >>> 0 > 1114111) {
         break block
        }
        $8 = 1;
        break block1;
       }
       if ($8 >>> 0 < 4294967234) {
        break block
       }
       if ($8 >>> 0 <= 4294967263) {
        $8 = 1;
        if (($3 - $2 | 0) < 2) {
         break block2
        }
        $8 = 2;
        $9 = HEAPU8[$2 + 1 | 0];
        if (($9 & 192) != 128) {
         break block2
        }
        $1 = $9 & 63 | $1 << 6 & 1984;
        $8 = 2;
        break block1;
       }
       if ($8 >>> 0 <= 4294967279) {
        $8 = 1;
        $10 = $3 - $2 | 0;
        if (($10 | 0) < 2) {
         break block2
        }
        $9 = HEAP8[$2 + 1 | 0];
        block5 : {
         block4 : {
          if (($1 | 0) != 237) {
           if (($1 | 0) != 224) {
            break block4
           }
           if (($9 & -32) == -96) {
            break block5
           }
           break block;
          }
          if (($9 | 0) < -96) {
           break block5
          }
          break block;
         }
         if (($9 | 0) > -65) {
          break block
         }
        }
        if (($10 | 0) == 2) {
         break block2
        }
        $8 = HEAPU8[$2 + 2 | 0];
        if (($8 & 192) != 128) {
         break block
        }
        $1 = $8 & 63 | ($1 << 12 & 61440 | ($9 & 63) << 6);
        $8 = 3;
        break block1;
       }
       if ($8 >>> 0 > 4294967284) {
        break block
       }
       $8 = 1;
       $10 = $3 - $2 | 0;
       if (($10 | 0) < 2) {
        break block2
       }
       $9 = HEAP8[$2 + 1 | 0];
       block9 : {
        block7 : {
         switch ($1 - 240 | 0) {
         case 0:
          if (($9 + 112 & 255) >>> 0 >= 48) {
           break block
          }
          break block9;
         case 4:
          if (($9 | 0) >= -112) {
           break block
          }
          break block9;
         default:
          break block7;
         };
        }
        if (($9 | 0) > -65) {
         break block
        }
       }
       if (($10 | 0) == 2) {
        break block2
       }
       $11 = HEAPU8[$2 + 2 | 0];
       if (($11 & 192) != 128) {
        break block
       }
       if (($10 | 0) == 3) {
        break block2
       }
       $10 = HEAPU8[$2 + 3 | 0];
       if (($10 & 192) != 128) {
        break block
       }
       $8 = 2;
       $1 = $10 & 63 | ($11 << 6 & 4032 | ($1 << 18 & 1835008 | ($9 & 63) << 12));
       if ($1 >>> 0 > 1114111) {
        break block2
       }
       $8 = 4;
      }
      HEAP32[$5 >> 2] = $1;
      $2 = $2 + $8 | 0;
      HEAP32[$0 + 12 >> 2] = $2;
      $5 = $5 + 4 | 0;
      HEAP32[$0 + 8 >> 2] = $5;
      continue;
     }
     break;
    };
    $8 = $2 >>> 0 < $3 >>> 0;
    break block2;
   }
   $8 = 2;
  }
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  __stack_pointer = $0 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = $2;
  while (1) {
   block : {
    if ($4 >>> 0 <= $7 >>> 0 | $0 >>> 0 >= $3 >>> 0) {
     break block
    }
    $1 = HEAP8[$0 | 0];
    $6 = $1 & 255;
    $5 = 1;
    block1 : {
     if (($1 | 0) >= 0) {
      break block1
     }
     if ($1 >>> 0 < 4294967234) {
      break block
     }
     if ($1 >>> 0 <= 4294967263) {
      if ((HEAPU8[$0 + 1 | 0] & 192) != 128 | ($3 - $0 | 0) < 2) {
       break block
      }
      $5 = 2;
      break block1;
     }
     if ($1 >>> 0 <= 4294967279) {
      if (($3 - $0 | 0) < 3) {
       break block
      }
      $5 = HEAPU8[$0 + 2 | 0];
      $1 = HEAP8[$0 + 1 | 0];
      block3 : {
       block2 : {
        if (($6 | 0) != 237) {
         if (($6 | 0) != 224) {
          break block2
         }
         if (($1 & -32) == -96) {
          break block3
         }
         break block;
        }
        if (($1 | 0) >= -96) {
         break block
        }
        break block3;
       }
       if (($1 | 0) > -65) {
        break block
       }
      }
      if (($5 & 192) != 128) {
       break block
      }
      $5 = 3;
      break block1;
     }
     if (($3 - $0 | 0) < 4 | $1 >>> 0 > 4294967284) {
      break block
     }
     $5 = HEAPU8[$0 + 3 | 0];
     $8 = HEAPU8[$0 + 2 | 0];
     $1 = HEAP8[$0 + 1 | 0];
     block7 : {
      block5 : {
       switch ($6 - 240 | 0) {
       case 0:
        if (($1 + 112 & 255) >>> 0 >= 48) {
         break block
        }
        break block7;
       case 4:
        if (($1 | 0) >= -112) {
         break block
        }
        break block7;
       default:
        break block5;
       };
      }
      if (($1 | 0) > -65) {
       break block
      }
     }
     if (($8 & 192) != 128 | ($5 & 192) != 128 | ($5 & 63 | ($8 << 6 & 4032 | ($6 << 18 & 1835008 | ($1 & 63) << 12))) >>> 0 > 1114111) {
      break block
     }
     $5 = 4;
    }
    $7 = $7 + 1 | 0;
    $0 = $0 + $5 | 0;
    continue;
   }
   break;
  };
  return $0 - $2 | 0;
 }
 
 function std____2__numpunct_char____numpunct_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 67656;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2__numpunct_char____numpunct_28_29_2708($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__numpunct_char____numpunct_28_29($0));
 }
 
 function std____2__numpunct_wchar_t____numpunct_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 67696;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2__numpunct_wchar_t____numpunct_28_29_2710($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__numpunct_wchar_t____numpunct_28_29($0));
 }
 
 function std____2__numpunct_char___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 8 | 0];
 }
 
 function std____2__numpunct_char___do_thousands_sep_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 9 | 0];
 }
 
 function std____2__numpunct_char___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1 + 12 | 0);
 }
 
 function std____2__numpunct_wchar_t___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29($0, $1 + 16 | 0);
 }
 
 function std____2__numpunct_char___do_truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_0__28char_20const__29($0, 28276);
 }
 
 function std____2__numpunct_wchar_t___do_truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29($0, 67728);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block1 : {
   $2 = std____2____constexpr_wcslen_5babi_nn200100_5d_28wchar_t_20const__29($1);
   $3 = __stack_pointer - 16 | 0;
   __stack_pointer = $3;
   if ($2 >>> 0 <= 1073741815) {
    block : {
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($2)) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $2);
      $4 = $0;
      break block;
     }
     std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29($2) + 1 | 0);
     $4 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 >> 2] = $4;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
     HEAP32[$0 + 4 >> 2] = $2;
    }
    wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($4, $1, $2);
    HEAP32[$3 + 4 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $4 | 0, $3 + 4 | 0);
    __stack_pointer = $3 + 16 | 0;
    break block1;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
   wasm2js_trap();
  }
 }
 
 function std____2__numpunct_char___do_falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_0__28char_20const__29($0, 28290);
 }
 
 function std____2__numpunct_wchar_t___do_falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29($0, 67748);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   $3 = strlen($1);
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_nn200100_5d_28_29_20const($0);
   $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
   if ($3 >>> 0 <= $2 >>> 0) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
    char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $1, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_5babi_nn200100_5d_28char__2c_20unsigned_20long_29($0, $2, $3);
    break block;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $2, $3 - $2 | 0, $4, 0, $4, $3, $1);
  }
 }
 
 function std____2____time_get_c_storage_char_____weeks_28_29_20const($0) {
  $0 = $0 | 0;
  if (HEAPU8[82844]) {
   return HEAP32[20710]
  }
  if (!HEAPU8[83160]) {
   HEAP8[83160] = 1
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(82992, 24458);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83004, 24465);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83016, 24431);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83028, 24439);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83040, 24422);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83052, 24472);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83064, 24449);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83076, 27417);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83088, 27546);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83100, 28281);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83112, 29686);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83124, 24905);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83136, 27865);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83148, 26134);
  HEAP8[82844] = 1;
  HEAP32[20710] = 82992;
  return 82992;
 }
 
 function __cxx_global_array_dtor_59($0) {
  $0 = $0 | 0;
  $0 = 83160;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 - 12 | 0);
   if (($0 | 0) != 82992) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const($0) {
  $0 = $0 | 0;
  if (HEAPU8[82852]) {
   return HEAP32[20712]
  }
  if (!HEAPU8[83336]) {
   HEAP8[83336] = 1
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83168, 72220);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83180, 72248);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83192, 72276);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83204, 72308);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83216, 72348);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83228, 72384);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83240, 72412);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83252, 72448);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83264, 72464);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83276, 72480);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83288, 72496);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83300, 72512);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83312, 72528);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83324, 72544);
  HEAP8[82852] = 1;
  HEAP32[20712] = 83168;
  return 83168;
 }
 
 function __cxx_global_array_dtor_74($0) {
  $0 = $0 | 0;
  $0 = 83336;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0 - 12 | 0);
   if (($0 | 0) != 83168) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_char_____months_28_29_20const($0) {
  $0 = $0 | 0;
  if (HEAPU8[82860]) {
   return HEAP32[20714]
  }
  if (!HEAPU8[83632]) {
   HEAP8[83632] = 1
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83344, 24409);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83356, 24400);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83368, 28058);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83380, 27691);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83392, 24479);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83404, 28343);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83416, 24417);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83428, 25586);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83440, 27182);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83452, 27165);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83464, 27173);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83476, 27192);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83488, 27635);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83500, 30962);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83512, 27231);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83524, 27029);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83536, 24479);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83548, 27421);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83560, 27639);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83572, 28064);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83584, 27392);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83596, 26098);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83608, 24901);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83620, 30885);
  HEAP8[82860] = 1;
  HEAP32[20714] = 83344;
  return 83344;
 }
 
 function __cxx_global_array_dtor_89($0) {
  $0 = $0 | 0;
  $0 = 83632;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 - 12 | 0);
   if (($0 | 0) != 83344) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_wchar_t_____months_28_29_20const($0) {
  $0 = $0 | 0;
  if (HEAPU8[82868]) {
   return HEAP32[20716]
  }
  if (!HEAPU8[83936]) {
   HEAP8[83936] = 1
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83648, 72560);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83660, 72592);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83672, 72628);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83684, 72652);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83696, 72676);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83708, 72692);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83720, 72712);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83732, 72732);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83744, 72760);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83756, 72800);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83768, 72832);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83780, 72868);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83792, 72904);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83804, 72920);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83816, 72936);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83828, 72952);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83840, 72676);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83852, 72968);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83864, 72984);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83876, 73e3);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83888, 73016);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83900, 73032);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83912, 73048);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83924, 73064);
  HEAP8[82868] = 1;
  HEAP32[20716] = 83648;
  return 83648;
 }
 
 function __cxx_global_array_dtor_113($0) {
  $0 = $0 | 0;
  $0 = 83936;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0 - 12 | 0);
   if (($0 | 0) != 83648) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_char_____am_pm_28_29_20const($0) {
  $0 = $0 | 0;
  if (HEAPU8[82876]) {
   return HEAP32[20718]
  }
  if (!HEAPU8[83976]) {
   HEAP8[83976] = 1
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83952, 31533);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____operator__5babi_nn200100_5d_28char_20const__29(83964, 31522);
  HEAP8[82876] = 1;
  HEAP32[20718] = 83952;
  return 83952;
 }
 
 function __cxx_global_array_dtor_137($0) {
  $0 = $0 | 0;
  $0 = 83976;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0 - 12 | 0);
   if (($0 | 0) != 83952) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const($0) {
  $0 = $0 | 0;
  if (HEAPU8[82884]) {
   return HEAP32[20720]
  }
  if (!HEAPU8[84008]) {
   HEAP8[84008] = 1
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83984, 73080);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29(83996, 73092);
  HEAP8[82884] = 1;
  HEAP32[20720] = 83984;
  return 83984;
 }
 
 function __cxx_global_array_dtor_140($0) {
  $0 = $0 | 0;
  $0 = 84008;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0 - 12 | 0);
   if (($0 | 0) != 83984) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_char_____x_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82885]) {
   HEAP8[82885] = 1
  }
  return 74936;
 }
 
 function __cxx_global_array_dtor_2746($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(74936);
 }
 
 function std____2____time_get_c_storage_wchar_t_____x_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82900]) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29(82888, 67772);
   HEAP8[82900] = 1;
  }
  return 82888;
 }
 
 function __cxx_global_array_dtor_31($0) {
  $0 = $0 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(82888);
 }
 
 function std____2____time_get_c_storage_char_____X_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82901]) {
   HEAP8[82901] = 1
  }
  return 74948;
 }
 
 function __cxx_global_array_dtor_32($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(74948);
 }
 
 function std____2____time_get_c_storage_wchar_t_____X_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82916]) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29(82904, 67808);
   HEAP8[82916] = 1;
  }
  return 82904;
 }
 
 function __cxx_global_array_dtor_34($0) {
  $0 = $0 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(82904);
 }
 
 function std____2____time_get_c_storage_char_____c_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82932]) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_0__28char_20const__29(82920, 31046);
   HEAP8[82932] = 1;
  }
  return 82920;
 }
 
 function __cxx_global_array_dtor_36($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(82920);
 }
 
 function std____2____time_get_c_storage_wchar_t_____c_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82948]) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29(82936, 67844);
   HEAP8[82948] = 1;
  }
  return 82936;
 }
 
 function __cxx_global_array_dtor_38($0) {
  $0 = $0 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(82936);
 }
 
 function std____2____time_get_c_storage_char_____r_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82964]) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_nn200100_5d_0__28char_20const__29(82952, 27396);
   HEAP8[82964] = 1;
  }
  return 82952;
 }
 
 function __cxx_global_array_dtor_40($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29(82952);
 }
 
 function std____2____time_get_c_storage_wchar_t_____r_28_29_20const($0) {
  $0 = $0 | 0;
  if (!HEAPU8[82980]) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____basic_string_5babi_nn200100_5d_0__28wchar_t_20const__29(82968, 67928);
   HEAP8[82980] = 1;
  }
  return 82968;
 }
 
 function __cxx_global_array_dtor_42($0) {
  $0 = $0 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29(82968);
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29($0) {
  $0 = $0 | 0;
  emscripten_builtin_free(std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_2775($0));
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_2775($0) {
  $0 = $0 | 0;
  if (HEAP32[$0 + 8 >> 2] != (std____2____cloc_28_29() | 0)) {
   freelocale(HEAP32[$0 + 8 >> 2])
  }
  return $0 | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($0) {
  return $0 >>> 0 < 2;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 2) {
   $1 = $0 + 2 & -2;
   $0 = $1 - 1 | 0;
   $0 = ($0 | 0) == 2 ? $1 : $0;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = std____2__allocator_wchar_t___allocate_5babi_nn200100_5d_28unsigned_20long_29($1);
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
 }
 
 function std____2__allocator_wchar_t___allocate_5babi_nn200100_5d_28unsigned_20long_29($0) {
  if ($0 >>> 0 > 1073741823) {
   std____2____libcpp_verbose_abort_28char_20const__2c_20____29(28913, 0);
   wasm2js_trap();
  }
  $0 = $0 << 2;
  block : {
   if (std____2____is_overaligned_for_new_5babi_nn200100_5d_28unsigned_20long_29(4)) {
    $0 = operator_20new_28unsigned_20long_2c_20std__align_val_t_29($0, 4);
    break block;
   }
   $0 = operator_20new_28unsigned_20long_29($0);
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______null_terminate_at_5babi_nn200100_5d_28char__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($0, $2);
  HEAP8[$3 + 15 | 0] = 0;
  std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($1 + $2 | 0, $3 + 15 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2____scope_guard_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__20std____2____make_scope_guard_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size_29($0, $1) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($0, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__operator_28_29_5babi_nn200100_5d_28_29($0) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const(HEAP32[$0 >> 2]);
 }
 
 function void_20std____2____libcpp_deallocate_5babi_nn200100_5d_wchar_t__28std____2____type_identity_wchar_t___type__2c_20std____2____element_count_2c_20unsigned_20long_29($0) {
  if (std____2____is_overaligned_for_new_5babi_nn200100_5d_28unsigned_20long_29(4)) {
   emscripten_builtin_free($0);
   return;
  }
  emscripten_builtin_free($0);
 }
 
 function std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_nn200100_5d_28char__2c_20char__29($0, $1) {
  return ($1 - $0 | 0) + $0 | 0;
 }
 
 function auto_20std____2____unwrap_range_5babi_nn200100_5d_char__2c_20char___28char__2c_20char__29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $2;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $3 + 12 | 0, $3 + 8 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $1, $2) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 }
 
 function bool_20std____2____is_pointer_in_range_5babi_nn200100_5d_char_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = 0;
  $0 = $3 + 4 | 0;
  if (!bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_unsigned_20int_2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($0, $3 + 12 | 0)) {
   $1 = bool_20std____2____less_void_2c_20void___operator_28_29_5babi_nn200100_5d_unsigned_20int_2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($0, $3 + 8 | 0)
  }
  __stack_pointer = $3 + 16 | 0;
  return $1;
 }
 
 function std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn200100_5d_28std____2____wrap_iter_char___20const__29($1 + 12 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function std____2____to_address_helper_std____2____wrap_iter_char___2c_20void_____call_5babi_nn200100_5d_28std____2____wrap_iter_char___20const__29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 >> 2];
  __stack_pointer = $1 + 16 | 0;
  return HEAP32[$1 + 12 >> 2];
 }
 
 function std____2____unwrap_range_impl_std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const_______unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___29($0, $1, $2) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($1)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____unwrap_iter_impl_std____2____wrap_iter_char___2c_20true_____unwrap_5babi_nn200100_5d_28std____2____wrap_iter_char___29($2)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  std____2__pair_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____pair_5babi_nn200100_5d_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_200__28char____2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____29($0, $3 + 12 | 0, $3 + 8 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____max_size_5babi_nn200100_5d_28_29_20const() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  HEAP32[$0 + 12 >> 2] = 1073741823;
  HEAP32[$0 + 8 >> 2] = 2147483647;
  $1 = unsigned_20long_20const__20std____2__min_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 12 | 0, $0 + 8 | 0);
  __stack_pointer = $0 + 16 | 0;
  return HEAP32[$1 >> 2];
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______throw_length_error_5babi_nn200100_5d_28_29() {
  std____2____throw_length_error_5babi_nn200100_5d_28char_20const__29(27033);
  wasm2js_trap();
 }
 
 function std____2__allocation_result_std____2__locale__facet___2c_20unsigned_20long__20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2030ul____allocate_at_least_5babi_nn200100_5d_std____2____sso_allocator_std____2__locale__facet__2c_2030ul___28std____2____sso_allocator_std____2__locale__facet__2c_2030ul___2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  block1 : {
   if (!(HEAP8[$1 + 120 | 0] & 1 | $2 >>> 0 > 30)) {
    HEAP8[$1 + 120 | 0] = 1;
    break block1;
   }
   $1 = std____2__allocator_wchar_t___allocate_5babi_nn200100_5d_28unsigned_20long_29($2);
  }
  __stack_pointer = $3 + 16 | 0;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
 }
 
 function std____2__locale__facet___20std____2____construct_at_5babi_nn200100_5d_std____2__locale__facet__2c_20std____2__locale__facet____28std____2__locale__facet___29($0) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____capacity_5babi_nn200100_5d_28_29_20const($0) {
  return HEAP32[$0 + 8 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function std____2____sso_allocator_std____2__locale__facet__2c_2030ul___deallocate_5babi_nn200100_5d_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  block : {
   if (($0 | 0) == ($1 | 0)) {
    HEAP8[$0 + 120 | 0] = 0;
    break block;
   }
   void_20std____2____libcpp_deallocate_5babi_nn200100_5d_wchar_t__28std____2____type_identity_wchar_t___type__2c_20std____2____element_count_2c_20unsigned_20long_29($1);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2____locale_guard____locale_guard_5babi_nn200100_5d_28__locale_struct___29($0, $1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = __uselocale(HEAP32[$1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return $0;
 }
 
 function std____2____locale_guard_____locale_guard_5babi_nn200100_5d_28_29($0) {
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   __uselocale($0)
  }
 }
 
 function std____2____constexpr_wcslen_5babi_nn200100_5d_28wchar_t_20const__29($0) {
  var $1 = 0, $2 = 0;
  $2 = $0;
  while (1) {
   $1 = $2;
   $2 = $1 + 4 | 0;
   if (HEAP32[$1 >> 2]) {
    continue
   }
   break;
  };
  return $1 - $0 >> 2;
 }
 
 function std____2____time_put____time_put_5babi_nn200100_5d_28_29($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____cloc_28_29()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____difference_type_20std____2____distance_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  return ($1 - $0 | 0) / 12 | 0;
 }
 
 function std____2____shared_count_____shared_count_28_29_3037($0) {
  $0 = $0 | 0;
  wasm2js_trap();
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  var $1 = 0, $2 = 0;
  $2 = $0 >>> 0 <= 1 ? 1 : $0;
  while (1) {
   block : {
    $0 = emscripten_builtin_malloc($2);
    if ($0) {
     break block
    }
    $1 = HEAP32[21079];
    if (!$1) {
     break block
    }
    FUNCTION_TABLE[$1 | 0]();
    continue;
   }
   break;
  };
  if (!$0) {
   __throw_bad_alloc_shim_28_29()
  }
  return $0;
 }
 
 function __throw_bad_alloc_shim_28_29() {
  std____throw_bad_alloc_28_29();
  wasm2js_trap();
 }
 
 function operator_20new_28unsigned_20long_2c_20std__align_val_t_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $1 >>> 0 <= 4 ? 4 : $1;
  $7 = $0 >>> 0 <= 1 ? 1 : $0;
  while (1) {
   block8 : {
    $1 = 0;
    $6 = __stack_pointer - 16 | 0;
    __stack_pointer = $6;
    $0 = ($4 + $7 | 0) - 1 & 0 - $4;
    $2 = $0 >>> 0 < $7 >>> 0 ? $7 : $0;
    if (!(($2 >>> 0) % ($4 >>> 0) | $4 & 3)) {
     block3 : {
      block1 : {
       if (($4 | 0) == 8) {
        $0 = emscripten_builtin_malloc($2);
        break block1;
       }
       $1 = 28;
       if ($4 & 3 | $4 >>> 0 < 4) {
        break block3
       }
       $0 = $4 >>> 2 | 0;
       if ($0 - 1 & $0) {
        break block3
       }
       $1 = 48;
       if ($2 >>> 0 > -64 - $4 >>> 0) {
        break block3
       }
       $1 = 16;
       $0 = $4 >>> 0 <= 16 ? 16 : $4;
       $3 = $0 >>> 0 <= 16 ? 16 : $0;
       block4 : {
        if (!($3 - 1 & $3)) {
         $0 = $3;
         break block4;
        }
        while (1) {
         $0 = $1;
         $1 = $0 << 1;
         if ($0 >>> 0 < $3 >>> 0) {
          continue
         }
         break;
        };
       }
       block5 : {
        if ($2 >>> 0 >= -64 - $0 >>> 0) {
         HEAP32[19563] = 48;
         $1 = 0;
         break block5;
        }
        $3 = $2 >>> 0 < 11 ? 16 : $2 + 11 & -8;
        $2 = emscripten_builtin_malloc(($3 + $0 | 0) + 12 | 0);
        $1 = 0;
        if (!$2) {
         break block5
        }
        $1 = $2 - 8 | 0;
        block6 : {
         if (!($2 & $0 - 1)) {
          $0 = $1;
          break block6;
         }
         $8 = $2 - 4 | 0;
         $9 = HEAP32[$8 >> 2];
         $5 = $0;
         $0 = (($0 + $2 | 0) - 1 & 0 - $0) - 8 | 0;
         $0 = ($0 - $1 >>> 0 <= 15 ? $5 : 0) + $0 | 0;
         $2 = $0 - $1 | 0;
         $5 = ($9 & -8) - $2 | 0;
         if (!($9 & 3)) {
          $1 = HEAP32[$1 >> 2];
          HEAP32[$0 + 4 >> 2] = $5;
          HEAP32[$0 >> 2] = $1 + $2;
          break block6;
         }
         HEAP32[$0 + 4 >> 2] = $5 | HEAP32[$0 + 4 >> 2] & 1 | 2;
         $5 = $0 + $5 | 0;
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
         HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & 1 | $2 | 2;
         $5 = $1 + $2 | 0;
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
         dispose_chunk($1, $2);
        }
        $1 = HEAP32[$0 + 4 >> 2];
        block7 : {
         if (!($1 & 3)) {
          break block7
         }
         $2 = $1 & -8;
         if ($2 >>> 0 <= $3 + 16 >>> 0) {
          break block7
         }
         HEAP32[$0 + 4 >> 2] = $1 & 1 | $3 | 2;
         $1 = $0 + $3 | 0;
         $3 = $2 - $3 | 0;
         HEAP32[$1 + 4 >> 2] = $3 | 3;
         $2 = $0 + $2 | 0;
         HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
         dispose_chunk($1, $3);
        }
        $1 = $0 + 8 | 0;
       }
       $0 = $1;
      }
      $1 = 48;
      if (!$0) {
       break block3
      }
      HEAP32[$6 + 12 >> 2] = $0;
      $1 = 0;
     }
     $1 = $1 ? 0 : HEAP32[$6 + 12 >> 2];
    }
    __stack_pointer = $6 + 16 | 0;
    if ($1) {
     break block8
    }
    $0 = HEAP32[21079];
    if (!$0) {
     break block8
    }
    FUNCTION_TABLE[$0 | 0]();
    continue;
   }
   break;
  };
  if (!$1) {
   __throw_bad_alloc_shim_28_29()
  }
  return $1;
 }
 
 function std____throw_bad_alloc_28_29() {
  std____2____libcpp_verbose_abort_28char_20const__2c_20____29(28969, 0);
  wasm2js_trap();
 }
 
 function std__exception__exception_5babi_nn200100_5d_28_29($0) {
  HEAP32[$0 >> 2] = 74164;
  return $0;
 }
 
 function std__logic_error__logic_error_28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = std__exception__exception_5babi_nn200100_5d_28_29($0);
  HEAP32[$3 >> 2] = 74276;
  $0 = strlen($1);
  $2 = operator_20new_28unsigned_20long_29($0 + 13 | 0);
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 >> 2] = $0;
  $2 = $2 + 12 | 0;
  $0 = $0 + 1 | 0;
  if ($0) {
   wasm2js_memory_copy($2, $1, $0)
  }
  HEAP32[$3 + 4 >> 2] = $2;
  return $3;
 }
 
 function std____2____throw_runtime_error_28char_20const__29($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 >> 2] = $0;
  std____2____libcpp_verbose_abort_28char_20const__2c_20____29(33891, $1);
  wasm2js_trap();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = 2147483639;
  if (($1 ^ -1) + 2147483639 >>> 0 >= $2 >>> 0) {
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
   if ($1 >>> 0 < 1073741811) {
    HEAP32[$8 + 28 >> 2] = $1 << 1;
    HEAP32[$8 + 16 >> 2] = $1 + $2;
    $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 16 | 0, $8 + 28 | 0) >> 2]) + 1 | 0;
   }
   std____2____scope_guard_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__20std____2____make_scope_guard_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size_29($8 + 28 | 0, HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($8 + 24 | 0, $0) >> 2]);
   std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($8 + 16 | 0, $9);
   $2 = HEAP32[$8 + 16 >> 2];
   if ($4) {
    char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2, $10, $4)
   }
   if ($6) {
    char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($2 + $4 | 0, $7, $6)
   }
   $9 = $4 + $5 | 0;
   $7 = $3 - $9 | 0;
   if (($3 | 0) != ($9 | 0)) {
    char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29(($2 + $4 | 0) + $6 | 0, ($4 + $10 | 0) + $5 | 0, $7)
   }
   if (($1 | 0) != 10) {
    void_20std____2____libcpp_deallocate_5babi_nn200100_5d_char__28std____2____type_identity_char___type__2c_20std____2____element_count_2c_20unsigned_20long_29($10)
   }
   HEAP32[$0 >> 2] = $2;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$8 + 20 >> 2]);
   $1 = $0;
   $0 = $7 + ($4 + $6 | 0) | 0;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP8[$8 + 15 | 0] = 0;
   std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0 + $2 | 0, $8 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__operator_28_29_5babi_nn200100_5d_28_29($8 + 28 | 0);
   __stack_pointer = $8 + 32 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
  wasm2js_trap();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0) {
  var $1 = 0;
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   $1 = HEAP32[$0 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0);
   void_20std____2____libcpp_deallocate_5babi_nn200100_5d_char__28std____2____type_identity_char___type__2c_20std____2____element_count_2c_20unsigned_20long_29($1);
  }
  return $0;
 }
 
 function std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP8[$3 + 15 | 0] = $2;
  while (1) {
   if ($1) {
    HEAP8[$0 | 0] = HEAPU8[$3 + 15 | 0];
    $1 = $1 - 1 | 0;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $3 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  if ($2 >>> 0 <= 2147483639) {
   block : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($2)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $2);
     $4 = $0;
     break block;
    }
    std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29($2) + 1 | 0);
    $4 = HEAP32[$3 + 8 >> 2];
    HEAP32[$0 >> 2] = $4;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
    HEAP32[$0 + 4 >> 2] = $2;
   }
   char__20std____2____constexpr_memmove_5babi_nn200100_5d_char_2c_20char_20const_2c_200__28char__2c_20char_20const__2c_20std____2____element_count_29($4, $1, $2);
   HEAP8[$3 + 7 | 0] = 0;
   std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($2 + $4 | 0, $3 + 7 | 0);
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
  wasm2js_trap();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28unsigned_20long_2c_20char_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  if ($1 >>> 0 <= 2147483639) {
   block : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_nn200100_5d_28unsigned_20long_29($1)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $1);
     $4 = $0;
     break block;
    }
    std____2__allocator_char___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($3 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_nn200100_5d_28unsigned_20long_29($1) + 1 | 0);
    $4 = HEAP32[$3 + 8 >> 2];
    HEAP32[$0 >> 2] = $4;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
    HEAP32[$0 + 4 >> 2] = $1;
   }
   std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20unsigned_20long_2c_20char_29($4, $1, $2);
   HEAP8[$3 + 7 | 0] = 0;
   std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($1 + $4 | 0, $3 + 7 | 0);
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
  wasm2js_trap();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____push_back_28char_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[$2 + 15 | 0] = $1;
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0);
  block : {
   if (!$4) {
    $1 = 10;
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0);
    break block;
   }
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0) - 1 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
  }
  block2 : {
   block1 : {
    if (($1 | 0) == ($3 | 0)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, 1, $1, $1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
     break block1;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
    if ($4) {
     break block1
    }
    $1 = $0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $3 + 1 | 0);
    break block2;
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 + 4 >> 2] = $3 + 1;
  }
  $0 = $1 + $3 | 0;
  std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0, $2 + 15 | 0);
  HEAP8[$2 + 14 | 0] = 0;
  std____2__char_traits_char___assign_5babi_nn200100_5d_28char__2c_20char_20const__29($0 + 1 | 0, $2 + 14 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = 1073741815;
  if (($1 ^ -1) + 1073741815 >>> 0 >= $2 >>> 0) {
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
   if ($1 >>> 0 < 536870899) {
    HEAP32[$8 + 28 >> 2] = $1 << 1;
    HEAP32[$8 + 16 >> 2] = $1 + $2;
    $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______recommend_5babi_nn200100_5d_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_5babi_nn200100_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 16 | 0, $8 + 28 | 0) >> 2]) + 1 | 0;
   }
   std____2____scope_guard_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__20std____2____make_scope_guard_5babi_nn200100_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size_29($8 + 28 | 0, HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul______destroy_vector____destroy_vector_5babi_nn200100_5d_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul____29($8 + 24 | 0, $0) >> 2]);
   std____2__allocator_wchar_t___allocate_at_least_5babi_nn200100_5d_28unsigned_20long_29($8 + 16 | 0, $9);
   $2 = HEAP32[$8 + 16 >> 2];
   if ($4) {
    wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($2, $10, $4)
   }
   if ($6) {
    wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($2 + ($4 << 2) | 0, $7, $6)
   }
   $9 = $4 + $5 | 0;
   $7 = $3 - $9 | 0;
   if (($3 | 0) != ($9 | 0)) {
    $3 = $4 << 2;
    wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29(($3 + $2 | 0) + ($6 << 2) | 0, ($3 + $10 | 0) + ($5 << 2) | 0, $7);
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 2) {
    void_20std____2____libcpp_deallocate_5babi_nn200100_5d_wchar_t__28std____2____type_identity_wchar_t___type__2c_20std____2____element_count_2c_20unsigned_20long_29($10)
   }
   HEAP32[$0 >> 2] = $2;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_nn200100_5d_28unsigned_20long_29($0, HEAP32[$8 + 20 >> 2]);
   $1 = $0;
   $0 = $7 + ($4 + $6 | 0) | 0;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[$8 + 12 >> 2] = 0;
   std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($2 + ($0 << 2) | 0, $8 + 12 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______annotate_new_size__operator_28_29_5babi_nn200100_5d_28_29($8 + 28 | 0);
   __stack_pointer = $8 + 32 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_nn200100_5d_28_29();
  wasm2js_trap();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t_____basic_string_28_29($0) {
  var $1 = 0;
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0)) {
   $1 = HEAP32[$0 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0);
   void_20std____2____libcpp_deallocate_5babi_nn200100_5d_wchar_t__28std____2____type_identity_wchar_t___type__2c_20std____2____element_count_2c_20unsigned_20long_29($1);
  }
  return $0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______assign_external_28wchar_t_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  block : {
   $2 = std____2____constexpr_wcslen_5babi_nn200100_5d_28wchar_t_20const__29($1);
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____capacity_5babi_nn200100_5d_28_29_20const($0);
   $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
   if ($2 >>> 0 <= $3 >>> 0) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
    wchar_t__20std____2____constexpr_memmove_5babi_nn200100_5d_wchar_t_2c_20wchar_t_20const_2c_200__28wchar_t__2c_20wchar_t_20const__2c_20std____2____element_count_29($3, $1, $2);
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_nn200100_5d_28_29_20const($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_nn200100_5d_28unsigned_20long_29($0, $2);
    HEAP32[$1 + 12 >> 2] = 0;
    std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($3 + ($2 << 2) | 0, $1 + 12 | 0);
    __stack_pointer = $1 + 16 | 0;
    break block;
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $3, $2 - $3 | 0, $4, 0, $4, $2, $1);
  }
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____push_back_28wchar_t_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $1;
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_nn200100_5d_28_29_20const($0);
  block : {
   if (!$4) {
    $1 = 1;
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_size_5babi_nn200100_5d_28_29_20const($0);
    break block;
   }
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_nn200100_5d_28_29_20const($0) - 1 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
  }
  block2 : {
   block1 : {
    if (($1 | 0) == ($3 | 0)) {
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t______grow_by_without_replace_5babi_nn200100_5d_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, 1, $1, $1);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
     break block1;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_nn200100_5d_28_29($0);
    if ($4) {
     break block1
    }
    $1 = $0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_nn200100_5d_28unsigned_20long_29($0, $3 + 1 | 0);
    break block2;
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 + 4 >> 2] = $3 + 1;
  }
  $0 = ($3 << 2) + $1 | 0;
  std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($0, $2 + 12 | 0);
  HEAP32[$2 + 8 >> 2] = 0;
  std____2____char_traits_base_wchar_t_2c_20int_2c_20_1___assign_5babi_nn200100_5d_28wchar_t__2c_20wchar_t_20const__29($0 + 4 | 0, $2 + 8 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2____libcpp_verbose_abort_28char_20const__2c_20____29($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[14356];
  vfprintf($2, $0, $1);
  if (HEAPU8[(strlen($0) + $0 | 0) - 1 | 0] != 10) {
   fputc($2)
  }
  abort();
  wasm2js_trap();
 }
 
 function __abort_message($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $2 = HEAP32[14356];
  fwrite(34136, 11, 1, $2);
  HEAP32[$3 + 12 >> 2] = $1;
  vfprintf($2, $0, $1);
  fputc($2);
  abort();
  wasm2js_trap();
 }
 
 function __cxa_allocate_exception($0) {
  return emscripten_builtin_malloc($0 + 80 | 0) + 80 | 0;
 }
 
 function __cxa_pure_virtual() {
  __abort_message(34052, 0);
  wasm2js_trap();
 }
 
 function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  if (!$2) {
   return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2]
  }
  if (($0 | 0) == ($1 | 0)) {
   return 1
  }
  return !strcmp(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  block1 : {
   $4 = 1;
   block : {
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
     break block
    }
    $4 = 0;
    if (!$1) {
     break block
    }
    $1 = __dynamic_cast($1, 73288, 73336);
    $4 = 0;
    if (!$1) {
     break block
    }
    $4 = HEAP32[$2 >> 2];
    if (!$4) {
     break block1
    }
    wasm2js_memory_fill($3 + 24 | 0, 0, 56);
    HEAP8[$3 + 75 | 0] = 1;
    HEAP32[$3 + 32 >> 2] = -1;
    HEAP32[$3 + 28 >> 2] = $0;
    HEAP32[$3 + 20 >> 2] = $1;
    HEAP32[$3 + 68 >> 2] = 1;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 20 | 0, $4, 1);
    $0 = HEAP32[$3 + 44 >> 2];
    if (($0 | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 36 >> 2]
    }
    $4 = ($0 | 0) == 1;
   }
   __stack_pointer = $3 + 80 | 0;
   return $4 | 0;
  }
  HEAP32[$3 + 8 >> 2] = 32307;
  HEAP32[$3 + 4 >> 2] = 487;
  HEAP32[$3 >> 2] = 27328;
  __abort_message(27019, $3);
  wasm2js_trap();
 }
 
 function __dynamic_cast($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $4 = HEAP32[$0 >> 2];
  $5 = HEAP32[$4 - 8 >> 2];
  HEAP32[$6 + 12 >> 2] = $5;
  HEAP32[$6 + 4 >> 2] = $0 + $5;
  HEAP32[$6 + 8 >> 2] = HEAP32[$4 - 4 >> 2];
  $5 = HEAP32[$6 + 8 >> 2];
  $4 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($5, $2, 0);
  $7 = HEAP32[$6 + 4 >> 2];
  block : {
   if ($4) {
    $0 = __stack_pointer + -64 | 0;
    __stack_pointer = $0;
    __stack_pointer = $0 - -64 | 0;
    $3 = HEAP32[$6 + 12 >> 2] ? 0 : $7;
    break block;
   }
   $4 = __stack_pointer + -64 | 0;
   __stack_pointer = $4;
   if (($0 | 0) >= ($7 | 0)) {
    HEAP32[$4 + 20 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 16 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = $2;
    HEAP32[$4 + 4 >> 2] = $5;
    HEAP32[$4 + 28 >> 2] = 0;
    HEAP32[$4 + 32 >> 2] = 0;
    HEAP32[$4 + 36 >> 2] = 0;
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP32[$4 + 48 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAP32[$4 + 52 >> 2] = 1;
    HEAP32[$4 + 56 >> 2] = 16777216;
    HEAP32[$4 + 8 >> 2] = $0;
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, $4 + 4 | 0, $7, $7, 1, 0);
    $3 = HEAP32[$4 + 28 >> 2] ? $0 : 0;
   }
   __stack_pointer = $4 - -64 | 0;
   if ($3) {
    break block
   }
   $3 = __stack_pointer + -64 | 0;
   __stack_pointer = $3;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = $1;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 4 >> 2] = $2;
   $0 = 0;
   wasm2js_memory_fill($3 + 20 | 0, 0, 39);
   HEAP32[$3 + 60 >> 2] = 0;
   HEAP8[$3 + 59 | 0] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $3 + 4 | 0, $7, 1, 0);
   block3 : {
    block2 : {
     switch (HEAP32[$3 + 40 >> 2]) {
     case 0:
      $0 = HEAP32[$3 + 44 >> 2] == 1 ? (HEAP32[$3 + 32 >> 2] == 1 ? (HEAP32[$3 + 36 >> 2] == 1 ? HEAP32[$3 + 24 >> 2] : 0) : 0) : 0;
      break block3;
     case 1:
      break block2;
     default:
      break block3;
     };
    }
    if (HEAP32[$3 + 28 >> 2] != 1) {
     if (HEAP32[$3 + 44 >> 2] | HEAP32[$3 + 32 >> 2] != 1 | HEAP32[$3 + 36 >> 2] != 1) {
      break block3
     }
    }
    $0 = HEAP32[$3 + 20 >> 2];
   }
   __stack_pointer = $3 - -64 | 0;
   $3 = $0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $3;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
  var $3 = 0;
  $3 = HEAP32[$0 + 36 >> 2];
  if (!$3) {
   HEAP32[$0 + 24 >> 2] = $2;
   HEAP32[$0 + 16 >> 2] = $1;
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 56 >> 2];
   return;
  }
  block1 : {
   if (!(HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 56 >> 2] | HEAP32[$0 + 16 >> 2] != ($1 | 0))) {
    if (HEAP32[$0 + 24 >> 2] != 2) {
     break block1
    }
    HEAP32[$0 + 24 >> 2] = $2;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 2;
   HEAP32[$0 + 36 >> 2] = $3 + 1;
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3)
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
 }
 
 function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $6 = $5 & 1;
  block : {
   if (HEAPU8[$1 + 55 | 0] == 1) {
    $4 = $5 >> 8;
    if (!$6) {
     break block
    }
    $4 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $4);
    break block;
   }
   $4 = $5 >> 8;
   if (!$6) {
    break block
   }
   HEAP32[$1 + 56 >> 2] = HEAP32[HEAP32[$0 >> 2] + 4 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $2 = 0;
   $4 = 0;
  }
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2 + $4 | 0, $5 & 2 ? $3 : 2);
 }
 
 function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
  return HEAP32[$0 + $1 >> 2];
 }
 
 function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
   return;
  }
  $4 = HEAP32[$0 + 12 >> 2];
  $5 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
  block : {
   if ($4 >>> 0 < 2) {
    break block
   }
   $4 = ($4 << 3) + $5 | 0;
   $0 = $0 + 24 | 0;
   while (1) {
    __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
    if (HEAPU8[$1 + 54 | 0]) {
     break block
    }
    $0 = $0 + 8 | 0;
    if ($4 >>> 0 > $0 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  block : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, 73684, 0)) {
    HEAP32[$2 >> 2] = 0;
    $3 = 1;
    break block;
   }
   block1 : {
    if (HEAPU8[$0 + 8 | 0] & 24) {
     $4 = 1
    } else {
     if (!$1) {
      break block1
     }
     $6 = __dynamic_cast($1, 73288, 73384);
     if (!$6) {
      break block1
     }
     $4 = (HEAPU8[$6 + 8 | 0] & 24) != 0;
    }
    $4 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $4);
   }
   if ($4) {
    $3 = 1;
    $0 = HEAP32[$2 >> 2];
    if (!$0) {
     break block
    }
    HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
    break block;
   }
   block2 : {
    if (!$1) {
     break block2
    }
    $6 = __dynamic_cast($1, 73288, 73432);
    if (!$6) {
     break block
    }
    $1 = HEAP32[$2 >> 2];
    if ($1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2]
    }
    $4 = HEAP32[$6 + 8 >> 2];
    $1 = HEAP32[$0 + 8 >> 2];
    if ($4 & ($1 ^ -1) & 7 | $1 & ($4 ^ -1) & 96) {
     break block
    }
    $3 = 1;
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$6 + 12 >> 2], 0)) {
     break block
    }
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], 73672, 0)) {
     $0 = HEAP32[$6 + 12 >> 2];
     if (!$0) {
      break block
     }
     $3 = !__dynamic_cast($0, 73288, 73480);
     break block;
    }
    $4 = HEAP32[$0 + 12 >> 2];
    if (!$4) {
     break block2
    }
    $3 = 0;
    $1 = __dynamic_cast($4, 73288, 73432);
    if ($1) {
     if (!(HEAP8[$0 + 8 | 0] & 1)) {
      break block
     }
     $0 = HEAP32[$6 + 12 >> 2];
     $2 = 0;
     block3 : {
      block4 : {
       while (1) {
        $3 = 0;
        if (!$0) {
         break block3
        }
        $0 = __dynamic_cast($0, 73288, 73432);
        if (!$0 | HEAP32[$0 + 8 >> 2] & (HEAP32[$1 + 8 >> 2] ^ -1)) {
         break block4
        }
        $3 = 1;
        if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 12 >> 2], 0)) {
         break block3
        }
        if (!(HEAP8[$1 + 8 | 0] & 1)) {
         break block4
        }
        $3 = HEAP32[$1 + 12 >> 2];
        if (!$3) {
         break block4
        }
        $1 = __dynamic_cast($3, 73288, 73432);
        if ($1) {
         $0 = HEAP32[$0 + 12 >> 2];
         continue;
        }
        break;
       };
       $1 = __dynamic_cast($3, 73288, 73532);
       if (!$1) {
        break block4
       }
       $2 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($1, HEAP32[$0 + 12 >> 2]);
      }
      $3 = $2;
     }
     break block;
    }
    $1 = __dynamic_cast($4, 73288, 73532);
    if ($1) {
     if (!(HEAP8[$0 + 8 | 0] & 1)) {
      break block
     }
     $3 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($1, HEAP32[$6 + 12 >> 2]);
     break block;
    }
    $4 = __dynamic_cast($4, 73288, 73336);
    if (!$4) {
     break block
    }
    $0 = HEAP32[$6 + 12 >> 2];
    if (!$0) {
     break block
    }
    $0 = __dynamic_cast($0, 73288, 73336);
    if (!$0) {
     break block
    }
    $1 = HEAP32[$2 >> 2];
    wasm2js_memory_fill($5 + 8 | 0, 0, 56);
    HEAP8[$5 + 59 | 0] = ($1 | 0) != 0;
    HEAP32[$5 + 16 >> 2] = -1;
    HEAP32[$5 + 12 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $0;
    HEAP32[$5 + 52 >> 2] = 1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $5 + 4 | 0, $1, 1);
    $0 = HEAP32[$5 + 28 >> 2];
    if (($0 | 0) == 1) {
     HEAP32[$2 >> 2] = $1 ? HEAP32[$5 + 20 >> 2] : 0
    }
    $3 = ($0 | 0) == 1;
    break block;
   }
   $3 = 0;
  }
  __stack_pointer = $5 - -64 | 0;
  return $3 | 0;
 }
 
 function __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
  var $2 = 0;
  block : {
   if (!$1) {
    break block
   }
   $1 = __dynamic_cast($1, 73288, 73532);
   if (!$1 | HEAP32[$1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
    break block
   }
   if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
    break block
   }
   $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 16 >> 2], HEAP32[$1 + 16 >> 2], 0);
  }
  return $2;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  HEAP8[$0 + 53 | 0] = 1;
  block : {
   if (HEAP32[$0 + 4 >> 2] != ($2 | 0)) {
    break block
   }
   HEAP8[$0 + 52 | 0] = 1;
   $2 = HEAP32[$0 + 16 >> 2];
   block1 : {
    if (!$2) {
     HEAP32[$0 + 36 >> 2] = 1;
     HEAP32[$0 + 24 >> 2] = $3;
     HEAP32[$0 + 16 >> 2] = $1;
     if (($3 | 0) != 1) {
      break block
     }
     if (HEAP32[$0 + 48 >> 2] == 1) {
      break block1
     }
     break block;
    }
    if (($1 | 0) == ($2 | 0)) {
     $2 = HEAP32[$0 + 24 >> 2];
     if (($2 | 0) == 2) {
      HEAP32[$0 + 24 >> 2] = $3;
      $2 = $3;
     }
     if (HEAP32[$0 + 48 >> 2] != 1) {
      break block
     }
     if (($2 | 0) == 1) {
      break block1
     }
     break block;
    }
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
   }
   HEAP8[$0 + 54 | 0] = 1;
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2) {
  if (!(HEAP32[$0 + 28 >> 2] == 1 | HEAP32[$0 + 4 >> 2] != ($1 | 0))) {
   HEAP32[$0 + 28 >> 2] = $2
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  block1 : {
   block2 : {
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
     if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
      if (($3 | 0) != 1) {
       break block1
      }
      HEAP32[$1 + 32 >> 2] = 1;
      return;
     }
     HEAP32[$1 + 32 >> 2] = $3;
     if (HEAP32[$1 + 44 >> 2] == 4) {
      break block2
     }
     $5 = $0 + 16 | 0;
     $6 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
     $3 = 0;
     while (1) {
      block4 : {
       block5 : {
        block6 : {
         block3 : {
          if ($5 >>> 0 >= $6 >>> 0) {
           break block3
          }
          HEAP16[$1 + 52 >> 1] = 0;
          __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
          if (HEAPU8[$1 + 54 | 0]) {
           break block3
          }
          if (HEAPU8[$1 + 53 | 0] != 1) {
           break block4
          }
          if (HEAPU8[$1 + 52 | 0] == 1) {
           if (HEAP32[$1 + 24 >> 2] == 1) {
            break block5
           }
           $3 = 1;
           $7 = 1;
           if (!(HEAPU8[$0 + 8 | 0] & 2)) {
            break block5
           }
           break block4;
          }
          $3 = 1;
          if (HEAP8[$0 + 8 | 0] & 1) {
           break block4
          }
          $0 = 3;
          break block6;
         }
         $0 = $3 ? 3 : 4;
        }
        HEAP32[$1 + 44 >> 2] = $0;
        if ($7) {
         break block1
        }
        break block2;
       }
       HEAP32[$1 + 44 >> 2] = 3;
       break block1;
      }
      $5 = $5 + 8 | 0;
      continue;
     };
    }
    $5 = HEAP32[$0 + 12 >> 2];
    $6 = $0 + 16 | 0;
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
    if ($5 >>> 0 < 2) {
     break block1
    }
    $6 = $6 + ($5 << 3) | 0;
    $5 = $0 + 24 | 0;
    $0 = HEAP32[$0 + 8 >> 2];
    if (!(!($0 & 2) & HEAP32[$1 + 36 >> 2] != 1)) {
     while (1) {
      if (HEAPU8[$1 + 54 | 0]) {
       break block1
      }
      __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
      $5 = $5 + 8 | 0;
      if ($6 >>> 0 > $5 >>> 0) {
       continue
      }
      break;
     };
     break block1;
    }
    if (!($0 & 1)) {
     while (1) {
      if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
       break block1
      }
      __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
      $5 = $5 + 8 | 0;
      if ($6 >>> 0 > $5 >>> 0) {
       continue
      }
      break block1;
     }
    }
    while (1) {
     if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1 & HEAP32[$1 + 24 >> 2] == 1) {
      break block1
     }
     __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
     $5 = $5 + 8 | 0;
     if ($6 >>> 0 > $5 >>> 0) {
      continue
     }
     break;
    };
    break block1;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break block1
   }
   HEAP8[$1 + 54 | 0] = 1;
  }
 }
 
 function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  $7 = $6 >> 8;
  if ($6 & 1) {
   $7 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$3 >> 2], $7)
  }
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
 }
 
 function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $6 = $5 >> 8;
  if ($5 & 1) {
   $6 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $6)
  }
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  block1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
    if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
     if (($3 | 0) != 1) {
      break block1
     }
     HEAP32[$1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1 + 32 >> 2] = $3;
    block2 : {
     if (HEAP32[$1 + 44 >> 2] == 4) {
      break block2
     }
     HEAP16[$1 + 52 >> 1] = 0;
     $0 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
     if (HEAPU8[$1 + 53 | 0] == 1) {
      HEAP32[$1 + 44 >> 2] = 3;
      if (!HEAPU8[$1 + 52 | 0]) {
       break block2
      }
      break block1;
     }
     HEAP32[$1 + 44 >> 2] = 4;
    }
    HEAP32[$1 + 20 >> 2] = $2;
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
    if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
     break block1
    }
    HEAP8[$1 + 54 | 0] = 1;
    return;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
  }
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  block : {
   if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
    break block
   }
   if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
    if (($3 | 0) != 1) {
     break block
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 32 >> 2] = $3;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
    HEAP8[$1 + 54 | 0] = 1
   }
   HEAP32[$1 + 44 >> 2] = 4;
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
   return;
  }
  $7 = HEAPU8[$1 + 53 | 0];
  $6 = HEAP32[$0 + 12 >> 2];
  HEAP8[$1 + 53 | 0] = 0;
  $8 = HEAPU8[$1 + 52 | 0];
  HEAP8[$1 + 52 | 0] = 0;
  $9 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
  $10 = HEAPU8[$1 + 52 | 0];
  $8 = $8 | $10;
  $11 = HEAPU8[$1 + 53 | 0];
  $7 = $7 | $11;
  block : {
   if ($6 >>> 0 < 2) {
    break block
   }
   $9 = $9 + ($6 << 3) | 0;
   $6 = $0 + 24 | 0;
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break block
    }
    block1 : {
     if ($10 & 1) {
      if (HEAP32[$1 + 24 >> 2] == 1) {
       break block
      }
      if (HEAPU8[$0 + 8 | 0] & 2) {
       break block1
      }
      break block;
     }
     if (!($11 & 1)) {
      break block1
     }
     if (!(HEAP8[$0 + 8 | 0] & 1)) {
      break block
     }
    }
    HEAP16[$1 + 52 >> 1] = 0;
    __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
    $11 = HEAPU8[$1 + 53 | 0];
    $7 = ($11 | $7) & 1;
    $10 = HEAPU8[$1 + 52 | 0];
    $8 = ($10 | $8) & 1;
    $6 = $6 + 8 | 0;
    if ($9 >>> 0 > $6 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP8[$1 + 53 | 0] = $7 & 1;
  HEAP8[$1 + 52 | 0] = $8 & 1;
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4)
  }
 }
 
 function std__exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 27425;
 }
 
 function std__bad_alloc__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 30870;
 }
 
 function std__bad_array_new_length__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 27986;
 }
 
 function std__logic_error___logic_error_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 74276;
  $1 = HEAP32[$0 + 4 >> 2] - 12 | 0;
  if ((long_20std____2____libcpp_atomic_refcount_decrement_5babi_nn200100_5d_long__28long__29($1 + 8 | 0) | 0) < 0) {
   emscripten_builtin_free($1)
  }
  return $0 | 0;
 }
 
 function std__logic_error___logic_error_28_29_3149($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0);
  emscripten_builtin_free($0);
 }
 
 function std__logic_error__what_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function _emscripten_stack_restore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function _emscripten_stack_alloc($0) {
  $0 = $0 | 0;
  $0 = __stack_pointer - $0 & -16;
  __stack_pointer = $0;
  return $0 | 0;
 }
 
 function emscripten_stack_get_current() {
  return __stack_pointer | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $0 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
  tempRet0 = i64toi32_i32$HIGH_BITS;
  return $0 | 0;
 }
 
 function legalstub$dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6);
 }
 
 function legalstub$dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4, $5, $6) | 0;
 }
 
 function legalstub$dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0;
  $9 = $1;
  $1 = 0;
  return FUNCTION_TABLE[$0 | 0]($9, $2, $3, $4, $1 | $5, $6, $1 | $7, $8) | 0;
 }
 
 function legalstub$dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0;
  $10 = $1;
  $1 = 0;
  return FUNCTION_TABLE[$0 | 0]($10, $2, $3, $4, $5, $1 | $6, $7, $1 | $8, $9) | 0;
 }
 
 function legalfunc$_embind_register_bigint($0, $1, $2, $3) {
  legalimport$_embind_register_bigint($0 | 0, $1 | 0, 8, 0, $2 | 0, -1, $3 | 0);
 }
 
 function $1187($0, $1, $2) {
  var $3 = 0;
  $3 = emscripten_builtin_malloc(12);
  if ($3) {
   $2 = emscripten_builtin_malloc(Math_imul($0, $1) << $2);
   HEAP32[$3 >> 2] = $2;
   if (!$2) {
    emscripten_builtin_free($3);
    return 0;
   }
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $0;
  } else {
   $3 = 0
  }
  return $3;
 }
 
 function $1188($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  while (1) {
   if (($2 | 0) != ($3 | 0)) {
    $2 = $2 - $1 | 0;
    HEAP32[$0 + 8 >> 2] = $2;
    continue;
   }
   break;
  };
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   emscripten_builtin_free($0)
  }
 }
 
 function $1189($0, $1) {
  HEAP32[$0 >> 2] = $1;
  std____2__locale__locale_28_29($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function $1190($0, $1, $2) {
  var $3 = 0;
  while (1) {
   if (($0 | 0) != ($1 | 0)) {
    block : {
     if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP8[$0 | 0])) {
      $3 = HEAP32[HEAP32[$2 >> 2] + (HEAP8[$0 | 0] << 2) >> 2];
      break block;
     }
     $3 = HEAPU8[$0 | 0];
    }
    HEAP8[$0 | 0] = $3;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  return $0;
 }
 
 function $1191($0, $1, $2) {
  var $3 = 0;
  while (1) {
   if (($0 | 0) != ($1 | 0)) {
    if (std____2____libcpp_isascii_5babi_nn200100_5d_28int_29(HEAP32[$0 >> 2])) {
     $3 = HEAP32[$2 >> 2] + (HEAP32[$0 >> 2] << 2) | 0
    } else {
     $3 = $0
    }
    HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
    $0 = $0 + 4 | 0;
    continue;
   }
   break;
  };
  return $0;
 }
 
 function $1192($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 112 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 104 >> 2] = $3;
  HEAP32[$6 + 108 >> 2] = $4;
  HEAP32[$6 + 96 >> 2] = 37;
  HEAP32[$6 + 100 >> 2] = 0;
  $4 = $6 + 96 | 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($4 | 1, 27688, $5, HEAP32[$1 + 4 >> 2]);
  $3 = $6 - -64 | 0;
  $4 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long_20long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long_20long__29($3, std____2____cloc_28_29(), $4, $6 + 104 | 0) + $3 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($3, $4, $1);
  $5 = $6 + 4 | 0;
  std____2__ios_base__getloc_28_29_20const($5, $1);
  $8 = $3;
  $3 = $6 + 16 | 0;
  std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($8, $7, $4, $3, $6 + 12 | 0, $6 + 8 | 0, $5);
  std____2__locale___locale_28_29($5);
  $0 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $3, HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2], $1, $2);
  __stack_pointer = $6 + 112 | 0;
  return $0;
 }
 
 function $1193($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 80 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 76 >> 2] = $3;
  HEAP32[$5 + 64 >> 2] = 37;
  HEAP32[$5 + 68 >> 2] = 0;
  $6 = $5 - -64 | 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6 | 1, 27719, $4, HEAP32[$1 + 4 >> 2]);
  $3 = $5 + 51 | 0;
  $4 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long__29($3, 13, std____2____cloc_28_29(), $6, $5 + 76 | 0) + $3 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($3, $4, $1);
  $6 = $5 + 4 | 0;
  std____2__ios_base__getloc_28_29_20const($6, $1);
  $8 = $3;
  $3 = $5 + 16 | 0;
  std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($8, $7, $4, $3, $5 + 12 | 0, $5 + 8 | 0, $6);
  std____2__locale___locale_28_29($6);
  $0 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___20std____2____pad_and_output_5babi_nn200100_5d_char_2c_20std____2__char_traits_char___28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $3, HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], $1, $2);
  __stack_pointer = $5 + 80 | 0;
  return $0;
 }
 
 function $1194($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 256 | 0;
  __stack_pointer = $6;
  HEAP32[$6 + 248 >> 2] = $3;
  HEAP32[$6 + 252 >> 2] = $4;
  HEAP32[$6 + 240 >> 2] = 37;
  HEAP32[$6 + 244 >> 2] = 0;
  $4 = $6 + 240 | 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($4 | 1, 27688, $5, HEAP32[$1 + 4 >> 2]);
  $3 = $6 + 208 | 0;
  $4 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long_20long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long_20long__29($3, std____2____cloc_28_29(), $4, $6 + 248 | 0) + $3 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($3, $4, $1);
  $5 = $6 + 4 | 0;
  std____2__ios_base__getloc_28_29_20const($5, $1);
  $8 = $3;
  $3 = $6 + 16 | 0;
  std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($8, $7, $4, $3, $6 + 12 | 0, $6 + 8 | 0, $5);
  std____2__locale___locale_28_29($5);
  $0 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $3, HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2], $1, $2);
  __stack_pointer = $6 + 256 | 0;
  return $0;
 }
 
 function $1195($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 144 | 0;
  __stack_pointer = $5;
  HEAP32[$5 + 140 >> 2] = $3;
  HEAP32[$5 + 128 >> 2] = 37;
  HEAP32[$5 + 132 >> 2] = 0;
  $6 = $5 + 128 | 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6 | 1, 27719, $4, HEAP32[$1 + 4 >> 2]);
  $3 = $5 + 115 | 0;
  $4 = int_20std____2____locale____snprintf_5babi_nn200100_5d_long___28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20long__29($3, 13, std____2____cloc_28_29(), $6, $5 + 140 | 0) + $3 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($3, $4, $1);
  $6 = $5 + 4 | 0;
  std____2__ios_base__getloc_28_29_20const($6, $1);
  $8 = $3;
  $3 = $5 + 16 | 0;
  std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($8, $7, $4, $3, $5 + 12 | 0, $5 + 8 | 0, $6);
  std____2__locale___locale_28_29($6);
  $0 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___20std____2____pad_and_output_5babi_nn200100_5d_wchar_t_2c_20std____2__char_traits_wchar_t___28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $3, HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], $1, $2);
  __stack_pointer = $5 + 144 | 0;
  return $0;
 }
 
 function $1196($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = $2;
  $4 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 4 >> 2] - $4 | 0;
  $3 = HEAP32[$1 + 4 >> 2] + Math_imul($5, ($2 | 0) / ($3 | 0) | 0) | 0;
  if ($2) {
   wasm2js_memory_copy($3, $4, $2)
  }
  HEAP32[$1 + 4 >> 2] = $3;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 
 function $1197($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 >> 2];
  $6 = HEAP8[$0 + 11 | 0];
  HEAP32[$4 + 4 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 >> 2] = ($6 | 0) < 0 ? $5 : $0;
  emscripten_asm_const_int($1 | 0, 24341, $4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
 }
 
 function $1198($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = HEAP32[$0 >> 2];
  $8 = HEAP8[$0 + 11 | 0];
  HEAP32[$6 + 4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 12 >> 2] = $1;
  HEAP32[$6 >> 2] = ($8 | 0) < 0 ? $7 : $0;
  emscripten_asm_const_int($3 | 0, $2 | 0, $6 | 0) | 0;
  __stack_pointer = $6 + 16 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2) {
  var $3 = 0;
  $3 = $1 >> 31;
  $0 = $0 ^ $3;
  $0 = $3 ^ _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0 - $3 | 0, ($1 ^ $3) - (($0 >>> 0 < $3 >>> 0) + $3 | 0) | 0, $2);
  $1 = $0 - $3 | 0;
  i64toi32_i32$HIGH_BITS = ($3 ^ i64toi32_i32$HIGH_BITS) - (($0 >>> 0 < $3 >>> 0) + $3 | 0) | 0;
  return $1;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E($0, $1) {
  var $2 = 0;
  $2 = $1 >> 31;
  $0 = $0 ^ $2;
  _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0 - $2 | 0, ($1 ^ $2) - (($0 >>> 0 < $2 >>> 0) + $2 | 0) | 0, 100);
  i64toi32_i32$HIGH_BITS = __wasm_intrinsics_temp_i64$hi;
  $0 = $2 ^ __wasm_intrinsics_temp_i64;
  $1 = $0 - $2 | 0;
  i64toi32_i32$HIGH_BITS = ($2 ^ i64toi32_i32$HIGH_BITS) - (($0 >>> 0 < $2 >>> 0) + $2 | 0) | 0;
  return $1;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           if ($1) {
            if (!$2) {
             break label$11
            }
            break label$9;
           }
           $1 = $0;
           $0 = ($0 >>> 0) / ($2 >>> 0) | 0;
           __wasm_intrinsics_temp_i64 = $1 - Math_imul($0, $2) | 0;
           __wasm_intrinsics_temp_i64$hi = 0;
           i64toi32_i32$HIGH_BITS = 0;
           return $0;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $3 = $2 - 1 | 0;
         if (!($3 & $2)) {
          break label$5
         }
         $6 = (Math_clz32($2) + 33 | 0) - Math_clz32($1) | 0;
         $5 = 0 - $6 | 0;
         break label$3;
        }
        __wasm_intrinsics_temp_i64 = 0;
        $0 = ($1 >>> 0) / 0 | 0;
        __wasm_intrinsics_temp_i64$hi = $1 - Math_imul($0, 0) | 0;
        i64toi32_i32$HIGH_BITS = 0;
        return $0;
       }
       $3 = 32 - Math_clz32($1) | 0;
       if ($3 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      __wasm_intrinsics_temp_i64 = $0 & $3;
      __wasm_intrinsics_temp_i64$hi = 0;
      if (($2 | 0) == 1) {
       break label$1
      }
      $3 = __wasm_ctz_i32($2);
      $2 = $3 & 31;
      if (($3 & 63) >>> 0 >= 32) {
       $0 = $1 >>> $2 | 0
      } else {
       $4 = $1 >>> $2 | 0;
       $0 = ((1 << $2) - 1 & $1) << 32 - $2 | $0 >>> $2;
      }
      i64toi32_i32$HIGH_BITS = $4;
      return $0;
     }
     $6 = $3 + 1 | 0;
     $5 = 63 - $3 | 0;
    }
    $4 = $6 & 63;
    $3 = $4 & 31;
    if ($4 >>> 0 >= 32) {
     $4 = 0;
     $7 = $1 >>> $3 | 0;
    } else {
     $4 = $1 >>> $3 | 0;
     $7 = ((1 << $3) - 1 & $1) << 32 - $3 | $0 >>> $3;
    }
    $5 = $5 & 63;
    $3 = $5 & 31;
    if ($5 >>> 0 >= 32) {
     $1 = $0 << $3;
     $0 = 0;
    } else {
     $1 = (1 << $3) - 1 & $0 >>> 32 - $3 | $1 << $3;
     $0 = $0 << $3;
    }
    if ($6) {
     $3 = $2 - 1 | 0;
     $10 = ($3 | 0) == -1 ? -1 : 0;
     while (1) {
      $8 = $4 << 1 | $7 >>> 31;
      $4 = $7 << 1 | $1 >>> 31;
      $5 = $10 - ($8 + ($4 >>> 0 > $3 >>> 0) | 0) >> 31;
      $9 = $2 & $5;
      $7 = $4 - $9 | 0;
      $4 = $8 - ($4 >>> 0 < $9 >>> 0) | 0;
      $1 = $1 << 1 | $0 >>> 31;
      $0 = $11 | $0 << 1;
      $8 = $5 & 1;
      $11 = $8;
      $6 = $6 - 1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    __wasm_intrinsics_temp_i64 = $7;
    __wasm_intrinsics_temp_i64$hi = $4;
    i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
    return $8 | $0 << 1;
   }
   __wasm_intrinsics_temp_i64 = $0;
   __wasm_intrinsics_temp_i64$hi = $1;
   $0 = 0;
   $1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function __wasm_ctz_i32($0) {
  if ($0) {
   return 31 - Math_clz32($0 - 1 ^ $0) | 0
  }
  return 32;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $2 >>> 16 | 0;
  $5 = $0 >>> 16 | 0;
  $9 = Math_imul($4, $5);
  $6 = $2 & 65535;
  $7 = $0 & 65535;
  $8 = Math_imul($6, $7);
  $5 = ($8 >>> 16 | 0) + Math_imul($5, $6) | 0;
  $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) + ($5 >>> 16) + ($4 >>> 16) | 0;
  return $8 & 65535 | $4 << 16;
 }
 
 function __wasm_popcnt_i32($0) {
  var $1 = 0;
  while (1) {
   if ($0) {
    $0 = $0 - 1 & $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $1;
 }
 
 function __wasm_rotl_i32($0) {
  var $1 = 0;
  $1 = $0 & 31;
  $0 = 0 - $0 & 31;
  return (-1 >>> $1 & -2) << $1 | (-1 << $0 & -2) >>> $0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, compE, jpeg_std_error, my_error_exit, jpeg_destroy_decompress, arLog, jpeg_CreateDecompress, jpeg_stdio_src, jpeg_read_header, jpeg_start_decompress, jpeg_finish_decompress, jpeg_read_scanlines, std__logic_error___logic_error_28_29, dummy_1397, vision__Exception___Exception_28_29, __cxx_global_array_dtor, vision__GaussianScaleSpacePyramid___GaussianScaleSpacePyramid_28_29, vision__GaussianScaleSpacePyramid___GaussianScaleSpacePyramid_28_29_383, vision__BinomialPyramid32f___BinomialPyramid32f_28_29, vision__BinomialPyramid32f___BinomialPyramid32f_28_29_372, vision__Exception___Exception_28_29_384, vision__Exception__what_28_29_20const, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96_______on_zero_shared_28_29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96_______get_deleter_28std__type_info_20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______get_deleter_28std__type_info_20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20std____2__shared_ptr_unsigned_20char_____shared_ptr_default_delete_unsigned_20char_2c_20unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20std____2__shared_ptr_unsigned_20char_____shared_ptr_default_delete_unsigned_20char_2c_20unsigned_20char__2c_20std____2__allocator_unsigned_20char______get_deleter_28std__type_info_20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, createKpmHandleHelper__$_1____invoke_28_KpmHandle__29, createKpmHandleHelper__$_1____invoke_28_KpmHandle__29, embind_init_constant_bindings_28_29, setup, setFiltering, teardown, setupAR2, addNFTMarkers, decompressZFT, recalculateCameraLens, loadCamera, detectNFTMarker, getNFTMarkerInfo, getNFTData, setDebugMode, getDebugMode, getProcessingImage, setLogLevel, getLogLevel, setProjectionNearPlane, getProjectionNearPlane, setProjectionFarPlane, getProjectionFarPlane, setThresholdMode, getThresholdMode, setThreshold, getThreshold, setImageProcMode, getImageProcMode, getCameraLens, passVideoData, void_20const__20emscripten__internal__getActualType_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29, void_20emscripten__internal__raw_destructor_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29, std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______20emscripten__internal__operator_new_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28_29, emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______push_back_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29, emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______resize_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29, emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______size_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29, emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______get_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int_29, emscripten__internal__VectorAccess_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______set_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29, void_20const__20emscripten__internal__getActualType_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29, void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29, std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______20emscripten__internal__operator_new_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28_29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____push_back_28std____2__vector_int_2c_20std____2__allocator_int____2c_20int___29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____resize_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____size_28std____2__vector_int_2c_20std____2__allocator_int___20const__29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____get_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int_29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____set_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29, void_20const__20emscripten__internal__getActualType_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____29, void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29, std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______20emscripten__internal__operator_new_std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______28_29, emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____push_back_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker___29, emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____resize_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29, emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____size_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__29, emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____get_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int_29, emscripten__internal__VectorAccess_std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker_____set_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int_2c_20int_2c_20int_2c_20bool___invoke_28int_20_28__29_28int_2c_20int_2c_20int_2c_20bool_29_2c_20int_2c_20int_2c_20int_2c_20bool_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int_2c_20bool___invoke_28void_20_28__29_28int_2c_20bool_29_2c_20int_2c_20bool_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int___invoke_28int_20_28__29_28int_29_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20std____2__vector_int_2c_20std____2__allocator_int___2c_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char________invoke_28std____2__vector_int_2c_20std____2__allocator_int___20_28__29_28int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29_2c_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20emscripten__val_2c_20int_2c_20int___invoke_28emscripten__val_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20nftMarker_2c_20int_2c_20int___invoke_28nftMarker_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29, nftMarker__20emscripten__internal__raw_constructor_nftMarker__28_29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, int_20emscripten__internal__MemberAccess_nftMarker_2c_20int___getWire_nftMarker_2c_20emscripten__internal__rvp__default_tag__28int_20nftMarker____20const__2c_20nftMarker__29, void_20emscripten__internal__MemberAccess_nftMarker_2c_20int___setWire_nftMarker__28int_20nftMarker____20const__2c_20nftMarker__2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int___invoke_28int_20_28__29_28_29_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int_2c_20double___invoke_28void_20_28__29_28int_2c_20double_29_2c_20int_2c_20double_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20void_2c_20int_2c_20bool___invoke_28void_20_28__29_28int_2c_20bool_29_2c_20int_2c_20bool_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28int_20_28__29_28int_2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int___invoke_28int_20_28__29_28_29_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29_2c_20void_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_______invoke_28void_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20void_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____invoke_28void_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20unsigned_20int_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20unsigned_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const____invoke_28unsigned_20int_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20std____2__optional_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int_29_2c_20std____2__optional_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int___invoke_28std____2__optional_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__2c_20unsigned_20int_29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20bool_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20bool_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const____invoke_28bool_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int___invoke_28int_20_28__29_28_29_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20int___29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_____invoke_28void_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20int___29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const____invoke_28void_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20unsigned_20int_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20unsigned_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const____invoke_28unsigned_20int_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20std____2__optional_int__20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int_29_2c_20std____2__optional_int__2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int___invoke_28std____2__optional_int__20_28___29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20int_29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const____invoke_28bool_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20int_2c_20int_29, emscripten__internal__Invoker_emscripten__internal__rvp__default_tag_2c_20int___invoke_28int_20_28__29_28_29_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker___29_2c_20void_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker_____invoke_28void_20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker___29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20nftMarker__29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20void_20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20void_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const____invoke_28void_20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker__29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20unsigned_20int_20_28__29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20unsigned_20int_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const____invoke_28unsigned_20int_20_28___29_28std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____20const__29_2c_20std____2__vector_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__allocator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20std____2__optional_nftMarker__20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int_29_2c_20std____2__optional_nftMarker__2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int___invoke_28std____2__optional_nftMarker__20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker___20const__2c_20unsigned_20int_29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_emscripten__internal__rvp__default_tag_2c_20bool_20_28__29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20bool_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const____invoke_28bool_20_28___29_28std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker_20const__29_2c_20std____2__vector_nftMarker_2c_20std____2__allocator_nftMarker____2c_20unsigned_20int_2c_20nftMarker__29, arController__kpmHandle___lambda__28_KpmHandle__29____invoke_28_KpmHandle__29, __cxx_global_array_dtor_820, __cxx_global_array_dtor_2, compE_1127, zcalloc, zcfree, embind_init_builtin_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, jpeg_resync_to_restart, skip_input_data, fill_input_buffer, init_source, finish_input_pass, start_input_pass, reset_input_controller, consume_markers, skip_variable, read_restart_marker, read_markers, reset_marker_reader, get_interesting_appn, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, grayscale_convert, rgb_gray_convert, rgb1_gray_convert, gray_rgb_convert, ycc_rgb_convert, rgb_convert, rgb1_rgb_convert, ycck_cmyk_convert, cmyk_yk_convert, null_convert, start_pass, jpeg_idct_1x1, jpeg_idct_2x2, jpeg_idct_3x3, jpeg_idct_4x4, jpeg_idct_5x5, jpeg_idct_6x6, jpeg_idct_7x7, jpeg_idct_10x10, jpeg_idct_11x11, jpeg_idct_12x12, jpeg_idct_13x13, jpeg_idct_14x14, jpeg_idct_15x15, jpeg_idct_16x16, jpeg_idct_16x8, jpeg_idct_14x7, jpeg_idct_12x6, jpeg_idct_10x5, jpeg_idct_8x4, jpeg_idct_6x3, jpeg_idct_4x2, jpeg_idct_2x1, jpeg_idct_8x16, jpeg_idct_7x14, jpeg_idct_6x12, jpeg_idct_5x10, jpeg_idct_4x8, jpeg_idct_3x6, jpeg_idct_2x4, jpeg_idct_1x2, jpeg_idct_9x9, jpeg_idct_islow, jpeg_idct_ifast, jpeg_idct_float, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, start_pass_1209, decode_mcu_DC_first, decode_mcu_AC_first, decode_mcu_DC_refine, decode_mcu_AC_refine, decode_mcu, finish_pass_huff, start_pass_huff_decoder, decode_mcu_AC_refine_1220, decode_mcu_DC_refine_1221, decode_mcu_AC_first_1222, decode_mcu_DC_first_1223, decode_mcu_1225, decode_mcu_sub, decompress_data, consume_data, decompress_onepass, dummy_consume_data, start_output_pass, start_input_pass_1235, decompress_smooth_data, start_pass_main, process_data_context_main, process_data_simple_main, process_data_crank_post, finish_output_pass, prepare_for_output_pass, start_pass_merged_upsample, h2v2_merged_upsample, merged_2v_upsample, h2v1_merged_upsample, merged_1v_upsample, start_pass_dpost, post_process_1pass, post_process_prepass, post_process_2pass, sep_upsample, start_pass_upsample, fullsize_upsample, h2v1_upsample, h2v2_upsample, int_upsample, reset_error_mgr, format_message, output_message, emit_message, error_exit, self_destruct, free_pool, access_virt_barray, access_virt_sarray, realize_virt_arrays, request_virt_barray, request_virt_sarray, alloc_barray, alloc_sarray, alloc_large, alloc_small, new_color_map_1_quant, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, start_pass_1_quant, color_quantize3, color_quantize, quantize3_ord_dither, quantize_ord_dither, quantize_fs_dither, new_color_map_2_quant, start_pass_2_quant, pass2_no_dither, pass2_fs_dither, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, finish_pass1, prescan_quantize, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, wrapper_cmp, dummy_consume_data, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, string_read, std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char_____basic_streambuf_28_29_1636, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____setbuf_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29, dummy_consume_data, dummy_consume_data, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsgetn_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____underflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____uflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____xsputn_28char_20const__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1660, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1662, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1663, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1689, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1691, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1692, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t_____basic_streambuf_28_29_1711, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____setbuf_28char__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29, dummy_consume_data, dummy_consume_data, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsgetn_28wchar_t__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____underflow_28_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____uflow_28_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t____xsputn_28wchar_t_20const__2c_20long_29, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____pbackfail_28int_29, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1660, std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1662, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29, virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char_____basic_istream_28_29_1663, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1689, std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1691, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29, virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char_____basic_ostream_28_29_1692, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29_1634, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29, std____2__basic_ios_char_2c_20std____2__char_traits_char_____basic_ios_28_29_1634, std____2__ios_base___ios_base_28_29, std____2__ios_base___ios_base_28_29_1860, __cxx_global_array_dtor_1, std____2____stdinbuf_char______stdinbuf_28_29, std____2____stdinbuf_char___imbue_28std____2__locale_20const__29, std____2____stdinbuf_char___underflow_28_29, std____2____stdinbuf_char___uflow_28_29, std____2____stdinbuf_char___pbackfail_28int_29, std____2____stdinbuf_char______stdinbuf_28_29, std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29, std____2____stdoutbuf_char___sync_28_29, std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29, std____2____stdoutbuf_char___overflow_28int_29, std____2____stdinbuf_wchar_t______stdinbuf_28_29, std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29, std____2____stdinbuf_wchar_t___underflow_28_29, std____2____stdinbuf_wchar_t___uflow_28_29, std____2____stdinbuf_wchar_t___pbackfail_28int_29, std____2____stdinbuf_wchar_t______stdinbuf_28_29, std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29, std____2____stdoutbuf_char___sync_28_29, std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29, std____2____stdoutbuf_wchar_t___overflow_28int_29, emscripten_builtin_free, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, void_20std____2____call_once_proxy_5babi_nn200100_5d_std____2__tuple_std____2__locale__id____get_28_29__$_0_____28void__29, __cxx_global_array_dtor_59, __cxx_global_array_dtor_74, __cxx_global_array_dtor_89, __cxx_global_array_dtor_113, __cxx_global_array_dtor_137, __cxx_global_array_dtor_140, __cxx_global_array_dtor_2746, __cxx_global_array_dtor_31, __cxx_global_array_dtor_32, __cxx_global_array_dtor_34, __cxx_global_array_dtor_36, __cxx_global_array_dtor_38, __cxx_global_array_dtor_40, __cxx_global_array_dtor_42, std____2__locale____imp_____imp_28_29, std____2__locale____imp_____imp_28_29_2589, std____2__locale__facet____on_zero_shared_28_29, std____2__ctype_char____ctype_28_29, std____2__ctype_char____ctype_28_29_2629, std____2__ctype_char___do_toupper_28char_29_20const, std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const, std____2__ctype_char___do_tolower_28char_29_20const, std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const, unsigned_20int_20const__20std____2____identity__operator_28_29_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__29_20const, std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const, std____2__ctype_char___do_narrow_28char_2c_20char_29_20const, std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_2647, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const, dummy_consume_data, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2__numpunct_char____numpunct_28_29, std____2__numpunct_char____numpunct_28_29_2708, std____2__numpunct_char___do_decimal_point_28_29_20const, std____2__numpunct_char___do_thousands_sep_28_29_20const, std____2__numpunct_char___do_grouping_28_29_20const, std____2__numpunct_char___do_truename_28_29_20const, std____2__numpunct_char___do_falsename_28_29_20const, std____2__numpunct_wchar_t____numpunct_28_29, std____2__numpunct_wchar_t____numpunct_28_29_2710, std____2__ios_base__precision_5babi_nn200100_5d_28_29_20const, std____2__ios_base__width_5babi_nn200100_5d_28_29_20const, std____2__numpunct_wchar_t___do_grouping_28_29_20const, std____2__numpunct_wchar_t___do_truename_28_29_20const, std____2__numpunct_wchar_t___do_falsename_28_29_20const, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__ctype_wchar_t___do_is_28unsigned_20long_2c_20wchar_t_29_20const, std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20long__29_20const, std____2__ctype_wchar_t___do_scan_is_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_scan_not_28unsigned_20long_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const, std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const, std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const, std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const, unsigned_20int_20const__20std____2____identity__operator_28_29_5babi_nn200100_5d_unsigned_20int_20const___28unsigned_20int_20const__29_20const, std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const, std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const, std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, __lockfile, __lockfile, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, __lockfile, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, dummy_consume_data, dummy_consume_data, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, dummy_consume_data, dummy_consume_data, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, dummy_consume_data, dummy_consume_data, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const, std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const, dummy_consume_data, dummy_consume_data, std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const, std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const, std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const, std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20double_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const, std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_date_order_28_29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const, std____2____time_get_c_storage_char_____weeks_28_29_20const, std____2____time_get_c_storage_char_____months_28_29_20const, std____2____time_get_c_storage_char_____am_pm_28_29_20const, std____2____time_get_c_storage_char_____c_28_29_20const, std____2____time_get_c_storage_char_____r_28_29_20const, std____2____time_get_c_storage_char_____x_28_29_20const, std____2____time_get_c_storage_char_____X_28_29_20const, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_date_order_28_29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const, std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const, std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const, std____2____time_get_c_storage_wchar_t_____months_28_29_20const, std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const, std____2____time_get_c_storage_wchar_t_____c_28_29_20const, std____2____time_get_c_storage_wchar_t_____r_28_29_20const, std____2____time_get_c_storage_wchar_t_____x_28_29_20const, std____2____time_get_c_storage_wchar_t_____X_28_29_20const, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_2775, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29_2775, std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char______time_put_28_29, std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const, dummy_consume_data, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const, dummy_consume_data, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const, dummy_consume_data, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const, std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const, dummy_consume_data, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const, std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t____29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const, std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char_____do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char___2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const, std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t_____do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t___2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__locale_20const__29_20const, std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__29_20const, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20std____2__locale_20const__29_20const, std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t___20const__29_20const, std____2__basic_streambuf_char_2c_20std____2__char_traits_char____imbue_28std____2__locale_20const__29, std____2____shared_count_____shared_count_28_29_3037, __cxa_pure_virtual, dummy_1397, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, std____2____shared_ptr_pointer_unsigned_20char__2c_20NullArrayDeleter_unsigned_20char__2c_20std____2__allocator_unsigned_20char______on_zero_shared_28_29, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std__bad_alloc__what_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std__bad_array_new_length__what_28_29_20const, std____2____shared_ptr_pointer_vision__Keyframe_96___2c_20std____2__shared_ptr_vision__Keyframe_96______shared_ptr_default_delete_vision__Keyframe_96__2c_20vision__Keyframe_96___2c_20std____2__allocator_vision__Keyframe_96________shared_ptr_pointer_28_29, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_3149, std__logic_error__what_28_29_20const, std__logic_error___logic_error_28_29_3149, std__logic_error___logic_error_28_29_3149]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": __wasm_call_ctors, 
  "malloc": emscripten_builtin_malloc, 
  "free": emscripten_builtin_free, 
  "strerror": strerror, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "fflush": fflush, 
  "__getTypeName": __getTypeName, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "setThrew": setThrew, 
  "_emscripten_tempret_set": _emscripten_tempret_set, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "_emscripten_stack_restore": _emscripten_stack_restore, 
  "_emscripten_stack_alloc": _emscripten_stack_alloc, 
  "emscripten_stack_get_current": emscripten_stack_get_current, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_viijii": legalstub$dynCall_viijii, 
  "dynCall_iiiiij": legalstub$dynCall_iiiiij, 
  "dynCall_iiiiijj": legalstub$dynCall_iiiiijj, 
  "dynCall_iiiiiijj": legalstub$dynCall_iiiiiijj
 };
}

  return asmFunc(info);
}

)(info);
  },
  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          "instance": new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return {
          catch: function() {}
        };
      }
    };
  },
  RuntimeError: Error,
  isWasm2js: true
};

// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (!globalThis.WebAssembly) {
  err("no native wasm support detected");
}

// Wasm globals
//========================================
// Runtime essentials
//========================================
// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */ function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed" + (text ? ": " + text : ""));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */ var isFileURI = filename => filename.startsWith("file://");

// include: runtime_common.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max) >> 2)] = 34821223;
  HEAPU32[(((max) + (4)) >> 2)] = 2310721022;
  // Also test the global address 0 for integrity.
  HEAPU32[((0) >> 2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max) >> 2)];
  var cookie2 = HEAPU32[(((max) + (4)) >> 2)];
  if (cookie1 != 34821223 || cookie2 != 2310721022) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0) >> 2)] != 1668509029) {
    abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
  }
}

// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
var runtimeDebug = true;

// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 25459;
  if (h8[0] !== 115 || h8[1] !== 99) abort("Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)");
})();

function consumedModuleProp(prop) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      set() {
        abort(`Attempt to set \`Module.${prop}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`);
      }
    });
  }
}

function makeInvalidEarlyAccess(name) {
  return () => assert(false, `call to '${name}' via reference taken before Wasm module initialization`);
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === "FS_createPath" || name === "FS_createDataFile" || name === "FS_createPreloadedFile" || name === "FS_preloadFile" || name === "FS_unlink" || name === "addRunDependency" || // The old FS has some functionality that WasmFS lacks.
  name === "FS_createLazyFile" || name === "FS_createDevice" || name === "removeRunDependency";
}

/**
 * Intercept access to a symbols in the global symbol.  This enables us to give
 * informative warnings/errors when folks attempt to use symbols they did not
 * include in their build, or no symbols that no longer exist.
 *
 * We don't define this in MODULARIZE mode since in that mode emscripten symbols
 * are never placed in the global scope.
 */ function hookGlobalSymbolAccess(sym, func) {
  if (!Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        func();
        return undefined;
      }
    });
  }
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is no longer defined by emscripten. ${msg}`);
  });
}

missingGlobal("buffer", "Please use HEAP8.buffer or wasmMemory.buffer");

missingGlobal("asm", "Please use wasmExports instead");

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith("_")) {
      librarySymbol = "$" + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
    }
    warnOnce(msg);
  });
  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
        }
        abort(msg);
      }
    });
  }
}

// end include: runtime_debug.js
// Memory management
var /** @type {!Int8Array} */ HEAP8, /** @type {!Uint8Array} */ HEAPU8, /** @type {!Int16Array} */ HEAP16, /** @type {!Uint16Array} */ HEAPU16, /** @type {!Int32Array} */ HEAP32, /** @type {!Uint32Array} */ HEAPU32, /** @type {!Float32Array} */ HEAPF32, /** @type {!Float64Array} */ HEAPF64;

var runtimeInitialized = false;

function updateMemoryViews() {
  var b = wasmMemory.buffer;
  HEAP8 = new Int8Array(b);
  HEAP16 = new Int16Array(b);
  HEAPU8 = new Uint8Array(b);
  HEAPU16 = new Uint16Array(b);
  HEAP32 = new Int32Array(b);
  HEAPU32 = new Uint32Array(b);
  HEAPF32 = new Float32Array(b);
  HEAPF64 = new Float64Array(b);
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// end include: runtime_common.js
assert(globalThis.Int32Array && globalThis.Float64Array && Int32Array.prototype.subarray && Int32Array.prototype.set, "JS engine does not provide full typed array support");

function preRun() {
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
    while (Module["preRun"].length) {
      addOnPreRun(Module["preRun"].shift());
    }
  }
  consumedModuleProp("preRun");
  // Begin ATPRERUNS hooks
  callRuntimeCallbacks(onPreRuns);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  checkStackCookie();
  // Begin ATINITS hooks
  if (!Module["noFSInit"] && !FS.initialized) FS.init();
  TTY.init();
  // End ATINITS hooks
  wasmExports["__wasm_call_ctors"]();
  // Begin ATPOSTCTORS hooks
  FS.ignorePermissions = false;
}

function postRun() {
  checkStackCookie();
  // PThreads reuse the runtime from the main thread.
  if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
    while (Module["postRun"].length) {
      addOnPostRun(Module["postRun"].shift());
    }
  }
  consumedModuleProp("postRun");
  // Begin ATPOSTRUNS hooks
  callRuntimeCallbacks(onPostRuns);
}

/** @param {string|number=} what */ function abort(what) {
  Module["onAbort"]?.(what);
  what = "Aborted(" + what + ")";
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);
  ABORT = true;
  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.
  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */ var e = new WebAssembly.RuntimeError(what);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;

// When building with wasm2js these 3 functions all no-ops.
function findWasmBinary(file) {}

function getWasmBinary(file) {}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);
    // Warn on some common problems.
    if (isFileURI(binaryFile)) {
      err(`warning: Loading from a file URI (${binaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary && !isFileURI(binaryFile) && !ENVIRONMENT_IS_NODE) {
    try {
      var response = fetch(binaryFile, {
        credentials: "same-origin"
      });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err("falling back to ArrayBuffer instantiation");
    }
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  var imports = {
    "env": wasmImports,
    "wasi_snapshot_preview1": wasmImports
  };
  return imports;
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/ function receiveInstance(instance, module) {
    wasmExports = instance.exports;
    assignWasmExports(wasmExports);
    updateMemoryViews();
    removeRunDependency("wasm-instantiate");
    return wasmExports;
  }
  addRunDependency("wasm-instantiate");
  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result["instance"]);
  }
  var info = getWasmImports();
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module["instantiateWasm"]) {
    return new Promise((resolve, reject) => {
      try {
        Module["instantiateWasm"](info, (inst, mod) => {
          resolve(receiveInstance(inst, mod));
        });
      } catch (e) {
        err(`Module.instantiateWasm callback failed with error: ${e}`);
        reject(e);
      }
    });
  }
  wasmBinaryFile ??= findWasmBinary();
  var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
  var exports = receiveInstantiationResult(result);
  return exports;
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;

var tempI64;

// end include: preamble.js
// Begin JS library code
class ExitStatus {
  name="ExitStatus";
  constructor(status) {
    this.message = `Program terminated with exit(${status})`;
    this.status = status;
  }
}

var callRuntimeCallbacks = callbacks => {
  while (callbacks.length > 0) {
    // Pass the module as the first argument.
    callbacks.shift()(Module);
  }
};

var onPostRuns = [];

var addOnPostRun = cb => onPostRuns.push(cb);

var onPreRuns = [];

var addOnPreRun = cb => onPreRuns.push(cb);

var runDependencies = 0;

var dependenciesFulfilled = null;

var runDependencyTracking = {};

var runDependencyWatcher = null;

var removeRunDependency = id => {
  runDependencies--;
  Module["monitorRunDependencies"]?.(runDependencies);
  assert(id, "removeRunDependency requires an ID");
  assert(runDependencyTracking[id]);
  delete runDependencyTracking[id];
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback();
    }
  }
};

var addRunDependency = id => {
  runDependencies++;
  Module["monitorRunDependencies"]?.(runDependencies);
  assert(id, "addRunDependency requires an ID");
  assert(!runDependencyTracking[id]);
  runDependencyTracking[id] = 1;
  if (runDependencyWatcher === null && globalThis.setInterval) {
    // Check for missing dependencies every few seconds
    runDependencyWatcher = setInterval(() => {
      if (ABORT) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
        return;
      }
      var shown = false;
      for (var dep in runDependencyTracking) {
        if (!shown) {
          shown = true;
          err("still waiting on run dependencies:");
        }
        err(`dependency: ${dep}`);
      }
      if (shown) {
        err("(end of list)");
      }
    }, 1e4);
    // Prevent this timer from keeping the runtime alive if nothing
    // else is.
    runDependencyWatcher.unref?.();
  }
};

var noExitRuntime = true;

var ptrToString = ptr => {
  assert(typeof ptr === "number", `ptrToString expects a number, got ${typeof ptr}`);
  // Convert to 32-bit unsigned value
  ptr >>>= 0;
  return "0x" + ptr.toString(16).padStart(8, "0");
};

var stackRestore = val => __emscripten_stack_restore(val);

var stackSave = () => _emscripten_stack_get_current();

var warnOnce = text => {
  warnOnce.shown ||= {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    if (ENVIRONMENT_IS_NODE) text = "warning: " + text;
    err(text);
  }
};

class ExceptionInfo {
  // excPtr - Thrown object pointer to wrap. Metadata pointer is calculated from it.
  constructor(excPtr) {
    this.excPtr = excPtr;
    this.ptr = excPtr - 24;
  }
  set_type(type) {
    HEAPU32[(((this.ptr) + (4)) >> 2)] = type;
  }
  get_type() {
    return HEAPU32[(((this.ptr) + (4)) >> 2)];
  }
  set_destructor(destructor) {
    HEAPU32[(((this.ptr) + (8)) >> 2)] = destructor;
  }
  get_destructor() {
    return HEAPU32[(((this.ptr) + (8)) >> 2)];
  }
  set_caught(caught) {
    caught = caught ? 1 : 0;
    HEAP8[(this.ptr) + (12)] = caught;
  }
  get_caught() {
    return HEAP8[(this.ptr) + (12)] != 0;
  }
  set_rethrown(rethrown) {
    rethrown = rethrown ? 1 : 0;
    HEAP8[(this.ptr) + (13)] = rethrown;
  }
  get_rethrown() {
    return HEAP8[(this.ptr) + (13)] != 0;
  }
  // Initialize native structure fields. Should be called once after allocated.
  init(type, destructor) {
    this.set_adjusted_ptr(0);
    this.set_type(type);
    this.set_destructor(destructor);
  }
  set_adjusted_ptr(adjustedPtr) {
    HEAPU32[(((this.ptr) + (16)) >> 2)] = adjustedPtr;
  }
  get_adjusted_ptr() {
    return HEAPU32[(((this.ptr) + (16)) >> 2)];
  }
}

var exceptionLast = 0;

var uncaughtExceptionCount = 0;

var ___cxa_throw = (ptr, type, destructor) => {
  var info = new ExceptionInfo(ptr);
  // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
  info.init(type, destructor);
  exceptionLast = ptr;
  uncaughtExceptionCount++;
  assert(false, "Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.");
};

var syscallGetVarargI = () => {
  assert(SYSCALLS.varargs != undefined);
  // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.
  var ret = HEAP32[((+SYSCALLS.varargs) >> 2)];
  SYSCALLS.varargs += 4;
  return ret;
};

var syscallGetVarargP = syscallGetVarargI;

var PATH = {
  isAbs: path => path.charAt(0) === "/",
  splitPath: filename => {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: (parts, allowAboveRoot) => {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (;up; up--) {
        parts.unshift("..");
      }
    }
    return parts;
  },
  normalize: path => {
    var isAbsolute = PATH.isAbs(path), trailingSlash = path.slice(-1) === "/";
    // Normalize the path
    path = PATH.normalizeArray(path.split("/").filter(p => !!p), !isAbsolute).join("/");
    if (!path && !isAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isAbsolute ? "/" : "") + path;
  },
  dirname: path => {
    var result = PATH.splitPath(path), root = result[0], dir = result[1];
    if (!root && !dir) {
      // No dirname whatsoever
      return ".";
    }
    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.slice(0, -1);
    }
    return root + dir;
  },
  basename: path => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join: (...paths) => PATH.normalize(paths.join("/")),
  join2: (l, r) => PATH.normalize(l + "/" + r)
};

var initRandomFill = () => {
  // This block is not needed on v19+ since crypto.getRandomValues is builtin
  if (ENVIRONMENT_IS_NODE) {
    var nodeCrypto = require("crypto");
    return view => nodeCrypto.randomFillSync(view);
  }
  return view => crypto.getRandomValues(view);
};

var randomFill = view => {
  // Lazily init on the first invocation.
  (randomFill = initRandomFill())(view);
};

var PATH_FS = {
  resolve: (...args) => {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? args[i] : FS.cwd();
      // Skip empty and invalid entries
      if (typeof path != "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        return "";
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = PATH.isAbs(path);
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(p => !!p), !resolvedAbsolute).join("/");
    return ((resolvedAbsolute ? "/" : "") + resolvedPath) || ".";
  },
  relative: (from, to) => {
    from = PATH_FS.resolve(from).slice(1);
    to = PATH_FS.resolve(to).slice(1);
    function trim(arr) {
      var start = 0;
      for (;start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (;end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
};

var UTF8Decoder = new TextDecoder;

var findStringEnd = (heapOrArray, idx, maxBytesToRead, ignoreNul) => {
  var maxIdx = idx + maxBytesToRead;
  if (ignoreNul) return maxIdx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.
  // As a tiny code save trick, compare idx against maxIdx using a negation,
  // so that maxBytesToRead=undefined/NaN means Infinity.
  while (heapOrArray[idx] && !(idx >= maxIdx)) ++idx;
  return idx;
};

/**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @param {boolean=} ignoreNul - If true, the function will not stop on a NUL character.
     * @return {string}
     */ var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead, ignoreNul) => {
  var endPtr = findStringEnd(heapOrArray, idx, maxBytesToRead, ignoreNul);
  return UTF8Decoder.decode(heapOrArray.buffer ? heapOrArray.subarray(idx, endPtr) : new Uint8Array(heapOrArray.slice(idx, endPtr)));
};

var FS_stdin_getChar_buffer = [];

var lengthBytesUTF8 = str => {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i);
    // possibly a lead surrogate
    if (c <= 127) {
      len++;
    } else if (c <= 2047) {
      len += 2;
    } else if (c >= 55296 && c <= 57343) {
      len += 4;
      ++i;
    } else {
      len += 3;
    }
  }
  return len;
};

var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
  assert(typeof str === "string", `stringToUTF8Array expects a string (got ${typeof str})`);
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0)) return 0;
  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1;
  // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.codePointAt(i);
    if (u <= 127) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 2047) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 192 | (u >> 6);
      heap[outIdx++] = 128 | (u & 63);
    } else if (u <= 65535) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 224 | (u >> 12);
      heap[outIdx++] = 128 | ((u >> 6) & 63);
      heap[outIdx++] = 128 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 1114111) warnOnce("Invalid Unicode code point " + ptrToString(u) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
      heap[outIdx++] = 240 | (u >> 18);
      heap[outIdx++] = 128 | ((u >> 12) & 63);
      heap[outIdx++] = 128 | ((u >> 6) & 63);
      heap[outIdx++] = 128 | (u & 63);
      // Gotcha: if codePoint is over 0xFFFF, it is represented as a surrogate pair in UTF-16.
      // We need to manually skip over the second code unit for correct iteration.
      i++;
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
};

/** @type {function(string, boolean=, number=)} */ var intArrayFromString = (stringy, dontAddNull, length) => {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
};

var FS_stdin_getChar = () => {
  if (!FS_stdin_getChar_buffer.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
      // we will read data by chunks of BUFSIZE
      var BUFSIZE = 256;
      var buf = Buffer.alloc(BUFSIZE);
      var bytesRead = 0;
      // For some reason we must suppress a closure warning here, even though
      // fd definitely exists on process.stdin, and is even the proper way to
      // get the fd of stdin,
      // https://github.com/nodejs/help/issues/2136#issuecomment-523649904
      // This started to happen after moving this logic out of library_tty.js,
      // so it is related to the surrounding code in some unclear manner.
      /** @suppress {missingProperties} */ var fd = process.stdin.fd;
      try {
        bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);
      } catch (e) {
        // Cross-platform differences: on Windows, reading EOF throws an
        // exception, but on other OSes, reading EOF returns 0. Uniformize
        // behavior by treating the EOF exception to return 0.
        if (e.toString().includes("EOF")) bytesRead = 0; else throw e;
      }
      if (bytesRead > 0) {
        result = buf.slice(0, bytesRead).toString("utf-8");
      }
    } else if (globalThis.window?.prompt) {
      // Browser.
      result = window.prompt("Input: ");
      // returns null on cancel
      if (result !== null) {
        result += "\n";
      }
    } else {}
    if (!result) {
      return null;
    }
    FS_stdin_getChar_buffer = intArrayFromString(result, true);
  }
  return FS_stdin_getChar_buffer.shift();
};

var TTY = {
  ttys: [],
  init() {},
  shutdown() {},
  register(dev, ops) {
    TTY.ttys[dev] = {
      input: [],
      output: [],
      ops
    };
    FS.registerDevice(dev, TTY.stream_ops);
  },
  stream_ops: {
    open(stream) {
      var tty = TTY.ttys[stream.node.rdev];
      if (!tty) {
        throw new FS.ErrnoError(43);
      }
      stream.tty = tty;
      stream.seekable = false;
    },
    close(stream) {
      // flush any pending line data
      stream.tty.ops.fsync(stream.tty);
    },
    fsync(stream) {
      stream.tty.ops.fsync(stream.tty);
    },
    read(stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.get_char) {
        throw new FS.ErrnoError(60);
      }
      var bytesRead = 0;
      for (var i = 0; i < length; i++) {
        var result;
        try {
          result = stream.tty.ops.get_char(stream.tty);
        } catch (e) {
          throw new FS.ErrnoError(29);
        }
        if (result === undefined && bytesRead === 0) {
          throw new FS.ErrnoError(6);
        }
        if (result === null || result === undefined) break;
        bytesRead++;
        buffer[offset + i] = result;
      }
      if (bytesRead) {
        stream.node.atime = Date.now();
      }
      return bytesRead;
    },
    write(stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.put_char) {
        throw new FS.ErrnoError(60);
      }
      try {
        for (var i = 0; i < length; i++) {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
        }
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
      if (length) {
        stream.node.mtime = stream.node.ctime = Date.now();
      }
      return i;
    }
  },
  default_tty_ops: {
    get_char(tty) {
      return FS_stdin_getChar();
    },
    put_char(tty, val) {
      if (val === null || val === 10) {
        out(UTF8ArrayToString(tty.output));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    fsync(tty) {
      if (tty.output?.length > 0) {
        out(UTF8ArrayToString(tty.output));
        tty.output = [];
      }
    },
    ioctl_tcgets(tty) {
      // typical setting
      return {
        c_iflag: 25856,
        c_oflag: 5,
        c_cflag: 191,
        c_lflag: 35387,
        c_cc: [ 3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      };
    },
    ioctl_tcsets(tty, optional_actions, data) {
      // currently just ignore
      return 0;
    },
    ioctl_tiocgwinsz(tty) {
      return [ 24, 80 ];
    }
  },
  default_tty1_ops: {
    put_char(tty, val) {
      if (val === null || val === 10) {
        err(UTF8ArrayToString(tty.output));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    fsync(tty) {
      if (tty.output?.length > 0) {
        err(UTF8ArrayToString(tty.output));
        tty.output = [];
      }
    }
  }
};

var mmapAlloc = size => {
  abort("internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported");
};

var MEMFS = {
  ops_table: null,
  mount(mount) {
    return MEMFS.createNode(null, "/", 16895, 0);
  },
  createNode(parent, name, mode, dev) {
    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
      // no supported
      throw new FS.ErrnoError(63);
    }
    MEMFS.ops_table ||= {
      dir: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr,
          lookup: MEMFS.node_ops.lookup,
          mknod: MEMFS.node_ops.mknod,
          rename: MEMFS.node_ops.rename,
          unlink: MEMFS.node_ops.unlink,
          rmdir: MEMFS.node_ops.rmdir,
          readdir: MEMFS.node_ops.readdir,
          symlink: MEMFS.node_ops.symlink
        },
        stream: {
          llseek: MEMFS.stream_ops.llseek
        }
      },
      file: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr
        },
        stream: {
          llseek: MEMFS.stream_ops.llseek,
          read: MEMFS.stream_ops.read,
          write: MEMFS.stream_ops.write,
          mmap: MEMFS.stream_ops.mmap,
          msync: MEMFS.stream_ops.msync
        }
      },
      link: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr,
          readlink: MEMFS.node_ops.readlink
        },
        stream: {}
      },
      chrdev: {
        node: {
          getattr: MEMFS.node_ops.getattr,
          setattr: MEMFS.node_ops.setattr
        },
        stream: FS.chrdev_stream_ops
      }
    };
    var node = FS.createNode(parent, name, mode, dev);
    if (FS.isDir(node.mode)) {
      node.node_ops = MEMFS.ops_table.dir.node;
      node.stream_ops = MEMFS.ops_table.dir.stream;
      node.contents = {};
    } else if (FS.isFile(node.mode)) {
      node.node_ops = MEMFS.ops_table.file.node;
      node.stream_ops = MEMFS.ops_table.file.stream;
      node.usedBytes = 0;
      // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
      // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
      // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
      // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
      node.contents = null;
    } else if (FS.isLink(node.mode)) {
      node.node_ops = MEMFS.ops_table.link.node;
      node.stream_ops = MEMFS.ops_table.link.stream;
    } else if (FS.isChrdev(node.mode)) {
      node.node_ops = MEMFS.ops_table.chrdev.node;
      node.stream_ops = MEMFS.ops_table.chrdev.stream;
    }
    node.atime = node.mtime = node.ctime = Date.now();
    // add the new node to the parent
    if (parent) {
      parent.contents[name] = node;
      parent.atime = parent.mtime = parent.ctime = node.atime;
    }
    return node;
  },
  getFileDataAsTypedArray(node) {
    if (!node.contents) return new Uint8Array(0);
    if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
    // Make sure to not return excess unused bytes.
    return new Uint8Array(node.contents);
  },
  expandFileStorage(node, newCapacity) {
    var prevCapacity = node.contents ? node.contents.length : 0;
    if (prevCapacity >= newCapacity) return;
    // No need to expand, the storage was already large enough.
    // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
    // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
    // avoid overshooting the allocation cap by a very large margin.
    var CAPACITY_DOUBLING_MAX = 1024 * 1024;
    newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) >>> 0);
    if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
    // At minimum allocate 256b for each file when expanding.
    var oldContents = node.contents;
    node.contents = new Uint8Array(newCapacity);
    // Allocate new storage.
    if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
  },
  resizeFileStorage(node, newSize) {
    if (node.usedBytes == newSize) return;
    if (newSize == 0) {
      node.contents = null;
      // Fully decommit when requesting a resize to zero.
      node.usedBytes = 0;
    } else {
      var oldContents = node.contents;
      node.contents = new Uint8Array(newSize);
      // Allocate new storage.
      if (oldContents) {
        node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
      }
      node.usedBytes = newSize;
    }
  },
  node_ops: {
    getattr(node) {
      var attr = {};
      // device numbers reuse inode numbers.
      attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
      attr.ino = node.id;
      attr.mode = node.mode;
      attr.nlink = 1;
      attr.uid = 0;
      attr.gid = 0;
      attr.rdev = node.rdev;
      if (FS.isDir(node.mode)) {
        attr.size = 4096;
      } else if (FS.isFile(node.mode)) {
        attr.size = node.usedBytes;
      } else if (FS.isLink(node.mode)) {
        attr.size = node.link.length;
      } else {
        attr.size = 0;
      }
      attr.atime = new Date(node.atime);
      attr.mtime = new Date(node.mtime);
      attr.ctime = new Date(node.ctime);
      // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
      //       but this is not required by the standard.
      attr.blksize = 4096;
      attr.blocks = Math.ceil(attr.size / attr.blksize);
      return attr;
    },
    setattr(node, attr) {
      for (const key of [ "mode", "atime", "mtime", "ctime" ]) {
        if (attr[key] != null) {
          node[key] = attr[key];
        }
      }
      if (attr.size !== undefined) {
        MEMFS.resizeFileStorage(node, attr.size);
      }
    },
    lookup(parent, name) {
      throw new FS.ErrnoError(44);
    },
    mknod(parent, name, mode, dev) {
      return MEMFS.createNode(parent, name, mode, dev);
    },
    rename(old_node, new_dir, new_name) {
      var new_node;
      try {
        new_node = FS.lookupNode(new_dir, new_name);
      } catch (e) {}
      if (new_node) {
        if (FS.isDir(old_node.mode)) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          for (var i in new_node.contents) {
            throw new FS.ErrnoError(55);
          }
        }
        FS.hashRemoveNode(new_node);
      }
      // do the internal rewiring
      delete old_node.parent.contents[old_node.name];
      new_dir.contents[new_name] = old_node;
      old_node.name = new_name;
      new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
    },
    unlink(parent, name) {
      delete parent.contents[name];
      parent.ctime = parent.mtime = Date.now();
    },
    rmdir(parent, name) {
      var node = FS.lookupNode(parent, name);
      for (var i in node.contents) {
        throw new FS.ErrnoError(55);
      }
      delete parent.contents[name];
      parent.ctime = parent.mtime = Date.now();
    },
    readdir(node) {
      return [ ".", "..", ...Object.keys(node.contents) ];
    },
    symlink(parent, newname, oldpath) {
      var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
      node.link = oldpath;
      return node;
    },
    readlink(node) {
      if (!FS.isLink(node.mode)) {
        throw new FS.ErrnoError(28);
      }
      return node.link;
    }
  },
  stream_ops: {
    read(stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= stream.node.usedBytes) return 0;
      var size = Math.min(stream.node.usedBytes - position, length);
      assert(size >= 0);
      if (size > 8 && contents.subarray) {
        // non-trivial, and typed array
        buffer.set(contents.subarray(position, position + size), offset);
      } else {
        for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
      }
      return size;
    },
    write(stream, buffer, offset, length, position, canOwn) {
      // The data buffer should be a typed array view
      assert(!(buffer instanceof ArrayBuffer));
      // If the buffer is located in main memory (HEAP), and if
      // memory can grow, we can't hold on to references of the
      // memory buffer, as they may get invalidated. That means we
      // need to do copy its contents.
      if (buffer.buffer === HEAP8.buffer) {
        canOwn = false;
      }
      if (!length) return 0;
      var node = stream.node;
      node.mtime = node.ctime = Date.now();
      if (buffer.subarray && (!node.contents || node.contents.subarray)) {
        // This write is from a typed array to a typed array?
        if (canOwn) {
          assert(position === 0, "canOwn must imply no weird position inside the file");
          node.contents = buffer.subarray(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (node.usedBytes === 0 && position === 0) {
          // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
          node.contents = buffer.slice(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (position + length <= node.usedBytes) {
          // Writing to an already allocated and used subrange of the file?
          node.contents.set(buffer.subarray(offset, offset + length), position);
          return length;
        }
      }
      // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
      MEMFS.expandFileStorage(node, position + length);
      if (node.contents.subarray && buffer.subarray) {
        // Use typed array write which is available.
        node.contents.set(buffer.subarray(offset, offset + length), position);
      } else {
        for (var i = 0; i < length; i++) {
          node.contents[position + i] = buffer[offset + i];
        }
      }
      node.usedBytes = Math.max(node.usedBytes, position + length);
      return length;
    },
    llseek(stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        position += stream.position;
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.usedBytes;
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(28);
      }
      return position;
    },
    mmap(stream, length, position, prot, flags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(43);
      }
      var ptr;
      var allocated;
      var contents = stream.node.contents;
      // Only make a new copy when MAP_PRIVATE is specified.
      if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
        // We can't emulate MAP_SHARED when the file is not backed by the
        // buffer we're mapping to (e.g. the HEAP buffer).
        allocated = false;
        ptr = contents.byteOffset;
      } else {
        allocated = true;
        ptr = mmapAlloc(length);
        if (!ptr) {
          throw new FS.ErrnoError(48);
        }
        if (contents) {
          // Try to avoid unnecessary slices.
          if (position > 0 || position + length < contents.length) {
            if (contents.subarray) {
              contents = contents.subarray(position, position + length);
            } else {
              contents = Array.prototype.slice.call(contents, position, position + length);
            }
          }
          HEAP8.set(contents, ptr);
        }
      }
      return {
        ptr,
        allocated
      };
    },
    msync(stream, buffer, offset, length, mmapFlags) {
      MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
      // should we check if bytesWritten and length are the same?
      return 0;
    }
  }
};

var FS_modeStringToFlags = str => {
  var flagModes = {
    "r": 0,
    "r+": 2,
    "w": 512 | 64 | 1,
    "w+": 512 | 64 | 2,
    "a": 1024 | 64 | 1,
    "a+": 1024 | 64 | 2
  };
  var flags = flagModes[str];
  if (typeof flags == "undefined") {
    throw new Error(`Unknown file open mode: ${str}`);
  }
  return flags;
};

var FS_getMode = (canRead, canWrite) => {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
};

/**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index.
     * @param {boolean=} ignoreNul - If true, the function will not stop on a NUL character.
     * @return {string}
     */ var UTF8ToString = (ptr, maxBytesToRead, ignoreNul) => {
  assert(typeof ptr == "number", `UTF8ToString expects a number (got ${typeof ptr})`);
  if (!ptr) return "";
  var end = findStringEnd(HEAPU8, ptr, maxBytesToRead, ignoreNul);
  return UTF8Decoder.decode(HEAPU8.subarray(ptr, end));
};

var strError = errno => UTF8ToString(_strerror(errno));

var ERRNO_CODES = {
  "EPERM": 63,
  "ENOENT": 44,
  "ESRCH": 71,
  "EINTR": 27,
  "EIO": 29,
  "ENXIO": 60,
  "E2BIG": 1,
  "ENOEXEC": 45,
  "EBADF": 8,
  "ECHILD": 12,
  "EAGAIN": 6,
  "EWOULDBLOCK": 6,
  "ENOMEM": 48,
  "EACCES": 2,
  "EFAULT": 21,
  "ENOTBLK": 105,
  "EBUSY": 10,
  "EEXIST": 20,
  "EXDEV": 75,
  "ENODEV": 43,
  "ENOTDIR": 54,
  "EISDIR": 31,
  "EINVAL": 28,
  "ENFILE": 41,
  "EMFILE": 33,
  "ENOTTY": 59,
  "ETXTBSY": 74,
  "EFBIG": 22,
  "ENOSPC": 51,
  "ESPIPE": 70,
  "EROFS": 69,
  "EMLINK": 34,
  "EPIPE": 64,
  "EDOM": 18,
  "ERANGE": 68,
  "ENOMSG": 49,
  "EIDRM": 24,
  "ECHRNG": 106,
  "EL2NSYNC": 156,
  "EL3HLT": 107,
  "EL3RST": 108,
  "ELNRNG": 109,
  "EUNATCH": 110,
  "ENOCSI": 111,
  "EL2HLT": 112,
  "EDEADLK": 16,
  "ENOLCK": 46,
  "EBADE": 113,
  "EBADR": 114,
  "EXFULL": 115,
  "ENOANO": 104,
  "EBADRQC": 103,
  "EBADSLT": 102,
  "EDEADLOCK": 16,
  "EBFONT": 101,
  "ENOSTR": 100,
  "ENODATA": 116,
  "ETIME": 117,
  "ENOSR": 118,
  "ENONET": 119,
  "ENOPKG": 120,
  "EREMOTE": 121,
  "ENOLINK": 47,
  "EADV": 122,
  "ESRMNT": 123,
  "ECOMM": 124,
  "EPROTO": 65,
  "EMULTIHOP": 36,
  "EDOTDOT": 125,
  "EBADMSG": 9,
  "ENOTUNIQ": 126,
  "EBADFD": 127,
  "EREMCHG": 128,
  "ELIBACC": 129,
  "ELIBBAD": 130,
  "ELIBSCN": 131,
  "ELIBMAX": 132,
  "ELIBEXEC": 133,
  "ENOSYS": 52,
  "ENOTEMPTY": 55,
  "ENAMETOOLONG": 37,
  "ELOOP": 32,
  "EOPNOTSUPP": 138,
  "EPFNOSUPPORT": 139,
  "ECONNRESET": 15,
  "ENOBUFS": 42,
  "EAFNOSUPPORT": 5,
  "EPROTOTYPE": 67,
  "ENOTSOCK": 57,
  "ENOPROTOOPT": 50,
  "ESHUTDOWN": 140,
  "ECONNREFUSED": 14,
  "EADDRINUSE": 3,
  "ECONNABORTED": 13,
  "ENETUNREACH": 40,
  "ENETDOWN": 38,
  "ETIMEDOUT": 73,
  "EHOSTDOWN": 142,
  "EHOSTUNREACH": 23,
  "EINPROGRESS": 26,
  "EALREADY": 7,
  "EDESTADDRREQ": 17,
  "EMSGSIZE": 35,
  "EPROTONOSUPPORT": 66,
  "ESOCKTNOSUPPORT": 137,
  "EADDRNOTAVAIL": 4,
  "ENETRESET": 39,
  "EISCONN": 30,
  "ENOTCONN": 53,
  "ETOOMANYREFS": 141,
  "EUSERS": 136,
  "EDQUOT": 19,
  "ESTALE": 72,
  "ENOTSUP": 138,
  "ENOMEDIUM": 148,
  "EILSEQ": 25,
  "EOVERFLOW": 61,
  "ECANCELED": 11,
  "ENOTRECOVERABLE": 56,
  "EOWNERDEAD": 62,
  "ESTRPIPE": 135
};

var asyncLoad = async url => {
  var arrayBuffer = await readAsync(url);
  assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
  return new Uint8Array(arrayBuffer);
};

var FS_createDataFile = (...args) => FS.createDataFile(...args);

var getUniqueRunDependency = id => {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
};

var preloadPlugins = [];

var FS_handledByPreloadPlugin = async (byteArray, fullname) => {
  // Ensure plugins are ready.
  if (typeof Browser != "undefined") Browser.init();
  for (var plugin of preloadPlugins) {
    if (plugin["canHandle"](fullname)) {
      assert(plugin["handle"].constructor.name === "AsyncFunction", "Filesystem plugin handlers must be async functions (See #24914)");
      return plugin["handle"](byteArray, fullname);
    }
  }
  // In no plugin handled this file then return the original/unmodified
  // byteArray.
  return byteArray;
};

var FS_preloadFile = async (parent, name, url, canRead, canWrite, dontCreateFile, canOwn, preFinish) => {
  // TODO we should allow people to just pass in a complete filename instead
  // of parent and name being that we just join them anyways
  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency(`cp ${fullname}`);
  // might have several active requests for the same fullname
  addRunDependency(dep);
  try {
    var byteArray = url;
    if (typeof url == "string") {
      byteArray = await asyncLoad(url);
    }
    byteArray = await FS_handledByPreloadPlugin(byteArray, fullname);
    preFinish?.();
    if (!dontCreateFile) {
      FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
  } finally {
    removeRunDependency(dep);
  }
};

var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
  FS_preloadFile(parent, name, url, canRead, canWrite, dontCreateFile, canOwn, preFinish).then(onload).catch(onerror);
};

var FS = {
  root: null,
  mounts: [],
  devices: {},
  streams: [],
  nextInode: 1,
  nameTable: null,
  currentPath: "/",
  initialized: false,
  ignorePermissions: true,
  filesystems: null,
  syncFSRequests: 0,
  readFiles: {},
  ErrnoError: class extends Error {
    name="ErrnoError";
    // We set the `name` property to be able to identify `FS.ErrnoError`
    // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
    // - when using PROXYFS, an error can come from an underlying FS
    // as different FS objects have their own FS.ErrnoError each,
    // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
    // we'll use the reliable test `err.name == "ErrnoError"` instead
    constructor(errno) {
      super(runtimeInitialized ? strError(errno) : "");
      this.errno = errno;
      for (var key in ERRNO_CODES) {
        if (ERRNO_CODES[key] === errno) {
          this.code = key;
          break;
        }
      }
    }
  },
  FSStream: class {
    shared={};
    get object() {
      return this.node;
    }
    set object(val) {
      this.node = val;
    }
    get isRead() {
      return (this.flags & 2097155) !== 1;
    }
    get isWrite() {
      return (this.flags & 2097155) !== 0;
    }
    get isAppend() {
      return (this.flags & 1024);
    }
    get flags() {
      return this.shared.flags;
    }
    set flags(val) {
      this.shared.flags = val;
    }
    get position() {
      return this.shared.position;
    }
    set position(val) {
      this.shared.position = val;
    }
  },
  FSNode: class {
    node_ops={};
    stream_ops={};
    readMode=292 | 73;
    writeMode=146;
    mounted=null;
    constructor(parent, name, mode, rdev) {
      if (!parent) {
        parent = this;
      }
      this.parent = parent;
      this.mount = parent.mount;
      this.id = FS.nextInode++;
      this.name = name;
      this.mode = mode;
      this.rdev = rdev;
      this.atime = this.mtime = this.ctime = Date.now();
    }
    get read() {
      return (this.mode & this.readMode) === this.readMode;
    }
    set read(val) {
      val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
    }
    get write() {
      return (this.mode & this.writeMode) === this.writeMode;
    }
    set write(val) {
      val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
    }
    get isFolder() {
      return FS.isDir(this.mode);
    }
    get isDevice() {
      return FS.isChrdev(this.mode);
    }
  },
  lookupPath(path, opts = {}) {
    if (!path) {
      throw new FS.ErrnoError(44);
    }
    opts.follow_mount ??= true;
    if (!PATH.isAbs(path)) {
      path = FS.cwd() + "/" + path;
    }
    // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
    linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
      // split the absolute path
      var parts = path.split("/").filter(p => !!p);
      // start at the root
      var current = FS.root;
      var current_path = "/";
      for (var i = 0; i < parts.length; i++) {
        var islast = (i === parts.length - 1);
        if (islast && opts.parent) {
          // stop resolving
          break;
        }
        if (parts[i] === ".") {
          continue;
        }
        if (parts[i] === "..") {
          current_path = PATH.dirname(current_path);
          if (FS.isRoot(current)) {
            path = current_path + "/" + parts.slice(i + 1).join("/");
            // We're making progress here, don't let many consecutive ..'s
            // lead to ELOOP
            nlinks--;
            continue linkloop;
          } else {
            current = current.parent;
          }
          continue;
        }
        current_path = PATH.join2(current_path, parts[i]);
        try {
          current = FS.lookupNode(current, parts[i]);
        } catch (e) {
          // if noent_okay is true, suppress a ENOENT in the last component
          // and return an object with an undefined node. This is needed for
          // resolving symlinks in the path when creating a file.
          if ((e?.errno === 44) && islast && opts.noent_okay) {
            return {
              path: current_path
            };
          }
          throw e;
        }
        // jump to the mount's root node if this is a mountpoint
        if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
          current = current.mounted.root;
        }
        // by default, lookupPath will not follow a symlink if it is the final path component.
        // setting opts.follow = true will override this behavior.
        if (FS.isLink(current.mode) && (!islast || opts.follow)) {
          if (!current.node_ops.readlink) {
            throw new FS.ErrnoError(52);
          }
          var link = current.node_ops.readlink(current);
          if (!PATH.isAbs(link)) {
            link = PATH.dirname(current_path) + "/" + link;
          }
          path = link + "/" + parts.slice(i + 1).join("/");
          continue linkloop;
        }
      }
      return {
        path: current_path,
        node: current
      };
    }
    throw new FS.ErrnoError(32);
  },
  getPath(node) {
    var path;
    while (true) {
      if (FS.isRoot(node)) {
        var mount = node.mount.mountpoint;
        if (!path) return mount;
        return mount[mount.length - 1] !== "/" ? `${mount}/${path}` : mount + path;
      }
      path = path ? `${node.name}/${path}` : node.name;
      node = node.parent;
    }
  },
  hashName(parentid, name) {
    var hash = 0;
    for (var i = 0; i < name.length; i++) {
      hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
    }
    return ((parentid + hash) >>> 0) % FS.nameTable.length;
  },
  hashAddNode(node) {
    var hash = FS.hashName(node.parent.id, node.name);
    node.name_next = FS.nameTable[hash];
    FS.nameTable[hash] = node;
  },
  hashRemoveNode(node) {
    var hash = FS.hashName(node.parent.id, node.name);
    if (FS.nameTable[hash] === node) {
      FS.nameTable[hash] = node.name_next;
    } else {
      var current = FS.nameTable[hash];
      while (current) {
        if (current.name_next === node) {
          current.name_next = node.name_next;
          break;
        }
        current = current.name_next;
      }
    }
  },
  lookupNode(parent, name) {
    var errCode = FS.mayLookup(parent);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    var hash = FS.hashName(parent.id, name);
    for (var node = FS.nameTable[hash]; node; node = node.name_next) {
      var nodeName = node.name;
      if (node.parent.id === parent.id && nodeName === name) {
        return node;
      }
    }
    // if we failed to find it in the cache, call into the VFS
    return FS.lookup(parent, name);
  },
  createNode(parent, name, mode, rdev) {
    assert(typeof parent == "object");
    var node = new FS.FSNode(parent, name, mode, rdev);
    FS.hashAddNode(node);
    return node;
  },
  destroyNode(node) {
    FS.hashRemoveNode(node);
  },
  isRoot(node) {
    return node === node.parent;
  },
  isMountpoint(node) {
    return !!node.mounted;
  },
  isFile(mode) {
    return (mode & 61440) === 32768;
  },
  isDir(mode) {
    return (mode & 61440) === 16384;
  },
  isLink(mode) {
    return (mode & 61440) === 40960;
  },
  isChrdev(mode) {
    return (mode & 61440) === 8192;
  },
  isBlkdev(mode) {
    return (mode & 61440) === 24576;
  },
  isFIFO(mode) {
    return (mode & 61440) === 4096;
  },
  isSocket(mode) {
    return (mode & 49152) === 49152;
  },
  flagsToPermissionString(flag) {
    var perms = [ "r", "w", "rw" ][flag & 3];
    if ((flag & 512)) {
      perms += "w";
    }
    return perms;
  },
  nodePermissions(node, perms) {
    if (FS.ignorePermissions) {
      return 0;
    }
    // return 0 if any user, group or owner bits are set.
    if (perms.includes("r") && !(node.mode & 292)) {
      return 2;
    } else if (perms.includes("w") && !(node.mode & 146)) {
      return 2;
    } else if (perms.includes("x") && !(node.mode & 73)) {
      return 2;
    }
    return 0;
  },
  mayLookup(dir) {
    if (!FS.isDir(dir.mode)) return 54;
    var errCode = FS.nodePermissions(dir, "x");
    if (errCode) return errCode;
    if (!dir.node_ops.lookup) return 2;
    return 0;
  },
  mayCreate(dir, name) {
    if (!FS.isDir(dir.mode)) {
      return 54;
    }
    try {
      var node = FS.lookupNode(dir, name);
      return 20;
    } catch (e) {}
    return FS.nodePermissions(dir, "wx");
  },
  mayDelete(dir, name, isdir) {
    var node;
    try {
      node = FS.lookupNode(dir, name);
    } catch (e) {
      return e.errno;
    }
    var errCode = FS.nodePermissions(dir, "wx");
    if (errCode) {
      return errCode;
    }
    if (isdir) {
      if (!FS.isDir(node.mode)) {
        return 54;
      }
      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
        return 10;
      }
    } else {
      if (FS.isDir(node.mode)) {
        return 31;
      }
    }
    return 0;
  },
  mayOpen(node, flags) {
    if (!node) {
      return 44;
    }
    if (FS.isLink(node.mode)) {
      return 32;
    } else if (FS.isDir(node.mode)) {
      if (FS.flagsToPermissionString(flags) !== "r" || (flags & (512 | 64))) {
        // TODO: check for O_SEARCH? (== search for dir only)
        return 31;
      }
    }
    return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
  },
  checkOpExists(op, err) {
    if (!op) {
      throw new FS.ErrnoError(err);
    }
    return op;
  },
  MAX_OPEN_FDS: 4096,
  nextfd() {
    for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
      if (!FS.streams[fd]) {
        return fd;
      }
    }
    throw new FS.ErrnoError(33);
  },
  getStreamChecked(fd) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(8);
    }
    return stream;
  },
  getStream: fd => FS.streams[fd],
  createStream(stream, fd = -1) {
    assert(fd >= -1);
    // clone it, so we can return an instance of FSStream
    stream = Object.assign(new FS.FSStream, stream);
    if (fd == -1) {
      fd = FS.nextfd();
    }
    stream.fd = fd;
    FS.streams[fd] = stream;
    return stream;
  },
  closeStream(fd) {
    FS.streams[fd] = null;
  },
  dupStream(origStream, fd = -1) {
    var stream = FS.createStream(origStream, fd);
    stream.stream_ops?.dup?.(stream);
    return stream;
  },
  doSetAttr(stream, node, attr) {
    var setattr = stream?.stream_ops.setattr;
    var arg = setattr ? stream : node;
    setattr ??= node.node_ops.setattr;
    FS.checkOpExists(setattr, 63);
    setattr(arg, attr);
  },
  chrdev_stream_ops: {
    open(stream) {
      var device = FS.getDevice(stream.node.rdev);
      // override node's stream ops with the device's
      stream.stream_ops = device.stream_ops;
      // forward the open call
      stream.stream_ops.open?.(stream);
    },
    llseek() {
      throw new FS.ErrnoError(70);
    }
  },
  major: dev => ((dev) >> 8),
  minor: dev => ((dev) & 255),
  makedev: (ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
    FS.devices[dev] = {
      stream_ops: ops
    };
  },
  getDevice: dev => FS.devices[dev],
  getMounts(mount) {
    var mounts = [];
    var check = [ mount ];
    while (check.length) {
      var m = check.pop();
      mounts.push(m);
      check.push(...m.mounts);
    }
    return mounts;
  },
  syncfs(populate, callback) {
    if (typeof populate == "function") {
      callback = populate;
      populate = false;
    }
    FS.syncFSRequests++;
    if (FS.syncFSRequests > 1) {
      err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
    }
    var mounts = FS.getMounts(FS.root.mount);
    var completed = 0;
    function doCallback(errCode) {
      assert(FS.syncFSRequests > 0);
      FS.syncFSRequests--;
      return callback(errCode);
    }
    function done(errCode) {
      if (errCode) {
        if (!done.errored) {
          done.errored = true;
          return doCallback(errCode);
        }
        return;
      }
      if (++completed >= mounts.length) {
        doCallback(null);
      }
    }
    // sync all mounts
    mounts.forEach(mount => {
      if (!mount.type.syncfs) {
        return done(null);
      }
      mount.type.syncfs(mount, populate, done);
    });
  },
  mount(type, opts, mountpoint) {
    if (typeof type == "string") {
      // The filesystem was not included, and instead we have an error
      // message stored in the variable.
      throw type;
    }
    var root = mountpoint === "/";
    var pseudo = !mountpoint;
    var node;
    if (root && FS.root) {
      throw new FS.ErrnoError(10);
    } else if (!root && !pseudo) {
      var lookup = FS.lookupPath(mountpoint, {
        follow_mount: false
      });
      mountpoint = lookup.path;
      // use the absolute path
      node = lookup.node;
      if (FS.isMountpoint(node)) {
        throw new FS.ErrnoError(10);
      }
      if (!FS.isDir(node.mode)) {
        throw new FS.ErrnoError(54);
      }
    }
    var mount = {
      type,
      opts,
      mountpoint,
      mounts: []
    };
    // create a root node for the fs
    var mountRoot = type.mount(mount);
    mountRoot.mount = mount;
    mount.root = mountRoot;
    if (root) {
      FS.root = mountRoot;
    } else if (node) {
      // set as a mountpoint
      node.mounted = mount;
      // add the new mount to the current mount's children
      if (node.mount) {
        node.mount.mounts.push(mount);
      }
    }
    return mountRoot;
  },
  unmount(mountpoint) {
    var lookup = FS.lookupPath(mountpoint, {
      follow_mount: false
    });
    if (!FS.isMountpoint(lookup.node)) {
      throw new FS.ErrnoError(28);
    }
    // destroy the nodes for this mount, and all its child mounts
    var node = lookup.node;
    var mount = node.mounted;
    var mounts = FS.getMounts(mount);
    Object.keys(FS.nameTable).forEach(hash => {
      var current = FS.nameTable[hash];
      while (current) {
        var next = current.name_next;
        if (mounts.includes(current.mount)) {
          FS.destroyNode(current);
        }
        current = next;
      }
    });
    // no longer a mountpoint
    node.mounted = null;
    // remove this mount from the child mounts
    var idx = node.mount.mounts.indexOf(mount);
    assert(idx !== -1);
    node.mount.mounts.splice(idx, 1);
  },
  lookup(parent, name) {
    return parent.node_ops.lookup(parent, name);
  },
  mknod(path, mode, dev) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    if (!name) {
      throw new FS.ErrnoError(28);
    }
    if (name === "." || name === "..") {
      throw new FS.ErrnoError(20);
    }
    var errCode = FS.mayCreate(parent, name);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.mknod) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.mknod(parent, name, mode, dev);
  },
  statfs(path) {
    return FS.statfsNode(FS.lookupPath(path, {
      follow: true
    }).node);
  },
  statfsStream(stream) {
    // We keep a separate statfsStream function because noderawfs overrides
    // it. In noderawfs, stream.node is sometimes null. Instead, we need to
    // look at stream.path.
    return FS.statfsNode(stream.node);
  },
  statfsNode(node) {
    // NOTE: None of the defaults here are true. We're just returning safe and
    //       sane values. Currently nodefs and rawfs replace these defaults,
    //       other file systems leave them alone.
    var rtn = {
      bsize: 4096,
      frsize: 4096,
      blocks: 1e6,
      bfree: 5e5,
      bavail: 5e5,
      files: FS.nextInode,
      ffree: FS.nextInode - 1,
      fsid: 42,
      flags: 2,
      namelen: 255
    };
    if (node.node_ops.statfs) {
      Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
    }
    return rtn;
  },
  create(path, mode = 438) {
    mode &= 4095;
    mode |= 32768;
    return FS.mknod(path, mode, 0);
  },
  mkdir(path, mode = 511) {
    mode &= 511 | 512;
    mode |= 16384;
    return FS.mknod(path, mode, 0);
  },
  mkdirTree(path, mode) {
    var dirs = path.split("/");
    var d = "";
    for (var dir of dirs) {
      if (!dir) continue;
      if (d || PATH.isAbs(path)) d += "/";
      d += dir;
      try {
        FS.mkdir(d, mode);
      } catch (e) {
        if (e.errno != 20) throw e;
      }
    }
  },
  mkdev(path, mode, dev) {
    if (typeof dev == "undefined") {
      dev = mode;
      mode = 438;
    }
    mode |= 8192;
    return FS.mknod(path, mode, dev);
  },
  symlink(oldpath, newpath) {
    if (!PATH_FS.resolve(oldpath)) {
      throw new FS.ErrnoError(44);
    }
    var lookup = FS.lookupPath(newpath, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var newname = PATH.basename(newpath);
    var errCode = FS.mayCreate(parent, newname);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.symlink) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.symlink(parent, newname, oldpath);
  },
  rename(old_path, new_path) {
    var old_dirname = PATH.dirname(old_path);
    var new_dirname = PATH.dirname(new_path);
    var old_name = PATH.basename(old_path);
    var new_name = PATH.basename(new_path);
    // parents must exist
    var lookup, old_dir, new_dir;
    // let the errors from non existent directories percolate up
    lookup = FS.lookupPath(old_path, {
      parent: true
    });
    old_dir = lookup.node;
    lookup = FS.lookupPath(new_path, {
      parent: true
    });
    new_dir = lookup.node;
    if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
    // need to be part of the same mount
    if (old_dir.mount !== new_dir.mount) {
      throw new FS.ErrnoError(75);
    }
    // source must exist
    var old_node = FS.lookupNode(old_dir, old_name);
    // old path should not be an ancestor of the new path
    var relative = PATH_FS.relative(old_path, new_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(28);
    }
    // new path should not be an ancestor of the old path
    relative = PATH_FS.relative(new_path, old_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(55);
    }
    // see if the new path already exists
    var new_node;
    try {
      new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    // early out if nothing needs to change
    if (old_node === new_node) {
      return;
    }
    // we'll need to delete the old entry
    var isdir = FS.isDir(old_node.mode);
    var errCode = FS.mayDelete(old_dir, old_name, isdir);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    // need delete permissions if we'll be overwriting.
    // need create permissions if new doesn't already exist.
    errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!old_dir.node_ops.rename) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
      throw new FS.ErrnoError(10);
    }
    // if we are going to change the parent, check write permissions
    if (new_dir !== old_dir) {
      errCode = FS.nodePermissions(old_dir, "w");
      if (errCode) {
        throw new FS.ErrnoError(errCode);
      }
    }
    // remove the node from the lookup hash
    FS.hashRemoveNode(old_node);
    // do the underlying fs rename
    try {
      old_dir.node_ops.rename(old_node, new_dir, new_name);
      // update old node (we do this here to avoid each backend
      // needing to)
      old_node.parent = new_dir;
    } catch (e) {
      throw e;
    } finally {
      // add the node back to the hash (in case node_ops.rename
      // changed its name)
      FS.hashAddNode(old_node);
    }
  },
  rmdir(path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var errCode = FS.mayDelete(parent, name, true);
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.rmdir) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    parent.node_ops.rmdir(parent, name);
    FS.destroyNode(node);
  },
  readdir(path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
    return readdir(node);
  },
  unlink(path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var errCode = FS.mayDelete(parent, name, false);
    if (errCode) {
      // According to POSIX, we should map EISDIR to EPERM, but
      // we instead do what Linux does (and we must, as we use
      // the musl linux libc).
      throw new FS.ErrnoError(errCode);
    }
    if (!parent.node_ops.unlink) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    parent.node_ops.unlink(parent, name);
    FS.destroyNode(node);
  },
  readlink(path) {
    var lookup = FS.lookupPath(path);
    var link = lookup.node;
    if (!link) {
      throw new FS.ErrnoError(44);
    }
    if (!link.node_ops.readlink) {
      throw new FS.ErrnoError(28);
    }
    return link.node_ops.readlink(link);
  },
  stat(path, dontFollow) {
    var lookup = FS.lookupPath(path, {
      follow: !dontFollow
    });
    var node = lookup.node;
    var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
    return getattr(node);
  },
  fstat(fd) {
    var stream = FS.getStreamChecked(fd);
    var node = stream.node;
    var getattr = stream.stream_ops.getattr;
    var arg = getattr ? stream : node;
    getattr ??= node.node_ops.getattr;
    FS.checkOpExists(getattr, 63);
    return getattr(arg);
  },
  lstat(path) {
    return FS.stat(path, true);
  },
  doChmod(stream, node, mode, dontFollow) {
    FS.doSetAttr(stream, node, {
      mode: (mode & 4095) | (node.mode & ~4095),
      ctime: Date.now(),
      dontFollow
    });
  },
  chmod(path, mode, dontFollow) {
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    FS.doChmod(null, node, mode, dontFollow);
  },
  lchmod(path, mode) {
    FS.chmod(path, mode, true);
  },
  fchmod(fd, mode) {
    var stream = FS.getStreamChecked(fd);
    FS.doChmod(stream, stream.node, mode, false);
  },
  doChown(stream, node, dontFollow) {
    FS.doSetAttr(stream, node, {
      timestamp: Date.now(),
      dontFollow
    });
  },
  chown(path, uid, gid, dontFollow) {
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    FS.doChown(null, node, dontFollow);
  },
  lchown(path, uid, gid) {
    FS.chown(path, uid, gid, true);
  },
  fchown(fd, uid, gid) {
    var stream = FS.getStreamChecked(fd);
    FS.doChown(stream, stream.node, false);
  },
  doTruncate(stream, node, len) {
    if (FS.isDir(node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!FS.isFile(node.mode)) {
      throw new FS.ErrnoError(28);
    }
    var errCode = FS.nodePermissions(node, "w");
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    FS.doSetAttr(stream, node, {
      size: len,
      timestamp: Date.now()
    });
  },
  truncate(path, len) {
    if (len < 0) {
      throw new FS.ErrnoError(28);
    }
    var node;
    if (typeof path == "string") {
      var lookup = FS.lookupPath(path, {
        follow: true
      });
      node = lookup.node;
    } else {
      node = path;
    }
    FS.doTruncate(null, node, len);
  },
  ftruncate(fd, len) {
    var stream = FS.getStreamChecked(fd);
    if (len < 0 || (stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(28);
    }
    FS.doTruncate(stream, stream.node, len);
  },
  utime(path, atime, mtime) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
    setattr(node, {
      atime,
      mtime
    });
  },
  open(path, flags, mode = 438) {
    if (path === "") {
      throw new FS.ErrnoError(44);
    }
    flags = typeof flags == "string" ? FS_modeStringToFlags(flags) : flags;
    if ((flags & 64)) {
      mode = (mode & 4095) | 32768;
    } else {
      mode = 0;
    }
    var node;
    var isDirPath;
    if (typeof path == "object") {
      node = path;
    } else {
      isDirPath = path.endsWith("/");
      // noent_okay makes it so that if the final component of the path
      // doesn't exist, lookupPath returns `node: undefined`. `path` will be
      // updated to point to the target of all symlinks.
      var lookup = FS.lookupPath(path, {
        follow: !(flags & 131072),
        noent_okay: true
      });
      node = lookup.node;
      path = lookup.path;
    }
    // perhaps we need to create the node
    var created = false;
    if ((flags & 64)) {
      if (node) {
        // if O_CREAT and O_EXCL are set, error out if the node already exists
        if ((flags & 128)) {
          throw new FS.ErrnoError(20);
        }
      } else if (isDirPath) {
        throw new FS.ErrnoError(31);
      } else {
        // node doesn't exist, try to create it
        // Ignore the permission bits here to ensure we can `open` this new
        // file below. We use chmod below the apply the permissions once the
        // file is open.
        node = FS.mknod(path, mode | 511, 0);
        created = true;
      }
    }
    if (!node) {
      throw new FS.ErrnoError(44);
    }
    // can't truncate a device
    if (FS.isChrdev(node.mode)) {
      flags &= ~512;
    }
    // if asked only for a directory, then this must be one
    if ((flags & 65536) && !FS.isDir(node.mode)) {
      throw new FS.ErrnoError(54);
    }
    // check permissions, if this is not a file we just created now (it is ok to
    // create and write to a file with read-only permissions; it is read-only
    // for later use)
    if (!created) {
      var errCode = FS.mayOpen(node, flags);
      if (errCode) {
        throw new FS.ErrnoError(errCode);
      }
    }
    // do truncation if necessary
    if ((flags & 512) && !created) {
      FS.truncate(node, 0);
    }
    // we've already handled these, don't pass down to the underlying vfs
    flags &= ~(128 | 512 | 131072);
    // register the stream with the filesystem
    var stream = FS.createStream({
      node,
      path: FS.getPath(node),
      // we want the absolute path to the node
      flags,
      seekable: true,
      position: 0,
      stream_ops: node.stream_ops,
      // used by the file family libc calls (fopen, fwrite, ferror, etc.)
      ungotten: [],
      error: false
    });
    // call the new stream's open function
    if (stream.stream_ops.open) {
      stream.stream_ops.open(stream);
    }
    if (created) {
      FS.chmod(node, mode & 511);
    }
    if (Module["logReadFiles"] && !(flags & 1)) {
      if (!(path in FS.readFiles)) {
        FS.readFiles[path] = 1;
      }
    }
    return stream;
  },
  close(stream) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (stream.getdents) stream.getdents = null;
    // free readdir state
    try {
      if (stream.stream_ops.close) {
        stream.stream_ops.close(stream);
      }
    } catch (e) {
      throw e;
    } finally {
      FS.closeStream(stream.fd);
    }
    stream.fd = null;
  },
  isClosed(stream) {
    return stream.fd === null;
  },
  llseek(stream, offset, whence) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (!stream.seekable || !stream.stream_ops.llseek) {
      throw new FS.ErrnoError(70);
    }
    if (whence != 0 && whence != 1 && whence != 2) {
      throw new FS.ErrnoError(28);
    }
    stream.position = stream.stream_ops.llseek(stream, offset, whence);
    stream.ungotten = [];
    return stream.position;
  },
  read(stream, buffer, offset, length, position) {
    assert(offset >= 0);
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.read) {
      throw new FS.ErrnoError(28);
    }
    var seeking = typeof position != "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
    if (!seeking) stream.position += bytesRead;
    return bytesRead;
  },
  write(stream, buffer, offset, length, position, canOwn) {
    assert(offset >= 0);
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.write) {
      throw new FS.ErrnoError(28);
    }
    if (stream.seekable && stream.flags & 1024) {
      // seek to the end before writing in append mode
      FS.llseek(stream, 0, 2);
    }
    var seeking = typeof position != "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
    if (!seeking) stream.position += bytesWritten;
    return bytesWritten;
  },
  mmap(stream, length, position, prot, flags) {
    // User requests writing to file (prot & PROT_WRITE != 0).
    // Checking if we have permissions to write to the file unless
    // MAP_PRIVATE flag is set. According to POSIX spec it is possible
    // to write to file opened in read-only mode with MAP_PRIVATE flag,
    // as all modifications will be visible only in the memory of
    // the current process.
    if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
      throw new FS.ErrnoError(2);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(2);
    }
    if (!stream.stream_ops.mmap) {
      throw new FS.ErrnoError(43);
    }
    if (!length) {
      throw new FS.ErrnoError(28);
    }
    return stream.stream_ops.mmap(stream, length, position, prot, flags);
  },
  msync(stream, buffer, offset, length, mmapFlags) {
    assert(offset >= 0);
    if (!stream.stream_ops.msync) {
      return 0;
    }
    return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
  },
  ioctl(stream, cmd, arg) {
    if (!stream.stream_ops.ioctl) {
      throw new FS.ErrnoError(59);
    }
    return stream.stream_ops.ioctl(stream, cmd, arg);
  },
  readFile(path, opts = {}) {
    opts.flags = opts.flags || 0;
    opts.encoding = opts.encoding || "binary";
    if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
      abort(`Invalid encoding type "${opts.encoding}"`);
    }
    var stream = FS.open(path, opts.flags);
    var stat = FS.stat(path);
    var length = stat.size;
    var buf = new Uint8Array(length);
    FS.read(stream, buf, 0, length, 0);
    if (opts.encoding === "utf8") {
      buf = UTF8ArrayToString(buf);
    }
    FS.close(stream);
    return buf;
  },
  writeFile(path, data, opts = {}) {
    opts.flags = opts.flags || 577;
    var stream = FS.open(path, opts.flags, opts.mode);
    if (typeof data == "string") {
      data = new Uint8Array(intArrayFromString(data, true));
    }
    if (ArrayBuffer.isView(data)) {
      FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
    } else {
      abort("Unsupported data type");
    }
    FS.close(stream);
  },
  cwd: () => FS.currentPath,
  chdir(path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    if (lookup.node === null) {
      throw new FS.ErrnoError(44);
    }
    if (!FS.isDir(lookup.node.mode)) {
      throw new FS.ErrnoError(54);
    }
    var errCode = FS.nodePermissions(lookup.node, "x");
    if (errCode) {
      throw new FS.ErrnoError(errCode);
    }
    FS.currentPath = lookup.path;
  },
  createDefaultDirectories() {
    FS.mkdir("/tmp");
    FS.mkdir("/home");
    FS.mkdir("/home/web_user");
  },
  createDefaultDevices() {
    // create /dev
    FS.mkdir("/dev");
    // setup /dev/null
    FS.registerDevice(FS.makedev(1, 3), {
      read: () => 0,
      write: (stream, buffer, offset, length, pos) => length,
      llseek: () => 0
    });
    FS.mkdev("/dev/null", FS.makedev(1, 3));
    // setup /dev/tty and /dev/tty1
    // stderr needs to print output using err() rather than out()
    // so we register a second tty just for it.
    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
    FS.mkdev("/dev/tty", FS.makedev(5, 0));
    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
    // setup /dev/[u]random
    // use a buffer to avoid overhead of individual crypto calls per byte
    var randomBuffer = new Uint8Array(1024), randomLeft = 0;
    var randomByte = () => {
      if (randomLeft === 0) {
        randomFill(randomBuffer);
        randomLeft = randomBuffer.byteLength;
      }
      return randomBuffer[--randomLeft];
    };
    FS.createDevice("/dev", "random", randomByte);
    FS.createDevice("/dev", "urandom", randomByte);
    // we're not going to emulate the actual shm device,
    // just create the tmp dirs that reside in it commonly
    FS.mkdir("/dev/shm");
    FS.mkdir("/dev/shm/tmp");
  },
  createSpecialDirectories() {
    // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
    // name of the stream for fd 6 (see test_unistd_ttyname)
    FS.mkdir("/proc");
    var proc_self = FS.mkdir("/proc/self");
    FS.mkdir("/proc/self/fd");
    FS.mount({
      mount() {
        var node = FS.createNode(proc_self, "fd", 16895, 73);
        node.stream_ops = {
          llseek: MEMFS.stream_ops.llseek
        };
        node.node_ops = {
          lookup(parent, name) {
            var fd = +name;
            var stream = FS.getStreamChecked(fd);
            var ret = {
              parent: null,
              mount: {
                mountpoint: "fake"
              },
              node_ops: {
                readlink: () => stream.path
              },
              id: fd + 1
            };
            ret.parent = ret;
            // make it look like a simple root node
            return ret;
          },
          readdir() {
            return Array.from(FS.streams.entries()).filter(([k, v]) => v).map(([k, v]) => k.toString());
          }
        };
        return node;
      }
    }, {}, "/proc/self/fd");
  },
  createStandardStreams(input, output, error) {
    // TODO deprecate the old functionality of a single
    // input / output callback and that utilizes FS.createDevice
    // and instead require a unique set of stream ops
    // by default, we symlink the standard streams to the
    // default tty devices. however, if the standard streams
    // have been overwritten we create a unique device for
    // them instead.
    if (input) {
      FS.createDevice("/dev", "stdin", input);
    } else {
      FS.symlink("/dev/tty", "/dev/stdin");
    }
    if (output) {
      FS.createDevice("/dev", "stdout", null, output);
    } else {
      FS.symlink("/dev/tty", "/dev/stdout");
    }
    if (error) {
      FS.createDevice("/dev", "stderr", null, error);
    } else {
      FS.symlink("/dev/tty1", "/dev/stderr");
    }
    // open default streams for the stdin, stdout and stderr devices
    var stdin = FS.open("/dev/stdin", 0);
    var stdout = FS.open("/dev/stdout", 1);
    var stderr = FS.open("/dev/stderr", 1);
    assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
    assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
    assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
  },
  staticInit() {
    FS.nameTable = new Array(4096);
    FS.mount(MEMFS, {}, "/");
    FS.createDefaultDirectories();
    FS.createDefaultDevices();
    FS.createSpecialDirectories();
    FS.filesystems = {
      "MEMFS": MEMFS
    };
  },
  init(input, output, error) {
    assert(!FS.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
    FS.initialized = true;
    // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
    input ??= Module["stdin"];
    output ??= Module["stdout"];
    error ??= Module["stderr"];
    FS.createStandardStreams(input, output, error);
  },
  quit() {
    FS.initialized = false;
    // force-flush all streams, so we get musl std streams printed out
    _fflush(0);
    // close all of our streams
    for (var stream of FS.streams) {
      if (stream) {
        FS.close(stream);
      }
    }
  },
  findObject(path, dontResolveLastLink) {
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (!ret.exists) {
      return null;
    }
    return ret.object;
  },
  analyzePath(path, dontResolveLastLink) {
    // operate from within the context of the symlink's target
    try {
      var lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      path = lookup.path;
    } catch (e) {}
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    try {
      var lookup = FS.lookupPath(path, {
        parent: true
      });
      ret.parentExists = true;
      ret.parentPath = lookup.path;
      ret.parentObject = lookup.node;
      ret.name = PATH.basename(path);
      lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      ret.exists = true;
      ret.path = lookup.path;
      ret.object = lookup.node;
      ret.name = lookup.node.name;
      ret.isRoot = lookup.path === "/";
    } catch (e) {
      ret.error = e.errno;
    }
    return ret;
  },
  createPath(parent, path, canRead, canWrite) {
    parent = typeof parent == "string" ? parent : FS.getPath(parent);
    var parts = path.split("/").reverse();
    while (parts.length) {
      var part = parts.pop();
      if (!part) continue;
      var current = PATH.join2(parent, part);
      try {
        FS.mkdir(current);
      } catch (e) {
        if (e.errno != 20) throw e;
      }
      parent = current;
    }
    return current;
  },
  createFile(parent, name, properties, canRead, canWrite) {
    var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
    var mode = FS_getMode(canRead, canWrite);
    return FS.create(path, mode);
  },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
    var path = name;
    if (parent) {
      parent = typeof parent == "string" ? parent : FS.getPath(parent);
      path = name ? PATH.join2(parent, name) : parent;
    }
    var mode = FS_getMode(canRead, canWrite);
    var node = FS.create(path, mode);
    if (data) {
      if (typeof data == "string") {
        var arr = new Array(data.length);
        for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
        data = arr;
      }
      // make sure we can write to the file
      FS.chmod(node, mode | 146);
      var stream = FS.open(node, 577);
      FS.write(stream, data, 0, data.length, 0, canOwn);
      FS.close(stream);
      FS.chmod(node, mode);
    }
  },
  createDevice(parent, name, input, output) {
    var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
    var mode = FS_getMode(!!input, !!output);
    FS.createDevice.major ??= 64;
    var dev = FS.makedev(FS.createDevice.major++, 0);
    // Create a fake device that a set of stream ops to emulate
    // the old behavior.
    FS.registerDevice(dev, {
      open(stream) {
        stream.seekable = false;
      },
      close(stream) {
        // flush any pending line data
        if (output?.buffer?.length) {
          output(10);
        }
      },
      read(stream, buffer, offset, length, pos) {
        var bytesRead = 0;
        for (var i = 0; i < length; i++) {
          var result;
          try {
            result = input();
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (result === undefined && bytesRead === 0) {
            throw new FS.ErrnoError(6);
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          buffer[offset + i] = result;
        }
        if (bytesRead) {
          stream.node.atime = Date.now();
        }
        return bytesRead;
      },
      write(stream, buffer, offset, length, pos) {
        for (var i = 0; i < length; i++) {
          try {
            output(buffer[offset + i]);
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
        if (length) {
          stream.node.mtime = stream.node.ctime = Date.now();
        }
        return i;
      }
    });
    return FS.mkdev(path, mode, dev);
  },
  forceLoadFile(obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    if (globalThis.XMLHttpRequest) {
      abort("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
    } else {
      // Command-line.
      try {
        obj.contents = readBinary(obj.url);
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
    }
  },
  createLazyFile(parent, name, url, canRead, canWrite) {
    // Lazy chunked Uint8Array (implements get and length from Uint8Array).
    // Actual getting is abstracted away for eventual reuse.
    class LazyUint8Array {
      lengthKnown=false;
      chunks=[];
      // Loaded chunks. Index is the chunk number
      get(idx) {
        if (idx > this.length - 1 || idx < 0) {
          return undefined;
        }
        var chunkOffset = idx % this.chunkSize;
        var chunkNum = (idx / this.chunkSize) | 0;
        return this.getter(chunkNum)[chunkOffset];
      }
      setDataGetter(getter) {
        this.getter = getter;
      }
      cacheLength() {
        // Find length
        var xhr = new XMLHttpRequest;
        xhr.open("HEAD", url, false);
        xhr.send(null);
        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) abort("Couldn't load " + url + ". Status: " + xhr.status);
        var datalength = Number(xhr.getResponseHeader("Content-length"));
        var header;
        var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
        var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
        var chunkSize = 1024 * 1024;
        // Chunk size in bytes
        if (!hasByteServing) chunkSize = datalength;
        // Function to get a range from the remote URL.
        var doXHR = (from, to) => {
          if (from > to) abort("invalid range (" + from + ", " + to + ") or no bytes requested!");
          if (to > datalength - 1) abort("only " + datalength + " bytes available! programmer error!");
          // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
          var xhr = new XMLHttpRequest;
          xhr.open("GET", url, false);
          if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
          // Some hints to the browser that we want binary data.
          xhr.responseType = "arraybuffer";
          if (xhr.overrideMimeType) {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
          }
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) abort("Couldn't load " + url + ". Status: " + xhr.status);
          if (xhr.response !== undefined) {
            return new Uint8Array(/** @type{Array<number>} */ (xhr.response || []));
          }
          return intArrayFromString(xhr.responseText || "", true);
        };
        var lazyArray = this;
        lazyArray.setDataGetter(chunkNum => {
          var start = chunkNum * chunkSize;
          var end = (chunkNum + 1) * chunkSize - 1;
          // including this byte
          end = Math.min(end, datalength - 1);
          // if datalength-1 is selected, this is the last block
          if (typeof lazyArray.chunks[chunkNum] == "undefined") {
            lazyArray.chunks[chunkNum] = doXHR(start, end);
          }
          if (typeof lazyArray.chunks[chunkNum] == "undefined") abort("doXHR failed!");
          return lazyArray.chunks[chunkNum];
        });
        if (usesGzip || !datalength) {
          // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
          chunkSize = datalength = 1;
          // this will force getter(0)/doXHR do download the whole file
          datalength = this.getter(0).length;
          chunkSize = datalength;
          out("LazyFiles on gzip forces download of the whole file when length is accessed");
        }
        this._length = datalength;
        this._chunkSize = chunkSize;
        this.lengthKnown = true;
      }
      get length() {
        if (!this.lengthKnown) {
          this.cacheLength();
        }
        return this._length;
      }
      get chunkSize() {
        if (!this.lengthKnown) {
          this.cacheLength();
        }
        return this._chunkSize;
      }
    }
    if (globalThis.XMLHttpRequest) {
      if (!ENVIRONMENT_IS_WORKER) abort("Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc");
      var lazyArray = new LazyUint8Array;
      var properties = {
        isDevice: false,
        contents: lazyArray
      };
    } else {
      var properties = {
        isDevice: false,
        url
      };
    }
    var node = FS.createFile(parent, name, properties, canRead, canWrite);
    // This is a total hack, but I want to get this lazy file code out of the
    // core of MEMFS. If we want to keep this lazy file concept I feel it should
    // be its own thin LAZYFS proxying calls to MEMFS.
    if (properties.contents) {
      node.contents = properties.contents;
    } else if (properties.url) {
      node.contents = null;
      node.url = properties.url;
    }
    // Add a function that defers querying the file size until it is asked the first time.
    Object.defineProperties(node, {
      usedBytes: {
        get: function() {
          return this.contents.length;
        }
      }
    });
    // override each stream op with one that tries to force load the lazy file first
    var stream_ops = {};
    var keys = Object.keys(node.stream_ops);
    keys.forEach(key => {
      var fn = node.stream_ops[key];
      stream_ops[key] = (...args) => {
        FS.forceLoadFile(node);
        return fn(...args);
      };
    });
    function writeChunks(stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= contents.length) return 0;
      var size = Math.min(contents.length - position, length);
      assert(size >= 0);
      if (contents.slice) {
        // normal array
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i];
        }
      } else {
        for (var i = 0; i < size; i++) {
          // LazyUint8Array from sync binary XHR
          buffer[offset + i] = contents.get(position + i);
        }
      }
      return size;
    }
    // use a custom read function
    stream_ops.read = (stream, buffer, offset, length, position) => {
      FS.forceLoadFile(node);
      return writeChunks(stream, buffer, offset, length, position);
    };
    // use a custom mmap function
    stream_ops.mmap = (stream, length, position, prot, flags) => {
      FS.forceLoadFile(node);
      var ptr = mmapAlloc(length);
      if (!ptr) {
        throw new FS.ErrnoError(48);
      }
      writeChunks(stream, HEAP8, ptr, length, position);
      return {
        ptr,
        allocated: true
      };
    };
    node.stream_ops = stream_ops;
    return node;
  },
  absolutePath() {
    abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
  },
  createFolder() {
    abort("FS.createFolder has been removed; use FS.mkdir instead");
  },
  createLink() {
    abort("FS.createLink has been removed; use FS.symlink instead");
  },
  joinPath() {
    abort("FS.joinPath has been removed; use PATH.join instead");
  },
  mmapAlloc() {
    abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
  },
  standardizePath() {
    abort("FS.standardizePath has been removed; use PATH.normalize instead");
  }
};

var SYSCALLS = {
  DEFAULT_POLLMASK: 5,
  calculateAt(dirfd, path, allowEmpty) {
    if (PATH.isAbs(path)) {
      return path;
    }
    // relative path
    var dir;
    if (dirfd === -100) {
      dir = FS.cwd();
    } else {
      var dirstream = SYSCALLS.getStreamFromFD(dirfd);
      dir = dirstream.path;
    }
    if (path.length == 0) {
      if (!allowEmpty) {
        throw new FS.ErrnoError(44);
      }
      return dir;
    }
    return dir + "/" + path;
  },
  writeStat(buf, stat) {
    HEAPU32[((buf) >> 2)] = stat.dev;
    HEAPU32[(((buf) + (4)) >> 2)] = stat.mode;
    HEAPU32[(((buf) + (8)) >> 2)] = stat.nlink;
    HEAPU32[(((buf) + (12)) >> 2)] = stat.uid;
    HEAPU32[(((buf) + (16)) >> 2)] = stat.gid;
    HEAPU32[(((buf) + (20)) >> 2)] = stat.rdev;
    (tempI64 = [ stat.size >>> 0, (tempDouble = stat.size, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (24)) >> 2)] = tempI64[0], HEAP32[(((buf) + (28)) >> 2)] = tempI64[1]);
    HEAP32[(((buf) + (32)) >> 2)] = 4096;
    HEAP32[(((buf) + (36)) >> 2)] = stat.blocks;
    var atime = stat.atime.getTime();
    var mtime = stat.mtime.getTime();
    var ctime = stat.ctime.getTime();
    (tempI64 = [ Math.floor(atime / 1e3) >>> 0, (tempDouble = Math.floor(atime / 1e3), 
    (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (40)) >> 2)] = tempI64[0], HEAP32[(((buf) + (44)) >> 2)] = tempI64[1]);
    HEAPU32[(((buf) + (48)) >> 2)] = (atime % 1e3) * 1e3 * 1e3;
    (tempI64 = [ Math.floor(mtime / 1e3) >>> 0, (tempDouble = Math.floor(mtime / 1e3), 
    (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (56)) >> 2)] = tempI64[0], HEAP32[(((buf) + (60)) >> 2)] = tempI64[1]);
    HEAPU32[(((buf) + (64)) >> 2)] = (mtime % 1e3) * 1e3 * 1e3;
    (tempI64 = [ Math.floor(ctime / 1e3) >>> 0, (tempDouble = Math.floor(ctime / 1e3), 
    (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (72)) >> 2)] = tempI64[0], HEAP32[(((buf) + (76)) >> 2)] = tempI64[1]);
    HEAPU32[(((buf) + (80)) >> 2)] = (ctime % 1e3) * 1e3 * 1e3;
    (tempI64 = [ stat.ino >>> 0, (tempDouble = stat.ino, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (88)) >> 2)] = tempI64[0], HEAP32[(((buf) + (92)) >> 2)] = tempI64[1]);
    return 0;
  },
  writeStatFs(buf, stats) {
    HEAPU32[(((buf) + (4)) >> 2)] = stats.bsize;
    HEAPU32[(((buf) + (60)) >> 2)] = stats.bsize;
    (tempI64 = [ stats.blocks >>> 0, (tempDouble = stats.blocks, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (8)) >> 2)] = tempI64[0], HEAP32[(((buf) + (12)) >> 2)] = tempI64[1]);
    (tempI64 = [ stats.bfree >>> 0, (tempDouble = stats.bfree, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (16)) >> 2)] = tempI64[0], HEAP32[(((buf) + (20)) >> 2)] = tempI64[1]);
    (tempI64 = [ stats.bavail >>> 0, (tempDouble = stats.bavail, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (24)) >> 2)] = tempI64[0], HEAP32[(((buf) + (28)) >> 2)] = tempI64[1]);
    (tempI64 = [ stats.files >>> 0, (tempDouble = stats.files, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (32)) >> 2)] = tempI64[0], HEAP32[(((buf) + (36)) >> 2)] = tempI64[1]);
    (tempI64 = [ stats.ffree >>> 0, (tempDouble = stats.ffree, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[(((buf) + (40)) >> 2)] = tempI64[0], HEAP32[(((buf) + (44)) >> 2)] = tempI64[1]);
    HEAPU32[(((buf) + (48)) >> 2)] = stats.fsid;
    HEAPU32[(((buf) + (64)) >> 2)] = stats.flags;
    // ST_NOSUID
    HEAPU32[(((buf) + (56)) >> 2)] = stats.namelen;
  },
  doMsync(addr, stream, len, flags, offset) {
    if (!FS.isFile(stream.node.mode)) {
      throw new FS.ErrnoError(43);
    }
    if (flags & 2) {
      // MAP_PRIVATE calls need not to be synced back to underlying fs
      return 0;
    }
    var buffer = HEAPU8.slice(addr, addr + len);
    FS.msync(stream, buffer, offset, len, flags);
  },
  getStreamFromFD(fd) {
    var stream = FS.getStreamChecked(fd);
    return stream;
  },
  varargs: undefined,
  getStr(ptr) {
    var ret = UTF8ToString(ptr);
    return ret;
  }
};

function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    switch (cmd) {
     case 0:
      {
        var arg = syscallGetVarargI();
        if (arg < 0) {
          return -28;
        }
        while (FS.streams[arg]) {
          arg++;
        }
        var newStream;
        newStream = FS.dupStream(stream, arg);
        return newStream.fd;
      }

     case 1:
     case 2:
      return 0;

     // FD_CLOEXEC makes no sense for a single process.
      case 3:
      return stream.flags;

     case 4:
      {
        var arg = syscallGetVarargI();
        stream.flags |= arg;
        return 0;
      }

     case 12:
      {
        var arg = syscallGetVarargP();
        var offset = 0;
        // We're always unlocked.
        HEAP16[(((arg) + (offset)) >> 1)] = 2;
        return 0;
      }

     case 13:
     case 14:
      // Pretend that the locking is successful. These are process-level locks,
      // and Emscripten programs are a single process. If we supported linking a
      // filesystem between programs, we'd need to do more here.
      // See https://github.com/emscripten-core/emscripten/issues/23697
      return 0;
    }
    return -28;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    switch (op) {
     case 21509:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     case 21505:
      {
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tcgets) {
          var termios = stream.tty.ops.ioctl_tcgets(stream);
          var argp = syscallGetVarargP();
          HEAP32[((argp) >> 2)] = termios.c_iflag || 0;
          HEAP32[(((argp) + (4)) >> 2)] = termios.c_oflag || 0;
          HEAP32[(((argp) + (8)) >> 2)] = termios.c_cflag || 0;
          HEAP32[(((argp) + (12)) >> 2)] = termios.c_lflag || 0;
          for (var i = 0; i < 32; i++) {
            HEAP8[(argp + i) + (17)] = termios.c_cc[i] || 0;
          }
          return 0;
        }
        return 0;
      }

     case 21510:
     case 21511:
     case 21512:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     case 21506:
     case 21507:
     case 21508:
      {
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tcsets) {
          var argp = syscallGetVarargP();
          var c_iflag = HEAP32[((argp) >> 2)];
          var c_oflag = HEAP32[(((argp) + (4)) >> 2)];
          var c_cflag = HEAP32[(((argp) + (8)) >> 2)];
          var c_lflag = HEAP32[(((argp) + (12)) >> 2)];
          var c_cc = [];
          for (var i = 0; i < 32; i++) {
            c_cc.push(HEAP8[(argp + i) + (17)]);
          }
          return stream.tty.ops.ioctl_tcsets(stream.tty, op, {
            c_iflag,
            c_oflag,
            c_cflag,
            c_lflag,
            c_cc
          });
        }
        return 0;
      }

     case 21519:
      {
        if (!stream.tty) return -59;
        var argp = syscallGetVarargP();
        HEAP32[((argp) >> 2)] = 0;
        return 0;
      }

     case 21520:
      {
        if (!stream.tty) return -59;
        return -28;
      }

     case 21537:
     case 21531:
      {
        var argp = syscallGetVarargP();
        return FS.ioctl(stream, op, argp);
      }

     case 21523:
      {
        // TODO: in theory we should write to the winsize struct that gets
        // passed in, but for now musl doesn't read anything on it
        if (!stream.tty) return -59;
        if (stream.tty.ops.ioctl_tiocgwinsz) {
          var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
          var argp = syscallGetVarargP();
          HEAP16[((argp) >> 1)] = winsize[0];
          HEAP16[(((argp) + (2)) >> 1)] = winsize[1];
        }
        return 0;
      }

     case 21524:
      {
        // TODO: technically, this ioctl call should change the window size.
        // but, since emscripten doesn't have any concept of a terminal window
        // yet, we'll just silently throw it away as we do TIOCGWINSZ
        if (!stream.tty) return -59;
        return 0;
      }

     case 21515:
      {
        if (!stream.tty) return -59;
        return 0;
      }

     default:
      return -28;
    }
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    path = SYSCALLS.getStr(path);
    path = SYSCALLS.calculateAt(dirfd, path);
    var mode = varargs ? syscallGetVarargI() : 0;
    return FS.open(path, flags, mode).fd;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_rmdir(path) {
  try {
    path = SYSCALLS.getStr(path);
    FS.rmdir(path);
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

function ___syscall_unlinkat(dirfd, path, flags) {
  try {
    path = SYSCALLS.getStr(path);
    path = SYSCALLS.calculateAt(dirfd, path);
    if (!flags) {
      FS.unlink(path);
    } else if (flags === 512) {
      FS.rmdir(path);
    } else {
      return -28;
    }
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return -e.errno;
  }
}

var __abort_js = () => abort("native code called abort()");

var structRegistrations = {};

var runDestructors = destructors => {
  while (destructors.length) {
    var ptr = destructors.pop();
    var del = destructors.pop();
    del(ptr);
  }
};

/** @suppress {globalThis} */ function readPointer(pointer) {
  return this.fromWireType(HEAPU32[((pointer) >> 2)]);
}

var awaitingDependencies = {};

var registeredTypes = {};

var typeDependencies = {};

var InternalError = class InternalError extends Error {
  constructor(message) {
    super(message);
    this.name = "InternalError";
  }
};

var throwInternalError = message => {
  throw new InternalError(message);
};

var whenDependentTypesAreResolved = (myTypes, dependentTypes, getTypeConverters) => {
  myTypes.forEach(type => typeDependencies[type] = dependentTypes);
  function onComplete(typeConverters) {
    var myTypeConverters = getTypeConverters(typeConverters);
    if (myTypeConverters.length !== myTypes.length) {
      throwInternalError("Mismatched type converter count");
    }
    for (var i = 0; i < myTypes.length; ++i) {
      registerType(myTypes[i], myTypeConverters[i]);
    }
  }
  var typeConverters = new Array(dependentTypes.length);
  var unregisteredTypes = [];
  var registered = 0;
  dependentTypes.forEach((dt, i) => {
    if (registeredTypes.hasOwnProperty(dt)) {
      typeConverters[i] = registeredTypes[dt];
    } else {
      unregisteredTypes.push(dt);
      if (!awaitingDependencies.hasOwnProperty(dt)) {
        awaitingDependencies[dt] = [];
      }
      awaitingDependencies[dt].push(() => {
        typeConverters[i] = registeredTypes[dt];
        ++registered;
        if (registered === unregisteredTypes.length) {
          onComplete(typeConverters);
        }
      });
    }
  });
  if (0 === unregisteredTypes.length) {
    onComplete(typeConverters);
  }
};

var __embind_finalize_value_object = structType => {
  var reg = structRegistrations[structType];
  delete structRegistrations[structType];
  var rawConstructor = reg.rawConstructor;
  var rawDestructor = reg.rawDestructor;
  var fieldRecords = reg.fields;
  var fieldTypes = fieldRecords.map(field => field.getterReturnType).concat(fieldRecords.map(field => field.setterArgumentType));
  whenDependentTypesAreResolved([ structType ], fieldTypes, fieldTypes => {
    var fields = {};
    fieldRecords.forEach((field, i) => {
      var fieldName = field.fieldName;
      var getterReturnType = fieldTypes[i];
      var optional = fieldTypes[i].optional;
      var getter = field.getter;
      var getterContext = field.getterContext;
      var setterArgumentType = fieldTypes[i + fieldRecords.length];
      var setter = field.setter;
      var setterContext = field.setterContext;
      fields[fieldName] = {
        read: ptr => getterReturnType.fromWireType(getter(getterContext, ptr)),
        write: (ptr, o) => {
          var destructors = [];
          setter(setterContext, ptr, setterArgumentType.toWireType(destructors, o));
          runDestructors(destructors);
        },
        optional
      };
    });
    return [ {
      name: reg.name,
      fromWireType: ptr => {
        var rv = {};
        for (var i in fields) {
          rv[i] = fields[i].read(ptr);
        }
        rawDestructor(ptr);
        return rv;
      },
      toWireType: (destructors, o) => {
        // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
        // assume all fields are present without checking.
        for (var fieldName in fields) {
          if (!(fieldName in o) && !fields[fieldName].optional) {
            throw new TypeError(`Missing field: "${fieldName}"`);
          }
        }
        var ptr = rawConstructor();
        for (fieldName in fields) {
          fields[fieldName].write(ptr, o[fieldName]);
        }
        if (destructors !== null) {
          destructors.push(rawDestructor, ptr);
        }
        return ptr;
      },
      readValueFromPointer: readPointer,
      destructorFunction: rawDestructor
    } ];
  });
};

var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange) => {};

var AsciiToString = ptr => {
  var str = "";
  while (1) {
    var ch = HEAPU8[ptr++];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
};

var BindingError = class BindingError extends Error {
  constructor(message) {
    super(message);
    this.name = "BindingError";
  }
};

var throwBindingError = message => {
  throw new BindingError(message);
};

/** @param {Object=} options */ function sharedRegisterType(rawType, registeredInstance, options = {}) {
  var name = registeredInstance.name;
  if (!rawType) {
    throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
  }
  if (registeredTypes.hasOwnProperty(rawType)) {
    if (options.ignoreDuplicateRegistrations) {
      return;
    } else {
      throwBindingError(`Cannot register type '${name}' twice`);
    }
  }
  registeredTypes[rawType] = registeredInstance;
  delete typeDependencies[rawType];
  if (awaitingDependencies.hasOwnProperty(rawType)) {
    var callbacks = awaitingDependencies[rawType];
    delete awaitingDependencies[rawType];
    callbacks.forEach(cb => cb());
  }
}

/** @param {Object=} options */ function registerType(rawType, registeredInstance, options = {}) {
  return sharedRegisterType(rawType, registeredInstance, options);
}

/** @suppress {globalThis} */ var __embind_register_bool = (rawType, name, trueValue, falseValue) => {
  name = AsciiToString(name);
  registerType(rawType, {
    name,
    fromWireType: function(wt) {
      // ambiguous emscripten ABI: sometimes return values are
      // true or false, and sometimes integers (0 or 1)
      return !!wt;
    },
    toWireType: function(destructors, o) {
      return o ? trueValue : falseValue;
    },
    readValueFromPointer: function(pointer) {
      return this.fromWireType(HEAPU8[pointer]);
    },
    destructorFunction: null
  });
};

var shallowCopyInternalPointer = o => ({
  count: o.count,
  deleteScheduled: o.deleteScheduled,
  preservePointerOnDelete: o.preservePointerOnDelete,
  ptr: o.ptr,
  ptrType: o.ptrType,
  smartPtr: o.smartPtr,
  smartPtrType: o.smartPtrType
});

var throwInstanceAlreadyDeleted = obj => {
  function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
  }
  throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
};

var finalizationRegistry = false;

var detachFinalizer = handle => {};

var runDestructor = $$ => {
  if ($$.smartPtr) {
    $$.smartPtrType.rawDestructor($$.smartPtr);
  } else {
    $$.ptrType.registeredClass.rawDestructor($$.ptr);
  }
};

var releaseClassHandle = $$ => {
  $$.count.value -= 1;
  var toDelete = 0 === $$.count.value;
  if (toDelete) {
    runDestructor($$);
  }
};

var downcastPointer = (ptr, ptrClass, desiredClass) => {
  if (ptrClass === desiredClass) {
    return ptr;
  }
  if (undefined === desiredClass.baseClass) {
    return null;
  }
  var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
  if (rv === null) {
    return null;
  }
  return desiredClass.downcast(rv);
};

var registeredPointers = {};

var registeredInstances = {};

var getBasestPointer = (class_, ptr) => {
  if (ptr === undefined) {
    throwBindingError("ptr should not be undefined");
  }
  while (class_.baseClass) {
    ptr = class_.upcast(ptr);
    class_ = class_.baseClass;
  }
  return ptr;
};

var getInheritedInstance = (class_, ptr) => {
  ptr = getBasestPointer(class_, ptr);
  return registeredInstances[ptr];
};

var makeClassHandle = (prototype, record) => {
  if (!record.ptrType || !record.ptr) {
    throwInternalError("makeClassHandle requires ptr and ptrType");
  }
  var hasSmartPtrType = !!record.smartPtrType;
  var hasSmartPtr = !!record.smartPtr;
  if (hasSmartPtrType !== hasSmartPtr) {
    throwInternalError("Both smartPtrType and smartPtr must be specified");
  }
  record.count = {
    value: 1
  };
  return attachFinalizer(Object.create(prototype, {
    $$: {
      value: record,
      writable: true
    }
  }));
};

/** @suppress {globalThis} */ function RegisteredPointer_fromWireType(ptr) {
  // ptr is a raw pointer (or a raw smartpointer)
  // rawPointer is a maybe-null raw pointer
  var rawPointer = this.getPointee(ptr);
  if (!rawPointer) {
    this.destructor(ptr);
    return null;
  }
  var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
  if (undefined !== registeredInstance) {
    // JS object has been neutered, time to repopulate it
    if (0 === registeredInstance.$$.count.value) {
      registeredInstance.$$.ptr = rawPointer;
      registeredInstance.$$.smartPtr = ptr;
      return registeredInstance["clone"]();
    } else {
      // else, just increment reference count on existing object
      // it already has a reference to the smart pointer
      var rv = registeredInstance["clone"]();
      this.destructor(ptr);
      return rv;
    }
  }
  function makeDefaultHandle() {
    if (this.isSmartPointer) {
      return makeClassHandle(this.registeredClass.instancePrototype, {
        ptrType: this.pointeeType,
        ptr: rawPointer,
        smartPtrType: this,
        smartPtr: ptr
      });
    } else {
      return makeClassHandle(this.registeredClass.instancePrototype, {
        ptrType: this,
        ptr
      });
    }
  }
  var actualType = this.registeredClass.getActualType(rawPointer);
  var registeredPointerRecord = registeredPointers[actualType];
  if (!registeredPointerRecord) {
    return makeDefaultHandle.call(this);
  }
  var toType;
  if (this.isConst) {
    toType = registeredPointerRecord.constPointerType;
  } else {
    toType = registeredPointerRecord.pointerType;
  }
  var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
  if (dp === null) {
    return makeDefaultHandle.call(this);
  }
  if (this.isSmartPointer) {
    return makeClassHandle(toType.registeredClass.instancePrototype, {
      ptrType: toType,
      ptr: dp,
      smartPtrType: this,
      smartPtr: ptr
    });
  } else {
    return makeClassHandle(toType.registeredClass.instancePrototype, {
      ptrType: toType,
      ptr: dp
    });
  }
}

var attachFinalizer = handle => {
  if (!globalThis.FinalizationRegistry) {
    attachFinalizer = handle => handle;
    return handle;
  }
  // If the running environment has a FinalizationRegistry (see
  // https://github.com/tc39/proposal-weakrefs), then attach finalizers
  // for class handles.  We check for the presence of FinalizationRegistry
  // at run-time, not build-time.
  finalizationRegistry = new FinalizationRegistry(info => {
    console.warn(info.leakWarning);
    releaseClassHandle(info.$$);
  });
  attachFinalizer = handle => {
    var $$ = handle.$$;
    var hasSmartPtr = !!$$.smartPtr;
    if (hasSmartPtr) {
      // We should not call the destructor on raw pointers in case other code expects the pointee to live
      var info = {
        $$
      };
      // Create a warning as an Error instance in advance so that we can store
      // the current stacktrace and point to it when / if a leak is detected.
      // This is more useful than the empty stacktrace of `FinalizationRegistry`
      // callback.
      var cls = $$.ptrType.registeredClass;
      var err = new Error(`Embind found a leaked C++ instance ${cls.name} <${ptrToString($$.ptr)}>.\n` + "We'll free it automatically in this case, but this functionality is not reliable across various environments.\n" + "Make sure to invoke .delete() manually once you're done with the instance instead.\n" + "Originally allocated");
      // `.stack` will add "at ..." after this sentence
      if ("captureStackTrace" in Error) {
        Error.captureStackTrace(err, RegisteredPointer_fromWireType);
      }
      info.leakWarning = err.stack.replace(/^Error: /, "");
      finalizationRegistry.register(handle, info, handle);
    }
    return handle;
  };
  detachFinalizer = handle => finalizationRegistry.unregister(handle);
  return attachFinalizer(handle);
};

var deletionQueue = [];

var flushPendingDeletes = () => {
  while (deletionQueue.length) {
    var obj = deletionQueue.pop();
    obj.$$.deleteScheduled = false;
    obj["delete"]();
  }
};

var delayFunction;

var init_ClassHandle = () => {
  let proto = ClassHandle.prototype;
  Object.assign(proto, {
    "isAliasOf"(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      other.$$ = /** @type {Object} */ (other.$$);
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
      return leftClass === rightClass && left === right;
    },
    "clone"() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
          $$: {
            value: shallowCopyInternalPointer(this.$$)
          }
        }));
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    },
    "delete"() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }
      detachFinalizer(this);
      releaseClassHandle(this.$$);
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    },
    "isDeleted"() {
      return !this.$$.ptr;
    },
    "deleteLater"() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  });
  // Support `using ...` from https://github.com/tc39/proposal-explicit-resource-management.
  const symbolDispose = Symbol.dispose;
  if (symbolDispose) {
    proto[symbolDispose] = proto["delete"];
  }
};

/** @constructor */ function ClassHandle() {}

var createNamedFunction = (name, func) => Object.defineProperty(func, "name", {
  value: name
});

var ensureOverloadTable = (proto, methodName, humanName) => {
  if (undefined === proto[methodName].overloadTable) {
    var prevFunc = proto[methodName];
    // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
    proto[methodName] = function(...args) {
      // TODO This check can be removed in -O3 level "unsafe" optimizations.
      if (!proto[methodName].overloadTable.hasOwnProperty(args.length)) {
        throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`);
      }
      return proto[methodName].overloadTable[args.length].apply(this, args);
    };
    // Move the previous function into the overload table.
    proto[methodName].overloadTable = [];
    proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
  }
};

/** @param {number=} numArguments */ var exposePublicSymbol = (name, value, numArguments) => {
  if (Module.hasOwnProperty(name)) {
    if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
      throwBindingError(`Cannot register public name '${name}' twice`);
    }
    // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
    // that routes between the two.
    ensureOverloadTable(Module, name, name);
    if (Module[name].overloadTable.hasOwnProperty(numArguments)) {
      throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);
    }
    // Add the new function into the overload table.
    Module[name].overloadTable[numArguments] = value;
  } else {
    Module[name] = value;
    Module[name].argCount = numArguments;
  }
};

var char_0 = 48;

var char_9 = 57;

var makeLegalFunctionName = name => {
  assert(typeof name === "string");
  name = name.replace(/[^a-zA-Z0-9_]/g, "$");
  var f = name.charCodeAt(0);
  if (f >= char_0 && f <= char_9) {
    return `_${name}`;
  }
  return name;
};

/** @constructor */ function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
  this.name = name;
  this.constructor = constructor;
  this.instancePrototype = instancePrototype;
  this.rawDestructor = rawDestructor;
  this.baseClass = baseClass;
  this.getActualType = getActualType;
  this.upcast = upcast;
  this.downcast = downcast;
  this.pureVirtualFunctions = [];
}

var upcastPointer = (ptr, ptrClass, desiredClass) => {
  while (ptrClass !== desiredClass) {
    if (!ptrClass.upcast) {
      throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);
    }
    ptr = ptrClass.upcast(ptr);
    ptrClass = ptrClass.baseClass;
  }
  return ptr;
};

var embindRepr = v => {
  if (v === null) {
    return "null";
  }
  var t = typeof v;
  if (t === "object" || t === "array" || t === "function") {
    return v.toString();
  } else {
    return "" + v;
  }
};

/** @suppress {globalThis} */ function constNoSmartPtrRawPointerToWireType(destructors, handle) {
  if (handle === null) {
    if (this.isReference) {
      throwBindingError(`null is not a valid ${this.name}`);
    }
    return 0;
  }
  if (!handle.$$) {
    throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
  }
  if (!handle.$$.ptr) {
    throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  return ptr;
}

/** @suppress {globalThis} */ function genericPointerToWireType(destructors, handle) {
  var ptr;
  if (handle === null) {
    if (this.isReference) {
      throwBindingError(`null is not a valid ${this.name}`);
    }
    if (this.isSmartPointer) {
      ptr = this.rawConstructor();
      if (destructors !== null) {
        destructors.push(this.rawDestructor, ptr);
      }
      return ptr;
    } else {
      return 0;
    }
  }
  if (!handle || !handle.$$) {
    throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
  }
  if (!handle.$$.ptr) {
    throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
  }
  if (!this.isConst && handle.$$.ptrType.isConst) {
    throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  if (this.isSmartPointer) {
    // TODO: this is not strictly true
    // We could support BY_EMVAL conversions from raw pointers to smart pointers
    // because the smart pointer can hold a reference to the handle
    if (undefined === handle.$$.smartPtr) {
      throwBindingError("Passing raw pointer to smart pointer is illegal");
    }
    switch (this.sharingPolicy) {
     case 0:
      // NONE
      // no upcasting
      if (handle.$$.smartPtrType === this) {
        ptr = handle.$$.smartPtr;
      } else {
        throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
      }
      break;

     case 1:
      // INTRUSIVE
      ptr = handle.$$.smartPtr;
      break;

     case 2:
      // BY_EMVAL
      if (handle.$$.smartPtrType === this) {
        ptr = handle.$$.smartPtr;
      } else {
        var clonedHandle = handle["clone"]();
        ptr = this.rawShare(ptr, Emval.toHandle(() => clonedHandle["delete"]()));
        if (destructors !== null) {
          destructors.push(this.rawDestructor, ptr);
        }
      }
      break;

     default:
      throwBindingError("Unsupporting sharing policy");
    }
  }
  return ptr;
}

/** @suppress {globalThis} */ function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
  if (handle === null) {
    if (this.isReference) {
      throwBindingError(`null is not a valid ${this.name}`);
    }
    return 0;
  }
  if (!handle.$$) {
    throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
  }
  if (!handle.$$.ptr) {
    throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
  }
  if (handle.$$.ptrType.isConst) {
    throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  return ptr;
}

var init_RegisteredPointer = () => {
  Object.assign(RegisteredPointer.prototype, {
    getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    },
    destructor(ptr) {
      this.rawDestructor?.(ptr);
    },
    readValueFromPointer: readPointer,
    fromWireType: RegisteredPointer_fromWireType
  });
};

/** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */ function RegisteredPointer(name, registeredClass, isReference, isConst, // smart pointer properties
isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
  this.name = name;
  this.registeredClass = registeredClass;
  this.isReference = isReference;
  this.isConst = isConst;
  // smart pointer properties
  this.isSmartPointer = isSmartPointer;
  this.pointeeType = pointeeType;
  this.sharingPolicy = sharingPolicy;
  this.rawGetPointee = rawGetPointee;
  this.rawConstructor = rawConstructor;
  this.rawShare = rawShare;
  this.rawDestructor = rawDestructor;
  if (!isSmartPointer && registeredClass.baseClass === undefined) {
    if (isConst) {
      this.toWireType = constNoSmartPtrRawPointerToWireType;
      this.destructorFunction = null;
    } else {
      this.toWireType = nonConstNoSmartPtrRawPointerToWireType;
      this.destructorFunction = null;
    }
  } else {
    this.toWireType = genericPointerToWireType;
  }
}

/** @param {number=} numArguments */ var replacePublicSymbol = (name, value, numArguments) => {
  if (!Module.hasOwnProperty(name)) {
    throwInternalError("Replacing nonexistent public symbol");
  }
  // If there's an overload table for this symbol, replace the symbol in the overload table instead.
  if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
    Module[name].overloadTable[numArguments] = value;
  } else {
    Module[name] = value;
    Module[name].argCount = numArguments;
  }
};

var dynCalls = {};

var dynCallLegacy = (sig, ptr, args) => {
  sig = sig.replace(/p/g, "i");
  assert(sig in dynCalls, `bad function pointer type - sig is not in dynCalls: '${sig}'`);
  if (args?.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, "--").length);
  } else {
    assert(sig.length == 1);
  }
  var f = dynCalls[sig];
  return f(ptr, ...args);
};

/** @suppress{checkTypes} */ var getWasmTableEntry = funcPtr => wasmTable.get(funcPtr);

var dynCall = (sig, ptr, args = [], promising = false) => {
  assert(!promising, "async dynCall is not supported in this mode");
  // Without WASM_BIGINT support we cannot directly call function with i64 as
  // part of their signature, so we rely on the dynCall functions generated by
  // wasm-emscripten-finalize
  if (sig.includes("j")) {
    return dynCallLegacy(sig, ptr, args);
  }
  assert(getWasmTableEntry(ptr), `missing table entry in dynCall: ${ptr}`);
  var func = getWasmTableEntry(ptr);
  var rtn = func(...args);
  function convert(rtn) {
    return rtn;
  }
  return convert(rtn);
};

var getDynCaller = (sig, ptr, promising = false) => {
  assert(sig.includes("j") || sig.includes("p"), "getDynCaller should only be called with i64 sigs");
  return (...args) => dynCall(sig, ptr, args, promising);
};

var embind__requireFunction = (signature, rawFunction, isAsync = false) => {
  assert(!isAsync, "Async bindings are only supported with JSPI.");
  signature = AsciiToString(signature);
  function makeDynCaller() {
    if (signature.includes("j")) {
      return getDynCaller(signature, rawFunction);
    }
    var rtn = getWasmTableEntry(rawFunction);
    return rtn;
  }
  var fp = makeDynCaller();
  if (typeof fp != "function") {
    throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);
  }
  return fp;
};

class UnboundTypeError extends Error {}

var getTypeName = type => {
  var ptr = ___getTypeName(type);
  var rv = AsciiToString(ptr);
  _free(ptr);
  return rv;
};

var throwUnboundTypeError = (message, types) => {
  var unboundTypes = [];
  var seen = {};
  function visit(type) {
    if (seen[type]) {
      return;
    }
    if (registeredTypes[type]) {
      return;
    }
    if (typeDependencies[type]) {
      typeDependencies[type].forEach(visit);
      return;
    }
    unboundTypes.push(type);
    seen[type] = true;
  }
  types.forEach(visit);
  throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([ ", " ]));
};

var __embind_register_class = (rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) => {
  name = AsciiToString(name);
  getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
  upcast &&= embind__requireFunction(upcastSignature, upcast);
  downcast &&= embind__requireFunction(downcastSignature, downcast);
  rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
  var legalFunctionName = makeLegalFunctionName(name);
  exposePublicSymbol(legalFunctionName, function() {
    // this code cannot run if baseClassRawType is zero
    throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [ baseClassRawType ]);
  });
  whenDependentTypesAreResolved([ rawType, rawPointerType, rawConstPointerType ], baseClassRawType ? [ baseClassRawType ] : [], base => {
    base = base[0];
    var baseClass;
    var basePrototype;
    if (baseClassRawType) {
      baseClass = base.registeredClass;
      basePrototype = baseClass.instancePrototype;
    } else {
      basePrototype = ClassHandle.prototype;
    }
    var constructor = createNamedFunction(name, function(...args) {
      if (Object.getPrototypeOf(this) !== instancePrototype) {
        throw new BindingError(`Use 'new' to construct ${name}`);
      }
      if (undefined === registeredClass.constructor_body) {
        throw new BindingError(`${name} has no accessible constructor`);
      }
      var body = registeredClass.constructor_body[args.length];
      if (undefined === body) {
        throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);
      }
      return body.apply(this, args);
    });
    var instancePrototype = Object.create(basePrototype, {
      constructor: {
        value: constructor
      }
    });
    constructor.prototype = instancePrototype;
    var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
    if (registeredClass.baseClass) {
      // Keep track of class hierarchy. Used to allow sub-classes to inherit class functions.
      registeredClass.baseClass.__derivedClasses ??= [];
      registeredClass.baseClass.__derivedClasses.push(registeredClass);
    }
    var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
    var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
    var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
    registeredPointers[rawType] = {
      pointerType: pointerConverter,
      constPointerType: constPointerConverter
    };
    replacePublicSymbol(legalFunctionName, constructor);
    return [ referenceConverter, pointerConverter, constPointerConverter ];
  });
};

var heap32VectorToArray = (count, firstElement) => {
  var array = [];
  for (var i = 0; i < count; i++) {
    // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
    // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
    array.push(HEAPU32[(((firstElement) + (i * 4)) >> 2)]);
  }
  return array;
};

function usesDestructorStack(argTypes) {
  // Skip return value at index 0 - it's not deleted here.
  for (var i = 1; i < argTypes.length; ++i) {
    // The type does not define a destructor function - must use dynamic stack
    if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
      return true;
    }
  }
  return false;
}

function checkArgCount(numArgs, minArgs, maxArgs, humanName, throwBindingError) {
  if (numArgs < minArgs || numArgs > maxArgs) {
    var argCountMessage = minArgs == maxArgs ? minArgs : `${minArgs} to ${maxArgs}`;
    throwBindingError(`function ${humanName} called with ${numArgs} arguments, expected ${argCountMessage}`);
  }
}

function createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync) {
  var needsDestructorStack = usesDestructorStack(argTypes);
  var argCount = argTypes.length - 2;
  var argsList = [];
  var argsListWired = [ "fn" ];
  if (isClassMethodFunc) {
    argsListWired.push("thisWired");
  }
  for (var i = 0; i < argCount; ++i) {
    argsList.push(`arg${i}`);
    argsListWired.push(`arg${i}Wired`);
  }
  argsList = argsList.join(",");
  argsListWired = argsListWired.join(",");
  var invokerFnBody = `return function (${argsList}) {\n`;
  invokerFnBody += "checkArgCount(arguments.length, minArgs, maxArgs, humanName, throwBindingError);\n";
  if (needsDestructorStack) {
    invokerFnBody += "var destructors = [];\n";
  }
  var dtorStack = needsDestructorStack ? "destructors" : "null";
  var args1 = [ "humanName", "throwBindingError", "invoker", "fn", "runDestructors", "fromRetWire", "toClassParamWire" ];
  if (isClassMethodFunc) {
    invokerFnBody += `var thisWired = toClassParamWire(${dtorStack}, this);\n`;
  }
  for (var i = 0; i < argCount; ++i) {
    var argName = `toArg${i}Wire`;
    invokerFnBody += `var arg${i}Wired = ${argName}(${dtorStack}, arg${i});\n`;
    args1.push(argName);
  }
  invokerFnBody += (returns || isAsync ? "var rv = " : "") + `invoker(${argsListWired});\n`;
  if (needsDestructorStack) {
    invokerFnBody += "runDestructors(destructors);\n";
  } else {
    for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
      // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
      var paramName = (i === 1 ? "thisWired" : ("arg" + (i - 2) + "Wired"));
      if (argTypes[i].destructorFunction !== null) {
        invokerFnBody += `${paramName}_dtor(${paramName});\n`;
        args1.push(`${paramName}_dtor`);
      }
    }
  }
  if (returns) {
    invokerFnBody += "var ret = fromRetWire(rv);\n" + "return ret;\n";
  } else {}
  invokerFnBody += "}\n";
  args1.push("checkArgCount", "minArgs", "maxArgs");
  invokerFnBody = `if (arguments.length !== ${args1.length}){ throw new Error(humanName + "Expected ${args1.length} closure arguments " + arguments.length + " given."); }\n${invokerFnBody}`;
  return new Function(args1, invokerFnBody);
}

function getRequiredArgCount(argTypes) {
  var requiredArgCount = argTypes.length - 2;
  for (var i = argTypes.length - 1; i >= 2; --i) {
    if (!argTypes[i].optional) {
      break;
    }
    requiredArgCount--;
  }
  return requiredArgCount;
}

function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, /** boolean= */ isAsync) {
  // humanName: a human-readable string name for the function to be generated.
  // argTypes: An array that contains the embind type objects for all types in the function signature.
  //    argTypes[0] is the type object for the function return value.
  //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
  //    argTypes[2...] are the actual function parameters.
  // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
  // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
  // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
  // isAsync: Optional. If true, returns an async function. Async bindings are only supported with JSPI.
  var argCount = argTypes.length;
  if (argCount < 2) {
    throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
  }
  assert(!isAsync, "Async bindings are only supported with JSPI.");
  var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
  // TODO: Remove this completely once all function invokers are being dynamically generated.
  var needsDestructorStack = usesDestructorStack(argTypes);
  var returns = !argTypes[0].isVoid;
  var expectedArgCount = argCount - 2;
  var minArgs = getRequiredArgCount(argTypes);
  // Builld the arguments that will be passed into the closure around the invoker
  // function.
  var retType = argTypes[0];
  var instType = argTypes[1];
  var closureArgs = [ humanName, throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, retType.fromWireType.bind(retType), instType?.toWireType.bind(instType) ];
  for (var i = 2; i < argCount; ++i) {
    var argType = argTypes[i];
    closureArgs.push(argType.toWireType.bind(argType));
  }
  if (!needsDestructorStack) {
    // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
    for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
      if (argTypes[i].destructorFunction !== null) {
        closureArgs.push(argTypes[i].destructorFunction);
      }
    }
  }
  closureArgs.push(checkArgCount, minArgs, expectedArgCount);
  let invokerFactory = createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync);
  var invokerFn = invokerFactory(...closureArgs);
  return createNamedFunction(humanName, invokerFn);
}

var __embind_register_class_constructor = (rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) => {
  assert(argCount > 0);
  var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  invoker = embind__requireFunction(invokerSignature, invoker);
  whenDependentTypesAreResolved([], [ rawClassType ], classType => {
    classType = classType[0];
    var humanName = `constructor ${classType.name}`;
    if (undefined === classType.registeredClass.constructor_body) {
      classType.registeredClass.constructor_body = [];
    }
    if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
      throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount - 1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
    }
    classType.registeredClass.constructor_body[argCount - 1] = () => {
      throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);
    };
    whenDependentTypesAreResolved([], rawArgTypes, argTypes => {
      // Insert empty slot for context type (argTypes[1]).
      argTypes.splice(1, 0, null);
      classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
      return [];
    });
    return [];
  });
};

var getFunctionName = signature => {
  signature = signature.trim();
  const argsIndex = signature.indexOf("(");
  if (argsIndex === -1) return signature;
  assert(signature.endsWith(")"), "Parentheses for argument names should match.");
  return signature.slice(0, argsIndex);
};

var __embind_register_class_function = (rawClassType, methodName, argCount, rawArgTypesAddr, // [ReturnType, ThisType, Args...]
invokerSignature, rawInvoker, context, isPureVirtual, isAsync, isNonnullReturn) => {
  var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  methodName = AsciiToString(methodName);
  methodName = getFunctionName(methodName);
  rawInvoker = embind__requireFunction(invokerSignature, rawInvoker, isAsync);
  whenDependentTypesAreResolved([], [ rawClassType ], classType => {
    classType = classType[0];
    var humanName = `${classType.name}.${methodName}`;
    if (methodName.startsWith("@@")) {
      methodName = Symbol[methodName.substring(2)];
    }
    if (isPureVirtual) {
      classType.registeredClass.pureVirtualFunctions.push(methodName);
    }
    function unboundTypesHandler() {
      throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
    }
    var proto = classType.registeredClass.instancePrototype;
    var method = proto[methodName];
    if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
      // This is the first overload to be registered, OR we are replacing a
      // function in the base class with a function in the derived class.
      unboundTypesHandler.argCount = argCount - 2;
      unboundTypesHandler.className = classType.name;
      proto[methodName] = unboundTypesHandler;
    } else {
      // There was an existing function with the same name registered. Set up
      // a function overload routing table.
      ensureOverloadTable(proto, methodName, humanName);
      proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
    }
    whenDependentTypesAreResolved([], rawArgTypes, argTypes => {
      var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
      // Replace the initial unbound-handler-stub function with the
      // appropriate member function, now that all types are resolved. If
      // multiple overloads are registered for this function, the function
      // goes into an overload table.
      if (undefined === proto[methodName].overloadTable) {
        // Set argCount in case an overload is registered later
        memberFunction.argCount = argCount - 2;
        proto[methodName] = memberFunction;
      } else {
        proto[methodName].overloadTable[argCount - 2] = memberFunction;
      }
      return [];
    });
    return [];
  });
};

var __embind_register_constant = (name, type, value) => {
  name = AsciiToString(name);
  whenDependentTypesAreResolved([], [ type ], type => {
    type = type[0];
    Module[name] = type.fromWireType(value);
    return [];
  });
};

var emval_freelist = [];

var emval_handles = [ 0, 1, , 1, null, 1, true, 1, false, 1 ];

var __emval_decref = handle => {
  if (handle > 9 && 0 === --emval_handles[handle + 1]) {
    assert(emval_handles[handle] !== undefined, `Decref for unallocated handle.`);
    emval_handles[handle] = undefined;
    emval_freelist.push(handle);
  }
};

var Emval = {
  toValue: handle => {
    if (!handle) {
      throwBindingError(`Cannot use deleted val. handle = ${handle}`);
    }
    // handle 2 is supposed to be `undefined`.
    assert(handle === 2 || emval_handles[handle] !== undefined && handle % 2 === 0, `invalid handle: ${handle}`);
    return emval_handles[handle];
  },
  toHandle: value => {
    switch (value) {
     case undefined:
      return 2;

     case null:
      return 4;

     case true:
      return 6;

     case false:
      return 8;

     default:
      {
        const handle = emval_freelist.pop() || emval_handles.length;
        emval_handles[handle] = value;
        emval_handles[handle + 1] = 1;
        return handle;
      }
    }
  }
};

var EmValType = {
  name: "emscripten::val",
  fromWireType: handle => {
    var rv = Emval.toValue(handle);
    __emval_decref(handle);
    return rv;
  },
  toWireType: (destructors, value) => Emval.toHandle(value),
  readValueFromPointer: readPointer,
  destructorFunction: null
};

var __embind_register_emval = rawType => registerType(rawType, EmValType);

var floatReadValueFromPointer = (name, width) => {
  switch (width) {
   case 4:
    return function(pointer) {
      return this.fromWireType(HEAPF32[((pointer) >> 2)]);
    };

   case 8:
    return function(pointer) {
      return this.fromWireType(HEAPF64[((pointer) >> 3)]);
    };

   default:
    throw new TypeError(`invalid float width (${width}): ${name}`);
  }
};

var __embind_register_float = (rawType, name, size) => {
  name = AsciiToString(name);
  registerType(rawType, {
    name,
    fromWireType: value => value,
    toWireType: (destructors, value) => {
      if (typeof value != "number" && typeof value != "boolean") {
        throw new TypeError(`Cannot convert ${embindRepr(value)} to ${this.name}`);
      }
      // The VM will perform JS to Wasm value conversion, according to the spec:
      // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
      return value;
    },
    readValueFromPointer: floatReadValueFromPointer(name, size),
    destructorFunction: null
  });
};

var __embind_register_function = (name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync, isNonnullReturn) => {
  var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  name = AsciiToString(name);
  name = getFunctionName(name);
  rawInvoker = embind__requireFunction(signature, rawInvoker, isAsync);
  exposePublicSymbol(name, function() {
    throwUnboundTypeError(`Cannot call ${name} due to unbound types`, argTypes);
  }, argCount - 1);
  whenDependentTypesAreResolved([], argTypes, argTypes => {
    var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));
    replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn, isAsync), argCount - 1);
    return [];
  });
};

var integerReadValueFromPointer = (name, width, signed) => {
  // integers are quite common, so generate very specialized functions
  switch (width) {
   case 1:
    return signed ? pointer => HEAP8[pointer] : pointer => HEAPU8[pointer];

   case 2:
    return signed ? pointer => HEAP16[((pointer) >> 1)] : pointer => HEAPU16[((pointer) >> 1)];

   case 4:
    return signed ? pointer => HEAP32[((pointer) >> 2)] : pointer => HEAPU32[((pointer) >> 2)];

   default:
    throw new TypeError(`invalid integer width (${width}): ${name}`);
  }
};

var assertIntegerRange = (typeName, value, minRange, maxRange) => {
  if (value < minRange || value > maxRange) {
    throw new TypeError(`Passing a number "${embindRepr(value)}" from JS side to C/C++ side to an argument of type "${typeName}", which is outside the valid range [${minRange}, ${maxRange}]!`);
  }
};

/** @suppress {globalThis} */ var __embind_register_integer = (primitiveType, name, size, minRange, maxRange) => {
  name = AsciiToString(name);
  const isUnsignedType = minRange === 0;
  let fromWireType = value => value;
  if (isUnsignedType) {
    var bitshift = 32 - 8 * size;
    fromWireType = value => (value << bitshift) >>> bitshift;
    maxRange = fromWireType(maxRange);
  }
  registerType(primitiveType, {
    name,
    fromWireType,
    toWireType: (destructors, value) => {
      if (typeof value != "number" && typeof value != "boolean") {
        throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${name}`);
      }
      assertIntegerRange(name, value, minRange, maxRange);
      // The VM will perform JS to Wasm value conversion, according to the spec:
      // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
      return value;
    },
    readValueFromPointer: integerReadValueFromPointer(name, size, minRange !== 0),
    destructorFunction: null
  });
};

var __embind_register_memory_view = (rawType, dataTypeIndex, name) => {
  var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];
  var TA = typeMapping[dataTypeIndex];
  function decodeMemoryView(handle) {
    var size = HEAPU32[((handle) >> 2)];
    var data = HEAPU32[(((handle) + (4)) >> 2)];
    return new TA(HEAP8.buffer, data, size);
  }
  name = AsciiToString(name);
  registerType(rawType, {
    name,
    fromWireType: decodeMemoryView,
    readValueFromPointer: decodeMemoryView
  }, {
    ignoreDuplicateRegistrations: true
  });
};

var EmValOptionalType = Object.assign({
  optional: true
}, EmValType);

var __embind_register_optional = (rawOptionalType, rawType) => {
  registerType(rawOptionalType, EmValOptionalType);
};

var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
  assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
};

var __embind_register_std_string = (rawType, name) => {
  name = AsciiToString(name);
  var stdStringIsUTF8 = true;
  registerType(rawType, {
    name,
    // For some method names we use string keys here since they are part of
    // the public/external API and/or used by the runtime-generated code.
    fromWireType(value) {
      var length = HEAPU32[((value) >> 2)];
      var payload = value + 4;
      var str;
      if (stdStringIsUTF8) {
        str = UTF8ToString(payload, length, true);
      } else {
        str = "";
        for (var i = 0; i < length; ++i) {
          str += String.fromCharCode(HEAPU8[payload + i]);
        }
      }
      _free(value);
      return str;
    },
    toWireType(destructors, value) {
      if (value instanceof ArrayBuffer) {
        value = new Uint8Array(value);
      }
      var length;
      var valueIsOfTypeString = (typeof value == "string");
      // We accept `string` or array views with single byte elements
      if (!(valueIsOfTypeString || (ArrayBuffer.isView(value) && value.BYTES_PER_ELEMENT == 1))) {
        throwBindingError("Cannot pass non-string to std::string");
      }
      if (stdStringIsUTF8 && valueIsOfTypeString) {
        length = lengthBytesUTF8(value);
      } else {
        length = value.length;
      }
      // assumes POINTER_SIZE alignment
      var base = _malloc(4 + length + 1);
      var ptr = base + 4;
      HEAPU32[((base) >> 2)] = length;
      if (valueIsOfTypeString) {
        if (stdStringIsUTF8) {
          stringToUTF8(value, ptr, length + 1);
        } else {
          for (var i = 0; i < length; ++i) {
            var charCode = value.charCodeAt(i);
            if (charCode > 255) {
              _free(base);
              throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
            }
            HEAPU8[ptr + i] = charCode;
          }
        }
      } else {
        HEAPU8.set(value, ptr);
      }
      if (destructors !== null) {
        destructors.push(_free, base);
      }
      return base;
    },
    readValueFromPointer: readPointer,
    destructorFunction(ptr) {
      _free(ptr);
    }
  });
};

var UTF16Decoder = new TextDecoder("utf-16le");

var UTF16ToString = (ptr, maxBytesToRead, ignoreNul) => {
  assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
  var idx = ((ptr) >> 1);
  var endIdx = findStringEnd(HEAPU16, idx, maxBytesToRead / 2, ignoreNul);
  return UTF16Decoder.decode(HEAPU16.subarray(idx, endIdx));
};

var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
  assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
  assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  maxBytesToWrite ??= 2147483647;
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2;
  // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i);
    // possibly a lead surrogate
    HEAP16[((outPtr) >> 1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr) >> 1)] = 0;
  return outPtr - startPtr;
};

var lengthBytesUTF16 = str => str.length * 2;

var UTF32ToString = (ptr, maxBytesToRead, ignoreNul) => {
  assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
  var str = "";
  var startIdx = ((ptr) >> 2);
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  for (var i = 0; !(i >= maxBytesToRead / 4); i++) {
    var utf32 = HEAPU32[startIdx + i];
    if (!utf32 && !ignoreNul) break;
    str += String.fromCodePoint(utf32);
  }
  return str;
};

var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
  assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
  assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  maxBytesToWrite ??= 2147483647;
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    var codePoint = str.codePointAt(i);
    // Gotcha: if codePoint is over 0xFFFF, it is represented as a surrogate pair in UTF-16.
    // We need to manually skip over the second code unit for correct iteration.
    if (codePoint > 65535) {
      i++;
    }
    HEAP32[((outPtr) >> 2)] = codePoint;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr) >> 2)] = 0;
  return outPtr - startPtr;
};

var lengthBytesUTF32 = str => {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    var codePoint = str.codePointAt(i);
    // Gotcha: if codePoint is over 0xFFFF, it is represented as a surrogate pair in UTF-16.
    // We need to manually skip over the second code unit for correct iteration.
    if (codePoint > 65535) {
      i++;
    }
    len += 4;
  }
  return len;
};

var __embind_register_std_wstring = (rawType, charSize, name) => {
  name = AsciiToString(name);
  var decodeString, encodeString, lengthBytesUTF;
  if (charSize === 2) {
    decodeString = UTF16ToString;
    encodeString = stringToUTF16;
    lengthBytesUTF = lengthBytesUTF16;
  } else {
    assert(charSize === 4, "only 2-byte and 4-byte strings are currently supported");
    decodeString = UTF32ToString;
    encodeString = stringToUTF32;
    lengthBytesUTF = lengthBytesUTF32;
  }
  registerType(rawType, {
    name,
    fromWireType: value => {
      // Code mostly taken from _embind_register_std_string fromWireType
      var length = HEAPU32[((value) >> 2)];
      var str = decodeString(value + 4, length * charSize, true);
      _free(value);
      return str;
    },
    toWireType: (destructors, value) => {
      if (!(typeof value == "string")) {
        throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
      }
      // assumes POINTER_SIZE alignment
      var length = lengthBytesUTF(value);
      var ptr = _malloc(4 + length + charSize);
      HEAPU32[((ptr) >> 2)] = length / charSize;
      encodeString(value, ptr + 4, length + charSize);
      if (destructors !== null) {
        destructors.push(_free, ptr);
      }
      return ptr;
    },
    readValueFromPointer: readPointer,
    destructorFunction(ptr) {
      _free(ptr);
    }
  });
};

var __embind_register_value_object = (rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) => {
  structRegistrations[rawType] = {
    name: AsciiToString(name),
    rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
    rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
    fields: []
  };
};

var __embind_register_value_object_field = (structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) => {
  structRegistrations[structType].fields.push({
    fieldName: AsciiToString(fieldName),
    getterReturnType,
    getter: embind__requireFunction(getterSignature, getter),
    getterContext,
    setterArgumentType,
    setter: embind__requireFunction(setterSignature, setter),
    setterContext
  });
};

var __embind_register_void = (rawType, name) => {
  name = AsciiToString(name);
  registerType(rawType, {
    isVoid: true,
    // void return values can be optimized out sometimes
    name,
    fromWireType: () => undefined,
    // TODO: assert if anything else is given?
    toWireType: (destructors, o) => undefined
  });
};

var __emscripten_throw_longjmp = () => {
  throw Infinity;
};

var __emval_array_to_memory_view = (dst, src) => {
  dst = Emval.toValue(dst);
  src = Emval.toValue(src);
  dst.set(src);
};

var emval_methodCallers = [];

var emval_addMethodCaller = caller => {
  var id = emval_methodCallers.length;
  emval_methodCallers.push(caller);
  return id;
};

var requireRegisteredType = (rawType, humanName) => {
  var impl = registeredTypes[rawType];
  if (undefined === impl) {
    throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`);
  }
  return impl;
};

var emval_lookupTypes = (argCount, argTypes) => {
  var a = new Array(argCount);
  for (var i = 0; i < argCount; ++i) {
    a[i] = requireRegisteredType(HEAPU32[(((argTypes) + (i * 4)) >> 2)], `parameter ${i}`);
  }
  return a;
};

var emval_returnValue = (toReturnWire, destructorsRef, handle) => {
  var destructors = [];
  var result = toReturnWire(destructors, handle);
  if (destructors.length) {
    // void, primitives and any other types w/o destructors don't need to allocate a handle
    HEAPU32[((destructorsRef) >> 2)] = Emval.toHandle(destructors);
  }
  return result;
};

var emval_symbols = {};

var getStringOrSymbol = address => {
  var symbol = emval_symbols[address];
  if (symbol === undefined) {
    return AsciiToString(address);
  }
  return symbol;
};

var __emval_create_invoker = (argCount, argTypesPtr, kind) => {
  var GenericWireTypeSize = 8;
  var [retType, ...argTypes] = emval_lookupTypes(argCount, argTypesPtr);
  var toReturnWire = retType.toWireType.bind(retType);
  var argFromPtr = argTypes.map(type => type.readValueFromPointer.bind(type));
  argCount--;
  // remove the extracted return type
  var captures = {
    "toValue": Emval.toValue
  };
  var args = argFromPtr.map((argFromPtr, i) => {
    var captureName = `argFromPtr${i}`;
    captures[captureName] = argFromPtr;
    return `${captureName}(args${i ? "+" + i * GenericWireTypeSize : ""})`;
  });
  var functionBody;
  switch (kind) {
   case 0:
    functionBody = "toValue(handle)";
    break;

   case 2:
    functionBody = "new (toValue(handle))";
    break;

   case 3:
    functionBody = "";
    break;

   case 1:
    captures["getStringOrSymbol"] = getStringOrSymbol;
    functionBody = "toValue(handle)[getStringOrSymbol(methodName)]";
    break;
  }
  functionBody += `(${args})`;
  if (!retType.isVoid) {
    captures["toReturnWire"] = toReturnWire;
    captures["emval_returnValue"] = emval_returnValue;
    functionBody = `return emval_returnValue(toReturnWire, destructorsRef, ${functionBody})`;
  }
  functionBody = `return function (handle, methodName, destructorsRef, args) {\n  ${functionBody}\n  }`;
  var invokerFunction = new Function(Object.keys(captures), functionBody)(...Object.values(captures));
  var functionName = `methodCaller<(${argTypes.map(t => t.name)}) => ${retType.name}>`;
  return emval_addMethodCaller(createNamedFunction(functionName, invokerFunction));
};

var __emval_get_property = (handle, key) => {
  handle = Emval.toValue(handle);
  key = Emval.toValue(key);
  return Emval.toHandle(handle[key]);
};

var __emval_incref = handle => {
  if (handle > 9) {
    emval_handles[handle + 1] += 1;
  }
};

var __emval_invoke = (caller, handle, methodName, destructorsRef, args) => emval_methodCallers[caller](handle, methodName, destructorsRef, args);

var __emval_new_array = () => Emval.toHandle([]);

var __emval_new_cstring = v => Emval.toHandle(getStringOrSymbol(v));

var __emval_new_object = () => Emval.toHandle({});

var __emval_run_destructors = handle => {
  var destructors = Emval.toValue(handle);
  runDestructors(destructors);
  __emval_decref(handle);
};

var __emval_set_property = (handle, key, value) => {
  handle = Emval.toValue(handle);
  key = Emval.toValue(key);
  value = Emval.toValue(value);
  handle[key] = value;
};

var isLeapYear = year => year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);

var MONTH_DAYS_LEAP_CUMULATIVE = [ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 ];

var MONTH_DAYS_REGULAR_CUMULATIVE = [ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 ];

var ydayFromDate = date => {
  var leap = isLeapYear(date.getFullYear());
  var monthDaysCumulative = (leap ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE);
  var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;
  // -1 since it's days since Jan 1
  return yday;
};

var convertI32PairToI53Checked = (lo, hi) => {
  assert(lo == (lo >>> 0) || lo == (lo | 0));
  // lo should either be a i32 or a u32
  assert(hi === (hi | 0));
  // hi should be a i32
  return ((hi + 2097152) >>> 0 < 4194305 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
};

function __localtime_js(time_low, time_high, tmPtr) {
  var time = convertI32PairToI53Checked(time_low, time_high);
  var date = new Date(time * 1e3);
  HEAP32[((tmPtr) >> 2)] = date.getSeconds();
  HEAP32[(((tmPtr) + (4)) >> 2)] = date.getMinutes();
  HEAP32[(((tmPtr) + (8)) >> 2)] = date.getHours();
  HEAP32[(((tmPtr) + (12)) >> 2)] = date.getDate();
  HEAP32[(((tmPtr) + (16)) >> 2)] = date.getMonth();
  HEAP32[(((tmPtr) + (20)) >> 2)] = date.getFullYear() - 1900;
  HEAP32[(((tmPtr) + (24)) >> 2)] = date.getDay();
  var yday = ydayFromDate(date) | 0;
  HEAP32[(((tmPtr) + (28)) >> 2)] = yday;
  HEAP32[(((tmPtr) + (36)) >> 2)] = -(date.getTimezoneOffset() * 60);
  // Attention: DST is in December in South, and some regions don't have DST at all.
  var start = new Date(date.getFullYear(), 0, 1);
  var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
  var winterOffset = start.getTimezoneOffset();
  var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
  HEAP32[(((tmPtr) + (32)) >> 2)] = dst;
}

var __tzset_js = (timezone, daylight, std_name, dst_name) => {
  // TODO: Use (malleable) environment variables instead of system settings.
  var currentYear = (new Date).getFullYear();
  var winter = new Date(currentYear, 0, 1);
  var summer = new Date(currentYear, 6, 1);
  var winterOffset = winter.getTimezoneOffset();
  var summerOffset = summer.getTimezoneOffset();
  // Local standard timezone offset. Local standard time is not adjusted for
  // daylight savings.  This code uses the fact that getTimezoneOffset returns
  // a greater value during Standard Time versus Daylight Saving Time (DST).
  // Thus it determines the expected output during Standard Time, and it
  // compares whether the output of the given date the same (Standard) or less
  // (DST).
  var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  // timezone is specified as seconds west of UTC ("The external variable
  // `timezone` shall be set to the difference, in seconds, between
  // Coordinated Universal Time (UTC) and local standard time."), the same
  // as returned by stdTimezoneOffset.
  // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
  HEAPU32[((timezone) >> 2)] = stdTimezoneOffset * 60;
  HEAP32[((daylight) >> 2)] = Number(winterOffset != summerOffset);
  var extractZone = timezoneOffset => {
    // Why inverse sign?
    // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
    var sign = timezoneOffset >= 0 ? "-" : "+";
    var absOffset = Math.abs(timezoneOffset);
    var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
    var minutes = String(absOffset % 60).padStart(2, "0");
    return `UTC${sign}${hours}${minutes}`;
  };
  var winterName = extractZone(winterOffset);
  var summerName = extractZone(summerOffset);
  assert(winterName);
  assert(summerName);
  assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
  assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
  if (summerOffset < winterOffset) {
    // Northern hemisphere
    stringToUTF8(winterName, std_name, 17);
    stringToUTF8(summerName, dst_name, 17);
  } else {
    stringToUTF8(winterName, dst_name, 17);
    stringToUTF8(summerName, std_name, 17);
  }
};

var readEmAsmArgsArray = [];

var readEmAsmArgs = (sigPtr, buf) => {
  // Nobody should have mutated _readEmAsmArgsArray underneath us to be something else than an array.
  assert(Array.isArray(readEmAsmArgsArray));
  // The input buffer is allocated on the stack, so it must be stack-aligned.
  assert(buf % 16 == 0);
  readEmAsmArgsArray.length = 0;
  var ch;
  // Most arguments are i32s, so shift the buffer pointer so it is a plain
  // index into HEAP32.
  while (ch = HEAPU8[sigPtr++]) {
    var chr = String.fromCharCode(ch);
    var validChars = [ "d", "f", "i", "p" ];
    assert(validChars.includes(chr), `Invalid character ${ch}("${chr}") in readEmAsmArgs! Use only [${validChars}], and do not specify "v" for void return argument.`);
    // Floats are always passed as doubles, so all types except for 'i'
    // are 8 bytes and require alignment.
    var wide = (ch != 105);
    wide &= (ch != 112);
    buf += wide && (buf % 8) ? 4 : 0;
    readEmAsmArgsArray.push(// Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
    ch == 112 ? HEAPU32[((buf) >> 2)] : ch == 105 ? HEAP32[((buf) >> 2)] : HEAPF64[((buf) >> 3)]);
    buf += wide ? 8 : 4;
  }
  return readEmAsmArgsArray;
};

var runEmAsmFunction = (code, sigPtr, argbuf) => {
  var args = readEmAsmArgs(sigPtr, argbuf);
  assert(ASM_CONSTS.hasOwnProperty(code), `No EM_ASM constant found at address ${code}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
  return ASM_CONSTS[code](...args);
};

var _emscripten_asm_const_int = (code, sigPtr, argbuf) => runEmAsmFunction(code, sigPtr, argbuf);

var _emscripten_console_error = str => {
  assert(typeof str == "number");
  console.error(UTF8ToString(str));
};

var _emscripten_console_warn = str => {
  assert(typeof str == "number");
  console.warn(UTF8ToString(str));
};

var _emscripten_date_now = () => Date.now();

var getHeapMax = () => // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
// full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
// for any code that deals with heap sizes, which would require special
// casing all heap size related code to treat 0 specially.
2147483648;

var alignMemory = (size, alignment) => {
  assert(alignment, "alignment argument is required");
  return Math.ceil(size / alignment) * alignment;
};

var growMemory = size => {
  var oldHeapSize = wasmMemory.buffer.byteLength;
  var pages = ((size - oldHeapSize + 65535) / 65536) | 0;
  try {
    // round size grow request up to wasm page size (fixed 64KB per spec)
    wasmMemory.grow(pages);
    // .grow() takes a delta compared to the previous size
    updateMemoryViews();
    return 1;
  } catch (e) {
    err(`growMemory: Attempted to grow heap from ${oldHeapSize} bytes to ${size} bytes, but got error: ${e}`);
  }
};

var _emscripten_resize_heap = requestedSize => {
  var oldSize = HEAPU8.length;
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  requestedSize >>>= 0;
  // With multithreaded builds, races can happen (another thread might increase the size
  // in between), so return a failure, and let the caller retry.
  assert(requestedSize > oldSize);
  // Memory resize rules:
  // 1.  Always increase heap size to at least the requested size, rounded up
  //     to next page multiple.
  // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
  //     geometrically: increase the heap size according to
  //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
  //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
  // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
  //     linearly: increase the heap size by at least
  //     MEMORY_GROWTH_LINEAR_STEP bytes.
  // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
  //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
  // 4.  If we were unable to allocate as much memory, it may be due to
  //     over-eager decision to excessively reserve due to (3) above.
  //     Hence if an allocation fails, cut down on the amount of excess
  //     growth, in an attempt to succeed to perform a smaller allocation.
  // A limit is set for how much we can grow. We should not exceed that
  // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
  var maxHeapSize = getHeapMax();
  if (requestedSize > maxHeapSize) {
    err(`Cannot enlarge memory, requested ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);
    return false;
  }
  // Loop through potential heap size increases. If we attempt a too eager
  // reservation that fails, cut down on the attempted size and reserve a
  // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
  for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
    var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
    // ensure geometric growth
    // but limit overreserving (default to capping at +96MB overgrowth at most)
    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
    var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
    var replacement = growMemory(newSize);
    if (replacement) {
      err("Warning: Enlarging memory arrays, this is not fast! " + [ oldSize, newSize ]);
      return true;
    }
  }
  err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);
  return false;
};

var ENV = {};

var getExecutableName = () => thisProgram || "./this.program";

var getEnvStrings = () => {
  if (!getEnvStrings.strings) {
    // Default values.
    // Browser language detection #8751
    var lang = ((typeof navigator == "object" && navigator.language) || "C").replace("-", "_") + ".UTF-8";
    var env = {
      "USER": "web_user",
      "LOGNAME": "web_user",
      "PATH": "/",
      "PWD": "/",
      "HOME": "/home/web_user",
      "LANG": lang,
      "_": getExecutableName()
    };
    // Apply the user-provided values, if any.
    for (var x in ENV) {
      // x is a key in ENV; if ENV[x] is undefined, that means it was
      // explicitly set to be so. We allow user code to do that to
      // force variables with default values to remain unset.
      if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];
    }
    var strings = [];
    for (var x in env) {
      strings.push(`${x}=${env[x]}`);
    }
    getEnvStrings.strings = strings;
  }
  return getEnvStrings.strings;
};

var _environ_get = (__environ, environ_buf) => {
  var bufSize = 0;
  var envp = 0;
  for (var string of getEnvStrings()) {
    var ptr = environ_buf + bufSize;
    HEAPU32[(((__environ) + (envp)) >> 2)] = ptr;
    bufSize += stringToUTF8(string, ptr, Infinity) + 1;
    envp += 4;
  }
  return 0;
};

var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
  var strings = getEnvStrings();
  HEAPU32[((penviron_count) >> 2)] = strings.length;
  var bufSize = 0;
  for (var string of strings) {
    bufSize += lengthBytesUTF8(string) + 1;
  }
  HEAPU32[((penviron_buf_size) >> 2)] = bufSize;
  return 0;
};

var runtimeKeepaliveCounter = 0;

var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;

var _proc_exit = code => {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    Module["onExit"]?.(code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
};

/** @param {boolean|number=} implicit */ var exitJS = (status, implicit) => {
  EXITSTATUS = status;
  checkUnflushedContent();
  // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
  if (keepRuntimeAlive() && !implicit) {
    var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;
    err(msg);
  }
  _proc_exit(status);
};

var _exit = exitJS;

function _fd_close(fd) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.close(stream);
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @param {number=} offset */ var doReadv = (stream, iov, iovcnt, offset) => {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
    var ptr = HEAPU32[((iov) >> 2)];
    var len = HEAPU32[(((iov) + (4)) >> 2)];
    iov += 8;
    var curr = FS.read(stream, HEAP8, ptr, len, offset);
    if (curr < 0) return -1;
    ret += curr;
    if (curr < len) break;
    // nothing more to read
    if (typeof offset != "undefined") {
      offset += curr;
    }
  }
  return ret;
};

function _fd_read(fd, iov, iovcnt, pnum) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = doReadv(stream, iov, iovcnt);
    HEAPU32[((pnum) >> 2)] = num;
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  var offset = convertI32PairToI53Checked(offset_low, offset_high);
  try {
    if (isNaN(offset)) return 61;
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.llseek(stream, offset, whence);
    (tempI64 = [ stream.position >>> 0, (tempDouble = stream.position, (+(Math.abs(tempDouble))) >= 1 ? (tempDouble > 0 ? (+(Math.floor((tempDouble) / 4294967296))) >>> 0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296))))) >>> 0) : 0) ], 
    HEAP32[((newOffset) >> 2)] = tempI64[0], HEAP32[(((newOffset) + (4)) >> 2)] = tempI64[1]);
    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
    // reset readdir state
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

/** @param {number=} offset */ var doWritev = (stream, iov, iovcnt, offset) => {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
    var ptr = HEAPU32[((iov) >> 2)];
    var len = HEAPU32[(((iov) + (4)) >> 2)];
    iov += 8;
    var curr = FS.write(stream, HEAP8, ptr, len, offset);
    if (curr < 0) return -1;
    ret += curr;
    if (curr < len) {
      // No more space to write.
      break;
    }
    if (typeof offset != "undefined") {
      offset += curr;
    }
  }
  return ret;
};

function _fd_write(fd, iov, iovcnt, pnum) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = doWritev(stream, iov, iovcnt);
    HEAPU32[((pnum) >> 2)] = num;
    return 0;
  } catch (e) {
    if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
    return e.errno;
  }
}

FS.createPreloadedFile = FS_createPreloadedFile;

FS.preloadFile = FS_preloadFile;

FS.staticInit();

init_ClassHandle();

init_RegisteredPointer();

assert(emval_handles.length === 5 * 2);

// End JS library code
// include: postlibrary.js
// This file is included after the automatically-generated JS library code
// but before the wasm module is created.
{
  // Begin ATMODULES hooks
  if (Module["noExitRuntime"]) noExitRuntime = Module["noExitRuntime"];
  if (Module["preloadPlugins"]) preloadPlugins = Module["preloadPlugins"];
  if (Module["print"]) out = Module["print"];
  if (Module["printErr"]) err = Module["printErr"];
  if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
  // End ATMODULES hooks
  checkIncomingModuleAPI();
  if (Module["arguments"]) arguments_ = Module["arguments"];
  if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
  // Assertions on removed incoming Module JS APIs.
  assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
  assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
  assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
  assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
  assert(typeof Module["read"] == "undefined", "Module.read option was removed");
  assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
  assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
  assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");
  assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
  assert(typeof Module["ENVIRONMENT"] == "undefined", "Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");
  assert(typeof Module["STACK_SIZE"] == "undefined", "STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");
  // If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
  assert(typeof Module["wasmMemory"] == "undefined", "Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally");
  assert(typeof Module["INITIAL_MEMORY"] == "undefined", "Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
    while (Module["preInit"].length > 0) {
      Module["preInit"].shift()();
    }
  }
  consumedModuleProp("preInit");
}

// Begin runtime exports
Module["FS"] = FS;

var missingLibrarySymbols = [ "writeI53ToI64", "writeI53ToI64Clamped", "writeI53ToI64Signaling", "writeI53ToU64Clamped", "writeI53ToU64Signaling", "readI53FromI64", "readI53FromU64", "convertI32PairToI53", "convertU32PairToI53", "stackAlloc", "getTempRet0", "setTempRet0", "zeroMemory", "withStackSave", "inetPton4", "inetNtop4", "inetPton6", "inetNtop6", "readSockaddr", "writeSockaddr", "runMainThreadEmAsm", "jstoi_q", "autoResumeAudioContext", "setWasmTableEntry", "handleException", "runtimeKeepalivePush", "runtimeKeepalivePop", "callUserCallback", "maybeExit", "asmjsMangle", "HandleAllocator", "addOnInit", "addOnPostCtor", "addOnPreMain", "addOnExit", "STACK_SIZE", "STACK_ALIGN", "POINTER_SIZE", "ASSERTIONS", "ccall", "cwrap", "getEmptyTableSlot", "updateTableMap", "getFunctionAddress", "addFunction", "removeFunction", "intArrayToString", "stringToAscii", "stringToNewUTF8", "stringToUTF8OnStack", "writeArrayToMemory", "registerKeyEventCallback", "maybeCStringToJsString", "findEventTarget", "getBoundingClientRect", "fillMouseEventData", "registerMouseEventCallback", "registerWheelEventCallback", "registerUiEventCallback", "registerFocusEventCallback", "fillDeviceOrientationEventData", "registerDeviceOrientationEventCallback", "fillDeviceMotionEventData", "registerDeviceMotionEventCallback", "screenOrientation", "fillOrientationChangeEventData", "registerOrientationChangeEventCallback", "fillFullscreenChangeEventData", "registerFullscreenChangeEventCallback", "JSEvents_requestFullscreen", "JSEvents_resizeCanvasForFullscreen", "registerRestoreOldStyle", "hideEverythingExceptGivenElement", "restoreHiddenElements", "setLetterbox", "softFullscreenResizeWebGLRenderTarget", "doRequestFullscreen", "fillPointerlockChangeEventData", "registerPointerlockChangeEventCallback", "registerPointerlockErrorEventCallback", "requestPointerLock", "fillVisibilityChangeEventData", "registerVisibilityChangeEventCallback", "registerTouchEventCallback", "fillGamepadEventData", "registerGamepadEventCallback", "registerBeforeUnloadEventCallback", "fillBatteryEventData", "registerBatteryEventCallback", "setCanvasElementSize", "getCanvasElementSize", "jsStackTrace", "getCallstack", "convertPCtoSourceLocation", "checkWasiClock", "wasiRightsToMuslOFlags", "wasiOFlagsToMuslOFlags", "safeSetTimeout", "setImmediateWrapped", "safeRequestAnimationFrame", "clearImmediateWrapped", "registerPostMainLoop", "registerPreMainLoop", "getPromise", "makePromise", "idsToPromises", "makePromiseCallback", "findMatchingCatch", "Browser_asyncPrepareDataCounter", "arraySum", "addDays", "getSocketFromFD", "getSocketAddress", "FS_mkdirTree", "_setNetworkCallback", "heapObjectForWebGLType", "toTypedArrayIndex", "webgl_enable_ANGLE_instanced_arrays", "webgl_enable_OES_vertex_array_object", "webgl_enable_WEBGL_draw_buffers", "webgl_enable_WEBGL_multi_draw", "webgl_enable_EXT_polygon_offset_clamp", "webgl_enable_EXT_clip_control", "webgl_enable_WEBGL_polygon_mode", "emscriptenWebGLGet", "computeUnpackAlignedImageSize", "colorChannelsInGlTextureFormat", "emscriptenWebGLGetTexPixelData", "emscriptenWebGLGetUniform", "webglGetUniformLocation", "webglPrepareUniformLocationsBeforeFirstUse", "webglGetLeftBracePos", "emscriptenWebGLGetVertexAttrib", "__glGetActiveAttribOrUniform", "writeGLArray", "registerWebGlEventCallback", "runAndAbortIfError", "ALLOC_NORMAL", "ALLOC_STACK", "allocate", "writeStringToMemory", "writeAsciiToMemory", "allocateUTF8", "allocateUTF8OnStack", "demangle", "stackTrace", "getNativeTypeSize", "getFunctionArgsName", "createJsInvokerSignature", "PureVirtualError", "registerInheritedInstance", "unregisterInheritedInstance", "getInheritedInstanceCount", "getLiveInheritedInstances", "enumReadValueFromPointer", "setDelayFunction", "validateThis", "count_emval_handles" ];

missingLibrarySymbols.forEach(missingLibrarySymbol);

var unexportedSymbols = [ "run", "out", "err", "callMain", "abort", "wasmExports", "HEAPF32", "HEAPF64", "HEAP8", "HEAPU8", "HEAP16", "HEAPU16", "HEAP32", "HEAPU32", "HEAP64", "HEAPU64", "writeStackCookie", "checkStackCookie", "convertI32PairToI53Checked", "stackSave", "stackRestore", "createNamedFunction", "ptrToString", "exitJS", "getHeapMax", "growMemory", "ENV", "ERRNO_CODES", "strError", "DNS", "Protocols", "Sockets", "timers", "warnOnce", "readEmAsmArgsArray", "readEmAsmArgs", "runEmAsmFunction", "getExecutableName", "dynCallLegacy", "getDynCaller", "dynCall", "getWasmTableEntry", "keepRuntimeAlive", "asyncLoad", "alignMemory", "mmapAlloc", "wasmTable", "wasmMemory", "getUniqueRunDependency", "noExitRuntime", "addRunDependency", "removeRunDependency", "addOnPreRun", "addOnPostRun", "freeTableIndexes", "functionsInTableMap", "setValue", "getValue", "PATH", "PATH_FS", "UTF8Decoder", "UTF8ArrayToString", "UTF8ToString", "stringToUTF8Array", "stringToUTF8", "lengthBytesUTF8", "intArrayFromString", "AsciiToString", "UTF16Decoder", "UTF16ToString", "stringToUTF16", "lengthBytesUTF16", "UTF32ToString", "stringToUTF32", "lengthBytesUTF32", "JSEvents", "specialHTMLTargets", "findCanvasEventTarget", "currentFullscreenStrategy", "restoreOldWindowedStyle", "UNWIND_CACHE", "ExitStatus", "getEnvStrings", "doReadv", "doWritev", "initRandomFill", "randomFill", "emSetImmediate", "emClearImmediate_deps", "emClearImmediate", "promiseMap", "uncaughtExceptionCount", "exceptionLast", "exceptionCaught", "ExceptionInfo", "Browser", "requestFullscreen", "requestFullScreen", "setCanvasSize", "getUserMedia", "createContext", "getPreloadedImageData__data", "wget", "MONTH_DAYS_REGULAR", "MONTH_DAYS_LEAP", "MONTH_DAYS_REGULAR_CUMULATIVE", "MONTH_DAYS_LEAP_CUMULATIVE", "isLeapYear", "ydayFromDate", "SYSCALLS", "preloadPlugins", "FS_createPreloadedFile", "FS_preloadFile", "FS_modeStringToFlags", "FS_getMode", "FS_stdin_getChar_buffer", "FS_stdin_getChar", "FS_unlink", "FS_createPath", "FS_createDevice", "FS_readFile", "FS_root", "FS_mounts", "FS_devices", "FS_streams", "FS_nextInode", "FS_nameTable", "FS_currentPath", "FS_initialized", "FS_ignorePermissions", "FS_filesystems", "FS_syncFSRequests", "FS_readFiles", "FS_lookupPath", "FS_getPath", "FS_hashName", "FS_hashAddNode", "FS_hashRemoveNode", "FS_lookupNode", "FS_createNode", "FS_destroyNode", "FS_isRoot", "FS_isMountpoint", "FS_isFile", "FS_isDir", "FS_isLink", "FS_isChrdev", "FS_isBlkdev", "FS_isFIFO", "FS_isSocket", "FS_flagsToPermissionString", "FS_nodePermissions", "FS_mayLookup", "FS_mayCreate", "FS_mayDelete", "FS_mayOpen", "FS_checkOpExists", "FS_nextfd", "FS_getStreamChecked", "FS_getStream", "FS_createStream", "FS_closeStream", "FS_dupStream", "FS_doSetAttr", "FS_chrdev_stream_ops", "FS_major", "FS_minor", "FS_makedev", "FS_registerDevice", "FS_getDevice", "FS_getMounts", "FS_syncfs", "FS_mount", "FS_unmount", "FS_lookup", "FS_mknod", "FS_statfs", "FS_statfsStream", "FS_statfsNode", "FS_create", "FS_mkdir", "FS_mkdev", "FS_symlink", "FS_rename", "FS_rmdir", "FS_readdir", "FS_readlink", "FS_stat", "FS_fstat", "FS_lstat", "FS_doChmod", "FS_chmod", "FS_lchmod", "FS_fchmod", "FS_doChown", "FS_chown", "FS_lchown", "FS_fchown", "FS_doTruncate", "FS_truncate", "FS_ftruncate", "FS_utime", "FS_open", "FS_close", "FS_isClosed", "FS_llseek", "FS_read", "FS_write", "FS_mmap", "FS_msync", "FS_ioctl", "FS_writeFile", "FS_cwd", "FS_chdir", "FS_createDefaultDirectories", "FS_createDefaultDevices", "FS_createSpecialDirectories", "FS_createStandardStreams", "FS_staticInit", "FS_init", "FS_quit", "FS_findObject", "FS_analyzePath", "FS_createFile", "FS_createDataFile", "FS_forceLoadFile", "FS_createLazyFile", "FS_absolutePath", "FS_createFolder", "FS_createLink", "FS_joinPath", "FS_mmapAlloc", "FS_standardizePath", "MEMFS", "TTY", "PIPEFS", "SOCKFS", "tempFixedLengthArray", "miniTempWebGLFloatBuffers", "miniTempWebGLIntBuffers", "GL", "AL", "GLUT", "EGL", "GLEW", "IDBStore", "SDL", "SDL_gfx", "print", "printErr", "jstoi_s", "InternalError", "BindingError", "throwInternalError", "throwBindingError", "registeredTypes", "awaitingDependencies", "typeDependencies", "tupleRegistrations", "structRegistrations", "sharedRegisterType", "whenDependentTypesAreResolved", "getTypeName", "getFunctionName", "heap32VectorToArray", "requireRegisteredType", "usesDestructorStack", "checkArgCount", "getRequiredArgCount", "createJsInvoker", "UnboundTypeError", "EmValType", "EmValOptionalType", "throwUnboundTypeError", "ensureOverloadTable", "exposePublicSymbol", "replacePublicSymbol", "embindRepr", "registeredInstances", "getBasestPointer", "getInheritedInstance", "registeredPointers", "registerType", "integerReadValueFromPointer", "floatReadValueFromPointer", "assertIntegerRange", "readPointer", "runDestructors", "craftInvokerFunction", "embind__requireFunction", "genericPointerToWireType", "constNoSmartPtrRawPointerToWireType", "nonConstNoSmartPtrRawPointerToWireType", "init_RegisteredPointer", "RegisteredPointer", "RegisteredPointer_fromWireType", "runDestructor", "releaseClassHandle", "finalizationRegistry", "detachFinalizer_deps", "detachFinalizer", "attachFinalizer", "makeClassHandle", "init_ClassHandle", "ClassHandle", "throwInstanceAlreadyDeleted", "deletionQueue", "flushPendingDeletes", "delayFunction", "RegisteredClass", "shallowCopyInternalPointer", "downcastPointer", "upcastPointer", "char_0", "char_9", "makeLegalFunctionName", "emval_freelist", "emval_handles", "emval_symbols", "getStringOrSymbol", "Emval", "emval_returnValue", "emval_lookupTypes", "emval_methodCallers", "emval_addMethodCaller" ];

unexportedSymbols.forEach(unexportedRuntimeSymbol);

// End runtime exports
// Begin JS library exports
// End JS library exports
// end include: postlibrary.js
function checkIncomingModuleAPI() {
  ignoredModuleProp("fetchSettings");
}

var ASM_CONSTS = {
  74960: ($0, $1, $2) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    console.log(infoHead + message, style);
  },
  75099: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.log(infoHead + message, style, format);
  },
  75277: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.log(infoHead + message, style, format);
  },
  75455: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.log(infoHead + message, style, format);
  },
  75633: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.log(infoHead + message, style, format);
  },
  75811: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    console.log(infoHead + message, style, $3);
  },
  75954: ($0, $1, $2) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    console.error(errorHead + message, style);
  },
  76097: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.error(errorHead + message, style, format);
  },
  76279: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.error(errorHead + message, style, format);
  },
  76461: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.error(errorHead + message, style, format);
  },
  76643: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.error(errorHead + message, style, format);
  },
  76825: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    console.error(errorHead + message, style, $3);
  },
  76972: ($0, $1, $2) => {
    var message = UTF8ToString($0);
    var infoHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    console.warn(infoHead + message, style);
  },
  77112: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.warn(errorHead + message, style, format);
  },
  77293: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.warn(errorHead + message, style, format);
  },
  77474: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.warn(errorHead + message, style, format);
  },
  77655: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    var format = UTF8ToString($3);
    console.warn(errorHead + message, style, format);
  },
  77836: ($0, $1, $2, $3) => {
    var message = UTF8ToString($0);
    var errorHead = UTF8ToString($1);
    var style = UTF8ToString($2);
    console.warn(errorHead + message, style, $3);
  }
};

// Imports from the Wasm binary.
var _malloc = makeInvalidEarlyAccess("_malloc");

var _free = makeInvalidEarlyAccess("_free");

var _strerror = makeInvalidEarlyAccess("_strerror");

var _fflush = makeInvalidEarlyAccess("_fflush");

var ___getTypeName = makeInvalidEarlyAccess("___getTypeName");

var _emscripten_stack_get_end = makeInvalidEarlyAccess("_emscripten_stack_get_end");

var _emscripten_stack_get_base = makeInvalidEarlyAccess("_emscripten_stack_get_base");

var _setThrew = makeInvalidEarlyAccess("_setThrew");

var __emscripten_tempret_set = makeInvalidEarlyAccess("__emscripten_tempret_set");

var _emscripten_stack_init = makeInvalidEarlyAccess("_emscripten_stack_init");

var _emscripten_stack_get_free = makeInvalidEarlyAccess("_emscripten_stack_get_free");

var __emscripten_stack_restore = makeInvalidEarlyAccess("__emscripten_stack_restore");

var __emscripten_stack_alloc = makeInvalidEarlyAccess("__emscripten_stack_alloc");

var _emscripten_stack_get_current = makeInvalidEarlyAccess("_emscripten_stack_get_current");

var dynCall_jiji = makeInvalidEarlyAccess("dynCall_jiji");

var dynCall_viijii = makeInvalidEarlyAccess("dynCall_viijii");

var dynCall_iiiiij = makeInvalidEarlyAccess("dynCall_iiiiij");

var dynCall_iiiiijj = makeInvalidEarlyAccess("dynCall_iiiiijj");

var dynCall_iiiiiijj = makeInvalidEarlyAccess("dynCall_iiiiiijj");

var memory = makeInvalidEarlyAccess("memory");

var __indirect_function_table = makeInvalidEarlyAccess("__indirect_function_table");

var wasmMemory = makeInvalidEarlyAccess("wasmMemory");

var wasmTable = makeInvalidEarlyAccess("wasmTable");

function assignWasmExports(wasmExports) {
  assert(wasmExports["malloc"], "missing Wasm export: malloc");
  _malloc = createExportWrapper("malloc", 1);
  assert(wasmExports["free"], "missing Wasm export: free");
  _free = createExportWrapper("free", 1);
  assert(wasmExports["strerror"], "missing Wasm export: strerror");
  _strerror = createExportWrapper("strerror", 1);
  assert(wasmExports["fflush"], "missing Wasm export: fflush");
  _fflush = createExportWrapper("fflush", 1);
  assert(wasmExports["__getTypeName"], "missing Wasm export: __getTypeName");
  ___getTypeName = createExportWrapper("__getTypeName", 1);
  assert(wasmExports["emscripten_stack_get_end"], "missing Wasm export: emscripten_stack_get_end");
  _emscripten_stack_get_end = wasmExports["emscripten_stack_get_end"];
  assert(wasmExports["emscripten_stack_get_base"], "missing Wasm export: emscripten_stack_get_base");
  _emscripten_stack_get_base = wasmExports["emscripten_stack_get_base"];
  assert(wasmExports["setThrew"], "missing Wasm export: setThrew");
  _setThrew = createExportWrapper("setThrew", 2);
  assert(wasmExports["_emscripten_tempret_set"], "missing Wasm export: _emscripten_tempret_set");
  __emscripten_tempret_set = createExportWrapper("_emscripten_tempret_set", 1);
  assert(wasmExports["emscripten_stack_init"], "missing Wasm export: emscripten_stack_init");
  _emscripten_stack_init = wasmExports["emscripten_stack_init"];
  assert(wasmExports["emscripten_stack_get_free"], "missing Wasm export: emscripten_stack_get_free");
  _emscripten_stack_get_free = wasmExports["emscripten_stack_get_free"];
  assert(wasmExports["_emscripten_stack_restore"], "missing Wasm export: _emscripten_stack_restore");
  __emscripten_stack_restore = wasmExports["_emscripten_stack_restore"];
  assert(wasmExports["_emscripten_stack_alloc"], "missing Wasm export: _emscripten_stack_alloc");
  __emscripten_stack_alloc = wasmExports["_emscripten_stack_alloc"];
  assert(wasmExports["emscripten_stack_get_current"], "missing Wasm export: emscripten_stack_get_current");
  _emscripten_stack_get_current = wasmExports["emscripten_stack_get_current"];
  assert(wasmExports["dynCall_jiji"], "missing Wasm export: dynCall_jiji");
  dynCall_jiji = dynCalls["jiji"] = createExportWrapper("dynCall_jiji", 5);
  assert(wasmExports["dynCall_viijii"], "missing Wasm export: dynCall_viijii");
  dynCall_viijii = dynCalls["viijii"] = createExportWrapper("dynCall_viijii", 7);
  assert(wasmExports["dynCall_iiiiij"], "missing Wasm export: dynCall_iiiiij");
  dynCall_iiiiij = dynCalls["iiiiij"] = createExportWrapper("dynCall_iiiiij", 7);
  assert(wasmExports["dynCall_iiiiijj"], "missing Wasm export: dynCall_iiiiijj");
  dynCall_iiiiijj = dynCalls["iiiiijj"] = createExportWrapper("dynCall_iiiiijj", 9);
  assert(wasmExports["dynCall_iiiiiijj"], "missing Wasm export: dynCall_iiiiiijj");
  dynCall_iiiiiijj = dynCalls["iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj", 10);
  assert(wasmExports["memory"], "missing Wasm export: memory");
  memory = wasmMemory = wasmExports["memory"];
  assert(wasmExports["__indirect_function_table"], "missing Wasm export: __indirect_function_table");
  __indirect_function_table = wasmTable = wasmExports["__indirect_function_table"];
}

var wasmImports = {
  /** @export */ __cxa_throw: ___cxa_throw,
  /** @export */ __syscall_fcntl64: ___syscall_fcntl64,
  /** @export */ __syscall_ioctl: ___syscall_ioctl,
  /** @export */ __syscall_openat: ___syscall_openat,
  /** @export */ __syscall_rmdir: ___syscall_rmdir,
  /** @export */ __syscall_unlinkat: ___syscall_unlinkat,
  /** @export */ _abort_js: __abort_js,
  /** @export */ _embind_finalize_value_object: __embind_finalize_value_object,
  /** @export */ _embind_register_bigint: __embind_register_bigint,
  /** @export */ _embind_register_bool: __embind_register_bool,
  /** @export */ _embind_register_class: __embind_register_class,
  /** @export */ _embind_register_class_constructor: __embind_register_class_constructor,
  /** @export */ _embind_register_class_function: __embind_register_class_function,
  /** @export */ _embind_register_constant: __embind_register_constant,
  /** @export */ _embind_register_emval: __embind_register_emval,
  /** @export */ _embind_register_float: __embind_register_float,
  /** @export */ _embind_register_function: __embind_register_function,
  /** @export */ _embind_register_integer: __embind_register_integer,
  /** @export */ _embind_register_memory_view: __embind_register_memory_view,
  /** @export */ _embind_register_optional: __embind_register_optional,
  /** @export */ _embind_register_std_string: __embind_register_std_string,
  /** @export */ _embind_register_std_wstring: __embind_register_std_wstring,
  /** @export */ _embind_register_value_object: __embind_register_value_object,
  /** @export */ _embind_register_value_object_field: __embind_register_value_object_field,
  /** @export */ _embind_register_void: __embind_register_void,
  /** @export */ _emscripten_throw_longjmp: __emscripten_throw_longjmp,
  /** @export */ _emval_array_to_memory_view: __emval_array_to_memory_view,
  /** @export */ _emval_create_invoker: __emval_create_invoker,
  /** @export */ _emval_decref: __emval_decref,
  /** @export */ _emval_get_property: __emval_get_property,
  /** @export */ _emval_incref: __emval_incref,
  /** @export */ _emval_invoke: __emval_invoke,
  /** @export */ _emval_new_array: __emval_new_array,
  /** @export */ _emval_new_cstring: __emval_new_cstring,
  /** @export */ _emval_new_object: __emval_new_object,
  /** @export */ _emval_run_destructors: __emval_run_destructors,
  /** @export */ _emval_set_property: __emval_set_property,
  /** @export */ _localtime_js: __localtime_js,
  /** @export */ _tzset_js: __tzset_js,
  /** @export */ emscripten_asm_const_int: _emscripten_asm_const_int,
  /** @export */ emscripten_console_error: _emscripten_console_error,
  /** @export */ emscripten_console_warn: _emscripten_console_warn,
  /** @export */ emscripten_date_now: _emscripten_date_now,
  /** @export */ emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */ environ_get: _environ_get,
  /** @export */ environ_sizes_get: _environ_sizes_get,
  /** @export */ exit: _exit,
  /** @export */ fd_close: _fd_close,
  /** @export */ fd_read: _fd_read,
  /** @export */ fd_seek: _fd_seek,
  /** @export */ fd_write: _fd_write,
  /** @export */ invoke_ii,
  /** @export */ invoke_iii,
  /** @export */ invoke_iiii,
  /** @export */ invoke_vi,
  /** @export */ invoke_vii,
  /** @export */ invoke_viii,
  /** @export */ invoke_viiii
};

function invoke_ii(index, a1) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index, a1) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiii(index, a1, a2, a3, a4) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1, a2, a3, a4);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index, a1, a2, a3) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1, a2, a3);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index, a1, a2) {
  var sp = stackSave();
  try {
    getWasmTableEntry(index)(a1, a2);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index, a1, a2) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1, a2);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index, a1, a2, a3) {
  var sp = stackSave();
  try {
    return getWasmTableEntry(index)(a1, a2, a3);
  } catch (e) {
    stackRestore(sp);
    if (e !== e + 0) throw e;
    _setThrew(1, 0);
  }
}

// include: postamble.js
// === Auto-generated postamble setup entry stuff ===
var calledRun;

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }
  stackCheckInit();
  preRun();
  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }
  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module["calledRun"] = true;
    if (ABORT) return;
    initRuntime();
    Module["onRuntimeInitialized"]?.();
    consumedModuleProp("onRuntimeInitialized");
    assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
    postRun();
  }
  if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout(() => {
      setTimeout(() => Module["setStatus"](""), 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = x => {
    has = true;
  };
  try {
    // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    [ "stdout", "stderr" ].forEach(name => {
      var info = FS.analyzePath("/dev/" + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch (e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.");
  }
}

var wasmExports;

// With async instantation wasmExports is assigned asynchronously when the
// instance is received.
createWasm();

run();
