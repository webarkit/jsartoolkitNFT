(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/artoolkitNFT_ES6_wasm_td.js":
/*!*******************************************!*\
  !*** ./build/artoolkitNFT_ES6_wasm_td.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Module = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  
  return (
function(moduleArg = {}) {
  var moduleRtn;

var Module=moduleArg;var readyPromiseResolve,readyPromiseReject;var readyPromise=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof importScripts=="function";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string"&&process.type!="renderer";var ENVIRONMENT_IS_PTHREAD=ENVIRONMENT_IS_WORKER&&self.name?.startsWith("em-pthread");var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var scriptDirectory="";var readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptName){scriptDirectory=_scriptName}if(scriptDirectory.startsWith("blob:")){scriptDirectory=""}else{scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}{if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=url=>fetch(url,{credentials:"same-origin"}).then(response=>{if(response.ok){return response.arrayBuffer()}return Promise.reject(new Error(response.status+" : "+response.url))})}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];var wasmBinary=Module["wasmBinary"];function intArrayFromBase64(s){var decoded=atob(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var wasmMemory;var wasmModule;var ABORT=false;var EXITSTATUS;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module["HEAP8"]=HEAP8=new Int8Array(b);Module["HEAP16"]=HEAP16=new Int16Array(b);Module["HEAPU8"]=HEAPU8=new Uint8Array(b);Module["HEAPU16"]=HEAPU16=new Uint16Array(b);Module["HEAP32"]=HEAP32=new Int32Array(b);Module["HEAPU32"]=HEAPU32=new Uint32Array(b);Module["HEAPF32"]=HEAPF32=new Float32Array(b);Module["HEAPF64"]=HEAPF64=new Float64Array(b)}if(ENVIRONMENT_IS_PTHREAD){var wasmPromiseResolve;var wasmPromiseReject;var initializedJS=false;function threadPrintErr(...args){var text=args.join(" ");console.error(text)}if(!Module["printErr"])err=threadPrintErr;function threadAlert(...args){var text=args.join(" ");postMessage({cmd:"alert",text,threadId:_pthread_self()})}self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>new Promise((resolve,reject)=>{wasmPromiseResolve=module=>{var instance=new WebAssembly.Instance(module,getWasmImports());receiveInstance(instance);resolve()};wasmPromiseReject=reject});self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{var msgData=e["data"];var cmd=msgData.cmd;if(cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{postMessage({cmd:"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};for(const handler of msgData.handlers){if(!Module[handler]||Module[handler].proxy){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler,args})};if(handler=="print")out=Module[handler];if(handler=="printErr")err=Module[handler]}}wasmMemory=msgData.wasmMemory;updateMemoryViews();wasmPromiseResolve(msgData.wasmModule)}else if(cmd==="run"){establishStackSpace(msgData.pthread_ptr);__emscripten_thread_init(msgData.pthread_ptr,0,0,1,0,0);PThread.receiveObjectTransfer(msgData);PThread.threadInitTLS();__emscripten_thread_mailbox_await(msgData.pthread_ptr);if(!initializedJS){__embind_initialize_bindings();initializedJS=true}try{invokeEntryPoint(msgData.start_routine,msgData.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(msgData.target==="setimmediate"){}else if(cmd==="checkMailbox"){if(initializedJS){checkMailbox()}}else if(cmd){err(`worker: received unknown command ${cmd}`);err(msgData)}}catch(ex){__emscripten_thread_crashed();throw ex}}self.onmessage=handleMessage}if(!ENVIRONMENT_IS_PTHREAD){if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||134217728;wasmMemory=new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:INITIAL_MEMORY/65536,shared:true})}updateMemoryViews()}var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){var preRuns=Module["preRun"];if(preRuns){if(typeof preRuns=="function")preRuns=[preRuns];preRuns.forEach(addOnPreRun)}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(ENVIRONMENT_IS_PTHREAD)return;if(!Module["noFSInit"]&&!FS.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function postRun(){if(ENVIRONMENT_IS_PTHREAD)return;var postRuns=Module["postRun"];if(postRuns){if(typeof postRuns=="function")postRuns=[postRuns];postRuns.forEach(addOnPostRun)}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;Module["monitorRunDependencies"]?.(runDependencies)}function removeRunDependency(id){runDependencies--;Module["monitorRunDependencies"]?.(runDependencies);if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){Module["onAbort"]?.(what);what="Aborted("+what+")";err(what);ABORT=true;what+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix="data:application/octet-stream;base64,";var isDataURI=filename=>filename.startsWith(dataURIPrefix);function findWasmBinary(){var f="data:application/octet-stream;base64,";return f}var wasmBinaryFile;function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}throw"both async and sync fetching of the wasm failed"}function getBinaryPromise(binaryFile){return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){return instantiateArrayBuffer(binaryFile,imports,callback)}function getWasmImports(){assignWasmImports();return{a:wasmImports}}function createWasm(){var info=getWasmImports();function receiveInstance(instance,module){wasmExports=instance.exports;registerTLSInit(wasmExports["za"]);wasmTable=wasmExports["va"];addOnInit(wasmExports["sa"]);wasmModule=module;removeRunDependency("wasm-instantiate");return wasmExports}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"],result["module"])}if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);readyPromiseReject(e)}}wasmBinaryFile??=findWasmBinary();instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult).catch(readyPromiseReject);return{}}var tempDouble;var tempI64;var ASM_CONSTS={75364:($0,$1,$2)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.log(infoHead+message,style)},75503:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},75681:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},75859:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},76037:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},76215:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.log(infoHead+message,style,$3)},76358:($0,$1,$2)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.error(errorHead+message,style)},76501:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},76683:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},76865:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},77047:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},77229:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.error(errorHead+message,style,$3)},77376:($0,$1,$2)=>{var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.warn(infoHead+message,style)},77516:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},77697:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},77878:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},78059:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},78240:($0,$1,$2,$3)=>{var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.warn(errorHead+message,style,$3)}};function ExitStatus(status){this.name="ExitStatus";this.message=`Program terminated with exit(${status})`;this.status=status}var terminateWorker=worker=>{worker.terminate();worker.onmessage=e=>{}};var cleanupThread=pthread_ptr=>{var worker=PThread.pthreads[pthread_ptr];PThread.returnWorkerToPool(worker)};var spawnThread=threadParams=>{var worker=PThread.getNewWorker();if(!worker){return 6}PThread.runningWorkers.push(worker);PThread.pthreads[threadParams.pthread_ptr]=worker;worker.pthread_ptr=threadParams.pthread_ptr;var msg={cmd:"run",start_routine:threadParams.startRoutine,arg:threadParams.arg,pthread_ptr:threadParams.pthread_ptr};worker.postMessage(msg,threadParams.transferList);return 0};var runtimeKeepaliveCounter=0;var keepRuntimeAlive=()=>noExitRuntime||runtimeKeepaliveCounter>0;var stackSave=()=>_emscripten_stack_get_current();var stackRestore=val=>__emscripten_stack_restore(val);var stackAlloc=sz=>__emscripten_stack_alloc(sz);var convertI32PairToI53Checked=(lo,hi)=>hi+2097152>>>0<4194305-!!lo?(lo>>>0)+hi*4294967296:NaN;var proxyToMainThread=(funcIndex,emAsmAddr,sync,...callArgs)=>{var serializedNumCallArgs=callArgs.length;var sp=stackSave();var args=stackAlloc(serializedNumCallArgs*8);var b=args>>3;for(var i=0;i<callArgs.length;i++){var arg=callArgs[i];HEAPF64[b+i]=arg}var rtn=__emscripten_run_on_main_thread_js(funcIndex,emAsmAddr,serializedNumCallArgs,args,sync);stackRestore(sp);return rtn};function _proc_exit(code){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(0,0,1,code);EXITSTATUS=code;if(!keepRuntimeAlive()){PThread.terminateAllThreads();Module["onExit"]?.(code);ABORT=true}quit_(code,new ExitStatus(code))}var handleException=e=>{if(e instanceof ExitStatus||e=="unwind"){return EXITSTATUS}quit_(1,e)};function exitOnMainThread(returnCode){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(1,0,0,returnCode);_exit(returnCode)}var exitJS=(status,implicit)=>{EXITSTATUS=status;if(ENVIRONMENT_IS_PTHREAD){exitOnMainThread(status);throw"unwind"}_proc_exit(status)};var _exit=exitJS;var PThread={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init(){if(!ENVIRONMENT_IS_PTHREAD){PThread.initMainThread()}},initMainThread(){addOnPreRun(()=>{addRunDependency("loading-workers");PThread.loadWasmModuleToAllWorkers(()=>removeRunDependency("loading-workers"))})},terminateAllThreads:()=>{for(var worker of PThread.runningWorkers){terminateWorker(worker)}for(var worker of PThread.unusedWorkers){terminateWorker(worker)}PThread.unusedWorkers=[];PThread.runningWorkers=[];PThread.pthreads=[]},returnWorkerToPool:worker=>{var pthread_ptr=worker.pthread_ptr;delete PThread.pthreads[pthread_ptr];PThread.unusedWorkers.push(worker);PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker),1);worker.pthread_ptr=0;__emscripten_thread_free_data(pthread_ptr)},receiveObjectTransfer(data){},threadInitTLS(){PThread.tlsInitFunctions.forEach(f=>f())},loadWasmModuleToWorker:worker=>new Promise(onFinishedLoading=>{worker.onmessage=e=>{var d=e["data"];var cmd=d.cmd;if(d.targetThread&&d.targetThread!=_pthread_self()){var targetWorker=PThread.pthreads[d.targetThread];if(targetWorker){targetWorker.postMessage(d,d.transferList)}else{err(`Internal error! Worker sent a message "${cmd}" to target pthread ${d.targetThread}, but that thread no longer exists!`)}return}if(cmd==="checkMailbox"){checkMailbox()}else if(cmd==="spawnThread"){spawnThread(d)}else if(cmd==="cleanupThread"){cleanupThread(d.thread)}else if(cmd==="loaded"){worker.loaded=true;onFinishedLoading(worker)}else if(cmd==="alert"){alert(`Thread ${d.threadId}: ${d.text}`)}else if(d.target==="setimmediate"){worker.postMessage(d)}else if(cmd==="callHandler"){Module[d.handler](...d.args)}else if(cmd){err(`worker sent an unknown command ${cmd}`)}};worker.onerror=e=>{var message="worker sent an error!";err(`${message} ${e.filename}:${e.lineno}: ${e.message}`);throw e};var handlers=[];var knownHandlers=["onExit","onAbort","print","printErr"];for(var handler of knownHandlers){if(Module.propertyIsEnumerable(handler)){handlers.push(handler)}}worker.postMessage({cmd:"load",handlers,wasmMemory,wasmModule})}),loadWasmModuleToAllWorkers(onMaybeReady){onMaybeReady()},allocateUnusedWorker(){var worker;var workerOptions={type:"module",name:"em-pthread"};var pthreadMainJs=_scriptName;if(Module["mainScriptUrlOrBlob"]){pthreadMainJs=Module["mainScriptUrlOrBlob"];if(typeof pthreadMainJs!="string"){pthreadMainJs=URL.createObjectURL(pthreadMainJs)}}worker=new Worker(pthreadMainJs,workerOptions);PThread.unusedWorkers.push(worker)},getNewWorker(){if(PThread.unusedWorkers.length==0){PThread.allocateUnusedWorker();PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0])}return PThread.unusedWorkers.pop()}};var callRuntimeCallbacks=callbacks=>{callbacks.forEach(f=>f(Module))};var establishStackSpace=pthread_ptr=>{var stackHigh=HEAPU32[pthread_ptr+52>>2];var stackSize=HEAPU32[pthread_ptr+56>>2];var stackLow=stackHigh-stackSize;_emscripten_stack_set_limits(stackHigh,stackLow);stackRestore(stackHigh)};var wasmTable;var getWasmTableEntry=funcPtr=>wasmTable.get(funcPtr);var invokeEntryPoint=(ptr,arg)=>{runtimeKeepaliveCounter=0;noExitRuntime=0;var result=getWasmTableEntry(ptr)(arg);function finish(result){if(keepRuntimeAlive()){EXITSTATUS=result}else{__emscripten_thread_exit(result)}}finish(result)};var noExitRuntime=Module["noExitRuntime"]||true;var registerTLSInit=tlsInitFunc=>PThread.tlsInitFunctions.push(tlsInitFunc);var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder:undefined;var UTF8ArrayToString=(heapOrArray,idx=0,maxBytesToRead=NaN)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.slice(idx,endPtr))}var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var UTF8ToString=(ptr,maxBytesToRead)=>ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";var ___assert_fail=(condition,filename,line,func)=>{abort(`Assertion failed: ${UTF8ToString(condition)}, at: `+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"])};class ExceptionInfo{constructor(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24}set_type(type){HEAPU32[this.ptr+4>>2]=type}get_type(){return HEAPU32[this.ptr+4>>2]}set_destructor(destructor){HEAPU32[this.ptr+8>>2]=destructor}get_destructor(){return HEAPU32[this.ptr+8>>2]}set_caught(caught){caught=caught?1:0;HEAP8[this.ptr+12]=caught}get_caught(){return HEAP8[this.ptr+12]!=0}set_rethrown(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13]=rethrown}get_rethrown(){return HEAP8[this.ptr+13]!=0}init(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor)}set_adjusted_ptr(adjustedPtr){HEAPU32[this.ptr+16>>2]=adjustedPtr}get_adjusted_ptr(){return HEAPU32[this.ptr+16>>2]}}var exceptionLast=0;var uncaughtExceptionCount=0;var ___cxa_throw=(ptr,type,destructor)=>{var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw exceptionLast};function pthreadCreateProxied(pthread_ptr,attr,startRoutine,arg){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(2,0,1,pthread_ptr,attr,startRoutine,arg);return ___pthread_create_js(pthread_ptr,attr,startRoutine,arg)}var _emscripten_has_threading_support=()=>typeof SharedArrayBuffer!="undefined";var ___pthread_create_js=(pthread_ptr,attr,startRoutine,arg)=>{if(!_emscripten_has_threading_support()){return 6}var transferList=[];var error=0;if(ENVIRONMENT_IS_PTHREAD&&(transferList.length===0||error)){return pthreadCreateProxied(pthread_ptr,attr,startRoutine,arg)}if(error)return error;var threadParams={startRoutine,pthread_ptr,arg,transferList};if(ENVIRONMENT_IS_PTHREAD){threadParams.cmd="spawnThread";postMessage(threadParams,transferList);return 0}return spawnThread(threadParams)};function syscallGetVarargI(){var ret=HEAP32[+SYSCALLS.varargs>>2];SYSCALLS.varargs+=4;return ret}var syscallGetVarargP=syscallGetVarargI;var PATH={isAbs:path=>path.charAt(0)==="/",splitPath:filename=>{var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:(...paths)=>PATH.normalize(paths.join("/")),join2:(l,r)=>PATH.normalize(l+"/"+r)};var initRandomFill=()=>{if(typeof crypto=="object"&&typeof crypto["getRandomValues"]=="function"){return view=>(view.set(crypto.getRandomValues(new Uint8Array(view.byteLength))),view)}else abort("initRandomDevice")};var randomFill=view=>(randomFill=initRandomFill())(view);var PATH_FS={resolve:(...args)=>{var resolvedPath="",resolvedAbsolute=false;for(var i=args.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?args[i]:FS.cwd();if(typeof path!="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var FS_stdin_getChar_buffer=[];var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx};function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else{}if(!result){return null}FS_stdin_getChar_buffer=intArrayFromString(result,true)}return FS_stdin_getChar_buffer.shift()};var TTY={ttys:[],init(){},shutdown(){},register(dev,ops){TTY.ttys[dev]={input:[],output:[],ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close(stream){stream.tty.ops.fsync(stream.tty)},fsync(stream){stream.tty.ops.fsync(stream.tty)},read(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char(tty){return FS_stdin_getChar()},put_char(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output));tty.output=[]}},ioctl_tcgets(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets(tty,optional_actions,data){return 0},ioctl_tiocgwinsz(tty){return[24,80]}},default_tty1_ops:{put_char(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output));tty.output=[]}}}};var mmapAlloc=size=>{abort()};var MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}MEMFS.ops_table||={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp},unlink(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir(node){var entries=[".",".."];for(var key of Object.keys(node.contents)){entries.push(key)}return entries},symlink(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents&&contents.buffer===HEAP8.buffer){allocated=false;ptr=contents.byteOffset}else{allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}if(contents){if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}HEAP8.set(contents,ptr)}}return{ptr,allocated}},msync(stream,buffer,offset,length,mmapFlags){MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=!noRunDep?getUniqueRunDependency(`al ${url}`):"";readAsync(url).then(arrayBuffer=>{onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},err=>{if(onerror){onerror()}else{throw`Loading data file "${url}" failed.`}});if(dep)addRunDependency(dep)};var FS_createDataFile=(parent,name,fileData,canRead,canWrite,canOwn)=>{FS.createDataFile(parent,name,fileData,canRead,canWrite,canOwn)};var preloadPlugins=Module["preloadPlugins"]||[];var FS_handledByPreloadPlugin=(byteArray,fullname,finish,onerror)=>{if(typeof Browser!="undefined")Browser.init();var handled=false;preloadPlugins.forEach(plugin=>{if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,onerror);handled=true}});return handled};var FS_createPreloadedFile=(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(`cp ${fullname}`);function processData(byteArray){function finish(byteArray){preFinish?.();if(!dontCreateFile){FS_createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}onload?.();removeRunDependency(dep)}if(FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror?.();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){asyncLoad(url,processData,onerror)}else{processData(url)}};var FS_modeStringToFlags=str=>{var flagModes={r:0,"r+":2,w:512|64|1,"w+":512|64|2,a:1024|64|1,"a+":1024|64|2};var flags=flagModes[str];if(typeof flags=="undefined"){throw new Error(`Unknown file open mode: ${str}`)}return flags};var FS_getMode=(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:class{constructor(errno){this.name="ErrnoError";this.errno=errno}},genericErrors:{},filesystems:null,syncFSRequests:0,readFiles:{},FSStream:class{constructor(){this.shared={}}get object(){return this.node}set object(val){this.node=val}get isRead(){return(this.flags&2097155)!==1}get isWrite(){return(this.flags&2097155)!==0}get isAppend(){return this.flags&1024}get flags(){return this.shared.flags}set flags(val){this.shared.flags=val}get position(){return this.shared.position}set position(val){this.shared.position=val}},FSNode:class{constructor(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;this.readMode=292|73;this.writeMode=146}get read(){return(this.mode&this.readMode)===this.readMode}set read(val){val?this.mode|=this.readMode:this.mode&=~this.readMode}get write(){return(this.mode&this.writeMode)===this.writeMode}set write(val){val?this.mode|=this.writeMode:this.mode&=~this.writeMode}get isFolder(){return FS.isDir(this.mode)}get isDevice(){return FS.isChrdev(this.mode)}},lookupPath(path,opts={}){path=PATH_FS.resolve(path);if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=path.split("/").filter(p=>!!p);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?`${mount}/${path}`:mount+path}path=path?`${node.name}/${path}`:node.name;node=node.parent}},hashName(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode(node){FS.hashRemoveNode(node)},isRoot(node){return node===node.parent},isMountpoint(node){return!!node.mounted},isFile(mode){return(mode&61440)===32768},isDir(mode){return(mode&61440)===16384},isLink(mode){return(mode&61440)===40960},isChrdev(mode){return(mode&61440)===8192},isBlkdev(mode){return(mode&61440)===24576},isFIFO(mode){return(mode&61440)===4096},isSocket(mode){return(mode&49152)===49152},flagsToPermissionString(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions(node,perms){if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup(dir){if(!FS.isDir(dir.mode))return 54;var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd(){for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStreamChecked(fd){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}return stream},getStream:fd=>FS.streams[fd],createStream(stream,fd=-1){stream=Object.assign(new FS.FSStream,stream);if(fd==-1){fd=FS.nextfd()}stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream(fd){FS.streams[fd]=null},dupStream(origStream,fd=-1){var stream=FS.createStream(origStream,fd);stream.stream_ops?.dup?.(stream);return stream},chrdev_stream_ops:{open(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;stream.stream_ops.open?.(stream)},llseek(){throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push(...m.mounts)}return mounts},syncfs(populate,callback){if(typeof populate=="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`)}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type,opts,mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup(parent,name){return parent.node_ops.lookup(parent,name)},mknod(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev(path,mode,dev){if(typeof dev=="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);old_node.parent=new_dir}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat(path){return FS.stat(path,true)},chmod(path,mode,dontFollow){var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod(path,mode){FS.chmod(path,mode,true)},fchmod(fd,mode){var stream=FS.getStreamChecked(fd);FS.chmod(stream.node,mode)},chown(path,uid,gid,dontFollow){var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown(path,uid,gid){FS.chown(path,uid,gid,true)},fchown(fd,uid,gid){var stream=FS.getStreamChecked(fd);FS.chown(stream.node,uid,gid)},truncate(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate(fd,len){var stream=FS.getStreamChecked(fd);if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open(path,flags,mode){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags=="string"?FS_modeStringToFlags(flags):flags;if(flags&64){mode=typeof mode=="undefined"?438:mode;mode=mode&4095|32768}else{mode=0}var node;if(typeof path=="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512&&!created){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node,path:FS.getPath(node),flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false});if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed(stream){return stream.fd===null},llseek(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap(stream,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}if(!length){throw new FS.ErrnoError(28)}return stream.stream_ops.mmap(stream,length,position,prot,flags)},msync(stream,buffer,offset,length,mmapFlags){if(!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},ioctl(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile(path,opts={}){opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error(`Invalid encoding type "${opts.encoding}"`)}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile(path,data,opts={}){opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data=="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:()=>FS.currentPath,chdir(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0;var randomByte=()=>{if(randomLeft===0){randomLeft=randomFill(randomBuffer).byteLength}return randomBuffer[--randomLeft]};FS.createDevice("/dev","random",randomByte);FS.createDevice("/dev","urandom",randomByte);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount(){var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup(parent,name){var fd=+name;var stream=FS.getStreamChecked(fd);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams(input,output,error){if(input){FS.createDevice("/dev","stdin",input)}else{FS.symlink("/dev/tty","/dev/stdin")}if(output){FS.createDevice("/dev","stdout",null,output)}else{FS.symlink("/dev/tty","/dev/stdout")}if(error){FS.createDevice("/dev","stderr",null,error)}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},staticInit(){[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"});FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={MEMFS}},init(input,output,error){FS.initialized=true;input??=Module["stdin"];output??=Module["stdout"];error??=Module["stderr"];FS.createStandardStreams(input,output,error)},quit(){FS.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},findObject(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(!ret.exists){return null}return ret.object},analyzePath(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath(parent,path,canRead,canWrite){parent=typeof parent=="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS_getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile(parent,name,data,canRead,canWrite,canOwn){var path=name;if(parent){parent=typeof parent=="string"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS_getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data=="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}},createDevice(parent,name,input,output){var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS_getMode(!!input,!!output);FS.createDevice.major??=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open(stream){stream.seekable=false},close(stream){if(output?.buffer?.length){output(10)}},read(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else{try{obj.contents=readBinary(obj.url);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}},createLazyFile(parent,name,url,canRead,canWrite){class LazyUint8Array{constructor(){this.lengthKnown=false;this.chunks=[]}get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]}setDataGetter(getter){this.getter=getter}cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}return intArrayFromString(xhr.responseText||"",true)};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]=="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]=="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true}get length(){if(!this.lengthKnown){this.cacheLength()}return this._length}get chunkSize(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}if(typeof XMLHttpRequest!="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=(...args)=>{FS.forceLoadFile(node);return fn(...args)}});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size}stream_ops.read=(stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);return writeChunks(stream,buffer,offset,length,position)};stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}writeChunks(stream,HEAP8,ptr,length,position);return{ptr,allocated:true}};node.stream_ops=stream_ops;return node}};var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=SYSCALLS.getStreamFromFD(dirfd);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat(func,path,buf){var stat=func(path);HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=stat.mode;HEAPU32[buf+8>>2]=stat.nlink;HEAP32[buf+12>>2]=stat.uid;HEAP32[buf+16>>2]=stat.gid;HEAP32[buf+20>>2]=stat.rdev;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>2]=tempI64[0],HEAP32[buf+28>>2]=tempI64[1];HEAP32[buf+32>>2]=4096;HEAP32[buf+36>>2]=stat.blocks;var atime=stat.atime.getTime();var mtime=stat.mtime.getTime();var ctime=stat.ctime.getTime();tempI64=[Math.floor(atime/1e3)>>>0,(tempDouble=Math.floor(atime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAPU32[buf+48>>2]=atime%1e3*1e3*1e3;tempI64=[Math.floor(mtime/1e3)>>>0,(tempDouble=Math.floor(mtime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>2]=tempI64[0],HEAP32[buf+60>>2]=tempI64[1];HEAPU32[buf+64>>2]=mtime%1e3*1e3*1e3;tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>2]=tempI64[0],HEAP32[buf+76>>2]=tempI64[1];HEAPU32[buf+80>>2]=ctime%1e3*1e3*1e3;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>2]=tempI64[0],HEAP32[buf+92>>2]=tempI64[1];return 0},doMsync(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(flags&2){return 0}var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},getStreamFromFD(fd){var stream=FS.getStreamChecked(fd);return stream},varargs:undefined,getStr(ptr){var ret=UTF8ToString(ptr);return ret}};function ___syscall_fcntl64(fd,cmd,varargs){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(3,0,1,fd,cmd,varargs);SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=syscallGetVarargI();if(arg<0){return-28}while(FS.streams[arg]){arg++}var newStream;newStream=FS.dupStream(stream,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=syscallGetVarargI();stream.flags|=arg;return 0}case 12:{var arg=syscallGetVarargP();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0}return-28}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(4,0,1,fd,op,varargs);SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:{if(!stream.tty)return-59;return 0}case 21505:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcgets){var termios=stream.tty.ops.ioctl_tcgets(stream);var argp=syscallGetVarargP();HEAP32[argp>>2]=termios.c_iflag||0;HEAP32[argp+4>>2]=termios.c_oflag||0;HEAP32[argp+8>>2]=termios.c_cflag||0;HEAP32[argp+12>>2]=termios.c_lflag||0;for(var i=0;i<32;i++){HEAP8[argp+i+17]=termios.c_cc[i]||0}return 0}return 0}case 21510:case 21511:case 21512:{if(!stream.tty)return-59;return 0}case 21506:case 21507:case 21508:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcsets){var argp=syscallGetVarargP();var c_iflag=HEAP32[argp>>2];var c_oflag=HEAP32[argp+4>>2];var c_cflag=HEAP32[argp+8>>2];var c_lflag=HEAP32[argp+12>>2];var c_cc=[];for(var i=0;i<32;i++){c_cc.push(HEAP8[argp+i+17])}return stream.tty.ops.ioctl_tcsets(stream.tty,op,{c_iflag,c_oflag,c_cflag,c_lflag,c_cc})}return 0}case 21519:{if(!stream.tty)return-59;var argp=syscallGetVarargP();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=syscallGetVarargP();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tiocgwinsz){var winsize=stream.tty.ops.ioctl_tiocgwinsz(stream.tty);var argp=syscallGetVarargP();HEAP16[argp>>1]=winsize[0];HEAP16[argp+2>>1]=winsize[1]}return 0}case 21524:{if(!stream.tty)return-59;return 0}case 21515:{if(!stream.tty)return-59;return 0}default:return-28}}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_openat(dirfd,path,flags,varargs){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(5,0,1,dirfd,path,flags,varargs);SYSCALLS.varargs=varargs;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);var mode=varargs?syscallGetVarargI():0;return FS.open(path,flags,mode).fd}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_rmdir(path){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(6,0,1,path);try{path=SYSCALLS.getStr(path);FS.rmdir(path);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_unlinkat(dirfd,path,flags){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(7,0,1,dirfd,path,flags);try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(flags===0){FS.unlink(path)}else if(flags===512){FS.rmdir(path)}else{abort("Invalid flags passed to unlinkat")}return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}var __abort_js=()=>{abort("")};var structRegistrations={};var runDestructors=destructors=>{while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}};function readPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var InternalError;var throwInternalError=message=>{throw new InternalError(message)};var whenDependentTypesAreResolved=(myTypes,dependentTypes,getTypeConverters)=>{myTypes.forEach(type=>typeDependencies[type]=dependentTypes);function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((dt,i)=>{if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}};var __embind_finalize_value_object=structType=>{var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType));whenDependentTypesAreResolved([structType],fieldTypes,fieldTypes=>{var fields={};fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:ptr=>getterReturnType["fromWireType"](getter(getterContext,ptr)),write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors)}}});return[{name:reg.name,fromWireType:ptr=>{var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv},toWireType:(destructors,o)=>{for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError(`Missing field: "${fieldName}"`)}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction:rawDestructor}]})};var __embind_register_bigint=(primitiveType,name,size,minRange,maxRange)=>{};var embind_init_charCodes=()=>{var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes};var embind_charCodes;var readLatin1String=ptr=>{var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret};var BindingError;var throwBindingError=message=>{throw new BindingError(message)};function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(!rawType){throwBindingError(`type "${name}" must have a positive integer typeid pointer`)}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(`Cannot register type '${name}' twice`)}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function registerType(rawType,registeredInstance,options={}){return sharedRegisterType(rawType,registeredInstance,options)}var GenericWireTypeSize=8;var __embind_register_bool=(rawType,name,trueValue,falseValue)=>{name=readLatin1String(name);registerType(rawType,{name,fromWireType:function(wt){return!!wt},toWireType:function(destructors,o){return o?trueValue:falseValue},argPackAdvance:GenericWireTypeSize,readValueFromPointer:function(pointer){return this["fromWireType"](HEAPU8[pointer])},destructorFunction:null})};var shallowCopyInternalPointer=o=>({count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType});var throwInstanceAlreadyDeleted=obj=>{function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")};var finalizationRegistry=false;var detachFinalizer=handle=>{};var runDestructor=$$=>{if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}};var releaseClassHandle=$$=>{$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}};var downcastPointer=(ptr,ptrClass,desiredClass)=>{if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)};var registeredPointers={};var registeredInstances={};var getBasestPointer=(class_,ptr)=>{if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr};var getInheritedInstance=(class_,ptr)=>{ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]};var makeClassHandle=(prototype,record)=>{if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record,writable:true}}))};function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}var attachFinalizer=handle=>{if("undefined"===typeof FinalizationRegistry){attachFinalizer=handle=>handle;return handle}finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)});attachFinalizer=handle=>{var $$=handle.$$;var hasSmartPtr=!!$$.smartPtr;if(hasSmartPtr){var info={$$};finalizationRegistry.register(handle,info,handle)}return handle};detachFinalizer=handle=>finalizationRegistry.unregister(handle);return attachFinalizer(handle)};var deletionQueue=[];var flushPendingDeletes=()=>{while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}};var delayFunction;var init_ClassHandle=()=>{Object.assign(ClassHandle.prototype,{isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;other.$$=other.$$;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right},clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}},delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}},isDeleted(){return!this.$$.ptr},deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}})};function ClassHandle(){}var createNamedFunction=(name,body)=>Object.defineProperty(body,"name",{value:name});var ensureOverloadTable=(proto,methodName,humanName)=>{if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(...args){if(!proto[methodName].overloadTable.hasOwnProperty(args.length)){throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`)}return proto[methodName].overloadTable[args.length].apply(this,args)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}};var exposePublicSymbol=(name,value,numArguments)=>{if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(`Cannot register public name '${name}' twice`)}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`)}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}};var char_0=48;var char_9=57;var makeLegalFunctionName=name=>{name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return`_${name}`}return name};function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}var upcastPointer=(ptr,ptrClass,desiredClass)=>{while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr};function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}return 0}if(!handle.$$){throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle||!handle.$$){throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name} to parameter type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name} to parameter type ${this.name}`)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,Emval.toHandle(()=>clonedHandle["delete"]()));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}return 0}if(!handle.$$){throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}if(handle.$$.ptrType.isConst){throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}var init_RegisteredPointer=()=>{Object.assign(RegisteredPointer.prototype,{getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr},destructor(ptr){this.rawDestructor?.(ptr)},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,fromWireType:RegisteredPointer_fromWireType})};function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}var replacePublicSymbol=(name,value,numArguments)=>{if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistent public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}};var dynCallLegacy=(sig,ptr,args)=>{sig=sig.replace(/p/g,"i");var f=Module["dynCall_"+sig];return f(ptr,...args)};var dynCall=(sig,ptr,args=[])=>{if(sig.includes("j")){return dynCallLegacy(sig,ptr,args)}var rtn=getWasmTableEntry(ptr)(...args);return rtn};var getDynCaller=(sig,ptr)=>(...args)=>dynCall(sig,ptr,args);var embind__requireFunction=(signature,rawFunction)=>{signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes("j")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!="function"){throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`)}return fp};var extendError=(baseErrorType,errorName)=>{var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return`${this.name}: ${this.message}`}};return errorClass};var UnboundTypeError;var getTypeName=type=>{var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv};var throwUnboundTypeError=(message,types)=>{var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(`${message}: `+unboundTypes.map(getTypeName).join([", "]))};var __embind_register_class=(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor)=>{name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);upcast&&=embind__requireFunction(upcastSignature,upcast);downcast&&=embind__requireFunction(downcastSignature,downcast);rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],base=>{base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(name,function(...args){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[args.length];if(undefined===body){throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`)}return body.apply(this,args)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);if(registeredClass.baseClass){registeredClass.baseClass.__derivedClasses??=[];registeredClass.baseClass.__derivedClasses.push(registeredClass)}var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})};var heap32VectorToArray=(count,firstElement)=>{var array=[];for(var i=0;i<count;i++){array.push(HEAPU32[firstElement+i*4>>2])}return array};function usesDestructorStack(argTypes){for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){return true}}return false}function newFunc(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function createJsInvoker(argTypes,isClassMethodFunc,returns,isAsync){var needsDestructorStack=usesDestructorStack(argTypes);var argCount=argTypes.length-2;var argsList=[];var argsListWired=["fn"];if(isClassMethodFunc){argsListWired.push("thisWired")}for(var i=0;i<argCount;++i){argsList.push(`arg${i}`);argsListWired.push(`arg${i}Wired`)}argsList=argsList.join(",");argsListWired=argsListWired.join(",");var invokerFnBody=`return function (${argsList}) {\n`;if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["humanName","throwBindingError","invoker","fn","runDestructors","retType","classParam"];if(isClassMethodFunc){invokerFnBody+=`var thisWired = classParam['toWireType'](${dtorStack}, this);\n`}for(var i=0;i<argCount;++i){invokerFnBody+=`var arg${i}Wired = argType${i}['toWireType'](${dtorStack}, arg${i});\n`;args1.push(`argType${i}`)}invokerFnBody+=(returns||isAsync?"var rv = ":"")+`invoker(${argsListWired});\n`;if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=`${paramName}_dtor(${paramName});\n`;args1.push(`${paramName}_dtor`)}}}if(returns){invokerFnBody+="var ret = retType['fromWireType'](rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";return[args1,invokerFnBody]}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=usesDestructorStack(argTypes);var returns=argTypes[0].name!=="void";var closureArgs=[humanName,throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];for(var i=0;i<argCount-2;++i){closureArgs.push(argTypes[i+2])}if(!needsDestructorStack){for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){if(argTypes[i].destructorFunction!==null){closureArgs.push(argTypes[i].destructorFunction)}}}let[args,invokerFnBody]=createJsInvoker(argTypes,isClassMethodFunc,returns,isAsync);args.push(invokerFnBody);var invokerFn=newFunc(Function,args)(...closureArgs);return createNamedFunction(humanName,invokerFn)}var __embind_register_class_constructor=(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor)=>{var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],classType=>{classType=classType[0];var humanName=`constructor ${classType.name}`;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`)}classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,argTypes=>{argTypes.splice(1,0,null);classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor);return[]});return[]})};var getFunctionName=signature=>{signature=signature.trim();const argsIndex=signature.indexOf("(");if(argsIndex!==-1){return signature.substr(0,argsIndex)}else{return signature}};var __embind_register_class_function=(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync,isNonnullReturn)=>{var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);methodName=getFunctionName(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],classType=>{classType=classType[0];var humanName=`${classType.name}.${methodName}`;if(methodName.startsWith("@@")){methodName=Symbol[methodName.substring(2)]}if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,argTypes=>{var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})};var __embind_register_constant=(name,type,value)=>{name=readLatin1String(name);whenDependentTypesAreResolved([],[type],type=>{type=type[0];Module[name]=type["fromWireType"](value);return[]})};var emval_freelist=[];var emval_handles=[];var __emval_decref=handle=>{if(handle>9&&0===--emval_handles[handle+1]){emval_handles[handle]=undefined;emval_freelist.push(handle)}};var count_emval_handles=()=>emval_handles.length/2-5-emval_freelist.length;var init_emval=()=>{emval_handles.push(0,1,undefined,1,null,1,true,1,false,1);Module["count_emval_handles"]=count_emval_handles};var Emval={toValue:handle=>{if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle)}return emval_handles[handle]},toHandle:value=>{switch(value){case undefined:return 2;case null:return 4;case true:return 6;case false:return 8;default:{const handle=emval_freelist.pop()||emval_handles.length;emval_handles[handle]=value;emval_handles[handle+1]=1;return handle}}}};var EmValType={name:"emscripten::val",fromWireType:handle=>{var rv=Emval.toValue(handle);__emval_decref(handle);return rv},toWireType:(destructors,value)=>Emval.toHandle(value),argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction:null};var __embind_register_emval=rawType=>registerType(rawType,EmValType);var embindRepr=v=>{if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}};var floatReadValueFromPointer=(name,width)=>{switch(width){case 4:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 8:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError(`invalid float width (${width}): ${name}`)}};var __embind_register_float=(rawType,name,size)=>{name=readLatin1String(name);registerType(rawType,{name,fromWireType:value=>value,toWireType:(destructors,value)=>value,argPackAdvance:GenericWireTypeSize,readValueFromPointer:floatReadValueFromPointer(name,size),destructorFunction:null})};var integerReadValueFromPointer=(name,width,signed)=>{switch(width){case 1:return signed?pointer=>HEAP8[pointer]:pointer=>HEAPU8[pointer];case 2:return signed?pointer=>HEAP16[pointer>>1]:pointer=>HEAPU16[pointer>>1];case 4:return signed?pointer=>HEAP32[pointer>>2]:pointer=>HEAPU32[pointer>>2];default:throw new TypeError(`invalid integer width (${width}): ${name}`)}};var __embind_register_integer=(primitiveType,name,size,minRange,maxRange)=>{name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes("unsigned");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name,fromWireType,toWireType,argPackAdvance:GenericWireTypeSize,readValueFromPointer:integerReadValueFromPointer(name,size,minRange!==0),destructorFunction:null})};var __embind_register_memory_view=(rawType,dataTypeIndex,name)=>{var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){var size=HEAPU32[handle>>2];var data=HEAPU32[handle+4>>2];return new TA(HEAP8.buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name,fromWireType:decodeMemoryView,argPackAdvance:GenericWireTypeSize,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:true})};var EmValOptionalType=Object.assign({optional:true},EmValType);var __embind_register_optional=(rawOptionalType,rawType)=>{registerType(rawOptionalType,EmValOptionalType)};var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);var __embind_register_std_string=(rawType,name)=>{name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name,fromWireType(value){var length=HEAPU32[value>>2];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[payload+i])}str=a.join("")}_free(value);return str},toWireType(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value=="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;HEAPU32[base>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+i]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction(ptr){_free(ptr)}})};var UTF16Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf-16le"):undefined;var UTF16ToString=(ptr,maxBytesToRead)=>{var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.slice(ptr,endPtr));var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str};var stringToUTF16=(str,outPtr,maxBytesToWrite)=>{maxBytesToWrite??=2147483647;if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr};var lengthBytesUTF16=str=>str.length*2;var UTF32ToString=(ptr,maxBytesToRead)=>{var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str};var stringToUTF32=(str,outPtr,maxBytesToWrite)=>{maxBytesToWrite??=2147483647;if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr};var lengthBytesUTF32=str=>{var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len};var __embind_register_std_wstring=(rawType,charSize,name)=>{name=readLatin1String(name);var decodeString,encodeString,readCharAt,lengthBytesUTF;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;readCharAt=pointer=>HEAPU16[pointer>>1]}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;readCharAt=pointer=>HEAPU32[pointer>>2]}registerType(rawType,{name,fromWireType:value=>{var length=HEAPU32[value>>2];var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||readCharAt(currentBytePtr)==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},toWireType:(destructors,value)=>{if(!(typeof value=="string")){throwBindingError(`Cannot pass non-string to C++ string type ${name}`)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length/charSize;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},argPackAdvance:GenericWireTypeSize,readValueFromPointer:readPointer,destructorFunction(ptr){_free(ptr)}})};var __embind_register_value_object=(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor)=>{structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}};var __embind_register_value_object_field=(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext)=>{structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext})};var __embind_register_void=(rawType,name)=>{name=readLatin1String(name);registerType(rawType,{isVoid:true,name,argPackAdvance:0,fromWireType:()=>undefined,toWireType:(destructors,o)=>undefined})};var __emscripten_init_main_thread_js=tb=>{__emscripten_thread_init(tb,!ENVIRONMENT_IS_WORKER,1,!ENVIRONMENT_IS_WEB,65536,false);PThread.threadInitTLS()};var maybeExit=()=>{if(!keepRuntimeAlive()){try{if(ENVIRONMENT_IS_PTHREAD)__emscripten_thread_exit(EXITSTATUS);else _exit(EXITSTATUS)}catch(e){handleException(e)}}};var callUserCallback=func=>{if(ABORT){return}try{func();maybeExit()}catch(e){handleException(e)}};var __emscripten_thread_mailbox_await=pthread_ptr=>{if(typeof Atomics.waitAsync==="function"){var wait=Atomics.waitAsync(HEAP32,pthread_ptr>>2,pthread_ptr);wait.value.then(checkMailbox);var waitingAsync=pthread_ptr+128;Atomics.store(HEAP32,waitingAsync>>2,1)}};var checkMailbox=()=>{var pthread_ptr=_pthread_self();if(pthread_ptr){__emscripten_thread_mailbox_await(pthread_ptr);callUserCallback(__emscripten_check_mailbox)}};var __emscripten_notify_mailbox_postmessage=(targetThread,currThreadId)=>{if(targetThread==currThreadId){setTimeout(checkMailbox)}else if(ENVIRONMENT_IS_PTHREAD){postMessage({targetThread,cmd:"checkMailbox"})}else{var worker=PThread.pthreads[targetThread];if(!worker){return}worker.postMessage({cmd:"checkMailbox"})}};var proxiedJSCallArgs=[];var __emscripten_receive_on_main_thread_js=(funcIndex,emAsmAddr,callingThread,numCallArgs,args)=>{proxiedJSCallArgs.length=numCallArgs;var b=args>>3;for(var i=0;i<numCallArgs;i++){proxiedJSCallArgs[i]=HEAPF64[b+i]}var func=emAsmAddr?ASM_CONSTS[emAsmAddr]:proxiedFunctionTable[funcIndex];PThread.currentProxiedOperationCallerThread=callingThread;var rtn=func(...proxiedJSCallArgs);PThread.currentProxiedOperationCallerThread=0;return rtn};var __emscripten_thread_cleanup=thread=>{if(!ENVIRONMENT_IS_PTHREAD)cleanupThread(thread);else postMessage({cmd:"cleanupThread",thread})};var __emscripten_thread_set_strongref=thread=>{};var __emscripten_throw_longjmp=()=>{throw Infinity};var requireRegisteredType=(rawType,humanName)=>{var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`)}return impl};var emval_returnValue=(returnType,destructorsRef,handle)=>{var destructors=[];var result=returnType["toWireType"](destructors,handle);if(destructors.length){HEAPU32[destructorsRef>>2]=Emval.toHandle(destructors)}return result};var __emval_as=(handle,returnType,destructorsRef)=>{handle=Emval.toValue(handle);returnType=requireRegisteredType(returnType,"emval::as");return emval_returnValue(returnType,destructorsRef,handle)};var emval_symbols={};var getStringOrSymbol=address=>{var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}return symbol};var emval_methodCallers=[];var __emval_call_method=(caller,objHandle,methodName,destructorsRef,args)=>{caller=emval_methodCallers[caller];objHandle=Emval.toValue(objHandle);methodName=getStringOrSymbol(methodName);return caller(objHandle,objHandle[methodName],destructorsRef,args)};var emval_addMethodCaller=caller=>{var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id};var emval_lookupTypes=(argCount,argTypes)=>{var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAPU32[argTypes+i*4>>2],"parameter "+i)}return a};var reflectConstruct=Reflect.construct;var __emval_get_method_caller=(argCount,argTypes,kind)=>{var types=emval_lookupTypes(argCount,argTypes);var retType=types.shift();argCount--;var functionBody=`return function (obj, func, destructorsRef, args) {\n`;var offset=0;var argsList=[];if(kind===0){argsList.push("obj")}var params=["retType"];var args=[retType];for(var i=0;i<argCount;++i){argsList.push("arg"+i);params.push("argType"+i);args.push(types[i]);functionBody+=`  var arg${i} = argType${i}.readValueFromPointer(args${offset?"+"+offset:""});\n`;offset+=types[i].argPackAdvance}var invoker=kind===1?"new func":"func.call";functionBody+=`  var rv = ${invoker}(${argsList.join(", ")});\n`;if(!retType.isVoid){params.push("emval_returnValue");args.push(emval_returnValue);functionBody+="  return emval_returnValue(retType, destructorsRef, rv);\n"}functionBody+="};\n";params.push(functionBody);var invokerFunction=newFunc(Function,params)(...args);var functionName=`methodCaller<(${types.map(t=>t.name).join(", ")}) => ${retType.name}>`;return emval_addMethodCaller(createNamedFunction(functionName,invokerFunction))};var __emval_get_property=(handle,key)=>{handle=Emval.toValue(handle);key=Emval.toValue(key);return Emval.toHandle(handle[key])};var __emval_incref=handle=>{if(handle>9){emval_handles[handle+1]+=1}};var __emval_new_array=()=>Emval.toHandle([]);var __emval_new_cstring=v=>Emval.toHandle(getStringOrSymbol(v));var __emval_new_object=()=>Emval.toHandle({});var __emval_run_destructors=handle=>{var destructors=Emval.toValue(handle);runDestructors(destructors);__emval_decref(handle)};var __emval_set_property=(handle,key,value)=>{handle=Emval.toValue(handle);key=Emval.toValue(key);value=Emval.toValue(value);handle[key]=value};var __emval_take_value=(type,arg)=>{type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](arg);return Emval.toHandle(v)};var isLeapYear=year=>year%4===0&&(year%100!==0||year%400===0);var MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335];var MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334];var ydayFromDate=date=>{var leap=isLeapYear(date.getFullYear());var monthDaysCumulative=leap?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE;var yday=monthDaysCumulative[date.getMonth()]+date.getDate()-1;return yday};function __localtime_js(time_low,time_high,tmPtr){var time=convertI32PairToI53Checked(time_low,time_high);var date=new Date(time*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var yday=ydayFromDate(date)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst}var __tzset_js=(timezone,daylight,std_name,dst_name)=>{var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAPU32[timezone>>2]=stdTimezoneOffset*60;HEAP32[daylight>>2]=Number(winterOffset!=summerOffset);var extractZone=timezoneOffset=>{var sign=timezoneOffset>=0?"-":"+";var absOffset=Math.abs(timezoneOffset);var hours=String(Math.floor(absOffset/60)).padStart(2,"0");var minutes=String(absOffset%60).padStart(2,"0");return`UTC${sign}${hours}${minutes}`};var winterName=extractZone(winterOffset);var summerName=extractZone(summerOffset);if(summerOffset<winterOffset){stringToUTF8(winterName,std_name,17);stringToUTF8(summerName,dst_name,17)}else{stringToUTF8(winterName,dst_name,17);stringToUTF8(summerName,std_name,17)}};var readEmAsmArgsArray=[];var readEmAsmArgs=(sigPtr,buf)=>{readEmAsmArgsArray.length=0;var ch;while(ch=HEAPU8[sigPtr++]){var wide=ch!=105;wide&=ch!=112;buf+=wide&&buf%8?4:0;readEmAsmArgsArray.push(ch==112?HEAPU32[buf>>2]:ch==105?HEAP32[buf>>2]:HEAPF64[buf>>3]);buf+=wide?8:4}return readEmAsmArgsArray};var runEmAsmFunction=(code,sigPtr,argbuf)=>{var args=readEmAsmArgs(sigPtr,argbuf);return ASM_CONSTS[code](...args)};var _emscripten_asm_const_int=(code,sigPtr,argbuf)=>runEmAsmFunction(code,sigPtr,argbuf);var warnOnce=text=>{warnOnce.shown||={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}};var _emscripten_check_blocking_allowed=()=>{};var _emscripten_console_error=str=>{console.error(UTF8ToString(str))};var _emscripten_console_warn=str=>{console.warn(UTF8ToString(str))};var _emscripten_date_now=()=>Date.now();var runtimeKeepalivePush=()=>{runtimeKeepaliveCounter+=1};var _emscripten_exit_with_live_runtime=()=>{runtimeKeepalivePush();throw"unwind"};var getHeapMax=()=>HEAPU8.length;var _emscripten_get_heap_max=()=>getHeapMax();var _emscripten_get_now=()=>performance.timeOrigin+performance.now();var _emscripten_num_logical_cores=()=>navigator["hardwareConcurrency"];var abortOnCannotGrowMemory=requestedSize=>{abort("OOM")};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;abortOnCannotGrowMemory(requestedSize)};var ENV={};var getExecutableName=()=>thisProgram||"./this.program";var getEnvStrings=()=>{if(!getEnvStrings.strings){var lang=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:lang,_:getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(`${x}=${env[x]}`)}getEnvStrings.strings=strings}return getEnvStrings.strings};var stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i){HEAP8[buffer++]=str.charCodeAt(i)}HEAP8[buffer]=0};var _environ_get=function(__environ,environ_buf){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(8,0,1,__environ,environ_buf);var bufSize=0;getEnvStrings().forEach((string,i)=>{var ptr=environ_buf+bufSize;HEAPU32[__environ+i*4>>2]=ptr;stringToAscii(string,ptr);bufSize+=string.length+1});return 0};var _environ_sizes_get=function(penviron_count,penviron_buf_size){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(9,0,1,penviron_count,penviron_buf_size);var strings=getEnvStrings();HEAPU32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(string=>bufSize+=string.length+1);HEAPU32[penviron_buf_size>>2]=bufSize;return 0};function _fd_close(fd){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(10,0,1,fd);try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;if(typeof offset!="undefined"){offset+=curr}}return ret};function _fd_read(fd,iov,iovcnt,pnum){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(11,0,1,fd,iov,iovcnt,pnum);try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(12,0,1,fd,offset_low,offset_high,whence,newOffset);var offset=convertI32PairToI53Checked(offset_low,offset_high);try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len){break}if(typeof offset!="undefined"){offset+=curr}}return ret};function _fd_write(fd,iov,iovcnt,pnum){if(ENVIRONMENT_IS_PTHREAD)return proxyToMainThread(13,0,1,fd,iov,iovcnt,pnum);try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}PThread.init();FS.createPreloadedFile=FS_createPreloadedFile;FS.staticInit();InternalError=Module["InternalError"]=class InternalError extends Error{constructor(message){super(message);this.name="InternalError"}};embind_init_charCodes();BindingError=Module["BindingError"]=class BindingError extends Error{constructor(message){super(message);this.name="BindingError"}};init_ClassHandle();init_RegisteredPointer();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();var proxiedFunctionTable=[_proc_exit,exitOnMainThread,pthreadCreateProxied,___syscall_fcntl64,___syscall_ioctl,___syscall_openat,___syscall_rmdir,___syscall_unlinkat,_environ_get,_environ_sizes_get,_fd_close,_fd_read,_fd_seek,_fd_write];var wasmImports;function assignWasmImports(){wasmImports={na:___assert_fail,f:___cxa_throw,P:___pthread_create_js,t:___syscall_fcntl64,Y:___syscall_ioctl,Z:___syscall_openat,L:___syscall_rmdir,M:___syscall_unlinkat,aa:__abort_js,ma:__embind_finalize_value_object,F:__embind_register_bigint,ca:__embind_register_bool,k:__embind_register_class,j:__embind_register_class_constructor,b:__embind_register_class_function,y:__embind_register_constant,ba:__embind_register_emval,w:__embind_register_float,e:__embind_register_integer,c:__embind_register_memory_view,p:__embind_register_optional,v:__embind_register_std_string,m:__embind_register_std_wstring,ka:__embind_register_value_object,ja:__embind_register_value_object_field,da:__embind_register_void,U:__emscripten_init_main_thread_js,I:__emscripten_notify_mailbox_postmessage,R:__emscripten_receive_on_main_thread_js,N:__emscripten_thread_cleanup,T:__emscripten_thread_mailbox_await,$:__emscripten_thread_set_strongref,G:__emscripten_throw_longjmp,ha:__emval_as,o:__emval_call_method,oa:__emval_decref,n:__emval_get_method_caller,ia:__emval_get_property,ea:__emval_incref,pa:__emval_new_array,ga:__emval_new_cstring,qa:__emval_new_object,fa:__emval_run_destructors,q:__emval_set_property,g:__emval_take_value,C:__localtime_js,S:__tzset_js,z:_emscripten_asm_const_int,Q:_emscripten_check_blocking_allowed,ra:_emscripten_console_error,la:_emscripten_console_warn,u:_emscripten_date_now,_:_emscripten_exit_with_live_runtime,J:_emscripten_get_heap_max,h:_emscripten_get_now,K:_emscripten_num_logical_cores,H:_emscripten_resize_heap,V:_environ_get,W:_environ_sizes_get,d:_exit,r:_fd_close,X:_fd_read,E:_fd_seek,s:_fd_write,x:invoke_ii,B:invoke_iii,A:invoke_iiii,i:invoke_vi,D:invoke_vii,O:invoke_viii,l:invoke_viiii,a:wasmMemory}}var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports["sa"])();var _malloc=a0=>(_malloc=wasmExports["ta"])(a0);var _free=a0=>(_free=wasmExports["ua"])(a0);var _pthread_self=()=>(_pthread_self=wasmExports["wa"])();var ___getTypeName=a0=>(___getTypeName=wasmExports["xa"])(a0);var __embind_initialize_bindings=()=>(__embind_initialize_bindings=wasmExports["ya"])();var __emscripten_tls_init=()=>(__emscripten_tls_init=wasmExports["za"])();var __emscripten_thread_init=(a0,a1,a2,a3,a4,a5)=>(__emscripten_thread_init=wasmExports["Aa"])(a0,a1,a2,a3,a4,a5);var __emscripten_thread_crashed=()=>(__emscripten_thread_crashed=wasmExports["Ba"])();var __emscripten_run_on_main_thread_js=(a0,a1,a2,a3,a4)=>(__emscripten_run_on_main_thread_js=wasmExports["Ca"])(a0,a1,a2,a3,a4);var __emscripten_thread_free_data=a0=>(__emscripten_thread_free_data=wasmExports["Da"])(a0);var __emscripten_thread_exit=a0=>(__emscripten_thread_exit=wasmExports["Ea"])(a0);var __emscripten_check_mailbox=()=>(__emscripten_check_mailbox=wasmExports["Fa"])();var _setThrew=(a0,a1)=>(_setThrew=wasmExports["Ga"])(a0,a1);var _emscripten_stack_set_limits=(a0,a1)=>(_emscripten_stack_set_limits=wasmExports["Ha"])(a0,a1);var __emscripten_stack_restore=a0=>(__emscripten_stack_restore=wasmExports["Ia"])(a0);var __emscripten_stack_alloc=a0=>(__emscripten_stack_alloc=wasmExports["Ja"])(a0);var _emscripten_stack_get_current=()=>(_emscripten_stack_get_current=wasmExports["Ka"])();var dynCall_jiji=Module["dynCall_jiji"]=(a0,a1,a2,a3,a4)=>(dynCall_jiji=Module["dynCall_jiji"]=wasmExports["La"])(a0,a1,a2,a3,a4);var dynCall_viijii=Module["dynCall_viijii"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_viijii=Module["dynCall_viijii"]=wasmExports["Ma"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiiiij=Module["dynCall_iiiiij"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iiiiij=Module["dynCall_iiiiij"]=wasmExports["Na"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=wasmExports["Oa"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)=>(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=wasmExports["Pa"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);function invoke_ii(index,a1){var sp=stackSave();try{return getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}Module["FS"]=FS;var calledRun;var calledPrerun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}if(ENVIRONMENT_IS_PTHREAD){readyPromiseResolve(Module);initRuntime();startWorker(Module);return}if(!calledPrerun){calledPrerun=1;preRun();if(runDependencies>0){return}}function doRun(){if(calledRun)return;calledRun=1;Module["calledRun"]=1;if(ABORT)return;initRuntime();readyPromiseResolve(Module);Module["onRuntimeInitialized"]?.();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(()=>{setTimeout(()=>Module["setStatus"](""),1);doRun()},1)}else{doRun()}}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();moduleRtn=readyPromise;


  return moduleRtn;
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);
var isPthread = globalThis.self?.name?.startsWith('em-pthread');
// When running as a pthread, construct a new instance on startup
isPthread && Module();


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperty(e, r, t) {
  return (r = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toPrimitive.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPrimitive)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");

function toPrimitive(t, r) {
  if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPropertyKey)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ "./node_modules/@babel/runtime/helpers/esm/toPrimitive.js");


function toPropertyKey(t) {
  var i = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__["default"])(t, "string");
  return "symbol" == (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i) ? i : i + "";
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"]);
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ ((module) => {

function _typeof(o) {
  "@babel/helpers - typeof";

  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/axios/lib/adapters/adapters.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http.js */ "./node_modules/axios/lib/helpers/null.js");
/* harmony import */ var _xhr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js");
/* harmony import */ var _fetch_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fetch.js */ "./node_modules/axios/lib/adapters/fetch.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");






const knownAdapters = {
  http: _http_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  fetch: _fetch_js__WEBPACK_IMPORTED_MODULE_2__["default"]
}

_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  getAdapter: (adapters) => {
    adapters = _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_4__["default"](`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_4__["default"](
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});


/***/ }),

/***/ "./node_modules/axios/lib/adapters/fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/adapters/fetch.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_composeSignals_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/composeSignals.js */ "./node_modules/axios/lib/helpers/composeSignals.js");
/* harmony import */ var _helpers_trackStream_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/trackStream.js */ "./node_modules/axios/lib/helpers/trackStream.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/progressEventReducer.js */ "./node_modules/axios/lib/helpers/progressEventReducer.js");
/* harmony import */ var _helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/resolveConfig.js */ "./node_modules/axios/lib/helpers/resolveConfig.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/settle.js */ "./node_modules/axios/lib/core/settle.js");










const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
}

const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported &&
  test(() => _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isReadableStream(new Response('').body));


const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"](`Response type '${type}' is not supported`, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_NOT_SUPPORT, config);
      })
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isBlob(body)) {
    return body.size;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isSpecCompliantForm(body)) {
    const _request = new Request(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArrayBufferView(body) || _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isURLSearchParams(body)) {
    body = body + '';
  }

  if(_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(body)) {
    return (await encodeText(body)).byteLength;
  }
}

const resolveBodyLength = async (headers, body) => {
  const length = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = (0,_helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = (0,_helpers_composeSignals_js__WEBPACK_IMPORTED_MODULE_4__["default"])([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader)
      }

      if (_request.body) {
        const [onProgress, flush] = (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__.progressEventDecorator)(
          requestContentLength,
          (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__.progressEventReducer)((0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__.asyncDecorator)(onUploadProgress))
        );

        data = (0,_helpers_trackStream_js__WEBPACK_IMPORTED_MODULE_6__.trackStream)(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__.progressEventDecorator)(
        responseContentLength,
        (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__.progressEventReducer)((0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_5__.asyncDecorator)(onDownloadProgress), true)
      ) || [];

      response = new Response(
        (0,_helpers_trackStream_js__WEBPACK_IMPORTED_MODULE_6__.trackStream)(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers[_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].findKey(resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_7__["default"])(resolve, reject, {
        data: responseData,
        headers: _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_8__["default"].from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      })
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"].from(err, err && err.code, config, request);
  }
}));




/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js");
/* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/progressEventReducer.js */ "./node_modules/axios/lib/helpers/progressEventReducer.js");
/* harmony import */ var _helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/resolveConfig.js */ "./node_modules/axios/lib/helpers/resolveConfig.js");











const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = (0,_helpers_resolveConfig_js__WEBPACK_IMPORTED_MODULE_0__["default"])(config);
    let requestData = _config.data;
    const requestHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Request aborted', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_4__["default"];
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      _utils_js__WEBPACK_IMPORTED_MODULE_5__["default"].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"].isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.progressEventReducer)(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = (0,_helpers_progressEventReducer_js__WEBPACK_IMPORTED_MODULE_6__.progressEventReducer)(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_7__["default"](null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = (0,_helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_8__["default"])(_config.url);

    if (protocol && _platform_index_js__WEBPACK_IMPORTED_MODULE_9__["default"].protocols.indexOf(protocol) === -1) {
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Unsupported protocol ' + protocol + ':', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"].ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");
/* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js");
/* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");
/* harmony import */ var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers/HttpStatusCode.js */ "./node_modules/axios/lib/helpers/HttpStatusCode.js");




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"](defaultConfig);
  const instance = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.request, context);

  // Copy axios.prototype to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype, context, {allOwnKeys: true});

  // Copy context to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance((0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(_defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]);

// Expose Axios class to allow class inheritance
axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];

// Expose Cancel & CancelToken
axios.CanceledError = _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__["default"];
axios.CancelToken = _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__["default"];
axios.isCancel = _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__["default"];
axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_8__.VERSION;
axios.toFormData = _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__["default"];

// Expose AxiosError class
axios.AxiosError = _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__["default"];

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__["default"];

// Expose isAxiosError
axios.isAxiosError = _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__["default"];

// Expose mergeConfig
axios.mergeConfig = _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];

axios.AxiosHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__["default"];

axios.formToJSON = thing => (0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__["default"])(_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__["default"].getAdapter;

axios.HttpStatusCode = _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__["default"];

axios.default = axios;

// this module should only have a default export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axios);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CancelToken);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, message == null ? 'canceled' : message, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(CanceledError, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"], {
  __CANCEL__: true
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanceledError);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isCancel)
/* harmony export */ });


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js");
/* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js");
/* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");











const validators = _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
      response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};

        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.allowAbsoluteUrls
    if (config.allowAbsoluteUrls !== undefined) {
      // do nothing
    } else if (this.defaults.allowAbsoluteUrls !== undefined) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }

    _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(config, {
      baseUrl: validators.spelling('baseURL'),
      withXsrfToken: validators.spelling('withXSRFToken')
    }, true);

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].merge(
      headers.common,
      headers[config.method]
    );

    headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [_dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);
    const fullPath = (0,_buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__["default"])(config.baseURL, config.url, config.allowAbsoluteUrls);
    return (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__["default"])(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Axios);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);

  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosError);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js");





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)) return;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders((0,_helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(header), valueOrRewrite);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosHeaders);


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InterceptorManager);


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildFullPath)
/* harmony export */ });
/* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
/* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js");





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !(0,_helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(requestedURL);
  if (baseURL && isRelativeUrl || allowAbsoluteUrls == false) {
    return (0,_helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(baseURL, requestedURL);
  }
  return requestedURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ dispatchRequest)
/* harmony export */ });
/* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers);

  // Transform request data
  config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__["default"].getAdapter(config.adapter || _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
      config,
      config.transformResponse,
      response
    );

    response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!(0,_cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__["default"])(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeConfig)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");





const headersToObject = (thing) => thing instanceof _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, prop, caseless) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(target) && _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge.call({caseless}, target, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge({}, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, prop , caseless) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(a, b, prop , caseless);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a, prop , caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)
  };

  _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ settle)
/* harmony export */ });
/* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
      'Request failed with status code ' + response.status,
      [_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_REQUEST, _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ transformData)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  const context = response || config;
  const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(context.headers);
  let data = context.data;

  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: _transitional_js__WEBPACK_IMPORTED_MODULE_1__["default"],

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(data);

    if (isObjectPayload && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify((0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data)) : data;
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isReadableStream(data)
    ) {
      return data;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBufferView(data)) {
      return data.buffer;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return (0,_helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__["default"])(data, this.formSerializer).toString();
      }

      if ((isFileList = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return (0,_helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__["default"])(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isResponse(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isReadableStream(data)) {
      return data;
    }

    if (data && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].from(e, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.FormData,
    Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaults);


/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = "1.8.3";

/***/ }),

/***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosURLSearchParams);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/HttpStatusCode.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HttpStatusCode);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bind)
/* harmony export */ });


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildURL)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?(object|Function)} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(options)) {
    options = {
      serialize: options
    };
  } 

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(params) ?
      params.toString() :
      new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__["default"](params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ combineURLs)
/* harmony export */ });


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/composeSignals.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/composeSignals.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




const composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? err : new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_1__["default"](err instanceof Error ? err.message : err));
      }
    }

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](`timeout ${timeout} of ms exceeded`, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ETIMEDOUT))
    }, timeout)

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    }

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].asap(unsubscribe);

    return signal;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (composeSignals);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(path) && cookie.push('path=' + path);

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });



/***/ }),

/***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target) ? target.length : name;

    if (isLast) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(formData) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(formData.entries)) {
    const obj = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formDataToJSON);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAbsoluteURL)
/* harmony export */ });


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAxiosError)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(payload) && (payload.isAxiosError === true);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {
  url = new URL(url, _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin);

  return (
    origin.protocol === url.protocol &&
    origin.host === url.host &&
    (isMSIE || origin.port === url.port)
  );
})(
  new URL(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].origin),
  _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].navigator && /(msie|trident)/i.test(_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].navigator.userAgent)
) : () => true);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line strict
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (null);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseProtocol)
/* harmony export */ });


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/progressEventReducer.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/progressEventReducer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   asyncDecorator: () => (/* binding */ asyncDecorator),
/* harmony export */   progressEventDecorator: () => (/* binding */ progressEventDecorator),
/* harmony export */   progressEventReducer: () => (/* binding */ progressEventReducer)
/* harmony export */ });
/* harmony import */ var _speedometer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js");
/* harmony import */ var _throttle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./throttle.js */ "./node_modules/axios/lib/helpers/throttle.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = (0,_speedometer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(50, 250);

  return (0,_throttle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
}

const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
}

const asyncDecorator = (fn) => (...args) => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].asap(() => fn(...args));


/***/ }),

/***/ "./node_modules/axios/lib/helpers/resolveConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/resolveConfig.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
/* harmony import */ var _cookies_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cookies.js */ "./node_modules/axios/lib/helpers/cookies.js");
/* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _buildURL_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");









/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((config) => {
  const newConfig = (0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_0__["default"])({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(headers);

  newConfig.url = (0,_buildURL_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_3__["default"])(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_4__["default"].isFormData(data)) {
    if (_platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].hasStandardBrowserEnv || _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (_platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].hasStandardBrowserEnv) {
    withXSRFToken && _utils_js__WEBPACK_IMPORTED_MODULE_4__["default"].isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && (0,_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_6__["default"])(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && _cookies_js__WEBPACK_IMPORTED_MODULE_7__["default"].read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
});



/***/ }),

/***/ "./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (speedometer);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ spread)
/* harmony export */ });


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/throttle.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/throttle.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  }

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs)
        }, threshold - passed);
      }
    }
  }

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (throttle);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/node/classes/FormData.js */ "./node_modules/axios/lib/helpers/null.js");




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(thing) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) && !arr.some(isVisitable);
}

const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSpecCompliantForm(formData);

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('Blob is not supported. Use a Buffer instead.');
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) && isFlatArray(value)) ||
        ((_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]')) && (arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(value, function each(el, key) {
      const result = !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && visitor.call(
        formData, el, _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toFormData);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toURLEncodedForm)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");






function toURLEncodedForm(data, options) {
  return (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, new _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNode && _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/trackStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/trackStream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   readBytes: () => (/* binding */ readBytes),
/* harmony export */   streamChunk: () => (/* binding */ streamChunk),
/* harmony export */   trackStream: () => (/* binding */ trackStream)
/* harmony export */ });

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
}

const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
}

const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
}

const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  }

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    // eslint-disable-next-line no-console
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  }
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('options must be an object', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('option ' + opt + ' must be ' + result, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Unknown option ' + opt, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  assertOptions,
  validators
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/Blob.js":
/*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Blob !== 'undefined' ? Blob : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof FormData !== 'undefined' ? FormData : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js");
/* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js");
/* harmony import */ var _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/Blob.js */ "./node_modules/axios/lib/platform/browser/classes/Blob.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isBrowser: true,
  classes: {
    URLSearchParams: _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    FormData: _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    Blob: _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__["default"]
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/common/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasBrowserEnv: () => (/* binding */ hasBrowserEnv),
/* harmony export */   hasStandardBrowserEnv: () => (/* binding */ hasStandardBrowserEnv),
/* harmony export */   hasStandardBrowserWebWorkerEnv: () => (/* binding */ hasStandardBrowserWebWorkerEnv),
/* harmony export */   navigator: () => (/* binding */ _navigator),
/* harmony export */   origin: () => (/* binding */ origin)
/* harmony export */ });
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const _navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = hasBrowserEnv &&
  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';




/***/ }),

/***/ "./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node/index.js */ "./node_modules/axios/lib/platform/browser/index.js");
/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/utils.js */ "./node_modules/axios/lib/platform/common/utils.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ..._common_utils_js__WEBPACK_IMPORTED_MODULE_0__,
  ..._node_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]
});


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");




// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({source, data}) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  isFunction(_global.postMessage)
);

const asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

// *********************

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
});


/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@webarkit/jsartoolkit-nft","version":"1.7.3","main":"dist/ARToolkitNFT.js","types":"types/src/index.d.ts","description":"Emscripten port of ARToolKit5 to JavaScript. It is a lighter version of Jsartoolkit5 with only NFT markerless support","keywords":["ARToolKit","AR","Augmented Reality","WebAR","JavaScript","jsartoolkit","jsartoolkit5","jsartoolkitNFT","NFT","markerless"],"author":{"name":"Walter Perdan","email":"github@kalwaltart.it","url":"https://www.kalwaltart.com"},"repository":{"type":"git","url":"https://github.com/webarkit/jsartoolkitNFT"},"publishConfig":{"registry":"https://registry.npmjs.org/"},"homepage":"https://github.com/webarkit/jsartoolkitNFT","contributors":["Github Contributors (https://github.com/webarkit/jsartoolkitNFT/graphs/contributors)"],"bugs":{"url":"https://github.com/webarkit/jsartoolkitNFT/issues"},"devDependencies":{"@babel/core":"7.26.10","@babel/plugin-transform-runtime":"7.26.10","@babel/preset-env":"^7.26.9","@types/node":"^22.13.10","babel-loader":"10.0.0","karma":"^6.4.4","karma-chrome-launcher":"^3.2.0","karma-firefox-launcher":"^2.1.3","karma-qunit":"^4.2.1","prettier":"^3.5.3","qunit":"^2.24.1","ts-loader":"^9.5.2","typedoc":"0.28.0","typescript":"^5.8.2","webpack":"^5.98.0","webpack-cli":"6.0.1"},"scripts":{"dev-ts":"webpack --mode development --progress --watch","docs":"typedoc","build-ts":"webpack --mode production","build":"node tools/makem.js; echo Built at `date`","build-no-libar":"node tools/makem.js --no-libar; echo Built at `date`","build-docker":"docker exec emscripten-jsartoolkitnft npm run build","build-docker-no-libar":"docker exec emscripten-jsartoolkitnft npm run build-no-libar","test-browser":"karma start --browsers Chrome,Firefox,ChromeHeadless,FirefoxHeadless","test":"karma start","watch":"./node_modules/.bin/watch \'npm run build\' ./js/","format-check":"prettier --check .","format":"prettier --write .","setup-docker":"docker run -dit --name emscripten-jsartoolkitnft -v $(pwd):/src emscripten/emsdk:3.1.69 bash"},"license":"LGPL-3.0","dependencies":{"@babel/runtime":"7.26.10","axios":"1.8.3"}}');

/***/ }),

/***/ "./src/ARControllerNFT_td.ts":
/*!***********************************!*\
  !*** ./src/ARControllerNFT_td.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARControllerNFT: () => (/* binding */ ARControllerNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ARToolkitNFT_td */ "./src/ARToolkitNFT_td.ts");






var ARControllerNFT = /*#__PURE__*/function () {
  function ARControllerNFT(width, height, cameraParam, internalLuma) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ARControllerNFT);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "id", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "_width", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "_height", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "_cameraParam", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraId", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "artoolkitNFT", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "FS", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "StringList", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "listeners", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkers", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "transform_mat", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "transformGL_RH", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "camera_mat", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoWidth", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoHeight", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoSize", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "framesize", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoLuma", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "grayscaleEnabled", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "grayscaleSource", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoLumaInternal", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerFound", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerFoundTime", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerCount", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "defaultMarkerWidth", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "_bwpointer", void 0);
    this.id = -1;
    this._width = width;
    this._height = height;
    this._cameraParam = cameraParam;
    this.cameraId = -1;
    this.artoolkitNFT;
    this.listeners = {};
    this.nftMarkers = [];
    this.transform_mat = new Float64Array(16);
    this.transformGL_RH = new Float64Array(16);
    this.videoWidth = width;
    this.videoHeight = height;
    this.videoSize = this.videoWidth * this.videoHeight;
    this.framesize = null;
    this.videoLuma = null;
    this.videoLumaInternal = internalLuma;
    this.grayscaleEnabled = false;
    this.camera_mat = null;
    this.nftMarkerFound = false;
    this.nftMarkerFoundTime = 0;
    this.nftMarkerCount = 0;
    this._bwpointer = null;
    this.defaultMarkerWidth = 1;
  }
  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ARControllerNFT, [{
    key: "width",
    get: function get() {
      return this._width;
    },
    set: function set(width) {
      this._width = width;
    }
  }, {
    key: "height",
    get: function get() {
      return this._height;
    },
    set: function set(height) {
      this._height = height;
    }
  }, {
    key: "cameraParam",
    get: function get() {
      return this._cameraParam;
    },
    set: function set(cameraParam) {
      this._cameraParam = cameraParam;
    }
  }, {
    key: "process",
    value: function process(image) {
      this._copyImageToHeap(image);
      var k, o;
      for (k in this.converter().nftMarkers) {
        o = this.converter().nftMarkers[k];
        o.inPrevious = o.inCurrent;
        o.inCurrent = false;
      }
      var nftMarkerCount = this.nftMarkerCount;
      this.detectNFTMarker();
      var MARKER_LOST_TIME = 200;
      for (var i = 0; i < nftMarkerCount; i++) {
        var nftMarkerInfo = this.getNFTMarker(i);
        var markerType = _ARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_5__.ARToolkitNFT.NFT_MARKER;
        if (nftMarkerInfo.found) {
          this.nftMarkerFound = i;
          this.nftMarkerFoundTime = Date.now();
          var visible = this.trackNFTMarkerId(i);
          visible.matrix.set(nftMarkerInfo.pose);
          visible.inCurrent = true;
          this.transMatToGLMat(visible.matrix, this.transform_mat);
          this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);
          this.dispatchEvent({
            name: "getNFTMarker",
            target: this,
            data: {
              index: i,
              type: markerType,
              marker: nftMarkerInfo,
              matrix: this.transform_mat,
              matrixGL_RH: this.transformGL_RH
            }
          });
        } else if (this.nftMarkerFound === i) {
          if (Date.now() - this.nftMarkerFoundTime > MARKER_LOST_TIME) {
            this.nftMarkerFound = false;
            this.dispatchEvent({
              name: "lostNFTMarker",
              target: this,
              data: {
                index: i,
                type: markerType,
                marker: nftMarkerInfo,
                matrix: this.transform_mat,
                matrixGL_RH: this.transformGL_RH
              }
            });
          }
        }
      }
    }
  }, {
    key: "detectNFTMarker",
    value: function detectNFTMarker() {
      return this.artoolkitNFT.detectNFTMarker();
    }
  }, {
    key: "trackNFTMarkerId",
    value: function trackNFTMarkerId(id, markerWidth) {
      var obj = this.converter().nftMarkers[id];
      if (!obj) {
        this.converter().nftMarkers[id] = obj = {
          inPrevious: false,
          inCurrent: false,
          matrix: new Float64Array(12),
          matrixGL_RH: new Float64Array(12),
          markerWidth: markerWidth || this.defaultMarkerWidth
        };
      }
      if (markerWidth) {
        obj.markerWidth = markerWidth;
      }
      return obj;
    }
  }, {
    key: "getNFTMarker",
    value: function getNFTMarker(markerIndex) {
      return this.artoolkitNFT.getNFTMarker(markerIndex);
    }
  }, {
    key: "getNFTData",
    value: function getNFTData(index) {
      return this.artoolkitNFT.getNFTData(index);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      if (!this.converter().listeners[name]) {
        this.converter().listeners[name] = [];
      }
      this.converter().listeners[name].push(callback);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(name, callback) {
      if (this.converter().listeners[name]) {
        var index = this.converter().listeners[name].indexOf(callback);
        if (index > -1) {
          this.converter().listeners[name].splice(index, 1);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      var listeners = this.converter().listeners[event.name];
      if (listeners) {
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].call(this, event);
        }
      }
    }
  }, {
    key: "debugSetup",
    value: function debugSetup() {
      this.setDebugMode(true);
      this._bwpointer = this.getProcessingImage();
    }
  }, {
    key: "transMatToGLMat",
    value: function transMatToGLMat(transMat, glMat, scale) {
      if (glMat == undefined) {
        glMat = new Float64Array(16);
      }
      glMat[0 + 0 * 4] = transMat[0];
      glMat[0 + 1 * 4] = transMat[1];
      glMat[0 + 2 * 4] = transMat[2];
      glMat[0 + 3 * 4] = transMat[3];
      glMat[1 + 0 * 4] = transMat[4];
      glMat[1 + 1 * 4] = transMat[5];
      glMat[1 + 2 * 4] = transMat[6];
      glMat[1 + 3 * 4] = transMat[7];
      glMat[2 + 0 * 4] = transMat[8];
      glMat[2 + 1 * 4] = transMat[9];
      glMat[2 + 2 * 4] = transMat[10];
      glMat[2 + 3 * 4] = transMat[11];
      glMat[3 + 0 * 4] = 0.0;
      glMat[3 + 1 * 4] = 0.0;
      glMat[3 + 2 * 4] = 0.0;
      glMat[3 + 3 * 4] = 1.0;
      if (scale != undefined && scale !== 0.0) {
        glMat[12] *= scale;
        glMat[13] *= scale;
        glMat[14] *= scale;
      }
      return glMat;
    }
  }, {
    key: "arglCameraViewRHf",
    value: function arglCameraViewRHf(glMatrix, glRhMatrix, scale) {
      var m_modelview;
      if (glRhMatrix == undefined) {
        m_modelview = new Float64Array(16);
      } else {
        m_modelview = glRhMatrix;
      }
      m_modelview[0] = glMatrix[0];
      m_modelview[4] = glMatrix[4];
      m_modelview[8] = glMatrix[8];
      m_modelview[12] = glMatrix[12];
      m_modelview[1] = -glMatrix[1];
      m_modelview[5] = -glMatrix[5];
      m_modelview[9] = -glMatrix[9];
      m_modelview[13] = -glMatrix[13];
      m_modelview[2] = -glMatrix[2];
      m_modelview[6] = -glMatrix[6];
      m_modelview[10] = -glMatrix[10];
      m_modelview[14] = -glMatrix[14];
      m_modelview[3] = 0;
      m_modelview[7] = 0;
      m_modelview[11] = 0;
      m_modelview[15] = 1;
      if (scale != undefined && scale !== 0.0) {
        m_modelview[12] *= scale;
        m_modelview[13] *= scale;
        m_modelview[14] *= scale;
      }
      glRhMatrix = m_modelview;
      return glRhMatrix;
    }
  }, {
    key: "getTransformationMatrix",
    value: function getTransformationMatrix() {
      return this.transform_mat;
    }
  }, {
    key: "getCameraMatrix",
    value: function getCameraMatrix() {
      return this.camera_mat;
    }
  }, {
    key: "setDebugMode",
    value: function setDebugMode(mode) {
      return this.artoolkitNFT.setDebugMode(mode);
    }
  }, {
    key: "getDebugMode",
    value: function getDebugMode() {
      return this.artoolkitNFT.getDebugMode();
    }
  }, {
    key: "getProcessingImage",
    value: function getProcessingImage() {
      return this.artoolkitNFT.getProcessingImage();
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(mode) {
      return this.artoolkitNFT.setLogLevel(mode);
    }
  }, {
    key: "getLogLevel",
    value: function getLogLevel() {
      return this.artoolkitNFT.getLogLevel();
    }
  }, {
    key: "setProjectionNearPlane",
    value: function setProjectionNearPlane(value) {
      return this.artoolkitNFT.setProjectionNearPlane(value);
    }
  }, {
    key: "getProjectionNearPlane",
    value: function getProjectionNearPlane() {
      return this.artoolkitNFT.getProjectionNearPlane();
    }
  }, {
    key: "setProjectionFarPlane",
    value: function setProjectionFarPlane(value) {
      return this.artoolkitNFT.setProjectionFarPlane(value);
    }
  }, {
    key: "getProjectionFarPlane",
    value: function getProjectionFarPlane() {
      return this.artoolkitNFT.getProjectionFarPlane();
    }
  }, {
    key: "setThresholdMode",
    value: function setThresholdMode(mode) {
      return this.artoolkitNFT.setThresholdMode(mode);
    }
  }, {
    key: "getThresholdMode",
    value: function getThresholdMode() {
      return this.artoolkitNFT.getThresholdMode();
    }
  }, {
    key: "setThreshold",
    value: function setThreshold(threshold) {
      return this.artoolkitNFT.setThreshold(threshold);
    }
  }, {
    key: "getThreshold",
    value: function getThreshold() {
      return this.artoolkitNFT.getThreshold();
    }
  }, {
    key: "loadNFTMarker",
    value: function () {
      var _loadNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee(urlOrData, onSuccess, onError) {
        var _this = this;
        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.artoolkitNFT.addNFTMarkers([urlOrData], function (ids) {
                _this.nftMarkerCount += ids.length;
                onSuccess(ids[0]);
              }, onError);
            case 2:
              nft = _context.sent;
              return _context.abrupt("return", nft);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function loadNFTMarker(_x, _x2, _x3) {
        return _loadNFTMarker.apply(this, arguments);
      }
      return loadNFTMarker;
    }()
  }, {
    key: "loadNFTMarkers",
    value: function () {
      var _loadNFTMarkers = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData, onSuccess, onError) {
        var _this2 = this;
        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.artoolkitNFT.addNFTMarkers(urlOrData, function (ids) {
                _this2.nftMarkerCount += ids.length;
                onSuccess(ids);
              }, onError);
            case 2:
              nft = _context2.sent;
              return _context2.abrupt("return", nft);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function loadNFTMarkers(_x4, _x5, _x6) {
        return _loadNFTMarkers.apply(this, arguments);
      }
      return loadNFTMarkers;
    }()
  }, {
    key: "setImageProcMode",
    value: function setImageProcMode(mode) {
      return this.artoolkitNFT.setImageProcMode(mode);
    }
  }, {
    key: "getImageProcMode",
    value: function getImageProcMode() {
      return this.artoolkitNFT.getImageProcMode();
    }
  }, {
    key: "setGrayData",
    value: function setGrayData(data) {
      this.grayscaleEnabled = true;
      this.grayscaleSource = data;
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {
        var _this3 = this;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return new _ARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_5__.ARToolkitNFT().init();
            case 2:
              this.artoolkitNFT = _context3.sent;
              this.FS = this.artoolkitNFT.FS;
              this.StringList = this.artoolkitNFT.StringList;
              console.log("[ARControllerNFT]", "ARToolkitNFT initialized");
              _context3.next = 8;
              return this.artoolkitNFT.loadCamera(this.cameraParam);
            case 8:
              this.cameraId = _context3.sent;
              console.log("[ARControllerNFT]", "Camera params loaded with ID", this.cameraId);
              this.id = this.artoolkitNFT.setup(this.width, this.height, this.cameraId);
              console.log("[ARControllerNFT]", "Got ID from setup", this.id);
              this._initNFT();
              this.framesize = this._width * this._height;
              this.videoLuma = new Uint8Array(this.framesize);
              this.camera_mat = this.artoolkitNFT.getCameraLens();
              this.setProjectionNearPlane(0.1);
              this.setProjectionFarPlane(1000);
              setTimeout(function () {
                _this3.dispatchEvent({
                  name: "load",
                  target: _this3
                });
              }, 1);
              return _context3.abrupt("return", this);
            case 20:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function _initialize() {
        return _initialize2.apply(this, arguments);
      }
      return _initialize;
    }()
  }, {
    key: "_initNFT",
    value: function _initNFT() {
      this.artoolkitNFT.setupAR2();
    }
  }, {
    key: "_copyImageToHeap",
    value: function _copyImageToHeap(sourceImage) {
      if (!sourceImage) {
        console.error("Error: no provided imageData to ARControllerNFT");
        return;
      }
      var data;
      if (sourceImage.data) {
        data = sourceImage.data;
      }
      if (this.videoLuma && !this.videoLumaInternal) {
        if (this.grayscaleEnabled == false) {
          var q = 0;
          for (var p = 0; p < this.videoSize; p++) {
            var r = data[q + 0],
              g = data[q + 1],
              b = data[q + 2];
            this.videoLuma[p] = r + r + r + b + g + g + g + g >> 3;
            q += 4;
          }
        } else if (this.grayscaleEnabled == true) {
          this.videoLuma = this.grayscaleSource;
        }
      }
      if (this.videoLuma) {
        this.artoolkitNFT.passVideoData(data, this.videoLuma, this.videoLumaInternal);
        return true;
      }
      return false;
    }
  }], [{
    key: "initWithDimensions",
    value: function () {
      var _initWithDimensions = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(width, height, cameraParam, internalLuma) {
        var arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              arControllerNFT = new ARControllerNFT(width, height, cameraParam, internalLuma);
              _context4.next = 3;
              return arControllerNFT._initialize();
            case 3:
              return _context4.abrupt("return", _context4.sent);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function initWithDimensions(_x7, _x8, _x9, _x10) {
        return _initWithDimensions.apply(this, arguments);
      }
      return initWithDimensions;
    }()
  }, {
    key: "initWithImage",
    value: function () {
      var _initWithImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(image, cameraParam, internalLuma) {
        var width, height, arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              width = image.videoWidth || image.width;
              height = image.videoHeight || image.height;
              arControllerNFT = new ARControllerNFT(width, height, cameraParam, internalLuma);
              _context5.next = 5;
              return arControllerNFT._initialize();
            case 5:
              return _context5.abrupt("return", _context5.sent);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function initWithImage(_x11, _x12, _x13) {
        return _initWithImage.apply(this, arguments);
      }
      return initWithImage;
    }()
  }, {
    key: "customInit",
    value: function () {
      var _customInit = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee6(width, height, cameraParam, internalLuma, callback) {
        var arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              arControllerNFT = new ARControllerNFT(width, height, cameraParam, internalLuma);
              callback();
              _context6.next = 4;
              return arControllerNFT._initialize();
            case 4:
              return _context6.abrupt("return", _context6.sent);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function customInit(_x14, _x15, _x16, _x17, _x18) {
        return _customInit.apply(this, arguments);
      }
      return customInit;
    }()
  }]);
}();

/***/ }),

/***/ "./src/ARToolkitNFT_td.ts":
/*!********************************!*\
  !*** ./src/ARToolkitNFT_td.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARToolkitNFT: () => (/* binding */ ARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _factoryFunctions_initARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./factoryFunctions/initARToolkitNFT_td */ "./src/factoryFunctions/initARToolkitNFT_td.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../package.json */ "./package.json");








var version = _package_json__WEBPACK_IMPORTED_MODULE_7__.version;
var UNKNOWN_MARKER = -1;
var NFT_MARKER = 0;
var ARToolkitNFT = /*#__PURE__*/function () {
  function ARToolkitNFT() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ARToolkitNFT);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "instance", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "markerNFTCount", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraCount", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "version", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "NFTMarkerInfo", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "FS", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "StringList", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkers", void 0);
    this.instance;
    this.markerNFTCount = 0;
    this.cameraCount = 0;
    this.version = version;
    console.info("ARToolkitNFT ", this.version);
  }
  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ARToolkitNFT, [{
    key: "init",
    value: function () {
      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee() {
        var instance;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0,_factoryFunctions_initARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_5__.initARToolkitNFT)();
            case 2:
              instance = _context.sent;
              this.instance = new instance.ARToolKitNFT();
              this.FS = instance.FS;
              this.StringList = instance.StringList;
              this.nftMarkers = instance.nftMarkers;
              ARToolkitNFT.ERROR_MARKER_INDEX_OUT_OF_BOUNDS = instance.ERROR_MARKER_INDEX_OUT_OF_BOUNDS;
              ARToolkitNFT.AR_DEBUG_DISABLE = instance.AR_DEBUG_DISABLE;
              ARToolkitNFT.AR_DEBUG_ENABLE = instance.AR_DEBUG_ENABLE;
              ARToolkitNFT.AR_DEFAULT_DEBUG_MODE = instance.AR_DEFAULT_DEBUG_MODE;
              ARToolkitNFT.AR_DEFAULT_LABELING_THRESH = instance.AR_DEFAULT_LABELING_THRESH;
              ARToolkitNFT.AR_IMAGE_PROC_FRAME_IMAGE = instance.AR_IMAGE_PROC_FRAME_IMAGE;
              ARToolkitNFT.AR_IMAGE_PROC_FIELD_IMAGE = instance.AR_IMAGE_PROC_FIELD_IMAGE;
              ARToolkitNFT.AR_DEFAULT_IMAGE_PROC_MODE = instance.AR_DEFAULT_IMAGE_PROC_MODE;
              ARToolkitNFT.AR_MAX_LOOP_COUNT = instance.AR_MAX_LOOP_COUNT;
              ARToolkitNFT.AR_LOOP_BREAK_THRESH = instance.AR_LOOP_BREAK_THRESH;
              ARToolkitNFT.AR_LOG_LEVEL_DEBUG = instance.AR_LOG_LEVEL_DEBUG;
              ARToolkitNFT.AR_LOG_LEVEL_INFO = instance.AR_LOG_LEVEL_INFO;
              ARToolkitNFT.AR_LOG_LEVEL_WARN = instance.AR_LOG_LEVEL_WARN;
              ARToolkitNFT.AR_LOG_LEVEL_ERROR = instance.AR_LOG_LEVEL_ERROR;
              ARToolkitNFT.AR_LOG_LEVEL_REL_INFO = instance.AR_LOG_LEVEL_REL_INFO;
              ARToolkitNFT.AR_LABELING_THRESH_MODE_MANUAL = instance.AR_LABELING_THRESH_MODE_MANUAL;
              ARToolkitNFT.AR_LABELING_THRESH_MODE_AUTO_MEDIAN = instance.AR_LABELING_THRESH_MODE_AUTO_MEDIAN;
              ARToolkitNFT.AR_LABELING_THRESH_MODE_AUTO_OTSU = instance.AR_LABELING_THRESH_MODE_AUTO_OTSU;
              ARToolkitNFT.AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE = instance.AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_NONE = instance.AR_MARKER_INFO_CUTOFF_PHASE_NONE;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_PATTERN_EXTRACTION = instance.AR_MARKER_INFO_CUTOFF_PHASE_PATTERN_EXTRACTION;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_GENERIC = instance.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_GENERIC;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONTRAST = instance.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONTRAST;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_NOT_FOUND = instance.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_NOT_FOUND;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_EDC_FAIL = instance.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_EDC_FAIL;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONFIDENCE = instance.AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONFIDENCE;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR = instance.AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR_MULTI = instance.AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR_MULTI;
              ARToolkitNFT.AR_MARKER_INFO_CUTOFF_PHASE_HEURISTIC_TROUBLESOME_MATRIX_CODES = instance.AR_MARKER_INFO_CUTOFF_PHASE_HEURISTIC_TROUBLESOME_MATRIX_CODES;
              return _context.abrupt("return", this);
            case 37:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "setup",
    value: function setup(width, height, cameraId) {
      return this.instance.setup(width, height, cameraId);
    }
  }, {
    key: "teardown",
    value: function teardown() {
      this.instance.teardown();
    }
  }, {
    key: "setupAR2",
    value: function setupAR2() {
      this.instance.setupAR2();
    }
  }, {
    key: "setDebugMode",
    value: function setDebugMode(mode) {
      return this.instance.setDebugMode(mode);
    }
  }, {
    key: "getDebugMode",
    value: function getDebugMode() {
      return this.instance.getDebugMode();
    }
  }, {
    key: "getProcessingImage",
    value: function getProcessingImage() {
      return this.instance.getProcessingImage();
    }
  }, {
    key: "detectNFTMarker",
    value: function detectNFTMarker() {
      return this.instance.detectNFTMarker();
    }
  }, {
    key: "getNFTMarker",
    value: function getNFTMarker(markerIndex) {
      return this.instance.getNFTMarker(markerIndex);
    }
  }, {
    key: "getNFTData",
    value: function getNFTData(index) {
      return this.instance.getNFTData(index);
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(mode) {
      return this.instance.setLogLevel(mode);
    }
  }, {
    key: "getLogLevel",
    value: function getLogLevel() {
      return this.instance.getLogLevel();
    }
  }, {
    key: "setProjectionNearPlane",
    value: function setProjectionNearPlane(value) {
      this.instance.setProjectionNearPlane(value);
    }
  }, {
    key: "getProjectionNearPlane",
    value: function getProjectionNearPlane() {
      return this.instance.getProjectionNearPlane();
    }
  }, {
    key: "setProjectionFarPlane",
    value: function setProjectionFarPlane(value) {
      this.instance.setProjectionFarPlane(value);
    }
  }, {
    key: "getProjectionFarPlane",
    value: function getProjectionFarPlane() {
      return this.instance.getProjectionFarPlane();
    }
  }, {
    key: "setThresholdMode",
    value: function setThresholdMode(mode) {
      return this.instance.setThresholdMode(mode);
    }
  }, {
    key: "getThresholdMode",
    value: function getThresholdMode() {
      return this.instance.getThresholdMode();
    }
  }, {
    key: "setThreshold",
    value: function setThreshold(threshold) {
      return this.instance.setThreshold(threshold);
    }
  }, {
    key: "getThreshold",
    value: function getThreshold() {
      return this.instance.getThreshold();
    }
  }, {
    key: "setImageProcMode",
    value: function setImageProcMode(mode) {
      return this.instance.setImageProcMode(mode);
    }
  }, {
    key: "getImageProcMode",
    value: function getImageProcMode() {
      return this.instance.getImageProcMode();
    }
  }, {
    key: "getCameraLens",
    value: function getCameraLens() {
      return this.instance.getCameraLens();
    }
  }, {
    key: "passVideoData",
    value: function passVideoData(videoFrame, videoLuma, lumaInternal) {
      this.instance.passVideoData(videoFrame, videoLuma, lumaInternal);
    }
  }, {
    key: "loadCamera",
    value: function () {
      var _loadCamera = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData) {
        var target, data;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              target = "/camera_param_" + this.cameraCount++;
              if (!(urlOrData instanceof Uint8Array)) {
                _context2.next = 5;
                break;
              }
              data = urlOrData;
              _context2.next = 14;
              break;
            case 5:
              _context2.prev = 5;
              _context2.next = 8;
              return _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].fetchRemoteData(urlOrData);
            case 8:
              data = _context2.sent;
              _context2.next = 14;
              break;
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](5);
              throw new Error("Error in loadCamera function: ", _context2.t0);
            case 14:
              _Utils__WEBPACK_IMPORTED_MODULE_6__["default"]._storeDataFile(data, target, this);
              return _context2.abrupt("return", this.instance._loadCamera(target));
            case 16:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[5, 11]]);
      }));
      function loadCamera(_x) {
        return _loadCamera.apply(this, arguments);
      }
      return loadCamera;
    }()
  }, {
    key: "addNFTMarkers",
    value: function addNFTMarkers(urls, callback, onError2) {
      var _this = this;
      var prefixes = [];
      var pending = urls.length * 3;
      var onSuccess = function onSuccess(filename) {
        pending -= 1;
        if (pending === 0) {
          var vec = new _this.StringList();
          var markerIds = [];
          for (var i = 0; i < prefixes.length; i++) {
            vec.push_back(prefixes[i]);
          }
          var ret = _this.instance._addNFTMarkers(vec);
          for (var _i = 0; _i < ret.size(); _i++) {
            markerIds.push(ret.get(_i));
          }
          console.log("add nft marker ids: ", markerIds);
          if (callback) callback(markerIds);
        }
      };
      var onError = function onError(filename, errorNumber) {
        console.log("failed to load: ", filename);
        onError2(errorNumber);
      };
      var loadZFT = function loadZFT(prefix) {
        var marker_num = prefix.substring(11);
        var prefixTemp = "/tempMarkerNFT_" + marker_num;
        var response = _this.instance._decompressZFT(prefix, prefixTemp);
        var contentIsetUint8 = _this.FS.readFile(prefixTemp + ".iset");
        var contentFsetUint8 = _this.FS.readFile(prefixTemp + ".fset");
        var contentFset3Uint8 = _this.FS.readFile(prefixTemp + ".fset3");
        _this.FS.unlink(prefixTemp + ".iset");
        _this.FS.unlink(prefixTemp + ".fset");
        _this.FS.unlink(prefixTemp + ".fset3");
        var hexStrIset = _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].Uint8ArrayToStr(contentIsetUint8);
        var hexStrFset = _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].Uint8ArrayToStr(contentFsetUint8);
        var hexStrFset3 = _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].Uint8ArrayToStr(contentFset3Uint8);
        var contentIset = new Uint8Array(hexStrIset.match(/.{1,2}/g).map(function (_byte) {
          return parseInt(_byte, 16);
        }));
        var contentFset = new Uint8Array(hexStrFset.match(/.{1,2}/g).map(function (_byte2) {
          return parseInt(_byte2, 16);
        }));
        var contentFset3 = new Uint8Array(hexStrFset3.match(/.{1,2}/g).map(function (_byte3) {
          return parseInt(_byte3, 16);
        }));
        _Utils__WEBPACK_IMPORTED_MODULE_6__["default"]._storeDataFile(contentFset, prefix + ".fset", _this);
        _Utils__WEBPACK_IMPORTED_MODULE_6__["default"]._storeDataFile(contentIset, prefix + ".iset", _this);
        _Utils__WEBPACK_IMPORTED_MODULE_6__["default"]._storeDataFile(contentFset3, prefix + ".fset3", _this);
        onSuccess(contentFset);
      };
      var onSuccessZFT = function onSuccessZFT() {
        loadZFT(arguments[1]);
      };
      var Ids = [];
      urls.forEach(function (element, index) {
        var prefix = "/markerNFT_" + _this.markerNFTCount;
        prefixes.push(prefix);
        if (Array.isArray(element)) {
          element.forEach(function (url) {
            var filename = prefix + "." + url.split(".").pop();
            _this.ajax(url, filename, onSuccess.bind(filename), onError.bind(filename), prefix);
          });
          _this.markerNFTCount += 1;
        } else {
          var filename1 = prefix + ".fset";
          var filename2 = prefix + ".iset";
          var filename3 = prefix + ".fset3";
          var filename4 = prefix + ".zft";
          var type = _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].checkZFT(element + ".zft");
          if (type) {
            pending -= 2;
            _this.ajax(element + ".zft", filename4, onSuccessZFT.bind(filename4), onError.bind(filename4), prefix);
          } else {
            _this.ajax(element + ".fset", filename1, onSuccess.bind(filename1), onError.bind(filename1), prefix);
            _this.ajax(element + ".iset", filename2, onSuccess.bind(filename2), onError.bind(filename2), prefix);
            _this.ajax(element + ".fset3", filename3, onSuccess.bind(filename3), onError.bind(filename3), prefix);
          }
          _this.markerNFTCount += 1;
        }
        Ids.push(index);
      });
      return Ids;
    }
  }, {
    key: "ajax",
    value: function ajax(url, target, callback, errorCallback, prefix) {
      var _this2 = this;
      var oReq = new XMLHttpRequest();
      oReq.open("GET", url, true);
      oReq.responseType = "arraybuffer";
      var writeByteArrayToFS = function writeByteArrayToFS(target, byteArray, callback, prefix) {
        _Utils__WEBPACK_IMPORTED_MODULE_6__["default"]._storeDataFile(byteArray, target, _this2);
        callback(byteArray, prefix);
      };
      oReq.onload = function () {
        if (this.status == 200) {
          var arrayBuffer = oReq.response;
          var byteArray = new Uint8Array(arrayBuffer);
          writeByteArrayToFS(target, byteArray, callback, prefix);
        } else {
          errorCallback(url, this.status);
        }
      };
      oReq.send();
    }
  }], [{
    key: "UNKNOWN_MARKER",
    get: function get() {
      return UNKNOWN_MARKER;
    }
  }, {
    key: "NFT_MARKER",
    get: function get() {
      return NFT_MARKER;
    }
  }]);
}();
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "ERROR_MARKER_INDEX_OUT_OF_BOUNDS", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_DEBUG_DISABLE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_DEBUG_ENABLE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_DEFAULT_DEBUG_MODE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_DEFAULT_LABELING_THRESH", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_IMAGE_PROC_FRAME_IMAGE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_IMAGE_PROC_FIELD_IMAGE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_DEFAULT_IMAGE_PROC_MODE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MAX_LOOP_COUNT", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LOOP_BREAK_THRESH", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LOG_LEVEL_DEBUG", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LOG_LEVEL_INFO", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LOG_LEVEL_WARN", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LOG_LEVEL_ERROR", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LOG_LEVEL_REL_INFO", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LABELING_THRESH_MODE_MANUAL", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LABELING_THRESH_MODE_AUTO_MEDIAN", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LABELING_THRESH_MODE_AUTO_OTSU", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_NONE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_PATTERN_EXTRACTION", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_MATCH_GENERIC", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONTRAST", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_NOT_FOUND", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_EDC_FAIL", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONFIDENCE", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR_MULTI", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(ARToolkitNFT, "AR_MARKER_INFO_CUTOFF_PHASE_HEURISTIC_TROUBLESOME_MATRIX_CODES", void 0);

/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Utils)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");





var Utils = /*#__PURE__*/function () {
  function Utils() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, Utils);
  }
  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Utils, null, [{
    key: "fetchRemoteData",
    value: function () {
      var _fetchRemoteData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(url) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return axios__WEBPACK_IMPORTED_MODULE_4__["default"].get(url, {
                responseType: "arraybuffer"
              });
            case 3:
              response = _context.sent;
              return _context.abrupt("return", new Uint8Array(response.data));
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              throw new Error("Error in Utils.fetchRemoteData: ", _context.t0);
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 7]]);
      }));
      function fetchRemoteData(_x) {
        return _fetchRemoteData.apply(this, arguments);
      }
      return fetchRemoteData;
    }()
  }, {
    key: "fetchRemoteDataCallback",
    value: function () {
      var _fetchRemoteDataCallback = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(url, callback) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return axios__WEBPACK_IMPORTED_MODULE_4__["default"].get(url, {
                responseType: "arraybuffer"
              }).then(function (response) {
                var data = new Uint8Array(response.data);
                callback(response);
              });
            case 3:
              response = _context2.sent;
              return _context2.abrupt("return", response);
            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              throw new Error("Error in Utils.fetchRemoteDataCallback: ", _context2.t0);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 7]]);
      }));
      function fetchRemoteDataCallback(_x2, _x3) {
        return _fetchRemoteDataCallback.apply(this, arguments);
      }
      return fetchRemoteDataCallback;
    }()
  }, {
    key: "string2Uint8Data",
    value: function string2Uint8Data(string) {
      var data = new Uint8Array(string.length);
      for (var i = 0; i < data.length; i++) {
        data[i] = string.charCodeAt(i) & 0xff;
      }
      return data;
    }
  }, {
    key: "Uint8ArrayToStr",
    value: function Uint8ArrayToStr(array) {
      var out, i, len, c;
      var char2, char3;
      out = "";
      len = array.length;
      i = 0;
      while (i < len) {
        c = array[i++];
        switch (c >> 4) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            out += String.fromCharCode(c);
            break;
          case 12:
          case 13:
            char2 = array[i++];
            out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);
            break;
          case 14:
            char2 = array[i++];
            char3 = array[i++];
            out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);
            break;
        }
      }
      return out;
    }
  }, {
    key: "checkZFT",
    value: function checkZFT(url) {
      var request = new XMLHttpRequest();
      request.open("GET", url, false);
      request.send(null);
      if (request.status === 200) {
        return true;
      } else if (request.status === 404) {
        return false;
      }
      return false;
    }
  }, {
    key: "_storeDataFile",
    value: function _storeDataFile(data, target, instance) {
      instance.FS.writeFile(target, data, {
        encoding: "binary"
      });
    }
  }]);
}();


/***/ }),

/***/ "./src/factoryFunctions/initARToolkitNFT_td.ts":
/*!*****************************************************!*\
  !*** ./src/factoryFunctions/initARToolkitNFT_td.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initARToolkitNFT: () => (/* binding */ initARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _build_artoolkitNFT_ES6_wasm_td__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../build/artoolkitNFT_ES6_wasm_td */ "./build/artoolkitNFT_ES6_wasm_td.js");



function initARToolkitNFT() {
  return _initARToolkitNFT.apply(this, arguments);
}
function _initARToolkitNFT() {
  _initARToolkitNFT = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0,_build_artoolkitNFT_ES6_wasm_td__WEBPACK_IMPORTED_MODULE_2__["default"])();
        case 2:
          return _context.abrupt("return", _context.sent);
        case 3:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _initARToolkitNFT.apply(this, arguments);
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*************************!*\
  !*** ./src/index_td.ts ***!
  \*************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARControllerNFT: () => (/* reexport safe */ _ARControllerNFT_td__WEBPACK_IMPORTED_MODULE_1__.ARControllerNFT),
/* harmony export */   ARToolkitNFT: () => (/* reexport safe */ _ARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_0__.ARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _ARToolkitNFT_td__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ARToolkitNFT_td */ "./src/ARToolkitNFT_td.ts");
/* harmony import */ var _ARControllerNFT_td__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ARControllerNFT_td */ "./src/ARControllerNFT_td.ts");



})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFX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QVEsQ0FBQyxDQUFDLENBQUM7TUFDOUJDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRCxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQzlCQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0QsUUFBUSxDQUFDLENBQUMsQ0FBQztNQUM5QkMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdELFFBQVEsQ0FBQyxDQUFDLENBQUM7TUFDOUJDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRCxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQzlCQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0QsUUFBUSxDQUFDLENBQUMsQ0FBQztNQUM5QkMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdELFFBQVEsQ0FBQyxDQUFDLENBQUM7TUFDOUJDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRCxRQUFRLENBQUMsRUFBRSxDQUFDO01BQy9CQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0QsUUFBUSxDQUFDLEVBQUUsQ0FBQztNQUMvQkMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUN0QkEsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUN0QkEsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUN0QkEsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUV0QixJQUFJQyxLQUFLLElBQUlDLFNBQVMsSUFBSUQsS0FBSyxLQUFLLEdBQUcsRUFBRTtRQUN2Q0QsS0FBSyxDQUFD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O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsaUNBQWlDLFdBQVc7V0FDNUM7V0FDQTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNkJpRDtBQUNNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL2J1aWxkL2FydG9vbGtpdE5GVF9FUzZfd2FzbV90ZC5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZS5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdHJhY2tTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9jb21tb24vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL3NyYy9BUkNvbnRyb2xsZXJORlRfdGQudHMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL3NyYy9BUlRvb2xraXRORlRfdGQudHMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC8uL3NyYy9VdGlscy50cyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vc3JjL2ZhY3RvcnlGdW5jdGlvbnMvaW5pdEFSVG9vbGtpdE5GVF90ZC50cyIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQHdlYmFya2l0L2pzYXJ0b29sa2l0LW5mdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Ad2ViYXJraXQvanNhcnRvb2xraXQtbmZ0Ly4vc3JjL2luZGV4X3RkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgKCkgPT4ge1xucmV0dXJuICIsIlxudmFyIE1vZHVsZSA9ICgoKSA9PiB7XG4gIHZhciBfc2NyaXB0TmFtZSA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQ/LnNyYyA6IHVuZGVmaW5lZDtcbiAgXG4gIHJldHVybiAoXG5mdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICB2YXIgbW9kdWxlUnRuO1xuXG52YXIgTW9kdWxlPW1vZHVsZUFyZzt2YXIgcmVhZHlQcm9taXNlUmVzb2x2ZSxyZWFkeVByb21pc2VSZWplY3Q7dmFyIHJlYWR5UHJvbWlzZT1uZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpPT57cmVhZHlQcm9taXNlUmVzb2x2ZT1yZXNvbHZlO3JlYWR5UHJvbWlzZVJlamVjdD1yZWplY3R9KTt2YXIgRU5WSVJPTk1FTlRfSVNfV0VCPXR5cGVvZiB3aW5kb3c9PVwib2JqZWN0XCI7dmFyIEVOVklST05NRU5UX0lTX1dPUktFUj10eXBlb2YgaW1wb3J0U2NyaXB0cz09XCJmdW5jdGlvblwiO3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09XCJzdHJpbmdcIiYmcHJvY2Vzcy50eXBlIT1cInJlbmRlcmVyXCI7dmFyIEVOVklST05NRU5UX0lTX1BUSFJFQUQ9RU5WSVJPTk1FTlRfSVNfV09SS0VSJiZzZWxmLm5hbWU/LnN0YXJ0c1dpdGgoXCJlbS1wdGhyZWFkXCIpO3ZhciBtb2R1bGVPdmVycmlkZXM9T2JqZWN0LmFzc2lnbih7fSxNb2R1bGUpO3ZhciBhcmd1bWVudHNfPVtdO3ZhciB0aGlzUHJvZ3JhbT1cIi4vdGhpcy5wcm9ncmFtXCI7dmFyIHF1aXRfPShzdGF0dXMsdG9UaHJvdyk9Pnt0aHJvdyB0b1Rocm93fTt2YXIgc2NyaXB0RGlyZWN0b3J5PVwiXCI7dmFyIHJlYWRBc3luYyxyZWFkQmluYXJ5O2lmKEVOVklST05NRU5UX0lTX1dFQnx8RU5WSVJPTk1FTlRfSVNfV09SS0VSKXtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3NjcmlwdERpcmVjdG9yeT1zZWxmLmxvY2F0aW9uLmhyZWZ9ZWxzZSBpZih0eXBlb2YgZG9jdW1lbnQhPVwidW5kZWZpbmVkXCImJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQpe3NjcmlwdERpcmVjdG9yeT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31pZihfc2NyaXB0TmFtZSl7c2NyaXB0RGlyZWN0b3J5PV9zY3JpcHROYW1lfWlmKHNjcmlwdERpcmVjdG9yeS5zdGFydHNXaXRoKFwiYmxvYjpcIikpe3NjcmlwdERpcmVjdG9yeT1cIlwifWVsc2V7c2NyaXB0RGlyZWN0b3J5PXNjcmlwdERpcmVjdG9yeS5zdWJzdHIoMCxzY3JpcHREaXJlY3RvcnkucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSl9e2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7cmVhZEJpbmFyeT11cmw9Pnt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCxmYWxzZSk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7eGhyLnNlbmQobnVsbCk7cmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZSl9fXJlYWRBc3luYz11cmw9PmZldGNoKHVybCx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihyZXNwb25zZT0+e2lmKHJlc3BvbnNlLm9rKXtyZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKX1yZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cytcIiA6IFwiK3Jlc3BvbnNlLnVybCkpfSl9fWVsc2V7fXZhciBvdXQ9TW9kdWxlW1wicHJpbnRcIl18fGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7dmFyIGVycj1Nb2R1bGVbXCJwcmludEVyclwiXXx8Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO09iamVjdC5hc3NpZ24oTW9kdWxlLG1vZHVsZU92ZXJyaWRlcyk7bW9kdWxlT3ZlcnJpZGVzPW51bGw7aWYoTW9kdWxlW1wiYXJndW1lbnRzXCJdKWFyZ3VtZW50c189TW9kdWxlW1wiYXJndW1lbnRzXCJdO2lmKE1vZHVsZVtcInRoaXNQcm9ncmFtXCJdKXRoaXNQcm9ncmFtPU1vZHVsZVtcInRoaXNQcm9ncmFtXCJdO3ZhciB3YXNtQmluYXJ5PU1vZHVsZVtcIndhc21CaW5hcnlcIl07ZnVuY3Rpb24gaW50QXJyYXlGcm9tQmFzZTY0KHMpe3ZhciBkZWNvZGVkPWF0b2Iocyk7dmFyIGJ5dGVzPW5ldyBVaW50OEFycmF5KGRlY29kZWQubGVuZ3RoKTtmb3IodmFyIGk9MDtpPGRlY29kZWQubGVuZ3RoOysraSl7Ynl0ZXNbaV09ZGVjb2RlZC5jaGFyQ29kZUF0KGkpfXJldHVybiBieXRlc31mdW5jdGlvbiB0cnlQYXJzZUFzRGF0YVVSSShmaWxlbmFtZSl7aWYoIWlzRGF0YVVSSShmaWxlbmFtZSkpe3JldHVybn1yZXR1cm4gaW50QXJyYXlGcm9tQmFzZTY0KGZpbGVuYW1lLnNsaWNlKGRhdGFVUklQcmVmaXgubGVuZ3RoKSl9dmFyIHdhc21NZW1vcnk7dmFyIHdhc21Nb2R1bGU7dmFyIEFCT1JUPWZhbHNlO3ZhciBFWElUU1RBVFVTO3ZhciBIRUFQOCxIRUFQVTgsSEVBUDE2LEhFQVBVMTYsSEVBUDMyLEhFQVBVMzIsSEVBUEYzMixIRUFQRjY0O2Z1bmN0aW9uIHVwZGF0ZU1lbW9yeVZpZXdzKCl7dmFyIGI9d2FzbU1lbW9yeS5idWZmZXI7TW9kdWxlW1wiSEVBUDhcIl09SEVBUDg9bmV3IEludDhBcnJheShiKTtNb2R1bGVbXCJIRUFQMTZcIl09SEVBUDE2PW5ldyBJbnQxNkFycmF5KGIpO01vZHVsZVtcIkhFQVBVOFwiXT1IRUFQVTg9bmV3IFVpbnQ4QXJyYXkoYik7TW9kdWxlW1wiSEVBUFUxNlwiXT1IRUFQVTE2PW5ldyBVaW50MTZBcnJheShiKTtNb2R1bGVbXCJIRUFQMzJcIl09SEVBUDMyPW5ldyBJbnQzMkFycmF5KGIpO01vZHVsZVtcIkhFQVBVMzJcIl09SEVBUFUzMj1uZXcgVWludDMyQXJyYXkoYik7TW9kdWxlW1wiSEVBUEYzMlwiXT1IRUFQRjMyPW5ldyBGbG9hdDMyQXJyYXkoYik7TW9kdWxlW1wiSEVBUEY2NFwiXT1IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoYil9aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7dmFyIHdhc21Qcm9taXNlUmVzb2x2ZTt2YXIgd2FzbVByb21pc2VSZWplY3Q7dmFyIGluaXRpYWxpemVkSlM9ZmFsc2U7ZnVuY3Rpb24gdGhyZWFkUHJpbnRFcnIoLi4uYXJncyl7dmFyIHRleHQ9YXJncy5qb2luKFwiIFwiKTtjb25zb2xlLmVycm9yKHRleHQpfWlmKCFNb2R1bGVbXCJwcmludEVyclwiXSllcnI9dGhyZWFkUHJpbnRFcnI7ZnVuY3Rpb24gdGhyZWFkQWxlcnQoLi4uYXJncyl7dmFyIHRleHQ9YXJncy5qb2luKFwiIFwiKTtwb3N0TWVzc2FnZSh7Y21kOlwiYWxlcnRcIix0ZXh0LHRocmVhZElkOl9wdGhyZWFkX3NlbGYoKX0pfXNlbGYuYWxlcnQ9dGhyZWFkQWxlcnQ7TW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdPShpbmZvLHJlY2VpdmVJbnN0YW5jZSk9Pm5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9Pnt3YXNtUHJvbWlzZVJlc29sdmU9bW9kdWxlPT57dmFyIGluc3RhbmNlPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsZ2V0V2FzbUltcG9ydHMoKSk7cmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKTtyZXNvbHZlKCl9O3dhc21Qcm9taXNlUmVqZWN0PXJlamVjdH0pO3NlbGYub251bmhhbmRsZWRyZWplY3Rpb249ZT0+e3Rocm93IGUucmVhc29ufHxlfTtmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGUpe3RyeXt2YXIgbXNnRGF0YT1lW1wiZGF0YVwiXTt2YXIgY21kPW1zZ0RhdGEuY21kO2lmKGNtZD09PVwibG9hZFwiKXtsZXQgbWVzc2FnZVF1ZXVlPVtdO3NlbGYub25tZXNzYWdlPWU9Pm1lc3NhZ2VRdWV1ZS5wdXNoKGUpO3NlbGYuc3RhcnRXb3JrZXI9aW5zdGFuY2U9Pntwb3N0TWVzc2FnZSh7Y21kOlwibG9hZGVkXCJ9KTtmb3IobGV0IG1zZyBvZiBtZXNzYWdlUXVldWUpe2hhbmRsZU1lc3NhZ2UobXNnKX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlfTtmb3IoY29uc3QgaGFuZGxlciBvZiBtc2dEYXRhLmhhbmRsZXJzKXtpZighTW9kdWxlW2hhbmRsZXJdfHxNb2R1bGVbaGFuZGxlcl0ucHJveHkpe01vZHVsZVtoYW5kbGVyXT0oLi4uYXJncyk9Pntwb3N0TWVzc2FnZSh7Y21kOlwiY2FsbEhhbmRsZXJcIixoYW5kbGVyLGFyZ3N9KX07aWYoaGFuZGxlcj09XCJwcmludFwiKW91dD1Nb2R1bGVbaGFuZGxlcl07aWYoaGFuZGxlcj09XCJwcmludEVyclwiKWVycj1Nb2R1bGVbaGFuZGxlcl19fXdhc21NZW1vcnk9bXNnRGF0YS53YXNtTWVtb3J5O3VwZGF0ZU1lbW9yeVZpZXdzKCk7d2FzbVByb21pc2VSZXNvbHZlKG1zZ0RhdGEud2FzbU1vZHVsZSl9ZWxzZSBpZihjbWQ9PT1cInJ1blwiKXtlc3RhYmxpc2hTdGFja1NwYWNlKG1zZ0RhdGEucHRocmVhZF9wdHIpO19fZW1zY3JpcHRlbl90aHJlYWRfaW5pdChtc2dEYXRhLnB0aHJlYWRfcHRyLDAsMCwxLDAsMCk7UFRocmVhZC5yZWNlaXZlT2JqZWN0VHJhbnNmZXIobXNnRGF0YSk7UFRocmVhZC50aHJlYWRJbml0VExTKCk7X19lbXNjcmlwdGVuX3RocmVhZF9tYWlsYm94X2F3YWl0KG1zZ0RhdGEucHRocmVhZF9wdHIpO2lmKCFpbml0aWFsaXplZEpTKXtfX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzKCk7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtpbnZva2VFbnRyeVBvaW50KG1zZ0RhdGEuc3RhcnRfcm91dGluZSxtc2dEYXRhLmFyZyl9Y2F0Y2goZXgpe2lmKGV4IT1cInVud2luZFwiKXt0aHJvdyBleH19fWVsc2UgaWYobXNnRGF0YS50YXJnZXQ9PT1cInNldGltbWVkaWF0ZVwiKXt9ZWxzZSBpZihjbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtjaGVja01haWxib3goKX19ZWxzZSBpZihjbWQpe2Vycihgd29ya2VyOiByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgJHtjbWR9YCk7ZXJyKG1zZ0RhdGEpfX1jYXRjaChleCl7X19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkKCk7dGhyb3cgZXh9fXNlbGYub25tZXNzYWdlPWhhbmRsZU1lc3NhZ2V9aWYoIUVOVklST05NRU5UX0lTX1BUSFJFQUQpe2lmKE1vZHVsZVtcIndhc21NZW1vcnlcIl0pe3dhc21NZW1vcnk9TW9kdWxlW1wid2FzbU1lbW9yeVwiXX1lbHNle3ZhciBJTklUSUFMX01FTU9SWT1Nb2R1bGVbXCJJTklUSUFMX01FTU9SWVwiXXx8MTM0MjE3NzI4O3dhc21NZW1vcnk9bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDpJTklUSUFMX01FTU9SWS82NTUzNixtYXhpbXVtOklOSVRJQUxfTUVNT1JZLzY1NTM2LHNoYXJlZDp0cnVlfSl9dXBkYXRlTWVtb3J5Vmlld3MoKX12YXIgX19BVFBSRVJVTl9fPVtdO3ZhciBfX0FUSU5JVF9fPVtdO3ZhciBfX0FUUE9TVFJVTl9fPVtdO3ZhciBydW50aW1lSW5pdGlhbGl6ZWQ9ZmFsc2U7ZnVuY3Rpb24gcHJlUnVuKCl7dmFyIHByZVJ1bnM9TW9kdWxlW1wicHJlUnVuXCJdO2lmKHByZVJ1bnMpe2lmKHR5cGVvZiBwcmVSdW5zPT1cImZ1bmN0aW9uXCIpcHJlUnVucz1bcHJlUnVuc107cHJlUnVucy5mb3JFYWNoKGFkZE9uUHJlUnVuKX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUFJFUlVOX18pfWZ1bmN0aW9uIGluaXRSdW50aW1lKCl7cnVudGltZUluaXRpYWxpemVkPXRydWU7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm47aWYoIU1vZHVsZVtcIm5vRlNJbml0XCJdJiYhRlMuaW5pdGlhbGl6ZWQpRlMuaW5pdCgpO0ZTLmlnbm9yZVBlcm1pc3Npb25zPWZhbHNlO1RUWS5pbml0KCk7Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVElOSVRfXyl9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuO3ZhciBwb3N0UnVucz1Nb2R1bGVbXCJwb3N0UnVuXCJdO2lmKHBvc3RSdW5zKXtpZih0eXBlb2YgcG9zdFJ1bnM9PVwiZnVuY3Rpb25cIilwb3N0UnVucz1bcG9zdFJ1bnNdO3Bvc3RSdW5zLmZvckVhY2goYWRkT25Qb3N0UnVuKX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKX1mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uSW5pdChjYil7X19BVElOSVRfXy51bnNoaWZ0KGNiKX1mdW5jdGlvbiBhZGRPblBvc3RSdW4oY2Ipe19fQVRQT1NUUlVOX18udW5zaGlmdChjYil9dmFyIHJ1bkRlcGVuZGVuY2llcz0wO3ZhciBydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsO3ZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtmdW5jdGlvbiBnZXRVbmlxdWVSdW5EZXBlbmRlbmN5KGlkKXtyZXR1cm4gaWR9ZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzKys7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXT8uKHJ1bkRlcGVuZGVuY2llcyl9ZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzLS07TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXT8uKHJ1bkRlcGVuZGVuY2llcyk7aWYocnVuRGVwZW5kZW5jaWVzPT0wKXtpZihydW5EZXBlbmRlbmN5V2F0Y2hlciE9PW51bGwpe2NsZWFySW50ZXJ2YWwocnVuRGVwZW5kZW5jeVdhdGNoZXIpO3J1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGx9aWYoZGVwZW5kZW5jaWVzRnVsZmlsbGVkKXt2YXIgY2FsbGJhY2s9ZGVwZW5kZW5jaWVzRnVsZmlsbGVkO2RlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2NhbGxiYWNrKCl9fX1mdW5jdGlvbiBhYm9ydCh3aGF0KXtNb2R1bGVbXCJvbkFib3J0XCJdPy4od2hhdCk7d2hhdD1cIkFib3J0ZWQoXCIrd2hhdCtcIilcIjtlcnIod2hhdCk7QUJPUlQ9dHJ1ZTt3aGF0Kz1cIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIjt2YXIgZT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpO3JlYWR5UHJvbWlzZVJlamVjdChlKTt0aHJvdyBlfXZhciBkYXRhVVJJUHJlZml4PVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO3ZhciBpc0RhdGFVUkk9ZmlsZW5hbWU9PmZpbGVuYW1lLnN0YXJ0c1dpdGgoZGF0YVVSSVByZWZpeCk7ZnVuY3Rpb24gZmluZFdhc21CaW5hcnkoKXt2YXIgZj1cImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxBR0Z6YlFFQUFBQUJvQVZWWUFGL0FYOWdBWDhBWUFKL2Z3QmdBbjkvQVg5Z0EzOS9md0YvWUFOL2YzOEFZQVYvZjM5L2Z3QmdCSDkvZjM4QVlBUi9mMzkvQVg5Z0JuOS9mMzkvZndGL1lBVi9mMzkvZndGL1lBQUFZQVovZjM5L2YzOEFZQWQvZjM5L2YzOS9BR0FJZjM5L2YzOS9mMzhCZjJBQUFYOWdCMzkvZjM5L2YzOEJmMkFGZjM1K2ZuNEFZQUY5QVgxZ0EzOStmd0YrWUFKL2ZBQmdCWDkvZjM5K0FYOWdDbjkvZjM5L2YzOS9mMzhBWUFOL2YzOEJmV0FLZjM5L2YzOS9mMzkvZndGL1lBRi9BWHhnQlg5L2YzOS9BWHhnQkg5K2ZuOEFZQWgvZjM5L2YzOS9md0JnQm45L2YzOStmZ0YvWUFkL2YzOS9mMzUrQVg5Z0FBRjhZQU4vZjN3QVlBTi9mMzhCZkdBQmZ3RjlZQUY4QVgxZ0EzOS9mUUJnQW54L0FYeGdCWDk5Zlg5L0FYOWdCbjkvZlgxL2Z3Ri9ZQXgvZjM5L2YzOS9mMzkvZjM4QmYyQURmMzkvQVg1Z0JIOS9mMzhCZm1BRmYzOStmMzhBWUFaL2ZIOS9mMzhCZjJBQmZ3RitZQVovZjM5L2ZuOEJmMkFQZjM5L2YzOS9mMzkvZjM5L2YzOS9BR0FMZjM5L2YzOS9mMzkvZjM4QmYyQUZmMzkvZjN3QmYyQU5mMzkvZjM5L2YzOS9mMzkvZndCZ0EzOTlmUUY5WUFWL2ZYMS9md0Y5WUFKL2ZnQmdBbjE5QVgxZ0JINStmbjRCZjJBRWYzOS9mUUJnQW41L0FYOWdBWDBCZjJBRGYzOThBWDlnQTN4OGZ3RjhZQUo4ZkFGOFlBZC9mMzkvZjM5OUFYMWdCMzkvZjM5L2YzOEJmV0FEZjM5OUFYMWdBMzkrZndCZ0FuNStBWHhnQkg5L2YzNEJmbUFDZm40QmZXQURmbjUrQVg5Z0EzOS9mZ0JnQW45L0FYNWdCSDkrZm40QVlBVi9mMzE5ZndGL1lBSi9mUUY5WUFKOWZ3Ri9ZQUo4ZndGL1lBSi9md0Y5WUFOL2YzMEJmMkFGZjM5L2ZYMEFZQVovZkh4L2YzOEFZQVovZjM5L2YzMEFZQVIvZjM1K0FHQUNmMzhCZkdBSmYzOS9mMzkvZjM5L0FYOEN4d05JQVdFQllnQVdBV0VCWXdBRkFXRUJaQUFCQVdFQlpRQUdBV0VCWmdBRkFXRUJad0FEQVdFQmFBQWZBV0VCYVFBQ0FXRUJhZ0FNQVdFQmF3QXlBV0VCYkFBR0FXRUJiUUFGQVdFQmJnQUVBV0VCYndBYUFXRUJjQUFDQVdFQmNRQUZBV0VCY2dBQUFXRUJjd0FJQVdFQmRBQUVBV0VCZFFBZkFXRUJkZ0FDQVdFQmR3QUZBV0VCZUFBREFXRUJlUUFnQVdFQmVnQUVBV0VCUVFBSUFXRUJRZ0FFQVdFQlF3QUZBV0VCUkFBRkFXRUJSUUFLQVdFQlJnQU5BV0VCUndBTEFXRUJTQUFBQVdFQlNRQUNBV0VCU2dBUEFXRUJTd0FQQVdFQlRBQUFBV0VCVFFBRUFXRUJUZ0FCQVdFQlR3QUhBV0VCVUFBSUFXRUJVUUFMQVdFQlVnQWFBV0VCVXdBSEFXRUJWQUFCQVdFQlZRQUJBV0VCVmdBREFXRUJWd0FEQVdFQldBQUlBV0VCV1FBRUFXRUJXZ0FJQVdFQlh3QUxBV0VCSkFBQkFXRUNZV0VBQ3dGaEFtSmhBQUVCWVFKallRQUhBV0VDWkdFQUFnRmhBbVZoQUFFQllRSm1ZUUFCQVdFQ1oyRUFBQUZoQW1oaEFDRUJZUUpwWVFBREFXRUNhbUVBRmdGaEFtdGhBQXdCWVFKc1lRQUJBV0VDYldFQUFRRmhBbTVoQUFjQllRSnZZUUFCQVdFQ2NHRUFEd0ZoQW5GaEFBOEJZUUp5WVFBQkFXRUJZUUlEZ0JDQUVBT0RDb0VLQXdFQkF3QUFBQWNEQkFNQ0F3RUFBRE1MRHdBREFnQURBQU1EQVFJQ0FRQTBJZzhSQkFBSUFBTUFCUUFCQkFzQ0JRZ0FBQVFDQkFFQUFBQURBQUVBRVFVQUFBY0NBQUliQmdBQkFRc0NBQUVEQXdJQUFnQUNDZ01SQ2dBQ0F3RUJGd0lEQWdRQUFBSUNBZ0lGQkFRQUJRZ0VBZ0lCQXdNMUl5TUFDQVFBQlJRQUpBTUNDZ29IQUFNQkFUWUtBZ0VYQWdNT0RnQURBQWNFQkFzSUpRQUFBQUFCQlFBQUFnSUNDUXNKQWdNREFCczNDQVFEQlFRQkJRSW1PQ1FDQUFBREFnRUlBaGdBR0FBQUF3QUNBQUFFQXdJTEFEa0VBZ0k2QWdzQ0FnQUFCUU1EQlFNQ0JRQURBZ0VBQWdnREF3QUlBd0VCQVFRU0FBQUFKd0U3UEQwRVBqOERBUWdBRkFVQUF3SURBUVVEQVFvREJBY0RFRUFERUFJQ0FBRUZBd1VPQWdJQUF3QURBUUFEQWdJRkF3TUFBZzBDQWdFREFBRUNBUUVCQkFBUEFSa0FCQVZCQXdNTUF3Y0RCQUVEQUFRQ0F3SUZDUUlDQVF3TUNBWURIQUFBQUFFQ0NBRUNBQUFBQUFJQ0FSd0FBUUVFQWlnR0NBUW9CZ2NCQWdBQ0FnRUNBQVVCQWdFQUFnZ0JBQUVBQTBJUkJRb0RRd01LQUFZQkR3QUJBUXNMQVFNREFRRUFBQklNQWdJSEFBa0JEd0FBQXdFQ0FpWUdCd01EQndVQUFnSUJBQU1EQVF3RkJ3TUZBZ0lGS1FBQUFBQUFBZ1FBQWdBREFBTUdBQTBCQkEwTkNRSUVCeUVYS2dnSkNDb0lBd0lBQlFBQ0NBRUNBQUFBQUFNREF3RUFBQU1EQXdFQUFRQUZBZ1VEQUFRQUFBTUNBd01BQWdVSEJRY0REZ01BQlFJQUFBQURBUUFBQUFFQUFBY0JLd1FBQVFBREF3TUVBRVFBQWdJUlJRQUJDd1JHQWtjSEVSdElDQWNBRUNVQUFRQUFBd01TQVFjQUJRQURCUU1DQUFNQUFRVUxBUUVCQXdNQkFnRUJBQUFBQ3dNQkVnQXRTUUluQzBvQkxRY1NTMHdLRWcwSEFRRUJDQWdJRndBSkJ3QUREd0VCQVFFRUFRRUxBUUFBQlFFQ0NBTUtDd0VDQXdJQ0FRSUNDd0lJQWdnQUFRSUVBUUlBQVFJRkNRQUNBQUVDQVFFQkFrMGlBUmdGQVU1UFVGRVFCdzRDREFJQkFnRUVBZzhCQkFNQ0FnY0ZBZ0lBQWdFQ0FnTUFBZ01DQndRSUNDNEpMZ2tEVWdBREJ3QUJBd01jQlFVREFDa0RBUUFGQVFBQ0FBSUJCUUFBQlFRRkFBRUVBQUFLRGdBT0NnNE9BQW9PQUFFREF3RUJBQUVDQVFJQUJBSUVMeFlFTHhZREFBQUdBZ0l3QWdBQUJRSXdBZ0lDREFJR0RBd0dEQXdBQkEwQkN6RVZDaFVLQ2dBS0hRQXhGUW9WQ2dvSkNRa0pDUWtKQ1FrSkNRa0pDUWtKQ1FrRUJ3b0VCd29EQkFJREFBQUNBd1FDQXdBQUFnRUJCQUFFQVFRQUJBRUNCQVFDTEFzQUV3OEJBUUVDQVFNQkdnSUJBUUVCQVFzQUJBUVRDdzhIQVFBSEJ3SUJCd2NIQndjREFnRUVDUWtCQ2dvQkJnWUdCZ1lHQmdZR0JnWUdCZ1lHQmdZR0JnWUdCZ1lHQmdZR0JnWUdCZ1lHQmdFQ0FRSUJCd2NIQndjQkRRME5EUUlOQncwSEFRRUJCd2NIQWdNREFBTUJBUU1EQVFNREF3TUJBUU1EQXdNREFRRUdCZ1lHQmdZR0JnWUFBUUFBQUFNQUFRRUJBQUlDQkFBQUF3RUZDd0FDQkFBRVV5QUVDQW9EQ2dRRUJBZ0VCd01JQkFjRkNBUUhCUVVERHdRRkFBVUFCQVVBQkFVRkFnRUFEd0VBQ0FBQ0FBQURBQUlBQWhrVUdSUUFBZ0FGQkFJREJRQUZDQUVEQVFNTEF3RUJBQUVZVkJBTkNnOEFBUXdCQUFBQURBd01CZ1lHQkFjSEJ3UUVBUUFCQVFBQkFBRUFBUUFCQUFFQUFRQUJBQUVBQVFBQkFBRUFBUUFCQUFJQ0FnSUNBZ0FBQVFFQUNnQUtEZzRCQ2dvRUNBUURCQU1CQ2dRSUJBTUVBd2dJQ0FRQkFRd01DUjRKSGhBUUVCQVFFQTRKQ1FrSkNRNEpDUWtKQ1FvZEJBY0JjQUdSQlpFRkJqOE1md0ZCZ0o4SkMzOEJRUUFMZndGQkFBdC9BVUVBQzM4QlFRQUxmd0ZCQUF0L0FVRUFDMzhCUVFBTGZ3RkJBQXQvQVVFQUMzOEJRU1FMZndGQktBc0hqZ0VZQW5OaEFKZ0hBblJoQUUwQ2RXRUFTQUoyWVFFQUFuZGhBT0VIQW5oaEFQMElBbmxoQVB3SUFucGhBUFlIQWtGaEFOY0pBa0poQVBVSEFrTmhBT2tIQWtSaEFPUUhBa1ZoQU9NSEFrWmhBTjRIQWtkaEFQOEVBa2hoQU5rSEFrbGhBTllKQWtwaEFOVUpBa3RoQU5RSkFreGhBTk1KQWsxaEFOSUpBazVoQU5FSkFrOWhBTkFKQWxCaEFNOEpDQUxKQ1FuOUNRRUFRUUVMa0FXUENma0gwQVhTQ1BvSVR2c0k5UWo1Q1BjSStBajJDSU1JdkFia0FiOEd6QW1XQk5nSmx3VHFDYzRKelFua0FXTExDY29KWW1LbUFjZ0pZbUxIQ2NZSllxWUI5Z1gyQmZBRnF3bXFDYWtKOWdQRENjRUp3Z243QmNBSnJBbS9DY1FKdmdtOUNic0p1Z201Q2JnSnR3bTJDYk1Kc2dtMUNiUUpyZ210Q2JFSnJ3bXdDYWdKcHduMEE2WUpwUW04Q2FRSm93bWlDZTBGOUFPRUJJRUV4d0doQ2FBSm53bnRCZlFEOHdXZUNaMEpuQW1iQ1pRRGt3T0xDWW9KaVFtSUNZY0poZ21GQ1lRSjRRV0RDWUlKZ1FtYUNXS1pDWmdKbEFPWENaWUprd09WQ1pRSmxBT1RDWklKa3dPUkNaQUpsQVBoQlk0Smt3T05DWXdKeFFtQUNmOEkvZ2pkQmFZQjdnajBDUE1JOGdqeENOa0Y4QWp2Q08wSTdBanJDT29JNlFpbUFlZ0k1d2ptQ09VSTVBampDT0lJNFFqZ0NOOElwUWltQ0tjSXFBaXBDS29JcXdpakNLSUlvUWlnQ0o4SW5naWRDSndJbXdpYUNKa0ltQWlYQ0pZSWxRaVVDSk1Ja2dpUkNKQUlqd2lPQ0kwSXBBaXNDSzBJcmdpbUFkNEkzUWpjQ05zSTJnalpDTmdJMXdqV0NOVUkxQWpUQ05FSTBBalBDTTRJelFqTUNNc0lpQUhLQ01rSXlBakhDTVlJeFFqRUNNTUl3Z2pCQ01BSXZ3aStDTDBJdkFpN0NMb0l1UWk0Q0xjSXRnaTFDTFFJc3dpeUNMRUlzQWl2Q0l3STd3T0xDSW9JaVFpSUNJY0l6UVhNQllZSXhRS0ZDS1lCaEFpQ0NJRUlnQWovQi80SC9RZjhCL3NIK2dlbUFmZ0g5d2YwQi9NSDhnZnhCKzhIN2dlNkF1MEhxQVhzQjZjRjZ3Zm1CK29INkFlbUFlSUgvQUdJQWVBSDNRZmNCOXNIMmdmU0E5Z0g4QUx6QlBJRThBU0lBWWdCMXdmMkE5WUg3d0xWQis4QzdnTFJBKzhFN1FUckFzOEQ2Z1RwQk13RDFBZndBdk1FOGdUd0JJZ0JpQUhUQi9ZRDBnZnZBdEVIN3dMdUF0RUQ3d1R0Qk9zQ3p3UHFCT2tFOWdUMUJQWUU5UVNSQXRBSHp3ZkpCTTRIelFmTUI4c0h5UVRLQjhRRXlRZklCOE1FeHdmR0I4VUh4QWZEQk1NSHhBVENCOEVIU0tZQnBnR21BYVlCNlFhRkNvTUtnUXIvQ2YwSit3bjVDZmNKOVFuekNmRUo3d250Q2VzSjdnYXRDcXdLNkFhZ0NwOEtuZ3FkQ3B3SytRU2JDcG9LbVFyekJwY0tsZ3FWQ3BRS2t3cUlBWklLa1FyZEJwQUtqZ3FOQ293S2lncUlDdHdHandxaUI1OEhpd3FKQ29jSzVBRmlZcXNLcWdxcENxZ0twd3FtQ3FVS3BBcjVCS01Lb2dxaENtTG5CdWNHMWdLYUJKb0VtQXFhQkdMa0J1TUcxZ0tJQVlnQjRnYW1BMkxrQnVNRzFnS0lBWWdCNGdhbUEyTGhCdDhHMWdLSUFZZ0IzZ2FtQTJMaEJ0OEcxZ0tJQVlnQjNnYW1BK1FCWXNBSHZ3ZStCK1FCWXIwSHZBZTdCMks2QjdrSHVBZTNCNjhFcndTMkI3VUh0QWV6QjdJSFlyRUhzQWV2QjY0SHB3U25CSzBIckFlckI2b0hxUWRpcUFlbkI2WUhwUWVrQjZNSG9RZWdCMktlQjUwSG5BZWJCNW9IbVFmSENzWUs1QUZpbEFmRkNzUUt3d3JDQ3NFS3dBcUdDb0lLL2dueUNlNEorZ24yQ2VRQllwUUh2d3ErQ3IwS3ZBcTdDcm9LaEFxQUN2d0o4QW5zQ2ZnSjlBbVZCTm9HdVFxVkJOb0d1QXBpcndPdkE3b0J1Z0c2QVlvSGlBSHVBZTRCWXE4RHJ3TzZBYm9CdWdHS0I0Z0I3Z0h1QVdLdUE2NER1Z0c2QWJvQmlRZUlBZTRCN2dGaXJnT3VBN29CdWdHNkFZa0hpQUh1QWU0QllyY0t0Z3BpdFFxMENtS3pDcklLWXJFS3NBcGk5QWF2Q3ZBQ1l2UUdyZ3J3QXVnSmt3SGtBV0ttQWFZQjV3bGk1Z25jQ2Q4SjVRbGkzUW5nQ2VRSll0NEo0UW5qQ1dMaUNXTGFDV0xaQ1dMYkNZa0U2UW1KQklrRURBRWNDb3Y1RjRFSzVnSUJDMzhnQVJDREFTRUdJd0JCRUdzaUNpUUFBa0FnQ2tFSWFpQUFFT29DSWdzdEFBQkJBVWNOQUNBQUlBQW9BZ0JCREdzb0FnQnFJZ01vQWhnaEFpQUJJQVpxSWdZZ0FTQURLQUlFUWJBQmNVRWdSaHNoQ1NBREtBSk1JZ1JCZjBZRVFDQURJQU5CSUJDZUJTSUVOZ0pNQ3lBRXdDRU1RUUFoQkNNQVFSQnJJZ2NrQUFKQUlBSkZEUUFnQXlnQ0RDRUZJQWtnQVdzaUNFRUFTZ1JBSUFJZ0FTQUlJQUlvQWdBb0FqQVJCQUFnQ0VjTkFRc2dCU0FHSUFGcklnRnJRUUFnQVNBRlNCc2lBVUVBU2dSQUlBZEJCR29pQlNBQklBd1F4QVlnQWlBSEtBSUVJQVVnQnl3QUQwRUFTQnNnQVNBQ0tBSUFLQUl3RVFRQUlRZ2dCUkJNR2lBQklBaEhEUUVMSUFZZ0NXc2lBVUVBU2dSQUlBSWdDU0FCSUFJb0FnQW9BakFSQkFBZ0FVY05BUXNnQTBFQU5nSU1JQUloQkFzZ0IwRVFhaVFBSUFRTkFDQUFJQUFvQWdCQkRHc29BZ0JxUVFVUW9RVUxJQXNRcndJZ0NrRVFhaVFBSUFBTHNRd0JCMzhDUUNBQVJRMEFRY1Q5QkMwQUFFRUNjUVJBUWNqOUJCQndEUUVMSUFCQkNHc2lBeUFBUVFScktBSUFJZ0pCZUhFaUFHb2hCUUpBQWtBZ0FrRUJjUTBBSUFKQkFuRkZEUUVnQXlBREtBSUFJZ1JySWdOQm1Qb0VLQUlBU1EwQklBQWdCR29oQUFKQUFrQUNRRUdjK2dRb0FnQWdBMGNFUUNBREtBSU1JUUVnQkVIL0FVMEVRQ0FCSUFNb0FnZ2lBa2NOQWtHSStnUkJpUG9FS0FJQVFYNGdCRUVEZG5keE5nSUFEQVVMSUFNb0FoZ2hCaUFCSUFOSEJFQWdBeWdDQ0NJQ0lBRTJBZ3dnQVNBQ05nSUlEQVFMSUFNb0FoUWlBZ1IvSUFOQkZHb0ZJQU1vQWhBaUFrVU5BeUFEUVJCcUN5RUVBMEFnQkNFSElBSWlBVUVVYWlFRUlBRW9BaFFpQWcwQUlBRkJFR29oQkNBQktBSVFJZ0lOQUFzZ0IwRUFOZ0lBREFNTElBVW9BZ1FpQWtFRGNVRURSdzBEUVpENkJDQUFOZ0lBSUFVZ0FrRitjVFlDQkNBRElBQkJBWEkyQWdRZ0JTQUFOZ0lBREFRTElBSWdBVFlDRENBQklBSTJBZ2dNQWd0QkFDRUJDeUFHUlEwQUFrQWdBeWdDSENJRVFRSjBRYmo4QkdvaUFpZ0NBQ0FEUmdSQUlBSWdBVFlDQUNBQkRRRkJqUG9FUVl6NkJDZ0NBRUYrSUFSM2NUWUNBQXdDQ3dKQUlBTWdCaWdDRUVZRVFDQUdJQUUyQWhBTUFRc2dCaUFCTmdJVUN5QUJSUTBCQ3lBQklBWTJBaGdnQXlnQ0VDSUNCRUFnQVNBQ05nSVFJQUlnQVRZQ0dBc2dBeWdDRkNJQ1JRMEFJQUVnQWpZQ0ZDQUNJQUUyQWhnTElBTWdCVThOQUNBRktBSUVJZ1JCQVhGRkRRQUNRQUpBQWtBQ1FDQUVRUUp4UlFSQVFhRDZCQ2dDQUNBRlJnUkFRYUQ2QkNBRE5nSUFRWlQ2QkVHVStnUW9BZ0FnQUdvaUFEWUNBQ0FESUFCQkFYSTJBZ1FnQTBHYytnUW9BZ0JIRFFaQmtQb0VRUUEyQWdCQm5Qb0VRUUEyQWdBTUJndEJuUG9FS0FJQUlBVkdCRUJCblBvRUlBTTJBZ0JCa1BvRVFaRDZCQ2dDQUNBQWFpSUFOZ0lBSUFNZ0FFRUJjallDQkNBQUlBTnFJQUEyQWdBTUJnc2dCRUY0Y1NBQWFpRUFJQVVvQWd3aEFTQUVRZjhCVFFSQUlBVW9BZ2dpQWlBQlJnUkFRWWo2QkVHSStnUW9BZ0JCZmlBRVFRTjJkM0UyQWdBTUJRc2dBaUFCTmdJTUlBRWdBallDQ0F3RUN5QUZLQUlZSVFZZ0FTQUZSd1JBSUFVb0FnZ2lBaUFCTmdJTUlBRWdBallDQ0F3REN5QUZLQUlVSWdJRWZ5QUZRUlJxQlNBRktBSVFJZ0pGRFFJZ0JVRVFhZ3NoQkFOQUlBUWhCeUFDSWdGQkZHb2hCQ0FCS0FJVUlnSU5BQ0FCUVJCcUlRUWdBU2dDRUNJQ0RRQUxJQWRCQURZQ0FBd0NDeUFGSUFSQmZuRTJBZ1FnQXlBQVFRRnlOZ0lFSUFBZ0Eyb2dBRFlDQUF3REMwRUFJUUVMSUFaRkRRQUNRQ0FGS0FJY0lnUkJBblJCdVB3RWFpSUNLQUlBSUFWR0JFQWdBaUFCTmdJQUlBRU5BVUdNK2dSQmpQb0VLQUlBUVg0Z0JIZHhOZ0lBREFJTEFrQWdCU0FHS0FJUVJnUkFJQVlnQVRZQ0VBd0JDeUFHSUFFMkFoUUxJQUZGRFFFTElBRWdCallDR0NBRktBSVFJZ0lFUUNBQklBSTJBaEFnQWlBQk5nSVlDeUFGS0FJVUlnSkZEUUFnQVNBQ05nSVVJQUlnQVRZQ0dBc2dBeUFBUVFGeU5nSUVJQUFnQTJvZ0FEWUNBQ0FEUVp6NkJDZ0NBRWNOQUVHUStnUWdBRFlDQUF3QkN5QUFRZjhCVFFSQUlBQkJlSEZCc1BvRWFpRUNBbjlCaVBvRUtBSUFJZ1JCQVNBQVFRTjJkQ0lBY1VVRVFFR0krZ1FnQUNBRWNqWUNBQ0FDREFFTElBSW9BZ2dMSVFBZ0FpQUROZ0lJSUFBZ0F6WUNEQ0FESUFJMkFnd2dBeUFBTmdJSURBRUxRUjhoQVNBQVFmLy8vd2ROQkVBZ0FFRW1JQUJCQ0habklnSnJka0VCY1NBQ1FRRjBhMEUrYWlFQkN5QURJQUUyQWh3Z0EwSUFOd0lRSUFGQkFuUkJ1UHdFYWlFRUFuOENRQUovUVl6NkJDZ0NBQ0lIUVFFZ0FYUWlBbkZGQkVCQmpQb0VJQUlnQjNJMkFnQWdCQ0FETmdJQVFSZ2hBVUVJREFFTElBQkJHU0FCUVFGMmEwRUFJQUZCSDBjYmRDRUJJQVFvQWdBaEJBTkFJQVFpQWlnQ0JFRjRjU0FBUmcwQ0lBRkJIWFloQkNBQlFRRjBJUUVnQWlBRVFRUnhhaUlIS0FJUUlnUU5BQXNnQnlBRE5nSVFRUmdoQVNBQ0lRUkJDQXNoQUNBRElnSU1BUXNnQWlnQ0NDSUVJQU0yQWd3Z0FpQUROZ0lJUVJnaEFFRUlJUUZCQUFzaEJ5QUJJQU5xSUFRMkFnQWdBeUFDTmdJTUlBQWdBMm9nQnpZQ0FFR28rZ1JCcVBvRUtBSUFRUUZySWdCQmZ5QUFHellDQUF0QnhQMEVMUUFBUVFKeFJRMEFRY2o5QkJCc0dnc0xlZ0VEZnlBQUlBQW9BZ0JCREdzb0FnQnFRUW9RbmdVaEF5TUFRUkJySWdFa0FDQUJRUWhxSWdJZ0FCRHFBaG9DUUNBQ0xRQUFSUTBBSUFGQkJHb2dBQkRvQkNJQ0lBTVF6UU1nQWhEcEFrVU5BQ0FBSUFBb0FnQkJER3NvQWdCcVFRRVFzUUlMSUFGQkNHb1Fyd0lnQVVFUWFpUUFJQUFRN1FJTGhBSUJDWDhqQUVFUWF5SURKQUFnQTBFSWFpQUFFT29DR2dKQUlBTXRBQWhGRFFBZ0FDQUFLQUlBUVF4cktBSUFhaUlDS0FJRUdpQURRUVJxSWdRZ0FoQmNJQVJCMUk4RkVMMEJJUVVnQkJCVUlBTWdBQkRvQkNFSUFrQkJmeUFBSUFBb0FnQkJER3NvQWdCcUlna2lBaWdDVEJDcEFVVUVRQ0FDS0FKTUlRSU1BUXNnQWlNQVFSQnJJZ1lrQUNBR1FReHFJZ2NnQWhCY0lBY1FsUUZCSUJDQ0FTRUNJQWNRVkNBR1FSQnFKQUFnQWpZQ1RBc2dBc0FoQWlBRElBVWdDQ2dDQUNBSklBSWdBU0FGS0FJQUtBSVFFUW9BTmdJRUlBUVE2UUpGRFFBZ0FDQUFLQUlBUVF4cktBSUFha0VGRUxFQ0N5QURRUWhxRUs4Q0lBTkJFR29rQUNBQUN4VUFJQUFRakFFRVFDQUFLQUlFRHdzZ0FCRDFBUXNjQVFGL0lBQVFqQUVFUUNBQUtBSUFJQUFRemdFYUVPSUNDeUFBQzR3cEFRbC9RZkQ1QkNnQ0FFVUVRQkNFQlFzQ1FFSEUvUVF0QUFCQkFuRUVRRUhJL1FRUWNBMEJDd0pBQWtBZ0FFSDBBVTBFUUVHSStnUW9BZ0FpQWtFUUlBQkJDMnBCK0FOeElBQkJDMGtiSWdWQkEzWWlBSFlpQVVFRGNRUkFBa0FnQVVGL2MwRUJjU0FBYWlJQlFRTjBJZ0JCc1BvRWFpSUZJQUJCdVBvRWFpZ0NBQ0lBS0FJSUlnTkdCRUJCaVBvRUlBSkJmaUFCZDNFMkFnQU1BUXNnQXlBRk5nSU1JQVVnQXpZQ0NBc2dBRUVJYWlFRUlBQWdBVUVEZENJQlFRTnlOZ0lFSUFBZ0FXb2lBQ0FBS0FJRVFRRnlOZ0lFREFNTElBVkJrUG9FS0FJQUlnTk5EUUVnQVFSQUFrQkJBaUFBZENJRVFRQWdCR3R5SUFFZ0FIUnhhQ0lCUVFOMElnQkJzUG9FYWlJRUlBQkJ1UG9FYWlnQ0FDSUFLQUlJSWdaR0JFQkJpUG9FSUFKQmZpQUJkM0VpQWpZQ0FBd0JDeUFHSUFRMkFnd2dCQ0FHTmdJSUN5QUFJQVZCQTNJMkFnUWdBQ0FGYWlJSElBRkJBM1FpQVNBRmF5SUdRUUZ5TmdJRUlBQWdBV29nQmpZQ0FDQURCRUFnQTBGNGNVR3crZ1JxSVFGQm5Qb0VLQUlBSVFVQ2Z5QUNRUUVnQTBFRGRuUWlBM0ZGQkVCQmlQb0VJQUlnQTNJMkFnQWdBUXdCQ3lBQktBSUlDeUVDSUFFZ0JUWUNDQ0FDSUFVMkFnd2dCU0FCTmdJTUlBVWdBallDQ0FzZ0FFRUlhaUVFUVp6NkJDQUhOZ0lBUVpENkJDQUdOZ0lBREFNTFFZejZCQ2dDQUVVTkFRSi9RWXo2QkNnQ0FDSUlhRUVDZEVHNC9BUnFLQUlBSWdJb0FnUkJlSEVnQldzaEJpQUNJUUFEUUFKQUlBQW9BaEFpQVVVRVFDQUFLQUlVSWdGRkRRRUxJQUVvQWdSQmVIRWdCV3NpQUNBR0lBQWdCa2tpQUJzaEJpQUJJQUlnQUJzaEFpQUJJUUFNQVFzTFFRQWdCVVVOQUJvZ0FpZ0NHQ0VIQWtBZ0FpQUNLQUlNSWdGSEJFQWdBaWdDQ0NJQUlBRTJBZ3dnQVNBQU5nSUlEQUVMQWtBZ0FpZ0NGQ0lBQkg4Z0FrRVVhZ1VnQWlnQ0VDSUFSUTBCSUFKQkVHb0xJUU1EUUNBRElRUWdBQ0lCUVJScUlRTWdBQ2dDRkNJQURRQWdBVUVRYWlFRElBRW9BaEFpQUEwQUN5QUVRUUEyQWdBTUFRdEJBQ0VCQ3dKQUlBZEZEUUFDUUNBQ0tBSWNJZ0JCQW5SQnVQd0VhaUlES0FJQUlBSkdCRUFnQXlBQk5nSUFJQUVOQVVHTStnUWdDRUYrSUFCM2NUWUNBQXdDQ3dKQUlBSWdCeWdDRUVZRVFDQUhJQUUyQWhBTUFRc2dCeUFCTmdJVUN5QUJSUTBCQ3lBQklBYzJBaGdnQWlnQ0VDSUFCRUFnQVNBQU5nSVFJQUFnQVRZQ0dBc2dBaWdDRkNJQVJRMEFJQUVnQURZQ0ZDQUFJQUUyQWhnTEFrQWdCa0VQVFFSQUlBSWdCU0FHYWlJQVFRTnlOZ0lFSUFBZ0Ftb2lBQ0FBS0FJRVFRRnlOZ0lFREFFTElBSWdCVUVEY2pZQ0JDQUNJQVZxSWdNZ0JrRUJjallDQkNBRElBWnFJQVkyQWdCQmtQb0VLQUlBSWdRRVFDQUVRWGh4UWJENkJHb2hBRUdjK2dRb0FnQWhBUUovUVlqNkJDZ0NBQ0lIUVFFZ0JFRURkblFpQkhGRkJFQkJpUG9FSUFRZ0IzSTJBZ0FnQUF3QkN5QUFLQUlJQ3lFRUlBQWdBVFlDQ0NBRUlBRTJBZ3dnQVNBQU5nSU1JQUVnQkRZQ0NBdEJuUG9FSUFNMkFnQkJrUG9FSUFZMkFnQUxJQUpCQ0dvTElnUU5BZ3dCQzBGL0lRVWdBRUcvZjBzTkFDQUFRUXRxSWdGQmVIRWhCVUdNK2dRb0FnQWlCMFVOQUVFZklRaEJBQ0FGYXlFRUlBQkI5UC8vQjAwRVFDQUZRU1lnQVVFSWRtY2lBR3QyUVFGeElBQkJBWFJyUVQ1cUlRZ0xBa0FDUUFKQUlBaEJBblJCdVB3RWFpZ0NBQ0lCUlFSQVFRQWhBQXdCQzBFQUlRQWdCVUVaSUFoQkFYWnJRUUFnQ0VFZlJ4dDBJUUlEUUFKQUlBRW9BZ1JCZUhFZ0JXc2lCaUFFVHcwQUlBRWhBeUFHSWdRTkFFRUFJUVFnQVNFQURBTUxJQUFnQVNnQ0ZDSUdJQVlnQVNBQ1FSMTJRUVJ4YWlnQ0VDSUJSaHNnQUNBR0d5RUFJQUpCQVhRaEFpQUJEUUFMQ3lBQUlBTnlSUVJBUVFBaEEwRUNJQWgwSWdCQkFDQUFhM0lnQjNFaUFFVU5BeUFBYUVFQ2RFRzQvQVJxS0FJQUlRQUxJQUJGRFFFTEEwQWdBQ2dDQkVGNGNTQUZheUlDSUFSSklRRWdBaUFFSUFFYklRUWdBQ0FESUFFYklRTWdBQ2dDRUNJQkJIOGdBUVVnQUNnQ0ZBc2lBQTBBQ3dzZ0EwVU5BQ0FFUVpENkJDZ0NBQ0FGYTA4TkFDQURLQUlZSVFnQ1FDQURJQU1vQWd3aUFFY0VRQ0FES0FJSUlnRWdBRFlDRENBQUlBRTJBZ2dNQVFzQ1FDQURLQUlVSWdFRWZ5QURRUlJxQlNBREtBSVFJZ0ZGRFFFZ0EwRVFhZ3NoQWdOQUlBSWhCaUFCSWdCQkZHb2hBaUFBS0FJVUlnRU5BQ0FBUVJCcUlRSWdBQ2dDRUNJQkRRQUxJQVpCQURZQ0FBd0JDMEVBSVFBTEFrQWdDRVVOQUFKQUlBTW9BaHdpQVVFQ2RFRzQvQVJxSWdJb0FnQWdBMFlFUUNBQ0lBQTJBZ0FnQUEwQlFZejZCQ0FIUVg0Z0FYZHhJZ2MyQWdBTUFnc0NRQ0FESUFnb0FoQkdCRUFnQ0NBQU5nSVFEQUVMSUFnZ0FEWUNGQXNnQUVVTkFRc2dBQ0FJTmdJWUlBTW9BaEFpQVFSQUlBQWdBVFlDRUNBQklBQTJBaGdMSUFNb0FoUWlBVVVOQUNBQUlBRTJBaFFnQVNBQU5nSVlDd0pBSUFSQkQwMEVRQ0FESUFRZ0JXb2lBRUVEY2pZQ0JDQUFJQU5xSWdBZ0FDZ0NCRUVCY2pZQ0JBd0JDeUFESUFWQkEzSTJBZ1FnQXlBRmFpSUNJQVJCQVhJMkFnUWdBaUFFYWlBRU5nSUFJQVJCL3dGTkJFQWdCRUY0Y1VHdytnUnFJUUFDZjBHSStnUW9BZ0FpQVVFQklBUkJBM1owSWdWeFJRUkFRWWo2QkNBQklBVnlOZ0lBSUFBTUFRc2dBQ2dDQ0FzaEFTQUFJQUkyQWdnZ0FTQUNOZ0lNSUFJZ0FEWUNEQ0FDSUFFMkFnZ01BUXRCSHlFQUlBUkIvLy8vQjAwRVFDQUVRU1lnQkVFSWRtY2lBR3QyUVFGeElBQkJBWFJyUVQ1cUlRQUxJQUlnQURZQ0hDQUNRZ0EzQWhBZ0FFRUNkRUc0L0FScUlRRUNRQUpBSUFkQkFTQUFkQ0lGY1VVRVFFR00rZ1FnQlNBSGNqWUNBQ0FCSUFJMkFnQU1BUXNnQkVFWklBQkJBWFpyUVFBZ0FFRWZSeHQwSVFBZ0FTZ0NBQ0VGQTBBZ0JTSUJLQUlFUVhoeElBUkdEUUlnQUVFZGRpRUZJQUJCQVhRaEFDQUJJQVZCQkhGcUlnWW9BaEFpQlEwQUN5QUdJQUkyQWhBTElBSWdBVFlDR0NBQ0lBSTJBZ3dnQWlBQ05nSUlEQUVMSUFFb0FnZ2lBQ0FDTmdJTUlBRWdBallDQ0NBQ1FRQTJBaGdnQWlBQk5nSU1JQUlnQURZQ0NBc2dBMEVJYWlFRURBRUxJQVZCa1BvRUtBSUFJZ05OQkVCQm5Qb0VLQUlBSVFBQ1FDQURJQVZySWdGQkVFOEVRQ0FBSUFWcUlnSWdBVUVCY2pZQ0JDQUFJQU5xSUFFMkFnQWdBQ0FGUVFOeU5nSUVEQUVMSUFBZ0EwRURjallDQkNBQUlBTnFJZ0VnQVNnQ0JFRUJjallDQkVFQUlRSkJBQ0VCQzBHUStnUWdBVFlDQUVHYytnUWdBallDQUNBQVFRaHFJUVFNQVFzZ0JVR1UrZ1FvQWdBaUFFa0VRRUdVK2dRZ0FDQUZheUlCTmdJQVFhRDZCRUdnK2dRb0FnQWlBQ0FGYWlJQ05nSUFJQUlnQVVFQmNqWUNCQ0FBSUFWQkEzSTJBZ1FnQUVFSWFpRUVEQUVMUVFBaEJFSHcrUVFvQWdCRkJFQVFoQVVMUWZqNUJDZ0NBQ0lBSUFWQkwyb2lCbXBCQUNBQWEzRWlBeUFGVFEwQVFjRDlCQ2dDQUNJQUJFQkJ1UDBFS0FJQUlnRWdBMm9pQWlBQlRTQUFJQUpKY2cwQkN3SkFBa0FDUUFKQVFjVDlCQzBBQUVFRWNVVUVRQUpBQWtBQ1FBSkFRYUQ2QkNnQ0FDSUJCRUJCNFAwRUlRQURRQ0FBS0FJQUlnSWdBVTBFUUNBQklBSWdBQ2dDQkdwSkRRTUxJQUFvQWdnaUFBMEFDd3RCK1AwRUVIQWFRUUFRbVFJaUFrRi9SZzBESUFNaEFVSDArUVFvQWdBaUFFRUJheUlFSUFKeEJFQWdBU0FDYXlBQ0lBUnFRUUFnQUd0eGFpRUJDeUFCSUFWTkRRTkJ3UDBFS0FJQUlnQUVRRUc0L1FRb0FnQWlCQ0FCYWlJSElBUk5JQUFnQjBseURRUUxJQUVRbVFJaUFDQUNSdzBCREFVTFFmajlCQkJ3R2tINCtRUW9BZ0FpQVNBR1FaVDZCQ2dDQUd0cVFRQWdBV3R4SWdFUW1RSWlBaUFBS0FJQUlBQW9BZ1JxUmcwQklBSWhBQXNnQUVGL1JnMEJJQVZCTUdvZ0FVc0VRRUg0K1FRb0FnQWlBaUFHSUFGcmFrRUFJQUpyY1NJQ0VKa0NRWDlHRFFJZ0FTQUNhaUVCQ3lBQUlRSU1Bd3NnQWtGL1J3MENDMEhFL1FSQnhQMEVLQUlBUVFSeU5nSUFRZmo5QkJCc0dndEIrUDBFRUhBYUlBTVFtUUloQWtFQUVKa0NJUUJCK1AwRUVHd2FJQUpCZjBZZ0FFRi9SbklnQUNBQ1RYSU5BaUFBSUFKcklnRWdCVUVvYWswTkFnd0JDMEg0L1FRUWJCb0xRYmo5QkVHNC9RUW9BZ0FnQVdvaUFEWUNBRUc4L1FRb0FnQWdBRWtFUUVHOC9RUWdBRFlDQUFzQ1FBSkFBa0JCb1BvRUtBSUFJZ1FFUUVIZy9RUWhBQU5BSUFJZ0FDZ0NBQ0lESUFBb0FnUWlCbXBHRFFJZ0FDZ0NDQ0lBRFFBTERBSUxRWmo2QkNnQ0FDSUFRUUFnQUNBQ1RSdEZCRUJCbVBvRUlBSTJBZ0FMUVFBaEFFSGsvUVFnQVRZQ0FFSGcvUVFnQWpZQ0FFR28rZ1JCZnpZQ0FFR3MrZ1JCOFBrRUtBSUFOZ0lBUWV6OUJFRUFOZ0lBQTBBZ0FFRURkQ0lEUWJqNkJHb2dBMEd3K2dScUlnUTJBZ0FnQTBHOCtnUnFJQVEyQWdBZ0FFRUJhaUlBUVNCSERRQUxRWlQ2QkNBQlFTaHJJZ0JCZUNBQ2EwRUhjU0lCYXlJRE5nSUFRYUQ2QkNBQklBSnFJZ0UyQWdBZ0FTQURRUUZ5TmdJRUlBQWdBbXBCS0RZQ0JFR2srZ1JCZ1BvRUtBSUFOZ0lBREFJTElBSWdCRTBnQXlBRVMzSU5BQ0FBS0FJTVFRaHhEUUFnQUNBQklBWnFOZ0lFUWFENkJDQUVRWGdnQkd0QkIzRWlBR29pQWpZQ0FFR1UrZ1JCbFBvRUtBSUFJQUZxSWdFZ0FHc2lBRFlDQUNBQ0lBQkJBWEkyQWdRZ0FTQUVha0VvTmdJRVFhVDZCRUdBK2dRb0FnQTJBZ0FNQVF0Qm1Qb0VLQUlBSUFKTEJFQkJtUG9FSUFJMkFnQUxJQUVnQW1vaEJrSGcvUVFoQUFKQUEwQWdCaUFBS0FJQUlnTkhCRUFnQUNnQ0NDSUFEUUVNQWdzTElBQXRBQXhCQ0hGRkRRTUxRZUQ5QkNFQUEwQUNRQ0FBS0FJQUlnTWdCRTBFUUNBRUlBTWdBQ2dDQkdvaUJra05BUXNnQUNnQ0NDRUFEQUVMQzBHVStnUWdBVUVvYXlJQVFYZ2dBbXRCQjNFaUEyc2lCellDQUVHZytnUWdBaUFEYWlJRE5nSUFJQU1nQjBFQmNqWUNCQ0FBSUFKcVFTZzJBZ1JCcFBvRVFZRDZCQ2dDQURZQ0FDQUVJQVpCSnlBR2EwRUhjV3BCTDJzaUFDQUFJQVJCRUdwSkd5SURRUnMyQWdRZ0EwSG8vUVFwQWdBM0FoQWdBMEhnL1FRcEFnQTNBZ2hCNlAwRUlBTkJDR28yQWdCQjVQMEVJQUUyQWdCQjRQMEVJQUkyQWdCQjdQMEVRUUEyQWdBZ0EwRVlhaUVBQTBBZ0FFRUhOZ0lFSUFCQkNHb2dBRUVFYWlFQUlBWkpEUUFMSUFNZ0JFWU5BQ0FESUFNb0FnUkJmbkUyQWdRZ0JDQURJQVJySWdKQkFYSTJBZ1FnQXlBQ05nSUFBbjhnQWtIL0FVMEVRQ0FDUVhoeFFiRDZCR29oQUFKL1FZajZCQ2dDQUNJQlFRRWdBa0VEZG5RaUFuRkZCRUJCaVBvRUlBRWdBbkkyQWdBZ0FBd0JDeUFBS0FJSUN5RUJJQUFnQkRZQ0NDQUJJQVEyQWd4QkNDRURRUXdNQVF0Qkh5RUFJQUpCLy8vL0IwMEVRQ0FDUVNZZ0FrRUlkbWNpQUd0MlFRRnhJQUJCQVhSclFUNXFJUUFMSUFRZ0FEWUNIQ0FFUWdBM0FoQWdBRUVDZEVHNC9BUnFJUUVDUUFKQVFZejZCQ2dDQUNJRFFRRWdBSFFpQm5GRkJFQkJqUG9FSUFNZ0JuSTJBZ0FnQVNBRU5nSUFEQUVMSUFKQkdTQUFRUUYyYTBFQUlBQkJIMGNiZENFQUlBRW9BZ0FoQXdOQUlBTWlBU2dDQkVGNGNTQUNSZzBDSUFCQkhYWWhBeUFBUVFGMElRQWdBU0FEUVFSeGFpSUdLQUlRSWdNTkFBc2dCaUFFTmdJUUN5QUVJQUUyQWhoQkRDRURJQVFpQVNFQVFRZ01BUXNnQVNnQ0NDSUFJQVEyQWd3Z0FTQUVOZ0lJSUFRZ0FEWUNDRUVBSVFCQkRDRURRUmdMSUFNZ0JHb2dBVFlDQUNBRWFpQUFOZ0lBQzBHVStnUW9BZ0FpQUNBRlRRMEFRWlQ2QkNBQUlBVnJJZ0UyQWdCQm9Qb0VRYUQ2QkNnQ0FDSUFJQVZxSWdJMkFnQWdBaUFCUVFGeU5nSUVJQUFnQlVFRGNqWUNCQ0FBUVFocUlRUU1BZ3NRV1VFd05nSUFRUUFoQkF3QkN5QUFJQUkyQWdBZ0FDQUFLQUlFSUFGcU5nSUVJQUpCZUNBQ2EwRUhjV29pQ0NBRlFRTnlOZ0lFSUFOQmVDQURhMEVIY1dvaUJDQUZJQWhxSWdOcklRWUNRRUdnK2dRb0FnQWdCRVlFUUVHZytnUWdBellDQUVHVStnUkJsUG9FS0FJQUlBWnFJZ0EyQWdBZ0F5QUFRUUZ5TmdJRURBRUxRWno2QkNnQ0FDQUVSZ1JBUVp6NkJDQUROZ0lBUVpENkJFR1ErZ1FvQWdBZ0Jtb2lBRFlDQUNBRElBQkJBWEkyQWdRZ0FDQURhaUFBTmdJQURBRUxJQVFvQWdRaUFFRURjVUVCUmdSQUlBQkJlSEVoQ1NBRUtBSU1JUUlDUUNBQVFmOEJUUVJBSUFRb0FnZ2lBU0FDUmdSQVFZajZCRUdJK2dRb0FnQkJmaUFBUVFOMmQzRTJBZ0FNQWdzZ0FTQUNOZ0lNSUFJZ0FUWUNDQXdCQ3lBRUtBSVlJUWNDUUNBQ0lBUkhCRUFnQkNnQ0NDSUFJQUkyQWd3Z0FpQUFOZ0lJREFFTEFrQWdCQ2dDRkNJQUJIOGdCRUVVYWdVZ0JDZ0NFQ0lBUlEwQklBUkJFR29MSVFFRFFDQUJJUVVnQUNJQ1FSUnFJUUVnQUNnQ0ZDSUFEUUFnQWtFUWFpRUJJQUlvQWhBaUFBMEFDeUFGUVFBMkFnQU1BUXRCQUNFQ0N5QUhSUTBBQWtBZ0JDZ0NIQ0lBUVFKMFFiajhCR29pQVNnQ0FDQUVSZ1JBSUFFZ0FqWUNBQ0FDRFFGQmpQb0VRWXo2QkNnQ0FFRitJQUIzY1RZQ0FBd0NDd0pBSUFRZ0J5Z0NFRVlFUUNBSElBSTJBaEFNQVFzZ0J5QUNOZ0lVQ3lBQ1JRMEJDeUFDSUFjMkFoZ2dCQ2dDRUNJQUJFQWdBaUFBTmdJUUlBQWdBallDR0FzZ0JDZ0NGQ0lBUlEwQUlBSWdBRFlDRkNBQUlBSTJBaGdMSUFZZ0NXb2hCaUFFSUFscUlnUW9BZ1FoQUFzZ0JDQUFRWDV4TmdJRUlBTWdCa0VCY2pZQ0JDQURJQVpxSUFZMkFnQWdCa0gvQVUwRVFDQUdRWGh4UWJENkJHb2hBQUovUVlqNkJDZ0NBQ0lCUVFFZ0JrRURkblFpQW5GRkJFQkJpUG9FSUFFZ0FuSTJBZ0FnQUF3QkN5QUFLQUlJQ3lFQklBQWdBellDQ0NBQklBTTJBZ3dnQXlBQU5nSU1JQU1nQVRZQ0NBd0JDMEVmSVFJZ0JrSC8vLzhIVFFSQUlBWkJKaUFHUVFoMlp5SUFhM1pCQVhFZ0FFRUJkR3RCUG1vaEFnc2dBeUFDTmdJY0lBTkNBRGNDRUNBQ1FRSjBRYmo4QkdvaEFBSkFBa0JCalBvRUtBSUFJZ0ZCQVNBQ2RDSUZjVVVFUUVHTStnUWdBU0FGY2pZQ0FDQUFJQU0yQWdBTUFRc2dCa0VaSUFKQkFYWnJRUUFnQWtFZlJ4dDBJUUlnQUNnQ0FDRUJBMEFnQVNJQUtBSUVRWGh4SUFaR0RRSWdBa0VkZGlFQklBSkJBWFFoQWlBQUlBRkJCSEZxSWdVb0FoQWlBUTBBQ3lBRklBTTJBaEFMSUFNZ0FEWUNHQ0FESUFNMkFnd2dBeUFETmdJSURBRUxJQUFvQWdnaUFTQUROZ0lNSUFBZ0F6WUNDQ0FEUVFBMkFoZ2dBeUFBTmdJTUlBTWdBVFlDQ0FzZ0NFRUlhaUVFQzBIRS9RUXRBQUJCQW5GRkRRQkJ5UDBFRUd3YUN5QUVDOG9EQVFWL0l3QkJFR3NpQUNRQUFrQWdBa1VOQUNBQlFhaklCQ2dDQUVnTkFDQUNMUUFBUlEwQUlBQWdBellDRENNQVFSQnJJZ1VrQUNBRklBTTJBZ3dDUUNBQ1JRMEFJQUZCcU1nRUtBSUFTQTBBSUFJdEFBQkZEUUFnQlNBRktBSU1JZ00yQWdoQkFFRUFJQUlnQXhENEFTSUdSUTBBSUFGQkEwMEVRQ0FCUVFKMFFmQ0tBV29vQWdBUWd3RkJBMm9oQkFzZ0JDQUdhaUlIUVFGcUlnZ1FUU0VESUFRRVFDQUZJQUZCQW5SQjhJb0JhaWdDQURZQ0FDQURJQVJCQVdwQmt5SWdCUkRpQVJvTElBTWdCR29nQmtFQmFpQUNJQVVvQWd3UStBRWFBa0FDUUVIQTVBUW9BZ0FpQWdSQVFjVGtCQ2dDQUVVTkFTTURRY2prQkNnQ0FFY0VRRUhNNUFRb0FnQWlCRVVOQTBHQUlFRUFRZERrQkMwQUFCc2lBa0hVNUFRb0FnQWlBVTBOQXlBQklBUnFJUVFnQWlBQmEwRUVheUFIVHdSQUlBUWdBeUFJRUpzQ0drSFU1QVFnQVNBSGFqWUNBQXdFQ3lBRVFhN2N1QUUyQUFCQjFPUUVJQUkyQWdBTUF3dEIxT1FFS0FJQVJRMEJRY3prQkNnQ0FDQUNFUUVBUWRUa0JFRUFOZ0lBUWNEa0JDZ0NBQ0VDREFFTElBRkJBMFlFUUNBREVFWU1BZ3NnQXhCQURBRUxJQU1nQWhFQkFBc2dBeEJJQ3lBRlFSQnFKQUFMSUFCQkVHb2tBQXZKQkFFSGZ3SkFJQUFvQXRRRElnUW9BaEFpQWtHQWdBSk9CRUFnQkNnQ0ZDRUREQUVMSUFRb0FoUWhBd05BSUFRZ0EwRUJheUlDTmdJVUFrQWdBMEVBU2dSQUlBSWhBd3dCQzBFQUlRVWdBQ2dDdUFORkJFQUNRQ0FBS0FJWUlnSW9BZ1FOQUNBQUlBSW9BZ3dSQUFBTkFDQUFLQUlBSWdOQkdUWUNGQ0FBSUFNb0FnQVJBUUFMSUFJZ0FpZ0NCRUVCYXpZQ0JDQUNJQUlvQWdBaUFrRUJhallDQUFKQUlBSXRBQUFpQlVIL0FVY05BQU5BQWtBZ0FDZ0NHQ0lDS0FJRURRQWdBQ0FDS0FJTUVRQUFEUUFnQUNnQ0FDSURRUmsyQWhRZ0FDQURLQUlBRVFFQUN5QUNJQUlvQWdSQkFXczJBZ1FnQWlBQ0tBSUFJZ0pCQVdvMkFnQkIvd0VoQlNBQ0xRQUFJZ0pCL3dGR0RRQUxJQUpGRFFBZ0FDQUNOZ0s0QTBFQUlRVUxJQVFvQWhRaEFnc2dCQ0FDUVFocUlnTTJBaFFnQkNBRUtBSU1RUWgwSUFWeU5nSU1JQUpCZDBvTkFDQUVJQUpCQ1dvaUF6WUNGQ0FERFFBZ0JFR0FnQUkyQWhCQkFDRURDeUFFSUFRb0FoQkJBWFFpQWpZQ0VDQUNRWUNBQWtnTkFBc0xJQVFnQWlBQkxRQUFJZ0JCL3dCeFFRSjBRYkNEQTJvb0FnQWlCVUVRZFNJR2F5SUNOZ0lRSUFWQkNIWWhCd0pBSUFRb0Fnd2lDQ0FDSUFOMElnTk9CRUFnQkNBR05nSVFJQVFnQ0NBRGF6WUNEQ0FBUVlBQmNTRURJQUlnQmtnRVFDQUJJQU1nQjNNNkFBQU1BZ3NnQVNBRElBVnpPZ0FBSUFCQmdBRnpJUUFNQVFzZ0FrSC8vd0ZMRFFBZ0FFR0FBWEVoQXlBQ0lBWklCRUFnQVNBRElBVnpPZ0FBSUFCQmdBRnpJUUFNQVFzZ0FTQURJQWR6T2dBQUN5QUFRUWQyQ3lrQkFYOGdBZ1JBSUFBaEF3TkFJQU1nQVRvQUFDQURRUUZxSVFNZ0FrRUJheUlDRFFBTEN5QUFDd2tBSUFBUVZTQUJhZ3VRQVFFRGZ3SkFJQUFRU3lJQ0lBRkpCRUFqQUVFUWF5SUVKQUFnQVNBQ2F5SUNCRUFnQWlBQUVGOGlBeUFBRUVzaUFXdExCRUFnQUNBRElBSWdBMnNnQVdvZ0FTQUJFS0FFQ3lBQklBQVFWU0lEYWlBQ1FRQVF4UVlnQUNBQklBSnFJZ0FRaHdJZ0JFRUFPZ0FQSUFBZ0Eyb2dCRUVQYWhDVUFRc2dCRUVRYWlRQURBRUxJQUFnQUJCVklBRVEyQVlMQ3hBQUlBQWdBU0FCRUlNQkVKRUVJQUFMRmdBZ0FDZ0NBQ0lBUWR5UUJVY0VRQ0FBRUtvREN3c1NBQ0FBRUl3QkJFQWdBQ2dDQUE4TElBQUxKUUVCZnlNQVFSQnJJZ0VrQUNBQklBQTJBZ3dnQVVFTWFoQzJCU0FCUVJCcUpBQWdBQXVxQndJR2Z3UjlBbjBnQUNnQ0dDRUlJQUFvQWdRaEJTQUFLQUlJSVFRZ0FDZ0NEQ0VIQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSi9JQUdMUXdBQUFFOWRCRUFnQWFnTUFRdEJnSUNBZ0hnTEFuOGdBWTRpQ1l0REFBQUFUMTBFUUNBSnFBd0JDMEdBZ0lDQWVBc2lBRVlFUUFKL0lBS0xRd0FBQUU5ZEJFQWdBcWdNQVF0QmdJQ0FnSGdMQW44Z0FvNGlDWXREQUFBQVQxMEVRQ0FKcUF3QkMwR0FnSUNBZUFzaUEwY05BU0FEUVFCSUlBTWdCRTl5RFFJZ0JDQURRUUZxSWdaTkRRTWdBRUVBU0NBQUlBVlBjZzBFSUFVZ0FFRUJhaUlFVFEwRklBU3pJQUdUSWdvZ0JyTWdBcE1pQzVRaUNVTUFBQUFBWUVVZ0NidEVjYXlMMjJnQThEOWxSWElOQmlBQklBQ3preUlNSUF1VUlnRkRBQUFBQUdCRklBRzdSSEdzaTl0b0FQQS9aVVZ5RFFjZ0NpQUNJQU96a3lJS2xDSUNRd0FBQUFCZ1JTQUN1MFJ4ckl2YmFBRHdQMlZGY2cwSUlBd2dDcFFpQ2tNQUFBQUFZRVVnQ3J0RWNheUwyMmdBOEQ5bFJYSU5DU0FLSUFJZ0NTQUJrcEtTdTBSeHJJdmJhQUR3UDJWRkRRb2dDaUFJSUFNZ0IyeHFJZ01nQjJvaUJTQUVRUUowSWdScUtnSUFsQ0FDSUFVZ0FFRUNkQ0lBYWlvQ0FKUWdDU0FBSUFOcUtnSUFsQ0FCSUFNZ0JHb3FBZ0NVa3BLU0RBd0xRZkNJQlVIaHJBRVFSMEdWclFFUVIwR01HUkJIUWNVQUVFcEJ4eDBRUjBHU3JnRVFSeEJKREFvTFFmQ0lCVUd3cmdFUVIwR1ZyUUVRUjBHTUdSQkhRY1lBRUVwQnh4MFFSMEdTcmdFUVJ4QkpEQWtMUWZDSUJVR2Vyd0VRUjBHVnJRRVFSMEdNR1JCSFFjOEFFRXBCeHgwUVIwSE1yd0VRUnhCSkRBZ0xRZkNJQlVIZHJ3RVFSMEdWclFFUVIwR01HUkJIUWRBQUVFcEJ4eDBRUjBHWnNBRVFSeEJKREFjTFFmQ0lCVUd4c0FFUVIwR1ZyUUVRUjBHTUdSQkhRZEVBRUVwQnh4MFFSMEhlc0FFUVJ4QkpEQVlMUWZDSUJVSHZzQUVRUjBHVnJRRVFSMEdNR1JCSFFkSUFFRXBCeHgwUVIwR3FzUUVRUnhCSkRBVUxRZkNJQlVIQ3NRRVFSMEdWclFFUVIwR01HUkJIUWQ0QUVFcEJ4eDBRUjBIeHNRRVFSeEJKREFRTFFmQ0lCVUgrc1FFUVIwR1ZyUUVRUjBHTUdSQkhRZDhBRUVwQnh4MFFSMEh4c1FFUVJ4QkpEQU1MUWZDSUJVR3RzZ0VRUjBHVnJRRVFSMEdNR1JCSFFlQUFFRXBCeHgwUVIwSHhzUUVRUnhCSkRBSUxRZkNJQlVIY3NnRVFSMEdWclFFUVIwR01HUkJIUWVFQUVFcEJ4eDBRUjBIeHNRRVFSeEJKREFFTFFmQ0lCVUdMc3dFUVIwR1ZyUUVRUjBHTUdSQkhRZUlBRUVwQnh4MFFSMEh4c1FFUVJ4QkpDeEJZQUFzTEJRQVFOUUFMQndBakEwRWNhZ3NrQVFGL0l3QkJFR3NpQVNRQUlBQkNBRGNDQUNBQVFRQTJBZ2dnQVVFUWFpUUFJQUFMUlFBZ0FDZ0NDQ0FCVFFSQVFmQ0lCVUhwcWdFUVIwR09xd0VRUjBHTUdSQkhRZjBBRUVwQnh4MFFSMEh5cXdFUVJ4QkpFRmdBQ3lBQUtBSVlJQUFvQWd3Z0FXeHFDd3dBSUFBZ0FVRWNhaENiQkF2VEFRSURmd0orQWtBZ0FDa0RjQ0lFVUVVZ0JDQUFLUU40SUFBb0FnUWlBU0FBS0FJc0lnSnJySHdpQlZkeFJRUkFJQUFRdlFJaUEwRUFUZzBCSUFBb0Fpd2hBaUFBS0FJRUlRRUxJQUJDZnpjRGNDQUFJQUUyQW1nZ0FDQUZJQUlnQVd1c2ZEY0RlRUYvRHdzZ0JVSUJmQ0VGSUFBb0FnUWhBU0FBS0FJSUlRSUNRQ0FBS1FOd0lnUlFEUUFnQkNBRmZTSUVJQUlnQVd1c1dRMEFJQUVnQktkcUlRSUxJQUFnQWpZQ2FDQUFJQVVnQUNnQ0xDSUFJQUZyckh3M0EzZ2dBQ0FCVHdSQUlBRkJBV3NnQXpvQUFBc2dBd3NOQUNBQUlBRnFRUUZySUFGdEN4c0JBWDlCQ2lFQklBQVFqQUVFZnlBQUVNNEJRUUZyQlVFS0N3c1FBQ0FBRU5NRUlBRVEwd1J6UVFGekN4QUFJQUFRMUFRZ0FSRFVCSE5CQVhNTEJnQWdBQkJJQzNzQkEzOENRQ0FCRU1zR0lRSWdBQkNlQkNFRElBQVFTeUVFSUFJZ0EwMEVRQ0FBRUZVaUF5QUJJQUlRMndRakFFRVFheUlCSkFBZ0FCQkxHaUFBSUFJUWh3SWdBVUVBTmdJTUlBTWdBa0VDZEdvZ0FVRU1haENvQVNBQlFSQnFKQUFNQVFzZ0FDQURJQUlnQTJzZ0JFRUFJQVFnQWlBQkVNTUdDd3RRQVFOL0FrQWdBUkNEQVNFQ0lBQVFYeUVESUFBUVN5RUVJQUlnQTAwRVFDQUFFRlVpQXlBQklBSVEzUVFnQUNBRElBSVEyQVlNQVFzZ0FDQURJQUlnQTJzZ0JFRUFJQVFnQWlBQkVLTURDd3NTQUNBQUJFQWdBQ2dDQUJCSUlBQVFTQXNMUFFFQ2YwRUJJQUFnQUVFQlRSc2hBUU5BQWtBZ0FSQk5JZ0FOQUVIMG5nWCtFQUlBSWdKRkRRQWdBaEVMQUF3QkN3c2dBRVVFUUJDVEFRc2dBQXViQVFFRGZTQUFJQU1nQkJEZkFTRUFJQUZEQUFDQVAwRUJJQU4wc3BVaUFaUWdBVU1BQUFBL2xFTUFBQUMva2lJRmtpRUdJQUlnQVpRZ0JaSWhCVU1BQUFBQUlRRkRBQUFBQUNFQ0FrQWdCa01BQUFBQVhRMEFJQUFvQWdSQkFtdXpJZ2NnQmlJQlhVVU5BQ0FISVFFTEFrQWdCVU1BQUFBQVhRMEFJQUFvQWdoQkFtdXpJZ1lnQlNJQ1hVVU5BQ0FHSVFJTElBQWdBU0FDRUZjTENRQWdBQ0FBRUlrR0M0WURBUVovQWtCQjJKQUYvaElBQUVFQmNRMEFRZGlRQlJCL1JRMEFRYXlPQlJDRkF5TUFRU0JySWdJa0FBSkFBa0FEUUNBQ1FRaHFJZ1FnQUVFQ2RDSURhZ0ovUVFFZ0FIUkIvLy8vL3dkeElnVkJBWEpGQkVBZ0F5Z0NBQXdCQ3lBQVFaMzdBVUgwa0FJZ0JSc1F3QVFMSWdNMkFnQWdBMEYvUmcwQklBQkJBV29pQUVFR1J3MEFDMEVBRUw4RVJRUkFRYWpzQXlFQklBUkJxT3dEUVJnUStRRkZEUUpCd093RElRRWdCRUhBN0FOQkdCRDVBVVVOQWtFQUlRQkI1STRGTFFBQVJRUkFBMEFnQUVFQ2RFRzBqZ1ZxSUFCQjlKQUNFTUFFTmdJQUlBQkJBV29pQUVFR1J3MEFDMEhramdWQkFUb0FBRUhNamdWQnRJNEZLQUlBTmdJQUMwRzBqZ1VoQVNBQ1FRaHFJZ0JCdEk0RlFSZ1ErUUZGRFFKQnpJNEZJUUVnQUVITWpnVkJHQkQ1QVVVTkFrRVlFRTBpQVVVTkFRc2dBU0FDS1FJSU53SUFJQUVnQWlrQ0dEY0NFQ0FCSUFJcEFoQTNBZ2dNQVF0QkFDRUJDeUFDUVNCcUpBQkJySTRGRVAwQlFkU1FCU0FCTmdJQVFkaVFCUkIrQzBIVWtBVW9BZ0FMdndvQ0JYOFBmaU1BUWVBQWF5SUZKQUFnQkVMLy8vLy8vLzgvZ3lFTUlBSWdCSVZDZ0lDQWdJQ0FnSUNBZjRNaENpQUNRdi8vLy8vLy96K0RJZzFDSUlnaERpQUVRakNJcDBILy93RnhJUWNDUUFKQUlBSkNNSWluUWYvL0FYRWlDVUgvL3dGclFZS0FmazhFUUNBSFFmLy9BV3RCZ1lCK1N3MEJDeUFCVUNBQ1F2Ly8vLy8vLy8vLy93Q0RJZ3RDZ0lDQWdJQ0F3UC8vQUZRZ0MwS0FnSUNBZ0lEQS8vOEFVUnRGQkVBZ0FrS0FnSUNBZ0lBZ2hDRUtEQUlMSUFOUUlBUkMvLy8vLy8vLy8vLy9BSU1pQWtLQWdJQ0FnSURBLy84QVZDQUNRb0NBZ0lDQWdNRC8vd0JSRzBVRVFDQUVRb0NBZ0lDQWdDQ0VJUW9nQXlFQkRBSUxJQUVnQzBLQWdJQ0FnSURBLy84QWhZUlFCRUFnQWlBRGhGQUVRRUtBZ0lDQWdJRGcvLzhBSVFwQ0FDRUJEQU1MSUFwQ2dJQ0FnSUNBd1AvL0FJUWhDa0lBSVFFTUFnc2dBeUFDUW9DQWdJQ0FnTUQvL3dDRmhGQUVRQ0FCSUF1RVFnQWhBVkFFUUVLQWdJQ0FnSURnLy84QUlRb01Bd3NnQ2tLQWdJQ0FnSURBLy84QWhDRUtEQUlMSUFFZ0M0UlFCRUJDQUNFQkRBSUxJQUlnQTRSUUJFQkNBQ0VCREFJTElBdEMvLy8vLy8vL1AxZ0VRQ0FGUWRBQWFpQUJJQTBnQVNBTklBMVFJZ1liZVNBR1FRWjByWHluSWdaQkQyc1FqZ0ZCRUNBR2F5RUdJQVVwQTFnaURVSWdpQ0VPSUFVcEExQWhBUXNnQWtMLy8vLy8vLzgvVmcwQUlBVkJRR3NnQXlBTUlBTWdEQ0FNVUNJSUcza2dDRUVHZEsxOHB5SUlRUTlyRUk0QklBWWdDR3RCRUdvaEJpQUZLUU5JSVF3Z0JTa0RRQ0VEQ3lBRFFnK0dJZ3RDZ0lEKy93K0RJZ0lnQVVJZ2lDSUVmaUlRSUF0Q0lJZ2lFeUFCUXYvLy8vOFBneUlCZm53aUQwSWdoaUlSSUFFZ0FuNThJZ3NnRVZTdElBSWdEVUwvLy8vL0Q0TWlEWDRpRlNBRUlCTitmQ0lSSUF4Q0Q0WWlFaUFEUWpHSWhFTC8vLy8vRDRNaUF5QUJmbndpRkNBUElCQlVyVUlnaGlBUFFpQ0loSHdpRHlBQ0lBNUNnSUFFaENJTWZpSVdJQTBnRTM1OElnNGdFa0lnaUVLQWdJQ0FDSVFpQWlBQmZud2lFQ0FESUFSK2ZDSVNRaUNHZkNJWGZDRUJJQWNnQ1dvZ0JtcEIvLzhBYXlFR0FrQWdBaUFFZmlJWUlBd2dFMzU4SWdRZ0dGU3RJQVFnQkNBRElBMStmQ0lFVnExOElBSWdESDU4SUFRZ0JDQVJJQlZVclNBUklCUldyWHg4SWdSV3JYd2dBeUFNZmlJRElBSWdEWDU4SWdJZ0ExU3RRaUNHSUFKQ0lJaUVmQ0FFSUFKQ0lJWjhJZ0lnQkZTdGZDQUNJQUlnRUNBU1ZxMGdEaUFXVkswZ0RpQVFWcTE4ZkVJZ2hpQVNRaUNJaEh3aUFsYXRmQ0FDSUFJZ0R5QVVWSzBnRHlBWFZxMThmQ0lDVnExOElnUkNnSUNBZ0lDQXdBQ0RVRVVFUUNBR1FRRnFJUVlNQVFzZ0MwSS9pQ0FFUWdHR0lBSkNQNGlFSVFRZ0FrSUJoaUFCUWorSWhDRUNJQXRDQVlZaEN5QUJRZ0dHaENFQkN5QUdRZi8vQVU0RVFDQUtRb0NBZ0lDQWdNRC8vd0NFSVFwQ0FDRUJEQUVMQW40Z0JrRUFUQVJBUVFFZ0Jtc2lCMEgvQUUwRVFDQUZRVEJxSUFzZ0FTQUdRZjhBYWlJR0VJNEJJQVZCSUdvZ0FpQUVJQVlRamdFZ0JVRVFhaUFMSUFFZ0J4RDJBU0FGSUFJZ0JDQUhFUFlCSUFVcEF6QWdCU2tET0lSQ0FGS3RJQVVwQXlBZ0JTa0RFSVNFSVFzZ0JTa0RLQ0FGS1FNWWhDRUJJQVVwQXdBaEFpQUZLUU1JREFJTFFnQWhBUXdDQ3lBRVF2Ly8vLy8vL3orRElBYXRRakNHaEFzZ0NvUWhDaUFMVUNBQlFnQlpJQUZDZ0lDQWdJQ0FnSUNBZjFFYlJRUkFJQW9nQWtJQmZDSUJVSzE4SVFvTUFRc2dDeUFCUW9DQWdJQ0FnSUNBZ0grRmhGQkZCRUFnQWlFQkRBRUxJQW9nQWlBQ1FnR0RmQ0lCSUFKVXJYd2hDZ3NnQUNBQk53TUFJQUFnQ2pjRENDQUZRZUFBYWlRQUN6TUJBWDhnQWdSQUlBQWhBd05BSUFNZ0FTMEFBRG9BQUNBRFFRRnFJUU1nQVVFQmFpRUJJQUpCQVdzaUFnMEFDd3NnQUF1a0FnRUhmeUFBS0FJSUlRVUNRQUpBSUFBb0FnQWlBMEVQY1VVRVFDQUFRUVJxSWdGQkFCRDdBaUVBREFFTFFUOGhBaU1ESWdRb0FoZ2dBQ2dDQkNJR1FmLy8vLzhEY1VjTkFRSkFJQU5CQTNGQkFVY05BQ0FBS0FJVUlnRkZEUUFnQUNBQlFRRnJOZ0lVUVFBUEN5QURRWUFCY1NJQ0JFQWdCQ0FBUVJCcU5nSlVRUUJCQWY0ZUFzRHhCQm9MSUFCQkJHb2hBU0FBS0FJTUlnY2dBQ2dDRUNJQU5nSUFJQVJCekFCcUlBQkhCRUFnQUVFRWF5QUhOZ0lBQ3lBQklBWkJBWFFnQTBFZGRIRkJIM1ZCLy8vLy93ZHhFUHNDSVFBZ0FrVU5BQ0FFUVFBMkFsUUNRRUVBUVgvK0hnTEE4UVJCQVVjTkFFSEU4UVFvQWdCRkRRQkJ3UEVFUWYvLy8vOEhFUDhCQ3d0QkFDRUNJQVZGSUFCQkFFNXhEUUFnQVJEUUFRc2dBZ3ZWQVFFRWZ5QURLQUpNUVFCSUJIOUJBUVVnQXhDRkFVVUxJUWNnQVNBQ2JDRUdJQU1nQXlnQ1NDSUVRUUZySUFSeU5nSklJQU1vQWdRaUJTQURLQUlJSWdSR0JIOGdCZ1VnQUNBRklBUWdCV3NpQkNBR0lBUWdCa2tiSWdVUWF4b2dBeUFES0FJRUlBVnFOZ0lFSUFBZ0JXb2hBQ0FHSUFWckN5SUVCRUFEUUFKQUlBTVF2Z0pGQkVBZ0F5QUFJQVFnQXlnQ0lCRUVBQ0lGRFFFTElBZEZCRUFnQXhDRUFRc2dCaUFFYXlBQmJnOExJQUFnQldvaEFDQUVJQVZySWdRTkFBc0xJQWRGQkVBZ0F4Q0VBUXNnQWtFQUlBRWJDNzhCQVFOL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENNQVFSQnJJZ0lrQUNBQS9oQUNBRUYvUndSQUFrQWdBa0VJYWlBQ1FReHFJQUZCREdvUXlRWVF5UUVoQTBIb2pnVVFjQm9EUUNBQUtBSUFRUUZHQkVCQmdJOEZRZWlPQlJDN0JBd0JDd3NnQUNnQ0FFVUVRQ0FBUVFIK0Z3SUFRZWlPQlJCc0dpQURFT2tHUWVpT0JSQndHaUFBUVgvK0Z3SUFRZWlPQlJCc0drR0Fqd1VRdkFRYURBRUxRZWlPQlJCc0dnc0xJQUpCRUdva0FDQUFLQUlFSUFGQkVHb2tBRUVCYXdzZ0FDQUFJQUZCQVdzMkFnUWdBRUc0dmdRMkFnQWdBRUdRbGdRMkFnQWdBQXVnQWdFR2Z3SkFJQUF0QUFCQkQzRU5BQ0FBUVFScVFRQkJDdjVJQWdBTkFFRUFEd3NDZndKQUlBQW9BZ0FpQWtFUGNVVUVRQ0FBUVFScVFRQkJDaEI3UlEwQklBQW9BZ0FoQWdzZ0FCRDhBaUlCUVFwSERRQWdBRUVJYWlFRUlBQkJCR29oQTBIa0FDRUJBMEFDUUNBQlJRMEFJQU1vQWdCRkRRQWdBVUVCYXlFQklBUW9BZ0JGRFFFTEN5QUFFUHdDSWdGQkNrY05BQ0FDUVFSeFJTRUZJQUpCQTNGQkFrY2hBZ05BQWtBZ0F5Z0NBQ0lCUWYvLy8vOERjU0lHSUFGQkFFY2dCWEZ5UlEwQUFrQWdBZzBBSUFZakF5Z0NHRWNOQUVFUURBUUxJQVFRMFFFZ0F5QUJJQUZCZ0lDQWdIaHlJZ0VRZXhvZ0F5QUJFT1lESVFFZ0JCREJBaUFCUVJ0R0RRQWdBUTBDQ3lBQUVQd0NJZ0ZCQ2tZTkFBc0xJQUVMQzlZSUFRMS9Jd0JCRUdzaURDUUFJQUVRN3dZakFFRVFheUlESkFBZ0F5QUJOZ0lNSUF4QkRHb2dBMEVNYWhEekFTRUpJQU5CRUdva0FDQUFRUWhxSWdFUXh3RWdBazBFUUFKQUlBSkJBV29pQUNBQkVNY0JJZ05MQkVBakFFRWdheUlOSkFBQ1FDQUFJQU5ySWdZZ0FSQ2tBeWdDQUNBQktBSUVhMEVDZFUwRVFDQUJJQVlROGdZTUFRc2dBUkNGQWlFSElBMUJER29oQUFKL0lBRVF4d0VnQm1vaEJTTUFRUkJySWdRa0FDQUVJQVUyQWd3Z0JTQUJFTlFHSWdOTkJFQWdBUkRRQmlJRklBTkJBWFpKQkVBZ0JDQUZRUUYwTmdJSUlBUkJDR29nQkVFTWFoQ3RBaWdDQUNFREN5QUVRUkJxSkFBZ0F3d0JDeENUQVFBTElRVWdBUkRIQVNFSVFRQWhBeU1BUVJCcklnUWtBQ0FFUVFBMkFnd2dBRUVNYWhEVkJrRUVhaUFIRU1rQkdpQUZCSDhnQkVFRWFpQUFLQUlRSUFVUTB3WWdCQ2dDQkNFRElBUW9BZ2dGUVFBTElRVWdBQ0FETmdJQUlBQWdBeUFJUVFKMGFpSUhOZ0lJSUFBZ0J6WUNCQ0FBRUpNRUlBTWdCVUVDZEdvMkFnQWdCRUVRYWlRQUl3QkJFR3NpQXlRQUlBQW9BZ2doQkNBRElBQkJDR28yQWd3Z0F5QUVOZ0lFSUFNZ0JDQUdRUUowYWpZQ0NDQURLQUlFSVFRRFFDQURLQUlJSUFSSEJFQWdBQ2dDRUJvZ0F5Z0NCQkRTQmlBRElBTW9BZ1JCQkdvaUJEWUNCQXdCQ3dzZ0F5Z0NEQ0FES0FJRU5nSUFJQU5CRUdva0FDTUFRUkJySWdZa0FDQUJFSVVDR2lBR1FRaHFJQUVvQWdRUXlRRWdCa0VFYWlBQktBSUFFTWtCSVFRZ0JpQUFLQUlFRU1rQklRVW9BZ0FoQnlBRUtBSUFJUWdnQlNnQ0FDRUtJd0JCRUdzaUJTUUFJQVZCQ0dvakFFRWdheUlESkFBakFFRVFheUlFSkFBZ0JDQUhOZ0lNSUFRZ0NEWUNDQ0FEUVJocUlBUkJER29nQkVFSWFoRGpBaUFFUVJCcUpBQWdBMEVNYWlBREtBSVlJUWNnQXlnQ0hDRUxJQU5CRUdvakFFRVFheUlFSkFBZ0JDQUxOZ0lJSUFRZ0J6WUNEQ0FFSUFvMkFnUURRQ0FFUVF4cUlnY29BZ0FnQkNnQ0NFY0VRQ0FIRU00R0tBSUFJUW9nQkVFRWFpSUxFTTRHSUFvMkFnQWdCeEROQmlBTEVNMEdEQUVMQ3lBRVFReHFJQVJCQkdvUXNnRWdCRUVRYWlRQUlBTWdBeWdDRURZQ0RDQURJQU1vQWhRMkFnZ2dBMEVJYWhDeUFTQURRU0JxSkFBZ0JTZ0NEQ0VESUFWQkVHb2tBQ0FHSUFNMkFnd2dBQ0FHS0FJTU5nSUVJQUVnQUVFRWFoRG5BaUFCUVFScUlBQkJDR29RNXdJZ0FSQ2tBeUFBRUpNRUVPY0NJQUFnQUNnQ0JEWUNBQ0FCRU1jQkdpQUdRUkJxSkFBZ0FDZ0NCQ0VEQTBBZ0FDZ0NDQ0FEUndSQUlBQW9BaEFhSUFBZ0FDZ0NDRUVFYXpZQ0NBd0JDd3NnQUNnQ0FBUkFJQUFvQWhBZ0FDZ0NBQ0FBRUpNRUtBSUFHaUFBS0FJQUdoRFBCZ3NMSUExQklHb2tBQXdCQ3lBQUlBTkpCRUFnQVNnQ0FDQUFRUUowYWlFQUlBRVF4d0VhSUFFZ0FCRFJCZ3NMQ3lBQklBSVFoZ0lvQWdBRVFDQUJJQUlRaGdJb0FnQVFxZ01MSUFrUXJBTWhBQ0FCSUFJUWhnSWdBRFlDQUNBSktBSUFJUUFnQ1VFQU5nSUFJQUFFUUNBQUVLb0RDeUFNUVJCcUpBQUxIQUVCZnlBQUVJd0JCRUFnQUNnQ0FDQUFFTTRCR2hEVkFnc2dBQXNJQUNBQVFRQVFmQXN5QVFGL0l3QkJFR3NpQXlRQUlBTWdBVFlDRENBQUlBTkJER29ROHdFaUFFRUVhaUFDRVBNQkdpQURRUkJxSkFBZ0FBc0ZBQkJZQUFzUUFDQUFRWVREQkNBQktBSUF0eEFYQzdnQkFRRjlJQUlnQVJDSkJpRURJQUFnQUNvQ0FDQURJQUVxQWdDVWt6Z0NBQ0FBSUFBcUFnUWdBeUFCS2dJRWxKTTRBZ1FnQUNBQUtnSUlJQU1nQVNvQ0NKU1RPQUlJSUFBZ0FDb0NEQ0FESUFFcUFneVVremdDRENBQUlBQXFBaEFnQXlBQktnSVFsSk00QWhBZ0FDQUFLZ0lVSUFNZ0FTb0NGSlNUT0FJVUlBQWdBQ29DR0NBRElBRXFBaGlVa3pnQ0dDQUFJQUFxQWh3Z0F5QUJLZ0ljbEpNNEFod2dBQ0FBS2dJZ0lBTWdBU29DSUpTVE9BSWdDL1lDQVFaL0lBQW9BZ1FoQnlBQUtBSUFJUVlDUUFKQUlBQW9BaEFpQlNnQ3VBTUVRQ0FHSVFRTUFRc2dBa0VZU2dSQUlBSWhDQ0FHSVFRTUFnc0RRQ0FIUlFSQUlBVWdCU2dDR0NnQ0RCRUFBRVVFUUVFQUR3c2dCU2dDR0NJRUtBSUVJUWNnQkNnQ0FDRUdDeUFHUVFGcUlRUWdCMEVCYXlFSEFrQWdCaTBBQUNJSVFmOEJSZ1JBQTBBZ0IwVUVRQ0FGSUFVb0FoZ29BZ3dSQUFCRkJFQkJBQThMSUFVb0FoZ2lCQ2dDQkNFSElBUW9BZ0FoQkFzZ0IwRUJheUVISUFRdEFBQWhCa0gvQVNFSUlBUkJBV29oQkNBR1FmOEJSZzBBQ3lBR0RRRUxJQWdnQVVFSWRISWhBU0FDUVJGSUlBUWhCaUFDUVFocUlnZ2hBZzBCREFNTEN5QUZJQVkyQXJnREN5QUNJQU5PQkVBZ0FpRUlEQUVMSUFVb0F0UURLQUlvUlFSQUlBVW9BZ0FpQTBINEFEWUNGQ0FGUVg4Z0F5Z0NCQkVDQUNBRktBTFVBMEVCTmdJb0MwRVpJUWdnQVVFWklBSnJkQ0VCQ3lBQUlBZzJBZ3dnQUNBQk5nSUlJQUFnQnpZQ0JDQUFJQVEyQWdCQkFRc0tBQ0FBS0FJQUVPWUVDd3NBSUFBb0FnQVE3QVRBQ3d3QUlBQWdBU0FDL2tnQ0FBc2tBUUYvSUFBb0FnQWhBaUFBSUFFMkFnQWdBZ1JBSUFJZ0FCQ2tBaWdDQUJFQkFBc0xMUUFnQWtVRVFDQUFLQUlFSUFFb0FnUkdEd3NnQUNBQlJnUkFRUUVQQ3lBQUtBSUVJQUVvQWdRUXR3SkZDM3dCQkg4akFFRWdheUlDSkFBZ0FrRUlhaUFBRU1JR0lnRW9BZ0JCQWY0WkFBQWpBRUVRYXlJQUpBQWdBRUVNYWtHUjNRRVF3UVlnQVNnQ0JDSUJMUUFBSVFRZ0FVRUJPZ0FBRU1BR0FrQWdCRUVFY1VVTkFFSEVuZ1VRdkFSRkRRQWdBRUdSM1FFMkFnQVFkUUFMSUFCQkVHb2tBQ0FDUVNCcUpBQUwzd0VCQlg4akFFRWdheUlDSkFBZ0FrRUlhaUFBRU1JR0lnQW9BZ0QrRWdBQUJIOUJBQVVDZnlNQVFSQnJJZ01rQUNBRFFReHFRYVhkQVJEQkJpRUZBa0FDUUNBQUxRQU1SUTBBSUFBb0FnUXRBQUJCQW5GRkRRQWdBQ2dDQ0NnQ0FDQUFLQUlRUmcwQkN3TkFJQUFvQWdRaUJDMEFBQ0lCUVFKeEJFQWdCQ0FCUVFSeU9nQUFRY1NlQlVHc25nVVF1d1FNQVFzTElBRkJBVVlpQVVVRVFDQUFMUUFNUVFGR0JFQWdBQ2dDQ0NBQUtBSVFOZ0lBQ3lBRVFRSTZBQUFMSUFVUXdBWWdBMEVRYWlRQUlBRU1BUXNRZFFBTFFRRnpDeUFDUVNCcUpBQUxEUUFnQUNnQ0FCRGxCQm9nQUFzTkFDQUFLQUlBRU9zRUdpQUFDeEVBSUFBZ0FTQUFLQUlBS0FJY0VRTUFDMzBCQTM4Q1FBSkFJQUFpQVVFRGNVVU5BQ0FCTFFBQVJRUkFRUUFQQ3dOQUlBRkJBV29pQVVFRGNVVU5BU0FCTFFBQURRQUxEQUVMQTBBZ0FTSUNRUVJxSVFGQmdJS0VDQ0FDS0FJQUlnTnJJQU55UVlDQmdvUjRjVUdBZ1lLRWVFWU5BQXNEUUNBQ0lnRkJBV29oQWlBQkxRQUFEUUFMQ3lBQklBQnJDeHdBSUFCQnpBQnFJZ0FRNndOQmdJQ0FnQVJ4QkVBZ0FCRFFBUXNMamdFQkJIOENRQ01ES0FJWUlnRWdBQ2dDVEVILy8vLy9lM0ZHRFFCQkFTRURJQUJCekFCcUlnSkJBQ0FCRUh0RkRRQWdBa0VBSUFGQmdJQ0FnQVJ5SWdRUWV5SUFSUTBBQTBBQ1FBSkFJQUJCZ0lDQWdBUnhCRUFnQUNFQkRBRUxJQUlnQUNBQVFZQ0FnSUFFY2lJQkVIc2dBRWNOQVFzZ0FpQUJFTHNGQ3lBQ1FRQWdCQkI3SWdBTkFBc0xJQU1MZFFFQmZpQUFJQUVnQkg0Z0FpQURmbndnQTBJZ2lDSUNJQUZDSUlnaUJINThJQU5DLy8vLy93K0RJZ01nQVVMLy8vLy9ENE1pQVg0aUJVSWdpQ0FESUFSK2ZDSURRaUNJZkNBQklBSitJQU5DLy8vLy93K0RmQ0lCUWlDSWZEY0RDQ0FBSUFWQy8vLy8vdytESUFGQ0lJYUVOd01BQ3hnQUlBQXRBQUJCSUhGRkJFQWdBU0FDSUFBUWlBTWFDd3NFQUVFQUN4UUJBWDlCQ0JCbUlnRWdBQ2tDQURjREFDQUJDNkVCQVFKL0FrQWdBQkJMUlNBQ0lBRnJRUVZJY2cwQUlBRWdBaEN4QXlBQ1FRUnJJUVFnQUJCVklnSWdBQkJMYWlFRkFrQURRQUpBSUFJc0FBQWhBQ0FCSUFSUERRQWdBRUVBVENBQVFmOEFUbkpGQkVBZ0FTZ0NBQ0FDTEFBQVJ3MERDeUFCUVFScUlRRWdBaUFGSUFKclFRRkthaUVDREFFTEN5QUFRUUJNSUFCQi93Qk9jZzBCSUFJc0FBQWdCQ2dDQUVFQmEwc05BUXNnQTBFRU5nSUFDd3NKQUNBQUlBRTJBZ1FMQ2dBZ0FDMEFDMEVIZGd1RUFRRUNmeU1BUVJCcklnSWtBQ0FBRUl3QkJFQWdBQ2dDQUNBQUVNNEJHaERpQWdzZ0FSQkxHaUFCRUl3QklRTWdBQ0FCS0FJSU5nSUlJQUFnQVNrQ0FEY0NBQ0FCUVFBUW13RWdBa0VBT2dBUElBRWdBa0VQYWhDVUFRSkFJQUFnQVVZaUFTQURja1VOQUFzZ0FCQ01BU0FCY2tVRVFDQUFFUFVCR2dzZ0FrRVFhaVFBQzFBQkFYNENRQ0FEUWNBQWNRUkFJQUVnQTBGQWFxMkdJUUpDQUNFQkRBRUxJQU5GRFFBZ0FpQURyU0lFaGlBQlFjQUFJQU5ycllpRUlRSWdBU0FFaGlFQkN5QUFJQUUzQXdBZ0FDQUNOd01JQzJzQkFYOGpBRUdBQW1zaUJTUUFJQVJCZ01BRWNTQUNJQU5NY2tVRVFDQUZJQUVnQWlBRGF5SURRWUFDSUFOQmdBSkpJZ0ViRUZBYUlBRkZCRUFEUUNBQUlBVkJnQUlRaHdFZ0EwR0FBbXNpQTBIL0FVc05BQXNMSUFBZ0JTQURFSWNCQ3lBRlFZQUNhaVFBQ3ljQUlBQW9BZ0FqQXhDcEFVVUVRRUhFaUFKQmg5c0JRWk1EUWZuZkFSQkNBQXNnQUNnQ0JBc2JBQ0FBS0FJRVFRbFBCRUFnQUJDUUFSQkRJQUJCQURZQ0JBc0xnZ01DQjM4Q2ZDTUFRVEJySWdFa0FDTUFRUkJySWdJa0FDQUFLd01BUkFBQUFBQUFBQUFBWmtVRVFFSHdpQVZCbVFvUVIwSFNEeEJIUVl3WkVFZEJ3d0FRU2tISEhSQkhRZU1nRUVjUVNSQllBQXNnQWhDL0JTQUFJQUlvQWdpM1JJM3R0YUQzeHJBK29pQUNLUU1BdWFBNUF3Z2dBa0VRYWlRQUVKNEdJQUZCSkdvaUFoQ0RCaUFBS0FJUUlRUWdBQ3dBR3lFRklBRW9BaVFoQmlBQkxBQXZJUWNnQVFKOEFrQWdBQ3NEQUNJSVJBQUFBQUFBQUFBQVpnUkFJQUFyQXdnaUNVUUFBQUFBQUFBQUFHWkZEUUVnQ1NBSW9Rd0NDMEh3aUFWQm1Rb1FSMEhTRHhCSFFZd1pFRWRCMEFBUVNrSEhIUkJIUWVNZ0VFY1FTUkJZQUF0QjhJZ0ZRZmduRUVkQjBnOFFSMEdNR1JCSFFkRUFFRXBCeHgwUVIwSHJLeEJIRUVrUVdBQUxSQUFBQUFBQVFJOUFvamtERUNBQlFhVytBVFlDQ0NBQlFjRTZOZ0lBSUFFZ0JDQUFRUkJxSWdBZ0JVRUFTQnMyQWd3Z0FTQUdJQUlnQjBFQVNCczJBZ1JCa0RJZ0FSRCtCU0FDRUV3YUlBQVFUQm9nQVVFd2FpUUFDd1VBRUhVQUN3d0FJQUFnQVMwQUFEb0FBQXNMQUNBQVFaU1NCUkM5QVF1TEFRRURmeUFBS0FKTVFRQklCSDlCQUFVZ0FCQ0ZBUXRGSUFBUXZ3SWFJQUFnQUNnQ0RCRUFBQnBGQkVBZ0FCQ0VBUXNnQUMwQUFFRUJjVVVFUUJDRUF5RUNJQUFvQWpnaEFTQUFLQUkwSWdNRVFDQURJQUUyQWpnTElBRUVRQ0FCSUFNMkFqUUxJQUFnQWlnQ0FFWUVRQ0FDSUFFMkFnQUxRYVRvQkJEOUFTQUFLQUpnRUVnZ0FCQklDd3RmQUNBQVFvQ0FnSUNBZ0lENHYzODNBd2dnQUVLQWdJQ0FnSUNBK0w5L053TUFJQUJCRUdvZ0FSQlRHaU1BUVJCcklnRWtBQ0FCRUw4RklBQWdBU2dDQ0xkRWplMjFvUGZHc0Q2aUlBRXBBd0M1b0RrREFDQUJRUkJxSkFBZ0FBc3ZBUUo5SUFBcUFnQWlBaUFCS2dJQUlnTmRCRUJCQVE4TElBSWdBMTRFUUVFQUR3c2dBQ2dDQkNBQktBSUVTUXNSQUNBQUlBRWdBU2dDQUNnQ0ZCRUNBQXNQQUNBQUlBQW9BZ0FvQWhBUkFBQUxKUUFnQUNBQUxRQUxRWUFCY1NBQlFmOEFjWEk2QUFzZ0FDQUFMUUFMUWY4QWNUb0FDd3NMQUNBQVFZeVNCUkM5QVF1eEJnSUpmd0o5SXdCQkVHc2lCaVFBSUFGQkFFNEVRQ0FHSUFFMkFnZ0NRQ0FBUWR3QWFpSUVJQVpCQ0dvUWlBUWlBRVVFUUNBR1FRRTJBZ3dnQmlBQk5nSUlJd0JCRUdzaUNDUUFRUUFoQVNNQVFSQnJJZ1VrQUNBR0tBSUlJUUFnQ0FKL0FrQWdCQ2dDQkNJQ1JRMEFJQVFvQWdBQ2Z5QUNRUUZySUFCeElBSnBJZ05CQVUwTkFCb2dBQ0FBSUFKSkRRQWFJQUFnQW5BTElnRkJBblJxS0FJQUlnZEZEUUFnQWtFQmF5RUpJQU5CQVVzaENnTkFJQWNvQWdBaUIwVU5BU0FBSUFjb0FnUWlBMGNFUUFKQUlBcEZCRUFnQXlBSmNTRUREQUVMSUFJZ0Ewc05BQ0FESUFKd0lRTUxJQUVnQTBjTkFnd0JDeUFIS0FJSUlBQkhEUUFMUVFBTUFRdEJFQkJtSVFNZ0JTQUVRUWhxTmdJSUlBVWdBellDQkNBRElBQTJBZ1FnQTBFQU5nSUFJQU1nQmlnQ0NEWUNDQ0FESUFZb0FndzJBZ3dnQlVFQk9nQU1Ba0JCQUNBQ0lBUW9BZ3hCQVdxeklnc2dCQ29DRUNJTUlBS3psRjRiRFFBZ0JDQUNJQUpCQVd0eFFRQkhJQUpCQTBseUlBSkJBWFJ5SWdFQ2Z5QUxJQXlWalNJTFF3QUFnRTlkSUF0REFBQUFBR0J4QkVBZ0M2a01BUXRCQUFzaUFpQUJJQUpMR3hDY0F5QUVLQUlFSWdJZ0FrRUJheUlCY1VVRVFDQUFJQUZ4SVFFTUFRc2dBQ0FDU1FSQUlBQWhBUXdCQ3lBQUlBSndJUUVMQWtBZ0FVRUNkQ0lCSUFRb0FnQnFLQUlBSWdCRkJFQWdCU2dDQkNBRUtBSUlOZ0lBSUFRZ0JTZ0NCRFlDQ0NBRUtBSUFJQUZxSUFSQkNHbzJBZ0FnQlNnQ0JDSUhLQUlBSWdCRkRRRWdBQ2dDQkNFREFrQWdBaUFDUVFGcklnQnhSUVJBSUFBZ0EzRWhBd3dCQ3lBQ0lBTkxEUUFnQXlBQ2NDRURDeUFFS0FJQUlBTkJBblJxSUFjMkFnQWdCU2dDQkNFSERBRUxJQVVvQWdRZ0FDZ0NBRFlDQUNBQUlBVW9BZ1FpQnpZQ0FBc2dCVUVBTmdJRUlBUWdCQ2dDREVFQmFqWUNEQ0FGS0FJRUlRQWdCVUVBTmdJRUlBQUVRQ0FBRUVnTFFRRUxPZ0FNSUFnZ0J6WUNDQ0FGUVJCcUpBQWdCaUFJS0FJSU5nSUFJQVlnQ0MwQUREb0FCQ0FJUVJCcUpBQU1BUXNnQUNBQUtBSU1RUUZxTmdJTUN5QUdRUkJxSkFBUEMwSHdpQVZCcCtvQUVFZEI3dVlBRUVkQmpCa1FSMEdpQWhCS1FjY2RFRWRCeGV3QUVFY1FTUkJZQUF1UkJBRURmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FCUVFCT0JFQWdBU0FBS0FJMElnVk9EUUVnQWtFQVNBMENJQUlnQUNnQ09DSUdUZzBESUFOQkFFZ05CQ0FESUFBb0Fqd2lCMDROQlNBRVFRQklEUVlnQkNBQUtBSkFUZzBISUFJZ0JXd2dBV29pQVNBQUtBSlVJQU5zYWlBQUtBSllJQVJzYWlJQUlBUWdCMndnQTJvZ0JTQUdiR3dnQVdwS0RRZ2dBQThMUWZDSUJVSDc3UUFRUjBIdTVnQVFSMEdNR1JCSFFhVUJFRXBCeHgwUVIwSEM3d0FRUnhCSkRBZ0xRZkNJQlVHYThRQVFSMEh1NWdBUVIwR01HUkJIUWFZQkVFcEJ4eDBRUjBIQzd3QVFSeEJKREFjTFFmQ0lCVUhEOHdBUVIwSHU1Z0FRUjBHTUdSQkhRYWNCRUVwQnh4MFFSMEdQOUFBUVJ4QkpEQVlMUWZDSUJVSFA5Z0FRUjBIdTVnQVFSMEdNR1JCSFFhZ0JFRXBCeHgwUVIwR1A5QUFRUnhCSkRBVUxRZkNJQlVHdCtBQVFSMEh1NWdBUVIwR01HUkJIUWFrQkVFcEJ4eDBRUjBHaCtnQVFSeEJKREFRTFFmQ0lCVUcyK3dBUVIwSHU1Z0FRUjBHTUdSQkhRYW9CRUVwQnh4MFFSMEdoK2dBUVJ4QkpEQU1MUWZDSUJVR0cvZ0FRUjBIdTVnQVFSMEdNR1JCSFFhc0JFRXBCeHgwUVIwR1kvd0FRUnhCSkRBSUxRZkNJQlVHMmdBRVFSMEh1NWdBUVIwR01HUkJIUWF3QkVFcEJ4eDBRUjBHWS93QVFSeEJKREFFTFFmQ0lCVUdoZ3dFUVIwSHU1Z0FRUjBHTUdSQkhRYkFCRUVwQnh4MFFSMEhGN0FBUVJ4QkpDeEJZQUFzUkFDQUFJQUVnQUNnQ0FDZ0NMQkVEQUF2T0NRSUVmd1IrSXdCQjhBQnJJZ1lrQUNBRVF2Ly8vLy8vLy8vLy93Q0RJUWtDUUFKQUlBRlFJZ1VnQWtMLy8vLy8vLy8vLy84QWd5SUtRb0NBZ0lDQWdNRC8vd0I5UW9DQWdJQ0FnTUNBZ0g5VUlBcFFHMFVFUUNBRFFnQlNJQWxDZ0lDQWdJQ0F3UC8vQUgwaUMwS0FnSUNBZ0lEQWdJQi9WaUFMUW9DQWdJQ0FnTUNBZ0g5Ukd3MEJDeUFGSUFwQ2dJQ0FnSUNBd1AvL0FGUWdDa0tBZ0lDQWdJREEvLzhBVVJ0RkJFQWdBa0tBZ0lDQWdJQWdoQ0VFSUFFaEF3d0NDeUFEVUNBSlFvQ0FnSUNBZ01ELy93QlVJQWxDZ0lDQWdJQ0F3UC8vQUZFYlJRUkFJQVJDZ0lDQWdJQ0FJSVFoQkF3Q0N5QUJJQXBDZ0lDQWdJQ0F3UC8vQUlXRVVBUkFRb0NBZ0lDQWdPRC8vd0FnQWlBQklBT0ZJQUlnQklWQ2dJQ0FnSUNBZ0lDQWY0V0VVQ0lGR3lFRVFnQWdBU0FGR3lFRERBSUxJQU1nQ1VLQWdJQ0FnSURBLy84QWhZUlFEUUVnQVNBS2hGQUVRQ0FESUFtRVFnQlNEUUlnQVNBRGd5RURJQUlnQklNaEJBd0NDeUFESUFtRVVFVU5BQ0FCSVFNZ0FpRUVEQUVMSUFNZ0FTQUJJQU5VSUFrZ0NsWWdDU0FLVVJzaUNCc2hDaUFFSUFJZ0NCc2lERUwvLy8vLy8vOC9neUVKSUFJZ0JDQUlHeUlMUWpDSXAwSC8vd0Z4SVFjZ0RFSXdpS2RCLy84QmNTSUZSUVJBSUFaQjRBQnFJQW9nQ1NBS0lBa2dDVkFpQlJ0NUlBVkJCblN0ZktjaUJVRVBheENPQVNBR0tRTm9JUWtnQmlrRFlDRUtRUkFnQldzaEJRc2dBU0FESUFnYklRTWdDMEwvLy8vLy8vOC9neUVCSUFjRWZpQUJCU0FHUWRBQWFpQURJQUVnQXlBQklBRlFJZ2NiZVNBSFFRWjByWHluSWdkQkQyc1FqZ0ZCRUNBSGF5RUhJQVlwQTFBaEF5QUdLUU5ZQzBJRGhpQURRajJJaEVLQWdJQ0FnSUNBQklRaEFTQUpRZ09HSUFwQ1BZaUVJQUlnQklVaEJBSitJQU5DQTRZaUFpQUZJQWRHRFFBYUlBVWdCMnNpQjBIL0FFc0VRRUlBSVFGQ0FRd0JDeUFHUVVCcklBSWdBVUdBQVNBSGF4Q09BU0FHUVRCcUlBSWdBU0FIRVBZQklBWXBBemdoQVNBR0tRTXdJQVlwQTBBZ0Jpa0RTSVJDQUZLdGhBc2hDVUtBZ0lDQWdJQ0FCSVFoQ3lBS1FnT0dJUW9DUUNBRVFnQlRCRUJDQUNFRFFnQWhCQ0FKSUFxRklBRWdDNFdFVUEwQ0lBb2dDWDBoQWlBTElBRjlJQWtnQ2xhdGZTSUVRdi8vLy8vLy8vOERWZzBCSUFaQklHb2dBaUFFSUFJZ0JDQUVVQ0lIRzNrZ0IwRUdkSzE4cDBFTWF5SUhFSTRCSUFVZ0Iyc2hCU0FHS1FNb0lRUWdCaWtESUNFQ0RBRUxJQWtnQ253aUFpQUpWSzBnQVNBTGZId2lCRUtBZ0lDQWdJQ0FDSU5RRFFBZ0NVSUJneUFFUWorR0lBSkNBWWlFaENFQ0lBVkJBV29oQlNBRVFnR0lJUVFMSUF4Q2dJQ0FnSUNBZ0lDQWY0TWhBeUFGUWYvL0FVNEVRQ0FEUW9DQWdJQ0FnTUQvL3dDRUlRUkNBQ0VEREFFTFFRQWhCd0pBSUFWQkFFb0VRQ0FGSVFjTUFRc2dCa0VRYWlBQ0lBUWdCVUgvQUdvUWpnRWdCaUFDSUFSQkFTQUZheEQyQVNBR0tRTUFJQVlwQXhBZ0Jpa0RHSVJDQUZLdGhDRUNJQVlwQXdnaEJBc2dCRUk5aGlBQ1FnT0loQ0VCSUFSQ0E0aEMvLy8vLy8vL1A0TWdCNjFDTUlhRUlBT0VJUVFDUUFKQUlBS25RUWR4SWdWQkJFY0VRQ0FFSUFFZ0FTQUZRUVJMclh3aUExYXRmQ0VFREFFTElBUWdBU0FCSUFGQ0FZTjhJZ05Xclh3aEJBd0JDeUFGUlEwQkN3c2dBQ0FETndNQUlBQWdCRGNEQ0NBR1FmQUFhaVFBQzBRQkFYOGpBRUVRYXlJRkpBQWdCU0FDTmdJTUlBVWdCRFlDQ0NBRlFRUnFJQVZCREdvUXZBRWdBQ0FCSUFNZ0JTZ0NDQkQ0QVNFQUVMc0JJQVZCRUdva0FDQUFDd2tBSUFBUVZSQzBBd3QvQWdKL0FYNGpBRUVRYXlJREpBQWdBQUorSUFGRkJFQkNBQXdCQ3lBRElBRWdBVUVmZFNJQ2N5QUNheUlDclVJQUlBSm5JZ0pCMFFCcUVJNEJJQU1wQXdoQ2dJQ0FnSUNBd0FDRlFaNkFBU0FDYTYxQ01JWjhJQUZCZ0lDQWdIaHhyVUlnaG9RaEJDQURLUU1BQ3pjREFDQUFJQVEzQXdnZ0EwRVFhaVFBQ3hjQkFYOGdBU0FBS0FJQVJnUi9JQUFvQWdRRlFRQUxDeE1BSUFCQnh0UUVRYmpJQkVHMHlBUVFzZ1lMQWdBTE1RRUNmU0FCS2dJQUlBQXFBZ0FpQTVNZ0Fpb0NCQ0FBS2dJRUlnU1RsQ0FCS2dJRUlBU1RJQUlxQWdBZ0E1T1Vrd3NNQUNBQUlBRW9BZ0EyQWdBTEJ3QWdBQ0FCUmd2Y0FRRUJmU0FBS2dJQUlRSWdBQ0FCS2dJQU9BSUFJQUVnQWpnQ0FDQUFLZ0lFSVFJZ0FDQUJLZ0lFT0FJRUlBRWdBamdDQkNBQUtnSUlJUUlnQUNBQktnSUlPQUlJSUFFZ0FqZ0NDQ0FBS2dJTUlRSWdBQ0FCS2dJTU9BSU1JQUVnQWpnQ0RDQUFLZ0lRSVFJZ0FDQUJLZ0lRT0FJUUlBRWdBamdDRUNBQUtnSVVJUUlnQUNBQktnSVVPQUlVSUFFZ0FqZ0NGQ0FBS2dJWUlRSWdBQ0FCS2dJWU9BSVlJQUVnQWpnQ0dDQUFLZ0ljSVFJZ0FDQUJLZ0ljT0FJY0lBRWdBamdDSENBQUtnSWdJUUlnQUNBQktnSWdPQUlnSUFFZ0FqZ0NJQXZqQXdFRmZ5TUFRUkJySWdRa0FDQUVJQUFvQWdBaUJVRUlheWdDQUNJRE5nSU1JQVFnQUNBRGFqWUNCQ0FFSUFWQkJHc29BZ0EyQWdnZ0JDZ0NDQ0lGSUFKQkFCQjlJUU1nQkNnQ0JDRUdBa0FnQXdSQUlBUW9BZ3doQUNNQVFVQnFJZ0VrQUNBQlFVQnJKQUJCQUNBR0lBQWJJUU1NQVFzakFFRkFhaUlESkFBZ0FDQUdUZ1JBSUFOQ0FEY0NIQ0FEUWdBM0FpUWdBMElBTndJc0lBTkNBRGNDRkNBRFFRQTJBaEFnQXlBQ05nSU1JQU1nQlRZQ0JDQURRUUEyQWp3Z0EwS0JnSUNBZ0lDQWdBRTNBalFnQXlBQU5nSUlJQVVnQTBFRWFpQUdJQVpCQVVFQUlBVW9BZ0FvQWhRUkRBQWdBRUVBSUFNb0Fod2JJUWNMSUFOQlFHc2tBQ0FISWdNTkFDTUFRVUJxSWdNa0FDQURRUUEyQWhBZ0F5QUJOZ0lNSUFNZ0FEWUNDQ0FESUFJMkFnUkJBQ0VBSUFOQkZHcEJBRUVuL0FzQUlBTkJBRFlDUENBRFFRRTZBRHNnQlNBRFFRUnFJQVpCQVVFQUlBVW9BZ0FvQWhnUkJnQUNRQUpBQWtBZ0F5Z0NLQTRDQUFFQ0N5QURLQUlZUVFBZ0F5Z0NKRUVCUmh0QkFDQURLQUlnUVFGR0cwRUFJQU1vQWl4QkFVWWJJUUFNQVFzZ0F5Z0NIRUVCUndSQUlBTW9BaXdOQVNBREtBSWdRUUZIRFFFZ0F5Z0NKRUVCUncwQkN5QURLQUlVSVFBTElBTkJRR3NrQUNBQUlRTUxJQVJCRUdva0FDQURDdzhBSUFBZ0FDZ0NBQ2dDREJFQUFBc0hBQ0FBRUV0RkN4RUFJQUFnQVNBQktBSUFLQUljRVFJQUN4RUFJQUFnQVNBQktBSUFLQUlZRVFJQUN5NEFJQUFnQUNnQ0NFR0FnSUNBZUhFZ0FVSC8vLy8vQjNGeU5nSUlJQUFnQUNnQ0NFR0FnSUNBZUhJMkFnZ0xDUUFnQUNBQk5nSUFDd3NBSUFBZ0FTQUNFT01DQ3hNQUlBQWdBU0FDSUFBb0FnQW9BZ3dSQkFBTEl3RUJmeUFDUVFCT0JIOGdBQ2dDQ0NBQ1FRSjBhaWdDQUNBQmNVRUFSd1ZCQUFzTENBQWdBRUgvQVhFTGZRRUNmeU1BUVJCcklnUWtBQ01BUVNCcklnTWtBQ0FEUVJocUlBRWdBU0FDYWhEbEFpQURRUkJxSUFNb0FoZ2dBeWdDSENBQUVONEVJQU1nQVNBREtBSVFFT1FDTmdJTUlBTWdBQ0FES0FJVUVQUUJOZ0lJSUFSQkNHb2dBMEVNYWlBRFFRaHFFTElCSUFOQklHb2tBQ0FFS0FJTUdpQUVRUkJxSkFBTFV3RUNmeUFCSUFKc0lRUUNRQ0FES0FKTVFRQklCRUFnQUNBRUlBTVFpQU1oQUF3QkN5QURFSVVCSUFBZ0JDQURFSWdESVFCRkRRQWdBeENFQVFzZ0FDQUVSZ1JBSUFKQkFDQUJHdzhMSUFBZ0FXNEw3aGdCQW44akFFRVFheUlFSkFBZ0JDQUFOZ0lNSUFRZ0FUWUNDQ0FFSUFJMkFnUWdCQ2dDRENFQUlBUW9BZ2doQWlBRUtBSUVJUU1qQUVFZ2F5SUJKQUFnQVNBQU5nSVlJQUVnQWpZQ0ZDQUJJQU0yQWhBQ1FDQUJLQUlVUlFSQUlBRkJBRFlDSEF3QkN5QUJRUUUyQWd3Z0FTMEFEQVJBSUFFb0FoUWhBaUFCS0FJUUlRTWpBRUVnYXlJQUlBRW9BaGcyQWh3Z0FDQUNOZ0lZSUFBZ0F6WUNGQ0FBSUFBb0FodzJBaEFnQUNBQUtBSVFRWDl6TmdJUUEwQWdBQ2dDRkFSL0lBQW9BaGhCQTNGQkFFY0ZRUUFMUVFGeEJFQWdBQ2dDRUNFQ0lBQWdBQ2dDR0NJRFFRRnFOZ0lZSUFBZ0F5MEFBQ0FDYzBIL0FYRkJBblJCb0tvQ2FpZ0NBQ0FBS0FJUVFRaDJjellDRUNBQUlBQW9BaFJCQVdzMkFoUU1BUXNMSUFBZ0FDZ0NHRFlDREFOQUlBQW9BaFJCSUU4RVFDQUFJQUFvQWd3aUFrRUVhallDRENBQUlBSW9BZ0FnQUNnQ0VITTJBaEFnQUNBQUtBSVFRUmgyUVFKMFFhQ3FBbW9vQWdBZ0FDZ0NFRUVRZGtIL0FYRkJBblJCb0xJQ2FpZ0NBQ0FBS0FJUVFmOEJjVUVDZEVHZ3dnSnFLQUlBSUFBb0FoQkJDSFpCL3dGeFFRSjBRYUM2QW1vb0FnQnpjM00yQWhBZ0FDQUFLQUlNSWdKQkJHbzJBZ3dnQUNBQ0tBSUFJQUFvQWhCek5nSVFJQUFnQUNnQ0VFRVlka0VDZEVHZ3FnSnFLQUlBSUFBb0FoQkJFSFpCL3dGeFFRSjBRYUN5QW1vb0FnQWdBQ2dDRUVIL0FYRkJBblJCb01JQ2FpZ0NBQ0FBS0FJUVFRaDJRZjhCY1VFQ2RFR2d1Z0pxS0FJQWMzTnpOZ0lRSUFBZ0FDZ0NEQ0lDUVFScU5nSU1JQUFnQWlnQ0FDQUFLQUlRY3pZQ0VDQUFJQUFvQWhCQkdIWkJBblJCb0tvQ2FpZ0NBQ0FBS0FJUVFSQjJRZjhCY1VFQ2RFR2dzZ0pxS0FJQUlBQW9BaEJCL3dGeFFRSjBRYURDQW1vb0FnQWdBQ2dDRUVFSWRrSC9BWEZCQW5SQm9Mb0NhaWdDQUhOemN6WUNFQ0FBSUFBb0Fnd2lBa0VFYWpZQ0RDQUFJQUlvQWdBZ0FDZ0NFSE0yQWhBZ0FDQUFLQUlRUVJoMlFRSjBRYUNxQW1vb0FnQWdBQ2dDRUVFUWRrSC9BWEZCQW5SQm9MSUNhaWdDQUNBQUtBSVFRZjhCY1VFQ2RFR2d3Z0pxS0FJQUlBQW9BaEJCQ0haQi93RnhRUUowUWFDNkFtb29BZ0J6YzNNMkFoQWdBQ0FBS0FJTUlnSkJCR28yQWd3Z0FDQUNLQUlBSUFBb0FoQnpOZ0lRSUFBZ0FDZ0NFRUVZZGtFQ2RFR2dxZ0pxS0FJQUlBQW9BaEJCRUhaQi93RnhRUUowUWFDeUFtb29BZ0FnQUNnQ0VFSC9BWEZCQW5SQm9NSUNhaWdDQUNBQUtBSVFRUWgyUWY4QmNVRUNkRUdndWdKcUtBSUFjM056TmdJUUlBQWdBQ2dDRENJQ1FRUnFOZ0lNSUFBZ0FpZ0NBQ0FBS0FJUWN6WUNFQ0FBSUFBb0FoQkJHSFpCQW5SQm9Lb0NhaWdDQUNBQUtBSVFRUkIyUWY4QmNVRUNkRUdnc2dKcUtBSUFJQUFvQWhCQi93RnhRUUowUWFEQ0Ftb29BZ0FnQUNnQ0VFRUlka0gvQVhGQkFuUkJvTG9DYWlnQ0FITnpjellDRUNBQUlBQW9BZ3dpQWtFRWFqWUNEQ0FBSUFJb0FnQWdBQ2dDRUhNMkFoQWdBQ0FBS0FJUVFSaDJRUUowUWFDcUFtb29BZ0FnQUNnQ0VFRVFka0gvQVhGQkFuUkJvTElDYWlnQ0FDQUFLQUlRUWY4QmNVRUNkRUdnd2dKcUtBSUFJQUFvQWhCQkNIWkIvd0Z4UVFKMFFhQzZBbW9vQWdCemMzTTJBaEFnQUNBQUtBSU1JZ0pCQkdvMkFnd2dBQ0FDS0FJQUlBQW9BaEJ6TmdJUUlBQWdBQ2dDRUVFWWRrRUNkRUdncWdKcUtBSUFJQUFvQWhCQkVIWkIvd0Z4UVFKMFFhQ3lBbW9vQWdBZ0FDZ0NFRUgvQVhGQkFuUkJvTUlDYWlnQ0FDQUFLQUlRUVFoMlFmOEJjVUVDZEVHZ3VnSnFLQUlBYzNOek5nSVFJQUFnQUNnQ0ZFRWdhellDRkF3QkN3c0RRQ0FBS0FJVVFRUlBCRUFnQUNBQUtBSU1JZ0pCQkdvMkFnd2dBQ0FDS0FJQUlBQW9BaEJ6TmdJUUlBQWdBQ2dDRUVFWWRrRUNkRUdncWdKcUtBSUFJQUFvQWhCQkVIWkIvd0Z4UVFKMFFhQ3lBbW9vQWdBZ0FDZ0NFRUgvQVhGQkFuUkJvTUlDYWlnQ0FDQUFLQUlRUVFoMlFmOEJjVUVDZEVHZ3VnSnFLQUlBYzNOek5nSVFJQUFnQUNnQ0ZFRUVhellDRkF3QkN3c2dBQ0FBS0FJTU5nSVlJQUFvQWhRRVFBTkFJQUFvQWhBaEFpQUFJQUFvQWhnaUEwRUJhallDR0NBQUlBTXRBQUFnQW5OQi93RnhRUUowUWFDcUFtb29BZ0FnQUNnQ0VFRUlkbk0yQWhBZ0FDQUFLQUlVUVFGcklnSTJBaFFnQWcwQUN3c2dBQ0FBS0FJUVFYOXpOZ0lRSUFFZ0FDZ0NFRFlDSEF3QkN5QUJLQUlVSVFJZ0FTZ0NFQ0VESXdCQklHc2lBQ0FCS0FJWU5nSWNJQUFnQWpZQ0dDQUFJQU0yQWhRZ0FDQUFLQUljUVFoMlFZRCtBM0VnQUNnQ0hFRVlkbW9nQUNnQ0hFR0EvZ054UVFoMGFpQUFLQUljUWY4QmNVRVlkR28yQWhBZ0FDQUFLQUlRUVg5ek5nSVFBMEFnQUNnQ0ZBUi9JQUFvQWhoQkEzRkJBRWNGUVFBTFFRRnhCRUFnQUNnQ0VFRVlkaUVDSUFBZ0FDZ0NHQ0lEUVFGcU5nSVlJQUFnQXkwQUFDQUNjMEVDZEVHZ3lnSnFLQUlBSUFBb0FoQkJDSFJ6TmdJUUlBQWdBQ2dDRkVFQmF6WUNGQXdCQ3dzZ0FDQUFLQUlZTmdJTUEwQWdBQ2dDRkVFZ1R3UkFJQUFnQUNnQ0RDSUNRUVJxTmdJTUlBQWdBaWdDQUNBQUtBSVFjellDRUNBQUlBQW9BaEJCR0haQkFuUkJvT0lDYWlnQ0FDQUFLQUlRUVJCMlFmOEJjVUVDZEVHZzJnSnFLQUlBSUFBb0FoQkIvd0Z4UVFKMFFhREtBbW9vQWdBZ0FDZ0NFRUVJZGtIL0FYRkJBblJCb05JQ2FpZ0NBSE56Y3pZQ0VDQUFJQUFvQWd3aUFrRUVhallDRENBQUlBSW9BZ0FnQUNnQ0VITTJBaEFnQUNBQUtBSVFRUmgyUVFKMFFhRGlBbW9vQWdBZ0FDZ0NFRUVRZGtIL0FYRkJBblJCb05vQ2FpZ0NBQ0FBS0FJUVFmOEJjVUVDZEVHZ3lnSnFLQUlBSUFBb0FoQkJDSFpCL3dGeFFRSjBRYURTQW1vb0FnQnpjM00yQWhBZ0FDQUFLQUlNSWdKQkJHbzJBZ3dnQUNBQ0tBSUFJQUFvQWhCek5nSVFJQUFnQUNnQ0VFRVlka0VDZEVHZzRnSnFLQUlBSUFBb0FoQkJFSFpCL3dGeFFRSjBRYURhQW1vb0FnQWdBQ2dDRUVIL0FYRkJBblJCb01vQ2FpZ0NBQ0FBS0FJUVFRaDJRZjhCY1VFQ2RFR2cwZ0pxS0FJQWMzTnpOZ0lRSUFBZ0FDZ0NEQ0lDUVFScU5nSU1JQUFnQWlnQ0FDQUFLQUlRY3pZQ0VDQUFJQUFvQWhCQkdIWkJBblJCb09JQ2FpZ0NBQ0FBS0FJUVFSQjJRZjhCY1VFQ2RFR2cyZ0pxS0FJQUlBQW9BaEJCL3dGeFFRSjBRYURLQW1vb0FnQWdBQ2dDRUVFSWRrSC9BWEZCQW5SQm9OSUNhaWdDQUhOemN6WUNFQ0FBSUFBb0Fnd2lBa0VFYWpZQ0RDQUFJQUlvQWdBZ0FDZ0NFSE0yQWhBZ0FDQUFLQUlRUVJoMlFRSjBRYURpQW1vb0FnQWdBQ2dDRUVFUWRrSC9BWEZCQW5SQm9Ob0NhaWdDQUNBQUtBSVFRZjhCY1VFQ2RFR2d5Z0pxS0FJQUlBQW9BaEJCQ0haQi93RnhRUUowUWFEU0Ftb29BZ0J6YzNNMkFoQWdBQ0FBS0FJTUlnSkJCR28yQWd3Z0FDQUNLQUlBSUFBb0FoQnpOZ0lRSUFBZ0FDZ0NFRUVZZGtFQ2RFR2c0Z0pxS0FJQUlBQW9BaEJCRUhaQi93RnhRUUowUWFEYUFtb29BZ0FnQUNnQ0VFSC9BWEZCQW5SQm9Nb0NhaWdDQUNBQUtBSVFRUWgyUWY4QmNVRUNkRUdnMGdKcUtBSUFjM056TmdJUUlBQWdBQ2dDRENJQ1FRUnFOZ0lNSUFBZ0FpZ0NBQ0FBS0FJUWN6WUNFQ0FBSUFBb0FoQkJHSFpCQW5SQm9PSUNhaWdDQUNBQUtBSVFRUkIyUWY4QmNVRUNkRUdnMmdKcUtBSUFJQUFvQWhCQi93RnhRUUowUWFES0Ftb29BZ0FnQUNnQ0VFRUlka0gvQVhGQkFuUkJvTklDYWlnQ0FITnpjellDRUNBQUlBQW9BZ3dpQWtFRWFqWUNEQ0FBSUFJb0FnQWdBQ2dDRUhNMkFoQWdBQ0FBS0FJUVFSaDJRUUowUWFEaUFtb29BZ0FnQUNnQ0VFRVFka0gvQVhGQkFuUkJvTm9DYWlnQ0FDQUFLQUlRUWY4QmNVRUNkRUdneWdKcUtBSUFJQUFvQWhCQkNIWkIvd0Z4UVFKMFFhRFNBbW9vQWdCemMzTTJBaEFnQUNBQUtBSVVRU0JyTmdJVURBRUxDd05BSUFBb0FoUkJCRThFUUNBQUlBQW9BZ3dpQWtFRWFqWUNEQ0FBSUFJb0FnQWdBQ2dDRUhNMkFoQWdBQ0FBS0FJUVFSaDJRUUowUWFEaUFtb29BZ0FnQUNnQ0VFRVFka0gvQVhGQkFuUkJvTm9DYWlnQ0FDQUFLQUlRUWY4QmNVRUNkRUdneWdKcUtBSUFJQUFvQWhCQkNIWkIvd0Z4UVFKMFFhRFNBbW9vQWdCemMzTTJBaEFnQUNBQUtBSVVRUVJyTmdJVURBRUxDeUFBSUFBb0FndzJBaGdnQUNnQ0ZBUkFBMEFnQUNnQ0VFRVlkaUVDSUFBZ0FDZ0NHQ0lEUVFGcU5nSVlJQUFnQXkwQUFDQUNjMEVDZEVHZ3lnSnFLQUlBSUFBb0FoQkJDSFJ6TmdJUUlBQWdBQ2dDRkVFQmF5SUNOZ0lVSUFJTkFBc0xJQUFnQUNnQ0VFRi9jellDRUNBQklBQW9BaEJCQ0haQmdQNERjU0FBS0FJUVFSaDJhaUFBS0FJUVFZRCtBM0ZCQ0hScUlBQW9BaEJCL3dGeFFSaDBhallDSEFzZ0FTZ0NIQ0FCUVNCcUpBQWdCRUVRYWlRQUN4a0FJQUFnQVVIU3ZnRkJ0OU1FUWJESUJFR3N5QVFRbndNTEJ3QWdBQkJhR2dzU0FDQUFLQUlBSWdBRVFDQUFFTGNFR2dzTEVRQWdBQ0FCS0FJQUVMY0VOZ0lBSUFBTFJRRUJmeUFBS0FJQUlRSWdBUkJ1SVFBZ0FrRUlhaUlCRU1jQklBQkxCSDhnQVNBQUVJWUNLQUlBUVFCSEJVRUFDMFVFUUJCMUFBc2dBa0VJYWlBQUVJWUNLQUlBQzBFQkFYOGdBQ0FCTndOd0lBQWdBQ2dDTENBQUtBSUVJZ0pyckRjRGVDQUFJQUZRSUFFZ0FDZ0NDQ0lBSUFKcnJGbHlCSDhnQUFVZ0FpQUJwMm9MTmdKb0Mwc0JBbndnQUNBQUlBQ2lJZ0dpSWdJZ0FTQUJvcUlnQVVTblJqdU1oODNHUHFKRWRPZks0dmtBS3IrZ29pQUNJQUZFc3Z0dWlSQVJnVCtpUkhlc3kxUlZWY1cvb0tJZ0FLQ2d0Z3RQQVFGOElBQWdBS0lpQUNBQUlBQ2lJZ0dpSUFCRWFWRHU0RUtUK1Q2aVJDY2VEK2lId0ZhL29LSWdBVVJDT2dYaFUxV2xQNklnQUVTQlhnejkvLy9mdjZKRUFBQUFBQUFBOEQrZ29LQzJDMUVCQW44Z0FDZ0NCQ0lCQkVBZ0FVRi8vaDRDQkVVRVFDQUJJQUVvQWdBb0FnZ1JBUUFDUUNBQlFRaHFJZ0wrRUFJQUJFQWdBaENjQkVGL1J3MEJDeUFCSUFFb0FnQW9BaEFSQVFBTEN3c2dBQXVYQVFFRGZ5TUFRUkJySWdRa0FDQUVJQUUyQWd3Z0JDQUROZ0lJSUFSQkJHb2dCRUVNYWhDOEFTQUVLQUlJSVFNakFFRVFheUlCSkFBZ0FTQUROZ0lNSUFFZ0F6WUNDRUYvSVFVQ1FFRUFRUUFnQWlBREVQZ0JJZ05CQUVnTkFDQUFJQU5CQVdvaUF4Qk5JZ0EyQWdBZ0FFVU5BQ0FBSUFNZ0FpQUJLQUlNRVBnQklRVUxJQUZCRUdva0FCQzdBU0FFUVJCcUpBQWdCUXRqQUNBQ0tBSUVRYkFCY1NJQ1FTQkdCRUFnQVE4TEFrQWdBa0VRUncwQUFrQUNRQ0FBTFFBQUlnSkJLMnNPQXdBQkFBRUxJQUJCQVdvUEN5QUNRVEJISUFFZ0FHdEJBa2h5RFFBZ0FDMEFBVUVnY2tINEFFY05BQ0FBUVFKcUlRQUxJQUFMTGdBQ1FDQUFLQUlFUWNvQWNTSUFCRUFnQUVIQUFFWUVRRUVJRHdzZ0FFRUlSdzBCUVJBUEMwRUFEd3RCQ2d1QUFRRUNmeU1BUVJCcklnUWtBQ01BUVNCcklnTWtBQ0FEUVJocUlBRWdBU0FDUVFKMGFoRGxBaUFEUVJCcUlBTW9BaGdnQXlnQ0hDQUFFTndFSUFNZ0FTQURLQUlRRU9RQ05nSU1JQU1nQUNBREtBSVVFUFFCTmdJSUlBUkJDR29nQTBFTWFpQURRUWhxRUxJQklBTkJJR29rQUNBRUtBSU1HaUFFUVJCcUpBQUw0d0VDQkg0Q2Z5TUFRUkJySWdZa0FDQUJ2U0lGUXYvLy8vLy8vLzhIZ3lFQ0lBQUNmaUFGUWpTSVF2OFBneUlEVUVVRVFDQURRdjhQVWdSQUlBSkNCSWdoQkNBRFFvRDRBSHdoQXlBQ1FqeUdEQUlMSUFKQ0JJZ2hCRUwvL3dFaEF5QUNRanlHREFFTElBSlFCRUJDQUNFRFFnQU1BUXNnQmlBQ1FnQWdCYWRuUVNCeUlBSkNJSWluWnlBQ1FvQ0FnSUFRVkJzaUIwRXhhaENPQVVHTStBQWdCMnV0SVFNZ0Jpa0RDRUtBZ0lDQWdJREFBSVVoQkNBR0tRTUFDemNEQUNBQUlBVkNnSUNBZ0lDQWdJQ0FmNE1nQTBJd2hvUWdCSVEzQXdnZ0JrRVFhaVFBQ3hBQUlBQW9BZ1FnQUNnQ0FHdEJBblVMZHdBZ0FDQUNJQUVxQWdDVU9BSUFJQUFnQWlBQktnSUVsRGdDQkNBQUlBSWdBU29DQ0pRNEFnZ2dBQ0FDSUFFcUFneVVPQUlNSUFBZ0FpQUJLZ0lRbERnQ0VDQUFJQUlnQVNvQ0ZKUTRBaFFnQUNBQ0lBRXFBaGlVT0FJWUlBQWdBaUFCS2dJY2xEZ0NIQ0FBSUFJZ0FTb0NJSlE0QWlBTEN3QWdBQ0FCTmdJQUlBQUxoQUVCQW44akFFRVFheUlDSkFBZ0FCQ01BUVJBSUFBb0FnQWdBQkRPQVJvUTFRSUxJQUVRU3hvZ0FSQ01BU0VESUFBZ0FTZ0NDRFlDQ0NBQUlBRXBBZ0EzQWdBZ0FVRUFFSnNCSUFKQkFEWUNEQ0FCSUFKQkRHb1FxQUVDUUNBQUlBRkdJZ0VnQTNKRkRRQUxJQUFRakFFZ0FYSkZCRUFnQUJEMUFSb0xJQUpCRUdva0FBdTRBUUVDZnlNQVFSQnJJZ1VrQUNBRklBRTJBZ3hCQUNFQkFrQWdBZ0ovUVFZZ0FDQUZRUXhxRUdBTkFCcEJCQ0FEUWNBQUlBQVFlU0lHRUxNQlJRMEFHaUFESUFZUXBnSWhBUU5BQWtBZ0FCQ0FBUm9nQVVFd2F5RUJJQUFnQlVFTWFoQmdJQVJCQWtoeURRQWdBMEhBQUNBQUVIa2lCaEN6QVVVTkF5QUVRUUZySVFRZ0F5QUdFS1lDSUFGQkNteHFJUUVNQVFzTElBQWdCVUVNYWhCZ1JRMEJRUUlMSUFJb0FnQnlOZ0lBQ3lBRlFSQnFKQUFnQVF1NEFRRUNmeU1BUVJCcklnVWtBQ0FGSUFFMkFneEJBQ0VCQWtBZ0FnSi9RUVlnQUNBRlFReHFFR0VOQUJwQkJDQURRY0FBSUFBUWVpSUdFTFFCUlEwQUdpQURJQVlRcHdJaEFRTkFBa0FnQUJDQkFSb2dBVUV3YXlFQklBQWdCVUVNYWhCaElBUkJBa2h5RFFBZ0EwSEFBQ0FBRUhvaUJoQzBBVVVOQXlBRVFRRnJJUVFnQXlBR0VLY0NJQUZCQ214cUlRRU1BUXNMSUFBZ0JVRU1haEJoUlEwQlFRSUxJQUlvQWdCeU5nSUFDeUFGUVJCcUpBQWdBUXNXQUNBQUlBRWdBaUFESUFBb0FnQW9BakFSQ0FBYUN3NEFJQUFvQWdoQi8vLy8vd2R4QzdRRUFRUi9Jd0JCRUdzaUJTUUFBa0FDUUVHTzhRRWdBU3dBQUJENkFVVUVRQkJaUVJ3MkFnQU1BUXRCQWlFQ0lBRkJLeEQ2QVVVRVFDQUJMUUFBUWZJQVJ5RUNDeUFDUVlBQmNpQUNJQUZCK0FBUStnRWJJZ0pCZ0lBZ2NpQUNJQUZCNVFBUStnRWJJZ0lnQWtIQUFISWdBUzBBQUNJQ1FmSUFSaHNpQkVHQUJISWdCQ0FDUWZjQVJoc2lCRUdBQ0hJZ0JDQUNRZUVBUmhzaEFpQUZRcllETndNQVFaeC9JQUFnQWtHQWdBSnlJQVVRTWhDVUJTSUFRUUJJRFFFakFFRWdheUlESkFBQ2Z3SkFBa0JCanZFQklBRXNBQUFRK2dGRkJFQVFXVUVjTmdJQURBRUxRWmdKRUUwaUFnMEJDMEVBREFFTElBSkJBRUdRQVJCUUdpQUJRU3NRK2dGRkJFQWdBa0VJUVFRZ0FTMEFBRUh5QUVZYk5nSUFDd0pBSUFFdEFBQkI0UUJIQkVBZ0FpZ0NBQ0VCREFFTElBQkJBMEVBRUJJaUFVR0FDSEZGQkVBZ0F5QUJRWUFJY3F3M0F4QWdBRUVFSUFOQkVHb1FFaG9MSUFJZ0FpZ0NBRUdBQVhJaUFUWUNBQXNnQWtGL05nSlFJQUpCZ0FnMkFqQWdBaUFBTmdJOElBSWdBa0dZQVdvMkFpd0NRQ0FCUVFoeERRQWdBeUFEUVJocXJUY0RBQ0FBUVpPb0FTQURFREVOQUNBQ1FRbzJBbEFMSUFKQmpRSTJBaWdnQWtHT0FqWUNKQ0FDUVk4Q05nSWdJQUpCa0FJMkFneEIyZVVFTFFBQVJRUkFJQUpCZnpZQ1RBc2dBaENFQXlJRUtBSUFJZ0UyQWpnZ0FRUkFJQUVnQWpZQ05Bc2dCQ0FDTmdJQVFhVG9CQkQ5QVNBQ0N5QURRU0JxSkFBaUF3MEJJQUFRRUJvTFFRQWhBd3NnQlVFUWFpUUFJQU1MQ1FBZ0FFRUJFUDhCQ3dzQUlBQkJBZjRlQWdBYUM5b0NBUVIvSUFDOFFmLy8vLzhIY1VHQmdJRDhCMGtnQWJ4Qi8vLy8vd2R4UVlDQWdQd0hUWEZGQkVBZ0FDQUJrZzhMSUFHOElnSkJnSUNBL0FOR0JFQWdBQkRHQlE4TElBSkJIblpCQW5FaUJTQUF2Q0lEUVI5MmNpRUVBa0FDUUNBRFFmLy8vLzhIY1NJRFJRUkFBa0FDUUNBRVFRSnJEZ0lBQVFNTFE5c1BTVUFQQzBQYkQwbkFEd3NnQWtILy8vLy9CM0VpQWtHQWdJRDhCMGNFUUNBQ1JRUkFROXNQeVQ4Z0FKZ1BDeUFEUVlDQWdQd0hSeUFDUVlDQWdPZ0FhaUFEVDNGRkJFQkQydy9KUHlBQW1BOExBbjBnQlFSQVF3QUFBQUFnQTBHQWdJRG9BR29nQWtrTkFSb0xJQUFnQVpXTEVNWUZDeUVBQWtBQ1FBSkFJQVJCQVdzT0F3QUJBZ1FMSUFDTUR3dEQydzlKUUNBQVF5Njl1ek9Ta3c4TElBQkRMcjI3TTVKRDJ3OUp3SklQQ3lBRFFZQ0FnUHdIUmcwQklBUkJBblJCNEtFRGFpb0NBQ0VBQ3lBQUR3c2dCRUVDZEVIUW9RTnFLZ0lBQzRvQ0FRSi9JQUlnQkVnRVFDQUFJQUVnQWlBRUVIaEZCRUJCZnc4TElBQW9BZ3doQWlBQUtBSUlJUUVMQWtBZ0JFRUNkQ0lGUWNDUUEyb29BZ0FnQVNBQ0lBUnJJZ0oxY1NJR0lBTWdCV29vQWdCTUJFQWdBQ0FDTmdJTUlBQWdBVFlDQ0F3QkN3TkFJQVFoQlNBQ1FRQk1CRUFnQUNBQklBSkJBUkI0UlFSQVFYOFBDeUFBS0FJTUlRSWdBQ2dDQ0NFQkN5QUJJQUpCQVdzaUFuWkJBWEVnQmtFQmRISWlCaUFESUFWQkFXb2lCRUVDZEdvb0FnQktEUUFMSUFBZ0FqWUNEQ0FBSUFFMkFnZ2dCVUVRU1EwQUlBQW9BaEFpQUNnQ0FDSUJRZmtBTmdJVUlBQkJmeUFCS0FJRUVRSUFRUUFQQ3lBREtBS01BU0FESUFSQkFuUnFLQUpJSUFacWFpMEFFUXNXQUNBQUlBRkIzd0JCbUtjQ1FaQ25Ba0VDRUo0REN4c0JBWDhnQUNnQ0FDRUJJQUJCQURZQ0FDQUJCRUFnQVJCSUN3dlBBUUlCZndKOUlBQWdBU0FCSUFKQkFuUWlBMm9pQWlvQ0FJd1F5QUVnQUNBRGFpSURJQU1xQWdCREFBQ0FQNUk0QWdBZ0FDQUJRU1JxSUFJcUFpU01FSUlDSUFBZ0FVSElBR29nQWlvQ1NJd1FnZ0lnQUNBQlFld0FhaUFDS2dKc2pCQ0NBaUFBSUFGQmtBRnFJQUlxQXBBQmpCQ0NBaUFBSUFGQnRBRnFJQUlxQXJRQmpCQ0NBaUFBSUFGQjJBRnFJQUlxQXRnQmpCQ0NBaUFBSUFGQi9BRnFJQUlxQXZ3QmpCQ0NBaUFBRUdnaUJVTUFBQUFBWEFSQUlBQWdBRU1BQUlBL0lBV1JJZ1NWRU1nQkN5QUVDNWtCQVFKL0lBQUNmeUFBS0FJRUlnSWdBQ2dDQ0VrRVFDQUNJQUVwQWdBM0FnQWdBa0VJYWd3QkN5TUFRU0JySWdNa0FDQURRUXhxSUFBZ0FDZ0NCQ0FBS0FJQWEwRURkVUVCYWhDaEJpQUFLQUlFSUFBb0FnQnJRUU4xSUFCQkNHb1FxUU1pQWlnQ0NDQUJLUUlBTndJQUlBSWdBaWdDQ0VFSWFqWUNDQ0FBSUFJUXFBTWdBQ2dDQkNBQ0VLY0RJQU5CSUdva0FBczJBZ1FMdEFFQkEzOGdBU3dBQzBFQVRnUkFJQUFnQVNrQ0FEY0NBQ0FBSUFFb0FnZzJBZ2dnQUE4TElBRW9BZ0FoQkNBQktBSUVJUUlqQUVFUWF5SURKQUFDUUFKQUFrQWdBaERoQWdSQUlBQWhBU0FBSUFJUW13RU1BUXNnQWtIMy8vLy9CMHNOQVNBRFFRaHFJQUlRa3dKQkFXb1FrZ0lnQXlnQ0RCb2dBQ0FES0FJSUlnRVFzUUVnQUNBREtBSU1FTEFCSUFBZ0FoQ0xBUXNnQVNBRUlBSkJBV29RdGdFZ0EwRVFhaVFBREFFTEVKTUJBQXNnQUF1NkF3RURmeU1BUVJCcklnZ2tBQ0FJSUFJMkFnZ2dDQ0FCTmdJTUlBaEJCR29pQVNBREVGd2dBUkNjQVNFSklBRVFWQ0FFUVFBMkFnQkJBQ0VCQWtBRFFDQUdJQWRHSUFGeURRRUNRQ0FJUVF4cUlBaEJDR29RWUEwQUFrQWdDU0FHS0FJQUVLWUNRU1ZHQkVBZ0JrRUVhaUFIUmcwQ1FRQWhBZ0ovQWtBZ0NTQUdLQUlFRUtZQ0lnRkJ4UUJHRFFCQkJDRUtJQUZCL3dGeFFUQkdEUUFnQVF3QkN5QUdRUWhxSUFkR0RRTkJDQ0VLSUFFaEFpQUpJQVlvQWdnUXBnSUxJUUVnQ0NBQUlBZ29BZ3dnQ0NnQ0NDQURJQVFnQlNBQklBSWdBQ2dDQUNnQ0pCRU9BRFlDRENBR0lBcHFRUVJxSVFZTUFRc2dDVUVCSUFZb0FnQVFzd0VFUUFOQUlBY2dCa0VFYWlJR1J3UkFJQWxCQVNBR0tBSUFFTE1CRFFFTEN3TkFJQWhCREdvaUFTQUlRUWhxRUdBTkFpQUpRUUVnQVJCNUVMTUJSUTBDSUFFUWdBRWFEQUFMQUFzZ0NTQUlRUXhxSWdFUWVSQ0NBU0FKSUFZb0FnQVFnZ0ZHQkVBZ0JrRUVhaUVHSUFFUWdBRWFEQUVMSUFSQkJEWUNBQXNnQkNnQ0FDRUJEQUVMQ3lBRVFRUTJBZ0FMSUFoQkRHb2dDRUVJYWhCZ0JFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBSUtBSU1JQWhCRUdva0FBdTZBd0VEZnlNQVFSQnJJZ2drQUNBSUlBSTJBZ2dnQ0NBQk5nSU1JQWhCQkdvaUFTQURFRndnQVJDVkFTRUpJQUVRVkNBRVFRQTJBZ0JCQUNFQkFrQURRQ0FHSUFkR0lBRnlEUUVDUUNBSVFReHFJQWhCQ0dvUVlRMEFBa0FnQ1NBR0xBQUFFS2NDUVNWR0JFQWdCa0VCYWlBSFJnMENRUUFoQWdKL0FrQWdDU0FHTEFBQkVLY0NJZ0ZCeFFCR0RRQkJBU0VLSUFGQi93RnhRVEJHRFFBZ0FRd0JDeUFHUVFKcUlBZEdEUU5CQWlFS0lBRWhBaUFKSUFZc0FBSVFwd0lMSVFFZ0NDQUFJQWdvQWd3Z0NDZ0NDQ0FESUFRZ0JTQUJJQUlnQUNnQ0FDZ0NKQkVPQURZQ0RDQUdJQXBxUVFGcUlRWU1BUXNnQ1VFQklBWXNBQUFRdEFFRVFBTkFJQWNnQmtFQmFpSUdSd1JBSUFsQkFTQUdMQUFBRUxRQkRRRUxDd05BSUFoQkRHb2lBU0FJUVFocUVHRU5BaUFKUVFFZ0FSQjZFTFFCUlEwQ0lBRVFnUUVhREFBTEFBc2dDU0FJUVF4cUlnRVFlaERkQWlBSklBWXNBQUFRM1FKR0JFQWdCa0VCYWlFR0lBRVFnUUVhREFFTElBUkJCRFlDQUFzZ0JDZ0NBQ0VCREFFTEN5QUVRUVEyQWdBTElBaEJER29nQ0VFSWFoQmhCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUlLQUlNSUFoQkVHb2tBQXNSQUNBQUVGVWdBQkJMUVFKMGFoQzBBd3NOQUNBQUtBSUFJQUVvQWdCSEN3NEFJQUFRVlNBQUVFdHFFTFFEQ3hZQUlBQWdBU0FDSUFNZ0FDZ0NBQ2dDSUJFSUFCb0xod0VCQVg4Q1FDQUFLQUlRSUFGTEJFQWdBaUFBS0FJVUlnTlBEUUVnQUNnQ0JDQUJJQU5zUVFWMGFpQUNRUVYwYWc4TFFmQ0lCVUdYa1FFUVIwSERrUUVRUjBHTUdSQkhRZG9CRUVwQnh4MFFSMEc1a2dFUVJ4QkpFRmdBQzBId2lBVkI3NUlCRUVkQnc1RUJFRWRCakJrUVIwSGJBUkJLUWNjZEVFZEJvcE1CRUVjUVNSQllBQXNrQVFGL0l3QkJFR3NpQXlRQUlBTWdBallDRENBQUlBRWdBaENGQlNBRFFSQnFKQUFMS1FFQmYwRUVFSVFDRU1jR0lnQkI1TVVFTmdJQUlBQkIrTVVFTmdJQUlBQkI2TVlFUVE4UUJBQUxKZ0VCZnlNQVFSQnJJZ1FrQUNBRUlBTTJBZ3dnQUNBQklBSWdBeEQ0QVNBRVFSQnFKQUFMcUFFQUFrQWdBVUdBQ0U0RVFDQUFSQUFBQUFBQUFPQi9vaUVBSUFGQi93OUpCRUFnQVVIL0Iyc2hBUXdDQ3lBQVJBQUFBQUFBQU9CL29pRUFRZjBYSUFFZ0FVSDlGMDhiUWY0UGF5RUJEQUVMSUFGQmdYaEtEUUFnQUVRQUFBQUFBQUJnQTZJaEFDQUJRYmh3U3dSQUlBRkJ5UWRxSVFFTUFRc2dBRVFBQUFBQUFBQmdBNkloQUVId2FDQUJJQUZCOEdoTkcwR1NEMm9oQVFzZ0FDQUJRZjhIYXExQ05JYS9vZ3NFQUNBQUN4QUFJQUJCSUVZZ0FFRUphMEVGU1hJTEVBRUJmeUFBRUpBQklBQkJBRFlDQkFzVUFRRi9RUVFRWmlJQklBQW9BZ0EyQWdBZ0FRc1RBQ0FBUWVUTUJFR3d5QVJCck1nRUVMSUdDMmtCQW4wZ0FDQUJLZ0lJSUFFcUFnQWdBaW9DQUNJRGxDQUNLZ0lFSWdRZ0FTb0NCSlNTa2lBQktnSWdJQUVxQWhnZ0E1UWdBU29DSENBRWxKS1NJZ09WT0FJQUlBQWdBU29DRkNBQktnSU1JQUlxQWdDVUlBRXFBaEFnQWlvQ0JKU1NraUFEbFRnQ0JBc2pBUUYvSXdCQkVHc2lBU1FBSUFFZ0FEWUNEQ0FCUVF4cUVKUUVJQUZCRUdva0FBc1BBQ0FBSUFBb0FnQW9BaVFSQUFBTEVRQWdBQ0FCSUFFb0FnQW9BaUFSQWdBTEVRQWdBQ0FCSUFFb0FnQW9BaXdSQWdBTERBQWdBRUdDaG9BZ05nQUFDN0VCQVFOL0l3QkJFR3NpQnlRQUFrQUNRQ0FBUlEwQUlBUW9BZ3doQmlBQ0lBRnJRUUoxSWdoQkFFb0VRQ0FBSUFFZ0NCQ1ZBaUFJUncwQkN5QUdJQU1nQVd0QkFuVWlBV3RCQUNBQklBWklHeUlCUVFCS0JFQWdBQ0FIUVFScUlBRWdCUkNWQnlJRkVGVWdBUkNWQWlFR0lBVVFjaG9nQVNBR1J3MEJDeUFESUFKclFRSjFJZ0ZCQUVvRVFDQUFJQUlnQVJDVkFpQUJSdzBCQ3lBRUVLTUVEQUVMUVFBaEFBc2dCMEVRYWlRQUlBQUxDZ0JCN3FrQkVMZ0NBQXVvQVFFRGZ5TUFRUkJySWdja0FBSkFBa0FnQUVVTkFDQUVLQUlNSVFZZ0FpQUJheUlJUVFCS0JFQWdBQ0FCSUFnUWxRSWdDRWNOQVFzZ0JpQURJQUZySWdGclFRQWdBU0FHU0JzaUFVRUFTZ1JBSUFBZ0IwRUVhaUFCSUFVUXBBUWlCUkJWSUFFUWxRSWhCaUFGRUV3YUlBRWdCa2NOQVFzZ0F5QUNheUlCUVFCS0JFQWdBQ0FDSUFFUWxRSWdBVWNOQVFzZ0JCQ2pCQXdCQzBFQUlRQUxJQWRCRUdva0FDQUFDK1FDQVFSL0lBQW9BZ1FnQUNnQ0FDSURhMEVDZFNJQ0lBRkpCRUFqQUVFZ2F5SUZKQUFDUUNBQklBSnJJZ0lnQUNnQ0NDQUFLQUlFSWdGclFRSjFUUVJBSUFBZ0FoQ3dBd3dCQ3lBQklBQW9BZ0JyUVFKMUlBSnFJZ0ZCZ0lDQWdBUlBCRUFROEFFQUN5QUZRUXhxUWYvLy8vOERJQUFvQWdnZ0FDZ0NBR3NpQTBFQmRTSUVJQUVnQVNBRVNSc2dBMEg4Ly8vL0IwOGJJQUFvQWdRZ0FDZ0NBR3RCQW5VZ0FFRUlhaENKQWlJQklBSVFqUWNnQVNnQ0JDRUNJQUFvQWdBaEJDQUFLQUlFSVFNRFFDQURJQVJIQkVBZ0FrRUVheUlDSUFOQkJHc2lBeW9DQURnQ0FBd0JDd3NnQVNBQ05nSUVJQUFvQWdBaEF5QUFJQUkyQWdBZ0FTQUROZ0lFSUFBb0FnUWhBaUFBSUFFb0FnZzJBZ1FnQVNBQ05nSUlJQUFvQWdnaEFpQUFJQUVvQWd3MkFnZ2dBU0FDTmdJTUlBRWdBU2dDQkRZQ0FDQUJFSWdDQ3lBRlFTQnFKQUFQQ3lBQklBSkpCRUFnQUNBRElBRkJBblJxTmdJRUN3c09BQ0FBSUFFb0FnQTJBZ0FnQUFzS0FDQUFJQUVnQUd0cUN3c0FJQUF0QUF0Qi93QnhDMUFCQVg0Q1FDQURRY0FBY1FSQUlBSWdBMEZBYXEySUlRRkNBQ0VDREFFTElBTkZEUUFnQWtIQUFDQURhNjJHSUFFZ0E2MGlCSWlFSVFFZ0FpQUVpQ0VDQ3lBQUlBRTNBd0FnQUNBQ053TUlDOXNCQWdGL0FuNUJBU0VFQWtBZ0FFSUFVaUFCUXYvLy8vLy8vLy8vL3dDRElnVkNnSUNBZ0lDQXdQLy9BRllnQlVLQWdJQ0FnSURBLy84QVVSc05BQ0FDUWdCU0lBTkMvLy8vLy8vLy8vLy9BSU1pQmtLQWdJQ0FnSURBLy84QVZpQUdRb0NBZ0lDQWdNRC8vd0JSR3cwQUlBQWdBb1FnQlNBR2hJUlFCRUJCQUE4TElBRWdBNE5DQUZrRVFDQUFJQUpVSUFFZ0ExTWdBU0FEVVJzRVFFRi9Ed3NnQUNBQ2hTQUJJQU9GaEVJQVVnOExJQUFnQWxZZ0FTQURWU0FCSUFOUkd3UkFRWDhQQ3lBQUlBS0ZJQUVnQTRXRVFnQlNJUVFMSUFRTGlnRUJBbjhqQUVHZ0FXc2lCQ1FBSUFRZ0FDQUVRWjRCYWlBQkd5SUFOZ0tVQVNBRUlBRkJBV3NpQlVFQUlBRWdCVThiTmdLWUFTQUVRUUJCa0FIOEN3QWdCRUYvTmdKTUlBUkJvd0kyQWlRZ0JFRi9OZ0pRSUFRZ0JFR2ZBV28yQWl3Z0JDQUVRWlFCYWpZQ1ZDQUFRUUE2QUFBZ0JDQUNJQU5Cb1FKQm9nSVExd01nQkVHZ0FXb2tBQXREQVFOL0FrQWdBa1VOQUFOQUlBQXRBQUFpQkNBQkxRQUFJZ1ZHQkVBZ0FVRUJhaUVCSUFCQkFXb2hBQ0FDUVFGcklnSU5BUXdDQ3dzZ0JDQUZheUVEQ3lBREN4b0FJQUFnQVJDWEJTSUFRUUFnQUMwQUFDQUJRZjhCY1VZYkM2UUJBUVIvSXdCQkVHc2lCU1FBSUFVZ0FqWUNEQ01BUWFBQmF5SURKQUFnQTBFSWFpSUdRWkRjQTBHUUFmd0tBQUFnQXlBQU5nSTBJQU1nQURZQ0hDQURRZi8vLy84SFFYNGdBR3NpQkNBRVFmLy8vLzhIU3hzaUJEWUNPQ0FESUFBZ0JHb2lCRFlDSkNBRElBUTJBaGdnQmlBQklBSVExZ01nQUVGK1J3UkFJQU1vQWh3aUFDQUFJQU1vQWhoR2EwRUFPZ0FBQ3lBRFFhQUJhaVFBSUFWQkVHb2tBQXNMQUNBQUlBRWdBaEVEQUFzb0FBSkFJQUFvQWdCQkFFNE5BQ0FBUWYvLy8vOEhFTFVGUVlHQWdJQjRSZzBBSUFBUTBBRUxDOHdCQWdOL0FYeEI1QUFoQXdKQUFuOENRQU5BSUFNRVFDQUJCRUFnQVNnQ0FBMERDeUFEUVFGcklRTWdBQ2dDQUNBQ1JnMEJEQVFMQ3lBQkRRQkJBUXdCQ3lBQkVORUJRUUFMSXdVaEF3SkFJQUFvQWdBZ0FrY05BRVFBQUFBQUFBRHdQMFFBQUFBQUFBQlpRQ0FER3lFR0l3TWhCQU5BQWtBQ1FDQURSUVJBSUFRdEFDbEJBVWNOQVFzRFFDQUVLQUlrRFFRZ0FDQUNJQVlRd2dKQnQzOUdEUUFMREFFTElBQWdBa1FBQUFBQUFBRHdmeERDQWhvTElBQW9BZ0FnQWtZTkFBc0xEUUFnQVJEQkFnc0xXd0VCZndKQUlBQkJBM0VnQUVVZ0FVRUFTSEp5RFFBZ0FVVUVRQThMSUFBZ0FVSC8vLy8vQjBZZ0FDQUFRUUFnQUVFQS9rZ0MwT1VFSWdJZ0FDQUNSaHRIY2dSL0lBRUZJQUZCQVVZTkFTQUJRUUZyQy80QUFnQWFDd3V5QVFFRmZ3Si9JQUpEQUFBQVA1SWlBb3REQUFBQVQxMEVRQ0FDcUF3QkMwR0FnSUNBZUFzaEJTQUFLQUlVSVFoQmZ5RUdBa0FDZnlBQlF3QUFBRCtTSWdHTFF3QUFBRTlkQkVBZ0FhZ01BUXRCZ0lDQWdIZ0xJQUFvQWhCcUlnZEJBRWdOQUNBSElBQW9BZ2dpQ1U0TkFDQUZJQWhxSWdWQkFFZ05BQ0FGSUFBb0FneE9EUUFnQXlBQUtBSUVJQVVnQ1d3Z0IycEJBM1JxSWdBcUFnQTRBZ0FnQkNBQUtnSUVPQUlBUVFBaEJnc2dCZ3V3QXdJQ2Z3RjlJQUVDZnlBREVMd0NReGh5TVQrVmppSUdpME1BQUFCUFhRUkFJQWFvREFFTFFZQ0FnSUI0Q3lJRU5nSUFJQUlDZnlBQUtnSWNJQU5CQVNBRWRMS1ZFTHdDbEVNQUFBQS9rbzRpQTR0REFBQUFUMTBFUUNBRHFBd0JDMEdBZ0lDQWVBc2lCRFlDQUNBRUlBQW9BaFJCQVd0R0JFQWdBU0FCS0FJQVFRRnFOZ0lBSUFKQkFEWUNBRUVBSVFRTEFrQWdBZ0ovSUFFb0FnQWlBa0VBU0FSQUlBRkJBRFlDQUVFQURBRUxJQUlnQUNnQ0VDSUZTQTBCSUFFZ0JVRUJhellDQUNBQUtBSVVRUUZyQ3lJRU5nSUFDd0pBQWtBQ1FDQUJLQUlBSWdGQkFFNEVRQ0FCSUFBb0FoQk9EUUVnQkVFQVNBMENJQVFnQUNnQ0ZFNE5BdzhMUWZDSUJVR3B5QUFRUjBIOHl3QVFSMEdwSFJCSFFZd0NFRXBCbVNJUVIwR3IwQUFRUnhCSkVGZ0FDMEh3aUFWQm1OUUFFRWRCL01zQUVFZEJxUjBRUjBHTkFoQktRWmtpRUVkQmpkY0FFRWNRU1JCWUFBdEI4SWdGUWVYYkFCQkhRZnpMQUJCSFFha2RFRWRCamdJUVNrR1pJaEJIUWFYZEFCQkhFRWtRV0FBTFFmQ0lCVUhQNFFBUVIwSDh5d0FRUjBHcEhSQkhRWThDRUVwQm1TSVFSMEc4NGdBUVJ4QkpFRmdBQzYwQkFDQUFJQUVxQWdBZ0FwUWdBQ29DQUpJNEFnQWdBQ0FCS2dJRUlBS1VJQUFxQWdTU09BSUVJQUFnQVNvQ0NDQUNsQ0FBS2dJSWtqZ0NDQ0FBSUFFcUFnd2dBcFFnQUNvQ0RKSTRBZ3dnQUNBQktnSVFJQUtVSUFBcUFoQ1NPQUlRSUFBZ0FTb0NGQ0FDbENBQUtnSVVramdDRkNBQUlBRXFBaGdnQXBRZ0FDb0NHSkk0QWhnZ0FDQUJLZ0ljSUFLVUlBQXFBaHlTT0FJY0lBQWdBU29DSUNBQ2xDQUFLZ0lna2pnQ0lBdXFBUUVEZnlBQUtBSUVJQUFvQWdBaUEydEJBblVpQWlBQlNRUkFJd0JCSUdzaUF5UUFBa0FnQVNBQ2F5SUJJQUFvQWdnZ0FDZ0NCQ0lFYTBFQ2RVMEVRQ0FBSUFFUXNBTU1BUXNnQTBFTWFpQUFJQVFnQUNnQ0FHdEJBblVnQVdvUTBRSWdBQ2dDQkNBQUtBSUFhMEVDZFNBQVFRaHFFSWtDSWdJZ0FSQ05CeUFBSUFJUTBBSWdBaENJQWdzZ0EwRWdhaVFBRHdzZ0FTQUNTUVJBSUFBZ0F5QUJRUUowYWpZQ0JBc0xEZ0FnQUVIUUFHb1FUVUhRQUdvTENnQWdBRUVJYWhDa0Fnc05BQ0FBS0FJQUlBRkJBblJxQ3hrQUlBQVFqQUVFUUNBQUlBRVFpd0VQQ3lBQUlBRVFtd0VMQ1FBZ0FFRUVFS0VDQzBvQkFYOGdBQ0FETmdJUUlBQkJBRFlDRENBQkJFQWdBUkN0QXlFRUN5QUFJQVEyQWdBZ0FDQUVJQUpCQW5ScUlnSTJBZ2dnQUNBRUlBRkJBblJxTmdJTUlBQWdBallDQkNBQUMyRUJBWDhqQUVFUWF5SUNKQUFnQWlBQU5nSU1Ba0FnQUNBQlJnMEFBMEFnQWlBQlFRRnJJZ0UyQWdnZ0FDQUJUdzBCSUFJb0Fnd2dBaWdDQ0JDTEJ5QUNJQUlvQWd4QkFXb2lBRFlDRENBQ0tBSUlJUUVNQUFzQUN5QUNRUkJxSkFBTDdRSUJBbjhqQUVFUWF5SUtKQUFnQ2lBQU5nSU1Ba0FDUUFKQUlBTW9BZ0FpQ3lBQ1J3MEFJQWtvQW1BZ0FFWUVmMEVyQlNBQUlBa29BbVJIRFFGQkxRc2hBQ0FESUF0QkFXbzJBZ0FnQ3lBQU9nQUFEQUVMSUFZUVMwVWdBQ0FGUjNKRkJFQkJBQ0VBSUFnb0FnQWlBU0FIYTBHZkFVb05BaUFFS0FJQUlRQWdDQ0FCUVFScU5nSUFJQUVnQURZQ0FBd0JDMEYvSVFBZ0NTQUpRZWdBYWlBS1FReHFFTGNESUFsclFRSjFJZ1ZCRjBvTkFRSkFBa0FDUUNBQlFRaHJEZ01BQWdBQkN5QUJJQVZLRFFFTUF3c2dBVUVRUnlBRlFSWkljZzBBSUFNb0FnQWlBU0FDUmlBQklBSnJRUUpLY2cwQ0lBRkJBV3N0QUFCQk1FY05Ba0VBSVFBZ0JFRUFOZ0lBSUFNZ0FVRUJhallDQUNBQklBVkIwSWdFYWkwQUFEb0FBQXdDQ3lBRElBTW9BZ0FpQUVFQmFqWUNBQ0FBSUFWQjBJZ0VhaTBBQURvQUFDQUVJQVFvQWdCQkFXbzJBZ0JCQUNFQURBRUxRUUFoQUNBRVFRQTJBZ0FMSUFwQkVHb2tBQ0FBQ3dzQUlBQkIxSklGRUwwQkMrOENBUU4vSXdCQkVHc2lDaVFBSUFvZ0FEb0FEd0pBQWtBQ1FDQURLQUlBSWdzZ0FrY05BQ0FBUWY4QmNTSU1JQWt0QUJoR0JIOUJLd1VnRENBSkxRQVpSdzBCUVMwTElRQWdBeUFMUVFGcU5nSUFJQXNnQURvQUFBd0JDeUFHRUV0RklBQWdCVWR5UlFSQVFRQWhBQ0FJS0FJQUlnRWdCMnRCbndGS0RRSWdCQ2dDQUNFQUlBZ2dBVUVFYWpZQ0FDQUJJQUEyQWdBTUFRdEJmeUVBSUFrZ0NVRWFhaUFLUVE5cUVMd0RJQWxySWdWQkYwb05BUUpBQWtBQ1FDQUJRUWhyRGdNQUFnQUJDeUFCSUFWS0RRRU1Bd3NnQVVFUVJ5QUZRUlpJY2cwQUlBTW9BZ0FpQVNBQ1JpQUJJQUpyUVFKS2NnMENJQUZCQVdzdEFBQkJNRWNOQWtFQUlRQWdCRUVBTmdJQUlBTWdBVUVCYWpZQ0FDQUJJQVZCMElnRWFpMEFBRG9BQUF3Q0N5QURJQU1vQWdBaUFFRUJhallDQUNBQUlBVkIwSWdFYWkwQUFEb0FBQ0FFSUFRb0FnQkJBV28yQWdCQkFDRUFEQUVMUVFBaEFDQUVRUUEyQWdBTElBcEJFR29rQUNBQUN3c0FJQUJCekpJRkVMMEJDeFFBSUFCQjN3QnhJQUFnQUVIaEFHdEJHa2tiQzVjQkFRTi9RWDhoQXdKQUlBQkJmMFlOQUNBQktBSk1RUUJJQkg5QkFRVWdBUkNGQVVVTElRUUNRQUpBSUFFb0FnUWlBa1VFUUNBQkVMNENHaUFCS0FJRUlnSkZEUUVMSUFJZ0FTZ0NMRUVJYTBzTkFRc2dCQTBCSUFFUWhBRkJmdzhMSUFFZ0FrRUJheUlDTmdJRUlBSWdBRG9BQUNBQklBRW9BZ0JCYjNFMkFnQWdCRVVFUUNBQkVJUUJDeUFBUWY4QmNTRURDeUFEQzJvQkFuOGdBRUhBNndNMkFnQWdBQ2dDS0NFQkEwQWdBUVJBUVFBZ0FDQUJRUUZySWdGQkFuUWlBaUFBS0FJa2FpZ0NBQ0FBS0FJZ0lBSnFLQUlBRVFVQURBRUxDeUFBUVJ4cUVGUWdBQ2dDSUJCSUlBQW9BaVFRU0NBQUtBSXdFRWdnQUNnQ1BCQklJQUFMR3dFQmZ5QUJRUUVRMVFRaEFpQUFJQUUyQWdRZ0FDQUNOZ0lBQ3lRQUlBQkJDMDhFZnlBQVFRaHFRWGh4SWdBZ0FFRUJheUlBSUFCQkMwWWJCVUVLQ3dzUEFDQUFJQUFvQWdBb0Fod1JBQUFMRXdBZ0FDQUJJQUlnQUNnQ0FDZ0NNQkVFQUFza0FRSi9Jd0JCRUdzaUFpUUFJQUVnQUJEZkJDRURJQUpCRUdva0FDQUJJQUFnQXhzTFp3SUJmd0YrSXdCQkVHc2lBaVFBSUFBQ2ZpQUJSUVJBUWdBTUFRc2dBaUFCclVJQVFmQUFJQUZuSWdGQkgzTnJFSTRCSUFJcEF3aENnSUNBZ0lDQXdBQ0ZRWjZBQVNBQmE2MUNNSVo4SVFNZ0Fpa0RBQXMzQXdBZ0FDQUROd01JSUFKQkVHb2tBQXNLQUVHZDRBQVF1QUlBQzF3QkFuOGdBRUVIYWtGNGNTRUNBMEFDUUNBQ1FRQkJ0TXNFL2hBQ0FDSUFJQUpxSWdFZ0FFMGJSUVJBSUFFL0FFRVFkRTBOQVNBQkVDQU5BUXNRV1VFd05nSUFRWDhQQzBFQUlBQWdBZjVJQXJUTEJDQUFSdzBBQ3lBQUMzOENBWDREZndKQUlBQkNnSUNBZ0JCVUJFQWdBQ0VDREFFTEEwQWdBVUVCYXlJQklBQWdBRUlLZ0NJQ1FncCtmYWRCTUhJNkFBQWdBRUwvLy8vL253RldJQUloQUEwQUN3c2dBbEJGQkVBZ0FxY2hBd05BSUFGQkFXc2lBU0FESUFOQkNtNGlCRUVLYkd0Qk1ISTZBQUFnQTBFSlN5QUVJUU1OQUFzTElBRUxnUUlCQW44Q1FBSkFBa0FDUUNBQklBQWlBM05CQTNFTkFDQUNRUUJISVFRQ1FDQUJRUU54UlNBQ1JYSU5BQU5BSUFNZ0FTMEFBQ0lFT2dBQUlBUkZEUVVnQTBFQmFpRURJQUpCQVdzaUFrRUFSeUVFSUFGQkFXb2lBVUVEY1VVTkFTQUNEUUFMQ3lBRVJRMENJQUV0QUFCRkRRTWdBa0VFU1EwQUEwQkJnSUtFQ0NBQktBSUFJZ1JySUFSeVFZQ0Jnb1I0Y1VHQWdZS0VlRWNOQWlBRElBUTJBZ0FnQTBFRWFpRURJQUZCQkdvaEFTQUNRUVJySWdKQkEwc05BQXNMSUFKRkRRRUxBMEFnQXlBQkxRQUFJZ1E2QUFBZ0JFVU5BaUFEUVFGcUlRTWdBVUVCYWlFQklBSkJBV3NpQWcwQUN3dEJBQ0VDQ3lBRFFRQWdBaEJRR2lBQUN5d0JBWDhnQUVFQ1RRUi9Jd01oQWlBQkJFQWdBU0FDTFFBb05nSUFDeUFDSUFBNkFDaEJBQVZCSEFzYUN5d0JBWDhqQUVFUWF5SUNKQUFnQWlBQk5nSU1RYURLQkNBQUlBRkJvUUpCQUJEWEF4b2dBa0VRYWlRQUM1b0JBZ0Y5QW44Z0FMd2lBa0VYZGtIL0FYRWlBMEdWQVUwRVFDQURRZjBBVFFSOUlBQkRBQUFBQUpRRkFuMGdBSXNpQUVNQUFBQkxra01BQUFETGtpQUFreUlCUXdBQUFEOWVCRUFnQUNBQmtrTUFBSUMva2d3QkN5QUFJQUdTSWdBZ0FVTUFBQUMvWDBVTkFCb2dBRU1BQUlBL2tnc2lBSXdnQUNBQ1FRQklHd3NoQUFzZ0FJdERBQUFBVDEwRVFDQUFxQThMUVlDQWdJQjRDeEVBSUFBZ0FVRUVhaUFCS0FJQUVKRUVDd2tBUWNFSUVMZ0NBQXMvQVFKL0lBQW9BZ1FoQXlBQUtBSUlJUUlEUUNBQ0lBTkhCRUFnQUNBQ0lBRnJJZ0kyQWdnTUFRc0xJQUFvQWdBaUFnUkFJQUFvQWd3YUlBSVFTQXNMR1FFQmZ5QUJFTmtHSVFJZ0FDQUJOZ0lFSUFBZ0FqWUNBQXNrQUNBQVFRSlBCSDhnQUVFQ2FrRitjU0lBSUFCQkFXc2lBQ0FBUVFKR0d3VkJBUXNMQndBZ0FFRUVhZ3ZIQVFFR2Z5TUFRUkJySWdRa0FDQUFFS1FDS0FJQUlRVUNmeUFDS0FJQUlBQW9BZ0JySWdOQi8vLy8vd2RKQkVBZ0EwRUJkQXdCQzBGL0N5SURRUVFnQXhzaEF5QUJLQUlBSVFZZ0FDZ0NBQ0VISUFWQjdRSkdCSDlCQUFVZ0FDZ0NBQXNnQXhDMEFpSUlCRUFnQlVIdEFrY0VRQ0FBRUt3REdnc2dCRUhzQWpZQ0JDQUFJQVJCQ0dvZ0NDQUVRUVJxRUhRaUJSQ0RCeUFGRUhNZ0FTQUFLQUlBSUFZZ0IydHFOZ0lBSUFJZ0FDZ0NBQ0FEUVh4eGFqWUNBQ0FFUVJCcUpBQVBDeEIxQUFzVEFDQUFJQUZCQUNBQUtBSUFLQUkwRVFRQUN4TUFJQUFnQVVFQUlBQW9BZ0FvQWlRUkJBQUxPUUVDZnlNQVFSQnJJZ01rQUNBRFFReHFJZ1FnQVJCY0lBSWdCQkNNQWlJQkVKb0JOZ0lBSUFBZ0FSQ1pBU0FFRUZRZ0EwRVFhaVFBQ3pjQkFuOGpBRUVRYXlJQ0pBQWdBa0VNYWlJRElBQVFYQ0FERUp3QlFkQ0lCRUhxaUFRZ0FSRE5BU0FERUZRZ0FrRVFhaVFBSUFFTG1BRUJBMzhnQUFKL0lBQW9BZ1FpQWlBQUtBSUlTUVJBSUFJZ0FVRWsvQW9BQUNBQ1FTUnFEQUVMSXdCQklHc2lBeVFBSUFOQkRHb2dBQ0FBS0FJRUlBQW9BZ0JyUVNSdFFRRnFFT29HSUFBb0FnUWdBQ2dDQUd0QkpHMGdBRUVJYWhDN0F5SUNLQUlJSWdRZ0FVRWsvQW9BQUNBQ0lBUkJKR28yQWdnZ0FDQUNFTGdESUFBb0FnUWdBaEMxQXlBRFFTQnFKQUFMTmdJRUN6a0JBbjhqQUVFUWF5SURKQUFnQTBFTWFpSUVJQUVRWENBQ0lBUVFqZ0lpQVJDYUFUb0FBQ0FBSUFFUW1RRWdCQkJVSUFOQkVHb2tBQXV2QVFFQ2Z3Si9Ba0FnQUNnQ1RDSUJRUUJPQkVBZ0FVVU5BU01ES0FJWUlBRkIvLy8vL3dOeFJ3MEJDeUFBS0FJRUlnRWdBQ2dDQ0VjRVFDQUFJQUZCQVdvMkFnUWdBUzBBQUF3Q0N5QUFFTDBDREFFTElBQkJ6QUJxSWdGQkFFSC8vLy8vQS81SUFnQUVRQ0FBRUlVQkdnc0NmeUFBS0FJRUlnSWdBQ2dDQ0VjRVFDQUFJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QUFFTDBDQ3lBQkVPc0RRWUNBZ0lBRWNRUkFJQUVRMEFFTEN3c2tBUUovSXdCQkVHc2lBaVFBSUFBZ0FSQ3pBaUVESUFKQkVHb2tBQ0FCSUFBZ0F4c0xJQUVCZnlNQVFSQnJJZ0lrQUNBQUlBRWdBUkNEQVJDUkJDQUNRUkJxSkFBTGpRRUJBWDhDUUNBQUtBSUVJZ0VnQVNnQ0FFRU1heWdDQUdvb0FoaEZEUUFnQUNnQ0JDSUJJQUVvQWdCQkRHc29BZ0JxRU5BRFJRMEFJQUFvQWdRaUFTQUJLQUlBUVF4cktBSUFhaWdDQkVHQXdBQnhSUTBBSUFBb0FnUWlBU0FCS0FJQVFReHJLQUlBYWlnQ0dCQ3dBa0YvUncwQUlBQW9BZ1FpQUNBQUtBSUFRUXhyS0FJQWFrRUJFTEVDQ3dzUEFDQUFJQUFvQWdBb0FoZ1JBQUFMQ1FBZ0FDQUJFS0VGQzBvQkFYOGdBQ0FETmdJUUlBQkJBRFlDRENBQkJFQWdBUkR1QkNFRUN5QUFJQVEyQWdBZ0FDQUVJQUpCREd4cUlnSTJBZ2dnQUNBRUlBRkJER3hxTmdJTUlBQWdBallDQkNBQUN3MEFJQUFvQWdBZ0FTZ0NBRWtMdHdnQkMzOGdBRVVFUUNBQkVFMFBDeUFCUVVCUEJFQVFXVUV3TmdJQVFRQVBDd0pBUWNUOUJDMEFBRUVDY1FSQVFjajlCQkJ3RFFFTEFuOUJFQ0FCUVF0cVFYaHhJQUZCQzBrYklRWWdBRUVJYXlJRUtBSUVJZ2xCZUhFaENBSkFJQWxCQTNGRkJFQWdCa0dBQWtrTkFTQUdRUVJxSUFoTkJFQWdCQ0VDSUFnZ0JtdEIrUGtFS0FJQVFRRjBUUTBDQzBFQURBSUxJQVFnQ0dvaEJ3SkFJQVlnQ0UwRVFDQUlJQVpySWdOQkVFa05BU0FFSUFZZ0NVRUJjWEpCQW5JMkFnUWdCQ0FHYWlJQ0lBTkJBM0kyQWdRZ0J5QUhLQUlFUVFGeU5nSUVJQUlnQXhEeEFnd0JDMEdnK2dRb0FnQWdCMFlFUUVHVStnUW9BZ0FnQ0dvaUNDQUdUUTBDSUFRZ0JpQUpRUUZ4Y2tFQ2NqWUNCQ0FFSUFacUlnTWdDQ0FHYXlJQ1FRRnlOZ0lFUVpUNkJDQUNOZ0lBUWFENkJDQUROZ0lBREFFTFFaejZCQ2dDQUNBSFJnUkFRWkQ2QkNnQ0FDQUlhaUlESUFaSkRRSUNRQ0FESUFacklnSkJFRThFUUNBRUlBWWdDVUVCY1hKQkFuSTJBZ1FnQkNBR2FpSUlJQUpCQVhJMkFnUWdBeUFFYWlJRElBSTJBZ0FnQXlBREtBSUVRWDV4TmdJRURBRUxJQVFnQ1VFQmNTQURja0VDY2pZQ0JDQURJQVJxSWdJZ0FpZ0NCRUVCY2pZQ0JFRUFJUUpCQUNFSUMwR2MrZ1FnQ0RZQ0FFR1ErZ1FnQWpZQ0FBd0JDeUFIS0FJRUlnTkJBbkVOQVNBRFFYaHhJQWhxSWdzZ0Jra05BU0FMSUFacklRd2dCeWdDRENFRkFrQWdBMEgvQVUwRVFDQUhLQUlJSWdJZ0JVWUVRRUdJK2dSQmlQb0VLQUlBUVg0Z0EwRURkbmR4TmdJQURBSUxJQUlnQlRZQ0RDQUZJQUkyQWdnTUFRc2dCeWdDR0NFS0FrQWdCU0FIUndSQUlBY29BZ2dpQWlBRk5nSU1JQVVnQWpZQ0NBd0JDd0pBSUFjb0FoUWlBZ1IvSUFkQkZHb0ZJQWNvQWhBaUFrVU5BU0FIUVJCcUN5RUlBMEFnQ0NFRElBSWlCVUVVYWlFSUlBSW9BaFFpQWcwQUlBVkJFR29oQ0NBRktBSVFJZ0lOQUFzZ0EwRUFOZ0lBREFFTFFRQWhCUXNnQ2tVTkFBSkFJQWNvQWh3aUEwRUNkRUc0L0FScUlnSW9BZ0FnQjBZRVFDQUNJQVUyQWdBZ0JRMEJRWXo2QkVHTStnUW9BZ0JCZmlBRGQzRTJBZ0FNQWdzQ1FDQUhJQW9vQWhCR0JFQWdDaUFGTmdJUURBRUxJQW9nQlRZQ0ZBc2dCVVVOQVFzZ0JTQUtOZ0lZSUFjb0FoQWlBZ1JBSUFVZ0FqWUNFQ0FDSUFVMkFoZ0xJQWNvQWhRaUFrVU5BQ0FGSUFJMkFoUWdBaUFGTmdJWUN5QU1RUTlOQkVBZ0JDQUpRUUZ4SUF0eVFRSnlOZ0lFSUFRZ0Myb2lBaUFDS0FJRVFRRnlOZ0lFREFFTElBUWdCaUFKUVFGeGNrRUNjallDQkNBRUlBWnFJZ01nREVFRGNqWUNCQ0FFSUF0cUlnSWdBaWdDQkVFQmNqWUNCQ0FESUF3UThRSUxJQVFoQWdzZ0Fnc2hBa0hFL1FRdEFBQkJBbkVFUUVISS9RUVFiQm9MSUFJRVFDQUNRUWhxRHdzZ0FSQk5JZ1JGQkVCQkFBOExJQVFnQUVGOFFYZ2dBRUVFYXlnQ0FDSUNRUU54R3lBQ1FYaHhhaUlDSUFFZ0FTQUNTeHNRYXhvZ0FCQklDeUFFQ3hRQUlBQkZCRUJCQUE4TEVGa2dBRFlDQUVGL0M3c0NBUVIvSUFOQjdQa0VJQU1iSWdVb0FnQWhBd0pBQW44Q1FDQUJSUVJBSUFNTkFVRUFEd3RCZmlBQ1JRMEJHZ0pBSUFNRVFDQUNJUVFNQVFzZ0FTMEFBQ0lEd0NJRVFRQk9CRUFnQUFSQUlBQWdBellDQUFzZ0JFRUFSdzhMSXdNb0FtQW9BZ0JGQkVCQkFTQUFSUTBER2lBQUlBUkIvNzhEY1RZQ0FFRUJEd3NnQTBIQ0FXc2lBMEV5U3cwQklBTkJBblJCZ09BRGFpZ0NBQ0VESUFKQkFXc2lCRVVOQXlBQlFRRnFJUUVMSUFFdEFBQWlCa0VEZGlJSFFSQnJJQU5CR25VZ0IycHlRUWRMRFFBRFFDQUVRUUZySVFRZ0JrR0FBV3NnQTBFR2RISWlBMEVBVGdSQUlBVkJBRFlDQUNBQUJFQWdBQ0FETmdJQUN5QUNJQVJyRHdzZ0JFVU5BeUFCUVFGcUlnRXRBQUFpQmtIQUFYRkJnQUZHRFFBTEN5QUZRUUEyQWdBUVdVRVpOZ0lBUVg4TER3c2dCU0FETmdJQVFYNExTZ0VDZndKQUlBQXRBQUFpQWtVZ0FpQUJMUUFBSWdOSGNnMEFBMEFnQVMwQUFTRURJQUF0QUFFaUFrVU5BU0FCUVFGcUlRRWdBRUVCYWlFQUlBSWdBMFlOQUFzTElBSWdBMnNMSUFCQkNCQ0VBaUFBRU1ZR0lnQkJyTWNFTmdJQUlBQkJ6TWNFUVE0UUJBQUxLd0FnQUNnQ0FFVUVRQ0FBUVFFUW93VWFEd3NnQUNnQ0RBUkFJQUJCQ0dvaUFCRFJBU0FBRU5BQkN3c0xBQ0FBRUtrRklBQVFTQXZpQVFFQ2Z5QUNRUUJISVFNQ1FBSkFBa0FnQUVFRGNVVWdBa1Z5RFFBZ0FVSC9BWEVoQkFOQUlBQXRBQUFnQkVZTkFpQUNRUUZySWdKQkFFY2hBeUFBUVFGcUlnQkJBM0ZGRFFFZ0FnMEFDd3NnQTBVTkFTQUJRZjhCY1NJRElBQXRBQUJHSUFKQkJFbHlSUVJBSUFOQmdZS0VDR3doQXdOQVFZQ0NoQWdnQUNnQ0FDQURjeUlFYXlBRWNrR0FnWUtFZUhGQmdJR0NoSGhIRFFJZ0FFRUVhaUVBSUFKQkJHc2lBa0VEU3cwQUN3c2dBa1VOQVFzZ0FVSC9BWEVoQVFOQUlBRWdBQzBBQUVZRVFDQUFEd3NnQUVFQmFpRUFJQUpCQVdzaUFnMEFDd3RCQUF2N0FRSUNmd0o4SUFDOElnRkJnSUNBL0FOR0JFQkRBQUFBQUE4TEFrQWdBVUdBZ0lEOEIydEIvLy8vaDNoTkJFQWdBVUVCZENJQ1JRUkFRd0FBZ0w4UTdBTkRBQUFBQUpVUEN5QUJRWUNBZ1B3SFJnMEJJQUpCZ0lDQWVFa2dBVUVBVG5GRkJFQWdBQkMzQlE4TElBQkRBQUFBUzVTOFFZQ0FnTndBYXlFQkMwR0F2UU1yQXdBZ0FTQUJRWUNBelBrRGF5SUJRWUNBZ0h4eGE3NjdJQUZCRDNaQjhBRnhJZ0pCK0xvRGFpc0RBS0pFQUFBQUFBQUE4TCtnSWdNZ0E2SWlCS0pCaUwwREt3TUFJQU9pUVpDOUF5c0RBS0NnSUFTaUlBRkJGM1czUWZpOEF5c0RBS0lnQWtHQXV3TnFLd01Bb0NBRG9LQzJJUUFMSUFBTFFRRUNmeU1BUVJCcklnRWtBRUYvSVFJQ1FDQUFFTDRDRFFBZ0FDQUJRUTlxUVFFZ0FDZ0NJQkVFQUVFQlJ3MEFJQUV0QUE4aEFnc2dBVUVRYWlRQUlBSUxmQUVDZnlBQUlBQW9Ba2dpQVVFQmF5QUJjallDU0NBQUtBSVVJQUFvQWh4SEJFQWdBRUVBUVFBZ0FDZ0NKQkVFQUJvTElBQkJBRFlDSENBQVFnQTNBeEFnQUNnQ0FDSUJRUVJ4QkVBZ0FDQUJRU0J5TmdJQVFYOFBDeUFBSUFBb0Fpd2dBQ2dDTUdvaUFqWUNDQ0FBSUFJMkFnUWdBVUViZEVFZmRRdWxBZ0VEZnlBQVJRUkFRYkRMQkNnQ0FBUkFRYkRMQkNnQ0FCQy9BaUVCQzBHWXlnUW9BZ0FFUUVHWXlnUW9BZ0FRdndJZ0FYSWhBUXNRaEFNb0FnQWlBQVJBQTBBZ0FDZ0NURUVBU0FSL1FRQUZJQUFRaFFFTFJTQUFLQUlVSUFBb0FoeEhCRUFnQUJDL0FpQUJjaUVCQzBVRVFDQUFFSVFCQ3lBQUtBSTRJZ0FOQUFzTFFhVG9CQkQ5QVNBQkR3c2dBQ2dDVEVFQVNBUi9RUUFGSUFBUWhRRUxSU0VDQWtBQ1FBSkFJQUFvQWhRZ0FDZ0NIRVlOQUNBQVFRQkJBQ0FBS0FJa0VRUUFHaUFBS0FJVURRQkJmeUVCSUFKRkRRRU1BZ3NnQUNnQ0JDSUJJQUFvQWdnaUEwY0VRQ0FBSUFFZ0EydXNRUUVnQUNnQ0tCRVRBQm9MUVFBaEFTQUFRUUEyQWh3Z0FFSUFOd01RSUFCQ0FEY0NCQ0FDRFFFTElBQVFoQUVMSUFFTDZnRUNBWDhFZlNNQVFUQnJJZ1lrQUFKL0lBQUVRQ0FBUVFocUlBRWdCaER5QWlBQVFiZ0JhaUFHS2dJTUlBWXFBZ0FnQXBRZ0F5QUdLZ0lFbEpLU0lBWXFBaXdnQmlvQ0lDQUNsQ0FESUFZcUFpU1VrcElpQjVVZ0Jpb0NIQ0FHS2dJUUlBS1VJQU1nQmlvQ0ZKU1NraUFIbFNBRUlBVVErd05CSDNVTUFRc2dBU29DSENFSElBRXFBaEFoQ0NBQktnSVVJUWtnQkNBQktnSU1JQUVxQWdBZ0FwUWdBeUFCS2dJRWxKS1NJQUVxQWl3Z0FTb0NJQ0FDbENBRElBRXFBaVNVa3BJaUNwVTRBZ0FnQlNBSElBZ2dBcFFnQXlBSmxKS1NJQXFWT0FJQVFRQUxJQVpCTUdva0FBc0xBQ0FBUVFIK0pRSUFHZ3ZpQVFJQmZBRi9JQUJCQTNFRWYwRmtCUkM5QlNNR1JRUkFBbjhRQmlFRFFRQWdBQkNNQXhvQ1FCQUdJQUlnQTZBaUFtUU5BQUovQTBCQkFDQUFRUUFRakFORkRRRWFFTDBGSUFFZ0FQNFFBZ0JHQkVCQkFDQUFFSXdER2hBR0lBSmtEUU1NQVFzTFFYb0xEQUVMSUFCQkFCQ01BeHBCdDM4TER3c2dBa1FBQUFBQUFBRHdmMkloQkVGNlFiZC9RUUFnQUNBQkFuNGdBa1FBQUFBQUFFQ1BRS0pFQUFBQUFBQkFqMENpSWdLWlJBQUFBQUFBQU9CRFl3UkFJQUt3REFFTFFvQ0FnSUNBZ0lDQWdIOExRbjhnQkJ2K0FRSUFJZ0JCQWtZYklBQkJBVVliQ3d1WkFRRURmQ0FBSUFDaUlnTWdBeUFEb3FJZ0EwUjgxYzlhT3RubFBhSkU2NXdyaXVibFdyNmdvaUFESUFORWZmNnhWK01keHo2aVJOVmh3Um1nQVNxL29LSkVwdmdRRVJFUmdUK2dvQ0VGSUFBZ0E2SWhCQ0FDUlFSQUlBUWdBeUFGb2tSSlZWVlZWVlhGdjZDaUlBQ2dEd3NnQUNBRElBRkVBQUFBQUFBQTREK2lJQVFnQmFLaG9pQUJvU0FFUkVsVlZWVlZWY1Uvb3FDaEM1SUJBUU44UkFBQUFBQUFBUEEvSUFBZ0FLSWlBa1FBQUFBQUFBRGdQNklpQTZFaUJFUUFBQUFBQUFEd1B5QUVvU0FEb1NBQ0lBSWdBaUFDUkpBVnl4bWdBZm8rb2tSM1VjRVdiTUZXdjZDaVJFeFZWVlZWVmFVL29LSWdBaUFDb2lJRElBT2lJQUlnQWtUVU9JaSs2ZnFvdmFKRXhMRzB2Wjd1SVQ2Z29rU3RVcHlBVDM2U3ZxQ2lvS0lnQUNBQm9xR2dvQXZ4QWdFR2Z5QUFLQUlFSVFVZ0FrSHhrK3ZjQTA4RVFDQUFLQUlBUXJpQWdJQVFOd0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBVUVDVHdSQUlBQW9BZ0FpQXlBQk5nSVlJQU5CRHpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFKQkIycEJlSEVoQkFKQUFrQWdCU0FCUVFKMGFpSUhLQUkwSWdKRkJFQkJBQ0VEREFFTEEwQWdCQ0FDSWdNb0FnaExCRUFnQWlnQ0FDSUNEUUVNQWdzTElBTWhBUXdCQ3lBRVFSQnFJZ2dnQVVFQ2RFR29sUU5Cb0pVRElBTWJhaWdDQUNJQlFmQ1Q2OXdESUFScklnSWdBU0FDU1JzaUFtb2lCaEJOSWdGRkJFQURRQ0FDUWVNQVRRUkFJQUFvQWdCQ3VJQ0FnQ0EzQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFJSUFKQkFYWWlBbW9pQmhCTklnRkZEUUFMQ3lBRklBVW9Ba3dnQm1vMkFrd2dBU0FDSUFScU5nSUlJQUZDQURjREFDQURSUVJBSUFjZ0FUWUNOQXdCQ3lBRElBRTJBZ0FMSUFFZ0FTZ0NCQ0lBSUFScU5nSUVJQUVnQVNnQ0NDQUVhellDQ0NBQUlBRnFRUkJxQzhvU0FnNTlDWDhqQUVFZ2F5SVZKQUFDUUFKQUlBVkZCRUJESUx5K1RDRUhJQU5CQkVrTkFpQUFLZ0lzUXdBQUFBQmJEUUlnQTBFR2RCQk5JaGhGQkVCQkFFRURRZTBaUVFBUVRrTUFBSUMvSVFjTUF3c2dBMEVEZEJCTkloa0VRQU5BUVFBaEJTQVdRUU5HQkVBZ0EwRUJkQ0VXSUFRcUFpUWhEeUFFS2dJZ0lSSWdBN01oRUVFQUlSY0NRQU5BUXdBQUFBQWhEVUVBSVFBRFFDQUFJQU5IQkVBZ0VpQUNJQUJCREd4cUlnVXFBZ0FpQjVRZ0R5QUZLZ0lFSWdpVWtrTUFBSUEva2lJR1F3QUFBQUJiRFFNZ0FTQUFRUU4wSWdWcUlob3FBZ0FoQ2lBRUtnSU1JUTRnQkNvQ0FDRVJJQVFxQWdRaEV5QUZJQmxxSWdVZ0dpb0NCQ0FFS2dJY0lBUXFBaEFnQjVRZ0NDQUVLZ0lVbEpLU0lnc2dCcFdUSWd3NEFnUWdCU0FLSUE0Z0VTQUhsQ0FJSUJPVWtwSWlDaUFHbFpNaURqZ0NBQ0FZSUFCQkJuUnFJZ1VnQ0NBR2xTSVJPQUlFSUFVZ0J5QUdsU0lUT0FJQUlBVkRBQUNBUHlBR2xTSVVPQUlJSUFWQ0FEY0NEQ0FGUVFBMkFoUWdCU0FLSUFlTUlnZVVJQVlnQnBRaUJwVTRBaGdnQlNBS0lBaU1JZ2lVSUFhVk9BSWNJQVZDQURjQ0lDQUZRUUEyQWlnZ0JTQVRPQUlzSUFVZ0VUZ0NNQ0FGSUJRNEFqUWdCU0FMSUFlVUlBYVZPQUk0SUFVZ0N5QUlsQ0FHbFRnQ1BDQU5JQTRnRHBRZ0RDQU1sSktTSVEwZ0FFRUJhaUVBREFFTEN3SkFJQTBnRUpVaUIwUE56TXc5WFEwQUFrQWdGMFVnQjBNQUFJQkFYVVZ5UlFSQUlBY2dDWlZEcEhCOVAxNE5BaUFYUVFwSERRRU1BZ3NnRjBFS1JnMEJDeUFWSUJrZ0dDQVdFTTRGUVFCSURRSWdCQ0FWS2dJQUlBUXFBZ0NTT0FJQUlBUWdGU29DQkNBRUtnSUVramdDQkNBRUlCVXFBZ2dnQkNvQ0RKSTRBZ3dnQkNBVktnSU1JQVFxQWhDU09BSVFJQVFnRlNvQ0VDQUVLZ0lVa2pnQ0ZDQUVJQlVxQWhRZ0JDb0NISkk0QWh3Z0JDQVZLZ0lZSUFRcUFpQ1NJaEk0QWlBZ0JDQVZLZ0ljSUFRcUFpU1NJZzg0QWlRZ0YwRUJhaUVYSUFjaENRd0JDd3NnR0JCSUlCa1FTQXdHQ3lBWUVFZ2dHUkJJREFRRkEwQWdCVUVFUmtVRVFDQUZRUUowSWhjZ0JDQVdRUVIwSWhwcWFpQUFJQnBxSUJkcUtnSUFJQUFxQWl5Vk9BSUFJQVZCQVdvaEJRd0JDd3NnRmtFQmFpRVdEQUVMQUFzQUMwRUFRUU5CN1JsQkFCQk9JQmdRU0VNQUFJQy9JUWNNQWd0RElMeStUQ0VISUFOQkJFa05BU0FBS2dJc1F3QUFBQUJiRFFFQ2Z5QUdJQU96SWc2VUlnYUxRd0FBQUU5ZEJFQWdCcWdNQVF0QmdJQ0FnSGdMSVFVZ0EwRUdkQkJOSWhoRkJFQkJBRUVEUWUwWlFRQVFUa01BQUlDL0lRY01BZ3NnQTBFRGRCQk5JaGxGQkVCQkFFRURRZTBaUVFBUVRpQVlFRWhEQUFDQXZ5RUhEQUlMSUFOQkFuUWlGaEJOSWh4RkJFQkJBRUVEUWUwWlFRQVFUaUFZRUVnZ0dSQklRd0FBZ0w4aEJ3d0NDeUFXRUUwaUdnUkFRUVVnQlNBRlFRVk1HeUVYUVFBaEZnTkFRUUFoQlNBV1FRTkdCRUFnR2lBWFFRSjBha0VFYXlFZElBUXFBaVFoQ0NBRUtnSWdJUTFCQUNFV0FrQURRRUVBSVFBRFFDQUFJQU5IQkVBZ0RTQUNJQUJCREd4cUlnVXFBZ0FpQjVRZ0NDQUZLZ0lFSWdtVWtrTUFBSUEva2lJR1F3QUFBQUJiRFFNZ0FTQUFRUU4wSWdWcUloY3FBZ0FoRENBRUtnSU1JUW9nQkNvQ0FDRVFJQVFxQWdRaEVTQUZJQmxxSWdVZ0Z5b0NCQ0FFS2dJY0lBUXFBaEFnQjVRZ0NTQUVLZ0lVbEpLU0lnOGdCcFdUSWdzNEFnUWdCU0FNSUFvZ0VDQUhsQ0FKSUJHVWtwSWlEQ0FHbFpNaUNqZ0NBQ0FhSUFCQkFuUWlCV29nQ2lBS2xDQUxJQXVVa2lJTE9BSUFJQVVnSEdvZ0N6Z0NBQ0FZSUFCQkJuUnFJZ1VnQ1NBR2xTSUxPQUlFSUFVZ0J5QUdsU0lLT0FJQUlBVkRBQUNBUHlBR2xTSVFPQUlJSUFWQ0FEY0NEQ0FGUVFBMkFoUWdCU0FNSUFlTUlnZVVJQVlnQnBRaUJwVTRBaGdnQlNBTUlBbU1JZ21VSUFhVk9BSWNJQVZDQURjQ0lDQUZRUUEyQWlnZ0JTQUtPQUlzSUFVZ0N6Z0NNQ0FGSUJBNEFqUWdCU0FQSUFlVUlBYVZPQUk0SUFVZ0R5QUpsQ0FHbFRnQ1BDQUFRUUZxSVFBTUFRc0xJQm9nQTBFRVFRMFFtZ1ZEQUFDQVFTQWRLZ0lBUXdBQWdFQ1VJZ1lnQmtNQUFJQkJYUnNpQ1VNQUFNQkFsU0VIUVFBaEJVTUFBQUFBSVFZRFFDQURJQVZHUlFSQUlBa2dHaUFGUVFKMGFpb0NBQ0lJWFFSOUlBY2dCcElGSUFkREFBQ0FQME1BQUlBL0lBZ2dDWldUSWdnZ0NKUWdDSlNUbENBR2tnc2hCaUFGUVFGcUlRVU1BUXNMQWtBZ0JpQU9sU0lIUTgzTXpEMWREUUFDUUNBV1JTQUhRd0FBZ0VCZFJYSkZCRUFnQnlBU2xVT2tjSDAvWGcwQ0lCWkJDa2NOQVF3Q0N5QVdRUXBHRFFFTFFRQWhHMEVBSVJjRFFDQURJQnRHUlFSQUlBa2dIQ0FiUVFKMGFpb0NBQ0lHWUFSQUlCZ2dGMEVGZEdvaUFFTUFBSUEvSUFZZ0NaV1RJZ1lnQnBRaUJpQVlJQnRCQm5ScUlnVXFBZ0NVT0FJQUlBQWdCaUFGS2dJRWxEZ0NCQ0FBSUFZZ0JTb0NDSlE0QWdnZ0FDQUdJQVVxQWd5VU9BSU1JQUFnQmlBRktnSVFsRGdDRUNBQUlBWWdCU29DRkpRNEFoUWdBQ0FHSUFVcUFoaVVPQUlZSUFBZ0JpQUZLZ0ljbERnQ0hDQUFJQVlnQlNvQ0lKUTRBaUFnQUNBR0lBVXFBaVNVT0FJa0lBQWdCaUFGS2dJb2xEZ0NLQ0FBSUFZZ0JTb0NMSlE0QWl3Z0FDQUdJQVVxQWpDVU9BSXdJQUFnQmlBRktnSTBsRGdDTkNBQUlBWWdCU29DT0pRNEFqZ2dBQ0FHSUFVcUFqeVVPQUk4SUJrZ0YwRUNkR29pQUNBR0lCa2dHMEVEZEdvaUJTb0NBSlE0QWdBZ0FDQUdJQVVxQWdTVU9BSUVJQmRCQW1vaEZ3c2dHMEVCYWlFYkRBRUxDeUFYUVFWTUJFQWdHQkJJSUJrUVNDQWNFRWdnR2hCSVF3QUFnTDhoQnd3SUN5QVZJQmtnR0NBWEVNNEZRUUJJRFFJZ0JDQVZLZ0lBSUFRcUFnQ1NPQUlBSUFRZ0ZTb0NCQ0FFS2dJRWtqZ0NCQ0FFSUJVcUFnZ2dCQ29DREpJNEFnd2dCQ0FWS2dJTUlBUXFBaENTT0FJUUlBUWdGU29DRUNBRUtnSVVramdDRkNBRUlCVXFBaFFnQkNvQ0hKSTRBaHdnQkNBVktnSVlJQVFxQWlDU0lnMDRBaUFnQkNBVktnSWNJQVFxQWlTU0lnZzRBaVFnRmtFQmFpRVdJQWNoRWd3QkN3c2dHQkJJSUJrUVNDQWNFRWdnR2hCSURBVUxJQmdRU0NBWkVFZ2dIQkJJSUJvUVNBd0RCUU5BSUFWQkJFWkZCRUFnQlVFQ2RDSWJJQVFnRmtFRWRDSWRhbW9nQUNBZGFpQWJhaW9DQUNBQUtnSXNsVGdDQUNBRlFRRnFJUVVNQVFzTElCWkJBV29oRmd3QkN3QUxBQXRCQUVFRFFlMFpRUUFRVGlBWUVFZ2dHUkJJSUJ3UVNFTUFBSUMvSVFjTUFRdERJTHkrVENFSEN5QVZRU0JxSkFBZ0J3dXhEd01JZndWOEJIMGpBRUhnQVdzaUJ5UUFJQWNnQkVFRWRCQk5JZ3MyQXRRQklBc0VRQUpBSUFjZ0JFRVliQkJOSWdrMkF0Z0JJQWxGRFFBRFFDQUVJQWhIQkVBZ0ZDQURJQWhCREd4cUlnb3FBZ2lTSVJRZ0ZTQUtLZ0lFa2lFVklCWWdDaW9DQUpJaEZpQUlRUUZxSVFnTUFRc0xJQlFnQkxNaUY1VWhGQ0FWSUJlVklSVWdGaUFYbFNFV1FRQWhDQU5BSUFRZ0NFY0VRQ0FMSUFoQkJIUnFJZ29nQWlBSVFRTjBhaUlNS2dJQXV6a0RBQ0FLSUF3cUFnUzdPUU1JSUFrZ0NFRVliR29pQ2lBRElBaEJER3hxSWd3cUFnQWdGcE83T1FNQUlBb2dEQ29DQkNBVms3czVBd2dnQ2lBTUtnSUlJQlNUdXprREVDQUlRUUZxSVFnTUFRc0xJQWNnQkRZQzNBRkJBQ0VDQTBCQkFDRUlJQUpCQTBjRVFBTkFJQWhCQTBjRVFDQUhRZkFBYWlBQ1FRVjBhaUFJUVFOMGFpQUJJQUpCQkhScUlBaEJBblJxS2dJQXV6a0RBQ0FJUVFGcUlRZ01BUXNMSUFKQkFXb2hBZ3dCQ3dzZ0J5QUJLZ0lNSUFFcUFnZ2dGSlFnQVNvQ0FDQVdsQ0FWSUFFcUFnU1VrcEtTdXprRGlBRWdCeUFCS2dJY0lBRXFBaGdnRkpRZ0FTb0NFQ0FXbENBVklBRXFBaFNVa3BLU3V6a0RxQUVnQnlBQktnSXNJQUVxQWlnZ0ZKUWdBU29DSUNBV2xDQVZJQUVxQWlTVWtwS1N1emtEeUFFQ1FBSkFJQVpGQkVBZ0FDQUhRZFFCYWlBSFFmQUFhaUFIUVJCcUlBZEJDR29RNWdWQkFFZ05BUXdDQ3lBSFFmQUFhaUVOSUFkQkVHb2hERUVBSVFNakFFR2dBV3NpQkNRQVFYOGhBZ0pBSUFjb0F0d0JJZ0ZCQkVnTkFBSi9JQUFyQTRBQklBRzRvaUlRbVVRQUFBQUFBQURnUVdNRVFDQVFxZ3dCQzBHQWdJQ0FlQXNoQ1NBQlFlQUFiQkJOSWdoRkJFQkJBRUVEUWF3TFFRQVFUZ3dCQ3lBQlFRUjBFRTBpQmtVRVFFRUFRUU5CckF0QkFCQk9JQWdRU0F3QkN5QUJRUU4wSWdFUVRTSUtSUVJBUVFCQkEwR3NDMEVBRUU0Z0NCQklJQVlRU0F3QkN5QUJFRTBpQ3dSQVFRUWdDU0FKUVFSTUd5RUNBMEJCQUNFQklBTkJBMFlFUUNBTElBSkJBM1JxUVFocklRNUJBQ0VOQWtBRFFDQUFJQXdnQkVFd2FoQ21CVUVBSVFFRFFDQUhLQUxjQVNJQ0lBRktCRUFnQkVHUUFXb2dCRUV3YWlBSEtBTFlBU0FCUVJoc2FoRDRCVUVBU0EwRElBRkJCSFFpQWlBSEtBTFVBV29pQXlzREFDRVJJQVFyQTVBQklSSWdBaUFHYWlJQ0lBTXJBd2dnQkNzRG1BR2hJaEE1QXdnZ0FpQVJJQktoSWhFNUF3QWdDeUFCUVFOMElnSnFJQkVnRWFJZ0VDQVFvcUFpRURrREFDQUNJQXBxSUJBNUF3QWdBVUVCYWlFQkRBRUxDeUFMSUFKQkNFRUJFSm9GUkFBQUFBQUFBREJBSUE0ckF3QkVBQUFBQUFBQUVFQ2lJaEFnRUVRQUFBQUFBQUF3UUdNYkloRkVBQUFBQUFBQUdFQ2pJUkpCQUNFQklBY29BdHdCSWdOQkFDQURRUUJLR3lFQ1JBQUFBQUFBQUFBQUlSQURRQ0FCSUFKSEJFQWdFU0FMSUFGQkEzUnFLd01BSWhOakJId2dFaUFRb0FVZ0VrUUFBQUFBQUFEd1AwUUFBQUFBQUFEd1B5QVRJQkdqb1NJVElCT2lJQk9pb2FJZ0VLQUxJUkFnQVVFQmFpRUJEQUVMQ3dKQUlCQWdBN2VqSWhBZ0FDc0RhR01OQUFKQUlBMUZEUUFnRUNBQUt3TjRZMFVOQUNBQUt3TndJQkFnRDZOakRRRUxRUUFoQWtFQUlRa2dEU0FBS0FKZ1JnMEFBMEFnQWlBRFNBUkFJQkVnQ2lBQ1FRTjBhaXNEQUNJUFpnUkFJQWdnQ1VFd2JHb2lBU0FBSUF3Z0J5Z0MyQUVnQWtFWWJHb1E5QVZCQUVnTkJTQUJSQUFBQUFBQUFQQS9JQThnRWFPaElnOGdENklpRHlBQkt3TUFvamtEQUNBQklBOGdBU3NEQ0tJNUF3Z2dBU0FQSUFFckF4Q2lPUU1RSUFFZ0R5QUJLd01Zb2prREdDQUJJQThnQVNzRElLSTVBeUFnQVNBUElBRXJBeWlpT1FNb0lBRWdEeUFCS3dNd29qa0RNQ0FCSUE4Z0FTc0RPS0k1QXpnZ0FVRkFheUlESUE4Z0F5c0RBS0k1QXdBZ0FTQVBJQUVyQTBpaU9RTklJQUVnRHlBQkt3TlFvamtEVUNBQklBOGdBU3NEV0tJNUExZ2dCaUFKUVFOMGFpSUJJQThnQmlBQ1FRUjBhaUlES3dNQW9qa0RBQ0FCSUE4Z0F5c0RDS0k1QXdnZ0NVRUNhaUVKSUFjb0F0d0JJUU1MSUFKQkFXb2hBZ3dCQ3dzZ0NVRUZUQTBDSUFRZ0JpQUlJQWtROGdWQkFFZ05BaUFNSUFRUThRVWdEVUVCYWlFTklCQWhEd3dCQ3dzZ0J5QVFPUU1JSUFnUVNDQUdFRWdnQ2hCSUlBc1FTRUVBSVFJTUJBc2dDQkJJSUFZUVNDQUtFRWdnQ3hCSVFYOGhBZ3dEQlFOQUlBRkJCRWNFUUNBQlFRTjBJZ2tnRENBRFFRVjBJZzVxYWlBTklBNXFJQWxxS3dNQU9RTUFJQUZCQVdvaEFRd0JDd3NnQTBFQmFpRUREQUVMQUFzQUMwRUFRUU5CckF0QkFCQk9JQWdRU0NBR0VFZ2dDaEJJQ3lBRVFhQUJhaVFBSUFKQkFFNE5BUXNnQjBLQWdJQ0F3UEQxeThFQU53TUlDeUFIS0FMVUFSQklJQWNvQXRnQkVFaEJBQ0VDQTBCQkFDRUlJQUpCQTBjRVFBTkFJQWhCQTBjRVFDQUZJQUpCQkhScUlBaEJBblJxSUFkQkVHb2dBa0VGZEdvZ0NFRURkR29yQXdDMk9BSUFJQWhCQVdvaENBd0JDd3NnQWtFQmFpRUNEQUVMQ3lBRklBY3JBeWdnQnlzREVDQVd1eUlRb3FFZ0J5c0RHQ0FWdXlJUG9xRWdCeXNESUNBVXV5SVJvcUcyT0FJTUlBVWdCeXNEU0NBSEt3TXdJQkNpb1NBSEt3TTRJQStpb1NBSEt3TkFJQkdpb2JZNEFod2dCU0FIS3dOb0lBY3JBMUFnRUtLaElBY3JBMWdnRDZLaElBY3JBMkFnRWFLaHRqZ0NMQ0FIS3dNSUlBZEI0QUZxSkFDMkR3c0xRUUJCQTBHTUYwRUFFRTVCQVJBQ0FBdk1BZ0VHZndOQUFuOGdBU2dDVEVFQVRnUkFJQUVRaFFGRkRBRUxRUUVMUWY4QklRTWdBQ0VFQWtBRFFBSkFBa0FDUUNBQktBSUVJZ0lnQVNnQ0NDSUZSZzBBQW44Z0FrRUtJQVVnQW1zUXV3SWlCZ1JBSUFZZ0FTZ0NCQ0lDYTBFQmFnd0JDeUFCS0FJSUlBRW9BZ1FpQW1zTElRVWdCQ0FDSUFVZ0F5QURJQVZMR3lJQ0VHc2FJQUVnQVNnQ0JDQUNhaUlGTmdJRUlBSWdCR29oQkNBR0RRSWdBeUFDYXlJRFJRMENJQVVnQVNnQ0NFWU5BQ0FCSUFWQkFXbzJBZ1FnQlMwQUFDRUNEQUVMSUFFUXZRSWlBa0VBVGcwQVFRQWhBeUFBSUFSR0RRTWdBUzBBQUVFUWNRMEJEQU1MSUFRZ0Fqb0FBQ0FFUVFGcUlRUWdBa0gvQVhGQkNrWU5BQ0FEUVFGcklnTU5BUXNMSUFCRkJFQkJBQ0VEREFFTElBUkJBRG9BQUNBQUlRTUxSUVJBSUFFUWhBRUxJQU1FUUNBQUxRQUFJZ1JCQ2tZZ0JFRWpSbklOQVFzTElBTUx6QUlCQ244Z0FDZ0MxQU1oQWlBQUlBQW9BdEFES0FJSUVRQUFSUVJBSUFBb0FnQWlBVUVaTmdJVUlBQWdBU2dDQUJFQkFBc2dBQ2dDMUFKQkFFb0VRQ0FDUWZ3QWFpRUdJQUpCS0dvaEJ5QUNRUmhxSVFnZ0FrRThhaUVKSUFCQjJBSnFJUW9EUUNBS0lBTkJBblFpQkdvb0FnQWhCUUpBQWtBZ0FDZ0M0QUVFUUNBQUtBS2NBdzBCSUFBb0FxUUREUUlMSUFrZ0JTZ0NGRUVDZEdvb0FnQWlBVUlBTndBQUlBRkNBRGNBT0NBQlFnQTNBREFnQVVJQU53QW9JQUZDQURjQUlDQUJRZ0EzQUJnZ0FVSUFOd0FRSUFGQ0FEY0FDQ0FFSUFocVFRQTJBZ0FnQkNBSGFrRUFOZ0lBSUFBb0F1QUJSUVJBSUFBb0FyUUREUUVNQWdzZ0FDZ0NuQU5GRFFFTElBWWdCU2dDR0VFQ2RHb29BZ0JCQUVHQUFoQlFHZ3NnQTBFQmFpSURJQUFvQXRRQ1NBMEFDd3NnQWtGd05nSVVJQUpDQURjQ0RDQUNJQUFvQXBnQ05nSTRDOHNLQVF4L0lBQW9BaGdpQmlnQ0JDRUVJQVlvQWdBaEJTQUFJQU0yQXVRQklBQWdBallDNEFFZ0FDQUJOZ0xjQVFKQUlBUkZCRUFnQUNBR0tBSU1FUUFBUlEwQklBWW9BZ0FoQlNBR0tBSUVJUVFMSUFVdEFBQWdCRUVCYXlJREJIOGdCVUVCYWdVZ0FDQUdLQUlNRVFBQVJRMEJJQVlvQWdRaEF5QUdLQUlBQ3lJRUxRQUFJUWdnQUNBRFFRRnJJZ1VFZnlBRVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFFZ0JpZ0NCQ0VGSUFZb0FnQUxJZ1F0QUFBMkF0UUJJQUFnQlVFQmF5SUZCSDhnQkVFQmFnVWdBQ0FHS0FJTUVRQUFSUTBCSUFZb0FnUWhCU0FHS0FJQUN5SUVMUUFBUVFoMElnTTJBaUFnQUNBRlFRRnJJZ1VFZnlBRVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFFZ0FDZ0NJQ0VESUFZb0FnUWhCU0FHS0FJQUN5SUVMUUFBSUFOcU5nSWdJQUFnQlVFQmF5SUZCSDhnQkVFQmFnVWdBQ0FHS0FJTUVRQUFSUTBCSUFZb0FnUWhCU0FHS0FJQUN5SUVMUUFBUVFoMElnTTJBaHdnQUNBRlFRRnJJZ1VFZnlBRVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFFZ0FDZ0NIQ0VESUFZb0FnUWhCU0FHS0FJQUN5SUVMUUFBSUFOcU5nSWNJQUFnQlVFQmF5SUNCSDhnQkVFQmFnVWdBQ0FHS0FJTUVRQUFSUTBCSUFZb0FnUWhBaUFHS0FJQUN5SURMUUFBTmdJa0lBQW9BZ0FpQVNBQUtBSzRBellDR0NBQklBQW9BaHcyQWh3Z0FTQUFLQUlnTmdJZ0lBQW9BaVFoQkNBQlFlWUFOZ0lVSUFFZ0JEWUNKQ0FBUVFFZ0FTZ0NCQkVDQUNBQUtBTFFBeWdDRUFSQUlBQW9BZ0FpQVVFOU5nSVVJQUFnQVNnQ0FCRUJBQXRCQ0hRZ0NISkJDR3NoQVFKQUFrQWdBQ2dDSUVVTkFDQUFLQUljUlEwQUlBQW9BaVFpQlVFQVNnMEJDeUFBS0FJQUlnUkJJVFlDRkNBQUlBUW9BZ0FSQVFBZ0FDZ0NKQ0VGQ3lBRlFRTnNJQUZIQkVBZ0FDZ0NBQ0lCUVF3MkFoUWdBQ0FCS0FJQUVRRUFJQUFvQWlRaEJRc2dBMEVCYWlFSUlBSkJBV3NoQkNBQUtBTFlBUVIvSUFVRklBQWdBRUVCSUFWQjJBQnNJQUFvQWdRb0FnQVJCQUEyQXRnQklBQW9BaVFMUVFCS0JFQkJBQ0VEQTBBZ0JBUi9JQVFGSUFBZ0JpZ0NEQkVBQUVVTkF5QUdLQUlBSVFnZ0JpZ0NCQXRCQVdzaEN5QUFLQUxZQVNFQklBZ3RBQUFoQWdKQUlBTkZCRUFnQVNFRURBRUxJQU5CQW1zaERDQURRUUZySVFrZ0FTQUthaUVIUVFBaEJTQUJJUVFEUUNBQ0lBUW9BZ0JHQkVBZ0FVSFlBR29oQkNBQktBSUFJUVVnQTBFQlJ3UkFJQXhCQTA4RVFDQUpRWHh4SVFGQkFDRUNBMEFnQkNnQ2lBSWlEQ0FFS0FLd0FTSU5JQVFvQWxnaURpQUVLQUlBSWc4Z0JTQUZJQTlJR3lJRklBVWdEa2diSWdVZ0JTQU5TQnNpQlNBRklBeElHeUVGSUFSQjRBSnFJUVFnQWtFRWFpSUNJQUZIRFFBTEMwRUFJUUlnQ1VFRGNTSUJCRUFEUUNBRUtBSUFJZ2tnQlNBRklBbElHeUVGSUFSQjJBQnFJUVFnQWtFQmFpSUNJQUZIRFFBTEN5QUhJUVFMSUFWQkFXb2hBZ3dDQ3lBRVFkZ0FhaUVFSUFWQkFXb2lCU0FEUncwQUN5QUhJUVFMSUFRZ0F6WUNCQ0FFSUFJMkFnQWdCQ0FMQkg4Z0NFRUJhZ1VnQUNBR0tBSU1FUUFBUlEwRElBWW9BZ1FoQ3lBR0tBSUFDeUlGTFFBQUlnRkJEM0UyQWd3Z0JDQUJRUVIyTmdJSUlBUWdDMEVCYXlJQkJIOGdCVUVCYWdVZ0FDQUdLQUlNRVFBQVJRMERJQVlvQWdRaEFTQUdLQUlBQ3lJQ0xRQUFOZ0lRSUFBb0FnQWlCeUFFS0FJQU5nSVlJQWNnQkNnQ0NEWUNIQ0FISUFRb0FndzJBaUFnQkNnQ0VDRUVJQWRCNXdBMkFoUWdCeUFFTmdJa0lBQkJBU0FIS0FJRUVRSUFJQXBCMkFCcUlRb2dBa0VCYWlFSUlBRkJBV3NoQkNBRFFRRnFJZ01nQUNnQ0pFZ05BQXNMSUFBb0F0QURRUUUyQWhBZ0JpQUVOZ0lFSUFZZ0NEWUNBRUVCRHd0QkFBdVpBUUVCZnlNQVFSQnJJZ0VnQURZQ0NBSkFBa0FDUUNBQktBSUlSUTBBSUFFb0FnZ29BaUJGRFFBZ0FTZ0NDQ2dDSkEwQkN5QUJRUUUyQWd3TUFRc2dBU0FCS0FJSUtBSWNOZ0lFQWtBQ1FDQUJLQUlFUlEwQUlBRW9BZ1FvQWdBZ0FTZ0NDRWNOQUNBQktBSUVLQUlFSWdCQnRQNEFTUTBBSUFCQjAvNEFUUTBCQ3lBQlFRRTJBZ3dNQVFzZ0FVRUFOZ0lNQ3lBQktBSU1DeEVBSUFCRkJFQVBDeUFBSUFFNUE0QUJDMEFCQVg4akFFRVFheUlESkFBZ0FCQ1FBU0FEUVFocUlBRVFsd01pQUJDUUFTQURJQUlROXdNaUFSQ1FBUkFQSUFFUWtRRWdBQkNSQVNBRFFSQnFKQUFMRFFBZ0FFRVlhaERCQVJvZ0FBdTVBZ0FnQVNnQ1hDQUFLQUpjYzJrZ0FTZ0NXQ0FBS0FKWWMya2dBU2dDVkNBQUtBSlVjMmtnQVNnQ1VDQUFLQUpRYzJrZ0FTZ0NUQ0FBS0FKTWMya2dBU2dDU0NBQUtBSkljMmtnQVNnQ1JDQUFLQUpFYzJrZ0FTZ0NRQ0FBS0FKQWMya2dBU2dDUENBQUtBSThjMmtnQVNnQ09DQUFLQUk0YzJrZ0FTZ0NOQ0FBS0FJMGMya2dBU2dDTUNBQUtBSXdjMmtnQVNnQ0xDQUFLQUlzYzJrZ0FTZ0NLQ0FBS0FJb2Mya2dBU2dDSkNBQUtBSWtjMmtnQVNnQ0lDQUFLQUlnYzJrZ0FTZ0NIQ0FBS0FJY2Mya2dBU2dDR0NBQUtBSVljMmtnQVNnQ0ZDQUFLQUlVYzJrZ0FTZ0NFQ0FBS0FJUWMya2dBU2dDRENBQUtBSU1jMmtnQVNnQ0NDQUFLQUlJYzJrZ0FTZ0NCQ0FBS0FJRWMya2dBU2dDQUNBQUtBSUFjMmxxYW1wcWFtcHFhbXBxYW1wcWFtcHFhbXBxYW1wcWFndVJBUUVEZnlBQktBSUVJUUlnQUNnQ0FDRUVJQUFvQWdRaEF3TkFJQU1nQkVaRkJFQWdBa0VFYXlJQ0lBTkJCR3NpQXlnQ0FEWUNBQXdCQ3dzZ0FTQUNOZ0lFSUFBb0FnQWhBeUFBSUFJMkFnQWdBU0FETmdJRUlBQW9BZ1FoQWlBQUlBRW9BZ2cyQWdRZ0FTQUNOZ0lJSUFBb0FnZ2hBaUFBSUFFb0FndzJBZ2dnQVNBQ05nSU1JQUVnQVNnQ0JEWUNBQXMrQVFGL0lBRkJnSUNBZ0FSUEJFQVFvQUlBQzBILy8vLy9BeUFBS0FJSUlBQW9BZ0JySWdCQkFYVWlBaUFCSUFFZ0Fra2JJQUJCL1AvLy93ZFBHd3NRQUNBQUxRQUVSUVJBSUFBUXRnVUxDOHNVQWd0L0FYMGpBRUVRYXlJTkpBQWdBU2dDQUVFQ1JnUkFBa0FDUUFKQUFrQUNRQ0FDS0FJQURnTUJBd0FDQ3lBQktBSVlJUXNnQUNnQ0xDRUFJQUlvQWhnaENDQUNLQUlJSVFvQ1FDQUNLQUlFSWdkQkJFc0VRQ0FLUVFSTEJFQWdCMEVDYXlFR0lBQWhBUU5BQWtBZ0F5QUtSZ1JBUVFBaEJTQUxJUUlnQjBFQ2RDSUVJQUFpQm1vaUFTRURJQUVnQkdvaUJDRUlEQUVMUVFJaEJTQUJJQWdnQXlBSGJFRUNkR29pQWlvQ0NDQUNLZ0lBSWc0Z0RrTUFBTUJBbENBT0lBSXFBZ1NTUXdBQWdFQ1VrcEtTT0FJQUlBRWdBaW9DRENBQ0tnSUFJZzRnQWlvQ0JFTUFBTUJBbENBT0lBSXFBZ2lTUXdBQWdFQ1VrcEtTT0FJRUlBRkJDR29oQkFOQUlBVWdCa1lFUUNBRUlBSWdCMEVDZEdvaUFVRUVheUlGS2dJQUlnNGdBVUVRYXlvQ0FDQUNJQVpCQW5ScUtnSUFRd0FBd0VDVUlBNGdBVUVNYXlJQ0tnSUFra01BQUlCQWxKS1NramdDQUNBRUlBVXFBZ0FpRGlBQ0tnSUFJQTVEQUFEQVFKUWdEaUFCUVFocktnSUFra01BQUlCQWxKS1NramdDQkNBRFFRRnFJUU1nQkVFSWFpRUJEQU1GSUFRZ0FpQUZRUUowYWlJQktnSUlJQUZCQ0dzcUFnQWdBU29DQUVNQUFNQkFsQ0FCUVFScktnSUFJQUlnQlVFQmFpSUZRUUowYWlvQ0FKSkRBQUNBUUpTU2twSTRBZ0FnQkVFRWFpRUVEQUVMQUFzQUN3c0RRQ0FGSUFkSEJFQWdBaUFJS2dJQUlBWXFBZ0FpRGlBT1F3QUF3RUNVSUE0Z0F5b0NBSkpEQUFDQVFKU1NrcEpEQUFDQU81UTRBZ0FnQ0VFRWFpRUlJQU5CQkdvaEF5QUdRUVJxSVFZZ0FrRUVhaUVDSUFWQkFXb2hCUXdCQ3dzZ0N5QUhRUUowSWdOcUlRSWdBeUFFYWlFR1FRQWhCU0FBSVFNRFFDQUZJQWRHQkVBQ1FDQUtRUUpySVF4QkFpRUpBMEFDUUNBSklBeEdCRUFnQUNBS1FRUnJJQWRzUVFKMGFpSUJJQWRCQW5RaUEyb2lCQ0FEYWlJQ0lBTnFJUVlnQ3lBSElBeHNRUUowYWlFRFFRQWhCUXdCQ3lBQUlBbEJBbXNnQjJ4QkFuUnFJZ0VnQjBFQ2RDSURhaUlFSUFOcUlnSWdBMm9pQmlBRGFpRURJQXNnQnlBSmJFRUNkR29oQ0VFQUlRVURRQ0FGSUFkR0JFQWdDVUVCYWlFSkRBTUZJQWdnQXlvQ0FDQUJLZ0lBSUFJcUFnQkRBQURBUUpRZ0JDb0NBQ0FHS2dJQWtrTUFBSUJBbEpLU2trTUFBSUE3bERnQ0FDQURRUVJxSVFNZ0JrRUVhaUVHSUFKQkJHb2hBaUFFUVFScUlRUWdBVUVFYWlFQklBaEJCR29oQ0NBRlFRRnFJUVVNQVFzQUN3QUxDd05BSUFVZ0IwY0VRQ0FESUFZcUFnQWlEaUFCS2dJQUlBSXFBZ0JEQUFEQVFKUWdEaUFFS2dJQWtrTUFBSUJBbEpLU2trTUFBSUE3bERnQ0FDQUdRUVJxSVFZZ0FrRUVhaUVDSUFSQkJHb2hCQ0FCUVFScUlRRWdBMEVFYWlFRElBVkJBV29oQlF3QkN3c2dBQ0FLUVFOcklBZHNRUUowYWlJQklBZEJBblFpQUdvaUJDQUFhaUVDSUFzZ0NrRUJheUFIYkVFQ2RHb2hCa0VBSVFVRFFDQUZJQWRHRFFFZ0JpQUNLZ0lBSWc0Z0FTb0NBQ0FPUXdBQXdFQ1VJQTRnQkNvQ0FKSkRBQUNBUUpTU2twSkRBQUNBTzVRNEFnQWdBa0VFYWlFQ0lBUkJCR29oQkNBQlFRUnFJUUVnQmtFRWFpRUdJQVZCQVdvaEJRd0FDd0FMQlNBQ0lBWXFBZ0FnQXlvQ0FDSU9JQUVxQWdCREFBREFRSlFnRGlBRUtnSUFra01BQUlCQWxKS1Nra01BQUlBN2xEZ0NBQ0FHUVFScUlRWWdCRUVFYWlFRUlBRkJCR29oQVNBRFFRUnFJUU1nQWtFRWFpRUNJQVZCQVdvaEJRd0JDd3NNQWd0QjhJZ0ZRZXNtRUVkQm54SVFSMEdNR1JCSFFha0JFRXBCeHgwUVIwR3pJQkJIRUVrUVdBQUxRZkNJQlVHckNSQkhRWjhTRUVkQmpCa1FSMEdvQVJCS1FjY2RFRWRCc3lBUVJ4QkpFRmdBQ3d3REMwRVFFSVFDSUExQkJHcEJ2TjBBRUZNUW9nTkI4TE1CUVJBUUJBQUxRUkFRaEFJZ0RVRUVha0dmNFFBUVV4Q2lBMEh3c3dGQkVCQUVBQXNnQVNnQ0dDRUxJQUFvQWlBaEFDQUNLQUlZSVFnZ0FpZ0NDQ0VLQWtBZ0FpZ0NCQ0lIUVFSTEJFQWdDa0VFU3dSQUlBZEJBbXNoQmlBQUlRRURRQUpBSUFNZ0NrWUVRRUVBSVFVZ0N5RUNJQWRCQVhRaUJDQUFJZ1pxSWdFaEF5QUJJQVJxSWdRaENBd0JDMEVDSVFVZ0FTQUlJQU1nQjJ4cUlnSXRBQUFpQkVFSGJDQUNMUUFDYWlBQ0xRQUJJQVJxUVFKMGFqc0JBQ0FCSUFJdEFBTWdBaTBBQUNJRUlBSXRBQUZCQm14cWFpQUNMUUFDSUFScVFRSjBhanNCQWlBQlFRUnFJUVFEUUNBRklBWkdCRUFnQkNBQ0lBZHFJZ0ZCQVdzaUJTMEFBQ0lKSUFJZ0Jtb3RBQUJCQm14cUlBRkJCR3N0QUFCcUlBa2dBVUVEYXlJQ0xRQUFha0VDZEdvN0FRQWdCQ0FDTFFBQUlBVXRBQUFpQWtFSGJHb2dBVUVDYXkwQUFDQUNha0VDZEdvN0FRSWdBMEVCYWlFRElBUkJCR29oQVF3REJTQUVJQUlnQldvaUFTMEFBRUVHYkNBQlFRSnJMUUFBYWlBQ0lBVkJBV29pQldvdEFBQWdBVUVCYXkwQUFHcEJBblJxSUFFdEFBSnFPd0VBSUFSQkFtb2hCQXdCQ3dBTEFBc0xBMEFnQlNBSFJ3UkFJQUlnQ0M4QkFDQUdMd0VBSWdsQkIyd2dBeThCQUNBSmFrRUNkR3BxczBNQUFJQTdsRGdDQUNBSVFRSnFJUWdnQTBFQ2FpRURJQVpCQW1vaEJpQUNRUVJxSVFJZ0JVRUJhaUVGREFFTEN5QUxJQWRCQW5ScUlRSWdCQ0FIUVFGMGFpRUdRUUFoQlNBQUlRTURRQ0FGSUFkR0JFQUNRQ0FLUVFKcklReEJBaUVKQTBBQ1FDQUpJQXhHQkVBZ0FDQUtRUVJySUFkc1FRRjBhaUlCSUFkQkFYUWlBMm9pQkNBRGFpSUNJQU5xSVFZZ0N5QUhJQXhzUVFKMGFpRURRUUFoQlF3QkN5QUFJQWxCQW1zZ0IyeEJBWFJxSWdFZ0IwRUJkQ0lEYWlJRUlBTnFJZ0lnQTJvaUJpQURhaUVESUFzZ0J5QUpiRUVDZEdvaENFRUFJUVVEUUNBRklBZEdCRUFnQ1VFQmFpRUpEQU1GSUFnZ0F5OEJBQ0FCTHdFQUlBSXZBUUJCQm14cUlBWXZBUUFnQkM4QkFHcEJBblJxYXJOREFBQ0FPNVE0QWdBZ0EwRUNhaUVESUFaQkFtb2hCaUFDUVFKcUlRSWdCRUVDYWlFRUlBRkJBbW9oQVNBSVFRUnFJUWdnQlVFQmFpRUZEQUVMQUFzQUN3c0RRQ0FGSUFkSEJFQWdBeUFCTHdFQUlBSXZBUUJCQm14cUlBWXZBUUFpQ0NBRUx3RUFha0VDZEdvZ0NHcXpRd0FBZ0R1VU9BSUFJQVpCQW1vaEJpQUNRUUpxSVFJZ0JFRUNhaUVFSUFGQkFtb2hBU0FEUVFScUlRTWdCVUVCYWlFRkRBRUxDeUFBSUFwQkEyc2dCMnhCQVhScUlnRWdCMEVCZENJQWFpSUVJQUJxSVFJZ0N5QUtRUUZySUFkc1FRSjBhaUVHUVFBaEJRTkFJQVVnQjBZTkFTQUdJQUV2QVFBZ0FpOEJBQ0lBUVFac2FpQUFJQVF2QVFCcVFRSjBhaUFBYXJOREFBQ0FPNVE0QWdBZ0FrRUNhaUVDSUFSQkFtb2hCQ0FCUVFKcUlRRWdCa0VFYWlFR0lBVkJBV29oQlF3QUN3QUxCU0FDSUFZdkFRQWdBeThCQUNJSUlBRXZBUUJCQm14cUlBUXZBUUFnQ0dwQkFuUnFhck5EQUFDQU81UTRBZ0FnQmtFQ2FpRUdJQVJCQW1vaEJDQUJRUUpxSVFFZ0EwRUNhaUVESUFKQkJHb2hBaUFGUVFGcUlRVU1BUXNMREFJTFFmQ0lCVUhySmhCSFFaOFNFRWRCakJrUVIwRTRFRXBCeHgwUVIwR3pJQkJIRUVrUVdBQUxRZkNJQlVHckNSQkhRWjhTRUVkQmpCa1FSMEUzRUVwQnh4MFFSMEd6SUJCSEVFa1FXQUFMQ3lBTlFSQnFKQUFQQzBId2lBVkI3ZGNBRUVkQm54SVFSMEdNR1JCSFFlVUNFRXBCeHgwUVIwR3UyZ0FRUnhCSkVGZ0FDeTRCQVg4Z0FDZ0NCQ0FCS0FJSUVOY0NJZ0lFUUNBQ0lBQWdBUkNnQmtFQVRnUkFJQUlQQ3lBQ0VHVUxRUUFMQ1FBZ0FFRUVFTm9FQ3dzQUlBUWdBallDQUVFREN3c0FJQUFnQVVFREVMTUdDOUFCQVFKL0lBSkJnQkJ4QkVBZ0FFRXJPZ0FBSUFCQkFXb2hBQXNnQWtHQUNIRUVRQ0FBUVNNNkFBQWdBRUVCYWlFQUN5QUNRWVFDY1NJRFFZUUNSd1JBSUFCQnJ0UUFPd0FBSUFCQkFtb2hBQXNnQWtHQWdBRnhJUUlEUUNBQkxRQUFJZ1FFUUNBQUlBUTZBQUFnQUVFQmFpRUFJQUZCQVdvaEFRd0JDd3NnQUFKL0FrQWdBMEdBQWtjRVFDQURRUVJIRFFGQnhnQkI1Z0FnQWhzTUFndEJ4UUJCNVFBZ0Foc01BUXRCd1FCQjRRQWdBaHNnQTBHRUFrWU5BQnBCeHdCQjV3QWdBaHNMT2dBQUlBTkJoQUpIQzZvQkFRRi9Ba0FnQTBHQUVIRkZEUUFnQWtVZ0EwSEtBSEVpQkVFSVJpQUVRY0FBUm5KeURRQWdBRUVyT2dBQUlBQkJBV29oQUFzZ0EwR0FCSEVFUUNBQVFTTTZBQUFnQUVFQmFpRUFDd05BSUFFdEFBQWlCQVJBSUFBZ0JEb0FBQ0FBUVFGcUlRQWdBVUVCYWlFQkRBRUxDeUFBQW45Qjd3QWdBMEhLQUhFaUFVSEFBRVlOQUJwQjJBQkIrQUFnQTBHQWdBRnhHeUFCUVFoR0RRQWFRZVFBUWZVQUlBSWJDem9BQUFzTUFDQUFFRlVnQVVFQ2RHb0xtZ1FCQzM4akFFR0FBV3NpRENRQUlBd2dBVFlDZkNBQ0lBTVFzd1FoQ0NBTVFld0NOZ0lRSUF4QkNHcEJBQ0FNUVJCcUlna1FkQ0VQQWtBQ1FBSkFJQWhCNVFCUEJFQWdDQkJOSWdsRkRRRWdEeUFKRUh3TElBa2hCeUFDSVFFRFFDQUJJQU5HQkVCQkFDRUxBMEFnQUNBTVFmd0FhaUlCRUdCQkFTQUlHd1JBSUFBZ0FSQmdCRUFnQlNBRktBSUFRUUp5TmdJQUN3TkFJQUlnQTBZTkJpQUpMUUFBUVFKR0RRY2dDVUVCYWlFSklBSkJER29oQWd3QUN3QUxJQUFRZVNFTklBWkZCRUFnQkNBTkVJSUJJUTBMSUF0QkFXb2hFRUVBSVE0Z0NTRUhJQUloQVFOQUlBRWdBMFlFUUNBUUlRc2dEa1VOQWlBQUVJQUJHaUFKSVFjZ0FpRUJJQWdnQ21wQkFra05BZ05BSUFFZ0EwWUVRQXdFQlFKQUlBY3RBQUJCQWtjTkFDQUJFRXNnQzBZTkFDQUhRUUE2QUFBZ0NrRUJheUVLQ3lBSFFRRnFJUWNnQVVFTWFpRUJEQUVMQUFzQUJRSkFJQWN0QUFCQkFVY05BQ0FCSUFzUTJnSW9BZ0FoRVFKQUlBWUVmeUFSQlNBRUlCRVFnZ0VMSUExR0JFQkJBU0VPSUFFUVN5QVFSdzBDSUFkQkFqb0FBQ0FLUVFGcUlRb01BUXNnQjBFQU9nQUFDeUFJUVFGcklRZ0xJQWRCQVdvaEJ5QUJRUXhxSVFFTUFRc0FDd0FMQUFVZ0IwRUNRUUVnQVJDdEFTSUxHem9BQUNBSFFRRnFJUWNnQVVFTWFpRUJJQW9nQzJvaENpQUlJQXRySVFnTUFRc0FDd0FMRUhVQUN5QUZJQVVvQWdCQkJISTJBZ0FMSUE4UWN5QU1RWUFCYWlRQUlBSUw5UVVFQW53Q2ZRTi9BWDRDUUNBQ1F3QUFBQUJnQkVBZ0FpQUFLQUlVc2wxRkRRRUNmU0FBS2dJWUlRWWdBcndpQnhDekJTRUpBa0FDUUFKQUFrQWdCcndpQUVHQWdJRDhCMnRCZ0lDQWlIaFBCRUFnQ1EwQkRBTUxJQWxGRFFFTFF3QUFnRDhoQlNBQVFZQ0FnUHdEUmcwQ0lBZEJBWFFpQ0VVTkFpQUdJQUtTSUFoQmdZQ0FlRWtnQUVFQmRDSUFRWUNBZ0hoTmNVVU5BeG9nQUVHQWdJRDRCMFlOQWtNQUFBQUFJQUlnQXBRZ0IwRUFTQ0FBUVlDQWdQZ0hTWE1iREFNTElBQVFzd1VFUUNBR0lBYVVJUVVnQUVFQVNBUkFJQVdNSUFVZ0J4Q3lCVUVCUmhzaEJRc2dCMEVBVGcwQ1F3QUFnRDhnQlpVUTdBTU1Bd3NnQUVFQVNBUkFJQWNRc2dVaUFFVUVRQ0FHRUxjRkRBUUxJQUJCQVVaQkVIUWhDQ0FHdkVILy8vLy9CM0VoQUFzZ0FFSC8vLzhEU3cwQUlBWkRBQUFBUzVTOFFmLy8vLzhIY1VHQWdJRGNBR3NoQUFzQ1FFR1l2d01yQXdBZ0FDQUFRWUNBelBrRGF5SUFRWUNBZ0h4eGE3NjdJQUJCRDNaQjhBRnhJZ2RCbUwwRGFpc0RBS0pFQUFBQUFBQUE4TCtnSWdPaVFhQy9BeXNEQUtBZ0F5QURvaUlFSUFTaW9rR292d01yQXdBZ0E2SkJzTDhES3dNQW9DQUVva0c0dndNckF3QWdBNklnQjBHZ3ZRTnFLd01BSUFCQkYzVzNvS0Nnb0NBQ3U2SWlBNzFDZ0lDQWdJQ0E0UC8vQUlOQ2dZQ0FnSUNBd0svQUFGUU5BQ0FEUkhIVjBmLy8vMTlBWkFSQUlBaERBQUFBY0JDK0JRd0RDeUFEUkFBQUFBQUF3R0xBWlVVTkFDQUlRd0FBQUJBUXZnVU1BZ3RCdUxvREt3TUFJQU1nQTBHd3VnTXJBd0FpQTZBaUJDQURvYUVpQTZKQndMb0RLd01Bb0NBRElBT2lva0hJdWdNckF3QWdBNkpFQUFBQUFBQUE4RCtnb0NBRXZTSUtJQWl0ZkVJdmhpQUtwMEVmY1VFRGRFR3d1QU5xS1FNQWZMK2l0aUVGQ3lBRkMwRUJJQUYwc3BRUEMwSHdpQVZCcUpVQkVFZEJ3NUVCRUVkQmpCa1FSMEhvQVJCS1FjY2RFRWRCNlpZQkVFY1FTUkJZQUF0QjhJZ0ZRZStTQVJCSFFjT1JBUkJIUVl3WkVFZEI2UUVRU2tISEhSQkhRWUNYQVJCSEVFa1FXQUFMRVFBZ0FDQUJJQUFvQWdBb0Fnd1JBd0FMbVFRQkMzOGpBRUdBQVdzaURDUUFJQXdnQVRZQ2ZDQUNJQU1Rc3dRaENDQU1RZXdDTmdJUUlBeEJDR3BCQUNBTVFSQnFJZ2tRZENFUEFrQUNRQUpBSUFoQjVRQlBCRUFnQ0JCTklnbEZEUUVnRHlBSkVId0xJQWtoQnlBQ0lRRURRQ0FCSUFOR0JFQkJBQ0VMQTBBZ0FDQU1RZndBYWlJQkVHRkJBU0FJR3dSQUlBQWdBUkJoQkVBZ0JTQUZLQUlBUVFKeU5nSUFDd05BSUFJZ0EwWU5CaUFKTFFBQVFRSkdEUWNnQ1VFQmFpRUpJQUpCREdvaEFnd0FDd0FMSUFBUWVpRU5JQVpGQkVBZ0JDQU5FTjBDSVEwTElBdEJBV29oRUVFQUlRNGdDU0VISUFJaEFRTkFJQUVnQTBZRVFDQVFJUXNnRGtVTkFpQUFFSUVCR2lBSklRY2dBaUVCSUFnZ0NtcEJBa2tOQWdOQUlBRWdBMFlFUUF3RUJRSkFJQWN0QUFCQkFrY05BQ0FCRUVzZ0MwWU5BQ0FIUVFBNkFBQWdDa0VCYXlFS0N5QUhRUUZxSVFjZ0FVRU1haUVCREFFTEFBc0FCUUpBSUFjdEFBQkJBVWNOQUNBQklBc1FVU3dBQUNFUkFrQWdCZ1IvSUJFRklBUWdFUkRkQWdzZ0RVWUVRRUVCSVE0Z0FSQkxJQkJIRFFJZ0IwRUNPZ0FBSUFwQkFXb2hDZ3dCQ3lBSFFRQTZBQUFMSUFoQkFXc2hDQXNnQjBFQmFpRUhJQUZCREdvaEFRd0JDd0FMQUFzQUJTQUhRUUpCQVNBQkVLMEJJZ3NiT2dBQUlBZEJBV29oQnlBQlFReHFJUUVnQ2lBTGFpRUtJQWdnQzJzaENBd0JDd0FMQUFzUWRRQUxJQVVnQlNnQ0FFRUVjallDQUFzZ0R4QnpJQXhCZ0FGcUpBQWdBZ3ROQUNBQVFRQTJBaFFnQUNBQk5nSVlJQUJCQURZQ0RDQUFRb0tnZ0lEZ0FEY0NCQ0FBSUFGRk5nSVFJQUJCSUdwQkFFRW8vQXNBSUFCQkhHb1E3QVlnQUVFQU5nSklJQUJCZnpZQ1RBc1BBQ0FBS0FKSUdpQUFJQUUyQWtnTEJ3QWdBRUVMU1FzSkFDQUFRUUVRMmdRTEZnQWdBQ0FCS0FJQU5nSUFJQUFnQWlnQ0FEWUNCQXNKQUNBQUlBRVE5QUVMTVFFQmZ5TUFRUkJySWdNa0FDQURJQUUyQWd3Z0F5QUNOZ0lJSUFBZ0EwRU1haUFEUVFocUVPTUNJQU5CRUdva0FBc2RBQ0FBSUFFZ0FpQURJQVFnQlNBR0lBY2dBQ2dDQUNnQ0RCRU9BQXNjQVFGL0lBQW9BZ0FoQWlBQUlBRW9BZ0EyQWdBZ0FTQUNOZ0lBQ3d3QUlBQWdBVUVFYWhDYkJBc0lBQ0FBS0FJQVJRdElBQ0FBSUFFMkFnUWdBRUVBT2dBQUlBRWdBU2dDQUVFTWF5Z0NBR29RMEFNRVFDQUJJQUVvQWdCQkRHc29BZ0JxS0FKSUlnRUVRQ0FCRU8wQ0N5QUFRUUU2QUFBTElBQUxEUUFnQUVFRWFoQ1JBaG9nQUFzNkFRRi9JQUZCQUVnRVFCQ1lBZ0FMUWYvLy8vOEhJQUFvQWdnZ0FDZ0NBR3NpQUVFQmRDSUNJQUVnQVNBQ1NSc2dBRUgvLy8vL0EwOGJDM0lCQVg4akFFRVFheUlCSkFBZ0FDQUFLQUlBUVF4cktBSUFhaWdDR0FSQUlBRkJDR29nQUJEcUFob0NRQ0FCTFFBSVJRMEFJQUFnQUNnQ0FFRU1heWdDQUdvb0FoZ1FzQUpCZjBjTkFDQUFJQUFvQWdCQkRHc29BZ0JxUVFFUXNRSUxJQUZCQ0dvUXJ3SUxJQUZCRUdva0FBc05BQ0FBUVFocUVKRUNHaUFBQ3dRQVFYOExBZ0FMcXdzQkJuOGdBQ0FCYWlFRkFrQUNRQ0FBS0FJRUlnSkJBWEVOQUNBQ1FRSnhSUTBCSUFBb0FnQWlBaUFCYWlFQkFrQUNRQUpBSUFBZ0Ftc2lBRUdjK2dRb0FnQkhCRUFnQUNnQ0RDRURJQUpCL3dGTkJFQWdBeUFBS0FJSUlnUkhEUUpCaVBvRVFZajZCQ2dDQUVGK0lBSkJBM1ozY1RZQ0FBd0ZDeUFBS0FJWUlRWWdBQ0FEUndSQUlBQW9BZ2dpQWlBRE5nSU1JQU1nQWpZQ0NBd0VDeUFBS0FJVUlnUUVmeUFBUVJScUJTQUFLQUlRSWdSRkRRTWdBRUVRYWdzaEFnTkFJQUloQnlBRUlnTkJGR29oQWlBREtBSVVJZ1FOQUNBRFFSQnFJUUlnQXlnQ0VDSUVEUUFMSUFkQkFEWUNBQXdEQ3lBRktBSUVJZ0pCQTNGQkEwY05BMEdRK2dRZ0FUWUNBQ0FGSUFKQmZuRTJBZ1FnQUNBQlFRRnlOZ0lFSUFVZ0FUWUNBQThMSUFRZ0F6WUNEQ0FESUFRMkFnZ01BZ3RCQUNFREN5QUdSUTBBQWtBZ0FDZ0NIQ0lDUVFKMFFiajhCR29pQkNnQ0FDQUFSZ1JBSUFRZ0F6WUNBQ0FERFFGQmpQb0VRWXo2QkNnQ0FFRitJQUozY1RZQ0FBd0NDd0pBSUFBZ0JpZ0NFRVlFUUNBR0lBTTJBaEFNQVFzZ0JpQUROZ0lVQ3lBRFJRMEJDeUFESUFZMkFoZ2dBQ2dDRUNJQ0JFQWdBeUFDTmdJUUlBSWdBellDR0FzZ0FDZ0NGQ0lDUlEwQUlBTWdBallDRkNBQ0lBTTJBaGdMQWtBQ1FBSkFBa0FnQlNnQ0JDSUNRUUp4UlFSQVFhRDZCQ2dDQUNBRlJnUkFRYUQ2QkNBQU5nSUFRWlQ2QkVHVStnUW9BZ0FnQVdvaUFUWUNBQ0FBSUFGQkFYSTJBZ1FnQUVHYytnUW9BZ0JIRFFaQmtQb0VRUUEyQWdCQm5Qb0VRUUEyQWdBUEMwR2MrZ1FvQWdBZ0JVWUVRRUdjK2dRZ0FEWUNBRUdRK2dSQmtQb0VLQUlBSUFGcUlnRTJBZ0FnQUNBQlFRRnlOZ0lFSUFBZ0FXb2dBVFlDQUE4TElBSkJlSEVnQVdvaEFTQUZLQUlNSVFNZ0FrSC9BVTBFUUNBRktBSUlJZ1FnQTBZRVFFR0krZ1JCaVBvRUtBSUFRWDRnQWtFRGRuZHhOZ0lBREFVTElBUWdBellDRENBRElBUTJBZ2dNQkFzZ0JTZ0NHQ0VHSUFNZ0JVY0VRQ0FGS0FJSUlnSWdBellDRENBRElBSTJBZ2dNQXdzZ0JTZ0NGQ0lFQkg4Z0JVRVVhZ1VnQlNnQ0VDSUVSUTBDSUFWQkVHb0xJUUlEUUNBQ0lRY2dCQ0lEUVJScUlRSWdBeWdDRkNJRURRQWdBMEVRYWlFQ0lBTW9BaEFpQkEwQUN5QUhRUUEyQWdBTUFnc2dCU0FDUVg1eE5nSUVJQUFnQVVFQmNqWUNCQ0FBSUFGcUlBRTJBZ0FNQXd0QkFDRURDeUFHUlEwQUFrQWdCU2dDSENJQ1FRSjBRYmo4QkdvaUJDZ0NBQ0FGUmdSQUlBUWdBellDQUNBRERRRkJqUG9FUVl6NkJDZ0NBRUYrSUFKM2NUWUNBQXdDQ3dKQUlBVWdCaWdDRUVZRVFDQUdJQU0yQWhBTUFRc2dCaUFETmdJVUN5QURSUTBCQ3lBRElBWTJBaGdnQlNnQ0VDSUNCRUFnQXlBQ05nSVFJQUlnQXpZQ0dBc2dCU2dDRkNJQ1JRMEFJQU1nQWpZQ0ZDQUNJQU0yQWhnTElBQWdBVUVCY2pZQ0JDQUFJQUZxSUFFMkFnQWdBRUdjK2dRb0FnQkhEUUJCa1BvRUlBRTJBZ0FQQ3lBQlFmOEJUUVJBSUFGQmVIRkJzUG9FYWlFQ0FuOUJpUG9FS0FJQUlnTkJBU0FCUVFOMmRDSUJjVVVFUUVHSStnUWdBU0FEY2pZQ0FDQUNEQUVMSUFJb0FnZ0xJUUVnQWlBQU5nSUlJQUVnQURZQ0RDQUFJQUkyQWd3Z0FDQUJOZ0lJRHd0Qkh5RURJQUZCLy8vL0IwMEVRQ0FCUVNZZ0FVRUlkbWNpQW10MlFRRnhJQUpCQVhSclFUNXFJUU1MSUFBZ0F6WUNIQ0FBUWdBM0FoQWdBMEVDZEVHNC9BUnFJUUlDUUFKQVFZejZCQ2dDQUNJRVFRRWdBM1FpQjNGRkJFQkJqUG9FSUFRZ0IzSTJBZ0FnQWlBQU5nSUFJQUFnQWpZQ0dBd0JDeUFCUVJrZ0EwRUJkbXRCQUNBRFFSOUhHM1FoQXlBQ0tBSUFJUUlEUUNBQ0lnUW9BZ1JCZUhFZ0FVWU5BaUFEUVIxMklRSWdBMEVCZENFRElBUWdBa0VFY1dvaUJ5Z0NFQ0lDRFFBTElBY2dBRFlDRUNBQUlBUTJBaGdMSUFBZ0FEWUNEQ0FBSUFBMkFnZ1BDeUFFS0FJSUlnRWdBRFlDRENBRUlBQTJBZ2dnQUVFQU5nSVlJQUFnQkRZQ0RDQUFJQUUyQWdnTEM2OEJBZ1ovQTMwZ0FVRWdhaUVISUFGQkVHb2hDQU5BSUFSQkEwY0VRQ0FBSUFSQkJYUnFJZ1VyQXhDMklRa2dCU3NEQ0xZaENpQUZLd01BdGlFTFFRQWhBd05BSUFOQkJFY0VRQ0FEUVFKMElnWWdBaUFFUVFSMGFtb2dDU0FHSUFkcUtnSUFsQ0FMSUFFZ0Jtb3FBZ0NVSUFZZ0NHb3FBZ0FnQ3BTU2tqZ0NBQ0FEUVFGcUlRTU1BUXNMSUFJZ0JFRUVkR29pQXlBREtnSU1JQVVyQXhpMmtqZ0NEQ0FFUVFGcUlRUU1BUXNMQ3hJQUlBQkZCRUJCQUE4TElBQWdBUkQwQWd1RkFnQUNRQ0FBQkg4Z0FVSC9BRTBOQVFKQUl3TW9BbUFvQWdCRkJFQWdBVUdBZjNGQmdMOERSZzBEREFFTElBRkIvdzlOQkVBZ0FDQUJRVDl4UVlBQmNqb0FBU0FBSUFGQkJuWkJ3QUZ5T2dBQVFRSVBDeUFCUVlCQWNVR0F3QU5ISUFGQmdMQURUM0ZGQkVBZ0FDQUJRVDl4UVlBQmNqb0FBaUFBSUFGQkRIWkI0QUZ5T2dBQUlBQWdBVUVHZGtFL2NVR0FBWEk2QUFGQkF3OExJQUZCZ0lBRWEwSC8vejlOQkVBZ0FDQUJRVDl4UVlBQmNqb0FBeUFBSUFGQkVuWkI4QUZ5T2dBQUlBQWdBVUVHZGtFL2NVR0FBWEk2QUFJZ0FDQUJRUXgyUVQ5eFFZQUJjam9BQVVFRUR3c0xFRmxCR1RZQ0FFRi9CVUVCQ3c4TElBQWdBVG9BQUVFQkN4MEFJQUJCQUNBQVFaa0JUUnRCQVhSQjBNNERhaThCQUVISXZ3TnFDMGdCQW44Q2Z5QUJRUjlOQkVBZ0FDZ0NBQ0VDSUFCQkJHb01BUXNnQVVFZ2F5RUJJQUFMS0FJQUlRTWdBQ0FDSUFGME5nSUFJQUFnQXlBQmRDQUNRU0FnQVd0MmNqWUNCQXZJQWdFR2Z5TUFRZkFCYXlJSUpBQWdDQ0FES0FJQUlnYzJBdWdCSUFNb0FnUWhBeUFJSUFBMkFnQWdDQ0FETmdMc0FVRUFJQUZySVF3Z0JVVWhDUUpBQWtBQ1FBSkFJQWRCQVVjRVFDQUFJUWRCQVNFRkRBRUxJQUFoQjBFQklRVWdBdzBBREFFTEEwQWdCeUFHSUFSQkFuUnFJZ29vQWdCcklnTWdBQ0FDRVB3QlFRQk1EUUVnQ1VGL2N5RUxRUUVoQ1FKQUlBc2dCRUVDU0hKQkFYRkZCRUFnQ2tFSWF5Z0NBQ0VLSUFjZ0RHb2lDeUFESUFJUS9BRkJBRTROQVNBTElBcHJJQU1nQWhEOEFVRUFUZzBCQ3lBSUlBVkJBblJxSUFNMkFnQWdDRUhvQVdvaUJ5QUhFSjBGSWdjUStBSWdCVUVCYWlFRklBUWdCMm9oQkNBRElRY2dDQ2dDNkFGQkFVY05BU0FJS0FMc0FRMEJEQU1MQ3lBSElRTU1BUXNnQnlFRElBbEZEUUVMSUFFZ0NDQUZFSndGSUFNZ0FTQUNJQVFnQmhEZEF3c2dDRUh3QVdva0FBdExBUUovSUFBb0FnUWhBaUFBQW44Z0FVRWZUUVJBSUFBb0FnQWhBeUFDREFFTElBRkJJR3NoQVNBQ0lRTkJBQXNpQWlBQmRqWUNCQ0FBSUFKQklDQUJhM1FnQXlBQmRuSTJBZ0FMTUFFQmZ5QUJJd01pQWlnQ1NDQUFRUUowYWlJQUtBSUFSd1JBSUFBZ0FUWUNBQ0FDSUFJdEFDcEJBWEk2QUNvTEMyNEJCSDhnQUNnQ0RDTURLQUlZUmdSQUlBQkJBRFlDREFzRFFDQUFLQUlFSVFNZ0FDQUFLQUlBSWdFZ0FVRUJhMEVBSUFGQi8vLy8vd2R4SWdKQkFVY2JRUUFnQWtILy8vLy9CMGNiSWdRUWV5QUJSdzBBQ3lBRFJTQUJRUUJPY1NBRWNrVUVRQ0FBSUFJUS93RUxDd29BSUFBZ0FmNUJBZ0FMaXdNQkJuOGdBQzBBQUVFUGNVVUVRQ0FBUVFScVFRQkJDaEI3UVFweER3c0NmeUFBS0FJQUlRSUNRQUpBQWtBakF5SUJLQUlZSWdRZ0FDZ0NCQ0lEUWYvLy8vOERjU0lHUncwQUFrQWdBa0VJY1VVTkFDQUFLQUlVUVFCT0RRQWdBRUVBTmdJVUlBTkJnSUNBZ0FSeElRTU1BZ3NnQWtFRGNVRUJSdzBBUVFZaEJTQUFLQUlVSWdGQi92Ly8vd2RMRFFJZ0FDQUJRUUZxTmdJVVFRQU1Bd3RCT0NFRklBWkIvLy8vL3dOR0RRRUNRRUVBSUFNZ0FrRUVjUnNnQm5JTkFDQUFRUVJxSUFNZ0FrR0FBWEVFZnlBQktBSlFSUVJBSUFGQmREWUNVQXNnQUNnQ0NDRUdJQUVnQUVFUWFqWUNWQ0FFUVlDQWdJQjRjaUFFSUFZYkJTQUVDeUFEUVlDQWdJQUVjWElRZXlBRFJnMEJJQUZCQURZQ1ZDQUNRUXh4UVF4SERRQWdBQ2dDQ0EwQ0MwRUtEQUlMSUFFb0Frd2hBaUFBSUFGQnpBQnFJZ1UyQWd3Z0FDQUNOZ0lRSUFCQkVHb2hCQ0FDSUFWSEJFQWdBa0VFYXlBRU5nSUFDeUFCSUFRMkFreEJBQ0VGSUFGQkFEWUNWQ0FEUlEwQUlBQkJBRFlDRkVFK0RBRUxJQVVMQ3hzQUFrQWdBRVVOQUNBQUtBSk1RUUJPRFFBZ0FFRUFOZ0pNQ3d2SkJRRUZmeU1BUVNCcklnSWtBQ0FDUVFBMkFoZ2dBa0lBTndNUUlBSkNBRGNEQ0NBQUtBSVFHaU1FQkVBUUtRc0NRQUpBSUFFdEFBQkJEM0ZGRFFBakF5Z0NHQ0FCS0FJRVFmLy8vLzhIY1VZTkFBd0JDd0ovSUFBb0FnQWlCZ1JBSUFBb0FnZ2hBeUFBUVF4cUVORUJJQUJCQ0dvTUFRc2dBRUVnYWlJREVJQURJQUpCQWpZQ0ZDQUNRUUEyQWhBZ0FpQUFLQUlFSWdRMkFnd2dBQ0FDUVFocUlnVTJBZ1FDUUNBQUtBSVVSUVJBSUFBZ0JUWUNGQXdCQ3lBRUlBSkJDR28yQWdBTElBTVEvd0pCQWlFRElBSkJGR29MSVFVZ0FSQnNHa0VDSUFKQkJHb1FuQUlnQWlnQ0JFRUJSZ1JBUVFGQkFCQ2NBZ3NnQlNBREVPY0RJUVFDUUNBRktBSUFJQU5IRFFBRFFDQUVRUnRIUVFBZ0JCc05BU0FGSUFNUTV3TWhCQ0FGS0FJQUlBTkdEUUFMQ3lBRVFRQWdCRUViUnhzaEJBSi9Ba0FDUUNBR0JFQWdCRUVMUmdSQVFRdEJBQ0FBS0FJSUlBTkdHeUVFQ3lBQVFReHFJZ01RcEFWQmdZQ0FnSGhIRFFJTUFRc2dBa0VRYWtFQVFRSVFlMFVFUUNBQVFTQnFJZ01RZ0FNQ1FDQUFLQUlFSUFKQkNHcEdCRUFnQUNBQ0tBSU1OZ0lFREFFTElBSW9BZ2dpQlVVTkFDQUZJQUlvQWd3MkFnUUxBa0FnQUNnQ0ZDQUNRUWhxUmdSQUlBQWdBaWdDQ0RZQ0ZBd0JDeUFDS0FJTUlnQkZEUUFnQUNBQ0tBSUlOZ0lBQ3lBREVQOENJQUlvQWhnaUFFVU5BaUFBRUtRRlFRRkhEUUlnQWlnQ0dDRUREQUVMSUFKQkZHb1FnQU1nQVJCd0dnSkFJQUlvQWd3TkFDQUJMUUFBUVFoeERRQWdBVUVJYWhEUkFRc0NRQ0FDS0FJSUlnTUVRQ0FCS0FJRUlnQkJBRW9FUUNBQlFRUnFJQUFnQUVHQWdJQ0FlSElRZXhvTElBTkJER29pQUJEbEF5QUFRZi8vLy84SEVQOEJEQUVMSUFFdEFBQkJDSEVOQUNBQlFRaHFFTUVDQ3lBQ0tBSUVEQUlMSUFNUTBBRUxJQUVRY0NFQUlBSW9BZ1JCQUJDY0FpQUFJQVFnQUJ0QkMwY05BVUVCQzBFQUVKd0NDeUFDUVNCcUpBQUxFZ0FnQUJEckEwRUNSZ1JBSUFBUTBBRUxDeXdBSUFCQkFFRUJFSHNFUUNBQVFRRkJBaEI3R2dOQUlBQkJBRUVDRVA0QklBQkJBRUVDRUhzTkFBc0xDdzBBSUFCQi8vLy8vd2NRL3dFTG9nUUJBMzhqQUVFUWF5SUVKQUFnQUJCd0dnSi9Ba0FnQUNBQkVLc0ZJZ05GQkVBZ0FDZ0NIQ0lESUFBb0FpQkdCRUFnQUNnQ0dDQURRUUYwUVFFZ0F4c2lBMEVDZEJDMEFpSUZSUTBDSUFBZ0F6WUNJQ0FBSUFVMkFoZ0xJQUVRc1FVaUEwVU5BU0FBSUFBb0Fod2lBVUVCYWpZQ0hDQUFLQUlZSUFGQkFuUnFJQU0yQWdBTElBTU1BUXRCQUFzaEFTQUFFR3dhSUFFRWZ5QUVJQUlvQWdnMkFnZ2dCQ0FDS1FJQU53TUFJd0JCTUdzaUFpUUFBa0FDZnlBQklnQW9BaHdpQS80UUFud2hBUU5BUVFBZ0FVVU5BUm9nQVNBRElBRWdBVUVCYXY1SUFud2lBVWNOQUF0QkFRdEZCRUJCQUNFRERBRUxJQUJCQkdvaUFSQndHaUFDSUFRb0FnZzJBaUFnQWlBRUtRSUFOd01ZSUFBZ0FrRVlhaENzQlNFRElBRVFiQm9DZnlBREJIOGdBRUVDL2tFQ0FDRUZRUUVoQXlBQUtBSWNJZ0VnQlVFQ1JnMEJHaUFDSUFBMkFpd2dBaUFBTmdJUUlBSkJrUUkyQWlnZ0FrR1NBallDSkNBQ0lBSXBBaVEzQXdnakFFRVFheUlESkFBZ0FTZ0NlRUVFYWhCd0dpQUJLQUo0SUFNZ0FpZ0NFRFlDQ0NBRElBSXBBZ2czQXdBZ0F4Q3NCUm9nQVNnQ2VFRUVhaEJzR2dKQUlBRW9BbmhCQXY1QkFnQkJBa1lOQUNBQi9oQUNnQUVFUUNBQlFYLytBQUlBR2d3QkN5QUJJd01RSVFzZ0EwRVFhaVFBUVFFRlFRQUxJUU1nQUNnQ0hBc2lBRUVCL2lVQ2ZFRUJSZ1JBSUFCQi9BQnFRZi8vLy84SEVQOEJDd3NnQWtFd2FpUUFJQU1GUVFBTElBUkJFR29rQUFzTkFDQUFLQUlzSUFBb0FqQkdDdzBBUWFUb0JCQ0ZBMEdvNkFRTHJBRUJBMzhDUUVIYjVRUXNBQUFpQWtVTkFDQUFRUUJCZ1lDQWdIZ1FleUVCSUFKQkFFZ0VRRUhiNVFSQkFEb0FBQXNnQVVVTkFBTkFJQUFnQVVILy8vLy9CMm9nQVNBQlFRQklHeUlDSUFKQi8vLy8vd2RyRUhzaUFTQUNSZzBCSUFOQkFXb2lBMEVLUncwQUN5QUFRUUVRdFFWQkFXb2hBUU5BSUFGQkFFZ0VRQ0FBSUFFUXV3VWdBVUgvLy8vL0Iyb2hBUXNnQVNBQUlBRWdBVUdBZ0lDQWVISVFleUlCUncwQUN3c0xFQUJFQUFBQUFBQUE4RDhnQUJEakFRdmFBUUVJZnlBQUlBQkJQUkNYQlNJQlJnUkFRUUFQQ3dKQUlBQWdBU0FBYXlJRmFpMEFBQTBBUWRUbEJDZ0NBQ0lDUlEwQUlBSW9BZ0FpQVVVTkFBTkFBa0FDZnlBQUlRUkJBQ0FGSWdaRkRRQWFJQUF0QUFBaUF3Ui9Ba0FEUUNBRElBRXRBQUFpQjBjZ0IwVnlEUUVnQmtFQmF5SUdSUTBCSUFGQkFXb2hBU0FFTFFBQklRTWdCRUVCYWlFRUlBTU5BQXRCQUNFREN5QURCVUVBQ3lBQkxRQUFhd3RGQkVBZ0FpZ0NBQ0FGYWlJQkxRQUFRVDFHRFFFTElBSW9BZ1FoQVNBQ1FRUnFJUUlnQVEwQkRBSUxDeUFCUVFGcUlRZ0xJQWdMd2dFQkEzOENRQ0FDS0FJUUlnTUVmeUFEQlNBQ0VPb0REUUVnQWlnQ0VBc2dBaWdDRkNJRWF5QUJTUVJBSUFJZ0FDQUJJQUlvQWlRUkJBQVBDd0pBQWtBZ0FVVWdBaWdDVUVFQVNISU5BQ0FCSVFNRFFDQUFJQU5xSWdWQkFXc3RBQUJCQ2tjRVFDQURRUUZySWdNTkFRd0NDd3NnQWlBQUlBTWdBaWdDSkJFRUFDSUVJQU5KRFFJZ0FTQURheUVCSUFJb0FoUWhCQXdCQ3lBQUlRVkJBQ0VEQ3lBRUlBVWdBUkJyR2lBQ0lBSW9BaFFnQVdvMkFoUWdBU0FEYWlFRUN5QUVDemdCQVg0Q1FDQUJyQ0VESUFBb0FreEJBRWdFUUNBQUlBTWdBaENLQXd3QkN5QUFFSVVCSUFBZ0F5QUNFSW9EQkVBZ0FCQ0VBUXNMQzVRQkFRRi9Ba0FnQWtFRFR3UkFFRmxCSERZQ0FBd0JDd0pBSUFKQkFVY05BQ0FBS0FJSUlnTkZEUUFnQVNBRElBQW9BZ1JyckgwaEFRc2dBQ2dDRkNBQUtBSWNSd1JBSUFCQkFFRUFJQUFvQWlRUkJBQWFJQUFvQWhSRkRRRUxJQUJCQURZQ0hDQUFRZ0EzQXhBZ0FDQUJJQUlnQUNnQ0tCRVRBRUlBVXcwQUlBQkNBRGNDQkNBQUlBQW9BZ0JCYjNFMkFnQUxDNVFCQVFOL0l3QkJFR3NpQXlRQUlBTWdBVG9BRHdKQUFrQWdBQ2dDRUNJQ0JIOGdBZ1VnQUJEcUF3UkFRWDhoQWd3REN5QUFLQUlRQ3lBQUtBSVVJZ1JHRFFBZ0FVSC9BWEVpQWlBQUtBSlFSZzBBSUFBZ0JFRUJhallDRkNBRUlBRTZBQUFNQVFzZ0FDQURRUTlxUVFFZ0FDZ0NKQkVFQUVFQlJ3UkFRWDhoQWd3QkN5QURMUUFQSVFJTElBTkJFR29rQUNBQ0N4Z0FJQUJCQUNBQUlBSCtTQUxRNVFRaUFTQUFJQUZHR3d2V0FRRUJmd0pBSUFSQkFFd05BQ0FBSUFGQkFuUnFJUUVnQWlBRFFRSjBhaUVEQWtBZ0JFRURjU0lHUlFSQUlBUWhBZ3dCQzBFQUlRQWdCQ0VDQTBBZ0F5Z0NBQ0FCS0FJQUlBVVFheG9nQWtFQmF5RUNJQU5CQkdvaEF5QUJRUVJxSVFFZ0FFRUJhaUlBSUFaSERRQUxDeUFFUVFSSkRRQURRQ0FES0FJQUlBRW9BZ0FnQlJCckdpQURLQUlFSUFFb0FnUWdCUkJyR2lBREtBSUlJQUVvQWdnZ0JSQnJHaUFES0FJTUlBRW9BZ3dnQlJCckdpQURRUkJxSVFNZ0FVRVFhaUVCSUFKQkJXc2dBa0VFYXlFQ1FYNUpEUUFMQ3dzU0FDQUFJQUZxUVFGcklnQWdBQ0FCYjJzTDhnWUJEbjhqQUVHZ0Ntc2lDQ1FBSUFKQkJFOEVRQ0FBS0FJQUlnWWdBallDR0NBR1FUUTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUFRYlFCUWNRQklBRWJhaUFDUVFKMGFpZ0NBQ0lKUlFSQUlBQW9BZ0FpQmlBQ05nSVlJQVpCTkRZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFNb0FnQWlCVVVFUUNBRElBQkJBVUdRQ3lBQUtBSUVLQUlBRVFRQUlnVTJBZ0FMSUFVZ0NUWUNqQUZCQUNFR1FRRWhBZ05BSUFZZ0FpQUphaTBBQUNJRWFpSURRWUVDVGdSQUlBQW9BZ0FpQjBFSk5nSVVJQUFnQnlnQ0FCRUJBQXNnQkFSQUlBaEJrQWhxSUFacUlBSWdCQkJRR2lBRElRWUxJQUpCQVdvaUFrRVJSdzBBQzBFQUlRTWdDRUdRQ0dvZ0JtcEJBRG9BQUNBSUxRQ1FDQ0lIQkVBZ0I4QWhCRUVBSVFJRFFDQUh3Q0FFUmdSQUEwQWdDQ0FEUVFKMGFpQUNOZ0lBSUFKQkFXb2hBaUFFSUFOQkFXb2lBeUFJUVpBSWFtb3NBQUFpQjBZTkFBc0xRUUVnQkhRZ0Frd0VRQ0FBS0FJQUlncEJDVFlDRkNBQUlBb29BZ0FSQVFBTElBUkJBV29oQkNBQ1FRRjBJUUlnQjBIL0FYRU5BQXNMSUFWQnlBQnFJUWRCQUNFRFFRRWhBZ05BSUFVZ0FrRUNkR29nQWlBSmFpSUVMUUFBQkg4Z0J5QUNRUUowYWlBRElBZ2dBMEVDZEdvb0FnQnJOZ0lBSUFNZ0JDMEFBR29pQTBFQ2RDQUlha0VFYXlnQ0FBVkJmd3MyQWdBZ0FrRUJhaUlDUVJGSERRQUxJQVZCLy84L05nSkVRUUFoQnlBRlFaQUJha0VBUVlBSUVGQWhEQ0FGUVpBSmFpRU5JQWxCRVdvaENrRUJJUVVEUUNBRklBbHFJZzR0QUFBRVFFRUJJUXRCQVVFSUlBVnJJZzkwSVFRRFFDQUhJQXBxSVJBZ0NDQUhRUUowYWlnQ0FDQVBkQ0VDSUFRaEF3TkFJQXdnQWtFQ2RHb2dCVFlDQUNBQ0lBMXFJQkF0QUFBNkFBQWdBa0VCYWlFQ0lBTkJBVW9nQTBFQmF5RUREUUFMSUFkQkFXb2hCeUFMSUE0dEFBQkpJQXRCQVdvaEN3MEFDd3NnQlVFQmFpSUZRUWxIRFFBTEFrQWdBVVVnQmtFQVRISU5BRUVBSVFJZ0JrRUJSd1JBSUFaQmZuRWhBVUVBSVFNRFFDQUNJQXBxSWdRdEFBQkJFRThFUUNBQUtBSUFJZ1ZCQ1RZQ0ZDQUFJQVVvQWdBUkFRQUxJQVF0QUFGQkVFOEVRQ0FBS0FJQUlnUkJDVFlDRkNBQUlBUW9BZ0FSQVFBTElBSkJBbW9oQWlBRFFRSnFJZ01nQVVjTkFBc0xJQVpCQVhGRkRRQWdBaUFLYWkwQUFFRVFTUTBBSUFBb0FnQWlBVUVKTmdJVUlBQWdBU2dDQUJFQkFBc2dDRUdnQ21va0FBc3hBUU4vSUFBUWd3RWlBaUFCRUlNQlFRRnFJZ1JxRUUwaUF5QUFJQUw4Q2dBQUlBSWdBMm9nQVNBRS9Bb0FBQ0FEQzRzT0FRRi9Jd0JCRUdzaUF5UUFJQU1nQURZQ0RDQURJQUUyQWdnZ0F5QUNOZ0lFSUFNb0FnZ2hBU0FES0FJRUlRSWpBRUVnYXlJQUlBTW9BZ3cyQWhnZ0FDQUJOZ0lVSUFBZ0FqWUNFQ0FBSUFBb0FoaEJFSFkyQWd3Z0FDQUFLQUlZUWYvL0EzRTJBaGdDUUNBQUtBSVFRUUZHQkVBZ0FDQUFLQUlVTFFBQUlBQW9BaGhxTmdJWUlBQW9BaGhCOGY4RFR3UkFJQUFnQUNnQ0dFSHgvd05yTmdJWUN5QUFJQUFvQWhnZ0FDZ0NER28yQWd3Z0FDZ0NERUh4L3dOUEJFQWdBQ0FBS0FJTVFmSC9BMnMyQWd3TElBQWdBQ2dDR0NBQUtBSU1RUkIwY2pZQ0hBd0JDeUFBS0FJVVJRUkFJQUJCQVRZQ0hBd0JDeUFBS0FJUVFSQkpCRUFEUUNBQUlBQW9BaEFpQVVFQmF6WUNFQ0FCQkVBZ0FDQUFLQUlVSWdGQkFXbzJBaFFnQUNBQkxRQUFJQUFvQWhocU5nSVlJQUFnQUNnQ0dDQUFLQUlNYWpZQ0RBd0JDd3NnQUNnQ0dFSHgvd05QQkVBZ0FDQUFLQUlZUWZIL0EyczJBaGdMSUFBZ0FDZ0NERUh4L3dOd05nSU1JQUFnQUNnQ0dDQUFLQUlNUVJCMGNqWUNIQXdCQ3dOQUlBQW9BaEJCc0N0UEJFQWdBQ0FBS0FJUVFiQXJhellDRUNBQVFkc0NOZ0lJQTBBZ0FDQUFLQUlVTFFBQUlBQW9BaGhxTmdJWUlBQWdBQ2dDR0NBQUtBSU1hallDRENBQUlBQW9BaFF0QUFFZ0FDZ0NHR28yQWhnZ0FDQUFLQUlZSUFBb0FneHFOZ0lNSUFBZ0FDZ0NGQzBBQWlBQUtBSVlhallDR0NBQUlBQW9BaGdnQUNnQ0RHbzJBZ3dnQUNBQUtBSVVMUUFESUFBb0FoaHFOZ0lZSUFBZ0FDZ0NHQ0FBS0FJTWFqWUNEQ0FBSUFBb0FoUXRBQVFnQUNnQ0dHbzJBaGdnQUNBQUtBSVlJQUFvQWd4cU5nSU1JQUFnQUNnQ0ZDMEFCU0FBS0FJWWFqWUNHQ0FBSUFBb0FoZ2dBQ2dDREdvMkFnd2dBQ0FBS0FJVUxRQUdJQUFvQWhocU5nSVlJQUFnQUNnQ0dDQUFLQUlNYWpZQ0RDQUFJQUFvQWhRdEFBY2dBQ2dDR0dvMkFoZ2dBQ0FBS0FJWUlBQW9BZ3hxTmdJTUlBQWdBQ2dDRkMwQUNDQUFLQUlZYWpZQ0dDQUFJQUFvQWhnZ0FDZ0NER28yQWd3Z0FDQUFLQUlVTFFBSklBQW9BaGhxTmdJWUlBQWdBQ2dDR0NBQUtBSU1hallDRENBQUlBQW9BaFF0QUFvZ0FDZ0NHR28yQWhnZ0FDQUFLQUlZSUFBb0FneHFOZ0lNSUFBZ0FDZ0NGQzBBQ3lBQUtBSVlhallDR0NBQUlBQW9BaGdnQUNnQ0RHbzJBZ3dnQUNBQUtBSVVMUUFNSUFBb0FoaHFOZ0lZSUFBZ0FDZ0NHQ0FBS0FJTWFqWUNEQ0FBSUFBb0FoUXRBQTBnQUNnQ0dHbzJBaGdnQUNBQUtBSVlJQUFvQWd4cU5nSU1JQUFnQUNnQ0ZDMEFEaUFBS0FJWWFqWUNHQ0FBSUFBb0FoZ2dBQ2dDREdvMkFnd2dBQ0FBS0FJVUxRQVBJQUFvQWhocU5nSVlJQUFnQUNnQ0dDQUFLQUlNYWpZQ0RDQUFJQUFvQWhSQkVHbzJBaFFnQUNBQUtBSUlRUUZySWdFMkFnZ2dBUTBBQ3lBQUlBQW9BaGhCOGY4RGNEWUNHQ0FBSUFBb0FneEI4ZjhEY0RZQ0RBd0JDd3NnQUNnQ0VBUkFBMEFnQUNnQ0VFRVFUd1JBSUFBZ0FDZ0NFRUVRYXpZQ0VDQUFJQUFvQWhRdEFBQWdBQ2dDR0dvMkFoZ2dBQ0FBS0FJWUlBQW9BZ3hxTmdJTUlBQWdBQ2dDRkMwQUFTQUFLQUlZYWpZQ0dDQUFJQUFvQWhnZ0FDZ0NER28yQWd3Z0FDQUFLQUlVTFFBQ0lBQW9BaGhxTmdJWUlBQWdBQ2dDR0NBQUtBSU1hallDRENBQUlBQW9BaFF0QUFNZ0FDZ0NHR28yQWhnZ0FDQUFLQUlZSUFBb0FneHFOZ0lNSUFBZ0FDZ0NGQzBBQkNBQUtBSVlhallDR0NBQUlBQW9BaGdnQUNnQ0RHbzJBZ3dnQUNBQUtBSVVMUUFGSUFBb0FoaHFOZ0lZSUFBZ0FDZ0NHQ0FBS0FJTWFqWUNEQ0FBSUFBb0FoUXRBQVlnQUNnQ0dHbzJBaGdnQUNBQUtBSVlJQUFvQWd4cU5nSU1JQUFnQUNnQ0ZDMEFCeUFBS0FJWWFqWUNHQ0FBSUFBb0FoZ2dBQ2dDREdvMkFnd2dBQ0FBS0FJVUxRQUlJQUFvQWhocU5nSVlJQUFnQUNnQ0dDQUFLQUlNYWpZQ0RDQUFJQUFvQWhRdEFBa2dBQ2dDR0dvMkFoZ2dBQ0FBS0FJWUlBQW9BZ3hxTmdJTUlBQWdBQ2dDRkMwQUNpQUFLQUlZYWpZQ0dDQUFJQUFvQWhnZ0FDZ0NER28yQWd3Z0FDQUFLQUlVTFFBTElBQW9BaGhxTmdJWUlBQWdBQ2dDR0NBQUtBSU1hallDRENBQUlBQW9BaFF0QUF3Z0FDZ0NHR28yQWhnZ0FDQUFLQUlZSUFBb0FneHFOZ0lNSUFBZ0FDZ0NGQzBBRFNBQUtBSVlhallDR0NBQUlBQW9BaGdnQUNnQ0RHbzJBZ3dnQUNBQUtBSVVMUUFPSUFBb0FoaHFOZ0lZSUFBZ0FDZ0NHQ0FBS0FJTWFqWUNEQ0FBSUFBb0FoUXRBQThnQUNnQ0dHbzJBaGdnQUNBQUtBSVlJQUFvQWd4cU5nSU1JQUFnQUNnQ0ZFRVFhallDRkF3QkN3c0RRQ0FBSUFBb0FoQWlBVUVCYXpZQ0VDQUJCRUFnQUNBQUtBSVVJZ0ZCQVdvMkFoUWdBQ0FCTFFBQUlBQW9BaGhxTmdJWUlBQWdBQ2dDR0NBQUtBSU1hallDREF3QkN3c2dBQ0FBS0FJWVFmSC9BM0EyQWhnZ0FDQUFLQUlNUWZIL0EzQTJBZ3dMSUFBZ0FDZ0NHQ0FBS0FJTVFSQjBjallDSEFzZ0FDZ0NIQ0FEUVJCcUpBQUxFQUFnQUNnQ0FDSUFCRUFnQUJBNkN3czFBUUYvSUFFZ0FDZ0NCQ0lDUVFGMWFpRUJJQUFvQWdBaEFDQUJJQUpCQVhFRWZ5QUJLQUlBSUFCcUtBSUFCU0FBQ3hFQUFBc0hBQ0FBRVE4QUMwb0JBWDhqQUVFUWF5SURKQUFnQXlBQ05nSU1RWnlrQWlBQlFZVERCRUdZcHdKQjdnQWdBMEVNYWlJQkVPY0JRWVREQkVIOG53SkI3d0FnQVJEbkFSQStJQU5CRUdva0FDQUFDeFlBSUFBZ0FVSG9BRUg4bndKQjdLZ0NRUU1RbmdNTEZBQWdBQ0FCRURzMkFnUWdBQ01ETmdJQUlBQUxHUUFnQUNBQlFjMitBVUdGMGdSQnNNZ0VRYXpJQkJDZkF3dkNBUUVCZlNBQUlBRXFBZ0NNT0FJQUlBRXFBZ1FoQXlBQVFnQTNBZ3dnQUVHQWdJRDhlellDQ0NBQVFRQTJBaFFnQUNBRGpEZ0NCQ0FBSUFJcUFnQWdBU29DQUpRNEFoZ2dBQ0FDS2dJQUlBRXFBZ1NVT0FJY0lBSXFBZ0FoQXlBQVFnQTNBaVFnQUNBRE9BSWdJQUJCQURZQ0xDQUFJQUVxQWdDTU9BSXdJQUVxQWdRaEF5QUFRWUNBZ1B4N05nSTRJQUFnQTR3NEFqUWdBQ0FDS2dJRUlBRXFBZ0NVT0FJOElBQWdBaW9DQkNBQktnSUVsRGdDUUNBQUlBSXFBZ1E0QWtRTEtBRUJmU0FBSUFFZ0FoQ25BU0VHSUFNZ0JDQUZFS2NCUXdBQUFBQmVJQVpEQUFBQUFGNXpSUXRqQVFKL0l3QkJJR3NpQWlRQUFrQWdBQ2dDQ0NBQUtBSUFJZ05yUVFOMUlBRkpCRUFnQVVHQWdJQ0FBazhOQVNBQUlBSkJER29nQVNBQUtBSUVJQU5yUVFOMUlBQkJDR29RcVFNaUFCQ29BeUFBRUtjREN5QUNRU0JxSkFBUEN4Q2dBZ0FMOFFNQ0NIOEJmUUpBQW45QkFpQUJRUUZHRFFBYUlBRWdBU0FCUVFGcmNVVU5BQm9nQVJEN0JBc2lBU0FBS0FJRUlnSk5CRUFnQVNBQ1R3MEJJQUpCQTBraEJRSi9JQUFvQWd5eklBQXFBaENWalNJS1F3QUFnRTlkSUFwREFBQUFBR0J4QkVBZ0Nxa01BUXRCQUFzaEF5QUJJQVVnQW1sQkFVdHlCSDhnQXhEN0JBVWdBMEVCUVNBZ0EwRUJhMmRyZENBRFFRSkpHd3NpQlNBQklBVkxHeUlCSUFKUERRRUxJQUFoQWdKQUlBRWlBd1JBSUFJZ0F4Q3RBeENkQmlBQ0lBTTJBZ1FEUUNBRElBUkdCRUFnQWlnQ0NDSUJSUTBESUFKQkNHb2hCQ0FCS0FJRUlRVUNRQ0FEYVNJQVFRRk5CRUFnQlNBRFFRRnJjU0VGREFFTElBTWdCVXNOQUNBRklBTndJUVVMSUFJb0FnQWdCVUVDZEdvZ0JEWUNBQ0FEUVFGcklRY2dBRUVCU3lFSUEwQWdBU2dDQUNJQVJRMEVJQUFvQWdRaEJBSkFJQWhGQkVBZ0JDQUhjU0VFREFFTElBTWdCRXNOQUNBRUlBTndJUVFMQWtBZ0JDQUZSZzBBSUFSQkFuUWlCaUFDS0FJQWFpSUpLQUlBUlFSQUlBa2dBVFlDQUNBRUlRVU1BUXNnQVNBQUtBSUFOZ0lBSUFBZ0FpZ0NBQ0FHYWlnQ0FDZ0NBRFlDQUNBQ0tBSUFJQVpxS0FJQUlBQTJBZ0FNQVFzZ0FDRUJEQUFMQUFVZ0FpZ0NBQ0FFUVFKMGFrRUFOZ0lBSUFSQkFXb2hCQXdCQ3dBTEFBc2dBa0VBRUowR0lBSkJBRFlDQkFzTEN5RUJBWDhnQUNnQ0FDRUJJQUJCQURZQ0FDQUJCRUFnQUVFRWFpQUJFS2NHQ3dzOEFRRi9Jd0JCRUdzaUJpUUFJQVlnQVNrQ0FEY0NDRUhBcGdJZ0FDQUZJQVFnQXlBQ0lBWkJDR29RaVFGQkFFRUFRUUFRQUNBR1FSQnFKQUFMVlFFRGZ5TUFRUkJySWdZa0FDQUFLQUlBSVFjZ0FDd0FDeUVJSUFZZ0JTZ0NBRFlDQkNBR0lBUW9BZ0EyQWdnZ0JpQUJOZ0lNSUFZZ0J5QUFJQWhCQUVnYk5nSUFJQU1nQWlBR0VCZ2FJQVpCRUdva0FBc2tBQUpBSUFMK0VnQUFRUUZ4RFFBZ0FoQi9SUTBBSUFFZ0F4Q1lCQ0FDRUg0TElBRUxTUUVDZnlBQUtBSUVJZ1pCQ0hVaEJTQUdRUUZ4QkVBZ0FpZ0NBQ0FGRUkwRUlRVUxJQUFvQWdBaUFDQUJJQUlnQldvZ0EwRUNJQVpCQW5FYklBUWdBQ2dDQUNnQ0dCRUdBQXNZQUNBQVFiQzBBVFlDQUNBQVFRUnFJQUVRMkFFYUlBQUxpd0lCQTM4akFFRVFheUlJSkFBZ0FVRi9jMEgzLy8vL0Iyb2dBazhFUUNBQUVGVWhDU0FJUVFScUlnb2dBVUh6Ly8vL0Ewa0VmeUFJSUFGQkFYUTJBZ3dnQ0NBQklBSnFOZ0lFSUFvZ0NFRU1haEN0QWlnQ0FCQ1RBa0VCYWdWQjkvLy8vd2NMRUpJQ0lBZ29BZ1FoQWlBSUtBSUlHaUFFQkVBZ0FpQUpJQVFRdGdFTElBWUVRQ0FDSUFScUlBY2dCaEMyQVFzZ0F5QUVJQVZxSWdwcklRY2dBeUFLUndSQUlBSWdCR29nQm1vZ0JDQUphaUFGYWlBSEVMWUJDeUFCUVFwSEJFQWdDUkRpQWdzZ0FDQUNFTEVCSUFBZ0NDZ0NDQkN3QVNBQUlBUWdCbW9nQjJvaUFCQ0xBU0FJUVFBNkFBd2dBQ0FDYWlBSVFReHFFSlFCSUFoQkVHb2tBQThMRUpNQkFBc0hBQ0FBUVFocUN3Y0FJQUJCQWtrTEJBQkJCQXNKQUNBQVFRZ1FvUUlMa1FFQkEzOGdBU2dDQkNFQ0lBQW9BZ0FoQkNBQUtBSUVJUU1EUUNBRElBUkdSUVJBSUFKQkNHc2lBaUFEUVFocklnTXBBZ0EzQWdBTUFRc0xJQUVnQWpZQ0JDQUFLQUlBSVFNZ0FDQUNOZ0lBSUFFZ0F6WUNCQ0FBS0FJRUlRSWdBQ0FCS0FJSU5nSUVJQUVnQWpZQ0NDQUFLQUlJSVFJZ0FDQUJLQUlNTmdJSUlBRWdBallDRENBQklBRW9BZ1EyQWdBTFNnRUJmeUFBSUFNMkFoQWdBRUVBTmdJTUlBRUVRQ0FCRU9BR0lRUUxJQUFnQkRZQ0FDQUFJQVFnQWtFRGRHb2lBallDQ0NBQUlBUWdBVUVEZEdvMkFnd2dBQ0FDTmdJRUlBQUxIUUFnQUVFRWFoQ2NCRUYvUmdSQUlBQWdBQ2dDQUNnQ0NCRUJBQXNMRVFBZ0FDQUJJQUVvQWdBb0FpZ1JBZ0FMRUFFQmZ5QUFLQUlBSUFCQkFEWUNBQXNaQUNBQVFZQ0FnSUFFVHdSQUVPRUJBQXNnQUVFQ2RCQm1Dd2dBUWYvLy8vOEhDd1VBUWY4QUN6WUJBWDhnQUNnQ0JDSUNJQUZCQW5ScUlRRURRQ0FCSUFKR0JFQWdBQ0FCTmdJRUJTQUNRUUEyQWdBZ0FrRUVhaUVDREFFTEN3dGhBUUYvSXdCQkVHc2lBaVFBSUFJZ0FEWUNEQUpBSUFBZ0FVWU5BQU5BSUFJZ0FVRUVheUlCTmdJSUlBQWdBVThOQVNBQ0tBSU1JQUlvQWdnUTV3SWdBaUFDS0FJTVFRUnFJZ0EyQWd3Z0FpZ0NDQ0VCREFBTEFBc2dBa0VRYWlRQUN3OEFJQUFnQUNnQ0FFRUVhallDQUF2SkFnSUNmd0Y5QWtBQ1FDQUdRUUJNRFFBZ0JTZ0NCQ0FHUVFGcVRRMEFJQWRCQUV3TkFTQUhRUUZxSWdnZ0JTZ0NDRThOQVNBRklBZEJBV3NRV3lFSklBVWdCeEJiSVFjZ0JTQUlFRnNoQ0NBQUlBY2dCa0VDZENJRmFpSUFLZ0lFSUFCQkJHc2lCaW9DQUpOREFBQUFQNVE0QWdBZ0FTQUZJQWhxSWdFcUFnQWdCU0FKYWlJRktnSUFrME1BQUFBL2xEZ0NBQ0FDSUFZcUFnQWdBQ29DQUNJS0lBcVNreUFBS2dJRWtqZ0NBQ0FESUFVcUFnQWdBQ29DQUNJS0lBcVNreUFCS2dJQWtqZ0NBQ0FFSUFWQkJHc3FBZ0FnQVNvQ0JKSWdCU29DQkNBQlFRUnJLZ0lBa3BOREFBQ0FQcFE0QWdBUEMwSHdpQVZCOTZBQkVFZEJpNVFCRUVkQmpCa1FSMEdjQWhCS1FjY2RFRWRCNUpzQkVFY1FTUkJZQUF0QjhJZ0ZRY1doQVJCSFFZdVVBUkJIUVl3WkVFZEJuUUlRU2tISEhSQkhRZU9jQVJCSEVFa1FXQUFMSVFFQmZ5TUFRUkJySWdFa0FDQUJRUXhxSUFBUXlRRW9BZ0FnQVVFUWFpUUFDd2tBSUFCQkpCQ2hBZ3NQQUNBQUlBQW9BZ0JCQVdvMkFnQUxXUUVDZnlNQVFSQnJJZ01rQUNBQ0tBSUFJUVFnQUFKL0lBRWdBR3RCQW5VaUFnUkFBMEFnQUNBRUlBQW9BZ0JHRFFJYUlBQkJCR29oQUNBQ1FRRnJJZ0lOQUFzTFFRQUxJZ0FnQVNBQUd4RDBBU0FEUVJCcUpBQUxrUUVCQTM4Z0FTZ0NCQ0VDSUFBb0FnQWhCQ0FBS0FJRUlRTURRQ0FESUFSR1JRUkFJQUpCSkdzaUFpQURRU1JySWdOQkpQd0tBQUFNQVFzTElBRWdBallDQkNBQUtBSUFJUU1nQUNBQ05nSUFJQUVnQXpZQ0JDQUFLQUlFSVFJZ0FDQUJLQUlJTmdJRUlBRWdBallDQ0NBQUtBSUlJUUlnQUNBQktBSU1OZ0lJSUFFZ0FqWUNEQ0FCSUFFb0FnUTJBZ0FMK0FNQkFYOGpBRUVRYXlJTUpBQWdEQ0FBTmdJTUFrQUNRQ0FBSUFWR0JFQWdBUzBBQUVFQlJ3MEJRUUFoQUNBQlFRQTZBQUFnQkNBRUtBSUFJZ0ZCQVdvMkFnQWdBVUV1T2dBQUlBY1FTMFVOQWlBSktBSUFJZ0VnQ0d0Qm53RktEUUlnQ2lnQ0FDRUNJQWtnQVVFRWFqWUNBQ0FCSUFJMkFnQU1BZ3NDUUFKQUlBQWdCa2NOQUNBSEVFdEZEUUFnQVMwQUFFRUJSdzBDSUFrb0FnQWlBQ0FJYTBHZkFVb05BU0FLS0FJQUlRRWdDU0FBUVFScU5nSUFJQUFnQVRZQ0FFRUFJUUFnQ2tFQU5nSUFEQU1MSUFzZ0MwR0FBV29nREVFTWFoQzNBeUFMYXlJQVFRSjFJZ1pCSDBvTkFTQUdRZENJQkdvc0FBQWhCUUpBQWtBZ0FFRjdjU0lBUWRnQVJ3UkFJQUJCNEFCSERRRWdBeUFFS0FJQUlnRkhCRUJCZnlFQUlBRkJBV3NzQUFBUWp3SWdBaXdBQUJDUEFrY05CZ3NnQkNBQlFRRnFOZ0lBSUFFZ0JUb0FBQXdEQ3lBQ1FkQUFPZ0FBREFFTElBVVFqd0lpQUNBQ0xBQUFSdzBBSUFJZ0FCQ1NCVG9BQUNBQkxRQUFRUUZIRFFBZ0FVRUFPZ0FBSUFjUVMwVU5BQ0FKS0FJQUlnQWdDR3RCbndGS0RRQWdDaWdDQUNFQklBa2dBRUVFYWpZQ0FDQUFJQUUyQWdBTElBUWdCQ2dDQUNJQVFRRnFOZ0lBSUFBZ0JUb0FBRUVBSVFBZ0JrRVZTZzBDSUFvZ0NpZ0NBRUVCYWpZQ0FBd0NDMEVBSVFBTUFRdEJmeUVBQ3lBTVFSQnFKQUFnQUF0VkFRSi9Jd0JCRUdzaUJpUUFJQVpCREdvaUJTQUJFRndnQlJDY0FVSFFpQVJCOElnRUlBSVF6UUVnQXlBRkVJd0NJZ0VRckFFMkFnQWdCQ0FCRUpvQk5nSUFJQUFnQVJDWkFTQUZFRlFnQmtFUWFpUUFDMXNCQVg4Z0FDQUROZ0lRSUFCQkFEWUNEQ0FCQkVBZ0FVSEk0L0U0VHdSQUVPRUJBQXNnQVVFa2JCQm1JUVFMSUFBZ0JEWUNBQ0FBSUFRZ0FrRWtiR29pQWpZQ0NDQUFJQVFnQVVFa2JHbzJBZ3dnQUNBQ05nSUVJQUFMTHdFQmZ5TUFRUkJySWdNa0FDQUFJQUFnQWl3QUFDQUJJQUJyRUxzQ0lnQWdBU0FBR3hEMEFTQURRUkJxSkFBTDhBTUJBWDhqQUVFUWF5SU1KQUFnRENBQU9nQVBBa0FDUUNBQUlBVkdCRUFnQVMwQUFFRUJSdzBCUVFBaEFDQUJRUUE2QUFBZ0JDQUVLQUlBSWdGQkFXbzJBZ0FnQVVFdU9nQUFJQWNRUzBVTkFpQUpLQUlBSWdFZ0NHdEJud0ZLRFFJZ0NpZ0NBQ0VDSUFrZ0FVRUVhallDQUNBQklBSTJBZ0FNQWdzQ1FBSkFJQUFnQmtjTkFDQUhFRXRGRFFBZ0FTMEFBRUVCUncwQ0lBa29BZ0FpQUNBSWEwR2ZBVW9OQVNBS0tBSUFJUUVnQ1NBQVFRUnFOZ0lBSUFBZ0FUWUNBRUVBSVFBZ0NrRUFOZ0lBREFNTElBc2dDMEVnYWlBTVFROXFFTHdESUF0cklnVkJIMG9OQVNBRlFkQ0lCR29zQUFBaEJnSkFBa0FDUUFKQUlBVkJmbkZCRm1zT0F3RUNBQUlMSUFNZ0JDZ0NBQ0lCUndSQVFYOGhBQ0FCUVFGckxBQUFFSThDSUFJc0FBQVFqd0pIRFFZTElBUWdBVUVCYWpZQ0FDQUJJQVk2QUFBTUF3c2dBa0hRQURvQUFBd0JDeUFHRUk4Q0lnQWdBaXdBQUVjTkFDQUNJQUFRa2dVNkFBQWdBUzBBQUVFQlJ3MEFJQUZCQURvQUFDQUhFRXRGRFFBZ0NTZ0NBQ0lBSUFoclFaOEJTZzBBSUFvb0FnQWhBU0FKSUFCQkJHbzJBZ0FnQUNBQk5nSUFDeUFFSUFRb0FnQWlBRUVCYWpZQ0FDQUFJQVk2QUFCQkFDRUFJQVZCRlVvTkFpQUtJQW9vQWdCQkFXbzJBZ0FNQWd0QkFDRUFEQUVMUVg4aEFBc2dERUVRYWlRQUlBQUxWUUVDZnlNQVFSQnJJZ1lrQUNBR1FReHFJZ1VnQVJCY0lBVVFsUUZCMElnRVFmQ0lCQ0FDRU40QklBTWdCUkNPQWlJQkVLd0JPZ0FBSUFRZ0FSQ2FBVG9BQUNBQUlBRVFtUUVnQlJCVUlBWkJFR29rQUF0L0FnSi9BbjRqQUVHZ0FXc2lCQ1FBSUFRZ0FUWUNQQ0FFSUFFMkFoUWdCRUYvTmdJWUlBUkJFR29pQlVJQUVMNEJJQVFnQlNBRFFRRVFpUVVnQkNrRENDRUdJQVFwQXdBaEJ5QUNCRUFnQWlBRUtBS0lBU0FCSUFRb0FoUWdCQ2dDUEd0cWFqWUNBQXNnQUNBR053TUlJQUFnQnpjREFDQUVRYUFCYWlRQUMwUUJBbjhqQUVFUWF5SUJKQUFnQVNBQU5nSU1JQUVvQWd3aUFDZ0NBQVJBSUFBZ0FDZ0NBQkRXQkNBQktBSU1JZ0FvQWdBZ0FDZ0NDQm9RU0FzZ0FVRVFhaVFBQzJJQkFuOGpBRUVnYXlJQ0pBQUNRQ0FBS0FJSUlBQW9BZ0FpQTJ0QkpHMGdBVWtFUUNBQlFjamo4VGhQRFFFZ0FDQUNRUXhxSUFFZ0FDZ0NCQ0FEYTBFa2JTQUFRUWhxRUxzRElnQVF1QU1nQUJDMUF3c2dBa0VnYWlRQUR3c1E4QUVBQ3dzQUlBQkJwSklGRUwwQkN5c0JBWDhnQUVFRWFoREtCQ0FBUWV6bUF6WUNBRUdBNXdNMkFnQWdBRUhnNWdNb0FnQnFJQUVRM3dJTEt3RUJmeUFBUVFScUVNd0VJQUJCek9VRE5nSUFRZURsQXpZQ0FDQUFRY0RsQXlnQ0FHb2dBUkRmQWd0U0FRRi9JQUFvQWt4QkFFZ0VmMEVBQlNBQUVJVUJDMFVnQUNnQ2lBRkZCRUFnQUVIQTdBTkJxT3dESXdNb0FtQW9BZ0FiTmdLSUFRc2dBQ2dDU0VVRVFDQUFRUUUyQWtnTFJRUkFJQUFRaEFFTEM2MEdBUVovSUFBb0FnUWdBQ2dDQUNJQ2EwRUZkU0lESUFGSkJFQWpBRUVnYXlJSEpBQUNRQ0FCSUFOcklnVWdBQ2dDQ0NBQUtBSUVJZ0ZyUVFWMVRRUkFJQUFvQWdRaUFTQUZRUVYwYWlFQ0EwQWdBU0FDUmdSQUlBQWdBallDQkFVZ0FSQ0NCa0VnYWlFQkRBRUxDd3dCQ3lBQklBQW9BZ0JyUVFWMUlBVnFJZ05CZ0lDQXdBQlBCRUFROEFFQUMwSC8vLzgvSUFBb0FnZ2dBQ2dDQUdzaUFrRUVkU0lCSUFNZ0FTQURTeHNnQWtIZy8vLy9CMDhiSVFNZ0FDZ0NCQ0FBS0FJQWEwRUZkU0VCSUFkQkRHb2lBaUFBUVFocU5nSVFJQUpCQURZQ0RDQURCRUFnQTBHQWdJREFBRThFUUJEaEFRQUxJQU5CQlhRUVppRUdDeUFDSUFZMkFnQWdBaUFHSUFGQkJYUnFJZ0UyQWdnZ0FpQUdJQU5CQlhScU5nSU1JQUlnQVRZQ0JDQUNLQUlJSWdFZ0JVRUZkR29oQXdOQUlBRWdBMGNFUUNBQkVJSUdRU0JxSVFFTUFRc0xJQUlnQXpZQ0NDQUFLQUlFSVFNZ0FDZ0NBQ0VCSUFJb0FnUWhCaU1BUVNCcklnUWtBQ0FFSUFZMkFod2dCQ0FHTmdJWUlBUkJBRG9BRkNBRUlBQkJDR28yQWdnZ0JDQUVRUnhxTmdJUUlBUWdCRUVZYWpZQ0RBTkFJQUVnQTBjRVFDQUdRU0JySWdWQ0FEY0NBQ0FGUWdBM0FoZ2dCVUlBTndJUUlBVkNBRGNDQ0NBRklBTkJJR3NpQXlnQ0FEWUNBQ0FGSUFNb0FnUTJBZ1FnQlNBREtBSUlOZ0lJSUFVZ0F5Z0NERFlDRENBRklBTW9BaEEyQWhBZ0JTQURLQUlVTmdJVUlBVkJHR29nQTBFWWFoQ3BCaUFFSUFRb0FoeEJJR3NpQmpZQ0hBd0JDd3NnQkVFQk9nQVVJQVF0QUJSRkJFQWdCQ2dDQ0JvZ0JDZ0NFQ2dDQUNFRElBUW9BZ3dvQWdBaEFRTkFJQUVnQTBjRVFDQURFTTRDUVNCcUlRTU1BUXNMQ3lBRVFTQnFKQUFnQWlBR05nSUVJQUFvQWdBaEFTQUFJQVkyQWdBZ0FpQUJOZ0lFSUFBb0FnUWhBU0FBSUFJb0FnZzJBZ1FnQWlBQk5nSUlJQUFvQWdnaEFTQUFJQUlvQWd3MkFnZ2dBaUFCTmdJTUlBSWdBaWdDQkRZQ0FDQUNLQUlFSVFFRFFDQUNLQUlJSWdBZ0FVY0VRQ0FDSUFCQklHc2lBRFlDQ0NBQUVNNENHZ3dCQ3dzZ0FpZ0NBQ0lBQkVBZ0FpZ0NEQm9nQUJCSUN3c2dCMEVnYWlRQUR3c2dBU0FEU1FSQUlBQWdBaUFCUVFWMGFoRFdCQXNMQ3dBZ0FFR2NrZ1VRdlFFTG13RUJCMzhnQVVFZ2FpRUlJQUZCRUdvaENRTkFJQVZCQTBjRVFDQUFJQVZCQkhRaUIyb2hCRUVBSVFNRFFDQURRUVJIQkVBZ0EwRUNkQ0lHSUFJZ0IycHFJQVFxQWdnZ0JpQUlhaW9DQUpRZ0JDb0NBQ0FCSUFacUtnSUFsQ0FFS2dJRUlBWWdDV29xQWdDVWtwSTRBZ0FnQTBFQmFpRUREQUVMQ3lBQ0lBZHFJZ01nQkNvQ0RDQURLZ0lNa2pnQ0RDQUZRUUZxSVFVTUFRc0xDd2tBSUFCQkFSQ2hBZ3VSQVFFRGZ5QUJLQUlFSVFJZ0FDZ0NBQ0VFSUFBb0FnUWhBd05BSUFNZ0JFWkZCRUFnQWtFQmF5SUNJQU5CQVdzaUF5MEFBRG9BQUF3QkN3c2dBU0FDTmdJRUlBQW9BZ0FoQXlBQUlBSTJBZ0FnQVNBRE5nSUVJQUFvQWdRaEFpQUFJQUVvQWdnMkFnUWdBU0FDTmdJSUlBQW9BZ2doQWlBQUlBRW9BZ3cyQWdnZ0FTQUNOZ0lNSUFFZ0FTZ0NCRFlDQUF1ckFRRUNmeU1BUVJCcklnRWtBQ0FBSUFBb0FnQkJER3NvQWdCcUtBSVlCRUFnQVNBQU5nSU1JQUZCQURvQUNDQUFJQUFvQWdCQkRHc29BZ0JxRU5BREJFQWdBQ0FBS0FJQVFReHJLQUlBYWlnQ1NDSUNCRUFnQWhETEF3c2dBVUVCT2dBSUN3SkFJQUV0QUFoRkRRQWdBQ0FBS0FJQVFReHJLQUlBYWlnQ0dCQ3dBa0YvUncwQUlBQWdBQ2dDQUVFTWF5Z0NBR3BCQVJDeEFnc2dBVUVJYWhDdkFnc2dBVUVRYWlRQUN4UUFJQUJCK09VRE5nSUFJQUJCQkdvUVZDQUFDMTBCQW44Q1FDQUFLQUlBSWdKRkRRQUNmeUFDS0FJWUlnTWdBaWdDSEVZRVFDQUNJQUVRdFFFZ0FpZ0NBQ2dDTkJFREFBd0JDeUFDSUFOQkFXbzJBaGdnQXlBQk9nQUFJQUVRdFFFTFFYOFFxUUZGRFFBZ0FFRUFOZ0lBQ3d0RkFDQUFJQU0yQWhCQkFDRURJQUJCQURZQ0RDQUJCRUFnQVJCbUlRTUxJQUFnQXpZQ0FDQUFJQUlnQTJvaUFqWUNDQ0FBSUFFZ0EybzJBZ3dnQUNBQ05nSUVJQUFMQ1FBZ0FCRHJBaEJJQ3dnQUlBQW9BaEJGQ3drQUlBQVE3Z0lRU0FzVUFDQUFRZGprQXpZQ0FDQUFRUVJxRUZRZ0FBc0pBQ0FBSUFFUStBUUw4d01DQW40RmZ5TUFRU0JySWdVa0FDQUJRdi8vLy8vLy96K0RJUUlDZmlBQlFqQ0lRdi8vQVlNaUE2Y2lCRUdCK0FCclFmMFBUUVJBSUFKQ0JJWWdBRUk4aUlRaEFpQUVRWUQ0QUd1dElRTUNRQ0FBUXYvLy8vLy8vLy8vRDRNaUFFS0JnSUNBZ0lDQWdBaGFCRUFnQWtJQmZDRUNEQUVMSUFCQ2dJQ0FnSUNBZ0lBSVVnMEFJQUpDQVlNZ0Fud2hBZ3RDQUNBQ0lBSkMvLy8vLy8vLy93ZFdJZ1FiSVFBZ0JLMGdBM3dNQVFzZ0FDQUNoRkFnQTBMLy93RlNja1VFUUNBQ1FnU0dJQUJDUElpRVFvQ0FnSUNBZ0lBRWhDRUFRdjhQREFFTElBUkIvb2NCU3dSQVFnQWhBRUwvRHd3QkMwR0ErQUJCZ2ZnQUlBTlFJZ2NiSWdnZ0JHc2lCa0h3QUVvRVFFSUFJUUJDQUF3QkN5QUZRUkJxSUFBZ0FpQUNRb0NBZ0lDQWdNQUFoQ0FIR3lJQ1FZQUJJQVpyRUk0QklBVWdBQ0FDSUFZUTlnRWdCU2tEQ0VJRWhpQUZLUU1BSWdKQ1BJaUVJUUFDUUNBRUlBaEhJQVVwQXhBZ0JTa0RHSVJDQUZKeHJTQUNRdi8vLy8vLy8vLy9ENE9FSWdKQ2dZQ0FnSUNBZ0lBSVdnUkFJQUJDQVh3aEFBd0JDeUFDUW9DQWdJQ0FnSUNBQ0ZJTkFDQUFRZ0dESUFCOElRQUxJQUJDZ0lDQWdJQ0FnQWlGSUFBZ0FFTC8vLy8vLy8vL0IxWWlCQnNoQUNBRXJRc2hBaUFGUVNCcUpBQWdBVUtBZ0lDQWdJQ0FnSUIvZ3lBQ1FqU0doQ0FBaEw4TFJRRUJmeU1BUVJCcklnVWtBQ0FGSUFFZ0FpQURJQVJDZ0lDQWdJQ0FnSUNBZjRVUW9BRWdCU2tEQUNFQklBQWdCU2tEQ0RjRENDQUFJQUUzQXdBZ0JVRVFhaVFBQ3hBQUlBQWdBU0FDUVFCQkFCRFhBeG9MMHdJQkJIOGpBRUhRQVdzaUJTUUFJQVVnQWpZQ3pBRWdCVUdnQVdvaUFrRUFRU2o4Q3dBZ0JTQUZLQUxNQVRZQ3lBRUNRRUVBSUFFZ0JVSElBV29nQlVIUUFHb2dBaUFESUFRUWtBVkJBRWdFUUVGL0lRUU1BUXNnQUNnQ1RFRUFTQVIvUVFFRklBQVFoUUZGQ3lBQUlBQW9BZ0FpQ0VGZmNUWUNBQUovQWtBQ1FDQUFLQUl3UlFSQUlBQkIwQUEyQWpBZ0FFRUFOZ0ljSUFCQ0FEY0RFQ0FBS0FJc0lRWWdBQ0FGTmdJc0RBRUxJQUFvQWhBTkFRdEJmeUFBRU9vRERRRWFDeUFBSUFFZ0JVSElBV29nQlVIUUFHb2dCVUdnQVdvZ0F5QUVFSkFGQ3lFQ0lBWUVRQ0FBUVFCQkFDQUFLQUlrRVFRQUdpQUFRUUEyQWpBZ0FDQUdOZ0lzSUFCQkFEWUNIQ0FBS0FJVUlRRWdBRUlBTndNUUlBSkJmeUFCR3lFQ0N5QUFJQUFvQWdBaUFTQUlRU0J4Y2pZQ0FFRi9JQUlnQVVFZ2NSc2hCQTBBSUFBUWhBRUxJQVZCMEFGcUpBQWdCQXRBQVFGL0lBRkJ6Wm16NWdCUEJFQVFtQUlBQzBITW1iUG1BQ0FBS0FJSUlBQW9BZ0JyUVJSdElnQkJBWFFpQWlBQklBRWdBa2tiSUFCQjVzeVpNMDhiQzVVRUFnZC9CSDRqQUVFUWF5SUlKQUFDUUFKQUFrQWdBa0VrVEFSQUlBQXRBQUFpQlEwQklBQWhCQXdDQ3hCWlFSdzJBZ0JDQUNFRERBSUxJQUFoQkFKQUEwQWdCY0FRNVFGRkRRRWdCQzBBQVNFRklBUkJBV29oQkNBRkRRQUxEQUVMQWtBZ0JVSC9BWEVpQmtFcmF3NERBQUVBQVF0QmYwRUFJQVpCTFVZYklRY2dCRUVCYWlFRUN3Si9Ba0FnQWtFUWNrRVFSdzBBSUFRdEFBQkJNRWNOQUVFQklRa2dCQzBBQVVIZkFYRkIyQUJHQkVBZ0JFRUNhaUVFUVJBTUFnc2dCRUVCYWlFRUlBSkJDQ0FDR3d3QkN5QUNRUW9nQWhzTElncXRJUXhCQUNFQ0EwQUNRQUpBSUFRdEFBQWlCa0V3YXlJRlFmOEJjVUVLU1EwQUlBWkI0UUJyUWY4QmNVRVpUUVJBSUFaQjF3QnJJUVVNQVFzZ0JrSEJBR3RCL3dGeFFSbExEUUVnQmtFM2F5RUZDeUFLSUFWQi93RnhUQTBBSUFnZ0RFSUFJQXRDQUJDR0FVRUJJUVlDUUNBSUtRTUlRZ0JTRFFBZ0N5QU1maUlOSUFXdFF2OEJneUlPUW4rRlZnMEFJQTBnRG53aEMwRUJJUWtnQWlFR0N5QUVRUUZxSVFRZ0JpRUNEQUVMQ3lBQkJFQWdBU0FFSUFBZ0NSczJBZ0FMQWtBQ1FDQUNCRUFRV1VIRUFEWUNBQ0FIUVFBZ0EwSUJneUlNVUJzaEJ5QURJUXNNQVFzZ0F5QUxWZzBCSUFOQ0FZTWhEQXNnREtjZ0IzSkZCRUFRV1VIRUFEWUNBQ0FEUWdGOUlRTU1BZ3NnQXlBTFdnMEFFRmxCeEFBMkFnQU1BUXNnQ3lBSHJDSURoU0FEZlNFREN5QUlRUkJxSkFBZ0F3dlNDZ0VOZnlBQkxBQUFJZ0pGQkVBZ0FBOExBa0FnQUNBQ0VQb0JJZ0JGRFFBZ0FTMEFBVVVFUUNBQUR3c2dBQzBBQVVVTkFDQUJMUUFDUlFSQUlBQXRBQUVpQWtFQVJ5RUVBa0FnQWtVTkFDQUFMUUFBUVFoMElBSnlJZ0lnQVMwQUFTQUJMUUFBUVFoMGNpSUZSZzBBSUFCQkFXb2hBUU5BSUFFaUFDMEFBU0lEUVFCSElRUWdBMFVOQVNBQVFRRnFJUUVnQWtFSWRFR0EvZ054SUFOeUlnSWdCVWNOQUFzTElBQkJBQ0FFR3c4TElBQXRBQUpGRFFBZ0FTMEFBMFVFUUNBQVFRSnFJUUlnQUMwQUFpSUVRUUJISVFNQ1FBSkFJQVJGRFFBZ0FDMEFBVUVRZENBQUxRQUFRUmgwY2lBRVFRaDBjaUlFSUFFdEFBRkJFSFFnQVMwQUFFRVlkSElnQVMwQUFrRUlkSElpQlVZTkFBTkFJQUpCQVdvaEFDQUNMUUFCSWdGQkFFY2hBeUFCUlEwQ0lBQWhBaUFCSUFSeVFRaDBJZ1FnQlVjTkFBc01BUXNnQWlFQUN5QUFRUUpyUVFBZ0F4c1BDeUFBTFFBRFJRMEFJQUV0QUFSRkJFQWdBRUVEYWlFQ0lBQXRBQU1pQkVFQVJ5RURBa0FDUUNBRVJRMEFJQUF0QUFGQkVIUWdBQzBBQUVFWWRISWdBQzBBQWtFSWRISWdCSElpQkNBQktBQUFJZ0JCR0hRZ0FFR0EvZ054UVFoMGNpQUFRUWgyUVlEK0EzRWdBRUVZZG5KeUlnVkdEUUFEUUNBQ1FRRnFJUUFnQWkwQUFTSUJRUUJISVFNZ0FVVU5BaUFBSVFJZ0JFRUlkQ0FCY2lJRUlBVkhEUUFMREFFTElBSWhBQXNnQUVFRGEwRUFJQU1iRHdzZ0FDRUVRUUFoQWlNQVFhQUlheUlJSkFBZ0NFR1lDR3BDQURjREFDQUlRWkFJYWtJQU53TUFJQWhDQURjRGlBZ2dDRUlBTndPQUNBSkFBa0FDUUFKQUlBRWlCUzBBQUNJQlJRUkFRWDhoQ1VFQklRQU1BUXNEUUNBRUlBWnFMUUFBUlEwRUlBZ2dBVUgvQVhGQkFuUnFJQVpCQVdvaUJqWUNBQ0FJUVlBSWFpQUJRUU4yUVJ4eGFpSUFJQUFvQWdCQkFTQUJkSEkyQWdBZ0JTQUdhaTBBQUNJQkRRQUxRUUVoQUVGL0lRa2dCa0VCU3cwQkMwRi9JUU5CQVNFSERBRUxRUUVoQ2tFQklRRURRQUovSUFVZ0NXb2dBV290QUFBaUF5QUFJQVZxTFFBQUlnZEdCRUFnQVNBS1JnUkFJQUlnQ21vaEFrRUJEQUlMSUFGQkFXb01BUXNnQXlBSFN3UkFJQUFnQ1dzaENpQUFJUUpCQVF3QkN5QUNJZ2xCQVdvaEFrRUJJUXBCQVFzaUFTQUNhaUlBSUFaSkRRQUxRWDhoQTBFQUlRQkJBU0VDUVFFaEIwRUJJUUVEUUFKL0lBTWdCV29nQVdvdEFBQWlDeUFDSUFWcUxRQUFJZ3hHQkVBZ0FTQUhSZ1JBSUFBZ0Iyb2hBRUVCREFJTElBRkJBV29NQVFzZ0N5QU1TUVJBSUFJZ0Eyc2hCeUFDSVFCQkFRd0JDeUFBSWdOQkFXb2hBRUVCSVFkQkFRc2lBU0FBYWlJQ0lBWkpEUUFMSUFvaEFBc0NmeUFGSUFVZ0J5QUFJQU5CQVdvZ0NVRUJha3NpQUJzaUNtb2dBeUFKSUFBYklndEJBV29pQnhENUFRUkFJQXNnQmlBTFFYOXphaUlBSUFBZ0Mwa2JRUUZxSVFwQkFBd0JDeUFHSUFwckN5RU5JQVpCQVdzaERpQUdRVDl5SVF4QkFDRURJQVFoQUFOQUFrQWdCQ0FBYXlBR1R3MEFRUUFoQWlBRVFRQWdEQkM3QWlJQklBUWdER29nQVJzaEJDQUJSUTBBSUFFZ0FHc2dCa2tOQWdzQ2Z3Si9JQVlnQ0VHQUNHb2dBQ0FPYWkwQUFDSUJRUU4yUVJ4eGFpZ0NBQ0FCZGtFQmNVVU5BQm9nQ0NBQlFRSjBhaWdDQUNJQklBWkhCRUFnQmlBQmF5SUJJQU1nQVNBRFN4c01BUXNDUUNBRklBY2lBU0FESUFFZ0Ewc2JJZ0pxTFFBQUlna0VRQU5BSUFBZ0Ftb3RBQUFnQ1VIL0FYRkhEUUlnQlNBQ1FRRnFJZ0pxTFFBQUlna05BQXNMQTBBZ0FTQURUUVJBSUFBaEFnd0dDeUFGSUFGQkFXc2lBV290QUFBZ0FDQUJhaTBBQUVZTkFBc2dDaUVCSUEwTUFnc2dBaUFMYXdzaEFVRUFDeUVESUFBZ0FXb2hBQXdBQ3dBTElBaEJvQWhxSkFBZ0FpRUVDeUFFQzRZVEFnOS9CSDRqQUVHQUFXc2lDQ1FBSUFFRVFBSi9BMEFDUUFKL0lBSXRBQUFpQlVFbFJ3UkFJQWtnQlVVTkJCb2dBQ0FKYWlBRk9nQUFJQWxCQVdvTUFRdEJBQ0VGUVFFaEJ3SkFBa0FDUUNBQ0xRQUJJZ1pCTFdzT0JBRUNBZ0VBQ3lBR1FkOEFSdzBCQ3lBR0lRVWdBaTBBQWlFR1FRSWhCd3RCQUNFT0FrQUNmeUFDSUFkcUlBWkIvd0Z4SWhKQkswWnFJZ29zQUFCQk1HdEJDVTBFUUNBS0lBaEJER3BCQ2tMLy8vLy9EeERaQTZjaEFpQUlLQUlNREFFTElBZ2dDallDREVFQUlRSWdDZ3NpQnkwQUFDSUdRY01BYXlJTFFSWkxRUUVnQzNSQm1ZQ0FBbkZGY2cwQUlBSWlEZzBBSUFjZ0NrY2hEZ3NnQmtIUEFFWWdCa0hGQUVaeUJIOGdCeTBBQVNFR0lBZEJBV29GSUFjTElRSWdDRUVRYWlFSElBVWhDa0VBSVFWQkFDRVFJd0JCMEFCcklnc2tBRUhYdndFaERFRXdJUkZCcUlBSUlRMENRQ0FJQW44Q1FBSkFBa0FDUUFKQUFrQUNRQUovQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQW40Q1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFiQUlnWkJKV3NPVmlFdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwQkF3UW5MUWNJQ1FvdExTME5MUzB0TFJBU0ZCWVlGeHdlSUMwdExTMHRMUUFDSmdZRkxRZ0NMUXN0TFF3T0xROHRKUkVURlMwWkd4MGZMUXNnQXlnQ0dDSUZRUVpORFNJTUtnc2dBeWdDR0NJRlFRWkxEU2tnQlVHSGdBaHFEQ0lMSUFNb0FoQWlCVUVMU3cwb0lBVkJqb0FJYWd3aEN5QURLQUlRSWdWQkMwc05KeUFGUVpxQUNHb01JQXNnQXpRQ0ZFTHNEbnhDNUFCL0lSUU1Jd3RCM3dBaEVRc2dBelFDRENFVURDRUxRZjNwQVNFTURCOExJQU0wQWhRaUZVTHNEbndoRkFKQUlBTW9BaHdpQlVFQ1RBUkFJQlFnRlVMckRud2dBeERjQTBFQlJoc2hGQXdCQ3lBRlFla0NTUTBBSUJWQzdRNThJQlFnQXhEY0EwRUJSaHNoRkFzZ0JrSG5BRVlOR1F3Z0N5QUROQUlJSVJRTUhndEJBaUVGSUFNb0FnZ2lCa1VFUUVJTUlSUU1JQXNnQnF3aUZFSU1mU0FVSUFaQkRFb2JJUlFNSHdzZ0F5Z0NIRUVCYXF3aEZFRURJUVVNSGdzZ0F5Z0NFRUVCYXF3aEZBd2JDeUFETkFJRUlSUU1HZ3NnQ0VFQk5nSjhRZkdRQWlFRkRCNExRYWVBQ0VHbWdBZ2dBeWdDQ0VFTFNoc01GQXRCMWZVQklRd01GZ3RCQUNFTUl3QkJFR3NpRHlRQUlBTTBBaFFoRkFKK0lBTW9BaEFpQlVFTVR3UkFJQVVnQlVFTWJTSU5RUXhzYXlJR1FReHFJQVlnQmtFQVNCc2hCU0FOSUFaQkgzVnFyQ0FVZkNFVUN5QVBRUXhxSVEwZ0ZFSUNmVUtJQVZnRVFDQVVweUlNUWNRQWEwRUNkU0VHQWtBZ0RRSi9JQXhCQTNGRkJFQWdCa0VCYXlFR0lBMUZEUUpCQVF3QkN5QU5SUTBCUVFBTE5nSUFDeUFNUVlEbmhBOXNJQVpCZ0tNRmJHcEJnTmF2NHdkcXJBd0JDeUFVUXVRQWZTSVVJQlJDa0FOL0loWkNrQU4rZlNJVlFqK0hweUFXcDJvaEV3SkFBa0FDUUNBVnB5SUdRWkFEYWlBR0lCVkNBRk1iSWdZRWZ3Si9JQVpCeUFGT0JFQWdCa0dzQWs4RVFFRURJUXdnQmtHc0Ftc01BZ3RCQWlFTUlBWkJ5QUZyREFFTElBWkI1QUJySUFZZ0JrSGpBRW9pREJzTElnWU5BVUVBQlVFQkN5RUdJQTBOQVF3Q0N5QUdRUUoySVJBZ0JrRURjVVVoQmlBTlJRMEJDeUFOSUFZMkFnQUxJQlJDZ09lRUQzNGdFQ0FNUVJoc0lCTkI0UUJzYW1vZ0JtdXNRb0NqQlg1OFFvQ3F1c01EZkFzaEZDQUZRUUowUVpEUkEyb29BZ0FpQmtHQW93VnFJQVlnRHlnQ0RCc2dCaUFGUVFGS0d5RUZJQU1vQWd3aEJpQUROQUlJSVJVZ0F6UUNCQ0VXSUFNMEFnQWdEMEVRYWlRQUlCUWdCYXg4SUFaQkFXdXNRb0NqQlg1OElCVkNrQngrZkNBV1FqeCtmSHdnQXpRQ0pIME1DQXNnQXpRQ0FDRVVEQlVMSUFoQkFUWUNmRUh6a0FJaEJRd1pDMEh6OHdFaERBd1NDeUFES0FJWUlnVkJCeUFGRzZ3TUJBc2dBeWdDSENBREtBSVlhMEVIYWtFSGJxMGhGQXdSQ3lBREtBSWNJQU1vQWhoQkJtcEJCM0JyUVFkcVFRZHVyU0VVREJBTElBTVEzQU90SVJRTUR3c2dBelFDR0FzaEZFRUJJUVVNRHd0QnFZQUlJUTBNQ2d0QnFvQUlJUTBNQ1FzZ0F6UUNGRUxzRG54QzVBQ0JJaFFnRkVJL2h5SVVoU0FVZlNFVURBb0xJQU0wQWhRaUZVTHNEbndoRkNBVlFxUS9VdzBLSUFzZ0ZEY0RNQ0FJSUFkQjVBQkI2dVFCSUF0Qk1Hb1E0Z0UyQW53Z0J5RUZEQTRMSUFNb0FpQkJBRWdFUUNBSVFRQTJBbnhCOUpBQ0lRVU1EZ3NnQ3lBREtBSWtJZ1ZCa0J4dElnWkI1QUJzSUFVZ0JrR1FIR3hyd1VFOGJjRnFOZ0pBSUFnZ0IwSGtBRUh3NUFFZ0MwRkFheERpQVRZQ2ZDQUhJUVVNRFFzZ0F5Z0NJRUVBU0FSQUlBaEJBRFlDZkVIMGtBSWhCUXdOQ3lBREtBSW9RZERuQkJDRkF4QzBCVUhRNXdRUS9RRU1Dd3NnQ0VFQk5nSjhRY0tJQWlFRkRBc0xJQlJDNUFDQklSUU1CUXNnQlVHQWdBaHlDeUFFRUpZRkRBY0xRYXVBQ0NFTkN5QU5JQVFRbGdVaERBc2dDQ0FIUWVRQUlBd2dBeUFFRU5zRElnVTJBbndnQjBFQUlBVWJJUVVNQlF0QkFpRUZEQUVMUVFRaEJRc0NRQ0FLSUJFZ0Noc2lCa0hmQUVjRVFDQUdRUzFIRFFFZ0N5QVVOd01RSUFnZ0IwSGtBRUhyNUFFZ0MwRVFhaERpQVRZQ2ZDQUhJUVVNQkFzZ0N5QVVOd01vSUFzZ0JUWUNJQ0FJSUFkQjVBQkI1T1FCSUF0QklHb1E0Z0UyQW53Z0J5RUZEQU1MSUFzZ0ZEY0RDQ0FMSUFVMkFnQWdDQ0FIUWVRQVFkM2tBU0FMRU9JQk5nSjhJQWNoQlF3Q0MwSGdod0lMSWdVUWd3RTJBbndMSUF0QjBBQnFKQUFnQlNJS1JRMEJBa0FnRGtVRVFDQUlLQUo4SVFVTUFRc0Nmd0pBQWtBZ0NpMEFBQ0lHUVN0ckRnTUJBQUVBQ3lBSUtBSjhEQUVMSUFvdEFBRWhCaUFLUVFGcUlRb2dDQ2dDZkVFQmF3c2hCUUpBSUFaQi93RnhRVEJIRFFBRFFDQUtMQUFCSWdkQk1HdEJDVXNOQVNBS1FRRnFJUW9nQlVFQmF5RUZJQWRCTUVZTkFBc0xJQWdnQlRZQ2ZFRUFJUVlEUUNBR0lnZEJBV29oQmlBSElBcHFMQUFBUVRCclFRcEpEUUFMSUE0Z0JTQUZJQTVKR3lFR0FrQWdBQ0FKYWlBREtBSVVRWlJ4U0FSL1FTMEZJQkpCSzBjTkFTQUdJQVZySUFkcVFRTkJCU0FJS0FJTUxRQUFRY01BUmh0SkRRRkJLd3M2QUFBZ0JrRUJheUVHSUFsQkFXb2hDUXNnQVNBSlRTQUZJQVpQY2cwQUEwQWdBQ0FKYWtFd09nQUFJQWxCQVdvaENTQUdRUUZySWdZZ0JVME5BU0FCSUFsTERRQUxDeUFJSUFVZ0FTQUpheUlISUFVZ0Iwa2JJZ1UyQW53Z0FDQUphaUFLSUFVUWF4b2dDQ2dDZkNBSmFnc2hDU0FDUVFGcUlRSWdBU0FKU3cwQkN3c2dBVUVCYXlBSklBRWdDVVliSVFsQkFBc2hCaUFBSUFscVFRQTZBQUFMSUFoQmdBRnFKQUFnQmd1Y0FRRURmMEUxSVFFQ1FDQUFLQUljSWdJZ0FDZ0NHQ0lEUVFacVFRZHdhMEVIYWtFSGJpQURJQUpySWdKQjhRSnFRUWR3UVFOSmFpSURRVFZIQkVBZ0F5SUJEUUZCTkNFQkFrQUNRQ0FDUVFacVFRZHdRUVJyRGdJQkFBTUxJQUFvQWhSQmtBTnZRUUZyRUpVRlJRMENDMEUxRHdzQ1FBSkFJQUpCOHdKcVFRZHdRUU5yRGdJQUFnRUxJQUFvQWhRUWxRVU5BUXRCQVNFQkN5QUJDNjhCQVFaL0l3QkI4QUZySWdZa0FDQUdJQUEyQWdCQkFTRUhBa0FnQTBFQ1NBMEFRUUFnQVdzaENTQUFJUVVEUUNBQUlBVWdDV29pQlNBRUlBTkJBbXNpQ2tFQ2RHb29BZ0JySWdnZ0FoRDhBVUVBVGdSQUlBQWdCU0FDRVB3QlFRQk9EUUlMSUFZZ0IwRUNkR29nQ0NBRklBZ2dCU0FDRVB3QlFRQk9JZ2diSWdVMkFnQWdCMEVCYWlFSElBTkJBV3NnQ2lBSUd5SURRUUZLRFFBTEN5QUJJQVlnQnhDY0JTQUdRZkFCYWlRQUM0SUJBUUYvUWV6S0JDZ0NBRUVBU0FSL1FRQUZRYURLQkJDRkFRdEZBa0FnQUVFQklBQVFnd0VpQUVHZ3lnUVF0d0VnQUVjTkFBSkFRZkRLQkNnQ0FFRUtSZzBBUWJUS0JDZ0NBQ0lBUWJES0JDZ0NBRVlOQUVHMHlnUWdBRUVCYWpZQ0FDQUFRUW82QUFBTUFRdEJvTW9FUVFvUWl3TWFDMFVFUUVHZ3lnUVFoQUVMQ3lZQVFaRHRCRUVBUWYvLy8vOEgva2dDQUFSL1FRb0ZRWnp0QkNNREtBSVlOZ0lBUVFBTEMwY0JBbjhDUUFKQUEwQkJCaUVDQWtBZ0FDZ0NBQ0lCUWYvLy8vOEhjVUgrLy8vL0Iyc09BZ01DQUFzZ0FDQUJJQUZCQVdvUWV5QUJSdzBBQzBFQUR3dEJDaUVDQ3lBQ0M1NEJBUUovQWtBZ0FCRGdBMEVLUncwQUlBQkJCR29oQWtIa0FDRUJBMEFDUUNBQlJRMEFJQUFvQWdCRkRRQWdBVUVCYXlFQklBSW9BZ0JGRFFFTEN5QUFFT0FEUVFwSERRQURRQUpBSUFBb0FnQWlBVUgvLy8vL0IzRkIvLy8vL3dkSERRQWdBaERSQVNBQUlBRkJmeENmQlNBQUtBSUlHaUFBUVg4UTVnTWhBU0FDRU1FQ0lBRkZEUUFnQVVFYlJ3MENDeUFBRU9BRFFRcEdEUUFMQ3dzMUFDQUFLQUlBUVlFQlRnUkFRY0R4QkNnQ0FDSUFCRUFEUUVIQThRUkJ4UEVFSUFBUS9nRkJ3UEVFS0FJQUlnQU5BQXNMQ3dzMUFRRi9RWURwQkNnQ0FDSUFCRUJCZ09rRUlBQkJBV3MyQWdBUEMwSDg2QVFRNVFOQmhPa0VLQUlBQkVCQi9PZ0VFTkFCQ3d0VkFRSi9Jd01vQWhnaUFFSDg2QVFvQWdCSEJFQkIvT2dFUVFBZ0FCQjdJZ0VFUUFOQVFmem9CRUdFNlFRZ0FSRCtBVUg4NkFSQkFDQUFFSHNpQVEwQUN3c1BDMEdBNlFSQmdPa0VLQUlBUVFGcU5nSUFDd29BSUFCQkFQNFhBZ0FMTHdFQmZ5TUFRUkJySWdJa0FFRUJJQUpCREdvUW5BSWdBQ0FCRU9jRElBSW9BZ3hCQUJDY0FpQUNRUkJxSkFBTDh3RUNBMzhEZkNNQVFSQnJJZ1FrQUFKQUFuOENRQUpBSXdVaUFnMEFJd01pQXkwQUtFRUJSdzBBSUFNdEFDbEZEUUVMUkFBQUFBQUFBUEEvUkFBQUFBQUFBRmxBSUFJYklRVVFCa1FBQUFBQUFBRHdmNkFoQnlNRElRSURRQUpBSUFJb0FpUkZCRUFnQnhBR29TSUdSQUFBQUFBQUFBQUFaVVVOQVVISkFBd0VDMEVMSVFBTUJBc2dBQ0FCSUFVZ0JpQUZJQVpqR3hEQ0FpSURRYmQvUmcwQUMwRUFJQU5yREFFTFFRQWdBQ0FCUkFBQUFBQUFBUEIvRU1JQ2F3c2lBRUVBSUFCQmIzRkJDMFliSUFBZ0FFSEpBRWNiSWdCQkcwY05BRUViUVFCQitPZ0VLQUlBR3lFQUN5QUVRUkJxSkFBZ0FBdGxBUUovQWtBZ0FDZ0NBRVVOQUNBQUtBSU1SUTBBSUFCQkRHb2lBVUdBZ0lDQWVQNHpBZ0FhSUFCQkNHb2lBaERSQVNBQ0VJRURJQUFvQWd3aUFFSC8vLy8vQjNGRkRRQURRQ0FCUVFBZ0FCRCtBU0FCS0FJQUlnQkIvLy8vL3dkeERRQUxDd3RtQVFKL0l3QkJFR3NpQVNRQUlBQkJBVFlDSUNBQVFRUnFJZ0lRY0JvZ0FCQ0RBMFVFUUFOQUlBRkJCR29nQUJDdUJTQUNFR3dhSUFFb0Fnd2dBU2dDQkJFQkFDQUNFSEFhSUFBUWd3TkZEUUFMQ3lBQ0VHd2FJQUJCQURZQ0lDQUJRUkJxSkFBTFdRRUJmeUFBSUFBb0FrZ2lBVUVCYXlBQmNqWUNTQ0FBS0FJQUlnRkJDSEVFUUNBQUlBRkJJSEkyQWdCQmZ3OExJQUJDQURjQ0JDQUFJQUFvQWl3aUFUWUNIQ0FBSUFFMkFoUWdBQ0FCSUFBb0FqQnFOZ0lRUVFBTENnQWdBRUVBL2tFQ0FBc1ZBUUYvSXdCQkVHc2lBU0FBT0FJTUlBRXFBZ3dMdlFNQ0FYOERmU01BUVNCcklnWWtBQ0FGQW44Q1FBSkFBa0FnQVVVTkFDQUFJQUVnQkNvQ0NDSUlJQVFxQWd3aUNTQUdRUnhxSUFaQkVHb1F3QUpCQUVnTkFDQUZBbjhnQmlvQ0hDSUhpME1BQUFCUFhRUkFJQWVvREFFTFFZQ0FnSUI0Q3pZQ0FDQUZBbjhnQmlvQ0VDSUhpME1BQUFCUFhRUkFJQWVvREFFTFFZQ0FnSUI0Q3pZQ0JDQUNSUTBCSUFBZ0FpQUlJQWtnQmtFWWFpQUdRUXhxRU1BQ1FRQklEUUVnQlFKL0lBWXFBaHdpQnlBSGtpQUdLZ0lZa3lJSGkwTUFBQUJQWFFSQUlBZW9EQUVMUVlDQWdJQjRDellDQ0NBRkFuOGdCaW9DRUNJSElBZVNJQVlxQWd5VElnZUxRd0FBQUU5ZEJFQWdCNmdNQVF0QmdJQ0FnSGdMTmdJTUlBTkZEUUlnQUNBRElBZ2dDU0FHUVJScUlBWkJDR29Rd0FKQkFFZ05BaUFGQW44Z0Jpb0NGQ0FHS2dJY1F3QUFRRUNVSUFZcUFoaERBQUJBd0pTU2tpSUlpME1BQUFCUFhRUkFJQWlvREFFTFFZQ0FnSUI0Q3pZQ0VDQUdLZ0lJSUFZcUFoQkRBQUJBUUpRZ0Jpb0NERU1BQUVEQWxKS1NJZ2lMUXdBQUFFOWRCRUFnQ0tnTUJBdEJnSUNBZ0hnTUF3c2dCVUovTndJQUN5QUZRbjgzQWdnTElBVkJmellDRUVGL0N6WUNGQ0FHUVNCcUpBQUx3Z2tCRG44Z0FTZ0NGQ0VKSUFFb0FoQWhBaUFCS0FJTUlRc2dBU2dDQ0NFRklBQW9BdVFES0FJWUlRMENRQ0FCS0FJRUlnY2dBU2dDQUNJR1NnUkFJQVloQ2dOQUlBVWdDMHdFUUNBTklBcEJBblJxS0FJQUlRd2dCU0VEQTBBZ0FpQUpUQVJBSUF3Z0EwRUdkR29nQWtFQmRHb2hBQ0FDSVFRRFFDQUFMd0VBQkVBZ0FTQUtOZ0lBREFjTElBQkJBbW9oQUNBRUlBbEhJQVJCQVdvaEJBMEFDd3NnQXlBTFJ5QURRUUZxSVFNTkFBc0xJQWNnQ2tjZ0NrRUJhaUVLRFFBTEN5QUdJUW9MQWtBZ0J5QUtTZ1JBSUFjaENBTkFJQVVnQzB3RVFDQU5JQWhCQW5ScUtBSUFJUXdnQlNFREEwQWdBaUFKVEFSQUlBd2dBMEVHZEdvZ0FrRUJkR29oQUNBQ0lRUURRQ0FBTHdFQUJFQWdBU0FJTmdJRURBY0xJQUJCQW1vaEFDQUVJQWxISUFSQkFXb2hCQTBBQ3dzZ0F5QUxSeUFEUVFGcUlRTU5BQXNMSUFnZ0Nrb2dDRUVCYXlFSURRQUxDeUFISVFnTEFrQWdCU0FMU0FSQUlBVWhCZ05BSUFnZ0NpSURUZ1JBQTBBZ0FpQUpUQVJBSUEwZ0EwRUNkR29vQWdBZ0JrRUdkR29nQWtFQmRHb2hBQ0FDSVFRRFFDQUFMd0VBQkVBZ0FTQUdOZ0lJREFjTElBQkJBbW9oQUNBRUlBbEhJQVJCQVdvaEJBMEFDd3NnQXlBSVJ5QURRUUZxSVFNTkFBc0xJQVlnQzBjZ0JrRUJhaUVHRFFBTEN5QUZJUVlMQWtBZ0JpQUxTQVJBSUFzaEJ3TkFJQWdnQ2lJRFRnUkFBMEFnQWlBSlRBUkFJQTBnQTBFQ2RHb29BZ0FnQjBFR2RHb2dBa0VCZEdvaEFDQUNJUVFEUUNBQUx3RUFCRUFnQVNBSE5nSU1EQWNMSUFCQkFtb2hBQ0FFSUFsSElBUkJBV29oQkEwQUN3c2dBeUFJUnlBRFFRRnFJUU1OQUFzTElBWWdCMGdnQjBFQmF5RUhEUUFMQ3lBTElRY0xBa0FnQWlBSlNBUkFJQVpCQm5RaERDQUNJUVVEUUNBSUlBb2lBMDRFUUFOQUlBWWdCMHdFUUNBTklBTkJBblJxS0FJQUlBeHFJQVZCQVhScUlRQWdCaUVFQTBBZ0FDOEJBQVJBSUFFZ0JUWUNFQXdIQ3lBQVFVQnJJUUFnQkNBSFJ5QUVRUUZxSVFRTkFBc0xJQU1nQ0VjZ0EwRUJhaUVERFFBTEN5QUZJQWxISUFWQkFXb2hCUTBBQ3dzZ0FpRUZDd0pBSUFVZ0NVZ0VRQ0FHUVFaMElRd2dDU0VEQTBBZ0NDQUtJZ0pPQkVBRFFDQUdJQWRNQkVBZ0RTQUNRUUowYWlnQ0FDQU1haUFEUVFGMGFpRUFJQVloQkFOQUlBQXZBUUFFUUNBQklBTTJBaFFNQndzZ0FFRkFheUVBSUFRZ0IwY2dCRUVCYWlFRURRQUxDeUFDSUFoSElBSkJBV29oQWcwQUN3c2dBeUFGU2lBRFFRRnJJUU1OQUFzTElBa2hBd3NnQVNBSElBWnJRUXhzSWdBZ0FHd2dDQ0FLYTBFRWRDSUFJQUJzYWlBRElBVnJJZzVCQTNRaUFDQUFiR28yQWhoQkFDRUVJQWdnQ2s0RVFDQU9RUUZxUVFOeElROERRQ0FHSUFkTUJFQWdEU0FLUVFKMGFpZ0NBQ0VNSUFZaEFnTkFJQUloQ3dKQUlBTWdCVWdOQUNBTUlBSkJCblJxSUFWQkFYUnFJUUpCQUNFSklBVWhBQ0FQQkVBRFFDQUFRUUZxSVFBZ0JDQUNMd0VBUVFCSGFpRUVJQUpCQW1vaEFpQUpRUUZxSWdrZ0QwY05BQXNMSUE1QkEwa05BQU5BSUFRZ0FpOEJBRUVBUjJvZ0FpOEJBa0VBUjJvZ0FpOEJCRUVBUjJvZ0FpOEJCa0VBUjJvaEJDQUNRUWhxSVFJZ0FFRURhaUVKSUFCQkJHb2hBQ0FESUFsSERRQUxDeUFMUVFGcUlRSWdCeUFMUncwQUN3c2dDQ0FLUnlBS1FRRnFJUW9OQUFzTElBRWdCRFlDSEF1L0FnRURmeUFBS0FJRUlRTUNRQ0FCUVFKUEJFQWdBQ2dDQUNJQ0lBRTJBaGdnQWtFUE5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUF3QkN5QUJRUUZIRFFBZ0F5Z0NSQ0lDQkVBRFFDQUNLQUlvQkVBZ0FrRUFOZ0lvSUFBZ0FrRXdhaUFDS0FJNEVRSUFDeUFDS0FJc0lnSU5BQXNMSUFOQkFEWUNSQ0FES0FKSUlnSUVRQU5BSUFJb0FpZ0VRQ0FDUVFBMkFpZ2dBQ0FDUVRCcUlBSW9BamdSQWdBTElBSW9BaXdpQWcwQUN3c2dBMEVBTmdKSUN5QURJQUZCQW5ScUlnRWlBQ2dDUENFQ0lBQkJBRFlDUENBQ0JFQURRQ0FDS0FJQUlBSW9BZ1FnQWlnQ0NHcEJFR29oQkNBQ0VFZ2dBeUFES0FKTUlBUnJOZ0pNSWdJTkFBc0xJQUVvQWpRaEFpQUJRUUEyQWpRZ0FnUkFBMEFnQWlnQ0FDQUNLQUlFSUFJb0FnaHFRUkJxSVFFZ0FoQklJQU1nQXlnQ1RDQUJhellDVENJQ0RRQUxDd3RRQVFKOUlBRXFBZ0FnQUNvQ0FKTWlCQ0FFbENBQktnSUVJQUFxQWdTVElnUWdCSlNTSWdWREFBQUFBRndFUUNBQ0lBUWdCWkVpQkpVNEFnQWdBeUFCS2dJQUlBQXFBZ0NUSUFTVk9BSUFDd3VGQXdFR2Z5QUFLQUlZSWdFb0FnUWhBaUFCS0FJQUlRUURRQ0FDUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBRHdzZ0FTZ0NBQ0VFSUFFb0FnUWhBZ3NnQkVFQmFpRURJQUpCQVdzaEFpQUVMUUFBUWY4QlJ3UkFBMEFnQUNnQzBBTWlCQ0FFS0FJWVFRRnFOZ0lZSUFFZ0FqWUNCQ0FCSUFNMkFnQWdBZ1IvSUFJRklBQWdBU2dDREJFQUFFVUVRRUVBRHdzZ0FTZ0NBQ0VESUFFb0FnUUxRUUZySVFJZ0F5MEFBQ0FEUVFGcUlRTkIvd0ZIRFFBTEN3TkFJQUlFZnlBQ0JTQUFJQUVvQWd3UkFBQkZCRUJCQUE4TElBRW9BZ0FoQXlBQktBSUVDMEVCYXlFQ0lBTXRBQUFoQlNBRFFRRnFJZ1FoQXlBRlFmOEJSZzBBQ3lBRlJRUkFJQUFvQXRBRElnTWdBeWdDR0VFQ2FqWUNHQ0FCSUFJMkFnUWdBU0FFTmdJQURBRUxDeUFBS0FMUUF5Z0NHQ0lEQkVBZ0FDZ0NBQ0lHSUFNMkFoZ2dCa0gzQURZQ0ZDQUFLQUlBSUFVMkFod2dBRUYvSUFBb0FnQW9BZ1FSQWdBZ0FDZ0MwQU5CQURZQ0dBc2dBQ0FGTmdLNEF5QUJJQUkyQWdRZ0FTQUVOZ0lBUVFFTG94RUJBWDhqQUVHd0FXc2lCaVFBSUFZZ0FEWUNxQUVnQmlBQk5nS2tBU0FHSUFJMkFxQUJJQVlnQXpZQ25BRWdCaUFFTmdLWUFTQUdJQVUyQXBRQklBWkJBRFlDa0FFRFFDQUdLQUtRQVVFUFMwVUVRQ0FHUVNCcUlBWW9BcEFCUVFGMGFrRUFPd0VBSUFZZ0JpZ0NrQUZCQVdvMkFwQUJEQUVMQ3lBR1FRQTJBb3dCQTBBZ0JpZ0NqQUVnQmlnQ29BRlBSUVJBSUFaQklHb2dCaWdDcEFFZ0JpZ0NqQUZCQVhScUx3RUFRUUYwYWlJQUlBQXZBUUJCQVdvN0FRQWdCaUFHS0FLTUFVRUJhallDakFFTUFRc0xJQVlnQmlnQ21BRW9BZ0EyQW9BQklBWkJEellDaEFFRFFBSkFJQVlvQW9RQlJRMEFJQVpCSUdvZ0JpZ0NoQUZCQVhScUx3RUFEUUFnQmlBR0tBS0VBVUVCYXpZQ2hBRU1BUXNMSUFZb0FvQUJJQVlvQW9RQlN3UkFJQVlnQmlnQ2hBRTJBb0FCQ3dKQUlBWW9Bb1FCUlFSQUlBWkJ3QUE2QUZnZ0JrRUJPZ0JaSUFaQkFEc0JXaUFHS0FLY0FTSUJLQUlBSVFBZ0FTQUFRUVJxTmdJQUlBQWdCaWdCV0RZQkFDQUdLQUtjQVNJQktBSUFJUUFnQVNBQVFRUnFOZ0lBSUFBZ0JpZ0JXRFlCQUNBR0tBS1lBVUVCTmdJQUlBWkJBRFlDckFFTUFRc2dCa0VCTmdLSUFRTkFBa0FnQmlnQ2lBRWdCaWdDaEFGUERRQWdCa0VnYWlBR0tBS0lBVUVCZEdvdkFRQU5BQ0FHSUFZb0FvZ0JRUUZxTmdLSUFRd0JDd3NnQmlnQ2dBRWdCaWdDaUFGSkJFQWdCaUFHS0FLSUFUWUNnQUVMSUFaQkFUWUNkQ0FHUVFFMkFwQUJBMEFnQmlnQ2tBRkJEMDBFUUNBR0lBWW9BblJCQVhRMkFuUWdCaUFHS0FKMElBWkJJR29nQmlnQ2tBRkJBWFJxTHdFQWF6WUNkQ0FHS0FKMFFRQklCRUFnQmtGL05nS3NBUXdEQlNBR0lBWW9BcEFCUVFGcU5nS1FBUXdDQ3dBTEN3SkFJQVlvQW5SQkFFd05BQ0FHS0FLb0FRUkFJQVlvQW9RQlFRRkdEUUVMSUFaQmZ6WUNyQUVNQVFzZ0JrRUFPd0VDSUFaQkFUWUNrQUVEUUNBR0tBS1FBVUVQVDBVRVFDQUdLQUtRQVVFQmFrRUJkQ0FHYWlBR0tBS1FBVUVCZENJQUlBWnFMd0VBSUFBZ0JrRWdhbW92QVFCcU93RUFJQVlnQmlnQ2tBRkJBV28yQXBBQkRBRUxDeUFHUVFBMkFvd0JBMEFnQmlnQ2pBRWdCaWdDb0FGSkJFQWdCaWdDcEFFZ0JpZ0NqQUZCQVhScUx3RUFCRUFnQmlnQ2xBRWhBU0FHS0FLa0FTQUdLQUtNQVNJQ1FRRjBhaThCQUVFQmRDQUdhaUlETHdFQUlRQWdBeUFBUVFGcU93RUFJQUJCLy84RGNVRUJkQ0FCYWlBQ093RUFDeUFHSUFZb0Fvd0JRUUZxTmdLTUFRd0JDd3NDUUFKQUFrQUNRQ0FHS0FLb0FRNENBQUVDQ3lBR0lBWW9BcFFCSWdBMkFrd2dCaUFBTmdKUUlBWkJGRFlDU0F3Q0N5QUdRYURxQWpZQ1VDQUdRZURxQWpZQ1RDQUdRWUVDTmdKSURBRUxJQVpCb09zQ05nSlFJQVpCNE9zQ05nSk1JQVpCQURZQ1NBc2dCa0VBTmdKc0lBWkJBRFlDakFFZ0JpQUdLQUtJQVRZQ2tBRWdCaUFHS0FLY0FTZ0NBRFlDVkNBR0lBWW9Bb0FCTmdKOElBWkJBRFlDZUNBR1FYODJBbUFnQmtFQklBWW9Bb0FCZERZQ2NDQUdJQVlvQW5CQkFXczJBbHdDUUFKQUlBWW9BcWdCUVFGR0JFQWdCaWdDY0VIVUJrc05BUXNnQmlnQ3FBRkJBa2NOQVNBR0tBSndRZEFFVFEwQkN5QUdRUUUyQXF3QkRBRUxBMEFnQmlBR0tBS1FBU0FHS0FKNGF6b0FXUUpBSUFZb0FrZ2dCaWdDbEFFZ0JpZ0NqQUZCQVhScUx3RUFRUUZxU3dSQUlBWkJBRG9BV0NBR0lBWW9BcFFCSUFZb0Fvd0JRUUYwYWk4QkFEc0JXZ3dCQ3dKQUlBWW9BcFFCSUFZb0Fvd0JRUUYwYWk4QkFDSUFJQVlvQWtoUEJFQWdCaUFHS0FKTUlBQWdCaWdDU0d0QkFYUnFMd0VBT2dCWUlBWWdCaWdDVUNBR0tBS1VBU0FHS0FLTUFVRUJkR292QVFBZ0JpZ0NTR3RCQVhScUx3RUFPd0ZhREFFTElBWkI0QUE2QUZnZ0JrRUFPd0ZhQ3dzZ0JrRUJJQVlvQXBBQklBWW9BbmhyZERZQ2FDQUdRUUVnQmlnQ2ZIUTJBbVFnQmlBR0tBSmtOZ0tJQVFOQUlBWWdCaWdDWkNBR0tBSm9hellDWkNBR0tBSlVJQVlvQW1RZ0JpZ0NiQ0FHS0FKNGRtcEJBblJxSUFZb0FWZzJBUUFnQmlnQ1pBMEFDeUFHUVFFZ0JpZ0NrQUZCQVd0ME5nSm9BMEFnQmlnQ2JDQUdLQUpvY1FSQUlBWWdCaWdDYUVFQmRqWUNhQXdCQ3dzQ1FDQUdLQUpvQkVBZ0JpQUdLQUpzSUFZb0FtaEJBV3R4TmdKc0lBWWdCaWdDYUNBR0tBSnNhallDYkF3QkN5QUdRUUEyQW13TElBWWdCaWdDakFGQkFXbzJBb3dCSUFaQklHb2dCaWdDa0FGQkFYUnFJZ0V2QVFCQkFXc2hBQ0FCSUFBN0FRQUNRQ0FBUWYvL0EzRkZCRUFnQmlnQ2tBRWdCaWdDaEFGR0RRRWdCaUFHS0FLa0FTQUdLQUtVQVNBR0tBS01BVUVCZEdvdkFRQkJBWFJxTHdFQU5nS1FBUXNDUUNBR0tBS1FBU0FHS0FLQUFVME5BQ0FHS0FKZ0lBWW9BbXdnQmlnQ1hIRkdEUUFnQmlnQ2VFVUVRQ0FHSUFZb0FvQUJOZ0o0Q3lBR0lBWW9BbFFnQmlnQ2lBRkJBblJxTmdKVUlBWWdCaWdDa0FFZ0JpZ0NlR3MyQW53Z0JrRUJJQVlvQW54ME5nSjBBMEFDUUNBR0tBSjhJQVlvQW5ocUlnQWdCaWdDaEFGUERRQWdCaUFHS0FKMElBWkJJR29nQUVFQmRHb3ZBUUJyTmdKMElBWW9BblJCQUV3TkFDQUdJQVlvQW54QkFXbzJBbndnQmlBR0tBSjBRUUYwTmdKMERBRUxDeUFHSUFZb0FuQkJBU0FHS0FKOGRHbzJBbkFDUUFKQUlBWW9BcWdCUVFGR0JFQWdCaWdDY0VIVUJrc05BUXNnQmlnQ3FBRkJBa2NOQVNBR0tBSndRZEFFVFEwQkN5QUdRUUUyQXF3QkRBUUxJQVlnQmlnQ2JDQUdLQUpjY1RZQ1lDQUdLQUtjQVNnQ0FDQUdLQUpnUVFKMGFpQUdLQUo4T2dBQUlBWW9BcHdCS0FJQUlBWW9BbUJCQW5ScUlBWW9Bb0FCT2dBQklBWW9BcHdCS0FJQUlBWW9BbUJCQW5ScUlBWW9BbFFnQmlnQ25BRW9BZ0JyUVFKMU93RUNDd3dCQ3dzZ0JpZ0NiQVJBSUFaQndBQTZBRmdnQmlBR0tBS1FBU0FHS0FKNGF6b0FXU0FHUVFBN0FWb2dCaWdDVkNBR0tBSnNRUUowYWlBR0tBRllOZ0VBQ3lBR0tBS2NBU0lBSUFBb0FnQWdCaWdDY0VFQ2RHbzJBZ0FnQmlnQ21BRWdCaWdDZ0FFMkFnQWdCa0VBTmdLc0FRc2dCaWdDckFFZ0JrR3dBV29rQUFzYkFRRi9JQUFvQWdBaUFVVUVRQThMSUFFUVNDQUFRUUEyQWdBTEdBRUJmMEVNRUdZaUFFRUFOZ0lJSUFCQ0FEY0NBQ0FBQzZNQkFRVi9RWWdCRUUwaUFRUkFBMEJCQUNFRElBSkJBMFpGQkVBRFFDQURRUVJHUlFSQUlBTkJBM1FpQkNBQklBSkJCWFFpQldwcUlBQWdCV29nQkdvckF3QTVBd0FnQTBFQmFpRUREQUVMQ3lBQ1FRRnFJUUlNQVFzTElBRkNnSUNBZ0lDQWdQQS9Od09BQVNBQlFvQ0FnSUNBZ0lDSXdBQTNBM2dnQVVLQWdJQ0F5TUxyOXo4M0EzQWdBVUtBZ0lDQW1yUG0zRDgzQTJnZ0FVRUtOZ0pnQ3lBQkN3UUFRWDhMTndFQmZ5TUFRUkJySWdJa0FDQUNJQUVvQWdBMkFnZ2dBRUdFd3dRZ0FrRUlhaEFGTmdJRUlBQWpBellDQUNBQ1FSQnFKQUFnQUF1ZkFnRURmeU1BUVJCcklnTWtBQ0FBS0FMWUFTSUJCRUJCZnlFQ0FrQWdBVVVOQUNBQktBTHdocThEUlEwQVFRQWhBaUFCUVFBMkF2Q0dyd01MSUFJRVFDQURRUVJxUWJ5RUFoQlRJZ0VRcFFFZ0FSQk1HZ3NnQUNnQzJBRWlBUVJBSUFFb0FvaUhyd01pQWdSQUlBSVFaU0FCUVFBMkFvaUhyd01MSUFFb0F1Q0dwd0lRU0NBQktBTGtocWNDRUVnZ0FSQklDeUFBUVFBMkF0Z0JDeUFBS0FMY0FRUkFJQUFvQXR3QklnRUVRQ0FCRVBNRElBQW9BdHdCRUVnZ0FFRUFOZ0xjQVFzZ0FFRUFOZ0xjQVFzZ0FDZ0N3QUVFUUFKQUlBQkJ3QUZxSWdGRkRRQWdBU2dDQUNJQ1JRMEFJQUlvQXJnQkVFZ2dBU2dDQUNnQ3ZBRVFTQ0FCS0FJQUVFZ2dBVUVBTmdJQUN5QUFRUUEyQXNBQkN5QURRUkJxSkFBTEd3RUJmeUFBS0FJQUlRSWdBQ0FCTmdJQUlBSUVRQ0FDRUVnTEN4a0FJQUFnQVVITnZnRkI5OWtFUWJqSUJFRzB5QVFRbndNTHNnRUJCWDhDZnlBQ1F3QUFBRCtTSWdLTFF3QUFBRTlkQkVBZ0FxZ01BUXRCZ0lDQWdIZ0xJUVVnQUNnQ0ZDRUlRWDhoQmdKQUFuOGdBVU1BQUFBL2tpSUJpME1BQUFCUFhRUkFJQUdvREFFTFFZQ0FnSUI0Q3lBQUtBSVFhaUlIUVFCSURRQWdCeUFBS0FJSUlnbE9EUUFnQlNBSWFpSUZRUUJJRFFBZ0JTQUFLQUlNVGcwQUlBTWdBQ2dDQUNBRklBbHNJQWRxUVFOMGFpSUFLZ0lBT0FJQUlBUWdBQ29DQkRnQ0FFRUFJUVlMSUFZTHNRTUJCbjhDUUFKQUFrQWdBZ1JBSUFORkRRRWdCRVVOQWlBQUlBRVFnQVlnQWlBRWJHd2lCVFlDRENBRElBVnNJZ2dnQUNnQ0ZFY0VRQ0FJRUdZaENTTUFRUkJySWdva0FDTUFRUkJySWdZa0FDQUtRUWhxSWdVZ0NUWUNBRUVRRUdZaUJ5QUpOZ0lNSUFkQjVMd0JOZ0lBSUFkQ0FEY0NCQ0FGSUFjMkFnUWdCa0VBTmdJTUlBWW9BZ3doQnlBR1FRQTJBZ3dnQndSQUlBY1FTQXNnQmtFUWFpUUFJQVVvQWdBaEJpQUZJQUFvQWhnMkFnQWdBQ0FHTmdJWUlBVW9BZ1FoQmlBRklBQW9BaHcyQWdRZ0FDQUdOZ0ljSUFVUXdRRWFJQXBCRUdva0FDQUFLQUlZUlEwRUN5QUFJQWcyQWhRZ0FDQUVOZ0lRSUFBZ0F6WUNDQ0FBSUFJMkFnUWdBQ0FCTmdJQUR3dEI4SWdGUWMwSkVFZEIxaEVRUjBHTUdSQkhRZjhBRUVwQnh4MFFSMEdFSUJCSEVFa1FXQUFMUWZDSUJVR09KeEJIUWRZUkVFZEJqQmtRUjBHQUFSQktRY2NkRUVkQmpTc1FSeEJKRUZnQUMwSHdpQVZCMmowUVIwSFdFUkJIUVl3WkVFZEJnZ0VRU2tISEhSQkhRWXZCQUJCSEVFa1FXQUFMUWZDSUJVR2R5UUFRUjBIV0VSQkhRWXdaRUVkQmxnRVFTa0hISFJCSFFZek5BQkJIRUVrUVdBQUxod2tCQzM4akFFRVFheUlLSkFBQ1FDQUNMUUJrUVFGR0JFQWdBRUhJQUdvaEJTQUFLQUpNSVFZZ0FpZ0NkQ0lBSVFNZ0FpZ0NlQ0VFSXdCQklHc2lEaVFBQWtBZ0JDQUFhMEVDZFNJSFFRQk1EUUFnQlNnQ0NDQUZLQUlFSWdGclFRSjFJQWRPQkVBQ1FDQUJJQVpySWdKQkFuVWlBQ0FIVGdSQUlBTWdCMEVDZEdvaENRd0JDeUFFSUFJZ0Eyb2lDV3NoQWlBRUlBbEhCRUFnQVNBSklBTDhDZ0FBQ3lBRklBRWdBbW8yQWdRZ0FFRUFUQTBDQ3lBR0lBVW9BZ1FpQWlBR0lBZEJBblJxSWdScklnZHFJUXNnQWlFQUEwQWdBU0FMVFFSQUlBVWdBRFlDQkNBQ0lBUkhCRUFnQWlBSGF5QUdJQWY4Q2dBQUN3VWdBQ0FMS0FJQU5nSUFJQUJCQkdvaEFDQUxRUVJxSVFzTUFRc0xJQU1nQ1VZTkFTQUdJQU1nQ1NBRGEvd0tBQUFNQVFzZ0RrRU1haUFGSUFFZ0JTZ0NBR3RCQW5VZ0Iyb1EwUUlnQmlBRktBSUFhMEVDZFNBRlFRaHFFSWtDSWdRb0FnZ2lBQ0FIUVFKMGFpRUJBMEFnQUNBQlJ3UkFJQUFnQXlnQ0FEWUNBQ0FEUVFScUlRTWdBRUVFYWlFQURBRUxDeUFFSUFFMkFnZ2dCU2dDQUNFQklBWWhBQ0FFS0FJRUlRTURRQ0FBSUFGSEJFQWdBMEVFYXlJRElBQkJCR3NpQUNnQ0FEWUNBQXdCQ3dzZ0JDQUROZ0lFSUFVb0FnUWlBQ0FHYXlFQ0lBUW9BZ2doQVNBQUlBWkhCRUFnQVNBR0lBTDhDZ0FBSUFRb0FnUWhBd3NnQkNBQklBSnFOZ0lJSUFVb0FnQWhBQ0FGSUFNMkFnQWdCQ0FBTmdJRUlBVW9BZ1FoQUNBRklBUW9BZ2cyQWdRZ0JDQUFOZ0lJSUFVb0FnZ2hBQ0FGSUFRb0FndzJBZ2dnQkNBQU5nSU1JQVFnQkNnQ0JEWUNBQ0FFRUlnQ0N5QU9RU0JxSkFBTUFRc2dDa0VBTmdJTUlBcENBRGNDQkNBS1FRUnFJUXNqQUVFUWF5SU9KQUJCZnlFTUlBNUJCR29nQWlnQ2JDQUNLQUpvYTBFQ2RSRCtBeUVOUVg4aENRSkFBMEFnRFNnQ0JDQU5LQUlBYTBFRGRTQUlUUVJBSUF4QmYwY0VRQ0FMSUFJb0FtZ2dERUVDZEdvUWd3UkJBQ0VJQTBBZ0NDQU5LQUlFSUEwb0FnQWlCR3RCQTNWUERRUUNRQ0FJSUF4R0RRQWdCQ0FJUVFOMGFpSUdLQUlFSUFRZ0RFRURkR29vQWdSR0JFQWdDeUFDS0FKb0lBaEJBblJxRUlNRURBRUxJQUVnQmhEWEFTQUJLQUlBSVFjZ0FTZ0NCQ0VFSXdCQkVHc2lCaVFBSUFjZ0JDQUVJQWRyUVFOMUVJMEdJQVpCRUdva0FBc2dDRUVCYWlFSURBQUxBQXNGSUFoQkFuUWlCaUFDS0FKb2FpZ0NBRUVFYWlBREVNOENJUWNnQWlnQ2FDQUdhaWdDQUNFRUlBMG9BZ0FnQ0VFRGRHb2lCaUFITmdJRUlBWWdCRFlDQUNBSElBa2dCeUFKU1NJR0d5RUpJQWdnRENBR0d5RU1JQWhCQVdvaENBd0JDd3RCOElnRlFZNmFBUkJIUWZ6cUFCQkhRYUhPQUJCSFFac0JFRXBCK2RFQUVFZEI1cG9CRUVjUVNSQllBQXNnRFJCV0dpQU9RUkJxSkFBRFFDQUtLQUlJSUFvb0FnUWlBbXRCQW5VZ0JVMEVRQUpBSUFBb0FtUWdBQ2dDYUU0TkFDQUJLQUlBSWdJZ0FTZ0NCRVlOQUNBQ0tBSUFJUUlnQVJDT0JpQUFJQUFvQW1SQkFXbzJBbVFnQUNBQklBSWdBeEQ5QXdzZ0NrRUVhaEJXR2dVZ0FDQUJJQUlnQlVFQ2RHb29BZ0FnQXhEOUF5QUZRUUZxSVFVTUFRc0xDeUFLUVJCcUpBQUxkZ0VDZnlNQVFSQnJJZ0lrQUNBQVFRQTJBZ2dnQUVJQU53SUFJQUlnQURZQ0NDQUJCRUFnQVVHQWdJQ0FBazhFUUJDZ0FnQUxJQUFnQVJEZ0JpSUROZ0lFSUFBZ0F6WUNBQ0FBSUFNZ0FVRURkR28yQWdnZ0FDQUJFS0lHQ3lBQ1FRRTZBQXdnQWtFSWFoRFNBaUFDUVJCcUpBQWdBQXQyQVFKL0l3QkJFR3NpQWlRQUlBQkJBRFlDQ0NBQVFnQTNBZ0FnQWlBQU5nSUlJQUVFUUNBQlFZQ0FnSUFFVHdSQUVQQUJBQXNnQUNBQkVLMERJZ00yQWdRZ0FDQUROZ0lBSUFBZ0F5QUJRUUowYWpZQ0NDQUFJQUVRc0FNTElBSkJBVG9BRENBQ1FRaHFFTklDSUFKQkVHb2tBQ0FBQzI0QkJIOGdBa0VBSUFKQkFFb2JJUUlEUUNBQ0lBUkhCRUFnQXlBREtBSUFRZjJIRFd4Qnc3MmFBV29pQlRZQ0FDQUFJQVJCQW5ScUlnWW9BZ0FoQnlBR0lBQWdCVUVRZGtILy93RnhJQUZ2UVFKMGFpSUZLQUlBTmdJQUlBVWdCellDQUNBRVFRRnFJUVFNQVFzTEM0VUNBUU4vSUFBb0FnUWdBQ2dDQUNJRWEwRUNkU0lESUFGSkJFQWpBRUVnYXlJRUpBQUNRQ0FCSUFOcklnTWdBQ2dDQ0NBQUtBSUVJZ0ZyUVFKMVRRUkFJQUFvQWdRaUFTQURRUUowYWlFREEwQWdBU0FEUmdSQUlBQWdBellDQkFVZ0FTQUNLQUlBTmdJQUlBRkJCR29oQVF3QkN3c01BUXNnQkVFTWFpQUFJQUVnQUNnQ0FHdEJBblVnQTJvUTBRSWdBQ2dDQkNBQUtBSUFhMEVDZFNBQVFRaHFFSWtDSWdVb0FnZ2lBU0FEUVFKMGFpRURBMEFnQVNBRFJ3UkFJQUVnQWlnQ0FEWUNBQ0FCUVFScUlRRU1BUXNMSUFVZ0F6WUNDQ0FBSUFVUTBBSWdCUkNJQWdzZ0JFRWdhaVFBRHdzZ0FTQURTUVJBSUFBZ0JDQUJRUUowYWpZQ0JBc0xtZ1lDQ1g4Q2ZDTUFRZEFQYXlJR0pBQkJmeUVCQWtBZ0FDZ0NCQ0lEUWZRRFNnMEFJQUFvQWdBaEJRSkFBa0FnQXc0Q0FnQUJDeUFGUkFBQUFBQUFBUEEvSUFVckF3Q2pPUU1BUVFBaEFRd0JDeUFEUVFBZ0EwRUFTaHNoQ1VFQUlRRURRQ0FCSUFsR0JFQURRQ0FFSUFsR0JFQkJBQ0VFQTBBQ1FDQUpJQVFpQUVjRVFBTkFJQUFnQTBZRVFDQURJUUFNQXdzZ0JpQUFRUUowYWlnQ0FDQUVSZzBDSUFCQkFXb2hBQXdBQ3dBTFFRQkJmeUFGR3lFQkRBWUxJQVlnQUVFQ2RHb2dCaUFFUVFKMGFpZ0NBRFlDQUNBRklBUkJBM1JxSVFFZ0JTQUFRUU4wYWlFQVFRQWhBZ05BSUFJZ0NVWkZCRUFnQUNzREFDRUtJQUFnQVNzREFEa0RBQ0FCSUFvNUF3QWdBa0VCYWlFQ0lBRWdBMEVEZENJSWFpRUJJQUFnQ0dvaEFBd0JDd3NnQkVFQmFpRUVEQUFMQUF0RUFBQUFBQUFBQUFBaENrRi9JUUlnQlNBRUlnRWdBMnhCQTNScUlnZ2hBQU5BSUFFZ0EwWkZCRUFnQUNzREFKa2lDeUFLSUFvZ0MyTWlCeHNoQ2lBQklBSWdCeHNoQWlBQlFRRnFJUUVnQUNBRFFRTjBhaUVBREFFTEMwRi9JUUVnQWtGL1JpQUtSTHU5MTluZmZOczlaWElOQXlBR0lBSkJBblJxSWdBb0FnQWhBU0FBSUFZZ0JFRUNkR29pQUNnQ0FEWUNBQ0FBSUFFMkFnQWdCU0FDSUFOc1FRTjBhaUVCUVFBaEFpQUlJUUFEUUNBQ0lBTkdSUVJBSUFFckF3QWhDaUFCSUFBckF3QTVBd0FnQUNBS09RTUFJQUpCQVdvaEFpQUFRUWhxSVFBZ0FVRUlhaUVCREFFTEN5QUlLd01BSVFwQkFTRUFJQWdoQVFOQUlBQWdBMFpGQkVBZ0FTQUJLd01JSUFxak9RTUFJQUJCQVdvaEFDQUJRUWhxSVFFTUFRc0xJQUZFQUFBQUFBQUE4RDhnQ3FNNUF3QkJBQ0VIQTBBZ0F5QUhSd1JBSUFRZ0IwY0VRQ0FGSUFNZ0IyeEJBM1JxSWdFckF3Q2FJUXBCQVNFQUlBZ2hBZ05BSUFBZ0EwWkZCRUFnQVNBS0lBSXJBd0NpSUFFckF3aWdPUU1BSUFKQkNHb2hBaUFBUVFGcUlRQWdBVUVJYWlFQkRBRUxDeUFCSUFJckF3QWdDcUk1QXdBTElBZEJBV29oQnd3QkN3c2dCRUVCYWlFRURBQUxBQVVnQmlBQlFRSjBhaUFCTmdJQUlBRkJBV29oQVF3QkN3QUxBQXNnQmtIUUQyb2tBQ0FCQzVrQkFRSi9JQUFDZnlBQUtBSUVJZ0lnQUNnQ0NFa0VRQ0FDSUFFb0FnQTJBZ0FnQWtFRWFnd0JDeU1BUVNCcklnTWtBQ0FEUVF4cUlBQWdBQ2dDQkNBQUtBSUFhMEVDZFVFQmFoRFJBaUFBS0FJRUlBQW9BZ0JyUVFKMUlBQkJDR29RaVFJaUFpZ0NDQ0FCS0FJQU5nSUFJQUlnQWlnQ0NFRUVhallDQ0NBQUlBSVEwQUlnQUNnQ0JDQUNFSWdDSUFOQklHb2tBQXMyQWdRTG1BRUJBMzhnQUFKL0lBQW9BZ1FpQWlBQUtBSUlTUVJBSUFJZ0FTZ0NBRFlDQUNBQ1FRUnFEQUVMSXdCQklHc2lBeVFBSUFOQkRHb2dBQ0FBS0FJRUlBQW9BZ0JyUVFKMVFRRnFFTkVDSUFBb0FnUWdBQ2dDQUd0QkFuVWdBRUVJYWhDSkFpSUNLQUlJSWdRZ0FTZ0NBRFlDQUNBQ0lBUkJCR28yQWdnZ0FDQUNFTkFDSUFBb0FnUWdBaENJQWlBRFFTQnFKQUFMTmdJRUN5MEJBWDhnQUNnQ0FDSUJCRUFnQUNBQk5nSUVJQUFvQWdnYUlBRVFTQ0FBUVFBMkFnZ2dBRUlBTndJQUN3dFFBUUovSXdCQkVHc2lBU1FBSUFFZ0FDZ0NBQ2dDQUNJQUtBSkFJZ0kyQWdnZ0FTQUFLQUpFSWdBMkFnd2dBQVJBSUFCQkFmNGVBZ1FhQ3lBQlFRaHFFTUVCR2lBQlFSQnFKQUFnQWtFWWFndkxCUUlJZndKOUl3QkJFR3NpQnlRQUlBY2dBVFlDQkNNQVFSQnJJZ1FrQUNBQktBSUFJUUVnQndKL0FrQWdBQ2dDQkNJQ1JRMEFJQUFvQWdBQ2Z5QUNRUUZySUFGeElBSnBJZ05CQVUwTkFCb2dBU0FCSUFKSkRRQWFJQUVnQW5BTElnVkJBblJxS0FJQUlnWkZEUUFnQWtFQmF5RUlJQU5CQVVzaENRTkFJQVlvQWdBaUJrVU5BU0FCSUFZb0FnUWlBMGNFUUFKQUlBbEZCRUFnQXlBSWNTRUREQUVMSUFJZ0Ewc05BQ0FESUFKd0lRTUxJQU1nQlVjTkFnd0JDeUFHS0FJSUlBRkhEUUFMUVFBTUFRdEJHQkJtSVFNZ0JDQUFRUWhxTmdJSUlBUWdBellDQkNBRElBRTJBZ1FnQTBFQU5nSUFJQWNvQWdRb0FnQWhCaUFEUVFBMkFoUWdBMElBTndJTUlBTWdCallDQ0NBRVFRRTZBQXdDUUVFQUlBSWdBQ2dDREVFQmFyTWlDaUFBS2dJUUlnc2dBck9VWGhzTkFDQUFJQUlnQWtFQmEzRkJBRWNnQWtFRFNYSWdBa0VCZEhJaUJRSi9JQW9nQzVXTklncERBQUNBVDEwZ0NrTUFBQUFBWUhFRVFDQUtxUXdCQzBFQUN5SUNJQUlnQlVrYkVKd0RJQUFvQWdRaUFpQUNRUUZySWdWeFJRUkFJQUVnQlhFaEJRd0JDeUFCSUFKSkJFQWdBU0VGREFFTElBRWdBbkFoQlFzQ1FDQUZRUUowSWdVZ0FDZ0NBR29vQWdBaUFVVUVRQ0FFS0FJRUlBQW9BZ2cyQWdBZ0FDQUVLQUlFTmdJSUlBQW9BZ0FnQldvZ0FFRUlhallDQUNBRUtBSUVJZ1lvQWdBaUFVVU5BU0FCS0FJRUlRTUNRQ0FDSUFKQkFXc2lBWEZGQkVBZ0FTQURjU0VEREFFTElBSWdBMHNOQUNBRElBSndJUU1MSUFBb0FnQWdBMEVDZEdvZ0JqWUNBQ0FFS0FJRUlRWU1BUXNnQkNnQ0JDQUJLQUlBTmdJQUlBRWdCQ2dDQkNJR05nSUFDeUFFUVFBMkFnUWdBQ0FBS0FJTVFRRnFOZ0lNSUFRb0FnUWhBQ0FFUVFBMkFnUWdBQVJBSUFRdEFBeEJBVVlFUUNBQVFReHFFRllhQ3lBQUJFQWdBQkJJQ3d0QkFRczZBQXdnQnlBR05nSUlJQVJCRUdva0FDQUhLQUlJSUFkQkVHb2tBRUVNYWd1d0FRRUZmd0pBSUFBb0FnUWlBa1VOQUNBQktBSUFJUU1nQUNnQ0FBSi9JQUpCQVdzZ0EzRWdBbWtpQVVFQlRRMEFHaUFESUFJZ0Ewc05BQm9nQXlBQ2NBc2lCRUVDZEdvb0FnQWlBRVVOQUNBQ1FRRnJJUVVnQVVFQlN5RUdBMEFnQUNnQ0FDSUFSUTBCSUFNZ0FDZ0NCQ0lCUndSQUFrQWdCa1VFUUNBQklBVnhJUUVNQVFzZ0FTQUNTUTBBSUFFZ0FuQWhBUXNnQVNBRVJ3MENEQUVMSUFBb0FnZ2dBMGNOQUFzZ0FBOExRUUFMREFBZ0FCQzhCaG9nQUJCSUMwc0JBbjhnQUNnQ0JDSUhRUWgxSVFZZ0IwRUJjUVJBSUFNb0FnQWdCaENOQkNFR0N5QUFLQUlBSWdBZ0FTQUNJQU1nQm1vZ0JFRUNJQWRCQW5FYklBVWdBQ2dDQUNnQ0ZCRU1BQXNnQUFKQUlBRWdBQ2dDQkVjTkFDQUFLQUljUVFGR0RRQWdBQ0FDTmdJY0N3dWFBUUFnQUVFQk9nQTFBa0FnQWlBQUtBSUVSdzBBSUFCQkFUb0FOQUpBSUFBb0FoQWlBa1VFUUNBQVFRRTJBaVFnQUNBRE5nSVlJQUFnQVRZQ0VDQURRUUZIRFFJZ0FDZ0NNRUVCUmcwQkRBSUxJQUVnQWtZRVFDQUFLQUlZSWdKQkFrWUVRQ0FBSUFNMkFoZ2dBeUVDQ3lBQUtBSXdRUUZIRFFJZ0FrRUJSZzBCREFJTElBQWdBQ2dDSkVFQmFqWUNKQXNnQUVFQk9nQTJDd3NLQUNBQUlBRnFLQUlBQzNZQkFYOGdBQ2dDSkNJRFJRUkFJQUFnQWpZQ0dDQUFJQUUyQWhBZ0FFRUJOZ0lrSUFBZ0FDZ0NPRFlDRkE4TEFrQUNRQ0FBS0FJVUlBQW9BamhIRFFBZ0FDZ0NFQ0FCUncwQUlBQW9BaGhCQWtjTkFTQUFJQUkyQWhnUEN5QUFRUUU2QURZZ0FFRUNOZ0lZSUFBZ0EwRUJhallDSkFzTHN3RUJBMzhqQUVFUWF5SUNKQUFnQWlBQk5nSU1Ba0FDUUFKL0lBQVFqQUVpQkVVRVFFRUJJUUVnQUJEMUFRd0JDeUFBRU00QlFRRnJJUUVnQUNnQ0JBc2lBeUFCUmdSQUlBQWdBVUVCSUFFZ0FSRC9CaUFBRUZVYURBRUxJQUFRVlJvZ0JBMEFJQUFpQVNBRFFRRnFFSnNCREFFTElBQW9BZ0FoQVNBQUlBTkJBV29RaXdFTElBRWdBMEVDZEdvaUFDQUNRUXhxRUtnQklBSkJBRFlDQ0NBQVFRUnFJQUpCQ0dvUXFBRWdBa0VRYWlRQUM3QUJBUU4vSXdCQkVHc2lBaVFBSUFJZ0FUb0FEd0pBQWtBQ2Z5QUFFSXdCSWdSRkJFQkJDaUVCSUFBUTlRRU1BUXNnQUJET0FVRUJheUVCSUFBb0FnUUxJZ01nQVVZRVFDQUFJQUZCQVNBQklBRVFvQVFnQUJCVkdnd0JDeUFBRUZVYUlBUU5BQ0FBSWdFZ0EwRUJhaENiQVF3QkN5QUFLQUlBSVFFZ0FDQURRUUZxRUlzQkN5QUJJQU5xSWdBZ0FrRVBhaENVQVNBQ1FRQTZBQTRnQUVFQmFpQUNRUTVxRUpRQklBSkJFR29rQUF1TkFRRUNmeU1BUVJCcklnTWtBQ0FDUWZmLy8vOEhUUVJBQWtBZ0FoRGhBZ1JBSUFBZ0FoQ2JBU0FBSVFRTUFRc2dBMEVJYWlBQ0VKTUNRUUZxRUpJQ0lBTW9BZ3dhSUFBZ0F5Z0NDQ0lFRUxFQklBQWdBeWdDREJDd0FTQUFJQUlRaXdFTElBUWdBU0FDRUxZQklBTkJBRG9BQnlBQ0lBUnFJQU5CQjJvUWxBRWdBMEVRYWlRQUR3c1Frd0VBQ3cwQUlBQWdBU0FDUW44UTJRTUxCd0FnQUVFTWFnc25BUUYvSUFBb0FnQWhBU01BUVJCcklnQWtBQ0FBSUFFMkFnd2dBQ2dDRENBQVFSQnFKQUFMRndBZ0FDZ0NDQkJwUndSQUlBQW9BZ2dRdWdRTElBQUxGUUFnQUVIRXN3RTJBZ0FnQUVFRWFoREFBeUFBQ3lnQUlBQkIxTE1CTmdJQUlBQkJPR29RVmhvZ0FFRXNhaEJXR2lBQVFTQnFFRllhSUFBUWxnUUxxd0VCQkg4akFFRVFheUlGSkFBZ0FSRExCaUVDSXdCQkVHc2lBeVFBQWtBZ0FrSDMvLy8vQTAwRVFBSkFJQUlRcFFNRVFDQUFJQUlRbXdFZ0FDRUVEQUVMSUFOQkNHb2dBaENqQWtFQmFoQ2lBaUFES0FJTUdpQUFJQU1vQWdnaUJCQ3hBU0FBSUFNb0Fnd1FzQUVnQUNBQ0VJc0JDeUFFSUFFZ0FoREZBU0FEUVFBMkFnUWdCQ0FDUVFKMGFpQURRUVJxRUtnQklBTkJFR29rQUF3QkN4Q1RBUUFMSUFWQkVHb2tBQXMyQVFGL0l3QkJFR3NpQXlRQUlBTWdBallDRENBRFFRaHFJQU5CREdvUXZBRWdBQ0FCRVBRQ0lRQVF1d0VnQTBFUWFpUUFJQUFMQkFCQkFRc1RBQ0FBSUFFb0FnQWlBRFlDQUNBQUVPMEdDdzBBSUFCQmYvNGVBZ0JCQVdzTE13RUJmeU1BUVJCcklnSWtBQ0FDSUFBb0FnQTJBZ3dnQWlBQ0tBSU1JQUZCQW5ScU5nSU1JQUlvQWd3Z0FrRVFhaVFBQ3hzQkFYOUJBU0VCSUFBUWpBRUVmeUFBRU00QlFRRnJCVUVCQ3dzd0FRRi9Jd0JCRUdzaUFpUUFJQUlnQUNnQ0FEWUNEQ0FDSUFJb0Fnd2dBV28yQWd3Z0FpZ0NEQ0FDUVJCcUpBQUwwQUVCQTM4akFFRVFheUlGSkFBQ1FFSDMvLy8vQnlBQmF5QUNUd1JBSUFBUVZTRUdJQVZCQkdvaUJ5QUJRZlAvLy84RFNRUi9JQVVnQVVFQmREWUNEQ0FGSUFFZ0FtbzJBZ1FnQnlBRlFReHFFSzBDS0FJQUVKTUNRUUZxQlVIMy8vLy9Cd3NRa2dJZ0JTZ0NCQ0VDSUFVb0FnZ2FJQVFFUUNBQ0lBWWdCQkMyQVFzZ0F5QUVSd1JBSUFJZ0JHb2dCQ0FHYWlBRElBUnJFTFlCQ3lBQlFRcEhCRUFnQmhEaUFnc2dBQ0FDRUxFQklBQWdCU2dDQ0JDd0FTQUZRUkJxSkFBTUFRc1Frd0VBQ3lBQUlBTVFpd0VMUmdFRGZ5TUFRUkJySWdFa0FDQUJJQUEyQWd3Z0FTZ0NEQ0lDS0FJQUJFQWdBaUFDS0FJQUVMUUVJQUVvQWd3aUFpZ0NBQ0FDS0FJSUdoQklDeUFCUVJCcUpBQWdBQXZtQXdFSWZ5TUFRUkJySWdza0FDQUdFSndCSVFvZ0MwRUVhaUlISUFZUWpBSWlCaENaQVFKQUlBY1FyUUVFUUNBS0lBQWdBaUFERU0wQklBVWdBeUFDSUFCclFRSjBhaUlHTmdJQURBRUxJQVVnQXpZQ0FBSkFBa0FnQUNJSExRQUFJZ2hCSzJzT0F3QUJBQUVMSUFvZ0NNQVFud0VoQnlBRklBVW9BZ0FpQ0VFRWFqWUNBQ0FJSUFjMkFnQWdBRUVCYWlFSEN3SkFJQUlnQjJ0QkFrZ05BQ0FITFFBQVFUQkhEUUFnQnkwQUFVRWdja0g0QUVjTkFDQUtRVEFRbndFaENDQUZJQVVvQWdBaUNVRUVhallDQUNBSklBZzJBZ0FnQ2lBSExBQUJFSjhCSVFnZ0JTQUZLQUlBSWdsQkJHbzJBZ0FnQ1NBSU5nSUFJQWRCQW1vaEJ3c2dCeUFDRUlvQ1FRQWhDU0FHRUpvQklRMUJBQ0VJSUFjaEJnTi9JQUlnQmswRWZ5QURJQWNnQUd0QkFuUnFJQVVvQWdBUXNRTWdCU2dDQUFVQ1FDQUxRUVJxSWd3Z0NCQlJMUUFBUlEwQUlBa2dEQ0FJRUZFc0FBQkhEUUFnQlNBRktBSUFJZ2xCQkdvMkFnQWdDU0FOTmdJQUlBZ2dDQ0FNRUV0QkFXdEphaUVJUVFBaENRc2dDaUFHTEFBQUVKOEJJUXdnQlNBRktBSUFJZzVCQkdvMkFnQWdEaUFNTmdJQUlBWkJBV29oQmlBSlFRRnFJUWtNQVFzTElRWUxJQVFnQmlBRElBRWdBR3RCQW5ScUlBRWdBa1liTmdJQUlBdEJCR29RVEJvZ0MwRVFhaVFBQ3c4QUlBQW9BZ3dhSUFCQkFEWUNEQXNmQVFGL0l3QkJFR3NpQXlRQUlBQWdBU0FDRU1RR0lBTkJFR29rQUNBQUM3QUZBUTUvSXdCQkVHc2lDeVFBSUFZUWxRRWhDU0FMUVFScUlBWVFqZ0lpRGhDWkFTQUZJQU0yQWdBQ1FBSkFJQUFpQnkwQUFDSUdRU3RyRGdNQUFRQUJDeUFKSUFiQUVJSUJJUVlnQlNBRktBSUFJZ2hCQVdvMkFnQWdDQ0FHT2dBQUlBQkJBV29oQndzQ1FBSkFJQUlnQnlJR2EwRUJUQTBBSUFZdEFBQkJNRWNOQUNBR0xRQUJRU0J5UWZnQVJ3MEFJQWxCTUJDQ0FTRUlJQVVnQlNnQ0FDSUhRUUZxTmdJQUlBY2dDRG9BQUNBSklBWXNBQUVRZ2dFaENDQUZJQVVvQWdBaUIwRUJhallDQUNBSElBZzZBQUFnQmtFQ2FpSUhJUVlEUUNBQ0lBWk5EUUlnQml3QUFCQnBJUklRdmdSRkRRSWdCa0VCYWlFR0RBQUxBQXNEUUNBQ0lBWk5EUUVnQml3QUFCQnBJUlFRdlFSRkRRRWdCa0VCYWlFR0RBQUxBQXNDUUNBTFFRUnFFSzBCQkVBZ0NTQUhJQVlnQlNnQ0FCRGVBU0FGSUFVb0FnQWdCaUFIYTJvMkFnQU1BUXNnQnlBR0VJb0NJQTRRbWdFaER5QUhJUWdEUUNBR0lBaE5CRUFnQXlBSElBQnJhaUFGS0FJQUVJb0NCUUpBSUF0QkJHb2lEU0FNRUZFc0FBQkJBRXdOQUNBS0lBMGdEQkJSTEFBQVJ3MEFJQVVnQlNnQ0FDSUtRUUZxTmdJQUlBb2dEem9BQUNBTUlBd2dEUkJMUVFGclNXb2hERUVBSVFvTElBa2dDQ3dBQUJDQ0FTRU5JQVVnQlNnQ0FDSVFRUUZxTmdJQUlCQWdEVG9BQUNBSVFRRnFJUWdnQ2tFQmFpRUtEQUVMQ3dzRFFBSkFBa0FnQWlBR1RRUkFJQVloQ0F3QkN5QUdRUUZxSVFnZ0Jpd0FBQ0lHUVM1SERRRWdEaENzQVNFR0lBVWdCU2dDQUNJSFFRRnFOZ0lBSUFjZ0Jqb0FBQXNnQ1NBSUlBSWdCU2dDQUJEZUFTQUZJQVVvQWdBZ0FpQUlhMm9pQlRZQ0FDQUVJQVVnQXlBQklBQnJhaUFCSUFKR0d6WUNBQ0FMUVFScUVFd2FJQXRCRUdva0FBOExJQWtnQmhDQ0FTRUdJQVVnQlNnQ0FDSUhRUUZxTmdJQUlBY2dCam9BQUNBSUlRWU1BQXNBQzkwREFRaC9Jd0JCRUdzaUN5UUFJQVlRbFFFaENpQUxRUVJxSWdjZ0JoQ09BaUlHRUprQkFrQWdCeEN0QVFSQUlBb2dBQ0FDSUFNUTNnRWdCU0FESUFJZ0FHdHFJZ1kyQWdBTUFRc2dCU0FETmdJQUFrQUNRQ0FBSWdjdEFBQWlDRUVyYXc0REFBRUFBUXNnQ2lBSXdCQ0NBU0VISUFVZ0JTZ0NBQ0lJUVFGcU5nSUFJQWdnQnpvQUFDQUFRUUZxSVFjTEFrQWdBaUFIYTBFQ1NBMEFJQWN0QUFCQk1FY05BQ0FITFFBQlFTQnlRZmdBUncwQUlBcEJNQkNDQVNFSUlBVWdCU2dDQUNJSlFRRnFOZ0lBSUFrZ0NEb0FBQ0FLSUFjc0FBRVFnZ0VoQ0NBRklBVW9BZ0FpQ1VFQmFqWUNBQ0FKSUFnNkFBQWdCMEVDYWlFSEN5QUhJQUlRaWdKQkFDRUpJQVlRbWdFaERVRUFJUWdnQnlFR0EzOGdBaUFHVFFSL0lBTWdCeUFBYTJvZ0JTZ0NBQkNLQWlBRktBSUFCUUpBSUF0QkJHb2lEQ0FJRUZFdEFBQkZEUUFnQ1NBTUlBZ1FVU3dBQUVjTkFDQUZJQVVvQWdBaUNVRUJhallDQUNBSklBMDZBQUFnQ0NBSUlBd1FTMEVCYTBscUlRaEJBQ0VKQ3lBS0lBWXNBQUFRZ2dFaERDQUZJQVVvQWdBaURrRUJhallDQUNBT0lBdzZBQUFnQmtFQmFpRUdJQWxCQVdvaENRd0JDd3NoQmdzZ0JDQUdJQU1nQVNBQWEyb2dBU0FDUmhzMkFnQWdDMEVFYWhCTUdpQUxRUkJxSkFBTG1RTUJBbjhqQUVIUUFtc2lBQ1FBSUFBZ0FqWUN5QUlnQUNBQk5nTE1BaUFERU1RQklRWWdBeUFBUWRBQmFoQ3BBaUVISUFCQnhBRnFJQU1nQUVIRUFtb1FxQUlnQUVHNEFXb1FXaUlCSUFFUVh4QlNJQUFnQVVFQUVGRWlBallDdEFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUhNQW1vZ0FFSElBbW9RWUEwQUlBQW9BclFCSUFFUVN5QUNha1lFUUNBQkVFc2hBeUFCSUFFUVMwRUJkQkJTSUFFZ0FSQmZFRklnQUNBRElBRkJBQkJSSWdKcU5nSzBBUXNnQUVITUFtb2lBeEI1SUFZZ0FpQUFRYlFCYWlBQVFRaHFJQUFvQXNRQ0lBQkJ4QUZxSUFCQkVHb2dBRUVNYWlBSEVJc0NEUUFnQXhDQUFSb01BUXNMQWtBZ0FFSEVBV29RUzBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BclFCSUFRZ0JoQ3VCRFlDQUNBQVFjUUJhaUFBUVJCcUlBQW9BZ3dnQkJDS0FTQUFRY3dDYWlBQVFjZ0NhaEJnQkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FMTUFpQUJFRXdhSUFCQnhBRnFFRXdhSUFCQjBBSnFKQUFMVEFFQmZ5QUFLQUlBSVFJZ0FDQUJLQUlBTmdJQUlBRWdBallDQUNBQUtBSUVJUUlnQUNBQktBSUVOZ0lFSUFFZ0FqWUNCQ0FBS0FJSUlRSWdBQ0FCS0FJSU5nSUlJQUVnQWpZQ0NBdEVBUUYvSXdCQkVHc2lBeVFBSUFNZ0FUWUNEQ0FESUFJMkFnZ2dBMEVFYWlBRFFReHFFTHdCSUFCQjlOVUJJQU1vQWdnUWhRVWhBQkM3QVNBRFFSQnFKQUFnQUF1ckFnSUVmZ1ovSXdCQklHc2lDQ1FBQWtBQ1FBSkFJQUVnQWtjRVFCQlpJZ3dvQWdBaERTQU1RUUEyQWdBakFFRVFheUlKSkFBUWFSb2pBRUVRYXlJS0pBQWpBRUVRYXlJTEpBQWdDeUFCSUFoQkhHcEJBaEMvQXlBTEtRTUFJUVFnQ2lBTEtRTUlOd01JSUFvZ0JEY0RBQ0FMUVJCcUpBQWdDaWtEQUNFRUlBa2dDaWtEQ0RjRENDQUpJQVEzQXdBZ0NrRVFhaVFBSUFrcEF3QWhCQ0FJSUFrcEF3ZzNBeEFnQ0NBRU53TUlJQWxCRUdva0FDQUlLUU1RSVFRZ0NDa0RDQ0VGSUF3b0FnQWlBVVVOQVNBSUtBSWNJQUpIRFFJZ0JTRUdJQVFoQnlBQlFjUUFSdzBEREFJTElBTkJCRFlDQUF3Q0N5QU1JQTAyQWdBZ0NDZ0NIQ0FDUmcwQkN5QURRUVEyQWdBZ0JpRUZJQWNoQkFzZ0FDQUZOd01BSUFBZ0JEY0RDQ0FJUVNCcUpBQUx1Z0VDQkg4QmZDTUFRUkJySWdNa0FBSkFBa0FDUUNBQUlBRkhCRUFRV1NJRktBSUFJUVlnQlVFQU5nSUFFR2thSXdCQkVHc2lCQ1FBSUFRZ0FDQURRUXhxUVFFUXZ3TWdCQ2tEQUNBRUtRTUlFTlFESVFjZ0JFRVFhaVFBQWtBZ0JTZ0NBQ0lBQkVBZ0F5Z0NEQ0FCUmcwQkRBTUxJQVVnQmpZQ0FDQURLQUlNSUFGSERRSU1CQXNnQUVIRUFFY05Bd3dDQ3lBQ1FRUTJBZ0FNQWd0RUFBQUFBQUFBQUFBaEJ3c2dBa0VFTmdJQUN5QURRUkJxSkFBZ0J3dTJBUUlFZndGOUl3QkJFR3NpQXlRQUFrQUNRQUpBSUFBZ0FVY0VRQkJaSWdVb0FnQWhCaUFGUVFBMkFnQVFhUm9qQUVFUWF5SUVKQUFnQkNBQUlBTkJER3BCQUJDL0F5QUVLUU1BSUFRcEF3Z1EvQVFoQnlBRVFSQnFKQUFDUUNBRktBSUFJZ0FFUUNBREtBSU1JQUZHRFFFTUF3c2dCU0FHTmdJQUlBTW9BZ3dnQVVjTkFnd0VDeUFBUWNRQVJ3MEREQUlMSUFKQkJEWUNBQXdDQzBNQUFBQUFJUWNMSUFKQkJEWUNBQXNnQTBFUWFpUUFJQWNMdlFFQ0JIOEJmaU1BUVJCcklnUWtBQUorQWtBQ1FDQUFJQUZIQkVBQ1FBSkFJQUF0QUFBaUJrRXRSdzBBSUFCQkFXb2lBQ0FCUncwQURBRUxFRmtpQlNnQ0FDRUhJQVZCQURZQ0FCQnBHaUFBSUFSQkRHb2dBeENTQkNFSUFrQWdCU2dDQUNJQUJFQWdCQ2dDRENBQlJ3MEJJQUJCeEFCR0RRUU1CUXNnQlNBSE5nSUFJQVFvQWd3Z0FVWU5CQXNMQ3lBQ1FRUTJBZ0JDQUF3Q0N5QUNRUVEyQWdCQ2Z3d0JDMElBSUFoOUlBZ2dCa0V0UmhzTElBUkJFR29rQUF2T0FRSUVmd0YrSXdCQkVHc2lCQ1FBQW44Q1FBSkFBa0FnQUNBQlJ3UkFBa0FDUUNBQUxRQUFJZ1pCTFVjTkFDQUFRUUZxSWdBZ0FVY05BQXdCQ3hCWklnVW9BZ0FoQnlBRlFRQTJBZ0FRYVJvZ0FDQUVRUXhxSUFNUWtnUWhDQUpBSUFVb0FnQWlBQVJBSUFRb0Fnd2dBVWNOQVNBQVFjUUFSZzBGREFRTElBVWdCellDQUNBRUtBSU1JQUZHRFFNTEN3c2dBa0VFTmdJQVFRQU1Bd3NnQ0VMLy8vLy9EMWdOQVFzZ0FrRUVOZ0lBUVg4TUFRdEJBQ0FJcHlJQWF5QUFJQVpCTFVZYkN5QUVRUkJxSkFBTGpnTUJBWDhqQUVHQUFtc2lBQ1FBSUFBZ0FqWUMrQUVnQUNBQk5nTDhBU0FERU1RQklRWWdBRUhFQVdvZ0F5QUFRZmNCYWhDckFpQUFRYmdCYWhCYUlnRWdBUkJmRUZJZ0FDQUJRUUFRVVNJQ05nSzBBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlBMEFDUUNBQVFmd0JhaUFBUWZnQmFoQmhEUUFnQUNnQ3RBRWdBUkJMSUFKcVJnUkFJQUVRU3lFRElBRWdBUkJMUVFGMEVGSWdBU0FCRUY4UVVpQUFJQU1nQVVFQUVGRWlBbW8yQXJRQkN5QUFRZndCYWlJREVIb2dCaUFDSUFCQnRBRnFJQUJCQ0dvZ0FDd0E5d0VnQUVIRUFXb2dBRUVRYWlBQVFReHFRZENJQkJDTkFnMEFJQU1RZ1FFYURBRUxDd0pBSUFCQnhBRnFFRXRGRFFBZ0FDZ0NEQ0lESUFCQkVHcHJRWjhCU2cwQUlBQWdBMEVFYWpZQ0RDQURJQUFvQWdnMkFnQUxJQVVnQWlBQUtBSzBBU0FFSUFZUXJnUTJBZ0FnQUVIRUFXb2dBRUVRYWlBQUtBSU1JQVFRaWdFZ0FFSDhBV29nQUVINEFXb1FZUVJBSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dBQ2dDL0FFZ0FSQk1HaUFBUWNRQmFoQk1HaUFBUVlBQ2FpUUFDOU1CQWdSL0FYNGpBRUVRYXlJRUpBQUNmd0pBQWtBQ1FDQUFJQUZIQkVBQ1FBSkFJQUF0QUFBaUJrRXRSdzBBSUFCQkFXb2lBQ0FCUncwQURBRUxFRmtpQlNnQ0FDRUhJQVZCQURZQ0FCQnBHaUFBSUFSQkRHb2dBeENTQkNFSUFrQWdCU2dDQUNJQUJFQWdCQ2dDRENBQlJ3MEJJQUJCeEFCR0RRVU1CQXNnQlNBSE5nSUFJQVFvQWd3Z0FVWU5Bd3NMQ3lBQ1FRUTJBZ0JCQUF3REN5QUlRdi8vQTFnTkFRc2dBa0VFTmdJQVFmLy9Bd3dCQzBFQUlBaW5JZ0JySUFBZ0JrRXRSaHNMSUFSQkVHb2tBRUgvL3dOeEM3RUJBZ0YrQTM4akFFRVFheUlGSkFBQ1FBSkFJQUFnQVVjRVFCQlpJZ1lvQWdBaEJ5QUdRUUEyQWdBUWFSb2dBQ0FGUVF4cUlBTVF5QVloQkFKQUlBWW9BZ0FpQUFSQUlBVW9BZ3dnQVVjTkFTQUFRY1FBUmcwRERBUUxJQVlnQnpZQ0FDQUZLQUlNSUFGR0RRTUxDeUFDUVFRMkFnQkNBQ0VFREFFTElBSkJCRFlDQUNBRVFnQlZCRUJDLy8vLy8vLy8vLy8vQUNFRURBRUxRb0NBZ0lDQWdJQ0FnSDhoQkFzZ0JVRVFhaVFBSUFRTHVnRUNBMzhCZmlNQVFSQnJJZ1FrQUFKL0FrQUNRQ0FBSUFGSEJFQVFXU0lGS0FJQUlRWWdCVUVBTmdJQUVHa2FJQUFnQkVFTWFpQURFTWdHSVFjQ1FDQUZLQUlBSWdBRVFDQUVLQUlNSUFGSERRRWdBRUhFQUVZTkJBd0RDeUFGSUFZMkFnQWdCQ2dDRENBQlJnMENDd3NnQWtFRU5nSUFRUUFNQWdzZ0IwS0FnSUNBZUZNZ0IwTC8vLy8vQjFWeURRQWdCNmNNQVFzZ0FrRUVOZ0lBUWYvLy8vOEhJQWRDQUZVTkFCcEJnSUNBZ0hnTElBUkJFR29rQUFzS0FDQUJJQUJyUVF4dEN5a0JBWDhnQUNnQ0JDRUNBMEFnQVNBQ1JrVUVRQ0FDUVF4ckVGWWhBZ3dCQ3dzZ0FDQUJOZ0lFQ3h3QkFYOGdBRUVPVFFSL0lBQkJBblJCdklrQmFpZ0NBQVZCQUFzTHNBRUJBMzhDUUNBQklBSVEwd01oQkNNQVFSQnJJZ01rQUNBRVFmZi8vLzhEVFFSQUFrQWdCQkNsQXdSQUlBQWdCQkNiQVNBQUlRVU1BUXNnQTBFSWFpQUVFS01DUVFGcUVLSUNJQU1vQWd3YUlBQWdBeWdDQ0NJRkVMRUJJQUFnQXlnQ0RCQ3dBU0FBSUFRUWl3RUxBMEFnQVNBQ1J3UkFJQVVnQVJDb0FTQUZRUVJxSVFVZ0FVRUVhaUVCREFFTEN5QURRUUEyQWdRZ0JTQURRUVJxRUtnQklBTkJFR29rQUF3QkN4Q1RBUUFMQ3k4QkFuOGpBeUlDS0FKZ0lRRWdBQVJBSUFKQitPVUVJQUFnQUVGL1JoczJBbUFMUVg4Z0FTQUJRZmpsQkVZYkN5b0JBWDhnQUNnQ0JDRUNBMEFnQVNBQ1JrVUVRQ0FDUVF4ckVLRUVJUUlNQVFzTElBQWdBVFlDQkF1a0NBRUZmeUFCS0FJQUlRUUNRQUpBQWtBQ1FBSkFBa0FDZndKQUFrQUNRQUpBSUFORkRRQWdBeWdDQUNJR1JRMEFJQUJGQkVBZ0FpRUREQVFMSUFOQkFEWUNBQ0FDSVFNTUFRc0NRQ01ES0FKZ0tBSUFSUVJBSUFCRkRRRWdBa1VOQ3lBQ0lRWURRQ0FFTEFBQUlnTUVRQ0FBSUFOQi83OERjVFlDQUNBQVFRUnFJUUFnQkVFQmFpRUVJQVpCQVdzaUJnMEJEQTBMQ3lBQVFRQTJBZ0FnQVVFQU5nSUFJQUlnQm1zUEN5QUNJUU1nQUVVTkFrRUJJUVVNQVFzZ0JCQ0RBUThMQTBBQ1FBSkFBa0FDZndKQUlBVkZCRUFnQkMwQUFDSUZRUU4ySWdkQkVHc2dCeUFHUVJwMWFuSkJCMHNOQ2lBRVFRRnFJUWNnQlVHQUFXc2dCa0VHZEhJaUJVRUFTQTBCSUFjTUFnc2dBMFVORGdOQUlBUXRBQUFpQlVFQmEwSCtBRXNFUUNBRklRWU1CZ3NnQkVFRGNTQURRUVZKY2tVRVFBSkFBMEFnQkNnQ0FDSUdRWUdDaEFocklBWnlRWUNCZ29SNGNRMEJJQUFnQmtIL0FYRTJBZ0FnQUNBRUxRQUJOZ0lFSUFBZ0JDMEFBallDQ0NBQUlBUXRBQU0yQWd3Z0FFRVFhaUVBSUFSQkJHb2hCQ0FEUVFScklnTkJCRXNOQUFzZ0JDMEFBQ0VHQ3lBR1FmOEJjU0lGUVFGclFmNEFTdzBHQ3lBQUlBVTJBZ0FnQUVFRWFpRUFJQVJCQVdvaEJDQURRUUZySWdNTkFBc01EZ3NnQnkwQUFFR0FBV3NpQjBFL1N3MEJJQWNnQlVFR2RDSUljaUVGSUFSQkFtb2lCeUFJUVFCT0RRQWFJQWN0QUFCQmdBRnJJZ2RCUDBzTkFTQUhJQVZCQm5SeUlRVWdCRUVEYWdzaEJDQUFJQVUyQWdBZ0EwRUJheUVESUFCQkJHb2hBQXdCQ3hCWlFSazJBZ0FnQkVFQmF5RUVEQWtMUVFFaEJRd0JDeUFGUWNJQmF5SUZRVEpMRFFVZ0JFRUJhaUVFSUFWQkFuUkJnT0FEYWlnQ0FDRUdRUUFoQlF3QUN3QUxRUUVNQVF0QkFBc2hCUU5BSUFWRkJFQWdCQzBBQUVFRGRpSUZRUkJySUFaQkduVWdCV3B5UVFkTERRSUNmeUFFUVFGcUlnVWdCa0dBZ0lBUWNVVU5BQm9nQlMwQUFFSEFBWEZCZ0FGSEJFQWdCRUVCYXlFRURBWUxJQVJCQW1vaUJTQUdRWUNBSUhGRkRRQWFJQVV0QUFCQndBRnhRWUFCUndSQUlBUkJBV3NoQkF3R0N5QUVRUU5xQ3lFRUlBTkJBV3NoQTBFQklRVU1BUXNEUUFKQUlBUkJBM0VnQkMwQUFDSUdRUUZyUWY0QVMzSU5BQ0FFS0FJQUlnWkJnWUtFQ0dzZ0JuSkJnSUdDaEhoeERRQURRQ0FEUVFScklRTWdCQ2dDQkNFR0lBUkJCR29oQkNBR0lBWkJnWUtFQ0d0eVFZQ0Jnb1I0Y1VVTkFBc0xJQVpCL3dGeElnVkJBV3RCL2dCTkJFQWdBMEVCYXlFRElBUkJBV29oQkF3QkN3c2dCVUhDQVdzaUJVRXlTdzBDSUFSQkFXb2hCQ0FGUVFKMFFZRGdBMm9vQWdBaEJrRUFJUVVNQUFzQUN5QUVRUUZySVFRZ0JnMEJJQVF0QUFBaEJnc2dCa0gvQVhFTkFDQUFCRUFnQUVFQU5nSUFJQUZCQURZQ0FBc2dBaUFEYXc4TEVGbEJHVFlDQUNBQVJRMEJDeUFCSUFRMkFnQUxRWDhQQ3lBQklBUTJBZ0FnQWdzT0FDQUFFTDhFQkVBZ0FCQklDd3NKQUNBQUlBRVEvZ0lMTEFBZ0FDZ0NBRVVFUUNBQVFYOFFvd1VQQ3lBQUtBSU1CRUFnQUVFSWFpSUFFTkVCSUFBUWdRTUxRUUFMQ2dBZ0FFRXdhMEVLU1FzWEFDQUFRVEJyUVFwSklBQkJJSEpCNFFCclFRWkpjZ3NuQUNBQVFRQkhJQUJCcU93RFIzRWdBRUhBN0FOSGNTQUFRYlNPQlVkeElBQkJ6STRGUjNFTDZnSUJBMzhDUUNBQkxRQUFEUUJCMi9VQkVJY0RJZ0VFUUNBQkxRQUFEUUVMSUFCQkRHeEI4TzhEYWhDSEF5SUJCRUFnQVMwQUFBMEJDMEdxOXdFUWh3TWlBUVJBSUFFdEFBQU5BUXRCMVlJQ0lRRUxBa0FEUUNBQklBSnFMUUFBSWdSRklBUkJMMFp5UlFSQVFSY2hCQ0FDUVFGcUlnSkJGMGNOQVF3Q0N3c2dBaUVFQzBIVmdnSWhBd0pBQWtBQ1FBSkFBa0FnQVMwQUFDSUNRUzVHRFFBZ0FTQUVhaTBBQUEwQUlBRWhBeUFDUWNNQVJ3MEJDeUFETFFBQlJRMEJDeUFEUWRXQ0FoQzNBa1VOQUNBRFFmUHhBUkMzQWcwQkN5QUFSUVJBUVlUc0F5RUNJQU10QUFGQkxrWU5BZ3RCQUE4TFFiQ09CU2dDQUNJQ0JFQURRQ0FESUFKQkNHb1F0d0pGRFFJZ0FpZ0NJQ0lDRFFBTEMwRWtFRTBpQWdSQUlBSkJoT3dES1FJQU53SUFJQUpCQ0dvaUFTQURJQVFRYXhvZ0FTQUVha0VBT2dBQUlBSkJzSTRGS0FJQU5nSWdRYkNPQlNBQ05nSUFDeUFDUVlUc0F5QUFJQUp5R3lFQ0N5QUNDL2NCQVFkL0l3QkJFR3NpQXlRQUl3TWlCU2dDWUNFSElBRW9Ba3hCQUVnRWYwRUFCU0FCRUlVQkMwVWdBU2dDU0VFQVRBUkFJQUVReFFNTElBVWdBU2dDaUFFMkFtQkJmeUVDQWtBZ0FTZ0NCQVIvUVFBRklBRVF2Z0lhSUFFb0FnUkZDeUFBUVg5R2NnMEFJQU5CREdvZ0FCRDBBaUlFUVFCSURRQWdBU2dDQkNJR0lBRW9BaXdnQkdwQkNHdEpEUUFDUUNBQVFmOEFUUVJBSUFFZ0JrRUJheUlDTmdJRUlBSWdBRG9BQUF3QkN5QUJJQVlnQkdzaUFqWUNCQ0FDSUFOQkRHb2dCQkJyR2dzZ0FTQUJLQUlBUVc5eE5nSUFJQUFoQWd0RkJFQWdBUkNFQVFzZ0JTQUhOZ0pnSUFOQkVHb2tBQ0FDUVg5SEMvTURBZ1YvQVg0akFFRWdheUlESkFBQ1FDQUFMUUEwUVFGR0JFQWdBQ2dDTUNFQ0lBRkZEUUVnQUVFQU9nQTBJQUJCZnpZQ01Bd0JDd0pBSUFBdEFEVkJBVVlFUUFKL0lBQW9BaUFpQWlnQ1RFRUFTQVJBSUFJUTBRUU1BUXNnQWhDRkFTQUNFTkVFSVFVRVFDQUNFSVFCQ3lBRkN5SUNRWDlIQkVBZ0F5QUNOZ0lZQ3lBQ1FYOUdEUUVnQXlnQ0dDRUNBa0FnQVVVRVFDQURLQUlZR2lBQ0lBQW9BaUFRd1FSRkRRTU1BUXNnQUNBQ05nSXdDeUFES0FJWUlRSU1BZ3NnQTBFQk5nSVlJQU5CR0dvZ0FFRXNhaERHQkNnQ0FDSUVRUUFnQkVFQVNoc2hCUU5BSUFJZ0JVY0VRQ0FBS0FJZ0VLd0NJZ1pCZjBZTkFpQURRUmhxSUFKcUlBWTZBQUFnQWtFQmFpRUNEQUVMQ3lBRFFSaHFJUUlDUUFOQUFrQWdBQ2dDS0NJRktRSUFJUWNDUUNBQUtBSWtJQVVnQTBFWWFpSUZJQVFnQldvaUJTQURRUkJxSUFOQkZHb2dBaUFEUVF4cUVPQUVRUUZyRGdNQUJBRURDeUFBS0FJb0lBYzNBZ0FnQkVFSVJnMERJQUFvQWlBUXJBSWlCa0YvUmcwRElBVWdCam9BQUNBRVFRRnFJUVFNQVFzTElBTWdBeXdBR0RZQ0ZBc0NRQ0FCUlFSQUEwQWdCRUVBVEEwQ0lBUkJBV3NpQkNBRFFSaHFhaXdBQUNBQUtBSWdFSkFDUVg5SERRQU1Bd3NBQ3lBQUlBTW9BaFEyQWpBTElBTW9BaFFoQWd3QkMwRi9JUUlMSUFOQklHb2tBQ0FDQ3drQUlBQVF6QU1RU0F1RkFRRUZmeU1BUVJCcklnRWtBQ0FCUVJCcUlRUUNRQU5BSUFBb0FpUWlBaUFBS0FJb0lBRkJDR29pQXlBRUlBRkJCR29nQWlnQ0FDZ0NGQkVLQUNFRlFYOGhBaUFEUVFFZ0FTZ0NCQ0FEYXlJRElBQW9BaUFRdHdFZ0EwY05BUUpBSUFWQkFXc09BZ0VDQUFzTFFYOUJBQ0FBS0FJZ0VMOENHeUVDQ3lBQlFSQnFKQUFnQWdzTkFDQUFRY0RyQXpZQ0FDQUFDeVFCQW44akFFRVFheUlDSkFBZ0FDQUJFTjhFSVFNZ0FrRVFhaVFBSUFFZ0FDQURHd3NNQUNBQUlBRVFrQUpCZjBjTDJnTUNCWDhCZmlNQVFTQnJJZ0lrQUFKQUlBQXRBRFJCQVVZRVFDQUFLQUl3SVFNZ0FVVU5BU0FBUVFBNkFEUWdBRUYvTmdJd0RBRUxBa0FnQUMwQU5VRUJSZ1JBSUFBb0FpQVFyQUlpQTBGL1J3UkFJQUlnQXpvQUdBc2dBMEYvUmcwQklBSXNBQmdRdFFFaEF3SkFJQUZGQkVBZ0Fpd0FHQm9nQXlBQUtBSWdFTWNFUlEwRERBRUxJQUFnQXpZQ01Bc2dBaXdBR0JDMUFTRUREQUlMSUFKQkFUWUNHQ0FDUVJocUlBQkJMR29ReGdRb0FnQWlCRUVBSUFSQkFFb2JJUVVEUUNBRElBVkhCRUFnQUNnQ0lCQ3NBaUlHUVg5R0RRSWdBa0VZYWlBRGFpQUdPZ0FBSUFOQkFXb2hBd3dCQ3dzZ0FrRVlhaUVEQWtBRFFBSkFJQUFvQWlnaUJTa0NBQ0VIQWtBZ0FDZ0NKQ0FGSUFKQkdHb2lCU0FFSUFWcUlnVWdBa0VRYWlBQ1FSZHFJQU1nQWtFTWFoRGdCRUVCYXc0REFBUUJBd3NnQUNnQ0tDQUhOd0lBSUFSQkNFWU5BeUFBS0FJZ0VLd0NJZ1pCZjBZTkF5QUZJQVk2QUFBZ0JFRUJhaUVFREFFTEN5QUNJQUl0QUJnNkFCY0xBa0FnQVVVRVFBTkFJQVJCQUV3TkFpQUVRUUZySWdRZ0FrRVlhbW9zQUFBUXRRRWdBQ2dDSUJDUUFrRi9SdzBBREFNTEFBc2dBQ0FDTEFBWEVMVUJOZ0l3Q3lBQ0xBQVhFTFVCSVFNTUFRdEJmeUVEQ3lBQ1FTQnFKQUFnQXdzSkFDQUFFTklERUVnTEVnQWdBQkRGQkNJQVFhenBBellDQUNBQUN4RUFJQUFnQUNnQ0JFR0F3QUJ5TmdJRUN4SUFJQUFReFFRaUFFR1k1d00yQWdBZ0FBdFlBUUovSXdCQkVHc2lBeVFBSUFBUTV3UWlBQ0FCTmdJZ0lBQkJrTzhETmdJQUlBTkJER29pQVNBQUVPZ0NJQUVRd2dNaEJDQUJFRlFnQUNBQ05nSW9JQUFnQkRZQ0pDQUFJQVFRbEFJNkFDd2dBMEVRYWlRQUN4TUFJQUFnQVRZQ1ZDQUFRVHhxSUFFUXdRTUxXQUVDZnlNQVFSQnJJZ01rQUNBQUVQUUVJZ0FnQVRZQ0lDQUFRY1R0QXpZQ0FDQURRUXhxSWdFZ0FCRG9BaUFCRU1jRElRUWdBUkJVSUFBZ0FqWUNLQ0FBSUFRMkFpUWdBQ0FFRUpRQ09nQXNJQU5CRUdva0FBdjJBUUVGZnlNQVFSQnJJZ01rQUNNRElnUW9BbUFoQlNBQktBSklRUUJNQkVBZ0FSREZBd3NnQkNBQktBS0lBVFlDWUFKQUFrQUNRQ0FBUWY4QVRRUkFBa0FnQUNBQktBSlFSZzBBSUFFb0FoUWlBaUFCS0FJUVJnMEFJQUVnQWtFQmFqWUNGQ0FDSUFBNkFBQU1CQXNnQVNBQUVJc0RJUUFNQVFzZ0FTZ0NFQ0FCS0FJVUlnSkJCR3BMQkVBZ0FpQUFFUE1DSWdKQkFFZ05BaUFCSUFFb0FoUWdBbW8yQWhRTUFRc2dBMEVNYWlJR0lBQVE4d0lpQWtFQVNBMEJJQVlnQWlBQkVJZ0RJQUpKRFFFTElBQkJmMGNOQVFzZ0FTQUJLQUlBUVNCeU5nSUFRWDhoQUFzZ0JDQUZOZ0pnSUFOQkVHb2tBQ0FBQzhzQ0FRWi9Jd01pQkNnQ1lDRUZJQUFvQWtoQkFFd0VRQ0FBRU1VREN5QUVJQUFvQW9nQk5nSmdJd0JCSUdzaUFpUUFBa0FDUUFKQUlBQW9BZ1FpQVNBQUtBSUlJZ05HRFFBZ0FrRWNhaUFCSUFNZ0FXc1EwZ1FpQVVGL1JnMEFJQUFnQUNnQ0JFRUJJQUVnQVVFQlRSdHFOZ0lFREFFTElBSkNBRGNERUVFQUlRRURRQ0FCSVFNQ1FDQUFLQUlFSWdFZ0FDZ0NDRWNFUUNBQUlBRkJBV28yQWdRZ0FpQUJMUUFBT2dBUERBRUxJQUlnQUJDOUFpSUJPZ0FQSUFGQkFFNE5BRUYvSVFFZ0EwRUJjVVVOQXlBQUlBQW9BZ0JCSUhJMkFnQVFXVUVaTmdJQURBTUxRUUVoQVNBQ1FSeHFJQUpCRDJwQkFTQUNRUkJxRUxZQ0lnWkJma1lOQUF0QmZ5RUJJQVpCZjBjTkFDQURRUUZ4UlEwQklBQWdBQ2dDQUVFZ2NqWUNBQ0FDTFFBUElBQVFrQUlhREFFTElBSW9BaHdoQVFzZ0FrRWdhaVFBSUFRZ0JUWUNZQ0FCQzdjQ0FRSi9JQUZGQkVCQkFBOExBbjhDUUNBQ1JRMEFJQUV0QUFBaUE4QWlCRUVBVGdSQUlBQUVRQ0FBSUFNMkFnQUxJQVJCQUVjUEN5TURLQUpnS0FJQVJRUkFRUUVnQUVVTkFob2dBQ0FFUWYrL0EzRTJBZ0JCQVE4TElBTkJ3Z0ZySWdOQk1rc05BQ0FEUVFKMFFZRGdBMm9vQWdBaUF5QUNRUVpzUVFacmRFRUFTQ0FDUVFOTmNRMEFJQUV0QUFFaUFrRURkaUlFUVJCcklBUWdBMEVhZFdweVFRZExEUUFnQWtHQUFXc2dBMEVHZEhJaUFrRUFUZ1JBUVFJZ0FFVU5BaG9nQUNBQ05nSUFRUUlQQ3lBQkxRQUNRWUFCYXlJRFFUOUxEUUFnQXlBQ1FRWjBJZ1J5SVFJZ0JFRUFUZ1JBUVFNZ0FFVU5BaG9nQUNBQ05nSUFRUU1QQ3lBQkxRQURRWUFCYXlJQlFUOUxEUUJCQkNBQVJRMEJHaUFBSUFFZ0FrRUdkSEkyQWdCQkJBOExFRmxCR1RZQ0FFRi9Dd3NzQVFGL0lBQW9BZ0FpQVFSQUlBRVE1Z1JCZnhDcEFVVUVRQ0FBS0FJQVJROExJQUJCQURZQ0FBdEJBUXNzQVFGL0lBQW9BZ0FpQVFSQUlBRVE3QVJCZnhDcEFVVUVRQ0FBS0FJQVJROExJQUJCQURZQ0FBdEJBUXZVQlFFSWZ5QUJFTmtFQkVCQkJDQUJJQUZCQkUwYklRTkJBU0FBSUFCQkFVMGJJUVlEUUFKQVFRQWhBU0FHSUFNZ0JtcEJBV3RCQUNBRGEzRWlBQ0FBSUFaSkd5RUNJd0JCRUdzaUJ5UUFBa0FnQTBFRGNRMEFJQUlnQTNBTkFBSi9Ba0JCTUFKL0lBTkJDRVlFUUNBQ0VFME1BUXRCSENFQUlBTkJBM0VnQTBFRVNYSU5BU0FEUVFKMklnRWdBVUVCYTNFTkFVRXdRVUFnQTJzZ0Fra05BaG9DZjBFUUlRRUNRRUVRUVJBZ0F5QURRUkJOR3lJQUlBQkJFRTBiSWdRZ0JFRUJhM0ZGQkVBZ0JDRUFEQUVMQTBBZ0FTSUFRUUYwSVFFZ0FDQUVTUTBBQ3d0QlFDQUFheUFDVFFSQUVGbEJNRFlDQUVFQURBRUxRUUJCRUNBQ1FRdHFRWGh4SUFKQkMwa2JJZ1FnQUdwQkRHb1FUU0lDUlEwQUdrRUFJUUVDUUVIRS9RUXRBQUJCQW5FRVFFSEkvUVFRY0EwQkN5QUNRUWhySVFFQ1FDQUFRUUZySUFKeFJRUkFJQUVoQUF3QkN5QUNRUVJySWdnb0FnQWlDVUY0Y1NBQUlBSnFRUUZyUVFBZ0FHdHhRUWhySWdJZ0FFRUFJQUlnQVd0QkQwMGJhaUlBSUFGcklnSnJJUVVnQ1VFRGNVVUVRQ0FCS0FJQUlRRWdBQ0FGTmdJRUlBQWdBU0FDYWpZQ0FBd0JDeUFBSUFVZ0FDZ0NCRUVCY1hKQkFuSTJBZ1FnQUNBRmFpSUZJQVVvQWdSQkFYSTJBZ1FnQ0NBQ0lBZ29BZ0JCQVhGeVFRSnlOZ0lBSUFFZ0Ftb2lCU0FGS0FJRVFRRnlOZ0lFSUFFZ0FoRHhBZ3NDUUNBQUtBSUVJZ0ZCQTNGRkRRQWdBVUY0Y1NJQ0lBUkJFR3BORFFBZ0FDQUVJQUZCQVhGeVFRSnlOZ0lFSUFBZ0JHb2lBU0FDSUFScklnUkJBM0kyQWdRZ0FDQUNhaUlDSUFJb0FnUkJBWEkyQWdRZ0FTQUVFUEVDQ3lBQVFRaHFJUUZCeFAwRUxRQUFRUUp4UlEwQVFjajlCQkJzR2dzZ0FRc0xJZ0JGRFFFYUlBY2dBRFlDREVFQUlRQUxJQUFMSVFCQkFDQUhLQUlNSUFBYklRRUxJQWRCRUdva0FDQUJJZ0FOQUVIMG5nWCtFQUlBSWdGRkRRQWdBUkVMQUF3QkN3c2dBRVVFUUJDVEFRc2dBQThMSUFBUVpnc3FBUUYvSUFBb0FnUWhBZ05BSUFFZ0FrWkZCRUFnQWtFZ2F4RE9BaUVDREFFTEN5QUFJQUUyQWdRTEJ3QWdBU0FBYXdzSkFDQUFJQUVRMXdRTEJ3QWdBRUVJU3dzVEFDQUJFTmtFQkVBZ0FCQklEd3NnQUJCSUN4UUFJQUlFUUNBQUlBRWdBa0VDZFB3S0FBQUxDMFVCQVg4akFFRVFheUlFSkFBZ0JDQUNOZ0lNSUFNZ0FTQUNJQUZySWdGQkFuVVEyd1FnQkNBQklBTnFOZ0lJSUFBZ0JFRU1haUFFUVFocUVMSUJJQVJCRUdva0FBc1JBQ0FDQkVBZ0FDQUJJQUw4Q2dBQUN3dENBUUYvSXdCQkVHc2lCQ1FBSUFRZ0FqWUNEQ0FESUFFZ0FpQUJheUlCRU4wRUlBUWdBU0FEYWpZQ0NDQUFJQVJCREdvZ0JFRUlhaEN5QVNBRVFSQnFKQUFMRFFBZ0FDZ0NBQ0FCS0FJQVNBc2RBQ0FBSUFFZ0FpQURJQVFnQlNBR0lBY2dBQ2dDQUNnQ0VCRU9BQXNrQVFKL0l3QkJFR3NpQWlRQUlBRWdBQkN6QWlFRElBSkJFR29rQUNBQklBQWdBeHNMRGdCQkFDQUFJQUJCZnhDcEFSc0xzQUVCQTM4Q1FDQUJJQUlRMkFRaEJDTUFRUkJySWdNa0FDQUVRZmYvLy84SFRRUkFBa0FnQkJEaEFnUkFJQUFnQkJDYkFTQUFJUVVNQVFzZ0EwRUlhaUFFRUpNQ1FRRnFFSklDSUFNb0Fnd2FJQUFnQXlnQ0NDSUZFTEVCSUFBZ0F5Z0NEQkN3QVNBQUlBUVFpd0VMQTBBZ0FTQUNSd1JBSUFVZ0FSQ1VBU0FGUVFGcUlRVWdBVUVCYWlFQkRBRUxDeUFEUVFBNkFBY2dCU0FEUVFkcUVKUUJJQU5CRUdva0FBd0JDeENUQVFBTEMxY0JBbjhDUUNBQUtBSUFJZ0pGRFFBQ2Z5QUNLQUlZSWdNZ0FpZ0NIRVlFUUNBQ0lBRWdBaWdDQUNnQ05CRURBQXdCQ3lBQ0lBTkJCR28yQWhnZ0F5QUJOZ0lBSUFFTFFYOFFxUUZGRFFBZ0FFRUFOZ0lBQ3dzeEFRRi9JQUFvQWd3aUFTQUFLQUlRUmdSQUlBQWdBQ2dDQUNnQ0tCRUFBQThMSUFBZ0FVRUVhallDRENBQktBSUFDeWNCQVg4Z0FDZ0NEQ0lCSUFBb0FoQkdCRUFnQUNBQUtBSUFLQUlrRVFBQUR3c2dBU2dDQUFzTEFDQUFRZmpsQXhDNkJnc2FBQ0FBSUFFZ0FTZ0NBRUVNYXlnQ0FHb29BaGcyQWdBZ0FBc1RBQ0FBSUFBb0FnQkJER3NvQWdCcUVNOERDeE1BSUFBZ0FDZ0NBRUVNYXlnQ0FHb1E2d0lMTkFFQmZ5QUFLQUlNSWdFZ0FDZ0NFRVlFUUNBQUlBQW9BZ0FvQWlnUkFBQVBDeUFBSUFGQkFXbzJBZ3dnQVN3QUFCQzFBUXNxQVFGL0lBQW9BZ3dpQVNBQUtBSVFSZ1JBSUFBZ0FDZ0NBQ2dDSkJFQUFBOExJQUVzQUFBUXRRRUxFd0FnQUNBQUtBSUFRUXhyS0FJQWFoRFJBd3NaQUNBQVFkYXExYW9CVHdSQUVPRUJBQXNnQUVFTWJCQm1DeE1BSUFBZ0FDZ0NBRUVNYXlnQ0FHb1E3Z0lMQndBZ0FCRHhCQXNRQUNBQVFuODNBd2dnQUVJQU53TUFDd2NBSUFBUThRUUxCQUFnQUFzTEFDQUFRZGprQXhDNkJnc01BQ0FBRUpFQ0dpQUFFRWdMQndBZ0FCQ1JBZ3RCQVFGL0lBRkIxcXJWcWdGUEJFQVFtQUlBQzBIVnF0V3FBU0FBS0FJSUlBQW9BZ0JyUVF4dElnQkJBWFFpQWlBQklBRWdBa2tiSUFCQnF0V3ExUUJQR3dzS0FDQUJJQUJyUVFKMUN3UUFJQUVMaEFFQkEzOGpBRUVRYXlJRkpBQWdCVUVBT2dBT0l3QkJFR3NpQXlRQUlBQWdBUkRUQXlFQkEwQWdBUVJBSUFNZ0FEWUNEQ0FESUFNb0Fnd2dBVUVCZGlJRVFRSjBhallDRENBQklBUkJmM05xSUFRZ0F5Z0NEQ0FDRUxNQ0lnUWJJUUVnQXlnQ0RFRUVhaUFBSUFRYklRQU1BUXNMSUFOQkVHb2tBQ0FGUVJCcUpBQWdBQXUyREFFSGZ5TUFRUkJySWdRa0FDQUVJQUEyQWd3Q1FDQUFRZE1CVFFSQVFkRGhBMEdRNHdNZ0JFRU1haEQ2QkNnQ0FDRUFEQUVMSUFCQmZFOEVRQkIxQUFzZ0JDQUFJQUJCMGdGdUlnWkIwZ0ZzSWdOck5nSUlRWkRqQTBIUTVBTWdCRUVJYWhENkJFR1E0d05yUVFKMUlRVURRQ0FGUVFKMFFaRGpBMm9vQWdBZ0Eyb2hBRUVGSVFNQ1FBSkFBMEFnQXlJQlFTOUdEUUVnQUNBQlFRSjBRZERoQTJvb0FnQWlBbTRpQnlBQ1NRMEVJQUZCQVdvaEF5QUFJQUlnQjJ4SERRQUxJQUZCTDBrTkFRdEIwd0VoQXdOQUlBQWdBMjRpQVNBRFNRMERJQUFnQVNBRGJFWU5BU0FBSUFOQkNtb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkRHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkVHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkVtb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkZtb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkhHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkhtb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkpHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQktHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkttb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQkxtb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQk5Hb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQk9tb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQlBHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQndnQnFJZ0Z1SWdJZ0FVa05BeUFBSUFFZ0FteEdEUUVnQUNBRFFjWUFhaUlCYmlJQ0lBRkpEUU1nQUNBQklBSnNSZzBCSUFBZ0EwSElBR29pQVc0aUFpQUJTUTBESUFBZ0FTQUNiRVlOQVNBQUlBTkJ6Z0JxSWdGdUlnSWdBVWtOQXlBQUlBRWdBbXhHRFFFZ0FDQURRZElBYWlJQmJpSUNJQUZKRFFNZ0FDQUJJQUpzUmcwQklBQWdBMEhZQUdvaUFXNGlBaUFCU1EwRElBQWdBU0FDYkVZTkFTQUFJQU5CNEFCcUlnRnVJZ0lnQVVrTkF5QUFJQUVnQW14R0RRRWdBQ0FEUWVRQWFpSUJiaUlDSUFGSkRRTWdBQ0FCSUFKc1JnMEJJQUFnQTBIbUFHb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQjZnQnFJZ0Z1SWdJZ0FVa05BeUFBSUFFZ0FteEdEUUVnQUNBRFFld0FhaUlCYmlJQ0lBRkpEUU1nQUNBQklBSnNSZzBCSUFBZ0EwSHdBR29pQVc0aUFpQUJTUTBESUFBZ0FTQUNiRVlOQVNBQUlBTkIrQUJxSWdGdUlnSWdBVWtOQXlBQUlBRWdBbXhHRFFFZ0FDQURRZjRBYWlJQmJpSUNJQUZKRFFNZ0FDQUJJQUpzUmcwQklBQWdBMEdDQVdvaUFXNGlBaUFCU1EwRElBQWdBU0FDYkVZTkFTQUFJQU5CaUFGcUlnRnVJZ0lnQVVrTkF5QUFJQUVnQW14R0RRRWdBQ0FEUVlvQmFpSUJiaUlDSUFGSkRRTWdBQ0FCSUFKc1JnMEJJQUFnQTBHT0FXb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQmxBRnFJZ0Z1SWdJZ0FVa05BeUFBSUFFZ0FteEdEUUVnQUNBRFFaWUJhaUlCYmlJQ0lBRkpEUU1nQUNBQklBSnNSZzBCSUFBZ0EwR2NBV29pQVc0aUFpQUJTUTBESUFBZ0FTQUNiRVlOQVNBQUlBTkJvZ0ZxSWdGdUlnSWdBVWtOQXlBQUlBRWdBbXhHRFFFZ0FDQURRYVlCYWlJQmJpSUNJQUZKRFFNZ0FDQUJJQUpzUmcwQklBQWdBMEdvQVdvaUFXNGlBaUFCU1EwRElBQWdBU0FDYkVZTkFTQUFJQU5CckFGcUlnRnVJZ0lnQVVrTkF5QUFJQUVnQW14R0RRRWdBQ0FEUWJJQmFpSUJiaUlDSUFGSkRRTWdBQ0FCSUFKc1JnMEJJQUFnQTBHMEFXb2lBVzRpQWlBQlNRMERJQUFnQVNBQ2JFWU5BU0FBSUFOQnVnRnFJZ0Z1SWdJZ0FVa05BeUFBSUFFZ0FteEdEUUVnQUNBRFFiNEJhaUlCYmlJQ0lBRkpEUU1nQUNBQklBSnNSZzBCSUFBZ0EwSEFBV29pQVc0aUFpQUJTUTBESUFBZ0FTQUNiRVlOQVNBQUlBTkJ4QUZxSWdGdUlnSWdBVWtOQXlBQUlBRWdBbXhHRFFFZ0FDQURRY1lCYWlJQmJpSUNJQUZKRFFNZ0FDQUJJQUpzUmcwQklBQWdBMEhRQVdvaUFXNGlBaUFCU1EwRElBTkIwZ0ZxSVFNZ0FDQUJJQUpzUncwQUN3dEJBQ0FGUVFGcUlnQWdBRUV3UmlJQUd5RUZJQUFnQm1vaUJrSFNBV3doQXd3QUN3QUxJQVJCRUdva0FDQUFDOW9EQWdWL0FuNGpBRUVnYXlJRUpBQWdBVUwvLy8vLy8vOC9neUVIQWtBZ0FVSXdpRUwvL3dHRElnaW5JZ05CZ2Y4QWEwSDlBVTBFUUNBSFFobUlweUVDQWtBZ0FGQWdBVUwvLy84UGd5SUhRb0NBZ0FoVUlBZENnSUNBQ0ZFYlJRUkFJQUpCQVdvaEFnd0JDeUFBSUFkQ2dJQ0FDSVdFUWdCU0RRQWdBa0VCY1NBQ2FpRUNDMEVBSUFJZ0FrSC8vLzhEU3lJRkd5RUNRWUdCZjBHQWdYOGdCUnNnQTJvaEF3d0JDeUFBSUFlRVVDQUlRdi8vQVZKeVJRUkFJQWRDR1lpblFZQ0FnQUp5SVFKQi93RWhBd3dCQ3lBRFFmNkFBVXNFUUVIL0FTRUREQUVMUVlEL0FFR0Ivd0FnQ0ZBaUJSc2lCaUFEYXlJQ1FmQUFTZ1JBUVFBaEFrRUFJUU1NQVFzZ0JFRVFhaUFBSUFjZ0IwS0FnSUNBZ0lEQUFJUWdCUnNpQjBHQUFTQUNheENPQVNBRUlBQWdCeUFDRVBZQklBUXBBd2dpQUVJWmlLY2hBZ0pBSUFRcEF3QWdBeUFHUnlBRUtRTVFJQVFwQXhpRVFnQlNjYTJFSWdkUUlBQkMvLy8vRDRNaUFFS0FnSUFJVkNBQVFvQ0FnQWhSRzBVRVFDQUNRUUZxSVFJTUFRc2dCeUFBUW9DQWdBaUZoRUlBVWcwQUlBSkJBWEVnQW1vaEFnc2dBa0dBZ0lBRWN5QUNJQUpCLy8vL0Ewc2lBeHNoQWdzZ0JFRWdhaVFBSUFGQ0lJaW5RWUNBZ0lCNGNTQURRUmQwY2lBQ2NyNExHUUFnQUVITm1iUG1BRThFUUJEaEFRQUxJQUJCRkd3UVpnc1RBQ0FBUVFFZ0FTQUJRUUZOR3hEL0JCQWZDeUFCQVg4akFTSUNRU1JxS0FJQVJRUkFJQUlnQURZQ0pDTUJJQUUyQWlnTEM3NFBBZ1YvRDM0akFFSFFBbXNpQlNRQUlBUkMvLy8vLy8vL1A0TWhDaUFDUXYvLy8vLy8veitESVFzZ0FpQUVoVUtBZ0lDQWdJQ0FnSUIvZ3lFTUlBUkNNSWluUWYvL0FYRWhDQUpBQWtBZ0FrSXdpS2RCLy84QmNTSUpRZi8vQVd0QmdvQitUd1JBSUFoQi8vOEJhMEdCZ0g1TERRRUxJQUZRSUFKQy8vLy8vLy8vLy8vL0FJTWlEVUtBZ0lDQWdJREEvLzhBVkNBTlFvQ0FnSUNBZ01ELy93QlJHMFVFUUNBQ1FvQ0FnSUNBZ0NDRUlRd01BZ3NnQTFBZ0JFTC8vLy8vLy8vLy8vOEFneUlDUW9DQWdJQ0FnTUQvL3dCVUlBSkNnSUNBZ0lDQXdQLy9BRkViUlFSQUlBUkNnSUNBZ0lDQUlJUWhEQ0FESVFFTUFnc2dBU0FOUW9DQWdJQ0FnTUQvL3dDRmhGQUVRQ0FESUFKQ2dJQ0FnSUNBd1AvL0FJV0VVQVJBUWdBaEFVS0FnSUNBZ0lEZy8vOEFJUXdNQXdzZ0RFS0FnSUNBZ0lEQS8vOEFoQ0VNUWdBaEFRd0NDeUFESUFKQ2dJQ0FnSUNBd1AvL0FJV0VVQVJBUWdBaEFRd0NDeUFCSUEyRVVBUkFRb0NBZ0lDQWdPRC8vd0FnRENBQ0lBT0VVQnNoREVJQUlRRU1BZ3NnQWlBRGhGQUVRQ0FNUW9DQWdJQ0FnTUQvL3dDRUlReENBQ0VCREFJTElBMUMvLy8vLy8vL1AxZ0VRQ0FGUWNBQ2FpQUJJQXNnQVNBTElBdFFJZ1liZVNBR1FRWjByWHluSWdaQkQyc1FqZ0ZCRUNBR2F5RUdJQVVwQThnQ0lRc2dCU2tEd0FJaEFRc2dBa0wvLy8vLy8vOC9WZzBBSUFWQnNBSnFJQU1nQ2lBRElBb2dDbEFpQnh0NUlBZEJCblN0ZktjaUIwRVBheENPQVNBR0lBZHFRUkJySVFZZ0JTa0R1QUloQ2lBRktRT3dBaUVEQ3lBRlFhQUNhaUFLUW9DQWdJQ0FnTUFBaENJU1FnK0dJQU5DTVlpRUlnSkNBRUtBZ0lDQXNPYThndlVBSUFKOUlnUkNBQkNHQVNBRlFaQUNha0lBSUFVcEE2Z0NmVUlBSUFSQ0FCQ0dBU0FGUVlBQ2FpQUZLUU9ZQWtJQmhpQUZLUU9RQWtJL2lJUWlCRUlBSUFKQ0FCQ0dBU0FGUWZBQmFpQUVRZ0JDQUNBRktRT0lBbjFDQUJDR0FTQUZRZUFCYWlBRktRUDRBVUlCaGlBRktRUHdBVUkvaUlRaUJFSUFJQUpDQUJDR0FTQUZRZEFCYWlBRVFnQkNBQ0FGS1FQb0FYMUNBQkNHQVNBRlFjQUJhaUFGS1FQWUFVSUJoaUFGS1FQUUFVSS9pSVFpQkVJQUlBSkNBQkNHQVNBRlFiQUJhaUFFUWdCQ0FDQUZLUVBJQVgxQ0FCQ0dBU0FGUWFBQmFpQUNRZ0FnQlNrRHVBRkNBWVlnQlNrRHNBRkNQNGlFUWdGOUlnSkNBQkNHQVNBRlFaQUJhaUFEUWcrR1FnQWdBa0lBRUlZQklBVkI4QUJxSUFKQ0FFSUFJQVVwQTZnQklBVXBBNkFCSWcwZ0JTa0RtQUY4SWdRZ0RWU3RmQ0FFUWdGV3JYeDlRZ0FRaGdFZ0JVR0FBV3BDQVNBRWZVSUFJQUpDQUJDR0FTQUdJQWtnQ0d0cUlRWUNmeUFGS1FOd0loTkNBWVlpRGlBRktRT0lBU0lQUWdHR0lBVXBBNEFCUWorSWhId2lFRUxuN0FCOUloUkNJSWdpQWlBTFFvQ0FnSUNBZ01BQWhDSVZRZ0dHSWhaQ0lJZ2lCSDRpRVNBQlFnR0dJZzFDSUlnaUNpQVFJQlJXclNBT0lCQldyU0FGS1FONFFnR0dJQk5DUDRpRUlBOUNQNGg4Zkh4Q0FYMGlFMElnaUNJUWZud2lEaUFSVkswZ0RpQU9JQk5DLy8vLy93K0RJaE1nQVVJL2lDSVhJQXRDQVlhRVF2Ly8vLzhQZ3lJTGZud2lEbGF0ZkNBRUlCQitmQ0FFSUJOK0loRWdDeUFRZm53aUR5QVJWSzFDSUlZZ0QwSWdpSVI4SUE0Z0RpQVBRaUNHZkNJT1ZxMThJQTRnRGlBVVF2Ly8vLzhQZ3lJVUlBdCtJaEVnQWlBS2Zud2lEeUFSVkswZ0R5QVBJQk1nRFVMKy8vLy9ENE1pRVg1OElnOVdyWHg4SWc1V3JYd2dEaUFFSUJSK0loZ2dFQ0FSZm53aUJDQUNJQXQrZkNJTElBb2dFMzU4SWhCQ0lJZ2dDeUFRVnEwZ0JDQVlWSzBnQkNBTFZxMThmRUlnaG9SOElnUWdEbFN0ZkNBRUlBOGdBaUFSZmlJQ0lBb2dGSDU4SWdwQ0lJZ2dBaUFLVnExQ0lJYUVmQ0lDSUE5VXJTQUNJQkJDSUlaOElBSlVyWHg4SWdJZ0JGU3RmQ0lFUXYvLy8vLy8vLzhBV0FSQUlCWWdGNFFoRlNBRlFkQUFhaUFDSUFRZ0F5QVNFSVlCSUFGQ01ZWWdCU2tEV0gwZ0JTa0RVQ0lCUWdCU3JYMGhDa0lBSUFGOUlRc2dCa0grL3dCcURBRUxJQVZCNEFCcUlBUkNQNFlnQWtJQmlJUWlBaUFFUWdHSUlnUWdBeUFTRUlZQklBRkNNSVlnQlNrRGFIMGdCU2tEWUNJTlFnQlNyWDBoQ2tJQUlBMTlJUXNnQVNFTklBWkIvLzhBYWdzaUJrSC8vd0ZPQkVBZ0RFS0FnSUNBZ0lEQS8vOEFoQ0VNUWdBaEFRd0JDd0orSUFaQkFFb0VRQ0FLUWdHR0lBdENQNGlFSVFFZ0JFTC8vLy8vLy84L2d5QUdyVUl3aG9RaENpQUxRZ0dHREFFTElBWkJqMzlNQkVCQ0FDRUJEQUlMSUFWQlFHc2dBaUFFUVFFZ0Jtc1E5Z0VnQlVFd2FpQU5JQlVnQmtId0FHb1FqZ0VnQlVFZ2FpQURJQklnQlNrRFFDSUNJQVVwQTBnaUNoQ0dBU0FGS1FNNElBVXBBeWhDQVlZZ0JTa0RJQ0lCUWorSWhIMGdCU2tETUNJRUlBRkNBWVlpRFZTdGZTRUJJQVFnRFgwTElRUWdCVUVRYWlBRElCSkNBMElBRUlZQklBVWdBeUFTUWdWQ0FCQ0dBU0FLSUFJZ0FpQURJQVFnQWtJQmd5SUVmQ0lEVkNBQklBTWdCRlN0ZkNJQklCSldJQUVnRWxFYnJYd2lBbGF0ZkNJRUlBSWdBaUFFUW9DQWdJQ0FnTUQvL3dCVUlBTWdCU2tERUZZZ0FTQUZLUU1ZSWdSV0lBRWdCRkViY2ExOElnSldyWHdpQkNBQ0lBUkNnSUNBZ0lDQXdQLy9BRlFnQXlBRktRTUFWaUFCSUFVcEF3Z2lBMVlnQVNBRFVSdHhyWHdpQVNBQ1ZLMThJQXlFSVF3TElBQWdBVGNEQUNBQUlBdzNBd2dnQlVIUUFtb2tBQXZBQVFJQmZ3SitRWDhoQXdKQUlBQkNBRklnQVVMLy8vLy8vLy8vLy84QWd5SUVRb0NBZ0lDQWdNRC8vd0JXSUFSQ2dJQ0FnSUNBd1AvL0FGRWJEUUFnQWtMLy8vLy8vLy8vLy84QWd5SUZRb0NBZ0lDQWdNRC8vd0JXSUFWQ2dJQ0FnSUNBd1AvL0FGSnhEUUFnQUNBRUlBV0VoRkFFUUVFQUR3c2dBU0FDZzBJQVdRUkFJQUVnQWxJZ0FTQUNVM0VOQVNBQUlBRWdBb1dFUWdCU0R3c2dBRUlBVWlBQklBSlZJQUVnQWxFYkRRQWdBQ0FCSUFLRmhFSUFVaUVEQ3lBREMwa0NBWDhCZmdKQUlBQ3RJZ0tuSWdGQmZ5QUJJQUpDSUlpbkd5QUFRUUZ5UVlDQUJFa2JJZ0VRVFNJQVJRMEFJQUJCQkdzdEFBQkJBM0ZGRFFBZ0FFRUFJQUVRVUJvTElBQUxDUUFnQUVFVUVLRUNDNGNCQVFKL0l3QkJFR3NpQUNRQVFmajlCQkJ3R2tIdytRUW9BZ0JGQkVCQmhQb0VRUUkyQWdCQi9Qa0VRbjgzQWdCQjlQa0VRb0NnZ0lDQWdBUTNBZ0JCeFAwRVFRSTJBZ0FnQUVFTWFpSUJRUUEyQWdBQ1FFSEkvUVFnQVJDZ0JRMEFDMEh3K1FRZ0FFRUlha0Z3Y1VIWXF0V3FCWE0yQWdBTFFmajlCQkJzR2lBQVFSQnFKQUFMOXg0Q0VIOEZmaU1BUVpBQmF5SUZKQUFnQlVFQVFaQUIvQXNBSUFWQmZ6WUNUQ0FGSUFBMkFpd2dCVUdrQWpZQ0lDQUZJQUEyQWxRZ0FTRUVJQUloRUVFQUlRQWpBRUd3QW1zaUJpUUFJQVVpQXlnQ1RFRUFTQVIvUVFBRklBTVFoUUVMUlFKQUFrQWdBeWdDQkVVRVFDQURFTDRDR2lBREtBSUVSUTBCQ3lBRUxRQUFJZ0ZGRFFFQ1FBSkFBa0FDUUFKQUEwQUNRQUpBSUFGQi93RnhJZ0VRNVFFRVFBTkFJQVFpQVVFQmFpRUVJQUV0QUFFUTVRRU5BQXNnQTBJQUVMNEJBMEFDZnlBREtBSUVJZ0lnQXlnQ2FFY0VRQ0FESUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFERUYwTEVPVUJEUUFMSUFNb0FnUWhCQ0FES1FOd1FnQlpCRUFnQXlBRVFRRnJJZ1EyQWdRTElBUWdBeWdDTEd1c0lBTXBBM2dnRm54OElSWU1BUXNDZndKQUFrQWdBVUVsUmdSQUlBUXRBQUVpQVVFcVJnMEJJQUZCSlVjTkFnc2dBMElBRUw0QkFrQWdCQzBBQUVFbFJnUkFBMEFDZnlBREtBSUVJZ0VnQXlnQ2FFY0VRQ0FESUFGQkFXbzJBZ1FnQVMwQUFBd0JDeUFERUYwTElnRVE1UUVOQUFzZ0JFRUJhaUVFREFFTElBTW9BZ1FpQVNBREtBSm9Sd1JBSUFNZ0FVRUJhallDQkNBQkxRQUFJUUVNQVFzZ0F4QmRJUUVMSUFRdEFBQWdBVWNFUUNBREtRTndRZ0JaQkVBZ0F5QURLQUlFUVFGck5nSUVDeUFCUVFCT0lBNXlEUTBNREFzZ0F5Z0NCQ0FES0FJc2E2d2dBeWtEZUNBV2ZId2hGaUFFSVFFTUF3dEJBQ0VJSUFSQkFtb01BUXNDUUNBQlFUQnJJZ0pCQ1VzTkFDQUVMUUFDUVNSSERRQWpBRUVRYXlJQklCQTJBZ3dnQVNBUUlBSkJBblJxUVFScklCQWdBa0VCU3hzaUFVRUVhallDQ0NBQktBSUFJUWdnQkVFRGFnd0JDeUFRS0FJQUlRZ2dFRUVFYWlFUUlBUkJBV29MSVFGQkFDRVBRUUFoQnlBQkxRQUFJZ1JCTUd0QkNVMEVRQU5BSUFkQkNtd2dCR3BCTUdzaEJ5QUJMUUFCSVFRZ0FVRUJhaUVCSUFSQk1HdEJDa2tOQUFzTElBUkI3UUJIQkg4Z0FRVkJBQ0VNSUFoQkFFY2hEeUFCTFFBQklRUkJBQ0VBSUFGQkFXb0xJZ2xCQVdvaEFVRURJUUlnRHlFRkFrQUNRQUpBQWtBQ1FBSkFJQVJCL3dGeFFjRUFhdzQ2QkF3RURBUUVCQXdNREF3RERBd01EQXdNQkF3TURBd0VEQXdFREF3TURBd0VEQVFFQkFRRUFBUUZEQUVNQkFRRURBd0VBZ1FNREFRTUFnd0xJQWxCQW1vZ0FTQUpMUUFCUWVnQVJpSUNHeUVCUVg1QmZ5QUNHeUVDREFRTElBbEJBbW9nQVNBSkxRQUJRZXdBUmlJQ0d5RUJRUU5CQVNBQ0d5RUNEQU1MUVFFaEFnd0NDMEVDSVFJTUFRdEJBQ0VDSUFraEFRdEJBU0FDSUFFdEFBQWlCVUV2Y1VFRFJpSUNHeUVSQWtBZ0JVRWdjaUFGSUFJYklnMUIyd0JHRFFBQ1FDQU5RZTRBUndSQUlBMUI0d0JIRFFGQkFTQUhJQWRCQVV3YklRY01BZ3NnQ0NBUklCWVFoZ1VNQWdzZ0EwSUFFTDRCQTBBQ2Z5QURLQUlFSWdJZ0F5Z0NhRWNFUUNBRElBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBREVGMExFT1VCRFFBTElBTW9BZ1FoQkNBREtRTndRZ0JaQkVBZ0F5QUVRUUZySWdRMkFnUUxJQVFnQXlnQ0xHdXNJQU1wQTNnZ0ZueDhJUllMSUFNZ0I2d2lGUkMrQVFKQUlBTW9BZ1FpQWlBREtBSm9Sd1JBSUFNZ0FrRUJhallDQkF3QkN5QURFRjFCQUVnTkJnc2dBeWtEY0VJQVdRUkFJQU1nQXlnQ0JFRUJhellDQkF0QkVDRUVBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnRFVIWUFHc09JUVlKQ1FJSkNRa0pDUUVKQWdRQkFRRUpCUWtKQ1FrSkF3WUpDUUlKQkFrSkJnQUxJQTFCd1FCcklnSkJCa3RCQVNBQ2RFSHhBSEZGY2cwSUN5QUdRUWhxSUFNZ0VVRUFFSWtGSUFNcEEzaENBQ0FES0FJRUlBTW9BaXhyckgxU0RRVU1EQXNnRFVFUWNrSHpBRVlFUUNBR1FTQnFRWDlCZ1FJUVVCb2dCa0VBT2dBZ0lBMUI4d0JIRFFZZ0JrRUFPZ0JCSUFaQkFEb0FMaUFHUVFBMkFTb01CZ3NnQmtFZ2FpQUJMUUFCSWdSQjNnQkdJZ1ZCZ1FJUVVCb2dCa0VBT2dBZ0lBRkJBbW9nQVVFQmFpQUZHeUVDQW44Q1FBSkFJQUZCQWtFQklBVWJhaTBBQUNJQlFTMUhCRUFnQVVIZEFFWU5BU0FFUWQ0QVJ5RUtJQUlNQXdzZ0JpQUVRZDRBUnlJS09nQk9EQUVMSUFZZ0JFSGVBRWNpQ2pvQWZnc2dBa0VCYWdzaEFRTkFBa0FnQVMwQUFDSUNRUzFIQkVBZ0FrVU5EeUFDUWQwQVJnMElEQUVMUVMwaEFpQUJMUUFCSWdsRklBbEIzUUJHY2cwQUlBRkJBV29oQlFKQUlBa2dBVUVCYXkwQUFDSUVUUVJBSUFraEFnd0JDd05BSUFSQkFXb2lCQ0FHUVNCcWFpQUtPZ0FBSUFRZ0JTMEFBQ0lDU1EwQUN3c2dCU0VCQ3lBQ0lBWnFJQW82QUNFZ0FVRUJhaUVCREFBTEFBdEJDQ0VFREFJTFFRb2hCQXdCQzBFQUlRUUxRZ0FoRTBFQUlRdEJBQ0VLUVFBaENTTUFRUkJySWdja0FBSkFJQVJCQVVjZ0JFRWtUWEZGQkVBUVdVRWNOZ0lBREFFTEEwQUNmeUFES0FJRUlnSWdBeWdDYUVjRVFDQURJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QURFRjBMSWdJUTVRRU5BQXNDUUFKQUlBSkJLMnNPQXdBQkFBRUxRWDlCQUNBQ1FTMUdHeUVKSUFNb0FnUWlBaUFES0FKb1J3UkFJQU1nQWtFQmFqWUNCQ0FDTFFBQUlRSU1BUXNnQXhCZElRSUxBa0FDUUFKQUFrQWdCRUVBUnlBRVFSQkhjU0FDUVRCSGNrVUVRQUovSUFNb0FnUWlBaUFES0FKb1J3UkFJQU1nQWtFQmFqWUNCQ0FDTFFBQURBRUxJQU1RWFFzaUFrRmZjVUhZQUVZRVFFRVFJUVFDZnlBREtBSUVJZ0lnQXlnQ2FFY0VRQ0FESUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFERUYwTElnSkI4ZDBEYWkwQUFFRVFTUTBESUFNcEEzQkNBRmtFUUNBRElBTW9BZ1JCQVdzMkFnUUxJQU5DQUJDK0FRd0dDeUFFRFFGQkNDRUVEQUlMSUFSQkNpQUVHeUlFSUFKQjhkMERhaTBBQUVzTkFDQURLUU53UWdCWkJFQWdBeUFES0FJRVFRRnJOZ0lFQ3lBRFFnQVF2Z0VRV1VFY05nSUFEQVFMSUFSQkNrY05BQ0FDUVRCcklndEJDVTBFUUVFQUlRSURRQ0FDUVFwc0lBdHFJZ0pCbWJQbXpBRkpBbjhnQXlnQ0JDSUZJQU1vQW1oSEJFQWdBeUFGUVFGcU5nSUVJQVV0QUFBTUFRc2dBeEJkQzBFd2F5SUxRUWxOY1EwQUN5QUNyU0VUQ3lBTFFRbExEUUlnRTBJS2ZpRVZJQXV0SVJRRFFBSkFBbjhnQXlnQ0JDSUNJQU1vQW1oSEJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJkQ3lJQ1FUQnJJZ1ZCQ1UwZ0ZDQVZmQ0lUUXBxejVzeVpzK2JNR1ZSeFJRUkFJQVZCQ1UwTkFRd0ZDeUFUUWdwK0loVWdCYTBpRkVKL2hWZ05BUXNMUVFvaEJBd0JDeUFFSUFSQkFXdHhCRUFnQWtIeDNRTnFMUUFBSWdvZ0JFa0VRQU5BSUFvZ0JDQUxiR29pQzBISDQvRTRTUUovSUFNb0FnUWlBaUFES0FKb1J3UkFJQU1nQWtFQmFqWUNCQ0FDTFFBQURBRUxJQU1RWFFzaUFrSHgzUU5xTFFBQUlnb2dCRWx4RFFBTElBdXRJUk1MSUFRZ0NrME5BU0FFclNFWEEwQWdFeUFYZmlJVklBcXRRdjhCZ3lJVVFuK0ZWZzBDSUJRZ0ZYd2hFeUFFQW44Z0F5Z0NCQ0lDSUFNb0FtaEhCRUFnQXlBQ1FRRnFOZ0lFSUFJdEFBQU1BUXNnQXhCZEN5SUNRZkhkQTJvdEFBQWlDazBOQWlBSElCZENBQ0FUUWdBUWhnRWdCeWtEQ0ZBTkFBc01BUXNnQkVFWGJFRUZka0VIY1VIeDN3TnFMQUFBSVFVZ0FrSHgzUU5xTFFBQUlnc2dCRWtFUUFOQUlBc2dDaUFGZENJQ2NpRUtJQUpCZ0lDQXdBQkpBbjhnQXlnQ0JDSUNJQU1vQW1oSEJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJkQ3lJQ1FmSGRBMm90QUFBaUN5QUVTWEVOQUFzZ0NxMGhFd3NnQkNBTFRRMEFRbjhnQmEwaUZZZ2lGQ0FUVkEwQUEwQWdDNjFDL3dHRElCTWdGWWFFSVJNZ0JBSi9JQU1vQWdRaUFpQURLQUpvUndSQUlBTWdBa0VCYWpZQ0JDQUNMUUFBREFFTElBTVFYUXNpQWtIeDNRTnFMUUFBSWd0TkRRRWdFeUFVV0EwQUN3c2dCQ0FDUWZIZEEyb3RBQUJORFFBRFFDQUVBbjhnQXlnQ0JDSUNJQU1vQW1oSEJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJkQzBIeDNRTnFMUUFBU3cwQUN4QlpRY1FBTmdJQVFRQWhDVUovSVJNTElBTXBBM0JDQUZrRVFDQURJQU1vQWdSQkFXczJBZ1FMSUFsQkFYSkZJQk5DZjFGeEJFQVFXVUhFQURZQ0FFSitJUk1NQVFzZ0V5QUpyQ0lVaFNBVWZTRVRDeUFIUVJCcUpBQWdBeWtEZUVJQUlBTW9BZ1FnQXlnQ0xHdXNmVkVOQnlBSVJTQU5RZkFBUjNKRkJFQWdDQ0FUUGdJQURBTUxJQWdnRVNBVEVJWUZEQUlMSUFoRkRRRWdCaWtERUNFVklBWXBBd2doRkFKQUFrQUNRQ0FSRGdNQUFRSUVDeUFJSUJRZ0ZSRDhCRGdDQUF3REN5QUlJQlFnRlJEVUF6a0RBQXdDQ3lBSUlCUTNBd0FnQ0NBVk53TUlEQUVMUVI4Z0IwRUJhaUFOUWVNQVJ5SUpHeUVDQWtBZ0VVRUJSZ1JBSUFnaEJ5QVBCRUFnQWtFQ2RCQk5JZ2RGRFFjTElBWkNBRGNDcUFKQkFDRUVBMEFnQnlFQUFrQURRQUovSUFNb0FnUWlCU0FES0FKb1J3UkFJQU1nQlVFQmFqWUNCQ0FGTFFBQURBRUxJQU1RWFFzaUJTQUdhaTBBSVVVTkFTQUdJQVU2QUJzZ0JrRWNhaUFHUVJ0cVFRRWdCa0dvQW1vUXRnSWlCVUYrUmcwQUlBVkJmMFlFUUVFQUlRd01EQXNnQUFSQUlBQWdCRUVDZEdvZ0JpZ0NIRFlDQUNBRVFRRnFJUVFMSUE5RklBSWdCRWR5RFFBTFFRRWhCVUVBSVF3Z0FDQUNRUUYwUVFGeUlnSkJBblFRdEFJaUJ3MEJEQXNMQzBFQUlRd2dBQ0VDSUFaQnFBSnFCSDhnQmlnQ3FBSUZRUUFMRFFnTUFRc2dEd1JBUVFBaEJDQUNFRTBpQjBVTkJnTkFJQWNoQUFOQUFuOGdBeWdDQkNJRklBTW9BbWhIQkVBZ0F5QUZRUUZxTmdJRUlBVXRBQUFNQVFzZ0F4QmRDeUlGSUFacUxRQWhSUVJBUVFBaEFpQUFJUXdNQkFzZ0FDQUVhaUFGT2dBQUlBUkJBV29pQkNBQ1J3MEFDMEVCSVFVZ0FDQUNRUUYwUVFGeUlnSVF0QUlpQncwQUN5QUFJUXhCQUNFQURBa0xRUUFoQkNBSUJFQURRQUovSUFNb0FnUWlBQ0FES0FKb1J3UkFJQU1nQUVFQmFqWUNCQ0FBTFFBQURBRUxJQU1RWFFzaUFDQUdhaTBBSVFSQUlBUWdDR29nQURvQUFDQUVRUUZxSVFRTUFRVkJBQ0VDSUFnaUFDRU1EQU1MQUFzQUN3TkFBbjhnQXlnQ0JDSUFJQU1vQW1oSEJFQWdBeUFBUVFGcU5nSUVJQUF0QUFBTUFRc2dBeEJkQ3lBR2FpMEFJUTBBQzBFQUlRQkJBQ0VNUVFBaEFnc2dBeWdDQkNFSElBTXBBM0JDQUZrRVFDQURJQWRCQVdzaUJ6WUNCQXNnQXlrRGVDQUhJQU1vQWl4cnJId2lGRkFnQ1NBVUlCVlJja1Z5RFFJZ0R3UkFJQWdnQURZQ0FBc0NRQ0FOUWVNQVJnMEFJQUlFUUNBQ0lBUkJBblJxUVFBMkFnQUxJQXhGQkVCQkFDRU1EQUVMSUFRZ0RHcEJBRG9BQUFzZ0FpRUFDeUFES0FJRUlBTW9BaXhyckNBREtRTjRJQlo4ZkNFV0lBNGdDRUVBUjJvaERnc2dBVUVCYWlFRUlBRXRBQUVpQVEwQkRBZ0xDeUFDSVFBTUFRdEJBU0VGUVFBaERFRUFJUUFNQWdzZ0R5RUZEQUlMSUE4aEJRc2dEa0YvSUE0YklRNExJQVZGRFFFZ0RCQklJQUFRU0F3QkMwRi9JUTRMUlFSQUlBTVFoQUVMSUFaQnNBSnFKQUFnQTBHUUFXb2tBQ0FPQzBNQUFrQWdBRVVOQUFKQUFrQUNRQUpBSUFGQkFtb09CZ0FCQWdJRUF3UUxJQUFnQWp3QUFBOExJQUFnQWowQkFBOExJQUFnQWo0Q0FBOExJQUFnQWpjREFBc0xwUUVCQTM4Z0FTZ0NCQ0VDSUFBb0FnQWhCQ0FBS0FJRUlRTURRQ0FESUFSR1JRUkFJQUpCRkdzaUFpQURRUlJySWdNcEFnQTNBZ0FnQWlBREtBSVFOZ0lRSUFJZ0F5a0NDRGNDQ0F3QkN3c2dBU0FDTmdJRUlBQW9BZ0FoQXlBQUlBSTJBZ0FnQVNBRE5nSUVJQUFvQWdRaEFpQUFJQUVvQWdnMkFnUWdBU0FDTmdJSUlBQW9BZ2doQWlBQUlBRW9BZ3cyQWdnZ0FTQUNOZ0lNSUFFZ0FTZ0NCRFlDQUF1SkJBSURmd0YrQWtBQ1FBSi9Ba0FDUUFKL0lBQW9BZ1FpQWlBQUtBSm9Sd1JBSUFBZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFBUVhRc2lBa0VyYXc0REFBRUFBUXNnQWtFdFJpQUJSUUovSUFBb0FnUWlBeUFBS0FKb1J3UkFJQUFnQTBFQmFqWUNCQ0FETFFBQURBRUxJQUFRWFFzaUEwRTZheUlCUVhWTGNnMEJHaUFBS1FOd1FnQlREUUlnQUNBQUtBSUVRUUZyTmdJRURBSUxJQUpCT21zaEFTQUNJUU5CQUFzaEJDQUJRWFpKRFFBQ1FDQURRVEJyUVFwUERRQkJBQ0VDQTBBZ0F5QUNRUXBzYWdKL0lBQW9BZ1FpQWlBQUtBSm9Sd1JBSUFBZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFBUVhRc2hBMEV3YXlFQ0lBSkJ6Sm16NWdCSUlBTkJNR3NpQVVFSlRYRU5BQXNnQXF3aEJTQUJRUXBQRFFBRFFDQURyU0FGUWdwK2ZDRUZBbjhnQUNnQ0JDSUJJQUFvQW1oSEJFQWdBQ0FCUVFGcU5nSUVJQUV0QUFBTUFRc2dBQkJkQ3lJRFFUQnJJZ0ZCQ1UwZ0JVSXdmU0lGUXE2UGhkZkh3dXVqQVZOeERRQUxJQUZCQ2s4TkFBTkFBbjhnQUNnQ0JDSUJJQUFvQW1oSEJFQWdBQ0FCUVFGcU5nSUVJQUV0QUFBTUFRc2dBQkJkQzBFd2EwRUtTUTBBQ3dzZ0FDa0RjRUlBV1FSQUlBQWdBQ2dDQkVFQmF6WUNCQXRDQUNBRmZTQUZJQVFiSVFVTUFRdENnSUNBZ0lDQWdJQ0FmeUVGSUFBcEEzQkNBRk1OQUNBQUlBQW9BZ1JCQVdzMkFnUkNnSUNBZ0lDQWdJQ0FmdzhMSUFVTHdqSURFWDhIZmdGOEl3QkJNR3NpRENRQUFrQUNRQ0FDUVFKTERRQWdBa0VDZENJQ1FkemRBMm9vQWdBaEVTQUNRZERkQTJvb0FnQWhFQU5BQW44Z0FTZ0NCQ0lDSUFFb0FtaEhCRUFnQVNBQ1FRRnFOZ0lFSUFJdEFBQU1BUXNnQVJCZEN5SUNFT1VCRFFBTFFRRWhDQUpBQWtBZ0FrRXJhdzREQUFFQUFRdEJmMEVCSUFKQkxVWWJJUWdnQVNnQ0JDSUNJQUVvQW1oSEJFQWdBU0FDUVFGcU5nSUVJQUl0QUFBaEFnd0JDeUFCRUYwaEFnc0NRQUpBSUFKQlgzRkJ5UUJHQkVBRFFDQUdRUWRHRFFJQ2Z5QUJLQUlFSWdJZ0FTZ0NhRWNFUUNBQklBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBQkVGMExJUUlnQmtIYnZnRnFJQVpCQVdvaEJpd0FBQ0FDUVNCeVJnMEFDd3NnQmtFRFJ3UkFJQVpCQ0VZaUJ3MEJJQU5GSUFaQkJFbHlEUUlnQncwQkN5QUJLUU53SWhWQ0FGa0VRQ0FCSUFFb0FnUkJBV3MyQWdRTElBTkZJQVpCQkVseURRQWdGVUlBVXlFQ0EwQWdBa1VFUUNBQklBRW9BZ1JCQVdzMkFnUUxJQVpCQVdzaUJrRURTdzBBQ3d0Q0FDRVZJd0JCRUdzaUJ5UUFJQWl5UXdBQWdIK1V2Q0lEUWYvLy93TnhJUWdDZnlBRFFSZDJJZ0pCL3dGeElnRUVRQ0FCUWY4QlJ3UkFJQWl0UWhtR0lSVWdBa0gvQVhGQmdQOEFhZ3dDQ3lBSXJVSVpoaUVWUWYvL0FRd0JDMEVBSUFoRkRRQWFJQWNnQ0sxQ0FDQUlaeUlCUWRFQWFoQ09BU0FIS1FNSVFvQ0FnSUNBZ01BQWhTRVZJQWNwQXdBaEZrR0ovd0FnQVdzTElRRWdEQ0FXTndNQUlBd2dBYTFDTUlZZ0EwRWZkcTFDUDRhRUlCV0VOd01JSUFkQkVHb2tBQ0FNS1FNSUlSVWdEQ2tEQUNFV0RBSUxBa0FDUUFKQUFrQUNRQ0FHRFFCQkFDRUdJQUpCWDNGQnpnQkhEUUFEUUNBR1FRSkdEUUlDZnlBQktBSUVJZ0lnQVNnQ2FFY0VRQ0FCSUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFCRUYwTElRSWdCa0dHMXdGcUlBWkJBV29oQml3QUFDQUNRU0J5UmcwQUN3c2dCZzRFQXdFQkFBRUxBa0FDZnlBQktBSUVJZ0lnQVNnQ2FFY0VRQ0FCSUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFCRUYwTFFTaEdCRUJCQVNFR0RBRUxRb0NBZ0lDQWdPRC8vd0FoRlNBQktRTndRZ0JURFFVZ0FTQUJLQUlFUVFGck5nSUVEQVVMQTBBQ2Z5QUJLQUlFSWdJZ0FTZ0NhRWNFUUNBQklBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBQkVGMExJZ0pCTUd0QkNra2dBa0hCQUd0QkdrbHlJQUpCM3dCR2NrVWdBa0hoQUd0QkdrOXhSUVJBSUFaQkFXb2hCZ3dCQ3d0Q2dJQ0FnSUNBNFAvL0FDRVZJQUpCS1VZTkJDQUJLUU53SWhoQ0FGa0VRQ0FCSUFFb0FnUkJBV3MyQWdRTEFrQWdBd1JBSUFZTkFRd0dDd3dDQ3dOQUlCaENBRmtFUUNBQklBRW9BZ1JCQVdzMkFnUUxJQVpCQVdzaUJnMEFDd3dFQ3lBQktRTndRZ0JaQkVBZ0FTQUJLQUlFUVFGck5nSUVDd3NRV1VFY05nSUFJQUZDQUJDK0FRd0JDd0pBSUFKQk1FY05BQUovSUFFb0FnUWlCeUFCS0FKb1J3UkFJQUVnQjBFQmFqWUNCQ0FITFFBQURBRUxJQUVRWFF0QlgzRkIyQUJHQkVBakFFR3dBMnNpQlNRQUFuOGdBU2dDQkNJQ0lBRW9BbWhIQkVBZ0FTQUNRUUZxTmdJRUlBSXRBQUFNQVFzZ0FSQmRDeUVDQWtBQ2Z3TkFJQUpCTUVjRVFBSkFJQUpCTGtjTkJDQUJLQUlFSWdJZ0FTZ0NhRVlOQUNBQklBSkJBV28yQWdRZ0FpMEFBQXdEQ3dVZ0FTZ0NCQ0lDSUFFb0FtaEhCSDlCQVNFUElBRWdBa0VCYWpZQ0JDQUNMUUFBQlVFQklROGdBUkJkQ3lFQ0RBRUxDeUFCRUYwTElnSkJNRWNFUUVFQklRc01BUXNEUUNBWVFnRjlJUmdDZnlBQktBSUVJZ0lnQVNnQ2FFY0VRQ0FCSUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFCRUYwTElnSkJNRVlOQUF0QkFTRUxRUUVoRHd0Q2dJQ0FnSUNBd1A4L0lSWURRQUpBSUFJaEJnSkFBa0FnQWtFd2F5SU5RUXBKRFFBZ0FrRXVSeUlISUFKQklISWlCa0hoQUd0QkJVdHhEUUlnQncwQUlBc05Ba0VCSVFzZ0ZTRVlEQUVMSUFaQjF3QnJJQTBnQWtFNVNoc2hBZ0pBSUJWQ0IxY0VRQ0FDSUFsQkJIUnFJUWtNQVFzZ0ZVSWNXQVJBSUFWQk1Hb2dBaENqQVNBRlFTQnFJQm9nRmtJQVFvQ0FnSUNBZ01EOVB4QnFJQVZCRUdvZ0JTa0RNQ0FGS1FNNElBVXBBeUFpR2lBRktRTW9JaFlRYWlBRklBVXBBeEFnQlNrREdDQVhJQmtRb0FFZ0JTa0RDQ0VaSUFVcEF3QWhGd3dCQ3lBQ1JTQUtjZzBBSUFWQjBBQnFJQm9nRmtJQVFvQ0FnSUNBZ0lEL1B4QnFJQVZCUUdzZ0JTa0RVQ0FGS1FOWUlCY2dHUkNnQVNBRktRTklJUmxCQVNFS0lBVXBBMEFoRndzZ0ZVSUJmQ0VWUVFFaER3c2dBU2dDQkNJQ0lBRW9BbWhIQkg4Z0FTQUNRUUZxTmdJRUlBSXRBQUFGSUFFUVhRc2hBZ3dCQ3dzQ2ZpQVBSUVJBQWtBQ1FDQUJLUU53UWdCWkJFQWdBU0FCS0FJRUlnSkJBV3MyQWdRZ0EwVU5BU0FCSUFKQkFtczJBZ1FnQzBVTkFpQUJJQUpCQTJzMkFnUU1BZ3NnQXcwQkN5QUJRZ0FRdmdFTElBVkI0QUJxUkFBQUFBQUFBQUFBSUFpM3BoREdBU0FGS1FOZ0lSY2dCU2tEYUF3QkN5QVZRZ2RYQkVBZ0ZTRVdBMEFnQ1VFRWRDRUpJQlpDQVh3aUZrSUlVZzBBQ3dzQ1FBSkFBa0FnQWtGZmNVSFFBRVlFUUNBQklBTVFpQVVpRmtLQWdJQ0FnSUNBZ0lCL1VnMERJQU1FUUNBQktRTndRZ0JaRFFJTUF3dENBQ0VYSUFGQ0FCQytBVUlBREFRTFFnQWhGaUFCS1FOd1FnQlREUUlMSUFFZ0FTZ0NCRUVCYXpZQ0JBdENBQ0VXQ3lBSlJRUkFJQVZCOEFCcVJBQUFBQUFBQUFBQUlBaTNwaERHQVNBRktRTndJUmNnQlNrRGVBd0JDeUFZSUJVZ0N4dENBb1lnRm54Q0lIMGlGVUVBSUJGcnJWVUVRQkJaUWNRQU5nSUFJQVZCb0FGcUlBZ1Fvd0VnQlVHUUFXb2dCU2tEb0FFZ0JTa0RxQUZDZjBMLy8vLy8vLysvLy84QUVHb2dCVUdBQVdvZ0JTa0RrQUVnQlNrRG1BRkNmMEwvLy8vLy8vKy8vLzhBRUdvZ0JTa0RnQUVoRnlBRktRT0lBUXdCQ3lBUlFlSUJhNndnRlZjRVFDQUpRUUJPQkVBRFFDQUZRYUFEYWlBWElCbENBRUtBZ0lDQWdJREEvNzkvRUtBQklCY2dHVUtBZ0lDQWdJQ0EvejhRZ1FVaEFTQUZRWkFEYWlBWElCa2dCU2tEb0FNZ0Z5QUJRUUJPSWdJYklBVXBBNmdESUJrZ0Foc1FvQUVnQWlBSlFRRjBJZ0Z5SVFrZ0ZVSUJmU0VWSUFVcEE1Z0RJUmtnQlNrRGtBTWhGeUFCUVFCT0RRQUxDd0orSUJWQklDQVJhNjE4SWhhbklnRkJBQ0FCUVFCS0d5QVFJQllnRUsxVEd5SUJRZkVBVHdSQUlBVkJnQU5xSUFnUW93RWdCU2tEaUFNaEdDQUZLUU9BQXlFYVFnQU1BUXNnQlVIZ0FtcEVBQUFBQUFBQThEOUJrQUVnQVdzUTR3RVF4Z0VnQlVIUUFtb2dDQkNqQVNBRktRUFFBaUVhSUFWQjhBSnFJQVVwQStBQ0lBVXBBK2dDSUFVcEE5Z0NJaGdRakFVZ0JTa0QrQUloR3lBRktRUHdBZ3NoRmlBRlFjQUNhaUFKSUFsQkFYRkZJQmNnR1VJQVFnQVE5d0ZCQUVjZ0FVRWdTWEZ4SWdGeUVKY0NJQVZCc0FKcUlCb2dHQ0FGS1FQQUFpQUZLUVBJQWhCcUlBVkJrQUpxSUFVcEE3QUNJQVVwQTdnQ0lCWWdHeENnQVNBRlFhQUNhaUFhSUJoQ0FDQVhJQUViUWdBZ0dTQUJHeEJxSUFWQmdBSnFJQVVwQTZBQ0lBVXBBNmdDSUFVcEE1QUNJQVVwQTVnQ0VLQUJJQVZCOEFGcUlBVXBBNEFDSUFVcEE0Z0NJQllnR3hEVkF5QUZLUVB3QVNJWUlBVXBBL2dCSWhaQ0FFSUFFUGNCUlFSQUVGbEJ4QUEyQWdBTElBVkI0QUZxSUJnZ0ZpQVZweENMQlNBRktRUGdBU0VYSUFVcEErZ0JEQUVMRUZsQnhBQTJBZ0FnQlVIUUFXb2dDQkNqQVNBRlFjQUJhaUFGS1FQUUFTQUZLUVBZQVVJQVFvQ0FnSUNBZ01BQUVHb2dCVUd3QVdvZ0JTa0R3QUVnQlNrRHlBRkNBRUtBZ0lDQWdJREFBQkJxSUFVcEE3QUJJUmNnQlNrRHVBRUxJUlVnRENBWE53TVFJQXdnRlRjREdDQUZRYkFEYWlRQUlBd3BBeGdoRlNBTUtRTVFJUllNQXdzZ0FTa0RjRUlBVXcwQUlBRWdBU2dDQkVFQmF6WUNCQXNnQVNFR0lBSWhCeUFJSVEwZ0F5RUlRUUFoQXlNQVFaREdBR3NpQkNRQVFRQWdFV3NpRHlBUWF5RVVBa0FDZndOQUFrQWdCMEV3UndSQUlBZEJMa2NOQkNBR0tBSUVJZ0VnQmlnQ2FFWU5BU0FHSUFGQkFXbzJBZ1FnQVMwQUFBd0RDeUFHS0FJRUlnRWdCaWdDYUVjRVFDQUdJQUZCQVdvMkFnUWdBUzBBQUNFSEJTQUdFRjBoQnd0QkFTRUREQUVMQ3lBR0VGMExJZ2RCTUVZRVFBTkFJQlZDQVgwaEZRSi9JQVlvQWdRaUFTQUdLQUpvUndSQUlBWWdBVUVCYWpZQ0JDQUJMUUFBREFFTElBWVFYUXNpQjBFd1JnMEFDMEVCSVFNTFFRRWhDd3NnQkVFQU5nS1FCZ0orQWtBQ1FBSkFBa0FnQjBFdVJpSUJJQWRCTUdzaUFrRUpUWElFUUFOQUFrQWdBVUVCY1FSQUlBdEZCRUFnRmlFVlFRRWhDd3dDQ3lBRFJTRUJEQVFMSUJaQ0FYd2hGaUFKUWZ3UFRBUkFJQTRnRnFjZ0IwRXdSaHNoRGlBRVFaQUdhaUFKUVFKMGFpSUJJQW9FZnlBSElBRW9BZ0JCQ214cVFUQnJCU0FDQ3pZQ0FFRUJJUU5CQUNBS1FRRnFJZ0VnQVVFSlJpSUJHeUVLSUFFZ0NXb2hDUXdCQ3lBSFFUQkdEUUFnQkNBRUtBS0FSa0VCY2pZQ2dFWkIzSThCSVE0TEFuOGdCaWdDQkNJQklBWW9BbWhIQkVBZ0JpQUJRUUZxTmdJRUlBRXRBQUFNQVFzZ0JoQmRDeUlIUVM1R0lnRWdCMEV3YXlJQ1FRcEpjZzBBQ3dzZ0ZTQVdJQXNiSVJVZ0EwVWdCMEZmY1VIRkFFZHlSUVJBQWtBZ0JpQUlFSWdGSWhkQ2dJQ0FnSUNBZ0lDQWYxSU5BQ0FJUlEwRVFnQWhGeUFHS1FOd1FnQlREUUFnQmlBR0tBSUVRUUZyTmdJRUN5QVZJQmQ4SVJVTUJBc2dBMFVoQVNBSFFRQklEUUVMSUFZcEEzQkNBRk1OQUNBR0lBWW9BZ1JCQVdzMkFnUUxJQUZGRFFFUVdVRWNOZ0lBQ3lBR1FnQVF2Z0ZDQUNFVlFnQU1BUXNnQkNnQ2tBWWlBVVVFUUNBRVJBQUFBQUFBQUFBQUlBMjNwaERHQVNBRUtRTUlJUlVnQkNrREFBd0JDeUFWSUJaU0lCWkNDVlZ5SUJCQkhrMUJBQ0FCSUJCMkczSkZCRUFnQkVFd2FpQU5FS01CSUFSQklHb2dBUkNYQWlBRVFSQnFJQVFwQXpBZ0JDa0RPQ0FFS1FNZ0lBUXBBeWdRYWlBRUtRTVlJUlVnQkNrREVBd0JDeUFQUVFGMnJTQVZVd1JBRUZsQnhBQTJBZ0FnQkVIZ0FHb2dEUkNqQVNBRVFkQUFhaUFFS1FOZ0lBUXBBMmhDZjBMLy8vLy8vLysvLy84QUVHb2dCRUZBYXlBRUtRTlFJQVFwQTFoQ2YwTC8vLy8vLy8rLy8vOEFFR29nQkNrRFNDRVZJQVFwQTBBTUFRc2dFVUhpQVd1c0lCVlZCRUFRV1VIRUFEWUNBQ0FFUVpBQmFpQU5FS01CSUFSQmdBRnFJQVFwQTVBQklBUXBBNWdCUWdCQ2dJQ0FnSUNBd0FBUWFpQUVRZkFBYWlBRUtRT0FBU0FFS1FPSUFVSUFRb0NBZ0lDQWdNQUFFR29nQkNrRGVDRVZJQVFwQTNBTUFRc2dDZ1JBSUFwQkNFd0VRQ0FFUVpBR2FpQUpRUUowYWlJQktBSUFJUVlEUUNBR1FRcHNJUVlnQ2tFQmFpSUtRUWxIRFFBTElBRWdCallDQUFzZ0NVRUJhaUVKQ3dKQUlBNUJDVTRnRlVJUlZYSWdGYWNpQ2lBT1NISU5BQ0FWUWdsUkJFQWdCRUhBQVdvZ0RSQ2pBU0FFUWJBQmFpQUVLQUtRQmhDWEFpQUVRYUFCYWlBRUtRUEFBU0FFS1FQSUFTQUVLUU93QVNBRUtRTzRBUkJxSUFRcEE2Z0JJUlVnQkNrRG9BRU1BZ3NnRlVJSVZ3UkFJQVJCa0FKcUlBMFFvd0VnQkVHQUFtb2dCQ2dDa0FZUWx3SWdCRUh3QVdvZ0JDa0RrQUlnQkNrRG1BSWdCQ2tEZ0FJZ0JDa0RpQUlRYWlBRVFlQUJha0VBSUFwclFRSjBRZERkQTJvb0FnQVFvd0VnQkVIUUFXb2dCQ2tEOEFFZ0JDa0QrQUVnQkNrRDRBRWdCQ2tENkFFUWdBVWdCQ2tEMkFFaEZTQUVLUVBRQVF3Q0N5QVFJQXBCZld4cVFSdHFJZ0pCSGt4QkFDQUVLQUtRQmlJQklBSjJHdzBBSUFSQjRBSnFJQTBRb3dFZ0JFSFFBbW9nQVJDWEFpQUVRY0FDYWlBRUtRUGdBaUFFS1FQb0FpQUVLUVBRQWlBRUtRUFlBaEJxSUFSQnNBSnFJQXBCQW5SQmlOMERhaWdDQUJDakFTQUVRYUFDYWlBRUtRUEFBaUFFS1FQSUFpQUVLUU93QWlBRUtRTzRBaEJxSUFRcEE2Z0NJUlVnQkNrRG9BSU1BUXNEUUNBRVFaQUdhaUFKSWdGQkFXc2lDVUVDZEdvb0FnQkZEUUFMUVFBaERnSkFJQXBCQ1c4aUFrVUVRRUVBSVFJTUFRc2dBa0VKYWlBQ0lCVkNBRk1iSVJJQ1FDQUJSUVJBUVFBaEFrRUFJUUVNQVF0QmdKVHIzQU5CQUNBU2EwRUNkRUhRM1FOcUtBSUFJZ1Z0SVF0QkFDRUhRUUFoQmtFQUlRSURRQ0FFUVpBR2FpSVBJQVpCQW5ScUlnTWdCeUFES0FJQUlna2dCVzRpQ0dvaUF6WUNBQ0FDUVFGcVFmOFBjU0FDSUFORklBSWdCa1p4SWdNYklRSWdDa0VKYXlBS0lBTWJJUW9nQ3lBSklBVWdDR3hyYkNFSElBWkJBV29pQmlBQlJ3MEFDeUFIUlEwQUlBRkJBblFnRDJvZ0J6WUNBQ0FCUVFGcUlRRUxJQW9nRW10QkNXb2hDZ3NEUUNBRVFaQUdhaUFDUVFKMGFpRVBJQXBCSkVnaEJnSkFBMEFnQmtVRVFDQUtRU1JIRFFJZ0R5Z0NBRUhSNmZrRVR3MENDeUFCUWY4UGFpRUpRUUFoQXdOQUlBRWhDQ0FEclNBRVFaQUdhaUFKUWY4UGNTSUxRUUowYWlJQk5RSUFRaDJHZkNJVlFvR1U2OXdEVkFSL1FRQUZJQlVnRlVLQWxPdmNBNEFpRmtLQWxPdmNBMzU5SVJVZ0ZxY0xJUU1nQVNBVlBnSUFJQWdnQ0NBTElBZ2dGVkFiSUFJZ0MwWWJJQXNnQ0VFQmEwSC9EM0VpQjBjYklRRWdDMEVCYXlFSklBSWdDMGNOQUFzZ0RrRWRheUVPSUFnaEFTQURSUTBBQ3lBQ1FRRnJRZjhQY1NJQ0lBRkdCRUFnQkVHUUJtb2lDQ0FCUWY0UGFrSC9EM0ZCQW5ScUlnRWdBU2dDQUNBSFFRSjBJQWhxS0FJQWNqWUNBQ0FISVFFTElBcEJDV29oQ2lBRVFaQUdhaUFDUVFKMGFpQUROZ0lBREFFTEN3SkFBMEFnQVVFQmFrSC9EM0VoQ0NBRVFaQUdhaUFCUVFGclFmOFBjVUVDZEdvaEVnTkFRUWxCQVNBS1FTMUtHeUVUQWtBRFFDQUNJUU5CQUNFR0FrQURRQUpBSUFNZ0JtcEIvdzl4SWdJZ0FVWU5BQ0FFUVpBR2FpQUNRUUowYWlnQ0FDSUhJQVpCQW5SQm9OMERhaWdDQUNJQ1NRMEFJQUlnQjBrTkFpQUdRUUZxSWdaQkJFY05BUXNMSUFwQkpFY05BRUlBSVJWQkFDRUdRZ0FoRmdOQUlBRWdBeUFHYWtIL0QzRWlBa1lFUUNBQlFRRnFRZjhQY1NJQlFRSjBJQVJxUVFBMkFvd0dDeUFFUVlBR2FpQUVRWkFHYWlBQ1FRSjBhaWdDQUJDWEFpQUVRZkFGYWlBVklCWkNBRUtBZ0lDQTVacTNqc0FBRUdvZ0JFSGdCV29nQkNrRDhBVWdCQ2tEK0FVZ0JDa0RnQVlnQkNrRGlBWVFvQUVnQkNrRDZBVWhGaUFFS1FQZ0JTRVZJQVpCQVdvaUJrRUVSdzBBQ3lBRVFkQUZhaUFORUtNQklBUkJ3QVZxSUJVZ0ZpQUVLUVBRQlNBRUtRUFlCUkJxSUFRcEE4Z0ZJUlpDQUNFVklBUXBBOEFGSVJjZ0RrSHhBR29pQnlBUmF5SUpRUUFnQ1VFQVNoc2dFQ0FKSUJCSUlnZ2JJZ1pCOEFCTkRRSU1CUXNnRGlBVGFpRU9JQUVoQWlBQklBTkdEUUFMUVlDVTY5d0RJQk4ySVFWQmZ5QVRkRUYvY3lFTFFRQWhCaUFESVFJRFFDQUVRWkFHYWlJUElBTkJBblJxSWdjZ0JpQUhLQUlBSWdrZ0UzWnFJZ2MyQWdBZ0FrRUJha0gvRDNFZ0FpQUhSU0FDSUFOR2NTSUhHeUVDSUFwQkNXc2dDaUFIR3lFS0lBa2dDM0VnQld3aEJpQURRUUZxUWY4UGNTSURJQUZIRFFBTElBWkZEUUVnQWlBSVJ3UkFJQUZCQW5RZ0Qyb2dCallDQUNBSUlRRU1Bd3NnRWlBU0tBSUFRUUZ5TmdJQURBRUxDd3NnQkVHUUJXcEVBQUFBQUFBQThEOUI0UUVnQm1zUTR3RVF4Z0VnQkVHd0JXb2dCQ2tEa0FVZ0JDa0RtQVVnRmhDTUJTQUVLUU80QlNFYUlBUXBBN0FGSVJrZ0JFR0FCV3BFQUFBQUFBQUE4RDlCOFFBZ0Jtc1E0d0VReGdFZ0JFR2dCV29nRnlBV0lBUXBBNEFGSUFRcEE0Z0ZFSW9GSUFSQjhBUnFJQmNnRmlBRUtRT2dCU0lWSUFRcEE2Z0ZJaGdRMVFNZ0JFSGdCR29nR1NBYUlBUXBBL0FFSUFRcEEvZ0VFS0FCSUFRcEErZ0VJUllnQkNrRDRBUWhGd3NDUUNBRFFRUnFRZjhQY1NJQ0lBRkdEUUFDUUNBRVFaQUdhaUFDUVFKMGFpZ0NBQ0lDUWYvSnRlNEJUUVJBSUFKRklBTkJCV3BCL3c5eElBRkdjUTBCSUFSQjhBTnFJQTIzUkFBQUFBQUFBTkEvb2hER0FTQUVRZUFEYWlBVklCZ2dCQ2tEOEFNZ0JDa0QrQU1Rb0FFZ0JDa0Q2QU1oR0NBRUtRUGdBeUVWREFFTElBSkJnTXExN2dGSEJFQWdCRUhRQkdvZ0RiZEVBQUFBQUFBQTZEK2lFTVlCSUFSQndBUnFJQlVnR0NBRUtRUFFCQ0FFS1FQWUJCQ2dBU0FFS1FQSUJDRVlJQVFwQThBRUlSVU1BUXNnRGJjaEhDQUJJQU5CQldwQi93OXhSZ1JBSUFSQmtBUnFJQnhFQUFBQUFBQUE0RCtpRU1ZQklBUkJnQVJxSUJVZ0dDQUVLUU9RQkNBRUtRT1lCQkNnQVNBRUtRT0lCQ0VZSUFRcEE0QUVJUlVNQVFzZ0JFR3dCR29nSEVRQUFBQUFBQURvUDZJUXhnRWdCRUdnQkdvZ0ZTQVlJQVFwQTdBRUlBUXBBN2dFRUtBQklBUXBBNmdFSVJnZ0JDa0RvQVFoRlFzZ0JrSHZBRXNOQUNBRVFkQURhaUFWSUJoQ0FFS0FnSUNBZ0lEQS96OFFpZ1VnQkNrRDBBTWdCQ2tEMkFOQ0FFSUFFUGNCRFFBZ0JFSEFBMm9nRlNBWVFnQkNnSUNBZ0lDQXdQOC9FS0FCSUFRcEE4Z0RJUmdnQkNrRHdBTWhGUXNnQkVHd0Eyb2dGeUFXSUJVZ0dCQ2dBU0FFUWFBRGFpQUVLUU93QXlBRUtRTzRBeUFaSUJvUTFRTWdCQ2tEcUFNaEZpQUVLUU9nQXlFWEFrQWdGRUVDYXlBSFFmLy8vLzhIY1U0TkFDQUVJQlpDLy8vLy8vLy8vLy8vQUlNM0E1Z0RJQVFnRnpjRGtBTWdCRUdBQTJvZ0Z5QVdRZ0JDZ0lDQWdJQ0FnUDgvRUdvZ0JDa0RrQU1nQkNrRG1BTkNnSUNBZ0lDQWdMakFBQkNCQlNFQ0lBUXBBNGdESUJZZ0FrRUFUaUlCR3lFV0lBUXBBNEFESUJjZ0FSc2hGeUFJSUFZZ0NVY2dBa0VBU0hKeElCVWdHRUlBUWdBUTl3RkJBRWR4UlNBVUlBRWdEbW9pRGtIdUFHcE9jUTBBRUZsQnhBQTJBZ0FMSUFSQjhBSnFJQmNnRmlBT0VJc0ZJQVFwQS9nQ0lSVWdCQ2tEOEFJTElSWWdEQ0FWTndNb0lBd2dGamNESUNBRVFaREdBR29rQUNBTUtRTW9JUlVnRENrRElDRVdEQUVMUWdBaEZRc2dBQ0FXTndNQUlBQWdGVGNEQ0NBTVFUQnFKQUFMd3dZQ0JIOERmaU1BUVlBQmF5SUZKQUFDUUFKQUFrQWdBeUFFUWdCQ0FCRDNBVVVOQUFKL0lBUkMvLy8vLy8vL1A0TWhDZ0ovSUFSQ01JaW5RZi8vQVhFaUIwSC8vd0ZIQkVCQkJDQUhEUUVhUVFKQkF5QURJQXFFVUJzTUFnc2dBeUFLaEZBTEMwVU5BQ0FDUWpDSXB5SUlRZi8vQVhFaUJrSC8vd0ZIRFFFTElBVkJFR29nQVNBQ0lBTWdCQkJxSUFVZ0JTa0RFQ0lDSUFVcEF4Z2lBU0FDSUFFUWdBVWdCU2tEQ0NFQ0lBVXBBd0FoQkF3QkN5QUJJQUpDLy8vLy8vLy8vLy8vQUlNaUNpQURJQVJDLy8vLy8vLy8vLy8vQUlNaUNSRDNBVUVBVEFSQUlBRWdDaUFESUFrUTl3RUVRQ0FCSVFRTUFnc2dCVUh3QUdvZ0FTQUNRZ0JDQUJCcUlBVXBBM2doQWlBRktRTndJUVFNQVFzZ0JFSXdpS2RCLy84QmNTRUhJQVlFZmlBQkJTQUZRZUFBYWlBQklBcENBRUtBZ0lDQWdJREF1OEFBRUdvZ0JTa0RhQ0lLUWpDSXAwSDRBR3NoQmlBRktRTmdDeUVFSUFkRkJFQWdCVUhRQUdvZ0F5QUpRZ0JDZ0lDQWdJQ0F3THZBQUJCcUlBVXBBMWdpQ1VJd2lLZEIrQUJySVFjZ0JTa0RVQ0VEQ3lBSlF2Ly8vLy8vL3orRFFvQ0FnSUNBZ01BQWhDRUxJQXBDLy8vLy8vLy9QNE5DZ0lDQWdJQ0F3QUNFSVFvZ0JpQUhTZ1JBQTBBQ2ZpQUtJQXQ5SUFNZ0JGYXRmU0lKUWdCWkJFQWdDU0FFSUFOOUlnU0VVQVJBSUFWQklHb2dBU0FDUWdCQ0FCQnFJQVVwQXlnaEFpQUZLUU1nSVFRTUJRc2dDVUlCaGlBRVFqK0loQXdCQ3lBS1FnR0dJQVJDUDRpRUN5RUtJQVJDQVlZaEJDQUdRUUZySWdZZ0Iwb05BQXNnQnlFR0N3SkFJQW9nQzMwZ0F5QUVWcTE5SWdsQ0FGTUVRQ0FLSVFrTUFRc2dDU0FFSUFOOUlnU0VRZ0JTRFFBZ0JVRXdhaUFCSUFKQ0FFSUFFR29nQlNrRE9DRUNJQVVwQXpBaEJBd0JDeUFKUXYvLy8vLy8vejlZQkVBRFFDQUVRaitJSUFaQkFXc2hCaUFFUWdHR0lRUWdDVUlCaG9RaUNVS0FnSUNBZ0lEQUFGUU5BQXNMSUFoQmdJQUNjU0VISUFaQkFFd0VRQ0FGUVVCcklBUWdDVUwvLy8vLy8vOC9neUFHUWZnQWFpQUhjcTFDTUlhRVFnQkNnSUNBZ0lDQXdNTS9FR29nQlNrRFNDRUNJQVVwQTBBaEJBd0JDeUFKUXYvLy8vLy8veitESUFZZ0IzS3RRakNHaENFQ0N5QUFJQVEzQXdBZ0FDQUNOd01JSUFWQmdBRnFKQUFMdndJQkFYOGpBRUhRQUdzaUJDUUFBa0FnQTBHQWdBRk9CRUFnQkVFZ2FpQUJJQUpDQUVLQWdJQ0FnSUNBLy84QUVHb2dCQ2tES0NFQ0lBUXBBeUFoQVNBRFFmLy9BVWtFUUNBRFFmLy9BR3NoQXd3Q0N5QUVRUkJxSUFFZ0FrSUFRb0NBZ0lDQWdJRC8vd0FRYWtIOS93SWdBeUFEUWYzL0FrOGJRZjcvQVdzaEF5QUVLUU1ZSVFJZ0JDa0RFQ0VCREFFTElBTkJnWUIvU2cwQUlBUkJRR3NnQVNBQ1FnQkNnSUNBZ0lDQWdEa1FhaUFFS1FOSUlRSWdCQ2tEUUNFQklBTkI5SUIrU3dSQUlBTkJqZjhBYWlFRERBRUxJQVJCTUdvZ0FTQUNRZ0JDZ0lDQWdJQ0FnRGtRYWtIb2dYMGdBeUFEUWVpQmZVMGJRWnIrQVdvaEF5QUVLUU00SVFJZ0JDa0RNQ0VCQ3lBRUlBRWdBa0lBSUFOQi8vOEFhcTFDTUlZUWFpQUFJQVFwQXdnM0F3Z2dBQ0FFS1FNQU53TUFJQVJCMEFCcUpBQUxQQUFnQUNBQk53TUFJQUFnQWtMLy8vLy8vLzgvZ3lBQ1FvQ0FnSUNBZ01ELy93Q0RRakNJcHlBRFFqQ0lwMEdBZ0FKeGNxMUNNSWFFTndNSUMwb0JBWDhnQUNBRE5nSVFJQUJCQURZQ0RDQUJCRUFnQVJEOUJDRUVDeUFBSUFRMkFnQWdBQ0FFSUFKQkZHeHFJZ0kyQWdnZ0FDQUVJQUZCRkd4cU5nSU1JQUFnQWpZQ0JDQUFDN3dDQUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBVUVKYXc0U0FBZ0pDZ2dKQVFJREJBb0pDZ29JQ1FVR0J3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJLQUlBTmdJQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJNZ0VBTndNQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJNd0VBTndNQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJNQUFBTndNQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJNUUFBTndNQUR3c2dBaUFDS0FJQVFRZHFRWGh4SWdGQkNHbzJBZ0FnQUNBQkt3TUFPUU1BRHdzZ0FDQUNJQU1SQWdBTER3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJOQUlBTndNQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJOUUlBTndNQUR3c2dBaUFDS0FJQVFRZHFRWGh4SWdGQkNHbzJBZ0FnQUNBQktRTUFOd01BQzI4QkJYOGdBQ2dDQUNJRExBQUFRVEJySWdGQkNVc0VRRUVBRHdzRFFFRi9JUVFnQWtITW1iUG1BRTBFUUVGL0lBRWdBa0VLYkNJRmFpQUJJQVZCLy8vLy93ZHpTeHNoQkFzZ0FDQURRUUZxSWdVMkFnQWdBeXdBQVNBRUlRSWdCU0VEUVRCcklnRkJDa2tOQUFzZ0FndUlFd0lTZndKK0l3QkJRR29pQ0NRQUlBZ2dBVFlDUENBSVFTZHFJUllnQ0VFb2FpRVJBa0FDUUFKQUFrQURRRUVBSVFjRFFDQUJJUTBnQnlBT1FmLy8vLzhIYzBvTkFpQUhJQTVxSVE0Q1FBSkFBa0FDUUNBQklnY3RBQUFpQ3dSQUEwQUNRQUpBSUF0Qi93RnhJZ0ZGQkVBZ0J5RUJEQUVMSUFGQkpVY05BU0FISVFzRFFDQUxMUUFCUVNWSEJFQWdDeUVCREFJTElBZEJBV29oQnlBTExRQUNJQXRCQW1vaUFTRUxRU1ZHRFFBTEN5QUhJQTFySWdjZ0RrSC8vLy8vQjNNaUYwb05DU0FBQkVBZ0FDQU5JQWNRaHdFTElBY05CeUFJSUFFMkFqd2dBVUVCYWlFSFFYOGhFQUpBSUFFc0FBRkJNR3NpQ2tFSlN3MEFJQUV0QUFKQkpFY05BQ0FCUVFOcUlRZEJBU0VTSUFvaEVBc2dDQ0FITmdJOFFRQWhEQUpBSUFjc0FBQWlDMEVnYXlJQlFSOUxCRUFnQnlFS0RBRUxJQWNoQ2tFQklBRjBJZ0ZCaWRFRWNVVU5BQU5BSUFnZ0IwRUJhaUlLTmdJOElBRWdESEloRENBSExBQUJJZ3RCSUdzaUFVRWdUdzBCSUFvaEIwRUJJQUYwSWdGQmlkRUVjUTBBQ3dzQ1FDQUxRU3BHQkVBQ2Z3SkFJQW9zQUFGQk1Hc2lBVUVKU3cwQUlBb3RBQUpCSkVjTkFBSi9JQUJGQkVBZ0JDQUJRUUowYWtFS05nSUFRUUFNQVFzZ0F5QUJRUU4wYWlnQ0FBc2hEeUFLUVFOcUlRRkJBUXdCQ3lBU0RRWWdDa0VCYWlFQklBQkZCRUFnQ0NBQk5nSThRUUFoRWtFQUlROE1Bd3NnQWlBQ0tBSUFJZ2RCQkdvMkFnQWdCeWdDQUNFUFFRQUxJUklnQ0NBQk5nSThJQTlCQUU0TkFVRUFJQTlySVE4Z0RFR0F3QUJ5SVF3TUFRc2dDRUU4YWhDUEJTSVBRUUJJRFFvZ0NDZ0NQQ0VCQzBFQUlRZEJmeUVKQW45QkFDQUJMUUFBUVM1SERRQWFJQUV0QUFGQktrWUVRQUovQWtBZ0FTd0FBa0V3YXlJS1FRbExEUUFnQVMwQUEwRWtSdzBBSUFGQkJHb2hBUUovSUFCRkJFQWdCQ0FLUVFKMGFrRUtOZ0lBUVFBTUFRc2dBeUFLUVFOMGFpZ0NBQXNNQVFzZ0VnMEdJQUZCQW1vaEFVRUFJQUJGRFFBYUlBSWdBaWdDQUNJS1FRUnFOZ0lBSUFvb0FnQUxJUWtnQ0NBQk5nSThJQWxCQUU0TUFRc2dDQ0FCUVFGcU5nSThJQWhCUEdvUWp3VWhDU0FJS0FJOElRRkJBUXNoRXdOQUlBY2hGRUVjSVFvZ0FTSVlMQUFBSWdkQit3QnJRVVpKRFFzZ0FVRUJhaUVCSUFjZ0ZFRTZiR3BCNzljRGFpMEFBQ0lIUVFGclFRaEpEUUFMSUFnZ0FUWUNQQUpBSUFkQkcwY0VRQ0FIUlEwTUlCQkJBRTRFUUNBQVJRUkFJQVFnRUVFQ2RHb2dCellDQUF3TUN5QUlJQU1nRUVFRGRHb3BBd0EzQXpBTUFnc2dBRVVOQ0NBSVFUQnFJQWNnQWlBR0VJNEZEQUVMSUJCQkFFNE5DMEVBSVFjZ0FFVU5DQXNnQUMwQUFFRWdjUTBMSUF4Qi8vOTdjU0lMSUF3Z0RFR0F3QUJ4R3lFTVFRQWhFRUhud2dFaEZTQVJJUW9DUUFKQUFuOENRQUpBQWtBQ1FBSkFBa0FDZndKQUFrQUNRQUpBQWtBQ1FBSkFJQmdzQUFBaUIwRlRjU0FISUFkQkQzRkJBMFliSUFjZ0ZCc2lCMEhZQUdzT0lRUVdGaFlXRmhZV0ZoQVdDUVlRRUJBV0JoWVdGaFlDQlFNV0Znb1dBUllXQkFBTEFrQWdCMEhCQUdzT0J4QVdDeFlRRUJBQUN5QUhRZE1BUmcwTERCVUxJQWdwQXpBaEdrSG53Z0VNQlF0QkFDRUhBa0FDUUFKQUFrQUNRQUpBQWtBZ0ZFSC9BWEVPQ0FBQkFnTUVIQVVHSEFzZ0NDZ0NNQ0FPTmdJQURCc0xJQWdvQWpBZ0RqWUNBQXdhQ3lBSUtBSXdJQTZzTndNQURCa0xJQWdvQWpBZ0Rqc0JBQXdZQ3lBSUtBSXdJQTQ2QUFBTUZ3c2dDQ2dDTUNBT05nSUFEQllMSUFnb0FqQWdEcXczQXdBTUZRdEJDQ0FKSUFsQkNFMGJJUWtnREVFSWNpRU1RZmdBSVFjTElCRWhBU0FIUVNCeElRc2dDQ2tETUNJYUlobFFSUVJBQTBBZ0FVRUJheUlCSUJtblFROXhRWURjQTJvdEFBQWdDM0k2QUFBZ0dVSVBWaUFaUWdTSUlSa05BQXNMSUFFaERTQU1RUWh4UlNBYVVISU5BeUFIUVFSMlFlZkNBV29oRlVFQ0lSQU1Bd3NnRVNFQklBZ3BBekFpR2lJWlVFVUVRQU5BSUFGQkFXc2lBU0FacDBFSGNVRXdjam9BQUNBWlFnZFdJQmxDQTRnaEdRMEFDd3NnQVNFTklBeEJDSEZGRFFJZ0NTQVJJQUZySWdGQkFXb2dBU0FKU0JzaENRd0NDeUFJS1FNd0locENBRk1FUUNBSVFnQWdHbjBpR2pjRE1FRUJJUkJCNThJQkRBRUxJQXhCZ0JCeEJFQkJBU0VRUWVqQ0FRd0JDMEhwd2dGQjU4SUJJQXhCQVhFaUVCc0xJUlVnR2lBUkVKb0NJUTBMSUJNZ0NVRUFTSEVORVNBTVFmLy9lM0VnRENBVEd5RU1JQnBDQUZJZ0NYSkZCRUFnRVNFTlFRQWhDUXdPQ3lBSklCcFFJQkVnRFd0cUlnRWdBU0FKU0JzaENRd05DeUFJTFFBd0lRY01Dd3NnQ0NnQ01DSUJRZUtIQWlBQkd5SU5RUUJCLy8vLy93Y2dDU0FKUWYvLy8vOEhUeHNpQnhDN0FpSUJJQTFySUFjZ0FSc2lBU0FOYWlFS0lBbEJBRTRFUUNBTElRd2dBU0VKREF3TElBc2hEQ0FCSVFrZ0NpMEFBQTBQREFzTElBZ3BBekFpR1ZCRkRRRkJBQ0VIREFrTElBa0VRQ0FJS0FJd0RBSUxRUUFoQnlBQVFTQWdEMEVBSUF3UWp3RU1BZ3NnQ0VFQU5nSU1JQWdnR1Q0Q0NDQUlJQWhCQ0dvaUJ6WUNNRUYvSVFrZ0J3c2hDMEVBSVFjRFFBSkFJQXNvQWdBaURVVU5BQ0FJUVFScUlBMFE4d0lpRFVFQVNBMFBJQTBnQ1NBSGEwc05BQ0FMUVFScUlRc2dCeUFOYWlJSElBbEpEUUVMQzBFOUlRb2dCMEVBU0EwTUlBQkJJQ0FQSUFjZ0RCQ1BBU0FIUlFSQVFRQWhCd3dCQzBFQUlRb2dDQ2dDTUNFTEEwQWdDeWdDQUNJTlJRMEJJQWhCQkdvaUNTQU5FUE1DSWcwZ0Ntb2lDaUFIU3cwQklBQWdDU0FORUljQklBdEJCR29oQ3lBSElBcExEUUFMQ3lBQVFTQWdEeUFISUF4QmdNQUFjeENQQVNBUElBY2dCeUFQU0JzaEJ3d0lDeUFUSUFsQkFFaHhEUWxCUFNFS0lBQWdDQ3NETUNBUElBa2dEQ0FISUFVUkxBQWlCMEVBVGcwSERBb0xJQWN0QUFFaEN5QUhRUUZxSVFjTUFBc0FDeUFBRFFrZ0VrVU5BMEVCSVFjRFFDQUVJQWRCQW5ScUtBSUFJZ0FFUUNBRElBZEJBM1JxSUFBZ0FpQUdFSTRGUVFFaERpQUhRUUZxSWdkQkNrY05BUXdMQ3dzZ0IwRUtUd1JBUVFFaERnd0tDd05BSUFRZ0IwRUNkR29vQWdBTkFVRUJJUTRnQjBFQmFpSUhRUXBIRFFBTERBa0xRUndoQ2d3R0N5QUlJQWM2QUNkQkFTRUpJQlloRFNBTElRd0xJQWtnQ2lBTmF5SUxJQWtnQzBvYklnRWdFRUgvLy8vL0IzTktEUU5CUFNFS0lBOGdBU0FRYWlJSklBa2dEMGdiSWdjZ0Ywb05CQ0FBUVNBZ0J5QUpJQXdRandFZ0FDQVZJQkFRaHdFZ0FFRXdJQWNnQ1NBTVFZQ0FCSE1RandFZ0FFRXdJQUVnQzBFQUVJOEJJQUFnRFNBTEVJY0JJQUJCSUNBSElBa2dERUdBd0FCekVJOEJJQWdvQWp3aEFRd0JDd3NMUVFBaERnd0RDMEU5SVFvTEVGa2dDallDQUF0QmZ5RU9DeUFJUVVCckpBQWdEZ3QvQWdGL0FYNGdBTDBpQTBJMGlLZEIvdzl4SWdKQi93OUhCSHdnQWtVRVFDQUJJQUJFQUFBQUFBQUFBQUJoQkg5QkFBVWdBRVFBQUFBQUFBRHdRNklnQVJDUkJTRUFJQUVvQWdCQlFHb0xOZ0lBSUFBUEN5QUJJQUpCL2dkck5nSUFJQU5DLy8vLy8vLy8vNGVBZjROQ2dJQ0FnSUNBZ1BBL2hMOEZJQUFMQ3hNQUlBQkJJSElnQUNBQVFjRUFhMEVhU1JzTEhRQWdBQ0FBRUxFRk5nSjRJQUJCQWY0WEFud2dBRUVBL2hjQ2dBRUxHZ0FnQUVHQllFOEVmeEJaUVFBZ0FHczJBZ0JCZndVZ0FBc0xPQUFnQUVIUUQyc2dBQ0FBUVpQeC8vOEhTaHNpQUVFRGNRUkFRUUFQQ3lBQVFld09haUlBUWVRQWJ3UkFRUUVQQ3lBQVFaQURiMFVMdmdFQkFuOGdBRUVPUmdSQVFkZUNBa0hoOWdFZ0FTZ0NBQnNQQ3lBQVFmLy9BM0VpQWtILy93TkhJQUJCRUhVaUEwRUZTbkpGQkVBZ0FTQURRUUowYWlnQ0FDSUFRUWhxUVozN0FTQUFHdzhMUWZTUUFpRUFBa0FDZndKQUFrQUNRQ0FEUVFGckRnVUFBUVFFQWdRTElBSkJBVXNOQTBIQTBRTU1BZ3NnQWtFeFN3MENRZERSQXd3QkN5QUNRUU5MRFFGQmtOUURDeUVBSUFKRkJFQWdBQThMQTBBZ0FDMEFBQ0FBUVFGcUlRQU5BQ0FDUVFGcklnSU5BQXNMSUFBTDZ3RUJBMzhDUUFKQUFrQWdBVUgvQVhFaUFpSURCRUFnQUVFRGNRUkFBMEFnQUMwQUFDSUVSU0FDSUFSR2NnMEZJQUJCQVdvaUFFRURjUTBBQ3d0QmdJS0VDQ0FBS0FJQUlnSnJJQUp5UVlDQmdvUjRjVUdBZ1lLRWVFY05BU0FEUVlHQ2hBaHNJUVFEUUVHQWdvUUlJQUlnQkhNaUEyc2dBM0pCZ0lHQ2hIaHhRWUNCZ29SNFJ3MENJQUFvQWdRaEFpQUFRUVJxSWdNaEFDQUNRWUNDaEFnZ0FtdHlRWUNCZ29SNGNVR0FnWUtFZUVZTkFBc01BZ3NnQUJDREFTQUFhZzhMSUFBaEF3c0RRQ0FESWdBdEFBQWlBa1VOQVNBQVFRRnFJUU1nQWlBQlFmOEJjVWNOQUFzTElBQUxqQU1DQVh3RGZ5TUFRUkJySWdRa0FBSkFJQUM4SWdOQi8vLy8vd2R4SWdKQjJwK2srZ05OQkVBZ0FrR0FnSURNQTBrTkFTQUF1eEMvQVNFQURBRUxJQUpCMGFmdGd3Uk5CRUFnQUxzaEFTQUNRZU9YMjRBRVRRUkFJQU5CQUVnRVFDQUJSQmd0UkZUN0lmay9vQkRBQVl3aEFBd0RDeUFCUkJndFJGVDdJZm0vb0JEQUFTRUFEQUlMUkJndFJGVDdJUW5BUkJndFJGVDdJUWxBSUFOQkFFNGJJQUdnbWhDL0FTRUFEQUVMSUFKQjFlT0lod1JOQkVBZ0FrSGYyNytGQkUwRVFDQUF1eUVCSUFOQkFFZ0VRQ0FCUk5JaE0zOTgyUkpBb0JEQUFTRUFEQU1MSUFGRTBpRXpmM3paRXNDZ0VNQUJqQ0VBREFJTFJCZ3RSRlQ3SVJsQVJCZ3RSRlQ3SVJuQUlBTkJBRWdiSUFDN29CQy9BU0VBREFFTElBSkJnSUNBL0FkUEJFQWdBQ0FBa3lFQURBRUxJQUFnQkVFSWFoRERCU0VDSUFRckF3Z2hBUUpBQWtBQ1FBSkFJQUpCQTNGQkFXc09Bd0VDQXdBTElBRVF2d0VoQUF3REN5QUJFTUFCSVFBTUFnc2dBWm9RdndFaEFBd0JDeUFCRU1BQmpDRUFDeUFFUVJCcUpBQWdBQXRNQVFGL0FrQWdBQ2dDVEVFQVRnUkFJQUFRaFFFZ0FFSUFRUUFRaWdNZ0FDQUFLQUlBUVY5eE5nSUFSUTBCSUFBUWhBRVBDeUFBUWdCQkFCQ0tBeUFBSUFBb0FnQkJYM0UyQWdBTEM4VUVBUVovSUFBaEJTTUFRZEFCYXlJRUpBQWdCRUlCTndNSUFrQWdBU0FDYkNJSVJRMEFJQVFnQWpZQ0VDQUVJQUkyQWhSQkFDQUNheUVKSUFJaUFDRUhRUUloQmdOQUlBUkJFR29nQmtFQ2RHb2dBQ0lCSUFJZ0IycHFJZ0EyQWdBZ0JrRUJhaUVHSUFFaEJ5QUFJQWhKRFFBTEFrQWdCU0FJYWlBSmFpSUJJQVZOQkVCQkFTRUFEQUVMUVFFaEJrRUJJUUFEUUFKL0lBWkJBM0ZCQTBZRVFDQUZJQUlnQXlBQUlBUkJFR29RM1FNZ0JFRUlha0VDRVBnQ0lBQkJBbW9NQVFzQ1FDQUVRUkJxSWdjZ0FFRUJheUlHUVFKMGFpZ0NBQ0FCSUFWclR3UkFJQVVnQWlBRElBUkJDR29nQUVFQUlBY1E5d0lNQVFzZ0JTQUNJQU1nQUNBRVFSQnFFTjBEQ3lBQVFRRkdCRUFnQkVFSWFrRUJFUFlDUVFBTUFRc2dCRUVJYWlBR0VQWUNRUUVMSVFBZ0JDQUVLQUlJUVFGeUlnWTJBZ2dnQWlBRmFpSUZJQUZKRFFBTEN5QUZJQUlnQXlBRVFRaHFJQUJCQUNBRVFSQnFFUGNDQWtBZ0FFRUJSdzBBSUFRb0FnaEJBVWNOQUNBRUtBSU1SUTBCQ3dOQUFuOGdBRUVCVEFSQUlBUkJDR29pQVNBQkVKMEZJZ0VRK0FJZ0FDQUJhZ3dCQ3lBRVFRaHFJZ0ZCQWhEMkFpQUVJQVFvQWdoQkIzTTJBZ2dnQVVFQkVQZ0NJQVVnQ1dvaUNDQUVRUkJxSWdjZ0FFRUNheUlHUVFKMGFpZ0NBR3NnQWlBRElBRWdBRUVCYTBFQklBY1E5d0lnQVVFQkVQWUNJQVFnQkNnQ0NFRUJjallDQ0NBSUlBSWdBeUFCSUFaQkFTQUhFUGNDSUFZTElRQWdCU0FKYWlFRklBQkJBVWNOQUNBRUtBSUlRUUZIRFFBZ0JDZ0NEQTBBQ3dzZ0JFSFFBV29rQUFzS0FDQUFhRUVBSUFBYkM1Z0JBUVYvSXdCQmdBSnJJZ1VrQUFKQUlBSkJBa2dOQUNBQklBSkJBblJxSWdjZ0JUWUNBQ0FBUlEwQUEwQWdCeWdDQUNBQktBSUFRWUFDSUFBZ0FFR0FBazhiSWdRUWF4cEJBQ0VEQTBBZ0FTQURRUUowYWlJR0tBSUFJQUVnQTBFQmFpSURRUUowYWlnQ0FDQUVFR3NhSUFZZ0JpZ0NBQ0FFYWpZQ0FDQUNJQU5IRFFBTElBQWdCR3NpQUEwQUN3c2dCVUdBQW1va0FBc3BBUUYvSUFBb0FnQkJBV3NRbXdVaUFRUi9JQUVGSUFBb0FnUVFtd1VpQUVFZ2NrRUFJQUFiQ3dzM0FRSi9Jd0JCRUdzaUFpUUFJQUpCREdvaUF5QUFFRndnQXhDVkFTSUFJQUVnQUNnQ0FDZ0NIQkVEQUNBREVGUWdBa0VRYWlRQUN3MEFJQUFnQVNBQy9rZ0NBQm9MVUFFQmZ5TUFRU0JySWdKQkdHcENBRGNEQUNBQ1FnQTNBeEFnQWtJQU53TUlJQUFnQWlrRENEY0NBQ0FBSUFJcEF4ZzNBaEFnQUNBQ0tRTVFOd0lJSUFFRVFDQUFJQUVvQWdBMkFnQUxRUUFMSmdBZ0FDQUFLQUlZUlNBQUtBSVFJQUZ5Y2lJQk5nSVFJQUFvQWhRZ0FYRUVRQkIxQUFzTEVBQWpBeWdDU0NBQVFRSjBhaWdDQUF2MUFRRUZmeU1BUVJCcklnTWtBQ0FEUVFBMkFnd2dBRUVnYWlJR0VJQURJQUFvQWhRaUFrRUFSeUVGQWtBZ0FVVWdBa1Z5RFFBRFFBSkFJQUpCQ0dwQkFFRUJFSHNFUUNBRElBTW9BZ3hCQVdvMkFnd2dBaUFEUVF4cU5nSVFEQUVMSUFRZ0FpQUVHeUVFSUFGQkFXc2hBUXNnQWlnQ0FDSUNRUUJISVFVZ0FVVU5BU0FDRFFBTEN3SkFJQVVFUUNBQ0tBSUVJZ0VFUUNBQlFRQTJBZ0FMSUFKQkFEWUNCQXdCQ3lBQVFRQTJBZ1FMSUFBZ0FqWUNGQ0FHRVA4Q0lBTW9BZ3dpQWdSQUEwQWdBMEVNYWtFQUlBSVEvZ0VnQXlnQ0RDSUNEUUFMQ3lBRUJFQWdCRUVNYWhEL0Fnc2dBMEVRYWlRQVFRQUxDZ0FnQUVGLy9oNENBQXNjQVFGL0l3QkJNR3NpQVVFQVFURDhDd0FnQUNBQlFURDhDZ0FBQzVzQkFRZC9JQUZCUUdzaENDQUJRU0JxSVFrRFFDQUZRUU5IQkVBZ0FDQUZRUVYwSWdkcUlRUkJBQ0VEQTBBZ0EwRUVSd1JBSUFOQkEzUWlCaUFDSUFkcWFpQUVLd01RSUFZZ0NHb3JBd0NpSUFRckF3QWdBU0FHYWlzREFLSWdCQ3NEQ0NBR0lBbHFLd01Bb3FDZ09RTUFJQU5CQVdvaEF3d0JDd3NnQWlBSGFpSURJQVFyQXhnZ0F5c0RHS0E1QXhnZ0JVRUJhaUVGREFFTEN3dWtBZ0VEZnlNRElnQW9Ba2hGQkVBZ0FFR1E2UVEyQWtnTEFrQkJuTzBFS0FJQUl3TW9BaGhHRFFBUTN3TkJDa2NOQUVIa0FDRUFBMEFDUUNBQVJRMEFRWkR0QkNnQ0FFVU5BQ0FBUVFGcklRQkJsTzBFS0FJQVJRMEJDd3NRM3dOQkNrWUVRQU5BQWtCQmtPMEVLQUlBSWdCRkRRQkJsTzBFRU5FQlFaRHRCQ0FBSUFCQmdJQ0FnSGh5SWdBUW53VkJtTzBFS0FJQUdrR1E3UVFnQUJEbUF5RUFRWlR0QkJEQkFpQUFSUTBBSUFCQkcwY05Bd3NRM3dOQkNrWU5BQXNMUVp6dEJDTURLQUlZTmdJQUMwR3c3UVFvQWdBaUFTRUFBMEFDUUNBQVFRSjBRY0R0QkdvaUFpZ0NBRVVFUUVIUTZBUWdBRFlDQUVHdzdRUWdBRFlDQUNBQ1Faa0NOZ0lBREFFTElBQkJBV3BCL3dCeElnQWdBVWNOQVFzTFFaRHRCQkQ2QWd1TkFRRURmeU1BUVNCcklnRWtBQUpBSUFBb0FnaEZCRUFnQUVFUWFpSUNFSEFhSUFCQkFqWUNEQ0FDRUd3YUlBQkJLR29RdVFJTUFRc2dBQ2dDR0FSQUlBQW9BaEFoQWlBQUtBSU1JQUVnQURZQ0hDQUJJQUEyQWhBZ0FVR1RBallDR0NBQlFaZ0NOZ0lVSUFFZ0FTa0NGRGNEQ0NBQ0lBRkJDR29RZ2dNTkFRc2dBQkM2QWdzZ0FVRWdhaVFBQ3hzQUlBQW9BZ2hGQkVBZ0FFRVFhaERpQXlBQVFTaHFFT2dEQ3d0akFRSi9JQUFnQUNnQ1dFWUVRQ0FBUWdBM0FsaEIwT2dFS0FJQVFRQVErUUlQQzBIUTZBUW9BZ0FRb2dVaUFTQUFSZ1JBUWREb0JDZ0NBQ0FCS0FKWUVQa0NDeUFBS0FKY0lnRWdBQ2dDV0NJQ05nSllJQUlnQVRZQ1hDQUFRZ0EzQWxnTFNnRURmd0pBSUFBb0Fod2lBa0VBVEEwQUlBQW9BaGdoQTBFQUlRQURRQ0FCSUFNZ0FFRUNkR29vQWdBaUJDZ0NIRWNFUUNBQ0lBQkJBV29pQUVjTkFRd0NDd3NnQkE4TFFRQUxnZ0lCQlg4Q1FDQUFLQUlzSUFBb0FqQkJBV29nQUNnQ0tHOUhEUUFnQUNnQ0tDSUNRUmhzRUUwaUF3Ui9JQUpCQVhRaEJRSkFJQUFvQWpBaUJDQUFLQUlzSWdKT0JFQWdBeUFBS0FJa0lBSkJER3hxSUFRZ0Ftc2lBa0VNYkJCckdnd0JDeUFESUFBb0FpUWdBa0VNYkdvZ0FDZ0NLQ0FDYXlJQ1FReHNJZ1lRYXhvZ0F5QUdhaUFBS0FJa0lBUkJER3dRYXhvZ0FpQUVhaUVDQ3lBQUtBSWtFRWdnQUNBQ05nSXdJQUJCQURZQ0xDQUFJQVUyQWlnZ0FDQUROZ0lrUVFFRlFRQUxEUUJCQUE4TElBQW9BaVFnQUNnQ01FRU1iR29pQXlBQktRSUFOd0lBSUFNZ0FTZ0NDRFlDQ0NBQUlBQW9BakJCQVdvZ0FDZ0NLRzgyQWpCQkFRdGRBUU4vSXdCQkVHc2lBU1FBSUFCQkJHb2lBaEJ3R2lBQUVJTURSUVJBQTBBZ0FVRUVhaUFBRUs0RklBRW9BZ2dpQXdSQUlBRW9BZ3dnQXhFQkFBc2dBQkNEQTBVTkFBc0xJQUlRYkJvZ0FFRUEvaGNDQUNBQlFSQnFKQUFMT0FFQ2Z5QUFJQUVvQWlRZ0FTZ0NMQ0lDUVF4c2FpSURLUUlBTndJQUlBQWdBeWdDQ0RZQ0NDQUJJQUpCQVdvZ0FTZ0NLRzgyQWl3TGN3RURmeUFBUlFSQVFRQkJBMEg1T2tFQUVFNFBDeUFBS0FJQUlnRkZCRUFQQ3lBQktBSUFFRWhCQUNFQkEzOGdBQ2dDQUNJREtBSUlJUUlnQXlnQ0RDQUJUQVIvSUFJUVNDQUFLQUlBRUVnZ0FFRUFOZ0lBUVFBRklBSWdBVUVNYkdvb0FnQVFTQ0FCUVFGcUlRRU1BUXNMR2dzVkFDQUFRUVJxRU9JRElBQW9BaVFRU0NBQUVFZ0wzd0lCQm44akFFRkFhaUlCSkFCQnhNZ0VFUHdDUlFSQVFmaklCQ2dDQUNJQ1FjRElCRWNFUUFOQUlBSW9BamdnQXY0UUFnQkZCRUFnQWlnQ05DSUVJQUlvQWpnaUJUWUNPQ0FGSUFRMkFqUWdBaEN3QlFzaUFrSEF5QVJIRFFBTEMwSEV5QVFRYkJvTEFrQkJQQkJOSWdKRkRRQkJnQXdRVFNJRFJRUkFJQUlRU0F3QkN5QUJRZ0EzQXlnZ0FVSUFOd013SUFGQkFEWUNQQ0FCUWdBM0F5QWdBU0FBTmdJY0lBRkJBRFlDR0NBQklBTTJBaFFnQVVHQUFUWUNFQ0FCUVFBMkFnd2dBVUVBTmdJSUlBRkJBRFlDQkNBQlFRQTJBZ0FnQWlBQktBSThOZ0lBSUFJZ0FTa0RNRGNDRkNBQ0lBRXBBeWczQWd3Z0FpQUJLUU1nTndJRUlBSWdBU2dDSERZQ0hDQUNJQUVvQWhnMkFpQWdBaUFCS0FJVU5nSWtJQUlnQVNnQ0VEWUNLQ0FDSUFFb0FndzJBaXdnQWlBQktBSUlOZ0l3SUFJZ0FTZ0NCRFlDTkNBQ0lBRW9BZ0EyQWpnZ0FpRUdDeUFCUVVCckpBQWdCZ3RHQVFGL0FuOUJBQ0FBUVJkMlFmOEJjU0lCUWY4QVNRMEFHa0VDSUFGQmxnRkxEUUFhUVFCQkFVR1dBU0FCYTNRaUFVRUJheUFBY1EwQUdrRUJRUUlnQUNBQmNSc0xDeE1BSUFCQkFYUkJnSUNBQ0dwQmdZQ0FDRWtMWUFCQjdPY0UvaElBQUVFQmNVVUVRRUhVNXdRUWNCcEI3T2NFL2hJQUFFRUJjVVVFUUVIQTV3UkJ4T2NFUWZEbkJFR1E2QVFRSzBITTV3UkJrT2dFTmdJQVFjam5CRUh3NXdRMkFnQkI3T2NFUVFIK0dRQUFDMEhVNXdRUWJCb0xDd29BSUFBZ0FmNGVBZ0FMSkFFQmZ5QUFLQUlBSWdBb0FnQWlBUVJBSUFBZ0FUWUNCQ0FBS0FJSUdpQUJFRWdMQ3d3QUlBQWdBSk1pQUNBQWxRdEtBZ0YrQVg4Q2ZpQUFLQUpNUVFCSUJFQWdBQkM1QlF3QkN5QUFFSVVCSUFBUXVRVWhBUVJBSUFBUWhBRUxJQUVMSWdGQ2dJQ0FnQWhaQkVBUVdVRTlOZ0lBUVg4UEN5QUJwd3R0QWdKL0FYNGdBQ2dDS0NFQ1FRRWhBUUpBSUFCQ0FDQUFMUUFBUVlBQmNRUi9RUUZCQWlBQUtBSVVJQUFvQWh4R0d3VkJBUXNnQWhFVEFDSURRZ0JURFFBZ0F5QUFLQUlJSWdFRWYwRUVCU0FBS0FJY0lnRkZEUUZCRkFzZ0FHb29BZ0FnQVd1c2ZDRURDeUFEQy9nQ0FnVi9CWDBqQUVFUWF5SUZKQUJCZnlFSEl3QkJRR29pQmlRQUFuOGdBQ29DSENBQUtnSXNJZ29nQTVTVElRMGdBQ29DRENBS0lBS1VreUVLSUFBcUFpQWlDeUFEbENBQUtnSVFreUVPSUFzZ0FwUWdBQ29DQUpNaUN5QUFLZ0lrSWd3Z0E1UWdBQ29DRkpNaUE1UWdEQ0FDbENBQUtnSUVreUlNSUE2VWt5SUNRd0FBQUFCY0JFQWdCU0FESUFxVUlBd2dEWlNUSUFLVk9BSU1JQVVnQ3lBTmxDQU9JQXFVa3lBQ2xUZ0NDRUVBREFFTFFYOExJUUFnQmtGQWF5UUFBa0FnQUVFQVNBMEFBbjhnQlNvQ0RDQUJLZ0lNSWdLVVF6TXp5MEdWUXdBQUFEK1NJZ09MUXdBQUFFOWRCRUFnQTZnTUFRdEJnSUNBZ0hnTElnQkJBRWdOQUNBQktBSUVJZ2dnQUV3TkFBSi9JQUVvQWdnaUNiSWdBaUFGS2dJSWxFTXpNOHZCbFpKREFBQUFQNUlpQW90REFBQUFUMTBFUUNBQ3FBd0JDMEdBZ0lDQWVBc2lCa0VBU0NBR0lBbE9jZzBBSUFRZ0FTZ0NBQ0FHSUFoc2FpQUFhaTBBQURvQUFFRUFJUWNMSUFWQkVHb2tBQ0FIQ3dzQUlBQkJBQ0FCRVA0QkM4TUNBZ0YvQkgwakFFRkFhaUlHSkFBQ1FDQUFCRUFnQUVFSWFpQUJJQVpCRUdvUThnSkJmeUVCSUFCQnVBRnFJZ0FnQmlvQ0hDQUdLZ0lRSUFLVUlBTWdCaW9DRkpTU2tpQUdLZ0k4SUFZcUFqQWdBcFFnQXlBR0tnSTBsSktTSWdlVklnZ2dCaW9DTENBR0tnSWdJQUtVSUFNZ0Jpb0NKSlNTa2lBSGxTSUNJQVFnQlJEN0EwRUFTQTBCSUFBZ0JDb0NBQ0FGS2dJQUlBWkJER29nQmtFSWFoQ0FBa0VBU0EwQlFYOUJBQ0FJSUFZcUFneVRJZ01nQTVRZ0FpQUdLZ0lJa3lJQ0lBS1Vra01BQUlBL1hoc2hBUXdCQ3lBQktnSWNJUWNnQVNvQ0VDRUlJQUVxQWhRaENTQUVJQUVxQWd3Z0FTb0NBQ0FDbENBRElBRXFBZ1NVa3BJZ0FTb0NMQ0FCS2dJZ0lBS1VJQU1nQVNvQ0pKU1NraUlLbFRnQ0FDQUZJQWNnQ0NBQ2xDQURJQW1Va3BJZ0NwVTRBZ0JCQUNFQkN5QUdRVUJySkFBZ0FRc2xBQUpBSXdVRVFFSE01UVQrRUFJQURRRVE4QWNMRHd0QnpPVUUvaEFDQUJBMEVETUFDeEFBSUFFZ0FZd2dBU0FBR3hEc0E1UUxkUUlDZkFGK0lBQUNmaEFUSWdGRUFBQUFBQUJBajBDaklnS1pSQUFBQUFBQUFPQkRZd1JBSUFLd0RBRUxRb0NBZ0lDQWdJQ0FnSDhMSWdNM0F3QWdBQUovSUFFZ0EwTG9CMzY1b1VRQUFBQUFBRUNQUUtJaUFabEVBQUFBQUFBQTRFRmpCRUFnQWFvTUFRdEJnSUNBZ0hnTE5nSUlDMFVDQVg0QmZBSitFQk5FQUFBQUFBQkFqMENqSWdLWlJBQUFBQUFBQU9CRFl3UkFJQUt3REFFTFFvQ0FnSUNBZ0lDQWdIOExJUUVnQUFSQUlBQWdBVGNEQUFzZ0FRc1NBQ0FBSkFNZ0FTUUVJQUlrQlNBREpBWUw4Z0lDQTM4QmZDTUFRUkJySWdNa0FBSjlJQUM4SWdKQi8vLy8vd2R4SWdGQjJwK2srZ05OQkVCREFBQ0FQeUFCUVlDQWdNd0RTUTBCR2lBQXV4REFBUXdCQ3lBQlFkR243WU1FVFFSQUlBRkI1SmZiZ0FSUEJFQkVHQzFFVlBzaENVQkVHQzFFVlBzaENjQWdBa0VBU0JzZ0FMdWdFTUFCakF3Q0N5QUF1eUVFSUFKQkFFZ0VRQ0FFUkJndFJGVDdJZmsvb0JDL0FRd0NDMFFZTFVSVSt5SDVQeUFFb1JDL0FRd0JDeUFCUWRYamlJY0VUUVJBSUFGQjROdS9oUVJQQkVCRUdDMUVWUHNoR1VCRUdDMUVWUHNoR2NBZ0FrRUFTQnNnQUx1Z0VNQUJEQUlMSUFKQkFFZ0VRRVRTSVROL2ZOa1N3Q0FBdTZFUXZ3RU1BZ3NnQUx0RTBpRXpmM3paRXNDZ0VMOEJEQUVMSUFBZ0FKTWdBVUdBZ0lEOEIwOE5BQm9nQUNBRFFRaHFFTU1GSVFFZ0F5c0RDQ0VFQWtBQ1FBSkFBa0FnQVVFRGNVRUJhdzREQVFJREFBc2dCQkRBQVF3REN5QUVtaEMvQVF3Q0N5QUVFTUFCakF3QkN5QUVFTDhCQ3lBRFFSQnFKQUFMa1FNQ0EzOERmQ01BUVJCcklnTWtBQUpBSUFDOElnUkIvLy8vL3dkeElnSkIycCtrN2dSTkJFQWdBU0FBdXlJR0lBWkVnOGpKYlRCZjVEK2lSQUFBQUFBQUFEaERvRVFBQUFBQUFBQTR3NkFpQlVRQUFBQlEreUg1djZLZ0lBVkVZMklhWWJRUVViNmlvQ0lIT1FNQUlBZEVBQUFBWVBzaDZiOWpBbjhnQlpsRUFBQUFBQUFBNEVGakJFQWdCYW9NQVF0QmdJQ0FnSGdMSVFJRVFDQUJJQVlnQlVRQUFBQUFBQUR3djZBaUJVUUFBQUJRK3lINXY2S2dJQVZFWTJJYVliUVFVYjZpb0RrREFDQUNRUUZySVFJTUFnc2dCMFFBQUFCZyt5SHBQMlJGRFFFZ0FTQUdJQVZFQUFBQUFBQUE4RCtnSWdWRUFBQUFVUHNoK2IraW9DQUZSR05pR21HMEVGRytvcUE1QXdBZ0FrRUJhaUVDREFFTElBSkJnSUNBL0FkUEJFQWdBU0FBSUFDVHV6a0RBRUVBSVFJTUFRc2dBeUFDSUFKQkYzWkJsZ0ZySWdKQkYzUnJ2cnM1QXdnZ0EwRUlhaUFESUFKQkFVRUFFTVVGSVFJZ0F5c0RBQ0VGSUFSQkFFZ0VRQ0FCSUFXYU9RTUFRUUFnQW1zaEFnd0JDeUFCSUFVNUF3QUxJQU5CRUdva0FDQUNDN2tLQXdaL0JId0JmaU1BUVRCcklnUWtBQUpBQWtBQ1FDQUF2U0lNUWlDSXB5SUNRZi8vLy84SGNTSURRZnJVdllBRVRRUkFJQUpCLy84L2NVSDd3eVJHRFFFZ0EwSDhzb3VBQkUwRVFDQU1RZ0JaQkVBZ0FTQUFSQUFBUUZUN0lmbS9vQ0lJUkRGallocGh0TkM5b0NJQU9RTUFJQUVnQ0NBQW9VUXhZMklhWWJUUXZhQTVBd2hCQVNFQ0RBVUxJQUVnQUVRQUFFQlUreUg1UDZBaUNFUXhZMklhWWJUUVBhQWlBRGtEQUNBQklBZ2dBS0ZFTVdOaUdtRzAwRDJnT1FNSVFYOGhBZ3dFQ3lBTVFnQlpCRUFnQVNBQVJBQUFRRlQ3SVFuQW9DSUlSREZqWWhwaHRPQzlvQ0lBT1FNQUlBRWdDQ0FBb1VReFkySWFZYlRndmFBNUF3aEJBaUVDREFRTElBRWdBRVFBQUVCVSt5RUpRS0FpQ0VReFkySWFZYlRnUGFBaUFEa0RBQ0FCSUFnZ0FLRkVNV05pR21HMDREMmdPUU1JUVg0aEFnd0RDeUFEUWJ1TThZQUVUUVJBSUFOQnZQdlhnQVJOQkVBZ0EwSDhzc3VBQkVZTkFpQU1RZ0JaQkVBZ0FTQUFSQUFBTUg5ODJSTEFvQ0lJUk1xVWs2ZVJEdW05b0NJQU9RTUFJQUVnQ0NBQW9VVEtsSk9ua1E3cHZhQTVBd2hCQXlFQ0RBVUxJQUVnQUVRQUFEQi9mTmtTUUtBaUNFVEtsSk9ua1E3cFBhQWlBRGtEQUNBQklBZ2dBS0ZFeXBTVHA1RU82VDJnT1FNSVFYMGhBZ3dFQ3lBRFFmdkQ1SUFFUmcwQklBeENBRmtFUUNBQklBQkVBQUJBVlBzaEdjQ2dJZ2hFTVdOaUdtRzA4TDJnSWdBNUF3QWdBU0FJSUFDaFJERmpZaHBodFBDOW9Ea0RDRUVFSVFJTUJBc2dBU0FBUkFBQVFGVDdJUmxBb0NJSVJERmpZaHBodFBBOW9DSUFPUU1BSUFFZ0NDQUFvVVF4WTJJYVliVHdQYUE1QXdoQmZDRUNEQU1MSUFOQitzUGtpUVJMRFFFTElBQWdBRVNEeU1sdE1GL2tQNkpFQUFBQUFBQUFPRU9nUkFBQUFBQUFBRGpEb0NJSlJBQUFRRlQ3SWZtL29xQWlDaUFKUkRGallocGh0TkE5b2lJTG9TSUlSQmd0UkZUN0llbS9ZeUVGQW44Z0NabEVBQUFBQUFBQTRFRmpCRUFnQ2FvTUFRdEJnSUNBZ0hnTElRSUNRQ0FGQkVBZ0FrRUJheUVDSUFsRUFBQUFBQUFBOEwrZ0lnbEVNV05pR21HMDBEMmlJUXNnQUNBSlJBQUFRRlQ3SWZtL29xQWhDZ3dCQ3lBSVJCZ3RSRlQ3SWVrL1pFVU5BQ0FDUVFGcUlRSWdDVVFBQUFBQUFBRHdQNkFpQ1VReFkySWFZYlRRUGFJaEN5QUFJQWxFQUFCQVZQc2grYitpb0NFS0N5QUJJQW9nQzZFaUFEa0RBQUpBSUFOQkZIWWlCU0FBdlVJMGlLZEIvdzl4YTBFUlNBMEFJQUVnQ2lBSlJBQUFZQnBodE5BOW9pSUFvU0lJSUFsRWMzQURMb29ab3p1aUlBb2dDS0VnQUtHaElndWhJZ0E1QXdBZ0JTQUF2VUkwaUtkQi93OXhhMEV5U0FSQUlBZ2hDZ3dCQ3lBQklBZ2dDVVFBQUFBdWlobWpPNklpQUtFaUNpQUpSTUZKSUNXYWczczVvaUFJSUFxaElBQ2hvU0lMb1NJQU9RTUFDeUFCSUFvZ0FLRWdDNkU1QXdnTUFRc2dBMEdBZ01EL0IwOEVRQ0FCSUFBZ0FLRWlBRGtEQUNBQklBQTVBd2hCQUNFQ0RBRUxJQVJCRUdvaUFrRUljaUVISUF4Qy8vLy8vLy8vL3dlRFFvQ0FnSUNBZ0lDd3dRQ0V2eUVBUVFFaEJnTkFJQUlDZnlBQW1VUUFBQUFBQUFEZ1FXTUVRQ0FBcWd3QkMwR0FnSUNBZUF1M0lnZzVBd0FnQUNBSW9VUUFBQUFBQUFCd1FhSWhBQ0FHUVFBaEJpQUhJUUlOQUFzZ0JDQUFPUU1nUVFJaEFnTkFJQUlpQlVFQmF5RUNJQVJCRUdvaUJpQUZRUU4wYWlzREFFUUFBQUFBQUFBQUFHRU5BQXNnQmlBRUlBTkJGSFpCbGdocklBVkJBV3BCQVJERkJTRUNJQVFyQXdBaEFDQU1RZ0JUQkVBZ0FTQUFtamtEQUNBQklBUXJBd2lhT1FNSVFRQWdBbXNoQWd3QkN5QUJJQUE1QXdBZ0FTQUVLd01JT1FNSUN5QUVRVEJxSkFBZ0FndWpFUUlEZkE5L0l3QkJzQVJySWdra0FDQUNJQUpCQTJ0QkdHMGlDRUVBSUFoQkFFb2JJaEZCYUd4cUlRd2dCRUVDZEVHUW9nTnFLQUlBSWcwZ0EwRUJheUlMYWtFQVRnUkFJQU1nRFdvaENDQVJJQXRySVFJRFFDQUpRY0FDYWlBS1FRTjBhaUFDUVFCSUJIeEVBQUFBQUFBQUFBQUZJQUpCQW5SQm9LSURhaWdDQUxjTE9RTUFJQUpCQVdvaEFpQUtRUUZxSWdvZ0NFY05BQXNMSUF4QkdHc2hFRUVBSVFnZ0RVRUFJQTFCQUVvYklRb2dBMEVBVENFT0EwQUNRQ0FPQkVCRUFBQUFBQUFBQUFBaEJRd0JDeUFJSUF0cUlROUJBQ0VDUkFBQUFBQUFBQUFBSVFVRFFDQUFJQUpCQTNScUt3TUFJQWxCd0FKcUlBOGdBbXRCQTNScUt3TUFvaUFGb0NFRklBSkJBV29pQWlBRFJ3MEFDd3NnQ1NBSVFRTjBhaUFGT1FNQUlBZ2dDa1lnQ0VFQmFpRUlSUTBBQzBFdklBeHJJUk5CTUNBTWF5RVNJQXhCR1dzaEZDQU5JUWdDUUFOQUlBa2dDRUVEZEdvckF3QWhCVUVBSVFJZ0NDRUtJQWhCQUVvRVFBTkFJQWxCNEFOcUlBSkJBblJxQW44Q2Z5QUZSQUFBQUFBQUFIQStvaUlHbVVRQUFBQUFBQURnUVdNRVFDQUdxZ3dCQzBHQWdJQ0FlQXUzSWdaRUFBQUFBQUFBY01HaUlBV2dJZ1daUkFBQUFBQUFBT0JCWXdSQUlBV3FEQUVMUVlDQWdJQjRDellDQUNBSklBcEJBV3NpQ2tFRGRHb3JBd0FnQnFBaEJTQUNRUUZxSWdJZ0NFY05BQXNMQW44Z0JTQVFFT01CSWdVZ0JVUUFBQUFBQUFEQVA2S2NSQUFBQUFBQUFDREFvcUFpQlpsRUFBQUFBQUFBNEVGakJFQWdCYW9NQVF0QmdJQ0FnSGdMSVE0Z0JTQU90NkVoQlFKQUFrQUNRQUovSUJCQkFFd2lGVVVFUUNBSVFRSjBJQWxxSWdJZ0FpZ0MzQU1pQWlBQ0lCSjFJZ0lnRW5ScklnbzJBdHdESUFJZ0Rtb2hEaUFLSUJOMURBRUxJQkFOQVNBSVFRSjBJQWxxS0FMY0EwRVhkUXNpQzBFQVRBMENEQUVMUVFJaEN5QUZSQUFBQUFBQUFPQS9aZzBBUVFBaEN3d0JDMEVBSVFKQkFDRVBRUUVoQ2lBSVFRQktCRUFEUUNBSlFlQURhaUFDUVFKMGFpSVdLQUlBSVFvQ2Z3SkFJQllnRHdSL1FmLy8vd2NGSUFwRkRRRkJnSUNBQ0FzZ0NtczJBZ0JCQVNFUFFRQU1BUXRCQUNFUFFRRUxJUW9nQWtFQmFpSUNJQWhIRFFBTEN3SkFJQlVOQUVILy8vOERJUUlDUUFKQUlCUU9BZ0VBQWd0Qi8vLy9BU0VDQ3lBSVFRSjBJQWxxSWc4Z0R5Z0MzQU1nQW5FMkF0d0RDeUFPUVFGcUlRNGdDMEVDUncwQVJBQUFBQUFBQVBBL0lBV2hJUVZCQWlFTElBb05BQ0FGUkFBQUFBQUFBUEEvSUJBUTR3R2hJUVVMSUFWRUFBQUFBQUFBQUFCaEJFQkJBQ0VLSUFnaEFnSkFJQWdnRFV3TkFBTkFJQWxCNEFOcUlBSkJBV3NpQWtFQ2RHb29BZ0FnQ25JaENpQUNJQTFLRFFBTElBcEZEUUFnRUNFTUEwQWdERUVZYXlFTUlBbEI0QU5xSUFoQkFXc2lDRUVDZEdvb0FnQkZEUUFMREFNTFFRRWhBZ05BSUFJaUNrRUJhaUVDSUFsQjRBTnFJQTBnQ210QkFuUnFLQUlBUlEwQUN5QUlJQXBxSVFvRFFDQUpRY0FDYWlBRElBaHFJZ3RCQTNScUlBaEJBV29pQ0NBUmFrRUNkRUdnb2dOcUtBSUF0emtEQUVFQUlRSkVBQUFBQUFBQUFBQWhCU0FEUVFCS0JFQURRQ0FBSUFKQkEzUnFLd01BSUFsQndBSnFJQXNnQW10QkEzUnFLd01Bb2lBRm9DRUZJQUpCQVdvaUFpQURSdzBBQ3dzZ0NTQUlRUU4wYWlBRk9RTUFJQWdnQ2tnTkFBc2dDaUVJREFFTEN3SkFJQVZCR0NBTWF4RGpBU0lGUkFBQUFBQUFBSEJCWmdSQUlBbEI0QU5xSUFoQkFuUnFBbjhDZnlBRlJBQUFBQUFBQUhBK29pSUdtVVFBQUFBQUFBRGdRV01FUUNBR3Fnd0JDMEdBZ0lDQWVBc2lBcmRFQUFBQUFBQUFjTUdpSUFXZ0lnV1pSQUFBQUFBQUFPQkJZd1JBSUFXcURBRUxRWUNBZ0lCNEN6WUNBQ0FJUVFGcUlRZ01BUXNDZnlBRm1VUUFBQUFBQUFEZ1FXTUVRQ0FGcWd3QkMwR0FnSUNBZUFzaEFpQVFJUXdMSUFsQjRBTnFJQWhCQW5ScUlBSTJBZ0FMUkFBQUFBQUFBUEEvSUF3UTR3RWhCU0FJUVFCT0JFQWdDQ0VEQTBBZ0NTQURJZ0JCQTNScUlBVWdDVUhnQTJvZ0FFRUNkR29vQWdDM29qa0RBQ0FBUVFGcklRTWdCVVFBQUFBQUFBQndQcUloQlNBQURRQUxJQWdoQ2dOQVJBQUFBQUFBQUFBQUlRVkJBQ0VDSUEwZ0NDQUtheUlBSUFBZ0RVb2JJZ05CQUU0RVFBTkFJQUpCQTNSQjhMY0RhaXNEQUNBSklBSWdDbXBCQTNScUt3TUFvaUFGb0NFRklBSWdBMGNnQWtFQmFpRUNEUUFMQ3lBSlFhQUJhaUFBUVFOMGFpQUZPUU1BSUFwQkFFb2dDa0VCYXlFS0RRQUxDd0pBQWtBQ1FBSkFBa0FnQkE0RUFRSUNBQVFMUkFBQUFBQUFBQUFBSVFZQ1FDQUlRUUJNRFFBZ0NVR2dBV29nQ0VFRGRHb3JBd0FoQlNBSUlRSURRQ0FKUWFBQmFpSURJQUpCQTNScUlBVWdBa0VCYXlJQVFRTjBJQU5xSWdRckF3QWlCeUFISUFXZ0lnV2hvRGtEQUNBRUlBVTVBd0FnQWtFQlN5QUFJUUlOQUFzZ0NFRUJSZzBBSUFoQkEzUWdBMm9yQXdBaEJTQUlJUUlEUUNBSlFhQUJhaUlESUFKQkEzUnFJQVVnQXlBQ1FRRnJJZ0JCQTNScUlnTXJBd0FpQmlBR0lBV2dJZ1dob0RrREFDQURJQVU1QXdBZ0FrRUNTeUFBSVFJTkFBdEVBQUFBQUFBQUFBQWhCZ05BSUFZZ0NVR2dBV29nQ0VFRGRHb3JBd0NnSVFZZ0NFRUNTaUFJUVFGcklRZ05BQXNMSUFrckE2QUJJUVVnQ3cwQ0lBRWdCVGtEQUNBSkt3T29BU0VGSUFFZ0Jqa0RFQ0FCSUFVNUF3Z01Bd3RFQUFBQUFBQUFBQUFoQlNBSVFRQk9CRUFEUUNBSUlnQkJBV3NoQ0NBRklBbEJvQUZxSUFCQkEzUnFLd01Bb0NFRklBQU5BQXNMSUFFZ0Jab2dCU0FMR3prREFBd0NDMFFBQUFBQUFBQUFBQ0VGSUFoQkFFNEVRQ0FJSVFNRFFDQURJZ0JCQVdzaEF5QUZJQWxCb0FGcUlBQkJBM1JxS3dNQW9DRUZJQUFOQUFzTElBRWdCWm9nQlNBTEd6a0RBQ0FKS3dPZ0FTQUZvU0VGUVFFaEFpQUlRUUJLQkVBRFFDQUZJQWxCb0FGcUlBSkJBM1JxS3dNQW9DRUZJQUlnQ0VjZ0FrRUJhaUVDRFFBTEN5QUJJQVdhSUFVZ0N4czVBd2dNQVFzZ0FTQUZtamtEQUNBSkt3T29BU0VGSUFFZ0JwbzVBeEFnQVNBRm1qa0RDQXNnQ1VHd0JHb2tBQ0FPUVFkeEMrUUNBZ04vQTMwZ0FMd2lBa0gvLy8vL0IzRWlBVUdBZ0lEa0JFOEVRQ0FBUTlvUHlUOGdBSmdnQUx4Qi8vLy8vd2R4UVlDQWdQd0hTeHNQQ3dKQUFuOGdBVUgvLy8vMkEwMEVRRUYvSUFGQmdJQ0F6QU5QRFFFYURBSUxJQUNMSVFBZ0FVSC8vOS84QTAwRVFDQUJRZi8vdi9rRFRRUkFJQUFnQUpKREFBQ0F2NUlnQUVNQUFBQkFrcFVoQUVFQURBSUxJQUJEQUFDQXY1SWdBRU1BQUlBL2twVWhBRUVCREFFTElBRkIvLy92Z0FSTkJFQWdBRU1BQU1DL2tpQUFRd0FBd0QrVVF3QUFnRCtTbFNFQVFRSU1BUXREQUFDQXZ5QUFsU0VBUVFNTElBQWdBSlFpQlNBRmxDSUVJQVJEUnhMYXZaUkRtTXBNdnBLVUlRWWdCU0FFSUFSREpheDhQWlJERGZVUlBwS1VRNm1xcWo2U2xDRUVJQUZCLy8vLzlnTk5CRUFnQUNBQUlBWWdCSktVa3c4TFFRSjBJZ0ZCOEtFRGFpb0NBQ0FBSUFZZ0JKS1VJQUZCZ0tJRGFpb0NBSk1nQUpPVElnQ01JQUFnQWtFQVNCc2hBQXNnQUF2YUNnSUtmd0Y5SUFNb0FoZ2hEQUpBUVFFZ0FuUkJvT0FCY1VVZ0FrRU9TM0pGQkVCQkFDQURLQUlRSWdKcklnY2dBeWdDRkVFQmFpSUlJQWNnQ0VvYklRNUJBQ0FES0FJSUlnaHJJZ2tnQXlnQ0RFRUJhaUlMSUFrZ0Mwb2JJUThnQUNBRklBSkJBWFJySUFGc2FpQUVhaUFJUVFGMGF5RUZJQUZCQVhRaEFVRUFJUXNEUUNBSklRSWdCU0VJSUFjZ0RrWU5BZ05BSUFJZ0QwWkZCRUFnREM4QkFDSUVRWUFnUndSQUlBc2dDQzBBQUNJQWFpRUxJQUFnQkd3Z0RXb2hEU0FBSUFCc0lBcHFJUW9MSUFKQkFXb2hBaUFNUVFKcUlRd2dDRUVDYWlFSURBRUxDeUFIUVFGcUlRY2dBU0FGYWlFRkRBQUxBQXNnQWtFQlRRUkFRUUFnQXlnQ0VHc2lCeUFES0FJVVFRRnFJZ0lnQWlBSFNCc2hEZ05BSUFjZ0RrWU5Ba0VBSUFNb0FnZ2lBbXNpQ0NBREtBSU1RUUZxSWdrZ0NDQUpTaHNoRHlBQUlBZEJBWFFnQldvZ0FXd2dCR29nQWtFQmRHdEJBMnhxSVFJRFFDQUlJQTlHUlFSQUlBd3ZBUUFpRUVHQUlFY0VRQ0FMSUFJdEFBSWdBaTBBQVNBQ0xRQUFhbXBCQTI0aUNXb2hDeUFKSUJCc0lBMXFJUTBnQ1NBSmJDQUthaUVLQ3lBSVFRRnFJUWdnREVFQ2FpRU1JQUpCQm1vaEFnd0JDd3NnQjBFQmFpRUhEQUFMQUFzZ0FrRitjVUVDUmdSQVFRQWdBeWdDRUdzaUJ5QURLQUlVUVFGcUlnSWdBaUFIU0JzaERnTkFJQWNnRGtZTkFrRUFJQU1vQWdnaUFtc2lDQ0FES0FJTVFRRnFJZ2tnQ0NBSlNoc2hEeUFBSUFkQkFYUWdCV29nQVd3Z0JHcEJBblFnQWtFRGRHdHFJUUlEUUNBSUlBOUdSUVJBSUF3dkFRQWlFRUdBSUVjRVFDQUxJQUl0QUFJZ0FpMEFBU0FDTFFBQWFtcEJBMjRpQ1dvaEN5QUpJQkJzSUExcUlRMGdDU0FKYkNBS2FpRUtDeUFJUVFGcUlRZ2dERUVDYWlFTUlBSkJDR29oQWd3QkN3c2dCMEVCYWlFSERBQUxBQXNnQWtGOWNVRUVSZ1JBUVFBZ0F5Z0NFR3NpQnlBREtBSVVRUUZxSWdJZ0FpQUhTQnNoRGdOQUlBY2dEa1lOQWtFQUlBTW9BZ2dpQW1zaUNDQURLQUlNUVFGcUlna2dDQ0FKU2hzaER5QUFJQWRCQVhRZ0JXb2dBV3dnQkdwQkFuUWdBa0VEZEd0cUlRSURRQ0FJSUE5R1JRUkFJQXd2QVFBaUVFR0FJRWNFUUNBTElBSXRBQU1nQWkwQUFpQUNMUUFCYW1wQkEyNGlDV29oQ3lBSklCQnNJQTFxSVEwZ0NTQUpiQ0FLYWlFS0N5QUlRUUZxSVFnZ0RFRUNhaUVNSUFKQkNHb2hBZ3dCQ3dzZ0IwRUJhaUVIREFBTEFBc0NRQUpBSUFKQkIyc09BZ0FCQWd0QkFDQURLQUlRYXlJSElBTW9BaFJCQVdvaUFpQUNJQWRJR3lFT0EwQWdCeUFPUmcwQ1FRQWdBeWdDQ0NJSWF5SUNJQU1vQWd4QkFXb2lDU0FDSUFsS0d5RVBJQUFnQjBFQmRDQUZhaUFCYkNBRWFrRUJkQ0FJUVFKMGEyb2hDQU5BSUFJZ0QwWkZCRUFnREM4QkFDSVFRWUFnUndSQUlBc2dDQzBBQVNJSmFpRUxJQWtnRUd3Z0RXb2hEU0FKSUFsc0lBcHFJUW9MSUFKQkFXb2hBaUFNUVFKcUlRd2dDRUVFYWlFSURBRUxDeUFIUVFGcUlRY01BQXNBQzBFQUlBTW9BaEJySWdjZ0F5Z0NGRUVCYWlJQ0lBSWdCMGdiSVE0RFFDQUhJQTVHRFFGQkFDQURLQUlJSWdocklnSWdBeWdDREVFQmFpSUpJQUlnQ1VvYklROGdBQ0FIUVFGMElBVnFJQUZzSUFScVFRRjBJQWhCQW5ScmFpRUlBMEFnQWlBUFJrVUVRQ0FNTHdFQUloQkJnQ0JIQkVBZ0N5QUlMUUFBSWdscUlRc2dDU0FRYkNBTmFpRU5JQWtnQ1d3Z0Ntb2hDZ3NnQWtFQmFpRUNJQXhCQW1vaERDQUlRUVJxSVFnTUFRc0xJQWRCQVdvaEJ3d0FDd0FMUVFBaERDQUdJQXNnQzJ3Z0F5Z0NKQ0lBYlNJQklBcEhCSDhnRFNBREtBSWdJQXRzSUFCdGEwSGtBR3dnQXlnQ0hHMUI1QUJzQW44Z0NpQUJhN0tSSWhHTFF3QUFBRTlkQkVBZ0VhZ01BUXRCZ0lDQWdIZ0xiUVZCQUFzMkFnQUxraElCRlg4akFFR0FDMnNpRFNRQUlBTkJBM1FpQlVIZ0FYRkJCSEloRHlBQ1FRSjBJZ3hCNEFGeFFRSnlJUkFnQVVFRGRDSUVRZUFCY1VFRWNpRVJJQUFvQXVRREtBSVlJUmdDUUNBQUtBS0VBU0lMUVFCTUJFQkJBQ0VMREFFTElBVkJISElpQ2lBUGFrRUJkaUVUSUF4QkhuSWlEQ0FRYWtFQmRpRVVJQVJCSEhJaUJ5QVJha0VCZGlFVklBQW9Bb2dCSWdVb0FnZ2hGaUFGS0FJRUlSY2dCU2dDQUNFU1FRQWhCRUgvLy8vL0J5RUlBMEFDZnlBUklBUWdFbW90QUFBaUNVc0VRQ0FKSUJGclFRRjBJZ1VnQld3aEJpQUhEQUVMSUFjZ0NVa0VRQ0FKSUFkclFRRjBJZ1VnQld3aEJpQVJEQUVMUVFBaEJpQVJJQWNnQ1NBVlN4c0xJUVVnQ1NBRmEwRUJkQ0lGSUFWc0lRNENmeUFRSUFRZ0Yyb3RBQUFpQ1VzRVFDQUpJQkJyUVFOc0lnVWdCV3dnQm1vaEJpQU1EQUVMSUFrZ0RFc0VRQ0FKSUF4clFRTnNJZ1VnQld3Z0Jtb2hCaUFRREFFTElCQWdEQ0FKSUJSTEd3c2hCU0FKSUFWclFRTnNJZ1VnQld3Z0Rtb0NmeUFQSUFRZ0Ztb3RBQUFpQ1VzRVFDQUpJQTlySWdVZ0JXd2dCbW9oQmlBS0RBRUxJQWtnQ2tzRVFDQUpJQXBySWdVZ0JXd2dCbW9oQmlBUERBRUxJQThnQ2lBSklCTkxHd3NoQlNBTlFZQURhaUFFUVFKMGFpQUdOZ0lBSUFrZ0JXc2lCU0FGYkdvaUJTQUlJQVVnQ0VnYklRZ2dCRUVCYWlJRUlBdEhEUUFMSUF0QkFYRUNRQ0FMUVFGR0JFQkJBQ0VMUVFBaEJBd0JDeUFMUWY3Ly8vOEhjU0VLUVFBaEMwRUFJUVJCQUNFR0EwQWdDQ0FOUVlBRGFpQUVRUUowYWlnQ0FFNEVRQ0FOUVlBQmFpQUxhaUFFT2dBQUlBdEJBV29oQ3dzZ0NDQU5RWUFEYWlBRVFRRnlJZ3hCQW5ScUtBSUFUZ1JBSUExQmdBRnFJQXRxSUF3NkFBQWdDMEVCYWlFTEN5QUVRUUpxSVFRZ0JrRUNhaUlHSUFwSERRQUxDMFVOQUNBTlFZQURhaUFFUVFKMGFpZ0NBQ0FJU2cwQUlBMUJnQUZxSUF0cUlBUTZBQUFnQzBFQmFpRUxDMEgvQUNFR0lBMUJnQU5xSVFRRFFDQUVRdi8vLy8vMy8vLy8vd0EzQWhnZ0JFTC8vLy8vOS8vLy8vOEFOd0lRSUFSQy8vLy8vL2YvLy8vL0FEY0NDQ0FFUXYvLy8vLzMvLy8vL3dBM0FnQWdCRUVnYWlFRUlBWkJCMFlnQmtFSWF5RUdSUTBBQ3lBTFFRQktCRUJCQUNFV0EwQWdEeUFOUVlBQmFpQVdhaTBBQUNJSklBQW9Bb2dCSWdvb0FnaHFMUUFBYXlJSFFRUjBJZ1ZCd0FKcUlSTWdCVUhBQVdvaEZDQUZRVUJySVJVZ0VTQUtLQUlBSUFscUxRQUFheUlJUVFaMEloZEJnQUpxSVJKQkJ5RUZJQTFCZ0FOcUlRUWdEU0VHSUJBZ0NpZ0NCQ0FKYWkwQUFHc2lEa0hJQUd4QmtBRnFJZ3doQ2lBT1FRTnNJZzRnRG13Z0NFRUJkQ0lJSUFoc2FpQUhJQWRzYWlJT0lRZ0RRQ0FFS0FJQUlBaEtCRUFnQkNBSU5nSUFJQVlnQ1RvQUFBc2dDQ0FWYWlJSElBUW9BZ1JJQkVBZ0JDQUhOZ0lFSUFZZ0NUb0FBUXNnQnlBVWFpSUhJQVFvQWdoSUJFQWdCQ0FITmdJSUlBWWdDVG9BQWdzZ0J5QVRhaUlISUFRb0FneElCRUFnQkNBSE5nSU1JQVlnQ1RvQUF3c2dCU0lIUVFGcklRVWdDQ0FLYWlFSUlBWkJCR29oQmlBRVFSQnFJUVFnQ2tHZ0Ftb2hDaUFIRFFBTFFRY2hCU0FNSVFvZ0RpQVNhaUlTSVFnRFFDQUVLQUlBSUFoS0JFQWdCQ0FJTmdJQUlBWWdDVG9BQUFzZ0NDQVZhaUlISUFRb0FnUklCRUFnQkNBSE5nSUVJQVlnQ1RvQUFRc2dCeUFVYWlJSElBUW9BZ2hJQkVBZ0JDQUhOZ0lJSUFZZ0NUb0FBZ3NnQnlBVGFpSUhJQVFvQWd4SUJFQWdCQ0FITmdJTUlBWWdDVG9BQXdzZ0JTSUhRUUZySVFVZ0NDQUthaUVJSUFaQkJHb2hCaUFFUVJCcUlRUWdDa0dnQW1vaENpQUhEUUFMUVFjaEJTQU1JUW9nRWlBWGFrR0FCbW9pRWlFSUEwQWdCQ2dDQUNBSVNnUkFJQVFnQ0RZQ0FDQUdJQWs2QUFBTElBZ2dGV29pQnlBRUtBSUVTQVJBSUFRZ0J6WUNCQ0FHSUFrNkFBRUxJQWNnRkdvaUJ5QUVLQUlJU0FSQUlBUWdCellDQ0NBR0lBazZBQUlMSUFjZ0Uyb2lCeUFFS0FJTVNBUkFJQVFnQnpZQ0RDQUdJQWs2QUFNTElBVWlCMEVCYXlFRklBZ2dDbW9oQ0NBR1FRUnFJUVlnQkVFUWFpRUVJQXBCb0FKcUlRb2dCdzBBQ3lBU0lCZHFRWUFLYWlFSVFRY2hCUU5BSUFRb0FnQWdDRW9FUUNBRUlBZzJBZ0FnQmlBSk9nQUFDeUFJSUJWcUlnb2dCQ2dDQkVnRVFDQUVJQW8yQWdRZ0JpQUpPZ0FCQ3lBS0lCUnFJZ29nQkNnQ0NFZ0VRQ0FFSUFvMkFnZ2dCaUFKT2dBQ0N5QUtJQk5xSWdvZ0JDZ0NERWdFUUNBRUlBbzJBZ3dnQmlBSk9nQURDeUFGSWdwQkFXc2hCU0FJSUF4cUlRZ2dCa0VFYWlFR0lBUkJFR29oQkNBTVFhQUNhaUVNSUFvTkFBc2dGa0VCYWlJV0lBdEhEUUFMQ3lBQlFSeHhJUXBCQUNFRklBMGhCQ0FEUVJ4eFFRRjBJUUFnQWtFNGNTSURRUUZ5UVFaMElRd2dBMEVDY2tFR2RDRUdJQU5CQTNKQkJuUWhEeUFEUVFSeVFRWjBJUkFnQTBFRmNrRUdkQ0VSSUFOQkJuSkJCblFoQnlBQ1FRZHlRUVowSVFnRFFDQVlJQVVnQ25KQkFuUnFLQUlBSWdFZ0EwRUdkR29nQUdvaUFpQUVMUUFBUVFGcU93RUFJQUlnQkMwQUFVRUJhanNCQWlBQ0lBUXRBQUpCQVdvN0FRUWdBaUFFTFFBRFFRRnFPd0VHSUFFZ0RHb2dBR29pQWlBRUxRQUVRUUZxT3dFQUlBSWdCQzBBQlVFQmFqc0JBaUFDSUFRdEFBWkJBV283QVFRZ0FpQUVMUUFIUVFGcU93RUdJQUVnQm1vZ0FHb2lBaUFFTFFBSVFRRnFPd0VBSUFJZ0JDMEFDVUVCYWpzQkFpQUNJQVF0QUFwQkFXbzdBUVFnQWlBRUxRQUxRUUZxT3dFR0lBRWdEMm9nQUdvaUFpQUVMUUFNUVFGcU93RUFJQUlnQkMwQURVRUJhanNCQWlBQ0lBUXRBQTVCQVdvN0FRUWdBaUFFTFFBUFFRRnFPd0VHSUFFZ0VHb2dBR29pQWlBRUxRQVFRUUZxT3dFQUlBSWdCQzBBRVVFQmFqc0JBaUFDSUFRdEFCSkJBV283QVFRZ0FpQUVMUUFUUVFGcU93RUdJQUVnRVdvZ0FHb2lBaUFFTFFBVVFRRnFPd0VBSUFJZ0JDMEFGVUVCYWpzQkFpQUNJQVF0QUJaQkFXbzdBUVFnQWlBRUxRQVhRUUZxT3dFR0lBRWdCMm9nQUdvaUFpQUVMUUFZUVFGcU93RUFJQUlnQkMwQUdVRUJhanNCQWlBQ0lBUXRBQnBCQVdvN0FRUWdBaUFFTFFBYlFRRnFPd0VHSUFFZ0NHb2dBR29pQVNBRUxRQWNRUUZxT3dFQUlBRWdCQzBBSFVFQmFqc0JBaUFCSUFRdEFCNUJBV283QVFRZ0FTQUVMUUFmUVFGcU93RUdJQVJCSUdvaEJDQUZRUUZxSWdWQkJFY05BQXNnRFVHQUMyb2tBQXU3QXdFRWZ5QUFLQUxrQXlBQVFRRkIvQThnQUNnQ0JDZ0NBQkVFQUNJQVFmd0hhaUlCTmdJb0lBQkMvLy8vL3c4M0F2Z0hJQUJDZ1lDQWdDQTNBb0FJSUFCQ2c0Q0FnTUFBTndLSUNDQUFRdjMvLy85dk53THdCeUFBUW9XQWdJRGdBRGNDa0FnZ0FFTDcvLy8vVHpjQzZBY2dBRUtIZ0lDQWdBRTNBcGdJSUFCQytmLy8vNjkvTndMZ0J5QUFRb21BZ0lDZ0FUY0NvQWdnQUVMMy8vLy9qMzgzQXRnSElBQkNpNENBZ01BQk53S29DQ0FBUXZYLy8vL3ZmamNDMEFjZ0FFS05nSUNBNEFFM0FyQUlJQUJDOC8vLy84OStOd0xJQnlBQVFRODJBcmdJSUFCQzhmLy8vNjkrTndMQUIwRVFJUUJCRUNFREEwQWdBU0FEUVFKMElnSnFJQUEyQWdBZ0FTQUNhMEVBSUFCcklnUTJBZ0FnQVNBQ1FRUnlJZ0pxSUFBMkFnQWdBU0FDYXlBRU5nSUFJQUJCQVdvaEFFRXdJUUlnQTBFQ2FpSURRVEJIRFFBTEEwQWdBU0FDUVFKMElnQnFRU0EyQWdBZ0FTQUFhMEZnTmdJQUlBRWdBRUVFY2lJRGFrRWdOZ0lBSUFFZ0EydEJZRFlDQUNBQklBQkJDSElpQTJwQklEWUNBQ0FCSUFOclFXQTJBZ0FnQVNBQVFReHlJZ0JxUVNBMkFnQWdBU0FBYTBGZ05nSUFJQUpCQkdvaUFrR0FBa2NOQUFzTGx3TUJESDhnQUNnQzVBTWlCQ0FBS0FKWUlnRkJBVVlpQXpZQ0hDQUVJQUJCQVVIK0JVR0FBaUFER3lBQUtBSjRJQUFvQWdRb0FnZ1JDQUEyQWhnZ0FDZ0NlRUVBU2dSQUlBUkJJR29oQ3lBRUtBSVVJUVlnQVVFQlJ5RUtBMEFnQmlBTElBZEJBblFpQVdvb0FnQWlBMjBoQmlBRUtBSVlJUUlnQ2tVRVFDQUJJQUpxSWdJZ0FpZ0NBRUgvQVdvMkFnQWdCQ2dDR0NFQ0N5QURRZjRCYWlJSUlBTkJBWFJCQW1zaUNXMGhCU0FCSUFKcUtBSUFJUU5CQUNFQlFRQWhBZ05BSUFJZ0JVb0VRQU5BSUFJZ0NDQUJRUUZxSWdGQi9nTnNhaUFKYlNJRlNnMEFDd3NnQWlBRGFpQUJJQVpzT2dBQUlBSkJBV29pQWtHQUFrY05BQXNnQ2tVRVFDQURRWUVDYWlFRklBTkJnQUpxSVFnZ0EwSC9BV29oQ1NBRExRQUFJUUpCQVNFQkEwQWdBeUFCYXlJTUlBSTZBQUFnQVNBSmFpQURMUUQvQVRvQUFDQURJQUZCZjNOcUlBSTZBQUFnQVNBSWFpQURMUUQvQVRvQUFDQU1RUUpySUFJNkFBQWdBU0FGYWlBRExRRC9BVG9BQUNBQlFRTnFJZ0ZCZ0FKSERRQUxDeUFIUVFGcUlnY2dBQ2dDZUVnTkFBc0xDeG9CQVg4Z0FDZ0NBQ0lCUVRNMkFoUWdBQ0FCS0FJQUVRRUFDNFVFQVF0L1FmQ1Q2OXdESUFKdUlRZ2dBQ2dDQkNBQ1FmR1Q2OXdEVHdSQUlBQW9BZ0FpQmtISUFEWUNGQ0FBSUFZb0FnQVJBUUFMSUFnZ0F5QURJQWhLR3lJSU5nSlFJQUFnQVNBRFFRSjBFTVVDSVFrZ0F3UkFJQWxCREdvaEN5QUpRUWhxSVF3Z0NVRUVhaUVOSUFGQkFra2hEa0VBSVFZRFFDQUFLQUlFSVFRZ0NDQURJQVpySWdVZ0JTQUlTeHNpQ0NBQ2JDSUZRZkdUNjl3RFR3UkFJQUFvQWdCQ3VJQ0FnREEzQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFPUlFSQUlBQW9BZ0FpQnlBQk5nSVlJQWRCRHpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFWQkIycEJlSEVpQjBFUWFpSUtFRTBpQlVVRVFDQUFLQUlBUXJpQWdJREFBRGNDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQVFnQkNnQ1RDQUthallDVENBRUlBRkJBblJxSWdRb0Fqd2hDaUFGUVFBMkFnZ2dCU0FITmdJRUlBVWdDallDQUNBRUlBVTJBandDUUNBSVJRMEFJQVZCRUdvaEJFRUFJUWNnQ0NJRlFRTnhJZ29FUUFOQUlBa2dCa0VDZEdvZ0JEWUNBQ0FGUVFGcklRVWdBaUFFYWlFRUlBWkJBV29oQmlBSFFRRnFJZ2NnQ2tjTkFBc0xJQWhCQkVrTkFBTkFJQWtnQmtFQ2RDSUhhaUFFTmdJQUlBY2dEV29nQWlBRWFpSUVOZ0lBSUFjZ0RHb2dBaUFFYWlJRU5nSUFJQWNnQzJvZ0FpQUVhaUlFTmdJQUlBWkJCR29oQmlBQ0lBUnFJUVFnQlVFRWF5SUZEUUFMQ3lBRElBWkxEUUFMQ3lBSkM0c0VBUXgvUWZDVDY5d0RJQUpCQjNRaUMyNGhCU0FBS0FJRUlBdEI4WlByM0FOUEJFQWdBQ2dDQUNJR1FjZ0FOZ0lVSUFBZ0JpZ0NBQkVCQUFzZ0JTQURJQU1nQlVvYklnVTJBbEFnQUNBQklBTkJBblFReFFJaENDQURCRUFnQ0VFTWFpRU1JQWhCQ0dvaERTQUlRUVJxSVE0Z0FVRUNTU0VQSUFKQkIzUWhDVUVBSVFZRFFDQUFLQUlFSVFRZ0N5QUZJQU1nQm1zaUFpQUNJQVZMR3lJRmJDSUhRZkdUNjl3RFR3UkFJQUFvQWdCQ3VJQ0FnREEzQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFQUlFSQUlBQW9BZ0FpQWlBQk5nSVlJQUpCRHpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFkQkVISWlDaEJOSWdKRkJFQWdBQ2dDQUVLNGdJQ0F3QUEzQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFFSUFRb0Frd2dDbW8yQWt3Z0JDQUJRUUowYWlJRUtBSThJUW9nQWtFQU5nSUlJQUlnQnpZQ0JDQUNJQW8yQWdBZ0JDQUNOZ0k4QWtBZ0JVVU5BQ0FDUVJCcUlRSkJBQ0VISUFVaEJDQUZRUU54SWdvRVFBTkFJQWdnQmtFQ2RHb2dBallDQUNBRVFRRnJJUVFnQmtFQmFpRUdJQUlnQ1dvaEFpQUhRUUZxSWdjZ0NrY05BQXNMSUFWQkJFa05BQU5BSUFnZ0JrRUNkQ0lIYWlBQ05nSUFJQWNnRG1vZ0FpQUphaUlDTmdJQUlBY2dEV29nQWlBSmFpSUNOZ0lBSUFjZ0RHb2dBaUFKYWlJQ05nSUFJQUlnQ1dvaEFpQUdRUVJxSVFZZ0JFRUVheUlFRFFBTEN5QURJQVpMRFFBTEN5QUlDNGNKQWd0L0FuMGpBRUV3YXlJSEpBQWdCMEtJZ0lDQUVEY0NLQ0FISUFBMkFpUWdCMEVCTmdJZ0lBY2dBellDSENBSElBRTJBaGdnQjBFSU5nSVVJQWNnQXpZQ0VDQUhJQUkyQWd3Q1FBSi9JQWNvQWhRZ0J5Z0NFQkRyQmlJQUJFQkJmeUVHQWtBZ0FDZ0NCQ0lDSUFjb0FoUkhEUUFnQUNnQ0NDSUJJQWNvQWhCSERRQkJBQ0VHSUFKQkFDQUNRUUJLR3lFSUlBRkJBQ0FCUVFCS0d5RUpJQUFvQWdBaEEwRUFJUUVEUUNBQklBaEdEUUVnQnlnQ0RDQUJRUUowYWlFRVFRQWhCUU5BSUFVZ0NVY0VRQ0FESUFRcUFnQTRBZ0FnQlVFQmFpRUZJQU5CQkdvaEF5QUVJQUpCQW5ScUlRUU1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBQWdCa0VBVGcwQkdpQUFFR1VMUVFBTElnMUZCRUJCZnlFQURBRUxBa0FnRFNBSFFReHFFTEFHSWd0RkJFQkJmeUVBREFFTEFrQWdEU0FIUVJocUVMQUdJZzVGQkVCQmZ5RUFEQUVMUVFBaEFFRUFJUU1qQUVIUUQyc2lDU1FBUVg4aEFRSkFJQXNvQWdRaUJrSDBBMG9OQUNBTEtBSUFJUWdDUUFKQUlBWU9BZ0lBQVFzZ0NFTUFBSUEvSUFncUFnQ1ZPQUlBUVFBaEFRd0JDeUFHUVFBZ0JrRUFTaHNoREVFQUlRRURRQ0FCSUF4R0JFQURRQ0FESUF4R0JFQkJBQ0VEQTBBQ1FDQU1JQU1pQVVjRVFBTkFJQUVnQmtZRVFDQUdJUUVNQXdzZ0NTQUJRUUowYWlnQ0FDQURSZzBDSUFGQkFXb2hBUXdBQ3dBTFFRQkJmeUFJR3lFQkRBWUxJQWtnQVVFQ2RDSUNhaUFKSUFOQkFuUWlBV29vQWdBMkFnQWdBU0FJYWlFQklBSWdDR29oQkVFQUlRVURRQ0FGSUF4SEJFQWdCQ29DQUNFUElBUWdBU29DQURnQ0FDQUJJQTg0QWdBZ0JVRUJhaUVGSUFFZ0JrRUNkQ0lDYWlFQklBSWdCR29oQkF3QkN3c2dBMEVCYWlFRERBQUxBQXREQUFBQUFDRVBRWDhoQlNBSUlBTWlBU0FHYkVFQ2RHb2lBaUVFQTBBZ0FTQUdSd1JBSUFRcUFnQ0xJaEFnRHlBUElCQmRJZ29iSVE4Z0FTQUZJQW9iSVFVZ0FVRUJhaUVCSUFRZ0JrRUNkR29oQkF3QkN3dEJmeUVCSUFWQmYwWWdEMFAvNXRzdVgzSU5BeUFKSUFWQkFuUnFJZ0VvQWdBaEJDQUJJQWtnQTBFQ2RHb2lBU2dDQURZQ0FDQUJJQVEyQWdBZ0NDQUZJQVpzUVFKMGFpRUJRUUFoQlNBQ0lRUURRQ0FGSUFaSEJFQWdBU29DQUNFUElBRWdCQ29DQURnQ0FDQUVJQTg0QWdBZ0JVRUJhaUVGSUFSQkJHb2hCQ0FCUVFScUlRRU1BUXNMSUFJcUFnQWhEMEVCSVFRZ0FpRUJBMEFnQkNBR1J3UkFJQUVnQVNvQ0JDQVBsVGdDQUNBRVFRRnFJUVFnQVVFRWFpRUJEQUVMQ3lBQlF3QUFnRDhnRDVVNEFnQkJBQ0VLQTBBZ0JpQUtSd1JBSUFNZ0NrY0VRQ0FJSUFZZ0NteEJBblJxSWdFcUFnQ01JUTlCQVNFRUlBSWhCUU5BSUFRZ0JrY0VRQ0FCSUE4Z0JTb0NBSlFnQVNvQ0JKSTRBZ0FnQlVFRWFpRUZJQVJCQVdvaEJDQUJRUVJxSVFFTUFRc0xJQUVnQlNvQ0FDQVBsRGdDQUFzZ0NrRUJhaUVLREFFTEN5QURRUUZxSVFNTUFBc0FCU0FKSUFGQkFuUnFJQUUyQWdBZ0FVRUJhaUVCREFFTEFBc0FDeUFKUWRBUGFpUUFBa0FnQVVFQVNBUkFRWDhoQUF3QkN5QUhRU1JxSUFzZ0RoQ2NCaG9MSUE0UVpRc2dDeEJsQ3lBTkVHVUxJQWRCTUdva0FDQUFDMFVCQW4wZ0FTb0NBQ0FBS2dJQUlnT1RJQUlxQWdRZ0FDb0NCQ0lFazVRZ0Fpb0NBQ0FEa3lBQktnSUVJQVNUbEpOREFBQUFQNVFpQTR3Z0F5QURRd0FBQUFCZEd3dFNBQ0FBUWdBM0FtZ2dBRUh1QVRZQ0VDQUFRZThCTmdJTUlBQkI4QUUyQWdnZ0FFSHhBVFlDQkNBQVFmSUJOZ0lBSUFCQ0FEY0NmQ0FBUXY0QU53SjBJQUJCb0pFRE5nSndJQUJCQURZQ0ZDQUFDNUVOQXc1OUJuOEJmaU1BUVNCckloVWtBQUpBQWtBZ0FrRUFTQTBBQWtBQ1FBSkFBa0FDUUNBQ0RnUUFBUUlEQkFzZ0JVRUNiYkloQ1NBRVFRSnRzaUVLSUFWQkNHMnlJUXNnQkVFSWJiSWhEQ0FGUVFkc1FRaHRzaUVOSUFSQkIyeEJDRzJ5SVE1QkFDRUNRWDhoQXdOQUFrQUNRQUpBSUFBZ0FrRVliR29pQVNnQ0RFRUJhZzRDQWdBQkN5QUJLZ0lRSWdZZ0RGMGdCaUFPWG5JTkFDQUJLZ0lVSWdjZ0MxMGdCeUFOWG5JTkFDQUdJQXFUSWdZZ0JwUWdCeUFKa3lJR0lBYVVraUlHSUFoZVJRMEFJQUloQXlBR0lRZ0xJQUpCQVdvaEFnd0JDd3RCZnlFQ0lBTkJmMFlOQlNBQUlBTkJHR3hxUVFFMkFnd2dBeUVDREFVTElBVkJDRzJ5SVFrZ0JFRUliYkloQ2lBRlFRZHNRUWh0c2lFTElBUkJCMnhCQ0cyeUlReEJmeUVVUVFBaEFnTkFBa0FDUUFKQUlBQWdBa0VZYkdvaUFTZ0NERUVCYWc0Q0FnQUJDeUFCS2dJUUlnWWdDbDBnQmlBTVhuSU5BQ0FCS2dJVUlnY2dDVjBnQnlBTFhuSU5BQ0FHSUFNcUFnQ1RJZ1lnQnBRZ0J5QURLZ0lFa3lJR0lBYVVraUlHSUFoZVJRMEFJQVloQ0NBQ0lSUUxJQUpCQVdvaEFnd0JDd3RCZnlFQ0lCUkJmMFlOQkNBQUlCUkJHR3hxUVFFMkFnd2dGQ0VDREFRTElBVkJDRzJ5SVFrZ0JFRUliYkloQ2lBRlFRZHNRUWh0c2lFTElBUkJCMnhCQ0cyeUlReEJmeUVVUVFBaEFnTkFBa0FDUUFKQUlBQWdBa0VZYkdvaUFTZ0NERUVCYWc0Q0FnQUJDeUFCS2dJUUlnWWdDbDBnQmlBTVhuSU5BQ0FCS2dJVUlnY2dDVjBnQnlBTFhuSU5BQ0FHSUFNcUFnQWlCcE1nQXlvQ0RDQURLZ0lFSWcyVGxDQUhJQTJUSUFNcUFnZ2dCcE9Va3lJR0lBYVVJZ1lnQ0Y1RkRRQWdCaUVJSUFJaEZBc2dBa0VCYWlFQ0RBRUxDMEYvSVFJZ0ZFRi9SZzBESUFBZ0ZFRVliR3BCQVRZQ0RDQVVJUUlNQXdzZ0F5QURRUWhxSUJWQkhHb2dGVUVZYWhEd0F5QURJQU5CRUdvZ0ZVRVVhaUFWUVJCcUVQQURRUUpCQVNBVktnSVVJZ3NnRlNvQ0dDSUpsQ0lJSUJVcUFod2lEQ0FWS2dJUUlncVVJZ2FUUXdBQUFBQmdJaFliSVJkQkFVRUNJQlliSVJnZ0JpQUlreUVQSUFOQkdHb2hHU0FGUVFodHNpRVFJQVJCQ0cyeUlSRWdCVUVIYkVFSWJiSWhFaUFFUVFkc1FRaHRzaUVUSUF1TUlRMGdESXdoRGtGL0lRSkJBQ0VGUXdBQUFBQWhDQU5BQWtBQ1FBSkFJQUFnQlVFWWJHb2lBU2dDREVFQmFnNENBZ0FCQ3lBQktnSVFJZ1lnRVYwZ0JpQVRYbklOQUNBQktnSVVJZ2NnRUYwZ0J5QVNYbklOQUNBRElBWTRBaGdnQXlBQktnSVVPQUljSUFNZ0dTQVZRUXhxSUJWQkNHb1E4QU1DUUNBV1JTQVZLZ0lNSWdZZ0NaUWdGU29DQ0NJSElBNlVra01BQUFBQVlFVnlSUVJBUVFOQkFpQUdJQXFVSUFjZ0RaU1NRd0FBQUFCZ0lnRWJJUlJCQWtFRElBRWJJUVJCQVNFQkRBRUxJQVlnQ3BRZ0J5QU5sSkpEQUFBQUFHQkZJQTlEQUFBQUFHQkZja1VFUUVFRFFRRWdCaUFKbENBSElBNlVra01BQUFBQVlDSUJHeUVVUVFGQkF5QUJHeUVFUVFJaEFRd0JDeUFNSUFlVUlBa2dCcFNUUXdBQUFBQmdSUTBCUVFNaEFTQVlJUVFnRnlFVUlBc2dCNVFnQ2lBR2pKU1NRd0FBQUFCZ1JRMEJDeUFESUFNZ0FVRURkR29nQXlBRVFRTjBhaUlCRU04RklBTWdBU0FESUJSQkEzUnFFTThGa2lJR0lBaGVSUTBBSUFZaENDQUZJUUlMSUFWQkFXb2hCUXdCQ3dzZ0FrRi9SZzBDSUFBZ0FrRVliR3BCQVRZQ0RBd0NDd0pBQTBBQ1FBSkFBa0FnQVNBVVFSaHNhaUlES0FJTVFRRnFEZ0lDQUFFTElBTkJBVFlDREVFQUlRSURRQUpBQWtBZ0FDQUNRUmhzYWlJRUtBSU1RUUZxRGdJREFBRUxJQU1vQWdBZ0JDZ0NBRWNOQUNBREtBSUVJQVFvQWdSSERRQWdBeWdDQ0NBRUtBSUlSZzBGQ3lBQ1FRRnFJUUlNQUFzQUN5QVVRUUZxSVJRTUFRc0xJQUZCZnpZQ0RFRUFJUUpCMk9RRVFkamtCQ2dDQUNJQkJIOGdBUVZCeVBFRVFRQVF3QVduUVFGcnJUY0RBRUhZNUFRb0FnQUxRUUZxSWdGQkFDQUJRWUFCUnhzMkFnQkJBQ0VGQTBBQ1FBSkFBa0FnQUNBQ1FSaHNhaWdDREVFQmFnNENBZ0FCQ3lBRlFRRnFJUVVMSUFKQkFXb2hBZ3dCQ3dzZ0JVVU5BUUovUWNqeEJFSEk4UVFwQXdCQ3JmN1Y1TlNGL2FqWUFINUNBWHdpR2pjREFDQUZzaUFhUWlHSXA3S1VRd0FBQURDVUlnaUxRd0FBQUU5ZEJFQWdDS2dNQVF0QmdJQ0FnSGdMSVFGQkFDRUZRUUFoQXdOQUFrQUNRQ0FBSUFWQkdHeHFJZ1FvQWd3aUFrRUJhZzRDQlFBQkN5QUJJQU5HQkVBZ0JFRUJOZ0lNSUFVaEFnd0ZDeUFEUVFGcUlRTUxJQVZCQVdvaEJRd0FDd0FMSUFSQkFUWUNEQXdCQzBGL0lRSUxJQlZCSUdva0FDQUNDN1VFQWhOOUFYOGpBRUV3YXlJWEpBQWdBd0o5SUFBRVFDQUFRUWhxSUFFZ0Z4RHlBaUFYS2dJY0lnY2dGeW9DRUNJTUlBSXFBZ0FpQlpRaUNpQUNLZ0lFSWdRZ0Z5b0NGQ0lJbENJTmtwSWdGeW9DTENJR0lCY3FBaUFpRGlBRmxDSVBJQVFnRnlvQ0pDSVFsQ0lSa3BJaUNaVWhFaUFYS2dJTUlnc2dGeW9DQUNJVElBV1VJaFFnQkNBWEtnSUVJaFdVSWhhU2tpQUpsU0VKSUFjZ0NpQUVRd0FBSUVHU0lnUWdDSlNTa2lBR0lBOGdCQ0FRbEpLU0lnaVZJUW9nQ3lBVUlBUWdGWlNTa2lBSWxTRUVJQWNnRENBRlF3QUFJRUdTSWdXVUlBMlNraUFHSUE0Z0JaUWdFWktTSWdhVklRY2dDeUFUSUFXVUlCYVNraUFHbFF3QkN5QUJLZ0ljSWdjZ0FTb0NFQ0lNSUFJcUFnQWlCWlFpQ2lBQ0tnSUVJZ1FnQVNvQ0ZDSUlsQ0lOa3BJZ0FTb0NMQ0lHSUFFcUFpQWlEaUFGbENJUElBUWdBU29DSkNJUWxDSVJrcElpQ1pVaEVpQUJLZ0lNSWdzZ0FTb0NBQ0lUSUFXVUloUWdCQ0FCS2dJRUloV1VJaGFTa2lBSmxTRUpJQWNnQ2lBRVF3QUFJRUdTSWdRZ0NKU1NraUFHSUE4Z0JDQVFsSktTSWdpVklRb2dDeUFVSUFRZ0ZaU1NraUFJbFNFRUlBY2dEQ0FGUXdBQUlFR1NJZ1dVSUEyU2tpQUdJQTRnQlpRZ0VaS1NJZ2FWSVFjZ0N5QVRJQVdVSUJhU2tpQUdsUXNnQ1pNaUJTQUZsQ0FISUJLVElnVWdCWlNTSWdVZ0JDQUpreUlFSUFTVUlBb2dFcE1pQkNBRWxKSWlCQ0FFSUFWZUlnQWJrVU5janlKQWxEZ0NCQ0FESUFRZ0JTQUFHNUZEWEk4aVFKUTRBZ0FnRjBFd2FpUUFDOWtCQVFOL0FrQWdBQ2dDdEFJTkFBSkFJQUFvQWloQkEyc09CUUFCQVFFQUFRc2dBQ2dDSkVFRFJ3MEFJQUFvQWl4QkFrY05BQ0FBS0FKNFFRTkhEUUFnQUNnQ3NBSU5BQ0FBS0FMWUFTSUJLQUlJUVFKSERRQWdBU2dDWUVFQlJ3MEFJQUVvQXJnQlFRRkhEUUFnQVNnQ0RFRUNTZzBBSUFFb0FtUkJBVWNOQUNBQktBSzhBVUVCUncwQUlBRW9BaVFpQWlBQUtBTEVBa2NOQUNBQktBSjhJQUpIRFFBZ0FTZ0MxQUVnQWtjTkFDQUJLQUlvSWdJZ0FDZ0N5QUpIRFFBZ0FTZ0NnQUVnQWtjTkFDQUJLQUxZQVNBQ1JpRURDeUFEQys4QkFRVi9Jd0JCRUdzaUF5UUFBa0FnQUVVRVFFRi9JUVFNQVFzZ0FDZ0M5SWF2QXlBQlJnMEFJQUFvQW9pSHJ3TWlBZ1JBSUFJUVpTQUFRUUEyQW9pSHJ3TUxBa0FDUUFKQUFrQWdBUTRGQXdBQUFBRUNDeUFBS0FJa0lRVWdBQ2dDS0NFR1FaQVFFRTBpQWdSQUlBSWdCallDQ0NBQ0lBVTJBZ1FnQWtFQU5nSUFDeUFBSUFJMkFvaUhyd01NQWdzZ0FFS0JnSUNBRURjRGdJZXZBMEVFSVFFTUFRdEJBQ0VCUVFCQkEwR2ZGVUVBRUU0TElBQWdBVFlDOUlhdkF5QUFLQUlBUVFGSERRQWdBeUFCUVFKMFFiQXhhaWdDQURZQ0FFRUFRUU5CNWpVZ0F4Qk9DeUFEUVJCcUpBQWdCQXVOQVFFQ2Z3Si9RZGpWQXk0QkFDSUFSUVJBRUZsQkhEWUNBRUYvREFFTEFrQUNRQ0FBUVg1S0RRQkI2YUFNSVFFQ1FBSkFBa0FDUUFKQUFrQUNRQ0FBUWY4QmNVRUJhdzRMQ0FBQkFnTUVCQVVGQmdNSEMwR0FnQWdNQ0F0QmdJQUNEQWNMUVlDQUJBd0dDMEgvLy8vL0J3d0ZDeEFqREFRTEVDSkJFSFlNQXd0QkFBd0NDeUFBSVFFTElBRUxDL01CQVFaL0lBQW9BdUFESWdFZ0FFRUJRWUFJSUFBb0FnUW9BZ0FSQkFBMkFnZ2dBU0FBUVFGQmdBZ2dBQ2dDQkNnQ0FCRUVBRFlDRENBQklBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQU5nSVFJQUVnQUVFQlFZQUlJQUFvQWdRb0FnQVJCQUFpQXpZQ0ZDQUJLQUlRSVFRZ0FTZ0NEQ0VGSUFFb0FnZ2hCa0VBSVFGQmdIOGhBQU5BSUFZZ0FVRUNkQ0lDYWlBQVFlbk5CV3hCZ0lBQ2FrRVFkVFlDQUNBQ0lBVnFJQUJCb29zSGJFR0FnQUpxUVJCMU5nSUFJQUlnQkdvZ0FFR3VrbjFzTmdJQUlBSWdBMm9nQUVIbnozNXNRWUNBQW1vMkFnQWdBRUVCYWlFQUlBRkJBV29pQVVHQUFrY05BQXNMTndFQ2Z5QUFRUkJxSWdFUWNCb2dBRUhZQUdvaEFnTkFJQUFvQWdoRkJFQWdBaUFCRVA0Q0RBRUxDeUFBUVFBMkFnZ2dBUkJzR2dzaUFRRi9JQUJCRUdvaUFSQndHaUFBUVFFMkFnUWdBRUVvYWhDNUFpQUJFR3dhQytRR0FRaC9RUUVoQXdKQUFrQWdBQ2dDMUFJaUFVRUJSZ1JBSUFBZ0FDZ0MyQUlpQVNnQ0hEWUM2QUlnQUNBQktBSWdJZ0kyQXV3Q0lBRkJBVFlDUUNBQlFvR0FnSUFRTndJNElBRkJBVFlDU0NBQklBRW9BaVEyQWtRZ0FTQUNJQUVvQWd3aUFYQWlBaUFCSUFJYk5nSk1JQUJDQVRjRDhBSU1BUXNnQVVFRmEwRjdUUVJBSUFBb0FnQWlBaUFCTmdJWUlBSkJHellDRkNBQUtBSUFRUVEyQWh3Z0FDQUFLQUlBS0FJQUVRRUFDeUFBSUFBb0Fod2dBQ2dDckFNZ0FDZ0N2QUpzRUY0MkF1Z0NJQUFvQWlBZ0FDZ0NyQU1nQUNnQ3dBSnNFRjRoQVNBQVFRQTJBdkFDSUFBZ0FUWUM3QUlnQUNnQzFBSkJBRXdOQVNBQVFmUUNhaUVGSUFCQjJBSnFJUWdEUUNBSUlBUkJBblJxS0FJQUlnRWdBU2dDQ0NJRE5nSTRJQUVnQVNnQ0RDSUdOZ0k4SUFFZ0F5QUdiQ0lDTmdKQUlBRWdBeUFCS0FJa2JEWUNSQ0FCSUFFb0Fod2dBM0FpQnlBRElBY2JOZ0pJSUFFZ0FTZ0NJQ0FHY0NJQklBWWdBUnMyQWt3Z0FDZ0M4QUlnQW1wQkMwNEVRQ0FBS0FJQUlnRkJEallDRkNBQUlBRW9BZ0FSQVFBTEFrQWdBa0VBVEEwQVFRQWhBeUFDSWdGQkEzRWlCZ1JBQTBBZ0FDQUFLQUx3QWlJSFFRRnFOZ0x3QWlBRklBZEJBblJxSUFRMkFnQWdBVUVCYXlFQklBTkJBV29pQXlBR1J3MEFDd3NnQWtFRVNRMEFBMEFnQUNBQUtBTHdBaUlDUVFGcU5nTHdBaUFGSUFKQkFuUnFJQVEyQWdBZ0FDQUFLQUx3QWlJQ1FRRnFOZ0x3QWlBRklBSkJBblJxSUFRMkFnQWdBQ0FBS0FMd0FpSUNRUUZxTmdMd0FpQUZJQUpCQW5ScUlBUTJBZ0FnQUNBQUtBTHdBaUlDUVFGcU5nTHdBaUFGSUFKQkFuUnFJQVEyQWdBZ0FVRUZheUFCUVFScklRRkJma2tOQUFzTElBUkJBV29pQkNBQUtBTFVBaUlEU0EwQUN5QURRUUJNRFFFTElBQkJwQUZxSVFRZ0FFSFlBbW9oQmtFQUlRRURRQ0FHSUFGQkFuUnFLQUlBSWdVb0FsQkZCRUFDUUNBRktBSVFJZ0pCQTAwRVFDQUVJQUpCQW5ScUtBSUFEUUVMSUFBb0FnQWlBeUFDTmdJWUlBTkJOallDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQVVnQUVFQlFZUUJJQUFvQWdRb0FnQVJCQUFnQkNBQ1FRSjBhaWdDQUVHRUFSQnJOZ0pRSUFBb0F0UUNJUU1MSUFGQkFXb2lBU0FEU0EwQUN3c2dBQ0FBS0FMVUF5Z0NBQkVCQUNBQUlBQW9Bc1FES0FJQUVRRUFJQUFvQXN3RElBQW9Bc1FES0FJRU5nSUFDOW9HQVFWL0l3QkJRR29pQlNRQUlBVkJqQUVRVFNJRU5nSThBa0FnQkFSQUlBUWdBVFlDaUFFZ0JFRUFOZ0lNSUFSQ0FEY0NCQ0FFSUFBMkFnQWdCRUVRYWtFQUVLQUZHaUFFUVNocUVLVUZJQVJCMkFCcUVLVUZJd0JCTUdzaUFTUUFJQUZCQkdvaUEwRUFRU3o4Q3dBZ0JVRU1haUlBSUFOQkxQd0tBQUJCMk9nRUVPRURJQUJCL01nRUtBSUFOZ0lBSUFCQmdNa0VLQUlBTmdJRVFkam9CQkQ2QWlBQlFUQnFKQUFnQUVFQk5nSU1Jd0JCTUdzaUF5UUFBa0FnQlVGSVJnUkFRUndoQVF3QkMwR0k2UVFvQWdCRkJFQkJpT2tFUVNzMkFnQUxRZG5sQkMwQUFFVUVRQkNFQXlnQ0FDSUJCRUFEUUNBQkVQMENJQUVvQWpnaUFRMEFDd3RCcE9nRUVQMEJRY2pNQkNnQ0FCRDlBa0d3eXdRb0FnQVEvUUpCbU1vRUtBSUFFUDBDUWRubEJFRUJPZ0FBQ3lBRFFRaHFRUUJCS1B3TEFBSkFJQUJCQVdwQkFrOEVRQ0FEUVFScUlBQkJMUHdLQUFBZ0F5Z0NCQ0lCRFFFTElBTkIvTWdFS0FJQUlnRTJBZ1FMUVlUSkJDZ0NBRUcyQVdvaUJrRUFJQUZCRDJvZ0F5Z0NEQnRxSWdFUVRTSUFRUUFnQmhCUUdpQUFJQUUyQWpBZ0FDQUFOZ0lzSUFBZ0FEWUNBRUdJNlFSQmlPa0VLQUlBSWdGQkFXbzJBZ0FnQUNBQVFjd0FhallDVENBQUlBRTJBaGdnQUVINDVRUTJBbUFnQUVFRFFRSWdBeWdDRUJzMkFpQWdBQ0FES0FJRUlnWTJBamdnQUNBQVFZY0Jha0Y4Y1NJQk5nSjBJQUZCTEdvaEFVR0V5UVFvQWdBRVFDQUFJQUZCQTJwQmZIRWlBVFlDU0VHRXlRUW9BZ0FnQVdvaEFRc2dBQ0FES0FJTUlnY2dBU0FHYWtFUGFrRndjU0FIR3pZQ05DQUFFSk1GSXdNaEFSRGtBeUFCS0FJTUlRWWdBQ0FCTmdJSUlBQWdCallDRENBR0lBQTJBZ2dnQUNnQ0NDQUFOZ0lNRU9NRFFkemxCRUhjNVFRb0FnQWlBVUVCYWpZQ0FDQUJSUVJBUWR2bEJFRUJPZ0FBQ3lBQUlBTkJCR29nQWlBRUVDZ2lBUVJBUWR6bEJFSGM1UVFvQWdCQkFXc2lBallDQUNBQ1JRUkFRZHZsQkVFQU9nQUFDeERrQXlBQUtBSU1JZ0lnQUNnQ0NDSUdOZ0lJSUFZZ0FqWUNEQ0FBSUFBMkFnd2dBQ0FBTmdJSUVPTUREQUVMSUFVZ0FEWUNPQXNnQTBFd2FpUUFJQUZGRFFFZ0JTZ0NQRUVRYWhEaUF5QUZLQUk4UVNocUVPZ0RJQVVvQWp4QjJBQnFFT2dESUFVb0Fqd1FTQ0FGUVFBMkFqd0xRUUFoQkFzZ0JVRkFheVFBSUFRTEpnRUJmeUFBS0FJRUlnRUVRQ0FBSUFFb0FpZ1JBUUFMSUFCQkFEWUNGQ0FBUVFBMkFnUUxPd0VCZnlBQUtBSUVJZ0VFUUNBQVFRRWdBU2dDSkJFQ0FDQUFLQUlRQkVBZ0FFRUFOZ0s0QWlBQVFjZ0JOZ0lVRHdzZ0FFSGtBRFlDRkFzTHJ3UUFRYVRDQkVIMzVBRVFPRUc4d2dSQjR0Y0JRUUZCQUJBM1FjakNCRUh4MUFGQkFVR0FmMEgvQUJBRFFlRENCRUhxMUFGQkFVR0FmMEgvQUJBRFFkVENCRUhvMUFGQkFVRUFRZjhCRUFOQjdNSUVRZkhKQVVFQ1FZQ0Fma0gvL3dFUUEwSDR3Z1JCNk1rQlFRSkJBRUgvL3dNUUEwR0V3d1JCZ01vQlFRUkJnSUNBZ0hoQi8vLy8vd2NRQTBHUXd3UkI5OGtCUVFSQkFFRi9FQU5Cbk1NRVFkYmJBVUVFUVlDQWdJQjRRZi8vLy84SEVBTkJxTU1FUWMzYkFVRUVRUUJCZnhBRFFiVERCRUc5elFGQ2dJQ0FnSUNBZ0lDQWYwTC8vLy8vLy8vLy8vOEFFTHNHUWNEREJFRzh6UUZDQUVKL0VMc0dRY3pEQkVHWXpRRkJCQkFWUWRqREJFSEQ0QUZCQ0JBVlFhU1lBa0gxMndFUUZFR1EvZ0pCajRFQ0VCUkIyUDRDUVFSQjI5c0JFQXRCcFA4Q1FRSkJnZHdCRUF0QjhQOENRUVJCa053QkVBdEJ2S2NDRURaQm1JQURRUUJCeW9BQ0VBRkJ3SUFEUVFCQnNJRUNFQUZCektrQ1FRRkI2SUFDRUFGQjZJQURRUUpCbC8wQkVBRkJrSUVEUVFOQnR2MEJFQUZCdUlFRFFRUkIzdjBCRUFGQjRJRURRUVZCKy8wQkVBRkJpSUlEUVFSQjFZRUNFQUZCc0lJRFFRVkI4NEVDRUFGQndJQURRUUJCNGY0QkVBRkJ6S2tDUVFGQndQNEJFQUZCNklBRFFRSkJvLzhCRUFGQmtJRURRUU5CZ2Y4QkVBRkJ1SUVEUVFSQnFZQUNFQUZCNElFRFFRVkJoNEFDRUFGQjJJSURRUWhCNXY4QkVBRkJnSU1EUVFsQnhQOEJFQUZCaEtvQ1FRWkJvZjRCRUFGQnFJTURRUWRCbW9JQ0VBRUxJd0VCZnlBQVFSQnFJZ0VRY0JvZ0FFSUJOd0lJSUFCQjJBQnFFTGtDSUFFUWJCb0xZQUVDZnlBQVFSQnFJZ0lRY0JvZ0FFRW9haUVCQW44Q1FBTkFBa0FDUUNBQUtBSUVEZ0lBQVFNTElBRWdBaEQrQWd3QkN3c2dBRUVCTmdJTUlBQkJBRFlDQkVFQURBRUxJQUJCQWpZQ0NDQUFRZGdBYWhDNUFrRi9DeUFDRUd3YUN4NEJBWDlCRUJCbUlnRWdBQ2tDQ0RjQ0NDQUJJQUFwQWdBM0FnQWdBUXMzQVFGL0lBRWdBQ2dDQkNJRFFRRjFhaUVCSUFBb0FnQWhBQ0FCSUFJZ0EwRUJjUVIvSUFFb0FnQWdBR29vQWdBRklBQUxFUUlBQ3drQUlBQkJFQkNoQWd1YkFRRURmeUFCS0FJRUlRSWdBQ2dDQUNFRUlBQW9BZ1FoQXdOQUlBTWdCRVpGQkVBZ0FrRVFheUlDSUFOQkVHc2lBeWtDQURjQ0FDQUNJQU1wQWdnM0FnZ01BUXNMSUFFZ0FqWUNCQ0FBS0FJQUlRTWdBQ0FDTmdJQUlBRWdBellDQkNBQUtBSUVJUUlnQUNBQktBSUlOZ0lFSUFFZ0FqWUNDQ0FBS0FJSUlRSWdBQ0FCS0FJTU5nSUlJQUVnQWpZQ0RDQUJJQUVvQWdRMkFnQUxYQUVCZnlBQUlBTTJBaEFnQUVFQU5nSU1JQUVFUUNBQlFZQ0FnSUFCVHdSQUVPRUJBQXNnQVVFRWRCQm1JUVFMSUFBZ0JEWUNBQ0FBSUFRZ0FrRUVkR29pQWpZQ0NDQUFJQVFnQVVFRWRHbzJBZ3dnQUNBQ05nSUVJQUFMUGdFQmZ5QUJRWUNBZ0lBQlR3UkFFT2NGQUF0Qi8vLy8vd0FnQUNnQ0NDQUFLQUlBYXlJQVFRTjFJZ0lnQVNBQklBSkpHeUFBUWZELy8vOEhUeHNMcmdRQ0IzOEZmQ01BUWFBQmF5SUhKQUJCZnlFRkFrQWdBU2dDQ0NJR1FRTklEUUFnQmtIZ0FHd1FUU0lJUlFSQVFRQkJBMEdzQzBFQUVFNE1BUXNnQmtFRWRCQk5JZ29FUUVFQUlRWURRRUVBSVFVZ0JrRURSZ1JBUVFBaEJnSkFBMEFnQUNBRElBZEJNR29RcGdWRUFBQUFBQUFBQUFBaERFRUFJUVVEUUNBQktBSUlJZ0lnQlVvRVFDQUhRWkFCYWlBSFFUQnFJQUVvQWdRZ0JVRVliR29RK0FWQkFFZ05BeUFGUVFSMElnSWdBU2dDQUdvaUNTc0RBQ0VOSUFjckE1QUJJUThnQWlBS2FpSUNJQWtyQXdnZ0J5c0RtQUdoSWc0NUF3Z2dBaUFOSUEraElnMDVBd0FnRENBTklBMmlJQTRnRHFLZ29DRU1JQVZCQVdvaEJRd0JDd3NDUUNBTUlBSzNveUlNSUFBckEyaGpEUUFDUUNBR1JRMEFJQXdnQUNzRGVHTkZEUUFnQUNzRGNDQU1JQkNqWXcwQkMwRUFJUVVnQmlBQUtBSmdSZzBBQTBBZ0FTZ0NDQ0lDSUFWS0JFQWdCVUVZYkNFQ0lBVkI0QUJzSVFrZ0JVRUJhaUVGSUFnZ0NXb2dBQ0FESUFJZ0FTZ0NCR29ROUFWQkFFNE5BUXdFQ3dzZ0J5QUtJQWdnQWtFQmRCRHlCVUVBU0EwQ0lBTWdCeER4QlNBR1FRRnFJUVlnRENFUURBRUxDeUFFSUF3NUF3QWdDQkJJSUFvUVNFRUFJUVVNQkFzZ0NCQklJQW9RU0VGL0lRVU1Bd1VEUUNBRlFRUkhCRUFnQlVFRGRDSUpJQU1nQmtFRmRDSUxhbW9nQWlBTGFpQUphaXNEQURrREFDQUZRUUZxSVFVTUFRc0xJQVpCQVdvaEJnd0JDd0FMQUF0QkFFRURRYXdMUVFBUVRpQUlFRWdMSUFkQm9BRnFKQUFnQlFzS0FFSEEwd0VRdUFJQUMwSUJBbjhnQUNnQ0JDRUJBMEFnQUNnQ0NDSUNJQUZIQkVBZ0FDQUNRUXhySWdJMkFnZ2dBaEJNR2d3QkN3c2dBQ2dDQUNJQkJFQWdBQ2dDREJvZ0FSQklDd3VyQWdFRWZ5QUFLQUlFSVFNZ0FDZ0NBQ0VGSUFFb0FnUWhCQ01BUVNCcklnSWtBQ0FDSUFRMkFod2dBaUFFTmdJWUlBSWdBRUVJYWpZQ0NDQUNJQUpCSEdvMkFoQWdBaUFDUVJocU5nSU1BMEFnQXlBRlJ3UkFJQVJCREdzaUJDQURRUXhySWdNcEFnQTNBZ0FnQkNBREtBSUlOZ0lJSUFOQ0FEY0NBQ0FEUVFBMkFnZ2dBaUFFTmdJY0RBRUxDeUFDUVFFNkFCUWdBaTBBRkVVRVFDQUNLQUlJR2lBQ0tBSVFLQUlBSVFNZ0FpZ0NEQ2dDQUNFRkEwQWdBeUFGUndSQUlBTVFURUVNYWlFRERBRUxDd3NnQWtFZ2FpUUFJQUVnQkRZQ0JDQUFLQUlBSVFJZ0FDQUVOZ0lBSUFFZ0FqWUNCQ0FBS0FJRUlRSWdBQ0FCS0FJSU5nSUVJQUVnQWpZQ0NDQUFLQUlJSVFJZ0FDQUJLQUlNTmdJSUlBRWdBallDRENBQklBRW9BZ1EyQWdBTFFRRUJmeUFCUWRhcTFhb0JUd1JBRU9jRkFBdEIxYXJWcWdFZ0FDZ0NDQ0FBS0FJQWEwRU1iU0lBUVFGMElnSWdBU0FCSUFKSkd5QUFRYXJWcXRVQVR4c0xLUUVCZnlBQUtBSUVJUUlEUUNBQklBSkdSUVJBSUFKQkRHc1FUQ0VDREFFTEN5QUFJQUUyQWdRTFpBQWdBRVVFUUE4TEFrQWdBQ2dDQUNBQlJnMEFJQUFnQVRZQ0FDQUJSUVJBSUFBb0F1U0dwd0lRU0NBQVFRQTJBdVNHcHdJTUFRc2dBQ0FBS0FJb0lBQW9BaVJzRUUwaUFEWUM1SWFuQWlBQURRQkJBRUVEUWZVTlFRQVFUa0VCRUFJQUN3c1FBQ0FBQkVBZ0FCQldHZ3NnQUJCSUN4WUFJQUFnQVVIcUFFR1VxUUpCaktrQ1FRSVFuZ01MRmdBZ0FDQUJRZWtBUVlTcEFrSDRxQUpCQXhDZUF3dTJIQUVEZnlNQVFlQUJheUlBSkFBakFFRWdheUlCSkFBakFTSUNMUUFBUlFSQUlBSkJBVG9BQUVHOGx3SkJwSmdDRUE0TFFZU1pBa0hrbVFKQnpKb0NRUUJCM0pvQ1FjWUFRZCthQWtFQVFkK2FBa0VBUVl6SkFVSGhtZ0pCeHdBUUNVR0VtUUpCQVVIa21nSkIzSm9DUWZBQVFjZ0FFQWdnQVVFQU5nSWNJQUZCeVFBMkFoZ2dBU0FCS1FJWU53TVFJd0JCRUdzaUFpUUFJQUlnQVNrQ0VEY0NDRUdFbVFKQm1Oa0JRUU5CNkpvQ1FmU2FBa0h4QUNBQ1FRaHFFSWtCUVFCQkFFRUFFQUFnQWtFUWFpUUFJQUZCQURZQ0hDQUJRY29BTmdJWUlBRWdBU2tDR0RjRENDTUFRUkJySWdJa0FDQUNJQUVwQWdnM0FnaEJoSmtDUWVMY0FVRUVRWUNiQWtHUW13SkI4Z0FnQWtFSWFoQ0pBVUVBUVFCQkFCQUFJQUpCRUdva0FDQUJRUUEyQWh3Z0FVSExBRFlDR0NBQklBRXBBaGczQXdBakFFRVFheUlDSkFBZ0FpQUJLUUlBTndJSVFZU1pBa0g0M0FGQkFrR1ltd0pCb0pzQ1FmTUFJQUpCQ0dvUWlRRkJBRUVBUVFBUUFDQUNRUkJxSkFBakFFRVFheUlDSkFBZ0FrSE1BRFlDREVHRW1RSkJ1OHdCUVFOQnBKc0NRYkNiQWtIMEFDQUNRUXhxRU9jQlFRQkJBRUVBRUFBZ0FrRVFhaVFBSXdCQkVHc2lBaVFBSUFKQnpRQTJBZ3hCaEprQ1FiZk1BVUVFUWNDYkFrSFFtd0pCOVFBZ0FrRU1haERuQVVFQVFRQkJBQkFBSUFKQkVHb2tBQ0FCUVNCcUpBQWpBRUVnYXlJQkpBQWpBU0lDTFFBQlJRUkFJQUpCQVRvQUFVR29uZ0pCaE1NRUVBNExRZlNlQWtHa253SkIzSjhDUVFCQjNKb0NRYzRBUWQrYUFrRUFRZCthQWtFQVFZVEpBVUhobWdKQnp3QVFDVUgwbmdKQkFVSHNud0pCM0pvQ1FmWUFRZEFBRUFnZ0FVRUFOZ0ljSUFGQjBRQTJBaGdnQVNBQktRSVlOd01RSXdCQkVHc2lBaVFBSUFJZ0FTa0NFRGNDQ0VIMG5nSkJtTmtCUVFOQjhKOENRZnlmQWtIM0FDQUNRUWhxRUlrQlFRQkJBRUVBRUFBZ0FrRVFhaVFBSUFGQkFEWUNIQ0FCUWRJQU5nSVlJQUVnQVNrQ0dEY0RDQ01BUVJCcklnSWtBQ0FDSUFFcEFnZzNBZ2hCOUo0Q1FlTGNBVUVFUVpDZ0FrR2dvQUpCK0FBZ0FrRUlhaENKQVVFQVFRQkJBQkFBSUFKQkVHb2tBQ0FCUVFBMkFod2dBVUhUQURZQ0dDQUJJQUVwQWhnM0F3QWpBRUVRYXlJQ0pBQWdBaUFCS1FJQU53SUlRZlNlQWtINDNBRkJBa0dvb0FKQm9Kc0NRZmtBSUFKQkNHb1FpUUZCQUVFQVFRQVFBQ0FDUVJCcUpBQWpBRUVRYXlJQ0pBQWdBa0hVQURZQ0RFSDBuZ0pCdTh3QlFRTkJzS0FDUWJDYkFrSDZBQ0FDUVF4cUVPY0JRUUJCQUVFQUVBQWdBa0VRYWlRQUl3QkJFR3NpQWlRQUlBSkIxUUEyQWd4QjlKNENRYmZNQVVFRVFjQ2dBa0hRb0FKQit3QWdBa0VNYWhEbkFVRUFRUUJCQUJBQUlBSkJFR29rQUNBQlFTQnFKQUFqQUVFZ2F5SUJKQUFqQVNJQ0xRQUNSUVJBSUFKQkFUb0FBa0hvb3dKQm5LUUNFQTRMUWRTa0FrR01wUUpCMEtVQ1FRQkIzSm9DUWRZQVFkK2FBa0VBUWQrYUFrRUFRYWJRQVVIaG1nSkIxd0FRQ1VIVXBBSkJBVUhncFFKQjNKb0NRZndBUWRnQUVBZ2dBVUVBTmdJY0lBRkIyUUEyQWhnZ0FTQUJLUUlZTndNUUl3QkJFR3NpQWlRQUlBSWdBU2tDRURjQ0NFSFVwQUpCbU5rQlFRTkI1S1VDUWZTYUFrSDlBQ0FDUVFocUVJa0JRUUJCQUVFQUVBQWdBa0VRYWlRQUlBRkJBRFlDSENBQlFkb0FOZ0lZSUFFZ0FTa0NHRGNEQ0NNQVFSQnJJZ0lrQUNBQ0lBRXBBZ2czQWdoQjFLUUNRZUxjQVVFRVFmQ2xBa0dRbXdKQi9nQWdBa0VJYWhDSkFVRUFRUUJCQUJBQUlBSkJFR29rQUNBQlFRQTJBaHdnQVVIYkFEWUNHQ0FCSUFFcEFoZzNBd0FqQUVFUWF5SUNKQUFnQWlBQktRSUFOd0lJUWRTa0FrSDQzQUZCQWtHQXBnSkJvSnNDUWY4QUlBSkJDR29RaVFGQkFFRUFRUUFRQUNBQ1FSQnFKQUFqQUVFUWF5SUNKQUFnQWtIY0FEWUNERUhVcEFKQnU4d0JRUU5CaUtZQ1FiQ2JBa0dBQVNBQ1FReHFFT2NCUVFCQkFFRUFFQUFnQWtFUWFpUUFJd0JCRUdzaUFpUUFJQUpCM1FBMkFneEIxS1FDUWJmTUFVRUVRYUNtQWtIUW13SkJnUUVnQWtFTWFoRG5BVUVBUVFCQkFCQUFJQUpCRUdva0FDQUJRU0JxSkFCQndLWUNRZGltQWtIOHBnSkJBRUhjbWdKQktVSGZtZ0pCQUVIZm1nSkJBRUhuOGdGQjRab0NRU29RQ1VIQXBnSkJBVUdNcHdKQjNKb0NRZDRBUVNzUUNDQUFRUUEyQXR3QklBQkJMRFlDMkFFZ0FDQUFLUUxZQVRjRDBBRkJ0TlFCSUFCQjBBRnFFTlFCSUFCQkFEWUMzQUVnQUVFdE5nTFlBU0FBSUFBcEF0Z0JOd1BJQVNNQVFSQnJJZ0VrQUNBQklBQXBBc2dCTndJSVFjQ21Ba0duMUFGQkEwR2Nwd0pCeEtjQ1FlQUFJQUZCQ0dvUWlRRkJBRUVBUVFBUUFDQUJRUkJxSkFBZ0FFRUFOZ0xjQVNBQVFTNDJBdGdCSUFBZ0FDa0MyQUUzQThBQkl3QkJFR3NpQVNRQUlBRWdBQ2tDd0FFM0FnaEJ3S1lDUWNmeEFVRURRY3luQWtIRXB3SkI0UUFnQVVFSWFoQ0pBVUVBUVFCQkFCQUFJQUZCRUdva0FDQUFRUUEyQXR3QklBQkJMellDMkFFZ0FDQUFLUUxZQVRjRHVBRkJrNE1DSUFCQnVBRnFFTlFCSUFCQkFEWUMzQUVnQUVFd05nTFlBU0FBSUFBcEF0Z0JOd093QVVIMzFRRWdBRUd3QVdvUTFBRWdBRUVBTmdMY0FTQUFRVEUyQXRnQklBQWdBQ2tDMkFFM0E2Z0JJd0JCRUdzaUFTUUFJQUVnQUNrQ3FBRTNBZ2hCd0tZQ1FkTHhBVUVEUWRpbkFrSGtwd0pCNGdBZ0FVRUlhaENKQVVFQVFRQkJBQkFBSUFGQkVHb2tBQ0FBUVFBMkF0d0JJQUJCTWpZQzJBRWdBQ0FBS1FMWUFUY0RvQUVqQUVFUWF5SUJKQUFnQVNBQUtRS2dBVGNDQ0VIQXBnSkJ2dFVCUVFWQjhLY0NRWVNvQWtIakFDQUJRUWhxRUlrQlFRQkJBRUVBRUFBZ0FVRVFhaVFBSUFCQkFEWUMzQUVnQUVFek5nTFlBU0FBSUFBcEF0Z0JOd09ZQVNNQVFSQnJJZ0VrQUNBQklBQXBBcGdCTndJSVFjQ21Ba0g1MEFGQkFrR01xQUpCbEtnQ1FlUUFJQUZCQ0dvUWlRRkJBRUVBUVFBUUFDQUJRUkJxSkFBZ0FFRUFOZ0xjQVNBQVFUUTJBdGdCSUFBZ0FDa0MyQUUzQTVBQkl3QkJFR3NpQVNRQUlBRWdBQ2tDa0FFM0FnaEJ3S1lDUWJueEFVRUZRYUNvQWtHMHFBSkI1UUFnQVVFSWFoQ0pBVUVBUVFCQkFCQUFJQUZCRUdva0FDQUFRUUEyQXR3QklBQkJOVFlDMkFFZ0FDQUFLUUxZQVRjRGlBRWpBRUVRYXlJQkpBQWdBU0FBS1FLSUFUY0NDRUhBcGdKQjJQSUJRUVJCd0tnQ1FkQ29Ba0htQUNBQlFRaHFFSWtCUVFCQkFFRUFFQUFnQVVFUWFpUUFJQUJCQURZQzNBRWdBRUUyTmdMWUFTQUFJQUFwQXRnQk53T0FBU01BUVJCcklnRWtBQ0FCSUFBcEFvQUJOd0lJUWNDbUFrR3gwQUZCQTBIWXFBSkI1S2dDUWVjQUlBRkJDR29RaVFGQkFFRUFRUUFRQUNBQlFSQnFKQUFnQUVFQU5nTGNBU0FBUVRjMkF0Z0JJQUFnQUNrQzJBRTNBM2hCbU5nQklBQkIrQUJxRUpZRElBQkJBRFlDM0FFZ0FFRTROZ0xZQVNBQUlBQXBBdGdCTndOd1FhVFlBU0FBUWZBQWFoRFVBU0FBUVFBMkF0d0JJQUJCT1RZQzJBRWdBQ0FBS1FMWUFUY0RhRUh0M1FFZ0FFSG9BR29RN3dVZ0FFRUFOZ0xjQVNBQVFUbzJBdGdCSUFBZ0FDa0MyQUUzQTJCQmhONEJJQUJCNEFCcUVPNEZJQUJCQURZQzNBRWdBRUU3TmdMWUFTQUFJQUFwQXRnQk53TllRWnZlQVNBQVFkZ0FhaER2QlNBQVFRQTJBdHdCSUFCQlBEWUMyQUVnQUNBQUtRTFlBVGNEVUVHeDNnRWdBRUhRQUdvUTdnVWdBRUVBTmdMY0FTQUFRVDAyQXRnQklBQWdBQ2tDMkFFM0EwaEJzZU1CSUFCQnlBQnFFSllESUFCQkFEWUMzQUVnQUVFK05nTFlBU0FBSUFBcEF0Z0JOd05BUWNMakFTQUFRVUJyRU5RQklBQkJBRFlDM0FFZ0FFRS9OZ0xZQVNBQUlBQXBBdGdCTndNNFFjUGtBU0FBUVRocUVKWURJQUJCQURZQzNBRWdBRUhBQURZQzJBRWdBQ0FBS1FMWUFUY0RNRUhRNUFFZ0FFRXdhaERVQVNBQVFRQTJBdHdCSUFCQndRQTJBdGdCSUFBZ0FDa0MyQUUzQXloQjArTUJJQUJCS0dvUWxnTWdBRUVBTmdMY0FTQUFRY0lBTmdMWUFTQUFJQUFwQXRnQk53TWdRZVRqQVNBQVFTQnFFTlFCSUFCQkFEWUMzQUVnQUVIREFEWUMyQUVnQUNBQUtRTFlBVGNER0NNQVFSQnJJZ0VrQUNBQklBQXBBaGczQWdoQndLWUNRWmZqQVVFRFFaaXBBa0drcVFKQjZ3QWdBVUVJYWhDSkFVRUFRUUJCQUJBQUlBRkJFR29rQUNBQVFRQTJBdHdCSUFCQnhBQTJBdGdCSUFBZ0FDa0MyQUUzQXhCQnBPTUJJQUJCRUdvUTFBRWdBRUVBTmdMY0FTQUFRY1VBTmdMWUFTQUFJQUFwQXRnQk53TUlRZEhoQVNBQVFRaHFFTlFCUVp5a0FrR2QxQUZCcWFrQ1Fld0FRZUdhQWtIdEFCQS9JQUJCMkFGcUlnRkIrZVFCUVFBUWxRTkI0dG9CUVFRUWxRTkJ0Y29CUVFnUWxRTkJ4TmtCUVF3UWxRTWFRWnlrQWhCQlFkTHpBVUc4eUFRUWRpQUFRUUEyQXRnQlFZNzVBU0FCRUhZZ0FFRUJOZ0xZQVVHZitRRWdBUkIySUFCQkFEWUMyQUZCNC9rQklBRVFkaUFBUWVRQU5nTFlBVUg4OWdFZ0FSQjJJQUJCQURZQzJBRkJyL2tCSUFFUWRpQUFRUUUyQXRnQlFjbjVBU0FCRUhZZ0FFRUFOZ0xZQVVINStRRWdBUkIySUFCQkJUWUMyQUZCeHZJQklBRVFkaUFBUW9DQWdJQ0FnSUR3UHpjRDJBRkI1L1lCUWRqREJDQUJLd01BRUJjZ0FFRUFOZ0xZQVVHWDl3RWdBUkIySUFCQkFUWUMyQUZCdHZRQklBRVFkaUFBUVFJMkF0Z0JRZDcwQVNBQkVIWWdBRUVETmdMWUFVSDg4d0VnQVJCMklBQkJCRFlDMkFGQnlQUUJJQUVRZGlBQVFRQTJBdGdCUVpYMkFTQUJFSFlnQUVFQk5nTFlBVUdqOVFFZ0FSQjJJQUJCQWpZQzJBRkIrZkVCSUFFUWRpQUFRUU0yQXRnQlFjZjRBU0FCRUhZZ0FFRUFOZ0xZQVVIdCtBRWdBUkIySUFCQkFUWUMyQUZCOFBRQklBRVFkaUFBUVFJMkF0Z0JRZlg2QVNBQkVIWWdBRUVETmdMWUFVR2I4Z0VnQVJCMklBQkJCRFlDMkFGQndmb0JJQUVRZGlBQVFRVTJBdGdCUWVMMUFTQUJFSFlnQUVFR05nTFlBVUdVK2dFZ0FSQjJJQUJCQnpZQzJBRkJqL1FCSUFFUWRpQUFRUWcyQXRnQlFiVDJBU0FCRUhZZ0FFRUpOZ0xZQVVHVDh3RWdBUkIySUFCQjRBRnFKQUFMc1FjQ0Nud0lmeU1BUWNBQmF5SU1KQUJFQUFBQUFBQUE4RDhoQlNBQkt3TVFJZ01nQTZJZ0FTc0RBQ0lFSUFTaUlBRXJBd2dpQ0NBSW9xQ2dJZ2xFQUFBQUFBQUFBQUJpQkVBZ0F5QUpueUlDb3lFR0lBZ2dBcU1oQnlBRUlBS2pJUVVMSUFFckF4Z2hBeUFCS3dNZ0lRUWdEQ0FCS3dNb09RTzRBU0FNSUFRNUE1Z0JJQXdnQXprRGVDTUFRUkJySWdFa0FBSjhJQUs5UWlDSXAwSC8vLy8vQjNFaURVSDd3NlQvQTAwRVFFUUFBQUFBQUFEd1B5QU5RWjdCbXZJRFNRMEJHaUFDUkFBQUFBQUFBQUFBRU1RQ0RBRUxJQUlnQXFFZ0RVR0FnTUQvQjA4TkFCb2dBaUFCRU1RRklRMGdBU3NEQ0NFRElBRXJBd0FoQkFKQUFrQUNRQUpBSUExQkEzRkJBV3NPQXdFQ0F3QUxJQVFnQXhERUFnd0RDeUFFSUFOQkFSRERBcG9NQWdzZ0JDQURFTVFDbWd3QkN5QUVJQU5CQVJEREFnc2hBeUFCUVJCcUpBQWdEQ0FHSUFhaVJBQUFBQUFBQVBBL0lBTWlDS0VpQTZJZ0NLQTVBN0FCSXdCQkVHc2lBU1FBQWtBZ0FyMUNJSWluUWYvLy8vOEhjU0lOUWZ2RHBQOERUUVJBSUExQmdJREE4Z05KRFFFZ0FrUUFBQUFBQUFBQUFFRUFFTU1DSVFJTUFRc2dEVUdBZ01EL0IwOEVRQ0FDSUFLaElRSU1BUXNnQWlBQkVNUUZJUTBnQVNzRENDRUNJQUVyQXdBaEJBSkFBa0FDUUFKQUlBMUJBM0ZCQVdzT0F3RUNBd0FMSUFRZ0FrRUJFTU1DSVFJTUF3c2dCQ0FDRU1RQ0lRSU1BZ3NnQkNBQ1FRRVF3d0thSVFJTUFRc2dCQ0FDRU1RQ21pRUNDeUFCUVJCcUpBQWdEQ0FISUFhaUlBT2lJZ2tnQlNBQ29pSUVvRGtEcUFFZ0RDQUZJQWFpSUFPaUlnb2dCeUFDb2lJTG9Ua0RvQUVnRENBSklBU2hPUU9RQVNBTUlBZ2dCeUFIb2lBRG9xQTVBNGdCSUF3Z0J5QUZvaUFEb2lJSElBWWdBcUlpQXFBNUE0QUJJQXdnQ2lBTG9Ea0RjQ0FNSUFjZ0FxRTVBMmdnRENBSUlBVWdCYUlnQTZLZ09RTmdJQXhCb0FGcUlSSWdERUdBQVdvaEV3Ti9JQTVCQTBZRWZ3Ti9RUUFoQVNBUFFRTkdCSDhnREVIQUFXb2tBRUVBQlFOQUlBRkJCRWNFUUNBQlFRTjBJZzRnQUNBUFFRVjBJZzFxYWlBTUlBMXFJQTVxS3dNQU9RTUFJQUZCQVdvaEFRd0JDd3NnRDBFQmFpRVBEQUVMQ3dVZ0FDQU9RUVYwSWhGcUlnMHJBeEFoQWlBTkt3TUlJUVVnRFNzREFDRUdRUUFoQVFOQUlBRkJCRWNFUUNBQlFRTjBJaEFnRENBUmFtb2dBaUFRSUJKcUt3TUFvaUFHSUF4QjRBQnFJQkJxS3dNQW9pQUZJQkFnRTJvckF3Q2lvS0E1QXdBZ0FVRUJhaUVCREFFTEN5QU1JQkZxSWdFZ0RTc0RHQ0FCS3dNWW9Ea0RHQ0FPUVFGcUlRNE1BUXNMR2d2WUFRRUJmeU1BUVRCcklnUWtBQ0FFUW9hQWdJQVFOd0lvSUFRZ0FEWUNKQ0FFUVFFMkFpQWdCQ0FETmdJY0lBUWdBVFlDR0NBRVFRWTJBaFFnQkNBRE5nSVFJQVFnQWpZQ0RBSkFJQVJCREdvUXFBWWlBMFVFUUVGL0lRQU1BUXNDUUNBRElBUkJER29RMUFJaUFrVUVRRUYvSVFBZ0F5RUJEQUVMQWtBZ0F5QUVRUmhxRU5RQ0lnRkZCRUJCZnlFQUlBSWhBUXdCQzBFQUlRQUNRQ0FDRUlJRVFRQklCRUJCZnlFQURBRUxJQVJCSkdvZ0FpQUJFS0FHR2dzZ0F4QmxJQUloQXdzZ0F4QmxDeUFCRUdVTElBUkJNR29rQUNBQUM2OEJBUU4vSUFBQ2Z5QUFLQUlFSWdJZ0FDZ0NDRWtFUUNBQ0lBRXBBZ0EzQWdBZ0FpQUJLUUlJTndJSUlBSkJFR29NQVFzakFFRWdheUlESkFBZ0EwRU1haUFBSUFBb0FnUWdBQ2dDQUd0QkJIVkJBV29RNVFVZ0FDZ0NCQ0FBS0FJQWEwRUVkU0FBUVFocUVPUUZJZ0lvQWdnaUJDQUJLUUlBTndJQUlBUWdBU2tDQ0RjQ0NDQUNJQUlvQWdoQkVHbzJBZ2dnQUNBQ0VPTUZJQUFvQWdRZ0FoRGlCU0FEUVNCcUpBQUxOZ0lFQzUwTEFnVi9FSHdqQUVId0Iyc2lCQ1FBSUFJckExZ2hGU0FDS3dNNElSWWdBaXNER0NFWElBTXJBd0FoQ1NBREt3TUlJUW9nQXlzREVDRUxJQUlyQXdBaEV5QUNLd01JSVJRZ0Fpc0RFQ0VNSUFJckF5QWhEU0FDS3dNb0lRNGdBaXNETUNFUElBSXJBMEFoRUNBQ0t3TklJUkVnQkNBQ0t3TlFJaEk1QStnSElBUWdFVGtENEFjZ0JDQVFPUVBZQnlBRUlBODVBNGdISUFRZ0Rqa0RnQWNnQkNBTk9RUDRCaUFFSUF3NUE2Z0dJQVFnRkRrRG9BWWdCQ0FUT1FPWUJpQUVJQXNnRXFJaUdEa0QwQWNnQkNBS0lCS2lPUVBJQnlBRUlBa2dFcUk1QThBSElBUWdDeUFSb2prRHVBY2dCQ0FLSUJHaUloSTVBN0FISUFRZ0NTQVJvamtEcUFjZ0JDQUxJQkNpT1FPZ0J5QUVJQW9nRUtJNUE1Z0hJQVFnQ1NBUW9pSVFPUU9RQnlBRUlBc2dENklpRVRrRDhBWWdCQ0FLSUEraU9RUG9CaUFFSUFrZ0Q2STVBK0FHSUFRZ0N5QU9vamtEMkFZZ0JDQUtJQTZpSWc4NUE5QUdJQVFnQ1NBT29qa0R5QVlnQkNBTElBMmlPUVBBQmlBRUlBb2dEYUk1QTdnR0lBUWdDU0FOb2lJTk9RT3dCaUFFSUF3Z0M2SWlEamtEa0FZZ0JDQUtJQXlpT1FPSUJpQUVJQWtnREtJNUE0QUdJQVFnRkNBTG9qa0QrQVVnQkNBVUlBcWlJZ3c1QS9BRklBUWdDU0FVb2prRDZBVWdCQ0FUSUF1aU9RUGdCU0FFSUJNZ0NxSTVBOWdGSUFRZ0V5QUpvaUlLT1FQUUJTQUVRWkFCYWtFQVFjQUEvQXNBSUFSQ0FEY0Q0QUVnQkVJQU53UG9BU0FFUWdBM0EvQUJJQVJDQURjRDJBRWdCRUtBZ0lDQWdJQ0ErTDkvTndQUUFTQUVRb0NBZ0lDQWdJRDRQemNEK0FFZ0JFR0FBbXBCQUVFdy9Bc0FJQVJDZ0lDQWdJQ0FnUGcvTndPd0FpQUVRYmdDYWtFQVFjZ0EvQXNBSUFSQ2dJQ0FnSUNBZ1BpL2Z6Y0RnQU1nQkVHSUEycEJBRUV3L0FzQUlBUkNBRGNEeUFNZ0JFSUFOd1BRQXlBRVFnQTNBOWdESUFSQ0FEY0R3QU1nQkVLQWdJQ0FnSUNBK0w5L053TzRBeUFFUW9DQWdJQ0FnSUQ0UHpjRDRBTWdCRUhvQTJwQkFFSHdBUHdMQUNBRVFvQ0FnSUNBZ0lENFB6Y0QyQVFnQkVIZ0JHcEJBRUV3L0FzQUlBUkNnSUNBZ0lDQWdQZy9Od09RQlNBRVFaZ0Zha0VBUVREOEN3QWdCRUtBZ0lDQWdJQ0ErRDgzQThnRkEwQkJBQ0VESUFWQkEwWkZCRUFEUUNBRFFRWkdSUVJBUVFBaEFrUUFBQUFBQUFBQUFDRUpBMEFnQWtFTVJrVUVRQ0FFUWRBRmFpQUZRZUFBYkdvZ0FrRURkR29yQXdBZ0JFR1FBV29nQWtFd2JHb2dBMEVEZEdvckF3Q2lJQW1nSVFrZ0FrRUJhaUVDREFFTEN5QUVJQVZCTUd4cUlBTkJBM1JxSUFrNUF3QWdBMEVCYWlFRERBRUxDeUFGUVFGcUlRVU1BUXNMQWtBZ0FTc0RXQ0FCS3dOUUlnc2dGU0FZSUJBZ0VxQ2dvQ0lUb2lBQkt3TkFJaFFnRGlBS0lBeWdvQ0FYb0NJTW9pQVdJQkVnRFNBUG9LQ2dJZzBnQVNzRFNDSU9vcUNnb0NJSlJBQUFBQUFBQUFBQVlnUkFJQUVyQXhnaEZTQUJLd01RSVE4Z0FTc0RBQ0VRSUFFckF3Z2hFU0FFSUFFckF6QWlDaUFKb2lBTElBRXJBemdnQ2lBVG9pQUJLd01nSWhZZ0RLSWdEU0FCS3dNb0loZWlvS0NnSWhLaW9TQUpJQW1pSWdxak9RTzRBU0FFSUJjZ0NhSWdEaUFTb3FFZ0NxTTVBN0FCSUFRZ0ZpQUpvaUFVSUJLaW9TQUtvemtEcUFFZ0JDQVBJQW1pSUFzZ0ZTQVBJQk9pSUJBZ0RLSWdEU0FSb3FDZ29DSUxvcUVnQ3FNNUE2QUJJQVFnRVNBSm9pQU9JQXVpb1NBS296a0RtQUVnQkNBUUlBbWlJQlFnQzZLaElBcWpPUU9RQVVFQUlRVURRRUVBSVFFZ0EwRUNSZzBDQTBBZ0FVRUdSa1VFUUNBQlFRTjBJZ1lnQUNBRFFUQnNhbXBCQUNFQ1JBQUFBQUFBQUFBQUlRa2dCRUdRQVdvZ0EwRVliR29oQ0FOQUlBSkJBMFpGQkVBZ0NDQUNRUU4wYWlzREFDQUVJQUpCTUd4cUlBWnFLd01Bb2lBSm9DRUpJQUpCQVdvaEFnd0JDd3NnQ1RrREFDQUJRUUZxSVFFTUFRc0xJQU5CQVdvaEF3d0FDd0FMUVFCQkEwSFBFMEVBRUU1QmZ5RUZDeUFFUWZBSGFpUUFJQVVMeHdVQ0NIOENmU01BUVJCcklnWWtBQ0FHSUFBMkFnUWpBRUVRYXlJREpBQWdBQ2dDQUNFQUlBWUNmd0pBUWZEa0JDZ0NBQ0lCUlEwQVFlemtCQ2dDQUFKL0lBRkJBV3NnQUhFZ0FXa2lBa0VCVFEwQUdpQUFJQUFnQVVrTkFCb2dBQ0FCY0FzaUJFRUNkR29vQWdBaUJVVU5BQ0FCUVFGcklRY2dBa0VCU3lFSUEwQWdCU2dDQUNJRlJRMEJJQUFnQlNnQ0JDSUNSd1JBQWtBZ0NFVUVRQ0FDSUFkeElRSU1BUXNnQVNBQ1N3MEFJQUlnQVhBaEFnc2dBaUFFUncwQ0RBRUxJQVVvQWdnZ0FFY05BQXRCQUF3QkMwSElBUkJtSVFJZ0EwSDA1QVEyQWdnZ0F5QUNOZ0lFSUFJZ0FEWUNCQ0FDUVFBMkFnQWdBaUFHS0FJRUtBSUFOZ0lJSUFKQkVHcEJBRUc0QWZ3TEFDQURRUUU2QUF3Q1FFRUFJQUZCK09RRUtBSUFRUUZxc3lJSlFmemtCQ29DQUNJS0lBR3psRjRiRFFCQjdPUUVJQUVnQVVFQmEzRkJBRWNnQVVFRFNYSWdBVUVCZEhJaUJBSi9JQWtnQ3BXTklnbERBQUNBVDEwZ0NVTUFBQUFBWUhFRVFDQUpxUXdCQzBFQUN5SUJJQUVnQkVrYkVKd0RRZkRrQkNnQ0FDSUJJQUZCQVdzaUJIRkZCRUFnQUNBRWNTRUVEQUVMSUFBZ0FVa0VRQ0FBSVFRTUFRc2dBQ0FCY0NFRUN3SkFJQVJCQW5RaUJFSHM1QVFvQWdCcUtBSUFJZ0JGQkVBZ0F5Z0NCRUgwNUFRb0FnQTJBZ0JCOU9RRUlBTW9BZ1EyQWdCQjdPUUVLQUlBSUFScVFmVGtCRFlDQUNBREtBSUVJZ1VvQWdBaUFFVU5BU0FBS0FJRUlRSUNRQ0FCSUFGQkFXc2lBSEZGQkVBZ0FDQUNjU0VDREFFTElBRWdBa3NOQUNBQ0lBRndJUUlMUWV6a0JDZ0NBQ0FDUVFKMGFpQUZOZ0lBSUFNb0FnUWhCUXdCQ3lBREtBSUVJQUFvQWdBMkFnQWdBQ0FES0FJRUlnVTJBZ0FMSUFOQkFEWUNCRUg0NUFSQitPUUVLQUlBUVFGcU5nSUFJQU1vQWdRaEFDQURRUUEyQWdRZ0FBUkFJQUFRU0F0QkFRczZBQXdnQmlBRk5nSUlJQU5CRUdva0FDQUdLQUlJSUFaQkVHb2tBRUVRYWd0MUFRRi9Jd0JCRUdzaUFTUUFJQUVnQURZQ0RDQUFCRUFnQVNnQ0RDSUFCRUFnQUNnQ0FDSUFCRUFnQUVFQUVMRUdDeUFBRUVnZ0FTZ0NEQ2dDSEJCSUlBRW9BZ3dvQWlRUVNDQUJLQUlNS0FJMEVFZ2dBU2dDRENnQ0xCQklJQUVvQWd3UVNDQUJRUUEyQWd3TEN5QUJRUkJxSkFBTE5nRUJmeU1BUVJCcklnSWtBQ0FBRUpBQklBSkJDR3BCaHQwQkVKY0RJZ0FRa0FFZ0FSQ1FBUkFQSUFBUWtRRWdBa0VRYWlRQUM2MEJBZ2g4QVg5QmZ5RUxJQUVyQTFnZ0FTc0RVQ0FDS3dNUUlnT2lJQUVyQTBBZ0Fpc0RBQ0lFb2lBQ0t3TUlJZ1VnQVNzRFNLS2dvS0FpQmtRQUFBQUFBQUFBQUdJRWZ5QUJLd01ZSVFjZ0FTc0RFQ0VJSUFFckF3QWhDU0FCS3dNSUlRb2dBQ0FCS3dNNElBRXJBekFnQTZJZ0FTc0RJQ0FFb2lBRklBRXJBeWlpb0tDZ0lBYWpPUU1JSUFBZ0J5QUlJQU9pSUFrZ0JLSWdCU0FLb3FDZ29DQUdvemtEQUVFQUJVRi9Dd3NRQUNBQUVFUTJBZ1FnQUNNRE5nSUFDN0FEQWdSL0FYd2pBRUVRYXlJRUpBQWpBRUVRYXlJQ0pBQWdCRUVJYWlJRElBRVFrQUVnQWtFSWFrSGIyZ0VRbHdNaUJSQ1FBUkE5TmdJRUlBTWpBellDQUNBRkVKRUJJQUpCRUdva0FDTUFRUkJySWdJa0FDQUNRUUEyQWd3Z0F4Q1FBVUdvd3dRZ0FrRU1haEE4SVFZZ0FpQUNLQUlNTmdJSUFuOGdCa1FBQUFBQUFBRHdRV01nQmtRQUFBQUFBQUFBQUdaeEJFQWdCcXNNQVF0QkFBc2hCU0FDUVFocUVKSURJQUpCRUdva0FDQURFSkVCSUFCQkFEWUNDQ0FBUWdBM0FnQWdBQ0FGRUtzR0lBUWdBQ2dDQURZQ0JDQUVJQVUyQWdBakFFRVFheUlBSkFBZ0FDQUVLUUlBTndNSUlBTkJ6S2tDSUFCQkNHb1FCVFlDQkNBREl3TTJBZ0FnQUVFUWFpUUFJd0JCRUdzaUFDUUFJQUVRa0FFaEFpQUJLQUlFUVFsUEJFQWdBaEE1Q3lBQUlBSTJBZ2dnQUVFQU5nSUVBa0FqQVMwQUNFRUJjUVJBSXdGQkJHb2hBUXdCQ3lNQklRRkJBa0hVcVFKQkFCQU1JUUlnQVVFQk9nQUlJQUZCQkdvaUFTQUNOZ0lBQ3lBQktBSUFJQU1Ra0FGQnQ4d0JJQUJCQkdvZ0FFRUlhaEFOR2lBQUlBQW9BZ1EyQWdBZ0FCQ1NBeUFBUVJCcUpBQWdBeENSQVNBRVFSQnFKQUFMSXdBZ0FFSEVBV29RMVFFZ0FFSE1BV29RMVFFZ0FFRUFOZ0xJQVNBQUVQZ0RRUUFMS2dFQmZ5QUFSUVJBRHdzZ0FDZ0NBQ0lCUlFSQUR3c2dBVUVRYWhEVkFTQUJFRWdnQUVFQU5nSUFDeGtBSUFBZ0FVSFN2Z0ZCcmRzRVFiaklCRUcweUFRUW53TUx0QUVCQTM4akFFRWdheUlESkFBZ0F5QUNOZ0ljSUFOQkJHb2dBUkJUSWdVaEFTQURLQUljSVFRakFFR0FFR3NpQWlRQUlBSkJnQkFnQVNnQ0FDQUJJQUVzQUF0QkFFZ2JJQVFRK0FFYUlBTkJFR29pQVNBQ0VGTWFJQUpCZ0JCcUpBQkJBQ0VDQTBBZ0FpQUFLQUlFSUFBb0FnQWlCR3RCQTNWSkJFQWdCQ0FDUVFOMGFpZ0NBQ0lFUVFnZ0FTQUVLQUlBS0FJSUVRVUFJQUpCQVdvaEFnd0JDd3NnQVJCTUdpQUZFRXdhSUFOQklHb2tBQXRyQUNBQVFRRTJBaEFnQUNBRU5nSUlJQUFnQXpZQ0JDQUFJQUkyQWdBZ0FDQUVJQVZzTmdJVUlBQWdBVFlDR0VFUUVHWWlCQ0FCTmdJTUlBUkIyTHNCTmdJQUlBUkNBRGNDQkNBQUlBUTJBaHdnQUNBRlFRQklCSDhnQWhDQUJpQURiQVVnQlFzMkFnd2dBQXRKQVFGL0l3QkJFR3NpQVNRQUFrQUNRQUpBSUFCQkFXc09BZ0lCQUF0QkVCQ0VBaUFCUVFScVFkYlRBQkJURUtJRFFmQ3pBVUVRRUFRQUMwRUVJUUFMSUFGQkVHb2tBQ0FBQ3lrQkFYOERRQ0FDUVFoR1JRUkFJQUVnQW1vZ0FDQUNheTBBQnpvQUFDQUNRUUZxSVFJTUFRc0xDeUFBSUFCQ0FEY0NBQ0FBUWdBM0FoZ2dBRUlBTndJUUlBQkNBRGNDQ0NBQUMzOENBbjhCZmlNQVFaQUNheUlCSkFBZ0FVR0lBbW9pQWhEQUJScEIwT2NFRUlVREVMUUZRZERuQkJEOUFTQUNLUU1BSWdPbklBTkNJSWluUVpUbkJCQWJRYnpuQkVITTV3UkJ5T2NFUWJUbkJDZ0NBQnNvQWdBMkFnQWdBVUdBQWtIcUNFR1U1d1FqQXlnQ1lCRGJBeG9nQUNBQkVGTWFJQUZCa0FKcUpBQUxyUUlCQjM4akFFRVFheUlHSkFBZ0FDZ0NBQ0VDSUFaQkFEb0FEeUFHUVE5cUlRY0NRQ0FCSUFKc0lnTWdBRUVFYWlJQ0tBSUVJQUlvQWdBaUJXc2lCRXNFUUNNQVFTQnJJZ2drQUFKQUlBTWdCR3NpQkNBQ0tBSUlJQUlvQWdRaUJXdE5CRUFnQkNBQ0tBSUVJZ05xSVFRRFFDQURJQVJHQkVBZ0FpQUVOZ0lFQlNBRElBY3RBQUE2QUFBZ0EwRUJhaUVEREFFTEN3d0JDeUFFSUFoQkRHb2dBaUFFSUFWcUlBSW9BZ0JyRU93Q0lBSW9BZ1FnQWlnQ0FHc2dBa0VJYWhET0F5SUZLQUlJSWdOcUlRUURRQ0FESUFSSEJFQWdBeUFITFFBQU9nQUFJQU5CQVdvaEF3d0JDd3NnQlNBRU5nSUlJQUlnQlJES0F5QUZFTWtEQ3lBSVFTQnFKQUFNQVFzZ0F5QUVTUVJBSUFJZ0F5QUZhallDQkFzTElBQkJFR29nQVJDc0JpQUdRUkJxSkFBTEdRRUJmd05BSUFBRVFDQUFLQUlBSUFBUVNDRUFEQUVMQ3d0T0FRSi9JQUFvQWd3RVFDQUFLQUlJRUlVR0lBQkJBRFlDQ0NBQUtBSUVJUUlEUUNBQklBSkdCRUFnQUVFQU5nSU1CU0FBS0FJQUlBRkJBblJxUVFBMkFnQWdBVUVCYWlFQkRBRUxDd3NMRHdBZ0FDZ0NDQkNGQmlBQUVKMERDeWtCQVg4RFFDQUNRUVJHUlFSQUlBRWdBbW9nQUNBQ2F5MEFBem9BQUNBQ1FRRnFJUUlNQVFzTEMyMEFJQUFxQWlBZ0FTb0NJSlFnQUNvQ0hDQUJLZ0ljbENBQUtnSVlJQUVxQWhpVUlBQXFBaFFnQVNvQ0ZKUWdBQ29DRUNBQktnSVFsQ0FBS2dJTUlBRXFBZ3lVSUFBcUFnZ2dBU29DQ0pRZ0FDb0NBQ0FCS2dJQWxDQUFLZ0lFSUFFcUFnU1VrcEtTa3BLU2twSUxWd0VGZlNBQUtnSUlJQUFxQWd3aUFpQUFLZ0ljSWdPVUlBQXFBaEFpQVNBQUtnSVlJZ1NVazVRZ0FDb0NBQ0FCSUFBcUFpQWlBWlFnQUNvQ0ZDSUZJQU9VazVRZ0FDb0NCQ0FDSUFHVUlBVWdCSlNUbEpPU0MvY0JBUWQvSXdCQndBRnJJZ0lrQUNBQUlBSkJDR29pQVJDSUJpQUFRUVJxSUFGQkJISVFpQVlnQUVFSWFpRUVJQUpCRUdvaEJRTkFBa0JCQUNFQklBTkJBMFlFUUNBQUtBS3dBU0lEUVFOMFFjaUtBV29vQWdBaUJFRUFJQVJCQUVvYklRUWdBRUhvQUdvaEJTQUNRZkFBYWlFR0EwQWdBU0FFUmcwQ0lBVWdBVUVEZENJSGFpQUdJQWRxRUlFR0lBRkJBV29oQVF3QUN3QUZBMEFnQVVFRVJrVUVRQ0FCUVFOMElnWWdCQ0FEUVFWMElnZHFhaUFGSUFkcUlBWnFFSUVHSUFGQkFXb2hBUXdCQ3dzZ0EwRUJhaUVEREFJTEFBc0xJQUlnQXpZQ3VBRWdBQ0FDUVFocVFiZ0IvQW9BQUNBQ1FjQUJhaVFBQzlnQ0FRcDlJQVVnQmlvQ0FDQUhLZ0lBa2lBSUtnSUFraUFKS2dJQWtrTUFBSUErbENJS09BSUFJQVVnQmlvQ0JDQUhLZ0lFa2lBSUtnSUVraUFKS2dJRWtrTUFBSUErbENJTE9BSUVJQVlxQWdBZ0NwTWlEQ0FNbENBR0tnSUVJQXVUSWcwZ0RaU1NrU0FIS2dJQUlBcVRJZzRnRHBRZ0J5b0NCQ0FMa3lJUElBK1VrcEdTSUFncUFnQWdDcE1pRUNBUWxDQUlLZ0lFSUF1VEloRWdFWlNTa1pJZ0NTb0NBQ0FLa3lJS0lBcVVJQWtxQWdRZ0M1TWlDeUFMbEpLUmtrTUFBSUErbENJU1F3QUFBQUJjQkVBZ0JFTUFBSUEvSUJLVnUwVE5PMzltbnFEMlA2SzJJaE00QWdBZ0FDQU1JQk9VT0FJQUlBQWdEU0FFS2dJQWxEZ0NCQ0FCSUE0Z0JDb0NBSlE0QWdBZ0FTQVBJQVFxQWdDVU9BSUVJQUlnRUNBRUtnSUFsRGdDQUNBQ0lCRWdCQ29DQUpRNEFnUWdBeUFLSUFRcUFnQ1VPQUlBSUFNZ0N5QUVLZ0lBbERnQ0JBc2dFa01BQUFBQVhBdDZBZ0ovQVg0Q1FDQUNRUUpJRFFBZ0FDQUNRUUpyUVFGMklnSkJBM1JxSWdNb0FnUWdBVUVFYXlnQ0FFME5BQ0FCUVFocklnRXBBZ0FpQlVJZ2lLY2hCQU5BQWtBZ0FTQURJZ0VwQWdBM0FnQWdBa1VOQUNBQUlBSkJBV3RCQVhZaUFrRURkR29pQXlnQ0JDQUVTdzBCQ3dzZ0FTQUZOd0lBQ3d2NUFRSUtmd0YrSUFBb0FnQWhCQ0FBS0FJRUlRRWpBRUVRYXlJSEpBQWdBU0FFYTBFRGRTSUdRUUpPQkVBQ1FDQUJJQVFwQWdBaEN5QUVJUUVnQmtFQ2EwRUNiU0VKQTBBZ0EwRUJkQ0lLUVFGeUlRVWdBMEVEZENBQmFrRUlhaUVDQWtBZ0JpQUtRUUpxSWdOTUJFQWdCU0VEREFFTElBTWdCU0FDS0FJRUlBSW9BZ3hMSWdVYklRTWdBaUFGUVFOMGFpRUNDeUFCSUFJcEFnQTNBZ0FnQWlFQklBTWdDVXdOQUF0QkNHc2lBaUFCUmdSQUlBRWdDemNDQUF3QkN5QUJJQUlwQWdBM0FnQWdBaUFMTndJQUlBUWdBVUVJYWlJQklBRWdCR3RCQTNVUWpRWUxDeUFIUVJCcUpBQWdBQ0FBS0FJRVFRaHJOZ0lFQzdjQ0FRRi9JQUlnQVJDS0JpSUNpMkFpQTBVRVFDQUFRd0FBZ0Q4Z0FwVWlBaUFCS2dJUUlBRXFBaUNVSUFFcUFoUWdBU29DSEpTVGxEZ0NBQ0FBSUFJZ0FTb0NDQ0FCS2dJY2xDQUJLZ0lFSUFFcUFpQ1VrNVE0QWdRZ0FDQUNJQUVxQWdRZ0FTb0NGSlFnQVNvQ0NDQUJLZ0lRbEpPVU9BSUlJQUFnQWlBQktnSVVJQUVxQWhpVUlBRXFBZ3dnQVNvQ0lKU1RsRGdDRENBQUlBSWdBU29DQUNBQktnSWdsQ0FCS2dJSUlBRXFBaGlVazVRNEFoQWdBQ0FDSUFFcUFnZ2dBU29DREpRZ0FTb0NBQ0FCS2dJVWxKT1VPQUlVSUFBZ0FpQUJLZ0lNSUFFcUFoeVVJQUVxQWhBZ0FTb0NHSlNUbERnQ0dDQUFJQUlnQVNvQ0JDQUJLZ0lZbENBQktnSUFJQUVxQWh5VWs1UTRBaHdnQUNBQ0lBRXFBZ0FnQVNvQ0VKUWdBU29DQkNBQktnSU1sSk9VT0FJZ0N5QURSUXRaQVFGOUlBQWdBaW9DQ0NBQ0tnSUFJQU9VSUFRZ0Fpb0NCSlNTa2lBQ0tnSWdJQUlxQWhnZ0E1UWdCQ0FDS2dJY2xKS1NJZ1dWT0FJQUlBRWdBaW9DRkNBQ0tnSU1JQU9VSUFRZ0Fpb0NFSlNTa2lBRmxUZ0NBQXZpQ2dFV2ZBSkFBa0FDUUFKQUFrQUNRQ0FGUVFGckRnUUJBZ01BQlFzZ0FDc0RFQ0lSUkFBQUFBQUFBQmhBb2lFWElBQXJBeGdpRWtRQUFBQUFBQUFZUUtJaEdDQUNJQUFyQXpnaUdhRWdBQ3NES0NJYW95SUpJQW1pSVFJZ0FTQUFLd013SWh1aElBQXJBeUFpRHFNaUNpQUtvaUVCSUFBckEwQWhGU0FBS3dNSUlSTWdBQ3NEQUNFVUlCSWdFcUFoRHlBUklCR2dJUlpCQVNFRklBa2hCaUFLSVFjRFFBSkFBa0FnQVVRQUFBQUFBQUFBQUdJZ0FrUUFBQUFBQUFBQUFHSnlSUVJBUkFBQUFBQUFBQUFBSVFjTUFRc2dCaUFQSUFjZ0VpQUJJQUdnSUFJZ0FhQWlFS0NpSUJNZ0VLSWdFS0lnRkNBUW9rUUFBQUFBQUFEd1A2Q2dJZ3NnQjZJZ0JpQVdJQWVpb3FDZ0lBcWhJQmdnQjZJZ0ZpQUdvaUFUSUFJZ0FxSWdBVVFBQUFBQUFBQVVRS0lnQWFJZ0FpQUJSQUFBQUFBQUFBaEFvaUlIb2lJTW9LQ2lJQlFnQnlBQ29LSkVBQUFBQUFBQThEK2dvS0NnbzZFaUI2SWlEU0FHb2lBTElBYWlJQkVnQWlBQ29DQVFvS0tnb0NBSm9TQU5JQmNnQnFJZ0V5QUNSQUFBQUFBQUFCUkFvaUFDb2lBQklBR2lJQXlnb0tJZ0ZDQUNSQUFBQUFBQUFBaEFvaUFCb0tKRUFBQUFBQUFBOEQrZ29LQ2dvNkVoQmlBRlFRUkhEUUVnQmlFSUN5QURJQnNnRGlBSG9pQVZvNkE1QXdBZ0dTQWFJQWlpSUJXam9DRUNEQVVMSUFWQkFXb2hCU0FHSUFhaUlRSWdCeUFIb2lFQkRBQUxBQXNnQVNBQUt3TUFJZ3VoSWdFZ0FhSWdBaUFBS3dNSW9TSUdJQWFpb0NJSG55SUNtaUVNSUFBckF4aEVBQUFBQUlUWGwwR2pJZ2hFQUFBQUFBQUFDTUNpSVEwZ0NKb2hDVUVCSVFVRFFFUUFBQUFBQUFBQUFDRUlBa0FnQWtRQUFBQUFBQUFBQUdJRVFDQUdJQUlnQ1NBSG9rUUFBQUFBQUFEd1A2QWdBcUlnREtBZ0RTQUhva1FBQUFBQUFBRHdQNkNqb1NJSW9pQUNveUVHSUFFZ0NLSWdBcU1oQVNBRlFRTkhEUUVnQVNFS0lBWWhDQXNnQXlBTElBb2dBQ3NERUtPZ09RTUFJQWdnQUNzREVLTWdBQ3NEQ0tBaEFnd0VDeUFGUVFGcUlRVWdBU0FCb2lBR0lBYWlvQ0lIbnlFQ0RBQUxBQXNnQVNBQUt3TUFJZzZoSWdZZ0JxSWdBaUFBS3dNSW9TSUhJQWVpb0NJQ255SUJtaUVQSUFBckF4aEVBQUFBQUlUWGwwR2pJZ2hFQUFBQUFBQUFDTUNpSVFzZ0FDc0RJRVFBQUFBQWhOZVhRYU5FQUFBQUFBQnErRUNqSWd4RUFBQUFBQUFBRkVDaUlRMGdDSm9oQ1VFQklRVURRRVFBQUFBQUFBQUFBQ0VJQWtBZ0FVUUFBQUFBQUFBQUFHSUVRQ0FISUFFZ0NTQUNva1FBQUFBQUFBRHdQNkFnRENBQ29pQUNvcUVnQWFJZ0Q2QWdDeUFDb2tRQUFBQUFBQUR3UDZBZ0RTQUNvaUFDb3FHam9TSUNvaUFCb3lFSElBWWdBcUlnQWFNaEJpQUZRUU5IRFFFZ0JpRUtJQWNoQ0FzZ0F5QU9JQW9nQUNzREVLT2dPUU1BSUFnZ0FDc0RFS01nQUNzRENLQWhBZ3dEQ3lBRlFRRnFJUVVnQmlBR29pQUhJQWVpb0NJQ255RUJEQUFMQUFzZ0FTQUFLd01BSWc2aElBQXJBeGlqSWdZZ0JxSWdBaUFBS3dNSW9TSUhJQWVpb0NJQ255SUJtaUVQSUFBckF5QkVBQUFBQUlUWGwwR2pJZ2hFQUFBQUFBQUFDTUNpSVFzZ0FDc0RLRVFBQUFBQWhOZVhRYU5FQUFBQUFBQnErRUNqSWd4RUFBQUFBQUFBRkVDaUlRMGdDSm9oQ1VFQklRVURRRVFBQUFBQUFBQUFBQ0VJQWtBZ0FVUUFBQUFBQUFBQUFHSUVRQ0FISUFFZ0NTQUNva1FBQUFBQUFBRHdQNkFnRENBQ29pQUNvcUVnQWFJZ0Q2QWdDeUFDb2tRQUFBQUFBQUR3UDZBZ0RTQUNvaUFDb3FHam9TSUNvaUFCb3lFSElBWWdBcUlnQWFNaEJpQUZRUU5IRFFFZ0JpRUtJQWNoQ0FzZ0F5QU9JQW9nQUNzREVLT2dPUU1BSUFnZ0FDc0RFS01nQUNzRENLQWhBZ3dDQ3lBRlFRRnFJUVVnQmlBR29pQUhJQWVpb0NJQ255RUJEQUFMQUFzZ0JDQUNPUU1BQ3d2SkFRSUZmd0Y5SXdCQkVHc2lCaVFBSUFBZ0JDZ0NCQ0FFS0FJQWEwRURkUkNiQXlBR1FReHFJUW9nQlNBRmxDRUZBMEFnQkNnQ0JDQUVLQUlBSWdkclFRTjFJQWhMQkVBZ0JrRUlhaUFLSUFFZ0F5Z0NBQ0FISUFoQkEzUWlDV29vQWdSQkZHeHFJZ2NxQWdBZ0J5b0NCQkNRQmlBRklBWXFBZ2dnQWlnQ0FDQUVLQUlBSUFscUlnY29BZ0JCRkd4cUlna3FBZ0NUSWdzZ0M1UWdCaW9DRENBSktnSUVreUlMSUF1VWttQUVRQ0FBSUFjUTF3RUxJQWhCQVdvaENBd0JDd3NnQmtFUWFpUUFDK3d0QWlCL0VYMGpBRUZBYWlJYkpBQWdHMEUwYWlBREtBSUVJQU1vQWdCclFRTjFFUDRESVNJZ0cwRW9haUFES0FJRUlBTW9BZ0JyUVFOMUVQNERJU01nQXlnQ0JDQURLQUlBSWdoclFRTjFJUmtnSWlnQ0FDRWRJQ01vQWdBaEhpQUNLQUlBSVFjZ0FTZ0NBQ0VTUVFBaEF3Ti9JQU1nR1VZRWYwRUFJUU1nRzBFQU5nSVlJQnRCQURZQ0RDQWJRZ0EzQXdBZ0d5QUdzaUluT0FJY0lCc2dKemdDRkNBYklBV3lJaWM0QWhBZ0d5QW5PQUlJSUFSQkRHb2dHUkNEQWlBQUlSVWdHeUVQSUFRcUFpUWhOaUFFS0FJb0lTRWdCQ2dDTENFbElBUW9BakFoSkNNQVFSQnJJaDhrQUFKL0FrQWdJVUVKYkNBRUlod29BZ1FnQkNnQ0FHdEJBblZOQkVBZ0dTQUVLQUlRSUFRb0Fnd2lHbXRCQW5WTkJFQWdJU0FFS0FJY0lBUW9BaGhyUVFOMVRRUkFJQmxCQkVnTkF5QWZRZElKTmdJTUlCb2dHUkNXQmlBYUlCa2dHU0FmUVF4cUVJQUVBMEFnRmlBaFRpQVVJQ1ZPY2tVRVFDQWFJQmxCQkNBZlFReHFFSUFFSUIwZ0dpZ0NERUVEZENJQWFpRVFJQUFnSG1vaEMwRUFJUUlDUUNBZElCb29BZ0JCQTNRaUJHb2lDQ0FkSUJvb0FnUkJBM1FpQVdvaUJ5QWRJQm9vQWdoQkEzUWlBR29pRWhDbkFVTUFBQUFBWGlBRUlCNXFJZ1FnQVNBZWFpSUJJQUFnSG1vaUFCQ25BVU1BQUFBQVhuTU5BQ0FISUJJZ0VCQ25BVU1BQUFBQVhpQUJJQUFnQ3hDbkFVTUFBQUFBWG5NTkFDQVNJQkFnQ0JDbkFVTUFBQUFBWGlBQUlBc2dCQkNuQVVNQUFBQUFYbk1OQUNBUUlBZ2dCeENuQVNFbklBc2dCQ0FCRUtjQlF3QUFBQUJlSUNkREFBQUFBRjV6UlNFQ0N3SkFJQUpGRFFBZ0ZrRWtiQ0ltSUJ3b0FnQnFJUklnSFNBYUtBSUFRUU4wSWhCcUlRc2dIU0FhS0FJRVFRTjBJZ1JxSVFnZ0hTQWFLQUlJUVFOMElnRnFJUWNnSFNBYUtBSU1RUU4wSWdCcUlRSWdFQ0FlYWlFTUlBUWdIbW9oRXlBQklCNXFJU0FnQUNBZWFpRUJRUUFoQUNNQVFaQUJheUlYSkFBQ1FDQVhRVUJySWhnZ0YwRTRhaUlOSUJkQk1Hb2lFU0FYUVNocUlna2dGMEhjQUdvZ0YwSFFBR29pQkNBTElBZ2dCeUFDRUl3R1JRMEFJQmRCSUdvaUVDQVhRUmhxSWdnZ0YwRVFhaUlISUJkQkNHb2lDeUFYUWRnQWFpQVhRY2dBYWlJQ0lBd2dFeUFnSUFFUWpBWkZEUUFnRjBIZ0FHb2hBU01BUWFBQ2F5SU9KQUFnRGlBWUlCQVFtUU1nRGtISUFHb2lFQ0FOSUFnUW1RTWdEa0dRQVdvaUNDQVJJQWNRbVFNZ0RrSFlBV29pQnlBSklBc1FtUU5CQUNFZ1FRQWhHQ01BUWFBQ2F5SUtKQUFqQUVFZ2F5SUpKQUFnQ1NBT0VHZzRBZ0FnQ1NBT1FTUnFJZ3NRYURnQ0JDQUpJQkFRYURnQ0NDQUpJQTVCN0FCcUVHZzRBZ3dnQ1NBSUVHZzRBaEFnQ1NBT1FiUUJhaEJvT0FJVUlBa2dCeEJvT0FJWUlBa2dEa0g4QVdvUWFEZ0NIQ0FKUVFkQkJrRUZRUVJCQTBFQ0lBa3FBZ1FnQ1NvQ0FGNGlCeUFKS2dJSUlBa2dCMEVDZEdvcUFnQmVHeUlISUFrcUFnd2dDU0FIUVFKMGFpb0NBRjRiSWdjZ0NTb0NFQ0FKSUFkQkFuUnFLZ0lBWGhzaUJ5QUpLZ0lVSUFrZ0IwRUNkR29xQWdCZUd5SUhJQWtxQWhnZ0NTQUhRUUowYWlvQ0FGNGJJZ2NnQ1NvQ0hDQUpJQWRCQW5ScUtnSUFYaHNpQ0VFQ2RHb2lCeW9DQUNJblF3QUFBQUJjQkVBZ0RpQU9JQWhCSkd4cUVLb0JJQW9nRGtNQUFJQS9JQWNxQWdDUmxSRElBU0FLUVNScUlBdEIvQUg4Q2dBQUN5QUpRU0JxSkFBQ1FDQW5Rd0FBQUFCYkRRQWpBRUVnYXlJTUpBQWdDa0VrYWlJVElBb2dEa0VrYWlJTkVIY2dDa0hJQUdvaUVTQUtJQTVCeUFCcUVIY2dDa0hzQUdvaUNTQUtJQTVCN0FCcUVIY2dDa0dRQVdvaUVDQUtJQTVCa0FGcUVIY2dDa0cwQVdvaUN5QUtJQTVCdEFGcUVIY2dDa0hZQVdvaUNDQUtJQTVCMkFGcUVIY2dDa0g4QVdvaUJ5QUtJQTVCL0FGcUVIY2dEQ0FURUdnNEFnQWdEQ0FSRUdnNEFnUWdEQ0FKRUdnNEFnZ2dEQ0FRRUdnNEFnd2dEQ0FMRUdnNEFoQWdEQ0FJRUdnNEFoUWdEQ0FIRUdnNEFoZ2dERUVHUVFWQkJFRURRUUlnRENvQ0JDQU1LZ0lBWGlJSElBd3FBZ2dnRENBSFFRSjBhaW9DQUY0YklnY2dEQ29DRENBTUlBZEJBblJxS2dJQVhoc2lCeUFNS2dJUUlBd2dCMEVDZEdvcUFnQmVHeUlISUF3cUFoUWdEQ0FIUVFKMGFpb0NBRjRiSWdjZ0RDb0NHQ0FNSUFkQkFuUnFLZ0lBWGhzaUIwRUNkR29pQ0NvQ0FDSW5Rd0FBQUFCY0JFQWdFeUFUSUFkQkpHd2lCMm9RcWdFZ0RTQUhJQTFxRUtvQklCTWdFME1BQUlBL0lBZ3FBZ0NSbFJESUFRc2dERUVnYWlRQUlDZERBQUFBQUZzTkFDTUFRU0JySWd3a0FDQUtRY2dBYWlJVElBcEJKR29pRFNBT1FjZ0FhaUlSRUhjZ0NrSHNBR29pQ1NBTklBNUI3QUJxRUhjZ0NrR1FBV29pRUNBTklBNUJrQUZxRUhjZ0NrRzBBV29pQ3lBTklBNUJ0QUZxRUhjZ0NrSFlBV29pQ0NBTklBNUIyQUZxRUhjZ0NrSDhBV29pQnlBTklBNUIvQUZxRUhjZ0RDQVRFR2c0QWdBZ0RDQUpFR2c0QWdRZ0RDQVFFR2c0QWdnZ0RDQUxFR2c0QWd3Z0RDQUlFR2c0QWhBZ0RDQUhFR2c0QWhRZ0RFRUZRUVJCQTBFQ0lBd3FBZ1FnRENvQ0FGNGlCeUFNS2dJSUlBd2dCMEVDZEdvcUFnQmVHeUlISUF3cUFnd2dEQ0FIUVFKMGFpb0NBRjRiSWdjZ0RDb0NFQ0FNSUFkQkFuUnFLZ0lBWGhzaUJ5QU1LZ0lVSUF3Z0IwRUNkR29xQWdCZUd5SUhRUUowYWlJSUtnSUFJaWREQUFBQUFGd0VRQ0FUSUJNZ0IwRWtiQ0lIYWhDcUFTQVJJQWNnRVdvUXFnRWdFeUFUUXdBQWdEOGdDQ29DQUpHVkVNZ0JDeUFNUVNCcUpBQWdKME1BQUFBQVd3MEFJd0JCSUdzaUV5UUFJQXBCN0FCcUlnMGdDa0hJQUdvaUVTQU9RZXdBYWlJSkVIY2dDa0dRQVdvaUVDQVJJQTVCa0FGcUVIY2dDa0cwQVdvaUN5QVJJQTVCdEFGcUVIY2dDa0hZQVdvaUNDQVJJQTVCMkFGcUVIY2dDa0g4QVdvaUJ5QVJJQTVCL0FGcUVIY2dFeUFORUdnNEFnQWdFeUFRRUdnNEFnUWdFeUFMRUdnNEFnZ2dFeUFJRUdnNEFnd2dFeUFIRUdnNEFoQWdFMEVFUVFOQkFpQVRLZ0lFSUJNcUFnQmVJZ2NnRXlvQ0NDQVRJQWRCQW5ScUtnSUFYaHNpQnlBVEtnSU1JQk1nQjBFQ2RHb3FBZ0JlR3lJSElCTXFBaEFnRXlBSFFRSjBhaW9DQUY0YklnZEJBblJxSWdncUFnQWlKME1BQUFBQVhBUkFJQTBnRFNBSFFTUnNJZ2RxRUtvQklBa2dCeUFKYWhDcUFTQU5JQTFEQUFDQVB5QUlLZ0lBa1pVUXlBRUxJQk5CSUdva0FDQW5Rd0FBQUFCYkRRQWpBRUVRYXlJTkpBQWdDa0dRQVdvaUVTQUtRZXdBYWlJSklBNUJrQUZxSWhBUWR5QUtRYlFCYWlJTElBa2dEa0cwQVdvUWR5QUtRZGdCYWlJSUlBa2dEa0hZQVdvUWR5QUtRZndCYWlJSElBa2dEa0g4QVdvUWR5QU5JQkVRYURnQ0FDQU5JQXNRYURnQ0JDQU5JQWdRYURnQ0NDQU5JQWNRYURnQ0RDQU5RUU5CQWlBTktnSUVJQTBxQWdCZUlnY2dEU29DQ0NBTklBZEJBblJxS2dJQVhoc2lCeUFOS2dJTUlBMGdCMEVDZEdvcUFnQmVHeUlIUVFKMGFpSUlLZ0lBSWlkREFBQUFBRndFUUNBUklCRWdCMEVrYkNJSGFoQ3FBU0FRSUFjZ0VHb1FxZ0VnRVNBUlF3QUFnRDhnQ0NvQ0FKR1ZFTWdCQ3lBTlFSQnFKQUFnSjBNQUFBQUFXdzBBSXdCQkVHc2lFU1FBSUFwQnRBRnFJZ2tnQ2tHUUFXb2lFQ0FPUWJRQmFpSUxFSGNnQ2tIWUFXb2lDQ0FRSUE1QjJBRnFFSGNnQ2tIOEFXb2lCeUFRSUE1Qi9BRnFFSGNnRVNBSkVHZzRBZ1FnRVNBSUVHZzRBZ2dnRVNBSEVHZzRBZ3dnRVVFRWFpSUlRUUlnQ0NvQ0JDQUlLZ0lBWGlJSElBZ3FBZ2dnQ0NBSFFRSjBhaW9DQUY0YklnZEJBblJxSWdncUFnQWlKME1BQUFBQVhBUkFJQWtnQ1NBSFFTUnNJZ2RxRUtvQklBc2dCeUFMYWhDcUFTQUpJQWxEQUFDQVB5QUlLZ0lBa1pVUXlBRUxJQkZCRUdva0FDQW5Rd0FBQUFCYkRRQWpBRUVRYXlJUUpBQWdDa0hZQVdvaUNTQUtRYlFCYWlJSUlBNUIyQUZxSWdzUWR5QUtRZndCYWlJSElBZ2dEa0g4QVdvUWR5QVFJQWtRYUNJb09BSUlJQkFnQnhCb0lpYzRBZ3dnRUVFSWFpQW5JQ2hlSWdkQkFuUnFLZ0lBSWlkREFBQUFBRndFUUNBSklBbEJKRUVBSUFjYklnZHFFS29CSUFzZ0J5QUxhaENxQVNBSklBbERBQUNBUHlBbmtaVVF5QUVMSUJCQkVHb2tBQ0FuUXdBQUFBQmJEUUFnQ2tIOEFXb2lCeUFLUWRnQmFpQU9RZndCYWhCM0lBY1FhQ0luUXdBQUFBQmNCRUFnQnlBSFF3QUFnRDhnSjVHVkVNZ0JDeUFuUXdBQUFBQmJEUUFqQUVHQUEyc2lDeVFBSUFzZ0N5QUtRUUFRMWdFNEF0QUNJQXNnQzBFa2FpQUtRUUVRMWdFNEF0UUNJQXNnQzBISUFHb2dDa0VDRU5ZQk9BTFlBaUFMSUF0QjdBQnFJQXBCQXhEV0FUZ0MzQUlnQ3lBTFFaQUJhaUFLUVFRUTFnRTRBdUFDSUFzZ0MwRzBBV29nQ2tFRkVOWUJPQUxrQWlBTElBdEIyQUZxSUFwQkJoRFdBVGdDNkFJZ0N5QUxRZndCYWlBS1FRY1ExZ0U0QXV3Q0lBc2dDMEdnQW1vZ0NrRUlFTllCT0FMd0FpQUxRZEFDYWlJSVFRaEJCMEVHUVFWQkJFRURRUUlnQ0NvQ0JDQUlLZ0lBWGlJSElBZ3FBZ2dnQ0NBSFFRSjBhaW9DQUY0YklnY2dDQ29DRENBSUlBZEJBblJxS2dJQVhoc2lCeUFJS2dJUUlBZ2dCMEVDZEdvcUFnQmVHeUlISUFncUFoUWdDQ0FIUVFKMGFpb0NBRjRiSWdjZ0NDb0NHQ0FJSUFkQkFuUnFLZ0lBWGhzaUJ5QUlLZ0ljSUFnZ0IwRUNkR29xQWdCZUd5SUhJQWdxQWlBZ0NDQUhRUUowYWlvQ0FGNGJJZ2RCQW5ScUtnSUFJaWREQUFBQUFGd0VRQ0FCSUFzZ0IwRWtiR3BCSlB3S0FBQUxJQXRCZ0FOcUpBQWdKME1BQUFBQVhDRVlDeUFLUWFBQ2FpUUFJQmdFUUNBQkVJb0dpN3RFOFdqamlMWDQ1RDVqUlNFZ0N5QU9RYUFDYWlRQUlDQkZEUUFnQkNvQ0JDRXVJQVFxQWdBaEx5QUJLZ0lNSVRBZ0Fpb0NCQ0UzSUFFcUFoQWhNU0FCS2dJWUlTd2dBU29DQUNFcElCSWdGeW9DWENJcklBSXFBZ0FpS2lBQktnSWNJaWlVSUFFcUFnUWdGeW9DV0NJdGxaSWlKNVE0QWdRZ0VpQXJJQ3dnS3BRZ0tTQXRsWklpTXBRNEFnQWdBaW9DQUNFeklBRXFBaUFoTkNBQktnSUlJVFVnRWlBcklDZ2dONVFnTVNBdGxaSWlLWlE0QWhBZ0VpQXJJQ3dnTjVRZ01DQXRsWklpS3BRNEFnd2dFaUFySUM2TWxDSW9JQ2VVSUNzZ0w0eVVJaWNnTXBRZ05DQXpsQ0ExSUMyVmtwS1NPQUlJSUJJZ0tDQXBsQ0FuSUNxVUlBRXFBaUFnQWlvQ0JKUWdBU29DRkNBdGxaS1NramdDRkNBU0lDc2dBU29DR0pRaUtEZ0NHQ0FTSUNzZ0FTb0NISlFpSnpnQ0hDQVNJQUVxQWlBZ0tDQUVLZ0lBbEpNZ0p5QUVLZ0lFbEpNNEFpQkJBU0VBQ3lBWFFaQUJhaVFBSUFCRkRRQWdIQ2dDQUNBbWFpRVJRUUFoRUNNQVFUQnJJaGdrQUNBWVFTaHFJZ0lnRVNBUEVPa0JJQmhCSUdvaUFDQVJJQTlCQ0dvaUNCRHBBU0FZUVJocUlnUWdFU0FQUVJCcUlnMFE2UUVnR0NBWUtRTW9Od01RSUJnZ0dDa0RJRGNEQ0FKQUlBOGdDQ0FOSUFJZ0FDQUVFSm9EUlEwQVFRTWhDU0FQSVJJZ0NDRUhBMEFnQ1VFRVJ3UkFJQUlpQVNBUklBMUJDR29pRFJEcEFTQUpRUUZxSVFrZ0VrRUlhaUlTSUFkQkNHb2lCeUFOSUFBZ0JDQUJFSm9ESUFBaEFpQUVJUUFnQVNFRURRRU1BZ3NMSUFjZ0RTQVBJQUFnQkNBWVFSQnFJZ0FRbWdORkRRQWdEU0FQSUFnZ0JDQUFJQmhCQ0dvUW1nTWhFQXNnR0VFd2FpUUFJQkJGRFFBZ0ZrRUJhaUVXQ3lBVVFRRnFJUlFNQVFzTElCWkZEUU5EQUFDQVB5QTJJRGFVbFNFb0lDUWdHU0FaSUNSS0d5RUxRUUFoQUNBV1FRQWdGa0VBU2hzaEJDQWNLQUlZSVFKQkFDRVVBMEFnQkNBVVJnUkFBMEFnQUNBWlNDQVdRUUpLY1VVRVFFRUJJQllnRmtFQlRCc2hBaUFjS0FJWUlnUXFBZ0FoS0NBRUtBSUVJUUZCQVNFVUEwQWdBaUFVUmdSQUlCVWdIQ2dDQUNBQlFTUnNha0VrL0FvQUFDQVZLZ0lnSVNjZ0ZVR0FnSUQ4QXpZQ0lDQVZJQlVxQWdCREFBQ0FQeUFubFNJbmxEZ0NBQ0FWSUNjZ0ZTb0NCSlE0QWdRZ0ZTQW5JQlVxQWdpVU9BSUlJQlVnSnlBVktnSU1sRGdDRENBVklDY2dGU29DRUpRNEFoQWdGU0FuSUJVcUFoU1VPQUlVSUJVZ0p5QVZLZ0lZbERnQ0dDQVZJQ2NnRlNvQ0hKUTRBaHhCQVF3S0JTQW9JQVFnRkVFRGRHb2lBQ29DQUNJblhnUkFJQ2NoS0NBQUtBSUVJUUVMSUJSQkFXb2hGQXdCQ3dBTEFBc2dBQ0FMSUJrZ0FHc2lBU0FCSUF0S0d5QUFhaUlCSUFBZ0FVb2JJUWRCQUNFRUEwQWdIQ2dDR0NFQ0lBUWdGa1lFUUNBV1FRSnRJQlpCQVhWQkFXc2dGa0VCY1JzaENVRUFJUVFDUUFKQUlCWkJBRW9FUUNBSlFRQk1EUUVnRmtFQmF5RUFJQUlnQ1VFQmF5SUlRUU4wYWlFUUEwQWdBQ0FFU2dSQUlCQW9BZ1FoRkNBUUtnSUFJU2tnQUNFU0lBUWhEd05BQWtBZ0FpQVBRUU4wYWlJTktnSUFJaW9nS1YxRkJFQWdLU0FxWFEwQklBMG9BZ1FnRkU0TkFRc2dEMEVCYWlFUERBRUxBMEFDUUNBcElBSWdFa0VEZEdvaUVTb0NBQ0luWFVVRVFDQW5JQ2xkRFFFZ0ZDQVJLQUlFVGcwQkN5QVNRUUZySVJJTUFRc0xJQThnRWt3RVFDQU5JQ2M0QWdBZ0VTQXFPQUlBSUEwb0FnUWhCeUFOSUJFb0FnUTJBZ1FnRVNBSE5nSUVJQkpCQVdzaEVpQVBRUUZxSVE4TElBOGdFa3dOQUFzZ0FDQVNJQWtnRDBvYklRQWdEeUFFSUFnZ0Vrb2JJUVFNQVFzTElCOGdFQ2tDQURjQ0JBd0NDMEh3aUFWQjFhc0JFRWRCaEt3QkVFZEJvYzRBRUVkQjBnQVFTa0g1MFFBUVIwSE9yQUVRUnhCSkVGZ0FDMEh3aUFWQjRxMEJFRWRCaEt3QkVFZEJvYzRBRUVkQjB3QVFTa0g1MFFBUVIwSC9yUUVRUnhCSkVGZ0FDeUFXUVFGMklSWWdBU0VBREFJTElCd29BZ0FnQWlBRVFRTjBJaEpxS0FJRVFTUnNhaUVQSUFBaEZBTkFJQWNnRkVZRVFDQUVRUUZxSVFRTUFnVWdIU0FhSUJSQkFuUnFLQUlBUVFOMElnSnFJUWdqQUVFUWF5SVFKQUFnRUVFSWFpQVFRUXhxSUE4Z0NDb0NBQ0FJS2dJRUVKQUdJQkFxQWdnZ0FpQWVhaUlDS2dJQWt5SW5JQ2VVSUJBcUFnd2dBaW9DQkpNaUp5QW5sSklnS0pSREFBQ0FQNUlRdkFJaEp5QVFRUkJxSkFBZ0hDZ0NHQ0FTYWlJQ0lDY2dBaW9DQUpJNEFnQWdGRUVCYWlFVURBRUxBQXNBQ3dBTEFBVWdBaUFVUVFOMGFpSUJJQlEyQWdRZ0FVRUFOZ0lBSUJSQkFXb2hGQXdCQ3dBTEFBdEI4SWdGUWZXcEFSQkhRWU9uQVJCSFFhSE9BQkJIUWZrQUVFcEIrZEVBRUVkQnM2b0JFRWNRU1JCWUFBdEI4SWdGUVlHcEFSQkhRWU9uQVJCSFFhSE9BQkJIUWZnQUVFcEIrZEVBRUVkQi9yZ0JFRWNRU1JCWUFBdEI4SWdGUVphbUFSQkhRWU9uQVJCSFFhSE9BQkJIUWZjQUVFcEIrZEVBRUVkQmxxZ0JFRWNRU1JCWUFBdEJBQXNnSDBFUWFpUUFCRUFqQUVId0FHc2lEeVFBQW45QkFDQVBRU0JxSWdBZ0ZVT3N4U2MzRUk4R1JRMEFHaUFQUWdBM0F4Z2dEMEVBTmdJVUlBOGdCYklpS0RnQ0VDQVBJQWF5SWljNEFnd2dEeUFvT0FJSUlBOGdKemdDQkNBUFFRQTJBZ0FnRDBIb0FHb2lCQ0FBSUE5QkdHb1E2UUVnRDBIZ0FHb2lBeUFBSUE5QkVHb1E2UUVnRDBIWUFHb2lBaUFBSUE5QkNHb1E2UUVnRDBIUUFHb2lBU0FBSUE4UTZRRkJBQ0FGSUFac3QwUXRReHpyNGpZYVA2SzJJQU1xQWdBaU1DQUVLZ0lBSWl5VElqRWdBaW9DQkNJdUlBUXFBZ1FpS1pNaUtwUWdBeW9DQkNJeUlDbVRJak1nQWlvQ0FDSXZJQ3lUSWllVWs0dERBQUFBUDVRaUtDQW5JQUVxQWdRaU5DQXBreUkxbENBcUlBRXFBZ0FpS1NBc2t5SXFsSk9MUXdBQUFEK1VJaWNnSnlBb1hoc2lLQ0F4SURXVUlETWdLcFNUaTBNQUFBQS9sQ0luSUNjZ0tGNGJJaWdnTUNBdmt5QTBJQzZUbENBeUlDNlRJQ2tnTDVPVWs0dERBQUFBUDVRaUp5QW5JQ2hlRzE0TkFCb2dCQ0FESUFJUXB3RWhKMEVCUVg4Z0F5QUNJQUVRcHdGREFBQUFBRjRiUVFGQmZ5QW5Rd0FBQUFCZUcycEJBVUYvSUFJZ0FTQUVFS2NCUXdBQUFBQmVHMnBCQVVGL0lBRWdCQ0FERUtjQlF3QUFBQUJlRzJvaUFDQUFRUjkxSWdCeklBQnJRUVJHQ3lFRElBOUI4QUJxSkFBTElDTVFWaG9nSWhCV0dpQWJRVUJySkFBZ0F3VWdIaUFEUVFOMEloeHFJZ0lnRWlBSUlCeHFJZzhvQWdCQkZHeHFJZ0VxQWdBNEFnQWdBaUFCS2dJRU9BSUVJQndnSFdvaUFpQUhJQThvQWdSQkZHeHFJZ0VxQWdBNEFnQWdBaUFCS2dJRU9BSUVJQU5CQVdvaEF3d0JDd3NMb2dnQ0EzOEdmU01BUVNCcklnUWtBQ0FFSUFNZ0FTZ0NXRzhnQVNnQ1ZHOGdBU2dDTkc4aUJUWUNEQ0FFSUFNZ0JXc2dBU2dDV0c4Z0FTZ0NWRzhnQVNnQ05HMGlCVFlDQ0NBRUlBTWdCQ2dDRENBQktBSTBJQVZzYW1zZ0FTZ0NXRzhnQVNnQ1ZHMGlCVFlDQkNBRUlBTWdCQ2dDRENBQktBSlVJQVZzSUFFb0FqUWdCQ2dDQ0d4cWFtc2dBU2dDV0cwaUF6WUNBQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FFS0FJTUlnVkJBRTRFUUNBRklBRW9BalJPRFFFZ0JDZ0NDQ0lGUVFCSURRSWdCU0FCS0FJNFRnMERJQVFvQWdRaUJVRUFTQTBFSUFVZ0FTZ0NQRTROQlNBRFFRQklEUVlnQXlBQktBSkFUZzBIREFrTFFmQ0lCVUdIbkFFUVIwSHpuQUVRUjBHaHpnQVFSMEcrQVJCS1FmblJBQkJIUWN1ZEFSQkhFRWtNQnd0QjhJZ0ZRYStlQVJCSFFmT2NBUkJIUWFIT0FCQkhRYjhCRUVwQitkRUFFRWRCeTUwQkVFY1FTUXdHQzBId2lBVkIxNTRCRUVkQjg1d0JFRWRCb2M0QUVFZEJ3QUVRU2tINTBRQVFSMEdzbndFUVJ4QkpEQVVMUWZDSUJVSDBud0VRUjBIem5BRVFSMEdoemdBUVIwSEJBUkJLUWZuUkFCQkhRYXlmQVJCSEVFa01CQXRCOElnRlFkS2dBUkJIUWZPY0FSQkhRYUhPQUJCSFFjSUJFRXBCK2RFQUVFZEJyNkVCRUVjUVNRd0RDMEh3aUFWQi9xRUJFRWRCODV3QkVFZEJvYzRBRUVkQnd3RVFTa0g1MFFBUVIwR3ZvUUVRUnhCSkRBSUxRZkNJQlVIbm9nRVFSMEh6bkFFUVIwR2h6Z0FRUjBIRUFSQktRZm5SQUJCSFFjZWpBUkJIRUVrTUFRdEI4SWdGUWJ5a0FSQkhRZk9jQVJCSFFhSE9BQkJIUWNVQkVFcEIrZEVBRUVkQng2TUJFRWNRU1FzUVdBQUxJQUFnQUNnQ0FEWUNCQUpBSUFFb0FvQUJJQUVvQW54clFRSjFJZ01nQWlnQ0JDQUNLQUlBYTBFRGRVMEVRQ0FEUVFBZ0EwRUFTaHNoQlNBQktBSndJUU1EUUNBRklBWkdEUUlnQXlvQ0JDRUhJQU1xQWdnaENDQURLZ0lNSVFrZ0JDZ0NDTGRFQUFBQUFBQUE0RCtndGlFS0lBUW9BZ1MzUkFBQUFBQUFBT0Evb0xZaEN5QUVLQUlBdDBRQUFBQUFBQURnUDZDMklRd2dCQ0FES2dJQUlBUW9BZ3kzUkFBQUFBQUFBT0Evb0xhVGl6Z0NIQ0FFSUFjZ0NwT0xPQUlZSUFRZ0NTQU1rNHM0QWhBZ0JDQUlJQXVUaXlJSElBRW9Banl5SUFlVElnZ2dCeUFJWFJzaUJ6Z0NGQ0FIUXdBQUFBQmdCRUFDUUNBRUtnSWNRd0FBZ0Q5ZFJRMEFJQVFxQWhoREFBQ0FQMTFGRFFBZ0JDb0NGRU1BQUlBL1hVVU5BQ0FFS2dJUVF3QUFnRDlkUlEwQUlBQWdBaWdDQUNBQktBSjhJQVpCQW5ScUtBSUFRUU4wYWhEWEFRc2dBMEVRYWlFRElBWkJBV29oQmd3QkJVSHdpQVZCbGFVQkVFZEI4NXdCRUVkQm9jNEFFRWRCelFJUVNrSDUwUUFRUjBIMHBRRVFSeEJKRUZnQUN3QUxBQXRCOElnRlFiYWJBUkJIUWNmR0FCQkhRYUhPQUJCSFFkWUNFRXBCK2RFQUVFZEI5SnNCRUVjUVNSQllBQXNnQkVFZ2FpUUFDL29aQXdwOUVYOEJmQ01BUVNCckloWWtBQ0FXUVJScUlBTW9BZ1FnQXlnQ0FHdEJBWFVRL3dNaEd5QVdRUWhxSUFNb0FnUWdBeWdDQUd0QkFYVVEvd01oSENBREtBSUVJQU1vQWdBaUUydEJBM1VoRlNBY0tBSUFJUlFnR3lnQ0FDRVhJQUlvQWdBaEdTQUJLQUlBSVJwQkFDRUNBa0FEZnlBQ0lCVkdCSDhnQkxJaUNFUE56RXcrbENBSWtpSUlqQ0VKSUFXeUlncER6Y3hNUHBRZ0NwSWlDb3doQ3lBQVFRbzJBa0FnQUVFTU5nSThJQUJCQURZQ09DQUFRUUEyQWpRZ0FFS0FnSUQ4aTRDQXdEODNBaVFnQUNBS09BSWdJQUFnQ3pnQ0hDQUFJQWc0QWhnZ0FDQUpPQUlVSUFCQ2dJQ0FpWVQ3bHU4K053SXNJQUJCQURZQ1ZDQUFRUUEyQWxnZ0FFRUJPZ0FRSUFCQjNBQnFJZ0VRaGdZZ0FDQUhRUUYxc2pnQ0RDQUFJQVpCQVhXeU9BSUlJQUFnQnpZQ0JDQUFJQVkyQWdBZ0d5Z0NBQ0VaSUJ3b0FnQWhHaUFES0FJRUlBTW9BZ0JyUVFOMUlSTkJBQ0VESXdCQkVHc2lFaVFBSUFFUWhnWWdFd1JBSUFCQjhBQnFJaDBnRTBFQ2RCRHlBU0FBUWZ3QWFpSWVJQk1RZ3dJZ0FDMEFFRUVCUmdSQUFrQWpBRUVRYXlJWUpBQWdBQ2dDQkNFQklBQW9BZ0FoQWlBWVFRUnFJQk1RL3dNaEZRSkFBa0FnRTBFQVNnUkFJQUFvQWdCQkFFd05BU0FBS0FJRVFRQk1EUUlnR2tFTWFpRUZJQmxCREdvaEJpQVZLQUlBSVFjZ0FpQUJJQUVnQWtnYnNpRUlRUUFoQkFOQUlBUWdFMFlFUUFKOUlCVW9BZ0FpQVNFVUlCVW9BZ1FnQVd0QkFuVWlBVUVDYlNBQlFRRjFRUUZySUFGQkFYRWJJUmRCQUNFR0FrQWdBVUVBU2dSQUlCZEJBRXdOQVNBQlFRRnJJUWNnRkNBWFFRRnJJaDlCQW5ScUlTQURRQ0FnS2dJQUlRZ2dCeUlCSUFZaUFrb0VRQU5BSUFJaEJBTkFJQVFpQWtFQmFpRUVJQlFnQWtFQ2RHb2lJU29DQUNJSklBaGREUUFMSUFFaEJRTkFJQVVpQVVFQmF5RUZJQWdnRkNBQlFRSjBhaUlpS2dJQUlncGREUUFMSUFFZ0FrNEVRQ0FoSUFvNEFnQWdJaUFKT0FJQUlBUWhBaUFGSVFFTElBRWdBazROQUFzZ0J5QUJJQUlnRjBnYklRY2dBaUFHSUFFZ0gwZ2JJUVlNQVFzTElBZ01BZ3RCOElnRlFmNklBUkJIUWVTTEFSQkhRWXdaRUVkQk5SQktRY2NkRUVkQjdZd0JFRWNRU1JCWUFBdEI4SWdGUWJHT0FSQkhRZVNMQVJCSFFZd1pFRWRCTmhCS1FjY2RFRWRCN280QkVFY1FTUkJZQUFzaENDQUFRUVVDZnlBQUtnSVlJQUFxQWhTVElBaERBQUNBUHBRaUNKV05JZ21MUXdBQUFFOWRCRUFnQ2FnTUFRdEJnSUNBZ0hnTElnRWdBVUVGVEJzaUFUWUNOQ0FBUVFVQ2Z5QUFLZ0lnSUFBcUFoeVRJQWlWalNJSWkwTUFBQUJQWFFSQUlBaW9EQUVMUVlDQWdJQjRDeUlDSUFKQkJVd2JJZ0kyQWpnZ0FDQUJJQUpzSWdFMkFsUWdBQ0FCSUFBb0FqeHNOZ0pZSUJVUVZob2dHRUVRYWlRQURBVUZJQWNnQkVFQ2RHb2dCaUFFUVFSMElnRnFLZ0lBUXdBQWdEOGdBU0FGYWlvQ0FDSUpJQWxEQUFBQUFGc2JsU0FJbERnQ0FDQUVRUUZxSVFRTUFRc0FDd0FMUWZDSUJVR1EyUUFRUjBIOEVCQkhRWXdaRUVkQjBBRVFTa0hISFJCSFFkYmFBQkJIRUVrTUJ3dEI4SWdGUWNqZUFCQkhRZndRRUVkQmpCa1FSMEhSQVJCS1FjY2RFRWRCaU9FQUVFY1FTUXdHQzBId2lBVkJzdU1BRUVkQi9CQVFSMEdNR1JCSFFkSUJFRXBCeHgwUVIwSHQ1UUFRUnhCSkRBVUxDeUFUUVFBZ0UwRUFTaHNoR0VFQUlRSURRQ0FESUJoR0JFQWdIU0FDUVFKMEVQSUJJQjRnQWhDREFnVWdHU0FEUVFSMElnUnFJZ0VxQWdBaERpQUJLZ0lFSVE4Z0FTb0NEQ0VNSUFRZ0dtb2lCQ29DQUNFS0lBUXFBZ1FoQ3lBRUtnSU1JUWtnRWlBQktnSUlJQVFxQWdpVElnZzRBZ1FDUUNBU0lBaTdJaU5FR0MxRVZQc2hDY0JsQkh4RUdDMUVWUHNoR1VBRklDTkVHQzFFVlBzaENVQmtSUTBCUkJndFJGVDdJUm5BQ3lBam9MWWlDRGdDQkFzQ1FBSkFJQWk3SWlORUdDMUVWUHNoQ2NCa0JFQWdJMFFZTFVSVSt5RUpRR1ZGRFFFZ0VpQU1Rd0FBZ0Q4Z0NTQUpRd0FBQUFCYkc1VWlDRGdDQUNBQUtnSXdJUXdnQ0JDOEFpRU5JQklxQWdRaENTQVNJQTBnREpRNEFnQWdDUkNZQlNFTUlBQXFBZ3doRFNBU0lBNGdDQ0FKRU1JRmxDSUpJQXFVSUFzZ0NDQU1sQ0lJbEpPVElBa2dBQ29DQ0pRZ0RTQUlsSk9TT0FJTUlCSWdEeUFJSUFxVUlBc2dDWlNTa3lBSUlBQXFBZ2lVSUFrZ0FDb0NESlNTa2pnQ0NBd0NDMEh3aUFWQnR6MFFSMEh1NWdBUVIwR01HUkJIUWRRREVFcEJ4eDBRUjBIWHdRQVFSeEJKREFjTFFmQ0lCVUd6eHdBUVIwSHU1Z0FRUjBHTUdSQkhRZFVERUVwQnh4MFFSMEhYd1FBUVJ4QkpEQVlMQW44Z0Vpb0NDQ0VJSUJJcUFnUWhDeUFTS2dJQUlRbEJBQ0VVQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FDb0NGQ0lPSUJJcUFnd2lDbDROQUNBS0lBQXFBaGdpRDJBTkFDQUlJQUFxQWh3aURGME5BQ0FJSUFBcUFpQWlEV0FOQUNBTHV5SWpSQmd0UkZUN0lRbkFaU0FqUkJndFJGVDdJUWxBWkhJTkFDQUpJQUFxQWlRaUVGME5BQ0FKSUFBcUFpZ2lFV0FOQUNBS0lBNWdSUTBCSUFvZ0QxMUZEUUlnQ0NBTVlFVU5BeUFJSUExZFJRMEVJQ05FR0MxRVZQc2hDY0JrUlEwRklDTkVHQzFFVlBzaENVQmxSUTBHSUFrZ0VHQkZEUWNnQ1NBUlhVVU5DQ0FBSUFvZ0FDb0NGQ0lLazBNQUFJQS9JQUFxQWhnZ0NwTWlDaUFLUXdBQUFBQmJHNVVnQUNnQ05MS1VPQUpFSUFBZ0NDQUFLZ0ljSWdpVFF3QUFnRDhnQUNvQ0lDQUlreUlJSUFoREFBQUFBRnNibFNBQUtBSTRzcFE0QWtnZ0FDQUx1MFFZTFVSVSt5RUpRS0JFZzhqSmJUQmZ4RCtpSUFBb0FqeTNvclk0QWt3Z0FDQUpJQUFxQWlRaUNKTkRBQUNBUHlBQUtnSW9JQWlUSWdnZ0NFTUFBQUFBV3h1VklBQW9Ba0N5bERnQ1VBSi9JQUFxQWt4REFBQUF2NUtPSWdpTFF3QUFBRTlkQkVBZ0NLZ01BUXRCZ0lDQWdIZ0xJQUFvQWp3aUYyb2dGMjhoQmdKL0lBQXFBa1JEQUFBQXY1S09JZ2lMUXdBQUFFOWRCRUFnQ0tnTUFRdEJnSUNBZ0hnTElRRUNmeUFBS2dKUVF3QUFBTCtTamlJSWkwTUFBQUJQWFFSQUlBaW9EQUVMUVlDQWdJQjRDeUVFSUFGQkFFZ0NmeUFBS2dKSVF3QUFBTCtTamlJSWkwTUFBQUJQWFFSQUlBaW9EQUVMUVlDQWdJQjRDeUVGRFFBZ0JVRUFTQ0FCUVFGcUlnY2dBQ2dDTkU1eURRQkJBQ0FGUVFGcUloTWdBQ2dDT0U0TkNob2dCRUVBU0EwQUlBUkJBV29pRlNBQUtBSkFUZzBBSUFBZ0FDQUJJQVVnQmlBRUVKNEJFSjBCSUFBZ0FDQUhJQVVnQmlBRUVKNEJFSjBCSUFBZ0FDQUhJQk1nQmlBRUVKNEJFSjBCSUFBZ0FDQUhJQk1nQmtFQmFpQVhieUlVSUFRUW5nRVFuUUVnQUNBQUlBY2dFeUFVSUJVUW5nRVFuUUVnQUNBQUlBY2dFeUFHSUJVUW5nRVFuUUVnQUNBQUlBY2dCU0FVSUFRUW5nRVFuUUVnQUNBQUlBY2dCU0FVSUJVUW5nRVFuUUVnQUNBQUlBY2dCU0FHSUJVUW5nRVFuUUVnQUNBQUlBRWdFeUFHSUFRUW5nRVFuUUVnQUNBQUlBRWdFeUFVSUFRUW5nRVFuUUVnQUNBQUlBRWdFeUFVSUJVUW5nRVFuUUVnQUNBQUlBRWdFeUFHSUJVUW5nRVFuUUVnQUNBQUlBRWdCU0FVSUFRUW5nRVFuUUVnQUNBQUlBRWdCU0FVSUJVUW5nRVFuUUVnQUNBQUlBRWdCU0FHSUJVUW5nRVFuUUZCQVNFVUN5QVVEQWtMUWZDSUJVR0pDUkJIUWU3bUFCQkhRWXdaRUVkQjZBSVFTa0hISFJCSFFjWWdFRWNRU1F3SEMwSHdpQVZCeWlZUVIwSHU1Z0FRUjBHTUdSQkhRZWtDRUVwQnh4MFFSMEhHSUJCSEVFa01CZ3RCOElnRlFiSXRFRWRCN3VZQUVFZEJqQmtRUjBIcUFoQktRY2NkRUVkQjVqSVFSeEJKREFVTFFmQ0lCVUc1T1JCSFFlN21BQkJIUVl3WkVFZEI2d0lRU2tISEhSQkhRZVl5RUVjUVNRd0VDMEh3aUFWQnR6MFFSMEh1NWdBUVIwR01HUkJIUWV3Q0VFcEJ4eDBRUjBIWHdRQVFSeEJKREFNTFFmQ0lCVUd6eHdBUVIwSHU1Z0FRUjBHTUdSQkhRZTBDRUVwQnh4MFFSMEhYd1FBUVJ4QkpEQUlMUWZDSUJVRzd6UUFRUjBIdTVnQVFSMEdNR1JCSFFlNENFRXBCeHgwUVIwSEQwQUFRUnhCSkRBRUxRZkNJQlVIRTFBQVFSMEh1NWdBUVIwR01HUkJIUWU4Q0VFcEJ4eDBRUjBIRDBBQVFSeEJKQ3d3R0N3UkFJQUFvQW5BZ0FrRUVkR29pQVNBQUtnSkVPQUlBSUFFZ0FDb0NTRGdDQkNBQklBQXFBa3c0QWdnZ0FTQUFLZ0pRT0FJTUlBQW9BbndnQWtFQ2RHb2dBellDQUNBQ1FRRnFJUUlMSUFOQkFXb2hBd3dCQ3dzTElCSkJFR29rQUVNQUFBQUFJUWdnRmtFQU5nSUVJQlpCZnpZQ0FDQUFRZVFBYWlFQUEwQWdBQ2dDQUNJQUJFQWdDQ0FBS0FJTXMxMUZEUUVnRmlBQUtBSUlOZ0lBSUJZZ0FDZ0NETE1pQ0RnQ0JBd0JDd3NnRmlnQ0FDRUFJQllxQWdRaENDQWNFRllhSUJzUVZob2dGa0VnYWlRQVFYOGdBQ0FJUXdBQVFFQmRHd1VnRXlBQ1FRTjBhaUlTS0FJRUlSZ2dGeUFDUVFSMEloMXFJZ0VnR2lBU0tBSUFRUlJzYWlJU0tnSUFPQUlBSUFFZ0Vpb0NCRGdDQkNBQklCSXFBZ2c0QWdnZ0FTQVNLZ0lNT0FJTUlCUWdIV29pQVNBWklCaEJGR3hxSWhJcUFnQTRBZ0FnQVNBU0tnSUVPQUlFSUFFZ0Vpb0NDRGdDQ0NBQklCSXFBZ3c0QWd3Z0FrRUJhaUVDREFFTEN3OExFRmdBQzBVQkFuOENRQ0FCUVFCTURRQWdBRUVBTmdJQVFRRWhBZ05BSUFFZ0FrWU5BU0FBSUFKQkFuUnFJZ01nQTBFRWF5Z0NBRUVCYWpZQ0FDQUNRUUZxSVFJTUFBc0FDd3VQRGdFU2Z5TUFRU0JySWdna0FBSkFBa0FDUUFKQUFrQUNRQUpBSUFBb0FoQWlDaUFBS0FKc0lnWWdCaUFLU0JzZ0JVNEVRQ0FCUVFFNkFHUWdBVUgwQUdvZ0JSQ0RBa0VBSVFJZ0JVRUFJQVZCQUVvYklRQURRQ0FBSUFKR0RRSWdBa0VDZENJRElBRW9BblJxSUFNZ0JHb29BZ0EyQWdBZ0FrRUJhaUVDREFBTEFBc2dDRUlBTndNUUlBaENBRGNEQ0NBSVFZQ0FnUHdETmdJWUlBSWhDaU1BUVJCcklnc2tBQUpBQWtBQ1FBSkFJQUJCREdvaUJ5Z0NCQ0lDSUFjb0FoQWdCeWdDREd0QkFuVkdCRUFnQTBFQVRBMEJJQU1nQlVnTkFpQUNJQVZLRFFOQmZ5RUNJQXRCZnpZQ0RDQUhRUmhxSWhFZ0JTQUxRUXhxRUlFRUlBdEJmellDQ0NBSFFTUnFJZ2tnQlNBTFFRaHFFSUVFSUFkQk1Hb2dCUkNEQWlBSEtBSXdJZ1lnQnlnQ05DQUdhMEVDZFJDV0JnTkFJQWNvQWdnZ0Qwd0VRQ0FIS0FJRUlBY29BaEFnQnlnQ0RHdEJBblZIQkVCQjhJZ0ZRZFg4QUJCSFFacjlBQkJIUWFIT0FCQkhRYnNCRUVwQitkRUFFRWRCNVA0QUVFY1FTUXdPQ3dVZ0J5Z0NNQ0lHSUFjb0FqUWdCbXRCQW5VZ0J5Z0NCQ0FIS0FJQUVJQUVJQWNvQWpBaEVpQUhLQUlFSVJCQkFDRU1RUUFoQmdKQUFrQUNRQUpBSUFVZ0NTZ0NCQ0FKS0FJQWEwRUNkVVlFUUNBRFFRQk1EUUVnQXlBRlNBMENJQkJCQUV3TkF5QUZRUUFnQlVFQVNoc2hFd05BSUF3Z0UwWU5CU0FFSUF4QkFuUWlGR29oRlVFQUlRMUJmeUVPQTBBZ0RTQVFSZ1JBSUF4QkFXb2hEQ0FHSUE1cUlRWU1BZ1VnRGlBS0lCVW9BZ0JCNEFCc2FpQUtJQVFnRWlBTlFRSjBhaUlXS0FJQVFRSjBhaWdDQUVIZ0FHeHFFTThDSWhkTEJFQWdDU2dDQUNBVWFpQVdLQUlBTmdJQUlCY2hEZ3NnRFVFQmFpRU5EQUVMQUFzQUN3QUxRZkNJQlVIdjZRQVFSMEdhL1FBUVIwR2h6Z0FRUjBIR0FSQktRZm5SQUJCSFFkQ01BUkJIRUVrUVdBQUxRZkNJQlVIbWdBRVFSMEdhL1FBUVIwR2h6Z0FRUjBISEFSQktRZm5SQUJCSFFmS0JBUkJIRUVrUVdBQUxRZkNJQlVHdWhRRVFSMEdhL1FBUVIwR2h6Z0FRUjBISUFSQktRZm5SQUJCSFFaQ0dBUkJIRUVrUVdBQUxRZkNJQlVHS2pnRVFSMEdhL1FBUVIwR2h6Z0FRUjBISkFSQktRZm5SQUJCSFFjNk9BUkJIRUVrUVdBQUxJQUlnQmtzRVFDQVJJQWtRcUFRZ0J5Z0NEQ0FIS0FJd0lBY29BZ1JCQW5UOENnQUFJQVloQWdzZ0QwRUJhaUVQREFFTEN5QUxRUkJxSkFBTUJBdEI4SWdGUWRYOEFCQkhRWnI5QUJCSFFhSE9BQkJIUVpvQkVFcEIrZEVBRUVkQjVQNEFFRWNRU1F3S0MwSHdpQVZCNW9BQkVFZEJtdjBBRUVkQm9jNEFFRWRCbXdFUVNrSDUwUUFRUjBIeWdRRVFSeEJKREFrTFFmQ0lCVUd1aFFFUVIwR2EvUUFRUjBHaHpnQVFSMEdjQVJCS1FmblJBQkJIUVpDR0FSQkhFRWtNQ0F0QjhJZ0ZRYWFJQVJCSFFacjlBQkJIUWFIT0FCQkhRWjBCRUVwQitkRUFFRWRCMElzQkVFY1FTUXdIQ3lBQUtBSW9JZ2tnQUNnQ0pDSUdhMEVDZFNBRlJ3MEJRUUFoQWdKQUEwQUNRQ0FKSUFaclFRSjFJQUpOQkVBZ0NDZ0NGQ0lDUVFGSERRRWdBVUVCT2dCa0lBRkI5QUJxSUFVUWd3SkJBQ0VDSUFWQkFDQUZRUUJLR3lFQUEwQWdBQ0FDUmcwRUlBSkJBblFpQXlBQktBSjBhaUFESUFScUtBSUFOZ0lBSUFKQkFXb2hBZ3dBQ3dBTElBWWdBa0VDZENJSmFpZ0NBQ0lHUVg5R0RRVWdCU0FHVEEwR0lBUWdCa0VDZEdvaUJpZ0NBQ0FEVGcwSElBaEJDR29nQmhDSEJDQUVJQWxxRUlRRUlBSkJBV29oQWlBQUtBSWtJUVlnQUNnQ0tDRUpEQUVMQ3lNQVFTQnJJZ1FrQUFKQUFrQWdBVUhvQUdvaUJTSUJLQUlJSUFFb0FnQWlCbXRCQW5VZ0Fra0VRQ0FDUVlDQWdJQUVUdzBCSUFFZ0JFRU1haUFDSUFFb0FnUWdCbXRCQW5VZ0FVRUlhaENKQWlJQkVOQUNJQUVRaUFJTElBUkJJR29rQUF3QkN4Q2dBZ0FMSUFnb0FoQWhBZ05BSUFKRkRRRWdBaWdDRUNBQ0tBSU1SZzBIUVlBQkVHWWhBU0FBSUFBb0FnUWlCRUVCYWpZQ0JDQUNLQUlJSVFZZ0FVSUFOd0pvSUFFZ0JEWUNBQ0FCUWdBM0FuQWdBVUlBTndKNElBRkJCR29nQ2lBR1FlQUFiR3BCNEFEOENnQUFJQWdnQVRZQ0JDQUJRUUE2QUdRZ0JTQUlRUVJxRUlNRUlBQWdDQ2dDQkNBS0lBTWdBaWdDRENJQklBSW9BaEFnQVd0QkFuVVFsd1lnQWlnQ0FDRUNEQUFMQUFzZ0NFRUlhaENmQmdzZ0NFRWdhaVFBRHd0QjhJZ0ZRZS9wQUJCSFFmenFBQkJIUWFIT0FCQkhRZXNDRUVwQitkRUFFRWRCaiswQUVFY1FTUXdFQzBId2lBVkJsL0FBRUVkQi9Pb0FFRWRCb2M0QUVFZEI3UUlRU2tINTBRQVFSMEhXOEFBUVJ4QkpEQU1MUWZDSUJVR1E4d0FRUjBIODZnQVFSMEdoemdBUVIwSHVBaEJLUWZuUkFCQkhRZmZ6QUJCSEVFa01BZ3RCOElnRlFmZjJBQkJIUWZ6cUFCQkhRYUhPQUJCSFFlOENFRXBCK2RFQUVFZEI5L01BRUVjUVNRd0JDMEh3aUFWQjB2Z0FFRWRCL09vQUVFZEJvYzRBRUVkQmd3TVFTa0g1MFFBUVIwSGkrUUFRUnhCSkN4QllBQXMwQVFGL0lBRkJnSUNBZ0FSUEJFQVFvQUlBQ3lBQUlBRVFyUU1pQWpZQ0JDQUFJQUkyQWdBZ0FDQUNJQUZCQW5ScU5nSUlDMUVCQTM4Z0FFSG9BR29EUUNBQUtBSnNJQUFvQW1naUFXdEJBblVnQWtzRVFDQUJJQUpCQW5ScUtBSUFJZ0VFUUNBQkVKa0dDeUFCRUVnZ0FrRUJhaUVDREFFTEN5QUFRZlFBYWhCV0doQldHZ3NsQVFGL0lBQW9BZ0FoQWlBQUlBRTJBZ0FnQWdSQUlBSUVRQ0FDRUprR0N5QUNFRWdMQzJnQkFuOGdBQVJBSUFCQkpHb2lBVUhVQUdvUVZob2dBVUhJQUdvUVZob2dBVUVNYWlJQ1FUQnFFRllhSUFKQkpHb1FWaG9nQWtFWWFoQldHaUFDUVF4cUVGWWFJQUZCQ0dwQkFCQ2FCaUFBUVFocUlnRkJFR29RVmhvZ0FVRUVhaEJXR2dzZ0FCQklDNDBDQWd4L0FYMUJmeUVLQWtBZ0FTZ0NDQ0lHSUFJb0FnUkhEUUFnQUNnQ0JDSURJQUVvQWdSSERRQWdBQ2dDQ0NJSElBSW9BZ2hIRFFCQkFDRUtJQU5CQUNBRFFRQktHeUVMSUFkQkFDQUhRUUJLR3lFTUlBWkJBQ0FHUVFCS0d5RU5JQUFvQWdBaEF3TkFJQVFnQzBZTkFVRUFJUVVnQkNBR2JFRUNkQ0VPQTBBZ0JTQU1Sa1VFUUVFQUlRQWdBMEVBTmdJQUlBSW9BZ0FnQlVFQ2RHb2hDQ0FCS0FJQUlBNXFJUWxEQUFBQUFDRVBBMEFnQUNBTlJrVUVRQ0FESUFrcUFnQWdDQ29DQUpRZ0Q1SWlEemdDQUNBQVFRRnFJUUFnQ1VFRWFpRUpJQWdnQjBFQ2RHb2hDQXdCQ3dzZ0JVRUJhaUVGSUFOQkJHb2hBd3dCQ3dzZ0JFRUJhaUVFREFBTEFBc2dDZ3NoQVFGL0lBQW9BZ0FoQWlBQUlBRTJBZ0FnQWdSQUlBQkJCR29nQWhDbkJnc0xOd0FDUUVIbzVBVCtFZ0FBUVFGeERRQkI2T1FFRUg5RkRRQkI1T1FFUVFBMkFnQkIzT1FFUWdBM0FnQkI2T1FFRUg0TFFkemtCQXN0QVFKL0lBQW9BZ2doQVFOQUlBRUVRQ0FCS0FJQUlBRkJER29RVmhvZ0FSQklJUUVNQVFzTElBQVFuUU1Ma1FJQ0RIOEJmRUYvSVFvQ1FDQUJLQUlJSWdZZ0FpZ0NCRWNOQUNBQUtBSUVJZ01nQVNnQ0JFY05BQ0FBS0FJSUlnY2dBaWdDQ0VjTkFFRUFJUW9nQTBFQUlBTkJBRW9iSVFzZ0IwRUFJQWRCQUVvYklRd2dCa0VBSUFaQkFFb2JJUTBnQUNnQ0FDRURBMEFnQkNBTFJnMEJRUUFoQlNBRUlBWnNRUU4wSVE0RFFDQUZJQXhHUlFSQUlBTkNBRGNEQUNBQ0tBSUFJQVZCQTNScUlRZ2dBU2dDQUNBT2FpRUpRUUFoQUVRQUFBQUFBQUFBQUNFUEEwQWdBQ0FOUmtVRVFDQURJQWtyQXdBZ0NDc0RBS0lnRDZBaUR6a0RBQ0FBUVFGcUlRQWdDVUVJYWlFSklBZ2dCMEVEZEdvaENBd0JDd3NnQlVFQmFpRUZJQU5CQ0dvaEF3d0JDd3NnQkVFQmFpRUVEQUFMQUFzZ0NncytBUUYvSUFGQmdJQ0FnQUpQQkVBUW9BSUFDMEgvLy8vL0FTQUFLQUlJSUFBb0FnQnJJZ0JCQW5VaUFpQUJJQUVnQWtrYklBQkIrUC8vL3dkUEd3czJBUUYvSUFBb0FnUWlBaUFCUVFOMGFpRUJBMEFnQVNBQ1JnUkFJQUFnQVRZQ0JBVWdBa0lBTndJQUlBSkJDR29oQWd3QkN3c0xOQUVCZnlBQlFjMlpzK1lBVHdSQUVKZ0NBQXNnQUNBQkVQMEVJZ0kyQWdRZ0FDQUNOZ0lBSUFBZ0FpQUJRUlJzYWpZQ0NBdEtBQU5BSUFFZ0FrWkZCRUFnQXlBQktRSUFOd0lBSUFNZ0FTMEFFRG9BRUNBRElBRXBBZ2czQWdnZ0EwRVVhaUVESUFGQkZHb2hBUXdCQ3dzZ0FDQUROZ0lFSUFBZ0FqWUNBQXRMQVFGL0lBQW9BZ1FoQXdOQUlBRWdBa2NFUUNBRElBRXBBZ0EzQWdBZ0F5QUJLQUlRTmdJUUlBTWdBU2tDQ0RjQ0NDQURRUlJxSVFNZ0FVRVVhaUVCREFFTEN5QUFJQU0yQWdRTFJBRUJmeUFBS0FJRUlnSWdBVUVVYkdvaEFRTkFJQUVnQWtZRVFDQUFJQUUyQWdRRklBSkNBRGNDQUNBQ1FRRTZBQkFnQWtJQU53SUlJQUpCRkdvaEFnd0JDd3NMREFBZ0FDZ0NBQm9nQVJCSUM4Y0JBUWwvSUFBb0FnZ2dBQ2dDQkJEWEFpSUNCRUJCZnlFSEFrQWdBaWdDQkNJRElBQW9BZ2hIRFFBZ0FpZ0NDQ0lCSUFBb0FnUkhEUUJCQUNFSElBTkJBQ0FEUVFCS0d5RUlJQUZCQUNBQlFRQktHeUVKSUFJb0FnQWhCRUVBSVFFRFFDQUJJQWhHRFFFZ0FDZ0NBQ0FCUVFOMGFpRUZRUUFoQmdOQUlBWWdDVWNFUUNBRUlBVXJBd0E1QXdBZ0JrRUJhaUVHSUFSQkNHb2hCQ0FGSUFOQkEzUnFJUVVNQVFzTElBRkJBV29oQVF3QUN3QUxJQWRCQUU0RVFDQUNEd3NnQWhCbEMwRUFDMWtCQW44akFFRVFheUlDSkFBZ0FTZ0NBQ0VESUFFb0FnUWlBUVJBSUFGQkFmNGVBZ1FhQ3lBQ0lBQW9BZ0EyQWdnZ0FDQUROZ0lBSUFJZ0FDZ0NCRFlDRENBQUlBRTJBZ1FnQWtFSWFoREJBUm9nQWtFUWFpUUFDeE1BSUFCQkNEWUNCQ0FBUVF4cVFRZ1Fnd0lMNmdFQkEzOGdBQ2dDQkNBQUtBSUFJZ05ySWdJZ0FVa0VRQ01BUVNCcklnTWtBQUpBSUFFZ0Ftc2lBaUFBS0FJSUlBQW9BZ1FpQVd0TkJFQWdBaUFBS0FJRUlnRnFJUUlEUUNBQklBSkdCRUFnQUNBQ05nSUVCU0FCUVFBNkFBQWdBVUVCYWlFQkRBRUxDd3dCQ3lBQ0lBTkJER29nQUNBQklBSnFJQUFvQWdCckVPd0NJQUFvQWdRZ0FDZ0NBR3NnQUVFSWFoRE9BeUlFS0FJSUlnRnFJUUlEUUNBQklBSkhCRUFnQVVFQU9nQUFJQUZCQVdvaEFRd0JDd3NnQkNBQ05nSUlJQUFnQkJES0F5QUVFTWtEQ3lBRFFTQnFKQUFQQ3lBQklBSkpCRUFnQUNBQklBTnFOZ0lFQ3d2aUFRRURmeUFBS0FJRUlBQW9BZ0FpQTJ0QkZHMGlBaUFCU1FSQUl3QkJJR3NpQXlRQUFrQWdBU0FDYXlJQ0lBQW9BZ2dnQUNnQ0JDSUJhMEVVYlUwRVFDQUFJQUlRcGdZTUFRc2dBMEVNYWlBQUlBRWdBQ2dDQUd0QkZHMGdBbW9RMkFNZ0FDZ0NCQ0FBS0FJQWEwRVViU0FBUVFocUVJMEZJZ1FvQWdnaUFTQUNRUlJzYWlFQ0EwQWdBU0FDUndSQUlBRkNBRGNDQUNBQlFRRTZBQkFnQVVJQU53SUlJQUZCRkdvaEFRd0JDd3NnQkNBQ05nSUlJQUFnQkJDSEJTQUVFSU1GQ3lBRFFTQnFKQUFQQ3lBQklBSkpCRUFnQUNBRElBRkJGR3hxTmdJRUN3dGVBUUovSXdCQkVHc2lBaVFBSUFBZ0FUWUNBRUVRRUdZaUF5QUJOZ0lNSUFOQjFMUUJOZ0lBSUFOQ0FEY0NCQ0FBSUFNMkFnUWdBa0VBTmdJTUlBSW9BZ3doQVNBQ1FRQTJBZ3dnQVFSQUlBRVFtd1lMSUFKQkVHb2tBQ0FBQzFRQkFYOGdBRUVBUVNUOEN3QWdBRUVrYWlJQlFnQTNBbVFnQVVFQU5nSUlJQUZDMGdrM0FnQWdBU0FCTmdJTUlBRkJFR3BCQUVIUUFQd0xBQ0FCUVJBMkFtd2dBVUVNYWhDcUJpQUJRUUUyQWhRZ0FBdXhBZ0VDZnlBQUtBSUFJUUlnQUNBQk5nSUFJQUlFUUNBQ0JFQWdBa0dVQm1vaUFFRVlhaEJXR2lBQVFReHFFRllhSUFBUVZob2dBa0dNQldvaUFFSDhBR29RVmhvZ0FFSHdBR29RVmhvZ0FFSGNBR29RaHdZZ0FrSDhCR29RVmhvZ0FrR2dBV29pQUVHUUFXb1FWaG9nQUVIY0FHb2lBVUVvYWhEQUF5QUJRUnhxRUZZYUlBQkJ5QUJxRUZZYUlBQkJQR29RVmhvZ0FFRWdhaERBQXlNQVFSQnJJZ0VrQUNBQklBQkJFR28yQWd3Z0FTZ0NEQ0lBS0FJQUJFQWdBQ0FBS0FJQUVMZ0VJQUVvQWd3aUFDZ0NBQ0FBS0FJSUdoQklDeUFCUVJCcUpBQWdBa0hjQUdvUWx3UWFJQUpCeUFCcUlnTW9BZ2doQUFOQUlBQUVRQ0FBS0FJQUlBQkJER29Rd1FFYUlBQVFTQ0VBREFFTEN5QURFSjBESUFKQlFHc1F3UUVhSUFKQkRHb1FWaG9MSUFJUVNBc0xMZ0VCZnlBQUtBSUVJQUVvQWdnUTZ3WWlBZ1JBSUFJZ0FDQUJFSndHUVFCT0JFQWdBZzhMSUFJUVpRdEJBQXN2QVFGL0lBQW9BZ0FoQWlBQUlBRTJBZ0FnQWdSQUlBSUVRQ0FDUVFScUVKOEdJQUpCQUJDdkJnc2dBaEJJQ3d0UUFRTi9Jd0JCRUdzaUJDUUFJQUFvQWdBaEJTQUFMQUFMSVFZZ0JDQURLQUlBTmdJRUlBUWdBaWdDQURZQ0NDQUVJQVVnQUNBR1FRQklHellDQUNBQlFjbStBU0FFRUJnYUlBUkJFR29rQUFzK0FRSi9RUXdRVFNJREJIOGdBeUFBSUFGc0lBSjBFRTBpQkRZQ0FDQUVSUVJBSUFNUVNFRUFEd3NnQXlBQk5nSUlJQU1nQURZQ0JDQURCVUVBQ3dzK0FBTkFJQUVnQWtjRVFDQUJJQUVzQUFBaUFFRUFUZ1IvSUFNb0FnQWdBU3dBQUVFQ2RHb29BZ0FGSUFBTE9nQUFJQUZCQVdvaEFRd0JDd3NnQVFzL0FBTkFJQUVnQWtjRVFDQUJJQUVvQWdBaUFFSC9BRTBFZnlBREtBSUFJQUVvQWdCQkFuUnFLQUlBQlNBQUN6WUNBQ0FCUVFScUlRRU1BUXNMSUFFTG93RUJCSDhqQUVHQUFtc2lBQ1FBSUFCQ0pUY0QrQUVnQUVINEFXb2lCMEVCY2tHUDJBRWdCU0FDS0FJRUVOa0NFR2toQ0NBQUlBUTNBd0FnQUVIZ0FXb2lCaUFHUVJnZ0NDQUhJQUFRb1FFZ0Jtb2lDQ0FDRU1NQklRa2dBRUVVYWlJSElBSVFYQ0FHSUFrZ0NDQUFRU0JxSWdZZ0FFRWNhaUFBUVJocUlBY1FvZ1FnQnhCVUlBRWdCaUFBS0FJY0lBQW9BaGdnQWlBREVPOEJJQUJCZ0FKcUpBQUxvd0VCQTM4akFFR1FBV3NpQUNRQUlBQkNKVGNEaUFFZ0FFR0lBV29pQmtFQmNrR3UyQUVnQlNBQ0tBSUVFTmtDRUdraEJ5QUFJQVEyQWdBZ0FFSDdBR29pQkNBRVFRMGdCeUFHSUFBUW9RRWdCR29pQnlBQ0VNTUJJUWdnQUVFRWFpSUdJQUlRWENBRUlBZ2dCeUFBUVJCcUlnUWdBRUVNYWlBQVFRaHFJQVlRb2dRZ0JoQlVJQUVnQkNBQUtBSU1JQUFvQWdnZ0FpQURFTzhCSUFCQmtBRnFKQUFMb2dFQkJIOGpBRUh3QUdzaUFDUUFJQUJDSlRjRGFDQUFRZWdBYWlJSFFRRnlRWS9ZQVNBRklBSW9BZ1FRMlFJUWFTRUlJQUFnQkRjREFDQUFRZEFBYWlJR0lBWkJHQ0FJSUFjZ0FCQ2hBU0FHYWlJSUlBSVF3d0VoQ1NBQVFSUnFJZ2NnQWhCY0lBWWdDU0FJSUFCQklHb2lCaUFBUVJ4cUlBQkJHR29nQnhDbUJDQUhFRlFnQVNBR0lBQW9BaHdnQUNnQ0dDQUNJQU1ROFFFZ0FFSHdBR29rQUF1ZUFRRURmeU1BUVVCcUlnQWtBQ0FBUWlVM0F6Z2dBRUU0YWlJR1FRRnlRYTdZQVNBRklBSW9BZ1FRMlFJUWFTRUhJQUFnQkRZQ0FDQUFRU3RxSWdRZ0JFRU5JQWNnQmlBQUVLRUJJQVJxSWdjZ0FoRERBU0VJSUFCQkJHb2lCaUFDRUZ3Z0JDQUlJQWNnQUVFUWFpSUVJQUJCREdvZ0FFRUlhaUFHRUtZRUlBWVFWQ0FCSUFRZ0FDZ0NEQ0FBS0FJSUlBSWdBeER4QVNBQVFVQnJKQUFMS0FBZ0FDQUJOZ0lBSUFCQkJHb1E3QVlnQUVJQU53SVlJQUJDQURjQ0VDQUFRZ0EzQWdnZ0FBc2NBQ0FBSUFGQkNDQUNweUFDUWlDSXB5QURweUFEUWlDSXB4QWVDeXNCQVg4Z0FFSDh4Z1EyQWdBQ1FDQUFLQUlFUVF4cklnRkJDR29RbkFSQkFFNE5BQ0FCRUVnTElBQUxVUUVCZndKQUlBRkZEUUFnQVVIRXZ3UkJ4TUVFRUtzQklnRkZEUUFnQVNnQ0NDQUFLQUlJUVg5emNRMEFJQUFvQWd3Z0FTZ0NERUVBRUgxRkRRQWdBQ2dDRUNBQktBSVFRUUFRZlNFQ0N5QUNDNEVCQVFOL0lBQW9BZ1FpQkVFQmNTRUZBbjhnQVMwQU4wRUJSZ1JBSUFSQkNIVWlCaUFGUlEwQkdpQUNLQUlBSUFZUWpRUU1BUXNnQkVFSWRTQUZSUTBBR2lBQklBQW9BZ0FvQWdRMkFqZ2dBQ2dDQkNFRVFRQWhBa0VBQ3lFRklBQW9BZ0FpQUNBQklBSWdCV29nQTBFQ0lBUkJBbkViSUFBb0FnQW9BaHdSQndBTEZRQWdBRUd3dEFFMkFnQWdBRUVFYWhCTUdpQUFDeW9CQVg4akFFRVFheUlCSkFCQnJKNEZFR3dFUUNBQklBQW9BZ0EyQWdBUWRRQUxJQUZCRUdva0FBc3pBUUYvSXdCQkVHc2lBaVFBSUFBZ0FUWUNBRUdzbmdVUWNBUkFJQUlnQUNnQ0FEWUNBQkIxQUFzZ0FrRVFhaVFBSUFBTExRQWdBQ0FCRU1rR0lnQkJCR3BCQURvQUNDQUFRUUEyQWdnZ0FDQUJRUUZxTmdJRUlBQkJBRG9BRkNBQUM1d0NBUU4vSXdCQkVHc2lDQ1FBSUFGQmYzTkI5Ly8vL3dOcUlBSlBCRUFnQUJCVklRa2dDRUVFYWlJS0lBRkI4Ly8vL3dGSkJIOGdDQ0FCUVFGME5nSU1JQWdnQVNBQ2FqWUNCQ0FLSUFoQkRHb1FyUUlvQWdBUW93SkJBV29GUWZmLy8vOERDeENpQWlBSUtBSUVJUUlnQ0NnQ0NCb2dCQVJBSUFJZ0NTQUVFTVVCQ3lBR0JFQWdCRUVDZENBQ2FpQUhJQVlReFFFTElBTWdCQ0FGYWlJS2F5RUhJQU1nQ2tjRVFDQUVRUUowSWdNZ0Ftb2dCa0VDZEdvZ0F5QUphaUFGUVFKMGFpQUhFTVVCQ3lBQlFRRkhCRUFnQ1JEVkFnc2dBQ0FDRUxFQklBQWdDQ2dDQ0JDd0FTQUFJQVFnQm1vZ0Iyb2lBQkNMQVNBSVFRQTJBZ3dnQWlBQVFRSjBhaUFJUVF4cUVLZ0JJQWhCRUdva0FBOExFSk1CQUF1TkFRRUNmeU1BUVJCcklnTWtBQ0FCUWZmLy8vOEhUUVJBQWtBZ0FSRGhBZ1JBSUFBZ0FSQ2JBU0FBSVFRTUFRc2dBMEVJYWlBQkVKTUNRUUZxRUpJQ0lBTW9BZ3dhSUFBZ0F5Z0NDQ0lFRUxFQklBQWdBeWdDREJDd0FTQUFJQUVRaXdFTElBUWdBU0FDRU1VR0lBTkJBRG9BQnlBQklBUnFJQU5CQjJvUWxBRWdBMEVRYWlRQUR3c1Frd0VBQ3owQkFYOGpBRUVRYXlJREpBQWdBeUFDT2dBUEEwQWdBUVJBSUFBZ0F5MEFEem9BQUNBQlFRRnJJUUVnQUVFQmFpRUFEQUVMQ3lBRFFSQnFKQUFMVGdFQ2Z5QUFFTWNHSWdOQi9NWUVOZ0lBSUFFUWd3RWlBRUVOYWhCbUlnSkJBRFlDQ0NBQ0lBQTJBZ1FnQWlBQU5nSUFJQUpCREdvaUFpQUJJQUJCQVdyOENnQUFJQU1nQWpZQ0JDQURDdzBBSUFCQmpNWUVOZ0lBSUFBTEZnQWdBQ0FCSUFKQ2dJQ0FnSUNBZ0lDQWZ4RFpBd3NKQUNBQUlBRVF5UUVMQ1FBZ0FCQnBOZ0lBQ3lNQkFuOGdBQ0VCQTBBZ0FTSUNRUVJxSVFFZ0FpZ0NBQTBBQ3lBQ0lBQnJRUUoxQzBvQkFuOGpBRUVnYXlJREpBQWdBQ0FESUFBb0FqZ2dBaWdDQUNBQ0tBSUVJQUlvQWdnZ0FpZ0NEQkQvQlNJRUlBSVEwd0lnQUNBQklBUVEwd0lnQkJET0Fob2dBMEVnYWlRQUN3OEFJQUFnQUNnQ0FFRUVhellDQUFzS0FDQUFLQUlBUVFSckN5MEJBWDhqQUVFUWF5SUNKQUFDUUNBQUlBRkdCRUFnQUVFQU9nQjREQUVMSUFFUTFRSUxJQUpCRUdva0FBc1RBQ0FBRUtRREtBSUFJQUFvQWdCclFRSjFDeXdCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUWhRSWFJQUpCQkdzaEFnd0JDd3NnQUNBQk5nSUVDd2tBSUFCQkFEWUNBQXRKQVFGL0l3QkJFR3NpQXlRQUFrQUNRQ0FDUVI1TERRQWdBUzBBZUVFQmNRMEFJQUZCQVRvQWVBd0JDeUFDRU5rR0lRRUxJQU5CRUdva0FDQUFJQUkyQWdRZ0FDQUJOZ0lBQzBBQkFYOGpBRUVRYXlJQkpBQWdBQkNGQWhvZ0FVSC8vLy8vQXpZQ0RDQUJRZi8vLy84SE5nSUlJQUZCREdvZ0FVRUlhaERoQkNnQ0FDQUJRUkJxSkFBTEN3QWdBRUVBTmdJQUlBQUxOd0VCZnlNQVFSQnJJZ01rQUNBRElBRVE2Z0UyQWd3Z0F5QUNFT29CTmdJSUlBQWdBMEVNYWlBRFFRaHFFT01DSUFOQkVHb2tBQXRPQVFGL0l3QkJFR3NpQXlRQUlBTWdBVFlDQ0NBRElBQTJBZ3dnQXlBQ05nSUVRUUFoQVNBRFFRUnFJZ0FnQTBFTWFoQ3pBa1VFUUNBQUlBTkJDR29Rc3dJaEFRc2dBMEVRYWlRQUlBRUxOQUVCZnlNQVFSQnJJZ01rQUNBQUVFc2FJQUFnQWhDSEFpQURRUUE2QUE4Z0FTQUNhaUFEUVE5cUVKUUJJQU5CRUdva0FBc2JBQ0FBUWYvLy8vOERTd1JBRUhVQUN5QUFRUUowUVFRUTFRUUxDUUFnQUJDVkJCQklDN2dDQWdGOUFuOGdBQ0FCRUpnQklRVWdBU0FDRUpnQklRUUNRQUpBSUFWRkJFQWdCRVVFUUVFQUR3c2dBU29DQUNFRElBRWdBaW9DQURnQ0FDQUNJQU00QWdBZ0FTZ0NCQ0VFSUFFZ0FpZ0NCRFlDQkNBQ0lBUTJBZ1FnQUNBQkVKZ0JSUTBDSUFBcUFnQWhBeUFBSUFFcUFnQTRBZ0FnQVNBRE9BSUFJQUFvQWdRaEFpQUFJQUVvQWdRMkFnUWdBU0FDTmdJRURBRUxJQUFxQWdBaEF5QUVCRUFnQUNBQ0tnSUFPQUlBSUFJZ0F6Z0NBQ0FBS0FJRUlRRWdBQ0FDS0FJRU5nSUVJQUlnQVRZQ0JBd0NDeUFBSUFFcUFnQTRBZ0FnQVNBRE9BSUFJQUFvQWdRaEJDQUFJQUVvQWdRMkFnUWdBU0FFTmdJRUlBRWdBaENZQVVVTkFTQUJLZ0lBSVFNZ0FTQUNLZ0lBT0FJQUlBSWdBemdDQUNBQktBSUVJUUFnQVNBQ0tBSUVOZ0lFSUFJZ0FEWUNCQXRCQWc4TFFRRUxGUUFnQUVId2t3UTJBZ0FnQUVFUWFoQk1HaUFBQ3hVQUlBQkJ5Sk1FTmdJQUlBQkJER29RVEJvZ0FBdklBd0VFZndKQUlBTWdBaUlBYTBFRFNFRUJjZzBBSUFBdEFBQkI3d0ZIRFFBZ0FDMEFBVUc3QVVjTkFDQUFRUU5CQUNBQUxRQUNRYjhCUmh0cUlRQUxBMEFDUUNBRUlBZE5JQUFnQTA5eURRQWdBQ3dBQUNJQlFmOEJjU0VGQW45QkFTQUJRUUJPRFFBYUlBRkJRa2tOQVNBQlFWOU5CRUFnQXlBQWEwRUNTQTBDSUFBdEFBRkJ3QUZ4UVlBQlJ3MENRUUlNQVFzZ0FVRnZUUVJBSUFNZ0FHdEJBMGdOQWlBQUxRQUNJQUF0QUFFaEFRSkFBa0FnQlVIdEFVY0VRQ0FGUWVBQlJ3MEJJQUZCNEFGeFFhQUJSZzBDREFVTElBRkI0QUZ4UVlBQlJ3MEVEQUVMSUFGQndBRnhRWUFCUncwREMwSEFBWEZCZ0FGSERRSkJBd3dCQ3lBRElBQnJRUVJJSUFGQmRFdHlEUUVnQUMwQUF5RUdJQUF0QUFJaENDQUFMUUFCSVFFQ1FBSkFBa0FDUUNBRlFmQUJhdzRGQUFJQ0FnRUNDeUFCUWZBQWFrSC9BWEZCTUU4TkJBd0NDeUFCUWZBQmNVR0FBVWNOQXd3QkN5QUJRY0FCY1VHQUFVY05BZ3NnQ0VIQUFYRkJnQUZISUFaQndBRnhRWUFCUjNJZ0JrRS9jU0FJUVFaMFFjQWZjU0FGUVJKMFFZQ0E4QUJ4SUFGQlAzRkJESFJ5Y25KQi8vL0RBRXR5RFFGQkJBc2hBU0FIUVFGcUlRY2dBQ0FCYWlFQURBRUxDeUFBSUFKckMrSUVBUVIvSXdCQkVHc2lBQ1FBSUFBZ0FqWUNEQ0FBSUFVMkFnZ0NmeUFBSUFJMkFnd2dBQ0FGTmdJSUFrQUNRQU5BQWtBZ0FDZ0NEQ0lCSUFOUERRQWdBQ2dDQ0NJS0lBWlBEUUFnQVN3QUFDSUZRZjhCY1NFQ0FuOGdCVUVBVGdSQUlBSkIvLy9EQUVzTkJVRUJEQUVMSUFWQlFra05CQ0FGUVY5TkJFQkJBU0FESUFGclFRSklEUVlhUVFJaEJTQUJMUUFCSWdoQndBRnhRWUFCUncwRUlBaEJQM0VnQWtFR2RFSEFEM0Z5SVFKQkFnd0JDeUFGUVc5TkJFQkJBU0VGSUFNZ0FXc2lDVUVDU0EwRUlBRXRBQUVoQ0FKQUFrQWdBa0h0QVVjRVFDQUNRZUFCUncwQklBaEI0QUZ4UWFBQlJnMENEQWdMSUFoQjRBRnhRWUFCUmcwQkRBY0xJQWhCd0FGeFFZQUJSdzBHQ3lBSlFRSkdEUVFnQVMwQUFpSUZRY0FCY1VHQUFVY05CU0FGUVQ5eElBSkJESFJCZ09BRGNTQUlRVDl4UVFaMGNuSWhBa0VEREFFTElBVkJkRXNOQkVFQklRVWdBeUFCYXlJSlFRSklEUU1nQVMwQUFTRUlBa0FDUUFKQUFrQWdBa0h3QVdzT0JRQUNBZ0lCQWdzZ0NFSHdBR3BCL3dGeFFUQlBEUWNNQWdzZ0NFSHdBWEZCZ0FGSERRWU1BUXNnQ0VIQUFYRkJnQUZIRFFVTElBbEJBa1lOQXlBQkxRQUNJZ3RCd0FGeFFZQUJSdzBFSUFsQkEwWU5BeUFCTFFBRElnbEJ3QUZ4UVlBQlJ3MEVRUUloQlNBSlFUOXhJQXRCQm5SQndCOXhJQUpCRW5SQmdJRHdBSEVnQ0VFL2NVRU1kSEp5Y2lJQ1FmLy93d0JMRFFOQkJBc2hCU0FLSUFJMkFnQWdBQ0FCSUFWcU5nSU1JQUFnQUNnQ0NFRUVhallDQ0F3QkN3c2dBU0FEU1NFRkN5QUZEQUVMUVFJTElBUWdBQ2dDRERZQ0FDQUhJQUFvQWdnMkFnQWdBRUVRYWlRQUN4a0FJQUJCZ0lDQWdBSlBCRUFRNFFFQUN5QUFRUU4wRUdZTGlnUUFJd0JCRUdzaUFDUUFJQUFnQWpZQ0RDQUFJQVUyQWdnQ2Z5QUFJQUkyQWd3Z0FDQUZOZ0lJSUFBb0Fnd2hBUUpBQTBBQ1FDQUJJQU5QQkVCQkFDRUNEQUVMUVFJaEFpQUJLQUlBSWdGQi8vL0RBRXNnQVVHQWNIRkJnTEFEUm5JTkFBSkFJQUZCL3dCTkJFQkJBU0VDSUFZZ0FDZ0NDQ0lGYTBFQVRBMENJQUFnQlVFQmFqWUNDQ0FGSUFFNkFBQU1BUXNnQVVIL0QwMEVRQ0FHSUFBb0FnZ2lBbXRCQWtnTkJDQUFJQUpCQVdvMkFnZ2dBaUFCUVFaMlFjQUJjam9BQUNBQUlBQW9BZ2dpQWtFQmFqWUNDQ0FDSUFGQlAzRkJnQUZ5T2dBQURBRUxJQVlnQUNnQ0NDSUNheUVGSUFGQi8vOERUUVJBSUFWQkEwZ05CQ0FBSUFKQkFXbzJBZ2dnQWlBQlFReDJRZUFCY2pvQUFDQUFJQUFvQWdnaUFrRUJhallDQ0NBQ0lBRkJCblpCUDNGQmdBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFL2NVR0FBWEk2QUFBTUFRc2dCVUVFU0EwRElBQWdBa0VCYWpZQ0NDQUNJQUZCRW5aQjhBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFTWRrRS9jVUdBQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUJRUVoyUVQ5eFFZQUJjam9BQUNBQUlBQW9BZ2dpQWtFQmFqWUNDQ0FDSUFGQlAzRkJnQUZ5T2dBQUN5QUFJQUFvQWd4QkJHb2lBVFlDREF3QkN3c2dBZ3dCQzBFQkN5QUVJQUFvQWd3MkFnQWdCeUFBS0FJSU5nSUFJQUJCRUdva0FBdmFBd0VFZndKQUlBTWdBaUlBYTBFRFNFRUJjZzBBSUFBdEFBQkI3d0ZIRFFBZ0FDMEFBVUc3QVVjTkFDQUFRUU5CQUNBQUxRQUNRYjhCUmh0cUlRQUxBMEFDUUNBRUlBWk5JQUFnQTA5eURRQUNmeUFBUVFGcUlBQXRBQUFpQWNCQkFFNE5BQm9nQVVIQ0FVa05BU0FCUWQ4QlRRUkFJQU1nQUd0QkFrZ05BaUFBTFFBQlFjQUJjVUdBQVVjTkFpQUFRUUpxREFFTElBRkI3d0ZOQkVBZ0F5QUFhMEVEU0EwQ0lBQXRBQUlnQUMwQUFTRUZBa0FDUUNBQlFlMEJSd1JBSUFGQjRBRkhEUUVnQlVIZ0FYRkJvQUZHRFFJTUJRc2dCVUhnQVhGQmdBRkhEUVFNQVFzZ0JVSEFBWEZCZ0FGSERRTUxRY0FCY1VHQUFVY05BaUFBUVFOcURBRUxJQU1nQUd0QkJFZ2dBVUgwQVV0eUlBUWdCbXRCQWtseURRRWdBQzBBQXlFSElBQXRBQUloQ0NBQUxRQUJJUVVDUUFKQUFrQUNRQ0FCUWZBQmF3NEZBQUlDQWdFQ0N5QUZRZkFBYWtIL0FYRkJNRThOQkF3Q0N5QUZRZkFCY1VHQUFVY05Bd3dCQ3lBRlFjQUJjVUdBQVVjTkFnc2dDRUhBQVhGQmdBRkhJQWRCd0FGeFFZQUJSM0lnQjBFL2NTQUlRUVowUWNBZmNTQUJRUkowUVlDQThBQnhJQVZCUDNGQkRIUnljbkpCLy8vREFFdHlEUUVnQmtFQmFpRUdJQUJCQkdvTElRQWdCa0VCYWlFR0RBRUxDeUFBSUFKckM3Y0ZBUVIvSXdCQkVHc2lBQ1FBSUFBZ0FqWUNEQ0FBSUFVMkFnZ0NmeUFBSUFJMkFnd2dBQ0FGTmdJSUFrQUNRQU5BQWtBZ0FDZ0NEQ0lCSUFOUERRQWdBQ2dDQ0NJRklBWlBEUUJCQWlFSklBQUNmeUFCTFFBQUlnTEFRUUJPQkVBZ0JTQUNPd0VBSUFGQkFXb01BUXNnQWtIQ0FVa05CQ0FDUWQ4QlRRUkFRUUVnQXlBQmEwRUNTQTBHR2lBQkxRQUJJZ2hCd0FGeFFZQUJSdzBFSUFVZ0NFRS9jU0FDUVFaMFFjQVBjWEk3QVFBZ0FVRUNhZ3dCQ3lBQ1FlOEJUUVJBUVFFaENTQURJQUZySWdwQkFrZ05CQ0FCTFFBQklRZ0NRQUpBSUFKQjdRRkhCRUFnQWtIZ0FVY05BU0FJUWVBQmNVR2dBVWNOQ0F3Q0N5QUlRZUFCY1VHQUFVY05Cd3dCQ3lBSVFjQUJjVUdBQVVjTkJnc2dDa0VDUmcwRUlBRXRBQUlpQ1VIQUFYRkJnQUZIRFFVZ0JTQUpRVDl4SUFoQlAzRkJCblFnQWtFTWRISnlPd0VBSUFGQkEyb01BUXNnQWtIMEFVc05CRUVCSVFrZ0F5QUJheUlLUVFKSURRTWdBUzBBQVNFSUFrQUNRQUpBQWtBZ0FrSHdBV3NPQlFBQ0FnSUJBZ3NnQ0VId0FHcEIvd0Z4UVRCUERRY01BZ3NnQ0VId0FYRkJnQUZIRFFZTUFRc2dDRUhBQVhGQmdBRkhEUVVMSUFwQkFrWU5BeUFCTFFBQ0lndEJ3QUZ4UVlBQlJ3MEVJQXBCQTBZTkF5QUJMUUFESWdGQndBRnhRWUFCUncwRUlBWWdCV3RCQTBnTkEwRUNJUWtnQVVFL2NTSUJJQXRCQm5RaUNrSEFIM0VnQ0VFTWRFR0E0QTl4SUFKQkIzRWlBa0VTZEhKeWNrSC8vOE1BU3cwRElBVWdDMEVFZGtFRGNTQUlRUUowSWdsQndBRnhJQUpCQ0hSeUlBbEJQSEZ5Y2tIQS93QnFRWUN3QTNJN0FRQWdBQ0FGUVFKcU5nSUlJQVVnQVNBS1FjQUhjWEpCZ0xnRGNqc0JBaUFBS0FJTVFRUnFDellDRENBQUlBQW9BZ2hCQW1vMkFnZ01BUXNMSUFFZ0Ewa2hDUXNnQ1F3QkMwRUNDeUFFSUFBb0FndzJBZ0FnQnlBQUtBSUlOZ0lBSUFCQkVHb2tBQXZqQlFFQmZ5TUFRUkJySWdBa0FDQUFJQUkyQWd3Z0FDQUZOZ0lJQW44Z0FDQUNOZ0lNSUFBZ0JUWUNDQ0FBS0FJTUlRSUNRQUpBQTBBZ0FpQURUd1JBUVFBaEJRd0NDMEVDSVFVQ1FBSkFJQUl2QVFBaUFVSC9BRTBFUUVFQklRVWdCaUFBS0FJSUlnSnJRUUJNRFFRZ0FDQUNRUUZxTmdJSUlBSWdBVG9BQUF3QkN5QUJRZjhQVFFSQUlBWWdBQ2dDQ0NJQ2EwRUNTQTBGSUFBZ0FrRUJhallDQ0NBQ0lBRkJCblpCd0FGeU9nQUFJQUFnQUNnQ0NDSUNRUUZxTmdJSUlBSWdBVUUvY1VHQUFYSTZBQUFNQVFzZ0FVSC9yd05OQkVBZ0JpQUFLQUlJSWdKclFRTklEUVVnQUNBQ1FRRnFOZ0lJSUFJZ0FVRU1ka0hnQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUJRUVoyUVQ5eFFZQUJjam9BQUNBQUlBQW9BZ2dpQWtFQmFqWUNDQ0FDSUFGQlAzRkJnQUZ5T2dBQURBRUxJQUZCLzdjRFRRUkFRUUVoQlNBRElBSnJRUU5JRFFRZ0FpOEJBaUlJUVlENEEzRkJnTGdEUncwQ0lBWWdBQ2dDQ0d0QkJFZ05CQ0FJUWY4SGNTQUJRUXAwUVlENEEzRWdBVUhBQjNFaUJVRUtkSEp5UWYvL1Awc05BaUFBSUFKQkFtbzJBZ3dnQUNBQUtBSUlJZ0pCQVdvMkFnZ2dBaUFGUVFaMlFRRnFJZ0pCQW5aQjhBRnlPZ0FBSUFBZ0FDZ0NDQ0lGUVFGcU5nSUlJQVVnQWtFRWRFRXdjU0FCUVFKMlFROXhja0dBQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUlRUVoyUVE5eElBRkJCSFJCTUhGeVFZQUJjam9BQUNBQUlBQW9BZ2dpQVVFQmFqWUNDQ0FCSUFoQlAzRkJnQUZ5T2dBQURBRUxJQUZCZ01BRFNRMERJQVlnQUNnQ0NDSUNhMEVEU0EwRUlBQWdBa0VCYWpZQ0NDQUNJQUZCREhaQjRBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFR2RrRy9BWEU2QUFBZ0FDQUFLQUlJSWdKQkFXbzJBZ2dnQWlBQlFUOXhRWUFCY2pvQUFBc2dBQ0FBS0FJTVFRSnFJZ0kyQWd3TUFRc0xRUUlNQWdzZ0JRd0JDMEVCQ3lBRUlBQW9BZ3cyQWdBZ0J5QUFLQUlJTmdJQUlBQkJFR29rQUFzOEFRSi9Jd0JCRUdzaUFTUUFJQUVnQURZQ0RDQUJRUWhxSUFGQkRHb1F2QUZCQkVFQkl3TW9BbUFvQWdBYklRSVF1d0VnQVVFUWFpUUFJQUlMT2dFQmZ5TUFRUkJySWdVa0FDQUZJQVEyQWd3Z0JVRUlhaUFGUVF4cUVMd0JJQUFnQVNBQ0lBTVF0Z0loQUJDN0FTQUZRUkJxSkFBZ0FBc1NBQ0FFSUFJMkFnQWdCeUFGTmdJQVFRTUxLZ0VCZnlBQVFkeUtCRFlDQUFKQUlBQW9BZ2dpQVVVTkFDQUFMUUFNUVFGSERRQWdBUkJJQ3lBQUN4MEFJQUFvQWdBb0FnQW9BZ0JCQUVFQi9oNENpSklGUVFGcU5nSUVDejRCQVg4Z0FVSEk0L0U0VHdSQUVQQUJBQXRCeCtQeE9DQUFLQUlJSUFBb0FnQnJRU1J0SWdCQkFYUWlBaUFCSUFFZ0Fra2JJQUJCNC9HNEhFOGJDd3NBSUFBZ0FVRUNFTE1HQytFS0FRaC9Ba0JCaEpJRi9oSUFBRUVCY1EwQVFZU1NCUkIvUlEwQUl3QkJFR3NpQlNRQUFrQkIvSkVGL2hJQUFFRUJjUTBBUWZ5UkJSQi9SUTBBSXdCQkVHc2lCaVFBSUFaQkFUWUNERUhja0FVZ0JpZ0NEQkJ2SWdGQnlJb0VOZ0lBSXdCQkVHc2lBeVFBSUFGQkNHb2lBa0lBTndJQUlBTkJBRFlDRENBQ1FRaHFFTlVHUVFBNkFId2dBMEVFYWlBQ0VNa0JLQUlBR2lBRFFRQTZBQW9qQUVFUWF5SUVKQUFnQWhEVUJrRWVTUVJBRUpNQkFBc2dCRUVJYWlBQ0VJVUNRUjRRMHdZZ0FpQUVLQUlJSWdjMkFnUWdBaUFITmdJQUlBUW9BZ3doQ0NBQ0VLUURJQWNnQ0VFQ2RHbzJBZ0FnQkVFUWFpUUFJQUpCSGhEeUJpQURRUUU2QUFvZ0EwRVFhaVFBSUFGQmtBRnFRWjM3QVJDdUFpQUNFTWNCR2lBQ0VQRUdRZnliQlVFQkVHOUI1SjRFTmdJQUlBRkIvSnNGUWJTUEJSQnVFSEZCaEp3RlFRRVFiMEdFbndRMkFnQWdBVUdFbkFWQnZJOEZFRzRRY1VHTW5BVkJBUkJ2SWdKQkFEb0FEQ0FDUVFBMkFnZ2dBa0hjaWdRMkFnQWdBa0dRaXdRMkFnZ2dBVUdNbkFWQmxKSUZFRzRRY1VHY25BVkJBUkJ2UWNpV0JEWUNBQ0FCUVp5Y0JVR01rZ1VRYmhCeFFhU2NCVUVCRUc5QjNKY0VOZ0lBSUFGQnBKd0ZRWnlTQlJCdUVIRkJySndGUVFFUWJ5SUNRWmlUQkRZQ0FDQUNFR2syQWdnZ0FVR3NuQVZCcEpJRkVHNFFjVUc0bkFWQkFSQnZRZkNZQkRZQ0FDQUJRYmljQlVHc2tnVVFiaEJ4UWNDY0JVRUJFRzlCMkpvRU5nSUFJQUZCd0p3RlFieVNCUkJ1RUhGQnlKd0ZRUUVRYjBIa21RUTJBZ0FnQVVISW5BVkJ0SklGRUc0UWNVSFFuQVZCQVJCdlFjeWJCRFlDQUNBQlFkQ2NCVUhFa2dVUWJoQnhRZGljQlVFQkVHOGlBa0d1MkFBN0FRZ2dBa0hJa3dRMkFnQWdBa0VNYWhCYUdpQUJRZGljQlVITWtnVVFiaEJ4UWZDY0JVRUJFRzhpQWtLdWdJQ0F3QVUzQWdnZ0FrSHdrd1EyQWdBZ0FrRVFhaEJhR2lBQlFmQ2NCVUhVa2dVUWJoQnhRWXlkQlVFQkVHOUJwSjhFTmdJQUlBRkJqSjBGUWNTUEJSQnVFSEZCbEowRlFRRVFiMEdZb1FRMkFnQWdBVUdVblFWQnpJOEZFRzRRY1VHY25RVkJBUkJ2UWV5aUJEWUNBQ0FCUVp5ZEJVSFVqd1VRYmhCeFFhU2RCVUVCRUc5QjFLUUVOZ0lBSUFGQnBKMEZRZHlQQlJCdUVIRkJySjBGUVFFUWIwR3NyQVEyQWdBZ0FVR3NuUVZCaEpBRkVHNFFjVUcwblFWQkFSQnZRY0N0QkRZQ0FDQUJRYlNkQlVHTWtBVVFiaEJ4UWJ5ZEJVRUJFRzlCdEs0RU5nSUFJQUZCdkowRlFaU1FCUkJ1RUhGQnhKMEZRUUVRYjBHb3J3UTJBZ0FnQVVIRW5RVkJuSkFGRUc0UWNVSE1uUVZCQVJCdlFaeXdCRFlDQUNBQlFjeWRCVUdra0FVUWJoQnhRZFNkQlVFQkVHOUJ3TEVFTmdJQUlBRkIxSjBGUWF5UUJSQnVFSEZCM0owRlFRRVFiMEhrc2dRMkFnQWdBVUhjblFWQnRKQUZFRzRRY1VIa25RVkJBUkJ2UVlpMEJEWUNBQ0FCUWVTZEJVRzhrQVVRYmhCeFFleWRCVUVCRUc4aUFrSHd2UVEyQWdnZ0FrR2NwZ1EyQWdBZ0FrSE1wZ1EyQWdnZ0FVSHNuUVZCNUk4RkVHNFFjVUg0blFWQkFSQnZJZ0pCbEw0RU5nSUlJQUpCcEtnRU5nSUFJQUpCMUtnRU5nSUlJQUZCK0owRlFleVBCUkJ1RUhGQmhKNEZRUUVRYnlJQ1FRaHFFTW9HSUFKQmtLb0VOZ0lBSUFGQmhKNEZRZlNQQlJCdUVIRkJrSjRGUVFFUWJ5SUNRUWhxRU1vR0lBSkJyS3NFTmdJQUlBRkJrSjRGUWZ5UEJSQnVFSEZCbko0RlFRRVFiMEdzdFFRMkFnQWdBVUdjbmdWQnhKQUZFRzRRY1VHa25nVkJBUkJ2UWFTMkJEWUNBQ0FCUWFTZUJVSE1rQVVRYmhCeElBWkJFR29rQUNBRlFkeVFCVFlDQ0VINGtRVWdCU2dDQ0JESkFScEIvSkVGRUg0TElBVkJFR29rQUVHQWtnVkIrSkVGRUpzRVFZU1NCUkIrQ3lBQVFZQ1NCU2dDQUNJQU5nSUFJQUFRN1FZTEVRQWdBRUhja0FWSEJFQWdBQkR2QmdzTG5RRUJCSDhnQUVISWlnUTJBZ0FnQUVFSWFpRUJBMEFnQVJESEFTQUNTd1JBSUFFZ0FoQ0dBaWdDQUFSQUlBRWdBaENHQWlnQ0FCQ3FBd3NnQWtFQmFpRUNEQUVMQ3lBQVFaQUJhaEJNR2lNQVFSQnJJZ0lrQUNBQ1FReHFJQUVReVFFaUFTZ0NBQ0lES0FJQUJFQWdBeER4QmlBQktBSUFHaUFCS0FJQUVJVUNJQUVvQWdBaUFTZ0NBQ0FCRU5BR0doRFBCZ3NnQWtFUWFpUUFJQUFMRGdBZ0FFRUVha0VCL2g0Q0FCb0xQQUFnQUVFQU5nSUlJQUJDQURjQ0FDQUFJQUVvQWdBMkFnQWdBQ0FCS0FJRU5nSUVJQUFnQVNnQ0NEWUNDQ0FCUVFBMkFnZ2dBVUlBTndJQUN3d0FJQUFnQUNnQ0FCRFJCZ3Q3QVFOL0l3QkJFR3NpQkNRQUlBUkJCR29pQWlBQU5nSUFJQUlnQUNnQ0JDSUROZ0lFSUFJZ0F5QUJRUUowYWpZQ0NDQUNJZ01vQWdRaEFTQUNLQUlJSVFJRFFDQUJJQUpHQkVBZ0F5Z0NBQ0FES0FJRU5nSUVJQVJCRUdva0FBVWdBQkNGQWhvZ0FSRFNCaUFESUFGQkJHb2lBVFlDQkF3QkN3c0xJQUFnQUVHWWt3UTJBZ0FnQUNnQ0NCQnBSd1JBSUFBb0FnZ1F1Z1FMSUFBTEJBQkJmd3M5QVFGL0lBQW9BZ2dpQWlBQlFReHNhaUVCQTBBZ0FTQUNSa1VFUUNBQ1FRQTJBZ2dnQWtJQU53SUFJQUpCREdvaEFnd0JDd3NnQUNBQk5nSUlDNllCQVFOL0l3QkJFR3NpQkNRQUl3QkJJR3NpQXlRQUlBTkJHR29nQUNBQkVOWUdJQU5CRUdvZ0F5Z0NHQ0FES0FJY0lBSVEzQVFnQXlnQ0VDRUZJd0JCRUdzaUFTUUFJQUVnQURZQ0RDQUJRUXhxSWdBZ0JTQUFFSlFFYTBFQ2RSQ2RCQ0VBSUFGQkVHb2tBQ0FESUFBMkFnd2dBeUFDSUFNb0FoUVE5QUUyQWdnZ0JFRUlhaUFEUVF4cUlBTkJDR29Rc2dFZ0EwRWdhaVFBSUFRb0Fnd2dCRUVRYWlRQUM0RUdBUXAvSXdCQkVHc2lFeVFBSUFJZ0FEWUNBRUVFUVFBZ0J4c2hGU0FEUVlBRWNTRVdBMEFnRkVFRVJnUkFJQTBRUzBFQlN3UkFJQk1nRFJDaUFUWUNEQ0FDSUJOQkRHcEJBUkNkQkNBTkVOc0JJQUlvQWdBUTlnWTJBZ0FMSUFOQnNBRnhJZ05CRUVjRVFDQUJJQU5CSUVZRWZ5QUNLQUlBQlNBQUN6WUNBQXNnRTBFUWFpUUFCUUpBQWtBQ1FBSkFBa0FDUUNBSUlCUnFMUUFBRGdVQUFRTUNCQVVMSUFFZ0FpZ0NBRFlDQUF3RUN5QUJJQUlvQWdBMkFnQWdCa0VnRUo4QklRY2dBaUFDS0FJQUlnOUJCR28yQWdBZ0R5QUhOZ0lBREFNTElBMFFyUUVOQWlBTlFRQVEyZ0lvQWdBaEJ5QUNJQUlvQWdBaUQwRUVhallDQUNBUElBYzJBZ0FNQWdzZ0RCQ3RBU0FXUlhJTkFTQUNJQXdRb2dFZ0RCRGJBU0FDS0FJQUVQWUdOZ0lBREFFTElBSW9BZ0FnQkNBVmFpSUVJUWNEUUFKQUlBVWdCMDBOQUNBR1FjQUFJQWNvQWdBUXN3RkZEUUFnQjBFRWFpRUhEQUVMQ3lBT1FRQktCRUFnQWlnQ0FDRVBJQTRoRUFOQUlCQkZJQVFnQjA5eVJRUkFJQkJCQVdzaEVDQUhRUVJySWdjb0FnQWhFU0FDSUE5QkJHb2lFallDQUNBUElCRTJBZ0FnRWlFUERBRUxDd0pBSUJCRkJFQkJBQ0VSREFFTElBWkJNQkNmQVNFUklBSW9BZ0FoRHdzRFFDQVBRUVJxSVJJZ0VFRUFTZ1JBSUE4Z0VUWUNBQ0FRUVFGcklSQWdFaUVQREFFTEN5QUNJQkkyQWdBZ0R5QUpOZ0lBQ3dKQUlBUWdCMFlFUUNBR1FUQVFud0VoRHlBQ0lBSW9BZ0FpRUVFRWFpSUhOZ0lBSUJBZ0R6WUNBQXdCQ3lBTEVLMEJCSDlCZndVZ0MwRUFFRkVzQUFBTElSRkJBQ0VQUVFBaEVnTkFJQVFnQjBjRVFBSkFJQThnRVVjRVFDQVBJUkFNQVFzZ0FpQUNLQUlBSWhCQkJHbzJBZ0FnRUNBS05nSUFRUUFoRUNBTEVFc2dFa0VCYWlJU1RRUkFJQThoRVF3QkN5QUxJQklRVVMwQUFFSC9BRVlFUUVGL0lSRU1BUXNnQ3lBU0VGRXNBQUFoRVFzZ0IwRUVheUlIS0FJQUlROGdBaUFDS0FJQUloaEJCR28yQWdBZ0dDQVBOZ0lBSUJCQkFXb2hEd3dCQ3dzZ0FpZ0NBQ0VIQ3lBSEVMRURDeUFVUVFGcUlSUU1BUXNMQzlrQ0FRRi9Jd0JCRUdzaUNpUUFJQWtDZnlBQUJFQWdBaEQrQmlFQUFrQWdBUVJBSUFwQkJHb2lBU0FBRU8wQklBTWdDaWdDQkRZQUFDQUJJQUFRN0FFTUFRc2dDa0VFYWlJQklBQVFxd01nQXlBS0tBSUVOZ0FBSUFFZ0FCQ3VBUXNnQ0NBQkVNb0JJQUVRY2hvZ0JDQUFFS3dCTmdJQUlBVWdBQkNhQVRZQ0FDQUtRUVJxSWdFZ0FCQ1pBU0FHSUFFUWpRRWdBUkJNR2lBQklBQVFyd0VnQnlBQkVNb0JJQUVRY2hvZ0FCRHJBUXdCQ3lBQ0VQMEdJUUFDUUNBQkJFQWdDa0VFYWlJQklBQVE3UUVnQXlBS0tBSUVOZ0FBSUFFZ0FCRHNBUXdCQ3lBS1FRUnFJZ0VnQUJDckF5QURJQW9vQWdRMkFBQWdBU0FBRUs0QkN5QUlJQUVReWdFZ0FSQnlHaUFFSUFBUXJBRTJBZ0FnQlNBQUVKb0JOZ0lBSUFwQkJHb2lBU0FBRUprQklBWWdBUkNOQVNBQkVFd2FJQUVnQUJDdkFTQUhJQUVReWdFZ0FSQnlHaUFBRU9zQkN6WUNBQ0FLUVJCcUpBQUxvd0VCQTM4akFFRVFheUlFSkFBakFFRWdheUlESkFBZ0EwRVlhaUFBSUFFUTFnWWdBMEVRYWlBREtBSVlJQU1vQWh3Z0FoRGVCQ0FES0FJUUlRVWpBRUVRYXlJQkpBQWdBU0FBTmdJTUlBRkJER29pQUNBRklBQVFsQVJyRUo4RUlRQWdBVUVRYWlRQUlBTWdBRFlDRENBRElBSWdBeWdDRkJEMEFUWUNDQ0FFUVFocUlBTkJER29nQTBFSWFoQ3lBU0FEUVNCcUpBQWdCQ2dDRENBRVFSQnFKQUFMMWdVQkNuOGpBRUVRYXlJVUpBQWdBaUFBTmdJQUlBTkJnQVJ4SVJZRFFDQVZRUVJHQkVBZ0RSQkxRUUZMQkVBZ0ZDQU5FS0lCTmdJTUlBSWdGRUVNYWtFQkVKOEVJQTBRM1FFZ0FpZ0NBQkQ1QmpZQ0FBc2dBMEd3QVhFaUEwRVFSd1JBSUFFZ0EwRWdSZ1IvSUFJb0FnQUZJQUFMTmdJQUN5QVVRUkJxSkFBRkFrQUNRQUpBQWtBQ1FBSkFJQWdnRldvdEFBQU9CUUFCQXdJRUJRc2dBU0FDS0FJQU5nSUFEQVFMSUFFZ0FpZ0NBRFlDQUNBR1FTQVFnZ0VoRHlBQ0lBSW9BZ0FpRUVFQmFqWUNBQ0FRSUE4NkFBQU1Bd3NnRFJDdEFRMENJQTFCQUJCUkxRQUFJUThnQWlBQ0tBSUFJaEJCQVdvMkFnQWdFQ0FQT2dBQURBSUxJQXdRclFFZ0ZrVnlEUUVnQWlBTUVLSUJJQXdRM1FFZ0FpZ0NBQkQ1QmpZQ0FBd0JDeUFDS0FJQUlBUWdCMm9pQkNFUkEwQUNRQ0FGSUJGTkRRQWdCa0hBQUNBUkxBQUFFTFFCUlEwQUlCRkJBV29oRVF3QkN3c2dEaUlQUVFCS0JFQURRQ0FQUlNBRUlCRlBja1VFUUNBUFFRRnJJUThnRVVFQmF5SVJMUUFBSVJBZ0FpQUNLQUlBSWhKQkFXbzJBZ0FnRWlBUU9nQUFEQUVMQ3lBUEJIOGdCa0V3RUlJQkJVRUFDeUVTQTBBZ0FpQUNLQUlBSWhCQkFXbzJBZ0FnRDBFQVNnUkFJQkFnRWpvQUFDQVBRUUZySVE4TUFRc0xJQkFnQ1RvQUFBc0NRQ0FFSUJGR0JFQWdCa0V3RUlJQklROGdBaUFDS0FJQUloQkJBV28yQWdBZ0VDQVBPZ0FBREFFTElBc1FyUUVFZjBGL0JTQUxRUUFRVVN3QUFBc2hFRUVBSVE5QkFDRVRBMEFnQkNBUlJnMEJBa0FnRHlBUVJ3UkFJQThoRWd3QkN5QUNJQUlvQWdBaUVFRUJhallDQUNBUUlBbzZBQUJCQUNFU0lBc1FTeUFUUVFGcUloTk5CRUFnRHlFUURBRUxJQXNnRXhCUkxRQUFRZjhBUmdSQVFYOGhFQXdCQ3lBTElCTVFVU3dBQUNFUUN5QVJRUUZySWhFdEFBQWhEeUFDSUFJb0FnQWlHRUVCYWpZQ0FDQVlJQTg2QUFBZ0VrRUJhaUVQREFBTEFBc2dBaWdDQUJDS0Fnc2dGVUVCYWlFVkRBRUxDd3ZaQWdFQmZ5TUFRUkJySWdva0FDQUpBbjhnQUFSQUlBSVFoUWNoQUFKQUlBRUVRQ0FLUVFScUlnRWdBQkR0QVNBRElBb29BZ1EyQUFBZ0FTQUFFT3dCREFFTElBcEJCR29pQVNBQUVLc0RJQU1nQ2lnQ0JEWUFBQ0FCSUFBUXJnRUxJQWdnQVJDTkFTQUJFRXdhSUFRZ0FCQ3NBVG9BQUNBRklBQVFtZ0U2QUFBZ0NrRUVhaUlCSUFBUW1RRWdCaUFCRUkwQklBRVFUQm9nQVNBQUVLOEJJQWNnQVJDTkFTQUJFRXdhSUFBUTZ3RU1BUXNnQWhDRUJ5RUFBa0FnQVFSQUlBcEJCR29pQVNBQUVPMEJJQU1nQ2lnQ0JEWUFBQ0FCSUFBUTdBRU1BUXNnQ2tFRWFpSUJJQUFRcXdNZ0F5QUtLQUlFTmdBQUlBRWdBQkN1QVFzZ0NDQUJFSTBCSUFFUVRCb2dCQ0FBRUt3Qk9nQUFJQVVnQUJDYUFUb0FBQ0FLUVFScUlnRWdBQkNaQVNBR0lBRVFqUUVnQVJCTUdpQUJJQUFRcndFZ0J5QUJFSTBCSUFFUVRCb2dBQkRyQVFzMkFnQWdDa0VRYWlRQUMwRUJBWDhnQVVIV3F0V3FBVThFUUJEd0FRQUxRZFdxMWFvQklBQW9BZ2dnQUNnQ0FHdEJERzBpQUVFQmRDSUNJQUVnQVNBQ1NSc2dBRUdxMWFyVkFFOGJDd3NBSUFCQmxKQUZFTDBCQ3dzQUlBQkJuSkFGRUwwQkM5VUJBUU4vSXdCQkVHc2lCU1FBQWtCQjkvLy8vd01nQVdzZ0FrOEVRQ0FBRUZVaEJpQUZRUVJxSWdjZ0FVSHovLy8vQVVrRWZ5QUZJQUZCQVhRMkFnd2dCU0FCSUFKcU5nSUVJQWNnQlVFTWFoQ3RBaWdDQUJDakFrRUJhZ1ZCOS8vLy93TUxFS0lDSUFVb0FnUWhBaUFGS0FJSUdpQUVCRUFnQWlBR0lBUVF4UUVMSUFNZ0JFY0VRQ0FFUVFKMElnY2dBbW9nQmlBSGFpQURJQVJyRU1VQkN5QUJRUUZIQkVBZ0JoRFZBZ3NnQUNBQ0VMRUJJQUFnQlNnQ0NCQ3dBU0FGUVJCcUpBQU1BUXNRa3dFQUN5QUFJQU1RaXdFTEh3RUJmeUFCS0FJQUVPVUVJUUlnQUNBQktBSUFOZ0lFSUFBZ0FqWUNBQXM5QVFGL0lBQW9BZ1FpQWlBQlFReHNhaUVCQTBBZ0FTQUNSZ1JBSUFBZ0FUWUNCQVVnQWtFQU5nSUlJQUpDQURjQ0FDQUNRUXhxSVFJTUFRc0xDOFVQQVFwL0l3QkJrQVJySWdza0FDQUxJQW8yQW9nRUlBc2dBVFlDakFRQ1FDQUFJQXRCakFScUVHQUVRQ0FGSUFVb0FnQkJCSEkyQWdCQkFDRUFEQUVMSUF0QjdRSTJBa2dnQ3lBTFFlZ0FhaUFMUWZBQWFpQUxRY2dBYWlJQkVIUWlEeWdDQUNJS05nSmtJQXNnQ2tHUUEybzJBbUFnQVJCYUlSRWdDMEU4YWhCYUlRd2dDMEV3YWhCYUlRNGdDMEVrYWhCYUlRMGdDMEVZYWhCYUlSQWpBRUVRYXlJS0pBQWdDd0ovSUFJRVFDQUtRUVJxSWdFZ0F4RCtCaUlDRU8wQklBc2dDaWdDQkRZQVhDQUJJQUlRN0FFZ0RTQUJFTW9CSUFFUWNob2dBU0FDRUs0QklBNGdBUkRLQVNBQkVISWFJQXNnQWhDc0FUWUNXQ0FMSUFJUW1nRTJBbFFnQVNBQ0VKa0JJQkVnQVJDTkFTQUJFRXdhSUFFZ0FoQ3ZBU0FNSUFFUXlnRWdBUkJ5R2lBQ0VPc0JEQUVMSUFwQkJHb2lBU0FERVAwR0lnSVE3UUVnQ3lBS0tBSUVOZ0JjSUFFZ0FoRHNBU0FOSUFFUXlnRWdBUkJ5R2lBQklBSVFyZ0VnRGlBQkVNb0JJQUVRY2hvZ0N5QUNFS3dCTmdKWUlBc2dBaENhQVRZQ1ZDQUJJQUlRbVFFZ0VTQUJFSTBCSUFFUVRCb2dBU0FDRUs4QklBd2dBUkRLQVNBQkVISWFJQUlRNndFTE5nSVVJQXBCRUdva0FDQUpJQWdvQWdBMkFnQWdCRUdBQkhFaEVrRUFJUU5CQUNFQkEwQWdBU0VDQWtBQ1FBSkFBa0FnQTBFRVJnMEFJQUFnQzBHTUJHb1FZQTBBUVFBaENnSkFBa0FDUUFKQUFrQUNRQ0FMUWR3QWFpQURhaTBBQUE0RkFRQUVBd1VKQ3lBRFFRTkdEUWNnQjBFQklBQVFlUkN6QVFSQUlBdEJER29nQUJDQUJ5QVFJQXNvQWd3UWp3UU1BZ3NnQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdHQ3lBRFFRTkdEUVlMQTBBZ0FDQUxRWXdFYWhCZ0RRWWdCMEVCSUFBUWVSQ3pBVVVOQmlBTFFReHFJQUFRZ0FjZ0VDQUxLQUlNRUk4RURBQUxBQXNDUUNBT0VFdEZEUUFnQUJCNUlBNFFWU2dDQUVjTkFDQUFFSUFCR2lBR1FRQTZBQUFnRGlBQ0lBNFFTMEVCU3hzaEFRd0dDd0pBSUEwUVMwVU5BQ0FBRUhrZ0RSQlZLQUlBUncwQUlBQVFnQUVhSUFaQkFUb0FBQ0FOSUFJZ0RSQkxRUUZMR3lFQkRBWUxBa0FnRGhCTFJRMEFJQTBRUzBVTkFDQUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBUUxJQTRRUzBVRVFDQU5FRXRGRFFVTElBWWdEUkJMUlRvQUFBd0VDeUFTSUFOQkFra2dBbkp5UlFSQVFRQWhBU0FEUVFKR0lBc3RBRjlCQUVkeFJRMEZDeUFMSUF3UW9nRTJBZ2dnQzBFTWFpQUxRUWhxRVBNQklRRUNRQ0FEUlEwQUlBTWdDMm90QUZ0QkFVc05BQU5BQWtBZ0N5QU1FTnNCTmdJSUlBRWdDMEVJYWhEY0FVVU5BQ0FIUVFFZ0FTZ0NBQ2dDQUJDekFVVU5BQ0FCRUxJRERBRUxDeUFMSUF3UW9nRTJBZ2dnQVNnQ0FDQUxRUWhxSWdRb0FnQnJRUUoxSWdvZ0VCQkxUUVJBSUFzZ0VCRGJBVFlDQ0NBRVFRQWdDbXNRblFRZ0VCRGJBU0VLSUF3UW9nRWhFeU1BUVJCckloUWtBQkRxQVNFRUlBb1E2Z0VoQ2lBRUlCTVE2Z0VnQ2lBRWEwRjhjUkQ1QVVVZ0ZFRVFhaVFBRFFFTElBc2dEQkNpQVRZQ0JDQUJJQXRCQ0dvZ0MwRUVhaER6QVNnQ0FEWUNBQXNnQ3lBQktBSUFOZ0lJQTBBQ1FDQUxJQXdRMndFMkFnUWdDMEVJYWlJQklBdEJCR29RM0FGRkRRQWdBQ0FMUVl3RWFoQmdEUUFnQUJCNUlBRW9BZ0FvQWdCSERRQWdBQkNBQVJvZ0FSQ3lBd3dCQ3dzZ0VrVU5BeUFMSUF3UTJ3RTJBZ1FnQzBFSWFpQUxRUVJxRU53QlJRMERJQVVnQlNnQ0FFRUVjallDQUVFQUlRQU1BZ3NEUUFKQUlBQWdDMEdNQkdvUVlBMEFBbjhnQjBIQUFDQUFFSGtpQVJDekFRUkFJQWtvQWdBaUJDQUxLQUtJQkVZRVFDQUlJQWtnQzBHSUJHb1FwUUlnQ1NnQ0FDRUVDeUFKSUFSQkJHbzJBZ0FnQkNBQk5nSUFJQXBCQVdvTUFRc2dFUkJMUlNBS1JYSU5BU0FCSUFzb0FsUkhEUUVnQ3lnQ1pDSUJJQXNvQW1CR0JFQWdEeUFMUWVRQWFpQUxRZUFBYWhDbEFpQUxLQUprSVFFTElBc2dBVUVFYWpZQ1pDQUJJQW8yQWdCQkFBc2hDaUFBRUlBQkdnd0JDd3NnQ2tVZ0N5Z0NaQ0lCSUE4b0FnQkdja1VFUUNBTEtBSmdJQUZHQkVBZ0R5QUxRZVFBYWlBTFFlQUFhaENsQWlBTEtBSmtJUUVMSUFzZ0FVRUVhallDWkNBQklBbzJBZ0FMQWtBZ0N5Z0NGRUVBVEEwQUFrQWdBQ0FMUVl3RWFoQmdSUVJBSUFBUWVTQUxLQUpZUmcwQkN5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBTUxBMEFnQUJDQUFSb2dDeWdDRkVFQVRBMEJBa0FnQUNBTFFZd0VhaEJnUlFSQUlBZEJ3QUFnQUJCNUVMTUJEUUVMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFJUUFNQkFzZ0NTZ0NBQ0FMS0FLSUJFWUVRQ0FJSUFrZ0MwR0lCR29RcFFJTElBQVFlU0VCSUFrZ0NTZ0NBQ0lFUVFScU5nSUFJQVFnQVRZQ0FDQUxJQXNvQWhSQkFXczJBaFFNQUFzQUN5QUNJUUVnQ0NnQ0FDQUpLQUlBUncwRElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUFRc0NRQ0FDUlEwQVFRRWhDZ05BSUFJUVN5QUtUUTBCQWtBZ0FDQUxRWXdFYWhCZ1JRUkFJQUFRZVNBQ0lBb1EyZ0lvQWdCR0RRRUxJQVVnQlNnQ0FFRUVjallDQUVFQUlRQU1Bd3NnQUJDQUFSb2dDa0VCYWlFS0RBQUxBQXRCQVNFQUlBOG9BZ0FnQ3lnQ1pFWU5BRUVBSVFBZ0MwRUFOZ0lNSUJFZ0R5Z0NBQ0FMS0FKa0lBdEJER29RaWdFZ0N5Z0NEQVJBSUFVZ0JTZ0NBRUVFY2pZQ0FBd0JDMEVCSVFBTElCQVFjaG9nRFJCeUdpQU9FSElhSUF3UWNob2dFUkJNR2lBUEVITU1Bd3NnQWlFQkN5QURRUUZxSVFNTUFBc0FDeUFMUVpBRWFpUUFJQUFMSHdBZ0FDQUJFS3dERUh3Z0FSQ2tBaWdDQUNFQklBQVFwQUlnQVRZQ0FBc0xBQ0FBUVlTUUJSQzlBUXNMQUNBQVFZeVFCUkM5QVF2SEFRRUdmeU1BUVJCcklnUWtBQ0FBRUtRQ0tBSUFJUVZCQVFKL0lBSW9BZ0FnQUNnQ0FHc2lBMEgvLy8vL0Iwa0VRQ0FEUVFGMERBRUxRWDhMSWdNZ0EwRUJUUnNoQXlBQktBSUFJUVlnQUNnQ0FDRUhJQVZCN1FKR0JIOUJBQVVnQUNnQ0FBc2dBeEMwQWlJSUJFQWdCVUh0QWtjRVFDQUFFS3dER2dzZ0JFSHNBallDQkNBQUlBUkJDR29nQ0NBRVFRUnFFSFFpQlJDREJ5QUZFSE1nQVNBQUtBSUFJQVlnQjJ0cU5nSUFJQUlnQXlBQUtBSUFhallDQUNBRVFSQnFKQUFQQ3hCMUFBc2dBUUYvSUFFb0FnQVE2d1RBSVFJZ0FDQUJLQUlBTmdJRUlBQWdBam9BQUF2YUR3RUtmeU1BUVpBRWF5SUxKQUFnQ3lBS05nS0lCQ0FMSUFFMkFvd0VBa0FnQUNBTFFZd0VhaEJoQkVBZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3QkN5QUxRZTBDTmdKTUlBc2dDMEhvQUdvZ0MwSHdBR29nQzBITUFHb2lBUkIwSWc4b0FnQWlDallDWkNBTElBcEJrQU5xTmdKZ0lBRVFXaUVSSUF0QlFHc1FXaUVNSUF0Qk5Hb1FXaUVPSUF0QktHb1FXaUVOSUF0QkhHb1FXaUVRSXdCQkVHc2lDaVFBSUFzQ2Z5QUNCRUFnQ2tFRWFpSUJJQU1RaFFjaUFoRHRBU0FMSUFvb0FnUTJBRndnQVNBQ0VPd0JJQTBnQVJDTkFTQUJFRXdhSUFFZ0FoQ3VBU0FPSUFFUWpRRWdBUkJNR2lBTElBSVFyQUU2QUZzZ0N5QUNFSm9CT2dCYUlBRWdBaENaQVNBUklBRVFqUUVnQVJCTUdpQUJJQUlRcndFZ0RDQUJFSTBCSUFFUVRCb2dBaERyQVF3QkN5QUtRUVJxSWdFZ0F4Q0VCeUlDRU8wQklBc2dDaWdDQkRZQVhDQUJJQUlRN0FFZ0RTQUJFSTBCSUFFUVRCb2dBU0FDRUs0QklBNGdBUkNOQVNBQkVFd2FJQXNnQWhDc0FUb0FXeUFMSUFJUW1nRTZBRm9nQVNBQ0VKa0JJQkVnQVJDTkFTQUJFRXdhSUFFZ0FoQ3ZBU0FNSUFFUWpRRWdBUkJNR2lBQ0VPc0JDellDR0NBS1FSQnFKQUFnQ1NBSUtBSUFOZ0lBSUFSQmdBUnhJUkpCQUNFRFFRQWhBUU5BSUFFaEFnSkFBa0FDUUFKQUlBTkJCRVlOQUNBQUlBdEJqQVJxRUdFTkFFRUFJUW9DUUFKQUFrQUNRQUpBQWtBZ0MwSGNBR29nQTJvdEFBQU9CUUVBQkFNRkNRc2dBMEVEUmcwSElBZEJBU0FBRUhvUXRBRUVRQ0FMUVJCcUlBQVFod2NnRUNBTExBQVFFSkFFREFJTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUJnc2dBMEVEUmcwR0N3TkFJQUFnQzBHTUJHb1FZUTBHSUFkQkFTQUFFSG9RdEFGRkRRWWdDMEVRYWlBQUVJY0hJQkFnQ3l3QUVCQ1FCQXdBQ3dBTEFrQWdEaEJMUlEwQUlBQVFla0gvQVhFZ0RrRUFFRkV0QUFCSERRQWdBQkNCQVJvZ0JrRUFPZ0FBSUE0Z0FpQU9FRXRCQVVzYklRRU1CZ3NDUUNBTkVFdEZEUUFnQUJCNlFmOEJjU0FOUVFBUVVTMEFBRWNOQUNBQUVJRUJHaUFHUVFFNkFBQWdEU0FDSUEwUVMwRUJTeHNoQVF3R0N3SkFJQTRRUzBVTkFDQU5FRXRGRFFBZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3RUN5QU9FRXRGQkVBZ0RSQkxSUTBGQ3lBR0lBMFFTMFU2QUFBTUJBc2dFaUFEUVFKSklBSnlja1VFUUVFQUlRRWdBMEVDUmlBTExRQmZRUUJIY1VVTkJRc2dDeUFNRUtJQk5nSU1JQXRCRUdvZ0MwRU1haER6QVNFQkFrQWdBMFVOQUNBRElBdHFMUUJiUVFGTERRQURRQUpBSUFzZ0RCRGRBVFlDRENBQklBdEJER29RM0FGRkRRQWdCMEVCSUFFb0FnQXNBQUFRdEFGRkRRQWdBUkMyQXd3QkN3c2dDeUFNRUtJQk5nSU1JQUVvQWdBZ0MwRU1haUlFS0FJQWF5SUtJQkFRUzAwRVFDQUxJQkFRM1FFMkFnd2dCRUVBSUFwckVKOEVJQkFRM1FFaENpQU1FS0lCSVJNakFFRVFheUlVSkFBUTZnRWhCQ0FLRU9vQklRb2dCQ0FURU9vQklBb2dCR3NRK1FGRklCUkJFR29rQUEwQkN5QUxJQXdRb2dFMkFnZ2dBU0FMUVF4cUlBdEJDR29ROHdFb0FnQTJBZ0FMSUFzZ0FTZ0NBRFlDREFOQUFrQWdDeUFNRU4wQk5nSUlJQXRCREdvaUFTQUxRUWhxRU53QlJRMEFJQUFnQzBHTUJHb1FZUTBBSUFBUWVrSC9BWEVnQVNnQ0FDMEFBRWNOQUNBQUVJRUJHaUFCRUxZRERBRUxDeUFTUlEwRElBc2dEQkRkQVRZQ0NDQUxRUXhxSUF0QkNHb1EzQUZGRFFNZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3Q0N3TkFBa0FnQUNBTFFZd0VhaEJoRFFBQ2Z5QUhRY0FBSUFBUWVpSUJFTFFCQkVBZ0NTZ0NBQ0lFSUFzb0FvZ0VSZ1JBSUFnZ0NTQUxRWWdFYWhDR0J5QUpLQUlBSVFRTElBa2dCRUVCYWpZQ0FDQUVJQUU2QUFBZ0NrRUJhZ3dCQ3lBUkVFdEZJQXBGY2cwQklBc3RBRm9nQVVIL0FYRkhEUUVnQ3lnQ1pDSUJJQXNvQW1CR0JFQWdEeUFMUWVRQWFpQUxRZUFBYWhDbEFpQUxLQUprSVFFTElBc2dBVUVFYWpZQ1pDQUJJQW8yQWdCQkFBc2hDaUFBRUlFQkdnd0JDd3NnQ2tVZ0N5Z0NaQ0lCSUE4b0FnQkdja1VFUUNBTEtBSmdJQUZHQkVBZ0R5QUxRZVFBYWlBTFFlQUFhaENsQWlBTEtBSmtJUUVMSUFzZ0FVRUVhallDWkNBQklBbzJBZ0FMQWtBZ0N5Z0NHRUVBVEEwQUFrQWdBQ0FMUVl3RWFoQmhSUVJBSUFBUWVrSC9BWEVnQ3kwQVcwWU5BUXNnQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdEQ3dOQUlBQVFnUUVhSUFzb0FoaEJBRXdOQVFKQUlBQWdDMEdNQkdvUVlVVUVRQ0FIUWNBQUlBQVFlaEMwQVEwQkN5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBUUxJQWtvQWdBZ0N5Z0NpQVJHQkVBZ0NDQUpJQXRCaUFScUVJWUhDeUFBRUhvaEFTQUpJQWtvQWdBaUJFRUJhallDQUNBRUlBRTZBQUFnQ3lBTEtBSVlRUUZyTmdJWURBQUxBQXNnQWlFQklBZ29BZ0FnQ1NnQ0FFY05BeUFGSUFVb0FnQkJCSEkyQWdCQkFDRUFEQUVMQWtBZ0FrVU5BRUVCSVFvRFFDQUNFRXNnQ2swTkFRSkFJQUFnQzBHTUJHb1FZVVVFUUNBQUVIcEIvd0Z4SUFJZ0NoQlJMUUFBUmcwQkN5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBTUxJQUFRZ1FFYUlBcEJBV29oQ2d3QUN3QUxRUUVoQUNBUEtBSUFJQXNvQW1SR0RRQkJBQ0VBSUF0QkFEWUNFQ0FSSUE4b0FnQWdDeWdDWkNBTFFSQnFFSW9CSUFzb0FoQUVRQ0FGSUFVb0FnQkJCSEkyQWdBTUFRdEJBU0VBQ3lBUUVFd2FJQTBRVEJvZ0RoQk1HaUFNRUV3YUlCRVFUQm9nRHhCekRBTUxJQUloQVFzZ0EwRUJhaUVEREFBTEFBc2dDMEdRQkdva0FDQUFDd3dBSUFCQkFVRXRFSlVIR2dzTUFDQUFRUUZCTFJDa0JCb0xIQUVCZnlBQUxRQUFJUUlnQUNBQkxRQUFPZ0FBSUFFZ0Fqb0FBQXRsQVFGL0l3QkJFR3NpQmlRQUlBWkJBRG9BRHlBR0lBVTZBQTRnQmlBRU9nQU5JQVpCSlRvQURDQUZCRUFnQmtFTmFpQUdRUTVxRUlzSEN5QUNJQUVnQVNBQ0tBSUFFTmNFSUFaQkRHb2dBeUFBS0FJQUVOc0RJQUZxTmdJQUlBWkJFR29rQUFzMkFRRi9JQUFvQWdnaUFpQUJRUUowYWlFQkEwQWdBU0FDUmtVRVFDQUNRUUEyQWdBZ0FrRUVhaUVDREFFTEN5QUFJQUUyQWdnTFFnQWdBU0FDSUFNZ0JFRUVFTXNCSVFFZ0F5MEFBRUVFY1VVRVFDQUFJQUZCMEE5cUlBRkI3QTVxSUFFZ0FVSGtBRWtiSUFGQnhRQklHMEhzRG1zMkFnQUxDMEFBSUFJZ0F5QUFRUWhxSUFBb0FnZ29BZ1FSQUFBaUFDQUFRYUFDYWlBRklBUkJBQkRiQWlBQWF5SUFRWjhDVEFSQUlBRWdBRUVNYlVFTWJ6WUNBQXNMUUFBZ0FpQURJQUJCQ0dvZ0FDZ0NDQ2dDQUJFQUFDSUFJQUJCcUFGcUlBVWdCRUVBRU5zQ0lBQnJJZ0JCcHdGTUJFQWdBU0FBUVF4dFFRZHZOZ0lBQ3d0Q0FDQUJJQUlnQXlBRVFRUVF6QUVoQVNBRExRQUFRUVJ4UlFSQUlBQWdBVUhRRDJvZ0FVSHNEbW9nQVNBQlFlUUFTUnNnQVVIRkFFZ2JRZXdPYXpZQ0FBc0xRQUFnQWlBRElBQkJDR29nQUNnQ0NDZ0NCQkVBQUNJQUlBQkJvQUpxSUFVZ0JFRUFFTjRDSUFCcklnQkJud0pNQkVBZ0FTQUFRUXh0UVF4dk5nSUFDd3RBQUNBQ0lBTWdBRUVJYWlBQUtBSUlLQUlBRVFBQUlnQWdBRUdvQVdvZ0JTQUVRUUFRM2dJZ0FHc2lBRUduQVV3RVFDQUJJQUJCREcxQkIyODJBZ0FMQ3dRQVFRSUwzZ0VCQlg4akFFRVFheUlISkFBakFFRVFheUlESkFBZ0FDRUVBa0FnQVVIMy8vLy9BMDBFUUFKQUlBRVFwUU1FUUNBRUlBRVFtd0VNQVFzZ0EwRUlhaUFCRUtNQ1FRRnFFS0lDSUFNb0Fnd2FJQVFnQXlnQ0NDSUFFTEVCSUFRZ0F5Z0NEQkN3QVNBRUlBRVFpd0VMSXdCQkVHc2lCU1FBSUFVZ0FqWUNEQ0FBSVFJZ0FTRUdBMEFnQmdSQUlBSWdCU2dDRERZQ0FDQUdRUUZySVFZZ0FrRUVhaUVDREFFTEN5QUZRUkJxSkFBZ0EwRUFOZ0lFSUFBZ0FVRUNkR29nQTBFRWFoQ29BU0FEUVJCcUpBQU1BUXNRa3dFQUN5QUhRUkJxSkFBZ0JBdkFCUUVPZnlNQVFSQnJJZ3NrQUNBR0VKd0JJUW9nQzBFRWFpQUdFSXdDSWc0UW1RRWdCU0FETmdJQUFrQUNRQ0FBSWdjdEFBQWlCa0VyYXc0REFBRUFBUXNnQ2lBR3dCQ2ZBU0VHSUFVZ0JTZ0NBQ0lJUVFScU5nSUFJQWdnQmpZQ0FDQUFRUUZxSVFjTEFrQUNRQ0FDSUFjaUJtdEJBVXdOQUNBR0xRQUFRVEJIRFFBZ0JpMEFBVUVnY2tINEFFY05BQ0FLUVRBUW53RWhDQ0FGSUFVb0FnQWlCMEVFYWpZQ0FDQUhJQWcyQWdBZ0NpQUdMQUFCRUo4QklRZ2dCU0FGS0FJQUlnZEJCR28yQWdBZ0J5QUlOZ0lBSUFaQkFtb2lCeUVHQTBBZ0FpQUdUUTBDSUFZc0FBQVFhU0VTRUw0RVJRMENJQVpCQVdvaEJnd0FDd0FMQTBBZ0FpQUdUUTBCSUFZc0FBQVFhU0VVRUwwRVJRMEJJQVpCQVdvaEJnd0FDd0FMQWtBZ0MwRUVhaEN0QVFSQUlBb2dCeUFHSUFVb0FnQVF6UUVnQlNBRktBSUFJQVlnQjJ0QkFuUnFOZ0lBREFFTElBY2dCaENLQWlBT0VKb0JJUThnQnlFSUEwQWdCaUFJVFFSQUlBTWdCeUFBYTBFQ2RHb2dCU2dDQUJDeEF3VUNRQ0FMUVFScUlnMGdEQkJSTEFBQVFRQk1EUUFnQ1NBTklBd1FVU3dBQUVjTkFDQUZJQVVvQWdBaUNVRUVhallDQUNBSklBODJBZ0FnRENBTUlBMFFTMEVCYTBscUlReEJBQ0VKQ3lBS0lBZ3NBQUFRbndFaERTQUZJQVVvQWdBaUVFRUVhallDQUNBUUlBMDJBZ0FnQ0VFQmFpRUlJQWxCQVdvaENRd0JDd3NMQWtBQ1FBTkFJQUlnQmswTkFTQUdRUUZxSVFnZ0Jpd0FBQ0lHUVM1SEJFQWdDaUFHRUo4QklRWWdCU0FGS0FJQUlnZEJCR28yQWdBZ0J5QUdOZ0lBSUFnaEJnd0JDd3NnRGhDc0FTRUdJQVVnQlNnQ0FDSUhRUVJxSWdrMkFnQWdCeUFHTmdJQURBRUxJQVVvQWdBaENTQUdJUWdMSUFvZ0NDQUNJQWtRelFFZ0JTQUZLQUlBSUFJZ0NHdEJBblJxSWdVMkFnQWdCQ0FGSUFNZ0FTQUFhMEVDZEdvZ0FTQUNSaHMyQWdBZ0MwRUVhaEJNR2lBTFFSQnFKQUFMSFFBZ0FDUUJJQUJCQUVFcy9Bc0FJd0ZCSkdva0NpTUJRU2hxSkFzTC9nY0JCbjlCZ0o4SkpBbEJnSjhGSkFoQmtPWUVFQzFCa09ZRVFaRG1CRFlDQUVIRTVnUWpDVFlDQUVHdzVnUkJBallDQUVISTVnUWpDU01JYXpZQ0FFSGM1Z1JCM09ZRU5nSUFRZkRtQkVINDVRUTJBZ0JCcU9ZRVFTbzJBZ0JCMk9ZRVFaRHBCRFlDQUVHYzVnUkJrT1lFTmdJQVFaam1CRUdRNWdRMkFnQkJrT1lFRUpNRlFaRG1CQkFzSXdCQkVHc2lBQ1FBQWtBZ0FFRU1haUFBUVFocUVDOE5BRUhVNVFRZ0FDZ0NERUVDZEVFRWFoQk5JZ0UyQWdBZ0FVVU5BQ0FBS0FJSUVFMGlBUVJBUWRUbEJDZ0NBQ0FBS0FJTVFRSjBha0VBTmdJQVFkVGxCQ2dDQUNBQkVDNUZEUUVMUWRUbEJFRUFOZ0lBQ3lBQVFSQnFKQUFDUUVHb2pnWCtFZ0FBUVFGeERRQkJxSTRGRUg5RkRRQkI1T3NES0FJQUlnTWhBaU1BUVJCcklnRWtBRUhFaXdVUTlBUWlBRUg4aXdVMkFpZ2dBQ0FDTmdJZ0lBQkI0T3dETmdJQUlBQkJBRG9BTkNBQVFYODJBakFnQVVFTWFpSUNJQUFRNkFJZ0FDQUNJQUFvQWdBb0FnZ1JBZ0FnQWhCVUlBRkJFR29rQUVHZ2hnVVF6QVJCbUlZRlFaemxBellDQUVHdzVRTTJBZ0JCbklZRlFRQTJBZ0JCa09VREtBSUFRWmlHQldwQnhJc0ZFTjhDUVlTTUJVSEV2d01vQWdBaUJFRzBqQVVRendSQnlJY0ZRWVNNQlJERUEwRzhqQVZCd0w4REtBSUFJZ1ZCN0l3RkVNOEVRZkNJQlVHOGpBVVF4QU5CbUlvRlFmQ0lCU2dDQUVFTWF5Z0NBRUh3aUFWcUtBSVlFTVFEUVppR0JTZ0NBRUVNYXlnQ0FFR1loZ1ZxUWNpSEJSRGdBa0h3aUFVb0FnQkJER3NvQWdCQjhJZ0ZhaERMQkVId2lBVW9BZ0JCREdzb0FnQkI4SWdGYWtISWh3VVE0QUlqQUVFUWF5SUJKQUJCOUl3RkVPY0VJZ0JCckkwRk5nSW9JQUFnQXpZQ0lDQUFRYXp1QXpZQ0FDQUFRUUE2QURRZ0FFRi9OZ0l3SUFGQkRHb2lBaUFBRU9nQ0lBQWdBaUFBS0FJQUtBSUlFUUlBSUFJUVZDQUJRUkJxSkFCQitJWUZFTW9FUWZDR0JVRzg1Z00yQWdCQjBPWUROZ0lBUWZTR0JVRUFOZ0lBUWJEbUF5Z0NBRUh3aGdWcVFmU01CUkRmQWtHMGpRVWdCRUhralFVUXpRUkJuSWdGUWJTTkJSRERBMEhzalFVZ0JVR2NqZ1VRelFSQnhJa0ZRZXlOQlJEREEwSHNpZ1ZCeElrRktBSUFRUXhyS0FJQVFjU0pCV29vQWhnUXd3TkI4SVlGS0FJQVFReHJLQUlBUWZDR0JXcEJuSWdGRU9BQ1FjU0pCU2dDQUVFTWF5Z0NBRUhFaVFWcUVNc0VRY1NKQlNnQ0FFRU1heWdDQUVIRWlRVnFRWnlJQlJEZ0FrR29qZ1VRZmd0QjlPUUVRZ0EzQWdCQjdPUUVRZ0EzQWdCQi9PUUVRWUNBZ1B3RE5nSUFRYnpsQkVFQU5nSUFRYmpsQkVFb05nSUFFUEFGUWJ6bEJFSEE1UVFvQWdBMkFnQkJ3T1VFUWJqbEJEWUNBRUhFNVFSQmhnRTJBZ0JCeU9VRVFRQTJBZ0FRM1FWQnlPVUVRY0RsQkNnQ0FEWUNBRUhBNVFSQnhPVUVOZ0lBQzk4REFRZC9BbjhqQUVId0Ftc2lCU1FBSUFWQ0pUY0Q2QUlnQlVIb0Ftb2lCa0VCY2tIMGtBSWdBaWdDQkJEWUFpRUhJQVVnQlVIQUFtb2lDRFlDdkFJUWFTRUFBbjhnQndSQUlBSW9BZ2doQ1NBRklBUTVBeWdnQlNBSk5nSWdJQWhCSGlBQUlBWWdCVUVnYWhDaEFRd0JDeUFGSUFRNUF6QWdCVUhBQW1wQkhpQUFJQVZCNkFKcUlBVkJNR29Rb1FFTElRQWdCVUhzQWpZQ1VDQUZRYlFDYWtFQUlBVkIwQUJxRUhRaENDQUZRY0FDYWlFR0FrQWdBRUVlVGdSQUVHa2hBQUovSUFjRVFDQUNLQUlJSVFZZ0JTQUVPUU1JSUFVZ0JqWUNBQ0FGUWJ3Q2FpQUFJQVZCNkFKcUlBVVF3Z0VNQVFzZ0JTQUVPUU1RSUFWQnZBSnFJQUFnQlVIb0Ftb2dCVUVRYWhEQ0FRc2lBRUYvUmcwQklBZ2dCU2dDdkFJUWZDQUZLQUs4QWlFR0N5QUdJQUFnQm1vaUNpQUNFTU1CSVFzZ0JVSHNBallDVUNBRlFjZ0Fha0VBSUFWQjBBQnFJZ1lRZENFSEFrQWdCU2dDdkFJaUNTQUZRY0FDYWtZRVFDQUdJUUFNQVFzZ0FFRURkQkJOSWdCRkRRRWdCeUFBRUh3Z0JTZ0N2QUloQ1FzZ0JVRThhaUlHSUFJUVhDQUpJQXNnQ2lBQUlBVkJ4QUJxSUFWQlFHc2dCaENXQnlBR0VGUWdBU0FBSUFVb0FrUWdCU2dDUUNBQ0lBTVE3d0VnQnhCeklBZ1FjeUFGUWZBQ2FpUUFEQUVMRUhVQUN3c1JBQ0FBSUFFZ0FpQURJQVJCQUJDMkJnc1JBQ0FBSUFFZ0FpQURJQVJCQUJDM0Jnc1JBQ0FBSUFFZ0FpQURJQVJCQVJDMkJnc1JBQ0FBSUFFZ0FpQURJQVJCQVJDM0Jndk5BUUVCZnlNQVFTQnJJZ1VrQUNBRklBRTJBaHdDUUNBQ0tBSUVRUUZ4UlFSQUlBQWdBU0FDSUFNZ0JDQUFLQUlBS0FJWUVRb0FJUUlNQVFzZ0JVRVFhaUlBSUFJUVhDQUFFSXdDSVFFZ0FCQlVBa0FnQkFSQUlBQWdBUkN2QVF3QkN5QUZRUkJxSUFFUXJnRUxJQVVnQlVFUWFoQ2lBVFlDREFOQUlBVWdCVUVRYWlJQUVOc0JOZ0lJSUFWQkRHb2lBU0FGUVFocUVOd0JCRUFnQlVFY2FpQUJJZ0FvQWdBb0FnQVE1QVFnQUJDeUF3d0JCU0FGS0FJY0lRSWdBQkJ5R2dzTEN5QUZRU0JxSkFBZ0Fnc0hBQ0FBS0FJTUM0Y0JBUVYvSXdCQjRBQnJJZ0FrQUJCcElRWWdBQ0FFTmdJQUlBQkJRR3NpQnlBSElBZEJGQ0FHUWZUVkFTQUFFS0VCSWdocUlnUWdBaEREQVNFR0lBQkJFR29pQlNBQ0VGd2dCUkNWQVNBRkVGUWdCeUFFSUFVUTNnRWdBU0FGSUFVZ0NHb2lBU0FHSUFCcklBQnFRVEJySUFRZ0JrWWJJQUVnQWlBREVQRUJJQUJCNEFCcUpBQUxnd1FCQjM4Q2Z5TUFRWUFDYXlJR0pBQWdCa0lsTndQNEFTQUdRZmdCYWlJSFFRRnlRYkwyQVNBQ0tBSUVFTmdDSVFnZ0JpQUdRZEFCYWlJSk5nTE1BUkJwSVFBQ2Z5QUlCRUFnQWlnQ0NDRUtJQVpCUUdzZ0JUY0RBQ0FHSUFRM0F6Z2dCaUFLTmdJd0lBbEJIaUFBSUFjZ0JrRXdhaENoQVF3QkN5QUdJQVEzQTFBZ0JpQUZOd05ZSUFaQjBBRnFRUjRnQUNBR1FmZ0JhaUFHUWRBQWFoQ2hBUXNoQUNBR1Fld0NOZ0tBQVNBR1FjUUJha0VBSUFaQmdBRnFFSFFoQ1NBR1FkQUJhaUVIQWtBZ0FFRWVUZ1JBRUdraEFBSi9JQWdFUUNBQ0tBSUlJUWNnQmlBRk53TVFJQVlnQkRjRENDQUdJQWMyQWdBZ0JrSE1BV29nQUNBR1FmZ0JhaUFHRU1JQkRBRUxJQVlnQkRjRElDQUdJQVUzQXlnZ0JrSE1BV29nQUNBR1FmZ0JhaUFHUVNCcUVNSUJDeUlBUVg5R0RRRWdDU0FHS0FMTUFSQjhJQVlvQXN3QklRY0xJQWNnQUNBSGFpSUxJQUlRd3dFaERDQUdRZXdDTmdLQUFTQUdRZmdBYWtFQUlBWkJnQUZxSWdjUWRDRUlBa0FnQmlnQ3pBRWlDaUFHUWRBQmFrWUVRQ0FISVFBTUFRc2dBRUVCZEJCTklnQkZEUUVnQ0NBQUVId2dCaWdDekFFaENnc2dCa0hzQUdvaUJ5QUNFRndnQ2lBTUlBc2dBQ0FHUWZRQWFpQUdRZkFBYWlBSEVLVUVJQWNRVkNBQklBQWdCaWdDZENBR0tBSndJQUlnQXhEeEFTQUlFSE1nQ1JCeklBWkJnQUpxSkFBTUFRc1FkUUFMQ3djQUlBQW9BZ2dMM3dNQkIzOENmeU1BUWRBQmF5SUZKQUFnQlVJbE53UElBU0FGUWNnQmFpSUdRUUZ5UWZTUUFpQUNLQUlFRU5nQ0lRY2dCU0FGUWFBQmFpSUlOZ0tjQVJCcElRQUNmeUFIQkVBZ0FpZ0NDQ0VKSUFVZ0JEa0RLQ0FGSUFrMkFpQWdDRUVlSUFBZ0JpQUZRU0JxRUtFQkRBRUxJQVVnQkRrRE1DQUZRYUFCYWtFZUlBQWdCVUhJQVdvZ0JVRXdhaENoQVFzaEFDQUZRZXdDTmdKUUlBVkJsQUZxUVFBZ0JVSFFBR29RZENFSUlBVkJvQUZxSVFZQ1FDQUFRUjVPQkVBUWFTRUFBbjhnQndSQUlBSW9BZ2doQmlBRklBUTVBd2dnQlNBR05nSUFJQVZCbkFGcUlBQWdCVUhJQVdvZ0JSRENBUXdCQ3lBRklBUTVBeEFnQlVHY0FXb2dBQ0FGUWNnQmFpQUZRUkJxRU1JQkN5SUFRWDlHRFFFZ0NDQUZLQUtjQVJCOElBVW9BcHdCSVFZTElBWWdBQ0FHYWlJS0lBSVF3d0VoQ3lBRlFld0NOZ0pRSUFWQnlBQnFRUUFnQlVIUUFHb2lCaEIwSVFjQ1FDQUZLQUtjQVNJSklBVkJvQUZxUmdSQUlBWWhBQXdCQ3lBQVFRRjBFRTBpQUVVTkFTQUhJQUFRZkNBRktBS2NBU0VKQ3lBRlFUeHFJZ1lnQWhCY0lBa2dDeUFLSUFBZ0JVSEVBR29nQlVGQWF5QUdFS1VFSUFZUVZDQUJJQUFnQlNnQ1JDQUZLQUpBSUFJZ0F4RHhBU0FIRUhNZ0NCQnpJQVZCMEFGcUpBQU1BUXNRZFFBTEN4RUFJQUFnQVNBQ0lBTWdCRUVBRUxnR0N4RUFJQUFnQVNBQ0lBTWdCRUVBRUxrR0N4RUFJQUFnQVNBQ0lBTWdCRUVCRUxnR0N4RUFJQUFnQVNBQ0lBTWdCRUVCRUxrR0M4MEJBUUYvSXdCQklHc2lCU1FBSUFVZ0FUWUNIQUpBSUFJb0FnUkJBWEZGQkVBZ0FDQUJJQUlnQXlBRUlBQW9BZ0FvQWhnUkNnQWhBZ3dCQ3lBRlFSQnFJZ0FnQWhCY0lBQVFqZ0loQVNBQUVGUUNRQ0FFQkVBZ0FDQUJFSzhCREFFTElBVkJFR29nQVJDdUFRc2dCU0FGUVJCcUVLSUJOZ0lNQTBBZ0JTQUZRUkJxSWdBUTNRRTJBZ2dnQlVFTWFpSUJJQVZCQ0dvUTNBRUVRQ0FGUVJ4cUlBRWlBQ2dDQUN3QUFCRE5BeUFBRUxZRERBRUZJQVVvQWh3aEFpQUFFRXdhQ3dzTElBVkJJR29rQUNBQ0MrWUNBUUYvSXdCQndBSnJJZ0FrQUNBQUlBSTJBcmdDSUFBZ0FUWUN2QUlnQUVIRUFXb1FXaUVHSUFCQkVHb2lBaUFERUZ3Z0FoQ2NBVUhRaUFSQjZvZ0VJQUJCMEFGcUVNMEJJQUlRVkNBQVFiZ0JhaEJhSWdNZ0F4QmZFRklnQUNBRFFRQVFVU0lCTmdLMEFTQUFJQUkyQWd3Z0FFRUFOZ0lJQTBBQ1FDQUFRYndDYWlBQVFiZ0NhaEJnRFFBZ0FDZ0N0QUVnQXhCTElBRnFSZ1JBSUFNUVN5RUNJQU1nQXhCTFFRRjBFRklnQXlBREVGOFFVaUFBSUFJZ0EwRUFFRkVpQVdvMkFyUUJDeUFBUWJ3Q2FpSUNFSGxCRUNBQklBQkJ0QUZxSUFCQkNHcEJBQ0FHSUFCQkVHb2dBRUVNYWlBQVFkQUJhaENMQWcwQUlBSVFnQUVhREFFTEN5QURJQUFvQXJRQklBRnJFRklnQXhCVkVHa2dBQ0FGTmdJQUlBQVFxUVJCQVVjRVFDQUVRUVEyQWdBTElBQkJ2QUpxSUFCQnVBSnFFR0FFUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQXJ3Q0lBTVFUQm9nQmhCTUdpQUFRY0FDYWlRQUM4OERBUUYrSXdCQmdBTnJJZ0FrQUNBQUlBSTJBdmdDSUFBZ0FUWUMvQUlnQUVIY0FXb2dBeUFBUWZBQmFpQUFRZXdCYWlBQVFlZ0JhaEM2QXlBQVFkQUJhaEJhSWdFZ0FSQmZFRklnQUNBQlFRQVFVU0lDTmdMTUFTQUFJQUJCSUdvMkFod2dBRUVBTmdJWUlBQkJBVG9BRnlBQVFjVUFPZ0FXQTBBQ1FDQUFRZndDYWlBQVFmZ0NhaEJnRFFBZ0FDZ0N6QUVnQVJCTElBSnFSZ1JBSUFFUVN5RURJQUVnQVJCTFFRRjBFRklnQVNBQkVGOFFVaUFBSUFNZ0FVRUFFRkVpQW1vMkFzd0JDeUFBUWZ3Q2FpSURFSGtnQUVFWGFpQUFRUlpxSUFJZ0FFSE1BV29nQUNnQzdBRWdBQ2dDNkFFZ0FFSGNBV29nQUVFZ2FpQUFRUnhxSUFCQkdHb2dBRUh3QVdvUXVRTU5BQ0FERUlBQkdnd0JDd3NDUUNBQVFkd0JhaEJMUlEwQUlBQXRBQmRCQVVjTkFDQUFLQUljSWdNZ0FFRWdhbXRCbndGS0RRQWdBQ0FEUVFScU5nSWNJQU1nQUNnQ0dEWUNBQXNnQUNBQ0lBQW9Bc3dCSUFRUXFnUWdBQ2tEQUNFR0lBVWdBQ2tEQ0RjRENDQUZJQVkzQXdBZ0FFSGNBV29nQUVFZ2FpQUFLQUljSUFRUWlnRWdBRUg4QW1vZ0FFSDRBbW9RWUFSQUlBUWdCQ2dDQUVFQ2NqWUNBQXNnQUNnQy9BSWdBUkJNR2lBQVFkd0JhaEJNR2lBQVFZQURhaVFBQzdnREFDTUFRZkFDYXlJQUpBQWdBQ0FDTmdMb0FpQUFJQUUyQXV3Q0lBQkJ6QUZxSUFNZ0FFSGdBV29nQUVIY0FXb2dBRUhZQVdvUXVnTWdBRUhBQVdvUVdpSUJJQUVRWHhCU0lBQWdBVUVBRUZFaUFqWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQ0FBUVFFNkFBY2dBRUhGQURvQUJnTkFBa0FnQUVIc0Ftb2dBRUhvQW1vUVlBMEFJQUFvQXJ3QklBRVFTeUFDYWtZRVFDQUJFRXNoQXlBQklBRVFTMEVCZEJCU0lBRWdBUkJmRUZJZ0FDQURJQUZCQUJCUklnSnFOZ0s4QVFzZ0FFSHNBbW9pQXhCNUlBQkJCMm9nQUVFR2FpQUNJQUJCdkFGcUlBQW9BdHdCSUFBb0F0Z0JJQUJCekFGcUlBQkJFR29nQUVFTWFpQUFRUWhxSUFCQjRBRnFFTGtERFFBZ0F4Q0FBUm9NQVFzTEFrQWdBRUhNQVdvUVMwVU5BQ0FBTFFBSFFRRkhEUUFnQUNnQ0RDSURJQUJCRUdwclFaOEJTZzBBSUFBZ0EwRUVhallDRENBRElBQW9BZ2cyQWdBTElBVWdBaUFBS0FLOEFTQUVFS3NFT1FNQUlBQkJ6QUZxSUFCQkVHb2dBQ2dDRENBRUVJb0JJQUJCN0FKcUlBQkI2QUpxRUdBRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0F1d0NJQUVRVEJvZ0FFSE1BV29RVEJvZ0FFSHdBbW9rQUF1NEF3QWpBRUh3QW1zaUFDUUFJQUFnQWpZQzZBSWdBQ0FCTmdMc0FpQUFRY3dCYWlBRElBQkI0QUZxSUFCQjNBRnFJQUJCMkFGcUVMb0RJQUJCd0FGcUVGb2lBU0FCRUY4UVVpQUFJQUZCQUJCUklnSTJBcndCSUFBZ0FFRVFhallDRENBQVFRQTJBZ2dnQUVFQk9nQUhJQUJCeFFBNkFBWURRQUpBSUFCQjdBSnFJQUJCNkFKcUVHQU5BQ0FBS0FLOEFTQUJFRXNnQW1wR0JFQWdBUkJMSVFNZ0FTQUJFRXRCQVhRUVVpQUJJQUVRWHhCU0lBQWdBeUFCUVFBUVVTSUNhallDdkFFTElBQkI3QUpxSWdNUWVTQUFRUWRxSUFCQkJtb2dBaUFBUWJ3QmFpQUFLQUxjQVNBQUtBTFlBU0FBUWN3QmFpQUFRUkJxSUFCQkRHb2dBRUVJYWlBQVFlQUJhaEM1QXcwQUlBTVFnQUVhREFFTEN3SkFJQUJCekFGcUVFdEZEUUFnQUMwQUIwRUJSdzBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQkNzQkRnQ0FDQUFRY3dCYWlBQVFSQnFJQUFvQWd3Z0JCQ0tBU0FBUWV3Q2FpQUFRZWdDYWhCZ0JFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBTHNBaUFCRUV3YUlBQkJ6QUZxRUV3YUlBQkI4QUpxSkFBTG1RTUJBbjhqQUVIUUFtc2lBQ1FBSUFBZ0FqWUN5QUlnQUNBQk5nTE1BaUFERU1RQklRWWdBeUFBUWRBQmFoQ3BBaUVISUFCQnhBRnFJQU1nQUVIRUFtb1FxQUlnQUVHNEFXb1FXaUlCSUFFUVh4QlNJQUFnQVVFQUVGRWlBallDdEFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUhNQW1vZ0FFSElBbW9RWUEwQUlBQW9BclFCSUFFUVN5QUNha1lFUUNBQkVFc2hBeUFCSUFFUVMwRUJkQkJTSUFFZ0FSQmZFRklnQUNBRElBRkJBQkJSSWdKcU5nSzBBUXNnQUVITUFtb2lBeEI1SUFZZ0FpQUFRYlFCYWlBQVFRaHFJQUFvQXNRQ0lBQkJ4QUZxSUFCQkVHb2dBRUVNYWlBSEVJc0NEUUFnQXhDQUFSb01BUXNMQWtBZ0FFSEVBV29RUzBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BclFCSUFRZ0JoQ3RCRGNEQUNBQVFjUUJhaUFBUVJCcUlBQW9BZ3dnQkJDS0FTQUFRY3dDYWlBQVFjZ0NhaEJnQkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FMTUFpQUJFRXdhSUFCQnhBRnFFRXdhSUFCQjBBSnFKQUFMbVFNQkFuOGpBRUhRQW1zaUFDUUFJQUFnQWpZQ3lBSWdBQ0FCTmdMTUFpQURFTVFCSVFZZ0F5QUFRZEFCYWhDcEFpRUhJQUJCeEFGcUlBTWdBRUhFQW1vUXFBSWdBRUc0QVdvUVdpSUJJQUVRWHhCU0lBQWdBVUVBRUZFaUFqWUN0QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQU5BQWtBZ0FFSE1BbW9nQUVISUFtb1FZQTBBSUFBb0FyUUJJQUVRU3lBQ2FrWUVRQ0FCRUVzaEF5QUJJQUVRUzBFQmRCQlNJQUVnQVJCZkVGSWdBQ0FESUFGQkFCQlJJZ0pxTmdLMEFRc2dBRUhNQW1vaUF4QjVJQVlnQWlBQVFiUUJhaUFBUVFocUlBQW9Bc1FDSUFCQnhBRnFJQUJCRUdvZ0FFRU1haUFIRUlzQ0RRQWdBeENBQVJvTUFRc0xBa0FnQUVIRUFXb1FTMFVOQUNBQUtBSU1JZ01nQUVFUWFtdEJud0ZLRFFBZ0FDQURRUVJxTmdJTUlBTWdBQ2dDQ0RZQ0FBc2dCU0FDSUFBb0FyUUJJQVFnQmhDd0JEc0JBQ0FBUWNRQmFpQUFRUkJxSUFBb0Fnd2dCQkNLQVNBQVFjd0NhaUFBUWNnQ2FoQmdCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUFLQUxNQWlBQkVFd2FJQUJCeEFGcUVFd2FJQUJCMEFKcUpBQUxtUU1CQW44akFFSFFBbXNpQUNRQUlBQWdBallDeUFJZ0FDQUJOZ0xNQWlBREVNUUJJUVlnQXlBQVFkQUJhaENwQWlFSElBQkJ4QUZxSUFNZ0FFSEVBbW9RcUFJZ0FFRzRBV29RV2lJQklBRVFYeEJTSUFBZ0FVRUFFRkVpQWpZQ3RBRWdBQ0FBUVJCcU5nSU1JQUJCQURZQ0NBTkFBa0FnQUVITUFtb2dBRUhJQW1vUVlBMEFJQUFvQXJRQklBRVFTeUFDYWtZRVFDQUJFRXNoQXlBQklBRVFTMEVCZEJCU0lBRWdBUkJmRUZJZ0FDQURJQUZCQUJCUklnSnFOZ0swQVFzZ0FFSE1BbW9pQXhCNUlBWWdBaUFBUWJRQmFpQUFRUWhxSUFBb0FzUUNJQUJCeEFGcUlBQkJFR29nQUVFTWFpQUhFSXNDRFFBZ0F4Q0FBUm9NQVFzTEFrQWdBRUhFQVdvUVMwVU5BQ0FBS0FJTUlnTWdBRUVRYW10Qm53RktEUUFnQUNBRFFRUnFOZ0lNSUFNZ0FDZ0NDRFlDQUFzZ0JTQUNJQUFvQXJRQklBUWdCaEN4QkRjREFDQUFRY1FCYWlBQVFSQnFJQUFvQWd3Z0JCQ0tBU0FBUWN3Q2FpQUFRY2dDYWhCZ0JFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBTE1BaUFCRUV3YUlBQkJ4QUZxRUV3YUlBQkIwQUpxSkFBTG1RTUJBbjhqQUVIUUFtc2lBQ1FBSUFBZ0FqWUN5QUlnQUNBQk5nTE1BaUFERU1RQklRWWdBeUFBUWRBQmFoQ3BBaUVISUFCQnhBRnFJQU1nQUVIRUFtb1FxQUlnQUVHNEFXb1FXaUlCSUFFUVh4QlNJQUFnQVVFQUVGRWlBallDdEFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUhNQW1vZ0FFSElBbW9RWUEwQUlBQW9BclFCSUFFUVN5QUNha1lFUUNBQkVFc2hBeUFCSUFFUVMwRUJkQkJTSUFFZ0FSQmZFRklnQUNBRElBRkJBQkJSSWdKcU5nSzBBUXNnQUVITUFtb2lBeEI1SUFZZ0FpQUFRYlFCYWlBQVFRaHFJQUFvQXNRQ0lBQkJ4QUZxSUFCQkVHb2dBRUVNYWlBSEVJc0NEUUFnQXhDQUFSb01BUXNMQWtBZ0FFSEVBV29RUzBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BclFCSUFRZ0JoQ3lCRFlDQUNBQVFjUUJhaUFBUVJCcUlBQW9BZ3dnQkJDS0FTQUFRY3dDYWlBQVFjZ0NhaEJnQkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FMTUFpQUJFRXdhSUFCQnhBRnFFRXdhSUFCQjBBSnFKQUFMN1FFQkFYOGpBRUVnYXlJR0pBQWdCaUFCTmdJY0FrQWdBeWdDQkVFQmNVVUVRQ0FHUVg4MkFnQWdBQ0FCSUFJZ0F5QUVJQVlnQUNnQ0FDZ0NFQkVKQUNFQkFrQUNRQUpBSUFZb0FnQU9BZ0FCQWdzZ0JVRUFPZ0FBREFNTElBVkJBVG9BQUF3Q0N5QUZRUUU2QUFBZ0JFRUVOZ0lBREFFTElBWWdBeEJjSUFZUW5BRWhBU0FHRUZRZ0JpQURFRndnQmhDTUFpRUFJQVlRVkNBR0lBQVFyd0VnQmtFTWNpQUFFSzRCSUFVZ0JrRWNhaUFDSUFZZ0JrRVlhaUlESUFFZ0JFRUJFTnNDSUFaR09nQUFJQVlvQWh3aEFRTkFJQU5CREdzUWNpSURJQVpIRFFBTEN5QUdRU0JxSkFBZ0FRdm1BZ0VCZnlNQVFZQUNheUlBSkFBZ0FDQUNOZ0w0QVNBQUlBRTJBdndCSUFCQnhBRnFFRm9oQmlBQVFSQnFJZ0lnQXhCY0lBSVFsUUZCMElnRVFlcUlCQ0FBUWRBQmFoRGVBU0FDRUZRZ0FFRzRBV29RV2lJRElBTVFYeEJTSUFBZ0EwRUFFRkVpQVRZQ3RBRWdBQ0FDTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUg4QVdvZ0FFSDRBV29RWVEwQUlBQW9BclFCSUFNUVN5QUJha1lFUUNBREVFc2hBaUFESUFNUVMwRUJkQkJTSUFNZ0F4QmZFRklnQUNBQ0lBTkJBQkJSSWdGcU5nSzBBUXNnQUVIOEFXb2lBaEI2UVJBZ0FTQUFRYlFCYWlBQVFRaHFRUUFnQmlBQVFSQnFJQUJCREdvZ0FFSFFBV29RalFJTkFDQUNFSUVCR2d3QkN3c2dBeUFBS0FLMEFTQUJheEJTSUFNUVZSQnBJQUFnQlRZQ0FDQUFFS2tFUVFGSEJFQWdCRUVFTmdJQUN5QUFRZndCYWlBQVFmZ0JhaEJoQkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FMOEFTQURFRXdhSUFZUVRCb2dBRUdBQW1va0FBdlBBd0VCZmlNQVFaQUNheUlBSkFBZ0FDQUNOZ0tJQWlBQUlBRTJBb3dDSUFCQjBBRnFJQU1nQUVIZ0FXb2dBRUhmQVdvZ0FFSGVBV29RdmdNZ0FFSEVBV29RV2lJQklBRVFYeEJTSUFBZ0FVRUFFRkVpQWpZQ3dBRWdBQ0FBUVNCcU5nSWNJQUJCQURZQ0dDQUFRUUU2QUJjZ0FFSEZBRG9BRmdOQUFrQWdBRUdNQW1vZ0FFR0lBbW9RWVEwQUlBQW9Bc0FCSUFFUVN5QUNha1lFUUNBQkVFc2hBeUFCSUFFUVMwRUJkQkJTSUFFZ0FSQmZFRklnQUNBRElBRkJBQkJSSWdKcU5nTEFBUXNnQUVHTUFtb2lBeEI2SUFCQkYyb2dBRUVXYWlBQ0lBQkJ3QUZxSUFBc0FOOEJJQUFzQU40QklBQkIwQUZxSUFCQklHb2dBRUVjYWlBQVFSaHFJQUJCNEFGcUVMMEREUUFnQXhDQkFSb01BUXNMQWtBZ0FFSFFBV29RUzBVTkFDQUFMUUFYUVFGSERRQWdBQ2dDSENJRElBQkJJR3ByUVo4QlNnMEFJQUFnQTBFRWFqWUNIQ0FESUFBb0FoZzJBZ0FMSUFBZ0FpQUFLQUxBQVNBRUVLb0VJQUFwQXdBaEJpQUZJQUFwQXdnM0F3Z2dCU0FHTndNQUlBQkIwQUZxSUFCQklHb2dBQ2dDSENBRUVJb0JJQUJCakFKcUlBQkJpQUpxRUdFRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0Fvd0NJQUVRVEJvZ0FFSFFBV29RVEJvZ0FFR1FBbW9rQUF1NEF3QWpBRUdBQW1zaUFDUUFJQUFnQWpZQytBRWdBQ0FCTmdMOEFTQUFRY0FCYWlBRElBQkIwQUZxSUFCQnp3RnFJQUJCemdGcUVMNERJQUJCdEFGcUVGb2lBU0FCRUY4UVVpQUFJQUZCQUJCUklnSTJBckFCSUFBZ0FFRVFhallDRENBQVFRQTJBZ2dnQUVFQk9nQUhJQUJCeFFBNkFBWURRQUpBSUFCQi9BRnFJQUJCK0FGcUVHRU5BQ0FBS0FLd0FTQUJFRXNnQW1wR0JFQWdBUkJMSVFNZ0FTQUJFRXRCQVhRUVVpQUJJQUVRWHhCU0lBQWdBeUFCUVFBUVVTSUNhallDc0FFTElBQkIvQUZxSWdNUWVpQUFRUWRxSUFCQkJtb2dBaUFBUWJBQmFpQUFMQURQQVNBQUxBRE9BU0FBUWNBQmFpQUFRUkJxSUFCQkRHb2dBRUVJYWlBQVFkQUJhaEM5QXcwQUlBTVFnUUVhREFFTEN3SkFJQUJCd0FGcUVFdEZEUUFnQUMwQUIwRUJSdzBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3NBRWdCQkNyQkRrREFDQUFRY0FCYWlBQVFSQnFJQUFvQWd3Z0JCQ0tBU0FBUWZ3QmFpQUFRZmdCYWhCaEJFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBTDhBU0FCRUV3YUlBQkJ3QUZxRUV3YUlBQkJnQUpxSkFBTHVBTUFJd0JCZ0FKcklnQWtBQ0FBSUFJMkF2Z0JJQUFnQVRZQy9BRWdBRUhBQVdvZ0F5QUFRZEFCYWlBQVFjOEJhaUFBUWM0QmFoQytBeUFBUWJRQmFoQmFJZ0VnQVJCZkVGSWdBQ0FCUVFBUVVTSUNOZ0t3QVNBQUlBQkJFR28yQWd3Z0FFRUFOZ0lJSUFCQkFUb0FCeUFBUWNVQU9nQUdBMEFDUUNBQVFmd0JhaUFBUWZnQmFoQmhEUUFnQUNnQ3NBRWdBUkJMSUFKcVJnUkFJQUVRU3lFRElBRWdBUkJMUVFGMEVGSWdBU0FCRUY4UVVpQUFJQU1nQVVFQUVGRWlBbW8yQXJBQkN5QUFRZndCYWlJREVIb2dBRUVIYWlBQVFRWnFJQUlnQUVHd0FXb2dBQ3dBendFZ0FDd0F6Z0VnQUVIQUFXb2dBRUVRYWlBQVFReHFJQUJCQ0dvZ0FFSFFBV29RdlFNTkFDQURFSUVCR2d3QkN3c0NRQ0FBUWNBQmFoQkxSUTBBSUFBdEFBZEJBVWNOQUNBQUtBSU1JZ01nQUVFUWFtdEJud0ZLRFFBZ0FDQURRUVJxTmdJTUlBTWdBQ2dDQ0RZQ0FBc2dCU0FDSUFBb0FyQUJJQVFRckFRNEFnQWdBRUhBQVdvZ0FFRVFhaUFBS0FJTUlBUVFpZ0VnQUVIOEFXb2dBRUg0QVdvUVlRUkFJQVFnQkNnQ0FFRUNjallDQUFzZ0FDZ0MvQUVnQVJCTUdpQUFRY0FCYWhCTUdpQUFRWUFDYWlRQUM0NERBUUYvSXdCQmdBSnJJZ0FrQUNBQUlBSTJBdmdCSUFBZ0FUWUMvQUVnQXhERUFTRUdJQUJCeEFGcUlBTWdBRUgzQVdvUXF3SWdBRUc0QVdvUVdpSUJJQUVRWHhCU0lBQWdBVUVBRUZFaUFqWUN0QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQU5BQWtBZ0FFSDhBV29nQUVINEFXb1FZUTBBSUFBb0FyUUJJQUVRU3lBQ2FrWUVRQ0FCRUVzaEF5QUJJQUVRUzBFQmRCQlNJQUVnQVJCZkVGSWdBQ0FESUFGQkFCQlJJZ0pxTmdLMEFRc2dBRUg4QVdvaUF4QjZJQVlnQWlBQVFiUUJhaUFBUVFocUlBQXNBUGNCSUFCQnhBRnFJQUJCRUdvZ0FFRU1ha0hRaUFRUWpRSU5BQ0FERUlFQkdnd0JDd3NDUUNBQVFjUUJhaEJMUlEwQUlBQW9BZ3dpQXlBQVFSQnFhMEdmQVVvTkFDQUFJQU5CQkdvMkFnd2dBeUFBS0FJSU5nSUFDeUFGSUFJZ0FDZ0N0QUVnQkNBR0VLMEVOd01BSUFCQnhBRnFJQUJCRUdvZ0FDZ0NEQ0FFRUlvQklBQkIvQUZxSUFCQitBRnFFR0VFUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQXZ3QklBRVFUQm9nQUVIRUFXb1FUQm9nQUVHQUFtb2tBQXVPQXdFQmZ5TUFRWUFDYXlJQUpBQWdBQ0FDTmdMNEFTQUFJQUUyQXZ3QklBTVF4QUVoQmlBQVFjUUJhaUFESUFCQjl3RnFFS3NDSUFCQnVBRnFFRm9pQVNBQkVGOFFVaUFBSUFGQkFCQlJJZ0kyQXJRQklBQWdBRUVRYWpZQ0RDQUFRUUEyQWdnRFFBSkFJQUJCL0FGcUlBQkIrQUZxRUdFTkFDQUFLQUswQVNBQkVFc2dBbXBHQkVBZ0FSQkxJUU1nQVNBQkVFdEJBWFFRVWlBQklBRVFYeEJTSUFBZ0F5QUJRUUFRVVNJQ2FqWUN0QUVMSUFCQi9BRnFJZ01RZWlBR0lBSWdBRUcwQVdvZ0FFRUlhaUFBTEFEM0FTQUFRY1FCYWlBQVFSQnFJQUJCREdwQjBJZ0VFSTBDRFFBZ0F4Q0JBUm9NQVFzTEFrQWdBRUhFQVdvUVMwVU5BQ0FBS0FJTUlnTWdBRUVRYW10Qm53RktEUUFnQUNBRFFRUnFOZ0lNSUFNZ0FDZ0NDRFlDQUFzZ0JTQUNJQUFvQXJRQklBUWdCaEN3QkRzQkFDQUFRY1FCYWlBQVFSQnFJQUFvQWd3Z0JCQ0tBU0FBUWZ3QmFpQUFRZmdCYWhCaEJFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBTDhBU0FCRUV3YUlBQkJ4QUZxRUV3YUlBQkJnQUpxSkFBTGpnTUJBWDhqQUVHQUFtc2lBQ1FBSUFBZ0FqWUMrQUVnQUNBQk5nTDhBU0FERU1RQklRWWdBRUhFQVdvZ0F5QUFRZmNCYWhDckFpQUFRYmdCYWhCYUlnRWdBUkJmRUZJZ0FDQUJRUUFRVVNJQ05nSzBBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlBMEFDUUNBQVFmd0JhaUFBUWZnQmFoQmhEUUFnQUNnQ3RBRWdBUkJMSUFKcVJnUkFJQUVRU3lFRElBRWdBUkJMUVFGMEVGSWdBU0FCRUY4UVVpQUFJQU1nQVVFQUVGRWlBbW8yQXJRQkN5QUFRZndCYWlJREVIb2dCaUFDSUFCQnRBRnFJQUJCQ0dvZ0FDd0E5d0VnQUVIRUFXb2dBRUVRYWlBQVFReHFRZENJQkJDTkFnMEFJQU1RZ1FFYURBRUxDd0pBSUFCQnhBRnFFRXRGRFFBZ0FDZ0NEQ0lESUFCQkVHcHJRWjhCU2cwQUlBQWdBMEVFYWpZQ0RDQURJQUFvQWdnMkFnQUxJQVVnQWlBQUtBSzBBU0FFSUFZUXNRUTNBd0FnQUVIRUFXb2dBRUVRYWlBQUtBSU1JQVFRaWdFZ0FFSDhBV29nQUVINEFXb1FZUVJBSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dBQ2dDL0FFZ0FSQk1HaUFBUWNRQmFoQk1HaUFBUVlBQ2FpUUFDNDREQVFGL0l3QkJnQUpySWdBa0FDQUFJQUkyQXZnQklBQWdBVFlDL0FFZ0F4REVBU0VHSUFCQnhBRnFJQU1nQUVIM0FXb1Fxd0lnQUVHNEFXb1FXaUlCSUFFUVh4QlNJQUFnQVVFQUVGRWlBallDdEFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUg4QVdvZ0FFSDRBV29RWVEwQUlBQW9BclFCSUFFUVN5QUNha1lFUUNBQkVFc2hBeUFCSUFFUVMwRUJkQkJTSUFFZ0FSQmZFRklnQUNBRElBRkJBQkJSSWdKcU5nSzBBUXNnQUVIOEFXb2lBeEI2SUFZZ0FpQUFRYlFCYWlBQVFRaHFJQUFzQVBjQklBQkJ4QUZxSUFCQkVHb2dBRUVNYWtIUWlBUVFqUUlOQUNBREVJRUJHZ3dCQ3dzQ1FDQUFRY1FCYWhCTFJRMEFJQUFvQWd3aUF5QUFRUkJxYTBHZkFVb05BQ0FBSUFOQkJHbzJBZ3dnQXlBQUtBSUlOZ0lBQ3lBRklBSWdBQ2dDdEFFZ0JDQUdFTElFTmdJQUlBQkJ4QUZxSUFCQkVHb2dBQ2dDRENBRUVJb0JJQUJCL0FGcUlBQkIrQUZxRUdFRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0F2d0JJQUVRVEJvZ0FFSEVBV29RVEJvZ0FFR0FBbW9rQUF2dEFRRUJmeU1BUVNCcklnWWtBQ0FHSUFFMkFod0NRQ0FES0FJRVFRRnhSUVJBSUFaQmZ6WUNBQ0FBSUFFZ0FpQURJQVFnQmlBQUtBSUFLQUlRRVFrQUlRRUNRQUpBQWtBZ0JpZ0NBQTRDQUFFQ0N5QUZRUUE2QUFBTUF3c2dCVUVCT2dBQURBSUxJQVZCQVRvQUFDQUVRUVEyQWdBTUFRc2dCaUFERUZ3Z0JoQ1ZBU0VCSUFZUVZDQUdJQU1RWENBR0VJNENJUUFnQmhCVUlBWWdBQkN2QVNBR1FReHlJQUFRcmdFZ0JTQUdRUnhxSUFJZ0JpQUdRUmhxSWdNZ0FTQUVRUUVRM2dJZ0JrWTZBQUFnQmlnQ0hDRUJBMEFnQTBFTWF4Qk1JZ01nQmtjTkFBc0xJQVpCSUdva0FDQUJDMEFCQVg5QkFDRUFBMzhnQVNBQ1JnUi9JQUFGSUFFb0FnQWdBRUVFZEdvaUFFR0FnSUNBZjNFaUEwRVlkaUFEY2lBQWN5RUFJQUZCQkdvaEFRd0JDd3NMR3dBakFFRVFheUlCSkFBZ0FDQUNJQU1RdGdRZ0FVRVFhaVFBQzFRQkFuOENRQU5BSUFNZ0JFY0VRRUYvSVFBZ0FTQUNSZzBDSUFFb0FnQWlCU0FES0FJQUlnWklEUUlnQlNBR1NnUkFRUUVQQlNBRFFRUnFJUU1nQVVFRWFpRUJEQUlMQUFzTElBRWdBa2NoQUFzZ0FBdEFBUUYvUVFBaEFBTi9JQUVnQWtZRWZ5QUFCU0FCTEFBQUlBQkJCSFJxSWdCQmdJQ0FnSDl4SWdOQkdIWWdBM0lnQUhNaEFDQUJRUUZxSVFFTUFRc0xDeHNBSXdCQkVHc2lBU1FBSUFBZ0FpQURFT01FSUFGQkVHb2tBQXRlQVFOL0lBRWdCQ0FEYTJvaEJRSkFBMEFnQXlBRVJ3UkFRWDhoQUNBQklBSkdEUUlnQVN3QUFDSUdJQU1zQUFBaUIwZ05BaUFHSUFkS0JFQkJBUThGSUFOQkFXb2hBeUFCUVFGcUlRRU1BZ3NBQ3dzZ0FpQUZSeUVBQ3lBQUM1a0NBUVYvSXdCQklHc2lBaVFBQW44Q1FBSkFJQUZCZnhDcEFRMEFJQUlnQVRZQ0ZDQUFMUUFzUVFGR0JFQUNmeUFBS0FJZ0lnQW9Ba3hCQUVnRVFDQUJJQUFRMEFRTUFRc2dBQkNGQVNBQklBQVEwQVFoQkFSQUlBQVFoQUVMSUFRTFFYOUdEUUlNQVFzZ0FpQUNRUmhxSWdVMkFoQWdBa0VnYWlFR0lBSkJGR29oQXdOQUlBQW9BaVFnQUNnQ0tDQURJQVVnQWtFTWFpQUNRUmhxSUFZZ0FrRVFhaERtQWlFRUlBSW9BZ3dnQTBZTkFpQUVRUU5HQkVBZ0EwRUJRUUVnQUNnQ0lCQzNBVUVCUmcwQ0RBTUxJQVJCQVVzTkFpQUNRUmhxSWdOQkFTQUNLQUlRSUFOcklnTWdBQ2dDSUJDM0FTQURSdzBDSUFJb0Fnd2hBeUFFUVFGR0RRQUxDeUFCRU9JRURBRUxRWDhMSUFKQklHb2tBQXRtQVFGL0FrQWdBQzBBTEVVRVFDQUNRUUFnQWtFQVNoc2hBZ05BSUFJZ0EwWU5BaUFBSUFFb0FnQWdBQ2dDQUNnQ05CRURBRUYvUmdSQUlBTVBCU0FCUVFScUlRRWdBMEVCYWlFRERBRUxBQXNBQ3lBQlFRUWdBaUFBS0FJZ0VMY0JJUUlMSUFJTEpnQWdBQ0FBS0FJQUtBSVlFUUFBR2lBQUlBRVF3Z01pQVRZQ0pDQUFJQUVRbEFJNkFDd0xvUUlCQW44akFFRWdheUlDSkFBQ1FDQUJRWDhRcVFFRVFDQUFMUUEwRFFFZ0FDQUFLQUl3SWdGQmZ4Q3BBVUVCY3pvQU5Bd0JDeUFBTFFBMElRTUNRQUpBQWtBZ0FDMEFOVVVFUUNBRFFRRnhEUUVNQXdzZ0EwRUJjU0lEQkVBZ0FDZ0NNQ0FBS0FJZ0VNRUVEUU1NQWdzZ0EwVU5BZ3NnQWlBQUtBSXdOZ0lRQWtBQ1FDQUFLQUlrSUFBb0FpZ2dBa0VRYWlBQ1FSUnFJZ01nQWtFTWFpQUNRUmhxSUFKQklHb2dBeERtQWtFQmF3NERBZ0lBQVFzZ0FDZ0NNQ0VESUFJZ0FrRVphallDRkNBQ0lBTTZBQmdMQTBBZ0FpZ0NGQ0lESUFKQkdHcE5EUUlnQWlBRFFRRnJJZ00yQWhRZ0F5d0FBQ0FBS0FJZ0VKQUNRWDlIRFFBTEMwRi9JUUVNQVFzZ0FFRUJPZ0EwSUFBZ0FUWUNNQXNnQWtFZ2FpUUFJQUVMQ1FBZ0FFRUJFTUlFQ3drQUlBQkJBQkRDQkFzekFDQUFJQUVRd2dNaUFUWUNKQ0FBSUFFUXNBSTJBaXdnQUNBQUtBSWtFSlFDT2dBMUlBQW9BaXhCQ1U0RVFCQjFBQXNMbEFJQkJYOGpBRUVnYXlJQ0pBQUNmd0pBQWtBZ0FVRi9FS2tCRFFBZ0FpQUJ3Q0lET2dBWElBQXRBQ3hCQVVZRVFDQUFLQUlnSVFRakFFRVFheUlBSkFBZ0FDQURPZ0FQSUFCQkQycEJBVUVCSUFRUXR3RWdBRUVRYWlRQVFRRkhEUUlNQVFzZ0FpQUNRUmhxSWdVMkFoQWdBa0VnYWlFR0lBSkJGMm9oQXdOQUlBQW9BaVFnQUNnQ0tDQURJQVVnQWtFTWFpQUNRUmhxSUFZZ0FrRVFhaERtQWlFRUlBSW9BZ3dnQTBZTkFpQUVRUU5HQkVBZ0EwRUJRUUVnQUNnQ0lCQzNBVUVCUmcwQ0RBTUxJQVJCQVVzTkFpQUNRUmhxSWdOQkFTQUNLQUlRSUFOcklnTWdBQ2dDSUJDM0FTQURSdzBDSUFJb0Fnd2hBeUFFUVFGR0RRQUxDeUFCRU9JRURBRUxRWDhMSUFKQklHb2tBQXRwQVFGL0FrQWdBQzBBTEVVRVFDQUNRUUFnQWtFQVNoc2hBZ05BSUFJZ0EwWU5BaUFBSUFFc0FBQVF0UUVnQUNnQ0FDZ0NOQkVEQUVGL1JnUkFJQU1QQlNBQlFRRnFJUUVnQTBFQmFpRUREQUVMQUFzQUN5QUJRUUVnQWlBQUtBSWdFTGNCSVFJTElBSUxKZ0FnQUNBQUtBSUFLQUlZRVFBQUdpQUFJQUVReHdNaUFUWUNKQ0FBSUFFUWxBSTZBQ3dMb2dJQkFuOGpBRUVnYXlJQ0pBQUNRQ0FCUVg4UXFRRUVRQ0FBTFFBMERRRWdBQ0FBS0FJd0lnRkJmeENwQVVFQmN6b0FOQXdCQ3lBQUxRQTBJUU1DUUFKQUFrQWdBQzBBTlVVRVFDQURRUUZ4RFFFTUF3c2dBMEVCY1NJREJFQWdBQ2dDTUNBQUtBSWdFTWNFRFFNTUFnc2dBMFVOQWdzZ0FpQUFLQUl3d0RvQUV3SkFBa0FnQUNnQ0pDQUFLQUlvSUFKQkUyb2dBa0VVYWlJRElBSkJER29nQWtFWWFpQUNRU0JxSUFNUTVnSkJBV3NPQXdJQ0FBRUxJQUFvQWpBaEF5QUNJQUpCR1dvMkFoUWdBaUFET2dBWUN3TkFJQUlvQWhRaUF5QUNRUmhxVFEwQ0lBSWdBMEVCYXlJRE5nSVVJQU1zQUFBZ0FDZ0NJQkNRQWtGL1J3MEFDd3RCZnlFQkRBRUxJQUJCQVRvQU5DQUFJQUUyQWpBTElBSkJJR29rQUNBQkN3a0FJQUJCQVJESUJBc0pBQ0FBUVFBUXlBUUxNd0FnQUNBQkVNY0RJZ0UyQWlRZ0FDQUJFTEFDTmdJc0lBQWdBQ2dDSkJDVUFqb0FOU0FBS0FJc1FRbE9CRUFRZFFBTEN4NEFRY2lIQlJEdEFrR1lpZ1VRN1FKQm5JZ0ZFTXNEUWV5S0JSRExBd3NKQUNBQUVKRUNFRWdMdEFFQkJIOGpBRUVRYXlJRkpBQURRQUpBSUFJZ0Ewd05BQ0FBS0FJWUlnUWdBQ2dDSENJR1R3UkFJQUFnQVNnQ0FDQUFLQUlBS0FJMEVRTUFRWDlHRFFFZ0EwRUJhaUVESUFGQkJHb2hBUVVnQlNBR0lBUnJRUUoxTmdJTUlBVWdBaUFEYXpZQ0NDQUZRUXhxSUFWQkNHb1FsZ0loQkNBQUtBSVlJQUVnQkNnQ0FDSUVFTVVCSUFBZ0JFRUNkQ0lHSUFBb0FoaHFOZ0lZSUFNZ0JHb2hBeUFCSUFacUlRRUxEQUVMQ3lBRlFSQnFKQUFnQXdzc0FDQUFJQUFvQWdBb0FpUVJBQUJCZjBZRVFFRi9Ed3NnQUNBQUtBSU1JZ0JCQkdvMkFnd2dBQ2dDQUF2S0FRRUVmeU1BUVJCcklnUWtBQU5BQWtBZ0FpQUZUQTBBQW44Z0FDZ0NEQ0lESUFBb0FoQWlCa2tFUUNBRVFmLy8vLzhITmdJTUlBUWdCaUFEYTBFQ2RUWUNDQ0FFSUFJZ0JXczJBZ1FnQkVFTWFpQUVRUWhxSUFSQkJHb1FsZ0lRbGdJaEF5QUJJQUFvQWd3Z0F5Z0NBQ0lERU1VQklBQWdBMEVDZENJR0lBQW9BZ3hxTmdJTUlBRWdCbW9NQVFzZ0FDQUFLQUlBS0FJb0VRQUFJZ05CZjBZTkFTQUJJQU0yQWdCQkFTRURJQUZCQkdvTElRRWdBeUFGYWlFRkRBRUxDeUFFUVJCcUpBQWdCUXNNQUNBQUVNd0RHaUFBRUVnTHJ3RUJCSDhqQUVFUWF5SUZKQUFEUUFKQUlBSWdCRXdOQUNBQUtBSVlJZ01nQUNnQ0hDSUdUd1JBSUFBZ0FTd0FBQkMxQVNBQUtBSUFLQUkwRVFNQVFYOUdEUUVnQkVFQmFpRUVJQUZCQVdvaEFRVWdCU0FHSUFOck5nSU1JQVVnQWlBRWF6WUNDQ0FGUVF4cUlBVkJDR29RbGdJaEF5QUFLQUlZSUFFZ0F5Z0NBQ0lERUxZQklBQWdBeUFBS0FJWWFqWUNHQ0FESUFScUlRUWdBU0FEYWlFQkN3d0JDd3NnQlVFUWFpUUFJQVFMTHdBZ0FDQUFLQUlBS0FJa0VRQUFRWDlHQkVCQmZ3OExJQUFnQUNnQ0RDSUFRUUZxTmdJTUlBQXNBQUFRdFFFTHZnRUJCSDhqQUVFUWF5SUVKQUFEUUFKQUlBSWdCVXdOQUFKQUlBQW9BZ3dpQXlBQUtBSVFJZ1pKQkVBZ0JFSC8vLy8vQnpZQ0RDQUVJQVlnQTJzMkFnZ2dCQ0FDSUFWck5nSUVJQVJCREdvZ0JFRUlhaUFFUVFScUVKWUNFSllDSVFNZ0FTQUFLQUlNSUFNb0FnQWlBeEMyQVNBQUlBQW9BZ3dnQTJvMkFnd01BUXNnQUNBQUtBSUFLQUlvRVFBQUlnTkJmMFlOQVNBQklBUEFPZ0FBUVFFaEF3c2dBU0FEYWlFQklBTWdCV29oQlF3QkN3c2dCRUVRYWlRQUlBVUxEQUFnQUJEU0F4b2dBQkJJQ3dvQUlBQWtDU0FCSkFnTFZBRUNmeUFCSUFBb0FsUWlBU0FCUVFBZ0FrR0FBbW9pQXhDN0FpSUVJQUZySUFNZ0JCc2lBeUFDSUFJZ0Ewc2JJZ0lRYXhvZ0FDQUJJQU5xSWdNMkFsUWdBQ0FETmdJSUlBQWdBU0FDYWpZQ0JDQUNDNmdCQVFWL0lBQW9BbFFpQXlnQ0FDRUZJQU1vQWdRaUJDQUFLQUlVSUFBb0Fod2lCMnNpQmlBRUlBWkpHeUlHQkVBZ0JTQUhJQVlRYXhvZ0F5QURLQUlBSUFacUlnVTJBZ0FnQXlBREtBSUVJQVpySWdRMkFnUUxJQVFnQWlBQ0lBUkxHeUlFQkVBZ0JTQUJJQVFRYXhvZ0F5QURLQUlBSUFScUlnVTJBZ0FnQXlBREtBSUVJQVJyTmdJRUN5QUZRUUE2QUFBZ0FDQUFLQUlzSWdFMkFod2dBQ0FCTmdJVUlBSUxLUUFnQVNBQktBSUFRUWRxUVhoeElnRkJFR28yQWdBZ0FDQUJLUU1BSUFFcEF3Z1ExQU01QXdBTHBoZ0RFbjhCZkFOK0l3QkJzQVJySWdza0FDQUxRUUEyQWl3Q1FDQUJ2U0laUWdCVEJFQkJBU0VRUWZIQ0FTRVVJQUdhSWdHOUlSa01BUXNnQkVHQUVIRUVRRUVCSVJCQjlNSUJJUlFNQVF0Qjk4SUJRZkxDQVNBRVFRRnhJaEFiSVJRZ0VFVWhGd3NDUUNBWlFvQ0FnSUNBZ0lENC93Q0RRb0NBZ0lDQWdJRDQvd0JSQkVBZ0FFRWdJQUlnRUVFRGFpSUdJQVJCLy85N2NSQ1BBU0FBSUJRZ0VCQ0hBU0FBUVlYWEFVR2Y5UUVnQlVFZ2NTSURHMEhVM0FGQncvZ0JJQU1iSUFFZ0FXSWJRUU1RaHdFZ0FFRWdJQUlnQmlBRVFZREFBSE1RandFZ0FpQUdJQUlnQmtvYklRME1BUXNnQzBFUWFpRVJBa0FDZndKQUlBRWdDMEVzYWhDUkJTSUJJQUdnSWdGRUFBQUFBQUFBQUFCaUJFQWdDeUFMS0FJc0lnWkJBV3MyQWl3Z0JVRWdjaUlWUWVFQVJ3MEJEQU1MSUFWQklISWlGVUhoQUVZTkFpQUxLQUlzSVF4QkJpQURJQU5CQUVnYkRBRUxJQXNnQmtFZGF5SU1OZ0lzSUFGRUFBQUFBQUFBc0VHaUlRRkJCaUFESUFOQkFFZ2JDeUVLSUF0Qk1HcEJvQUpCQUNBTVFRQk9HMm9pRGlFSEEwQWdCd0ovSUFGRUFBQUFBQUFBOEVGaklBRkVBQUFBQUFBQUFBQm1jUVJBSUFHckRBRUxRUUFMSWdNMkFnQWdCMEVFYWlFSElBRWdBN2loUkFBQUFBQmx6YzFCb2lJQlJBQUFBQUFBQUFBQVlnMEFDd0pBSUF4QkFFd0VRQ0FNSVFrZ0J5RUdJQTRoQ0F3QkN5QU9JUWdnRENFSkEwQkJIU0FKSUFsQkhVOGJJUU1DUUNBSFFRUnJJZ1lnQ0VrTkFDQURyU0ViUWdBaEdRTkFJQVlnR1VMLy8vLy9ENE1nQmpVQ0FDQWJobndpR2lBYVFvQ1U2OXdEZ0NJWlFvQ1U2OXdEZm4wK0FnQWdCa0VFYXlJR0lBaFBEUUFMSUJwQ2dKVHIzQU5VRFFBZ0NFRUVheUlJSUJrK0FnQUxBMEFnQ0NBSElnWkpCRUFnQmtFRWF5SUhLQUlBUlEwQkN3c2dDeUFMS0FJc0lBTnJJZ2syQWl3Z0JpRUhJQWxCQUVvTkFBc0xJQWxCQUVnRVFDQUtRUmxxUVFsdVFRRnFJUklnRlVIbUFFWWhFd05BUVFsQkFDQUpheUlESUFOQkNVOGJJUTBDUUNBR0lBaE5CRUFnQ0NnQ0FFVkJBblFoQnd3QkMwR0FsT3ZjQXlBTmRpRVdRWDhnRFhSQmYzTWhEMEVBSVFrZ0NDRUhBMEFnQnlBSEtBSUFJZ01nRFhZZ0NXbzJBZ0FnQXlBUGNTQVdiQ0VKSUFkQkJHb2lCeUFHU1EwQUN5QUlLQUlBUlVFQ2RDRUhJQWxGRFFBZ0JpQUpOZ0lBSUFaQkJHb2hCZ3NnQ3lBTEtBSXNJQTFxSWdrMkFpd2dEaUFISUFocUlnZ2dFeHNpQXlBU1FRSjBhaUFHSUFZZ0EydEJBblVnRWtvYklRWWdDVUVBU0EwQUN3dEJBQ0VKQWtBZ0JpQUlUUTBBSUE0Z0NHdEJBblZCQ1d3aENVRUtJUWNnQ0NnQ0FDSURRUXBKRFFBRFFDQUpRUUZxSVFrZ0F5QUhRUXBzSWdkUERRQUxDeUFLSUFsQkFDQVZRZVlBUnh0cklCVkI1d0JHSUFwQkFFZHhheUlESUFZZ0RtdEJBblZCQ1d4QkNXdElCRUFnQzBFd2FrR0VZRUdrWWlBTVFRQklHMm9nQTBHQXlBQnFJZ3hCQ1cwaUEwRUNkR29oRFVFS0lRY2dEQ0FEUVFsc2F5SURRUWRNQkVBRFFDQUhRUXBzSVFjZ0EwRUJhaUlEUVFoSERRQUxDd0pBSUEwb0FnQWlEQ0FNSUFkdUloSWdCMnhySWc5RklBMUJCR29pQXlBR1JuRU5BQUpBSUJKQkFYRkZCRUJFQUFBQUFBQUFRRU1oQVNBSFFZQ1U2OXdEUnlBSUlBMVBjZzBCSUExQkJHc3RBQUJCQVhGRkRRRUxSQUVBQUFBQUFFQkRJUUVMUkFBQUFBQUFBT0EvUkFBQUFBQUFBUEEvUkFBQUFBQUFBUGcvSUFNZ0JrWWJSQUFBQUFBQUFQZy9JQThnQjBFQmRpSURSaHNnQXlBUFN4c2hHQUpBSUJjTkFDQVVMUUFBUVMxSERRQWdHSm9oR0NBQm1pRUJDeUFOSUF3Z0Qyc2lBellDQUNBQklCaWdJQUZoRFFBZ0RTQURJQWRxSWdNMkFnQWdBMEdBbE92Y0EwOEVRQU5BSUExQkFEWUNBQ0FJSUExQkJHc2lEVXNFUUNBSVFRUnJJZ2hCQURZQ0FBc2dEU0FOS0FJQVFRRnFJZ00yQWdBZ0EwSC9rK3ZjQTBzTkFBc0xJQTRnQ0d0QkFuVkJDV3doQ1VFS0lRY2dDQ2dDQUNJRFFRcEpEUUFEUUNBSlFRRnFJUWtnQXlBSFFRcHNJZ2RQRFFBTEN5QU5RUVJxSWdNZ0JpQURJQVpKR3lFR0N3TkFJQVlpRENBSVRTSUhSUVJBSUFaQkJHc2lCaWdDQUVVTkFRc0xBa0FnRlVIbkFFY0VRQ0FFUVFoeElSTU1BUXNnQ1VGL2MwRi9JQXBCQVNBS0d5SUdJQWxLSUFsQmUwcHhJZ01iSUFacUlRcEJmMEYrSUFNYklBVnFJUVVnQkVFSWNTSVREUUJCZHlFR0FrQWdCdzBBSUF4QkJHc29BZ0FpRDBVTkFFRUtJUU5CQUNFR0lBOUJDbkFOQUFOQUlBWWlCMEVCYWlFR0lBOGdBMEVLYkNJRGNFVU5BQXNnQjBGL2N5RUdDeUFNSUE1clFRSjFRUWxzSVFNZ0JVRmZjVUhHQUVZRVFFRUFJUk1nQ2lBRElBWnFRUWxySWdOQkFDQURRUUJLR3lJRElBTWdDa29iSVFvTUFRdEJBQ0VUSUFvZ0F5QUphaUFHYWtFSmF5SURRUUFnQTBFQVNoc2lBeUFESUFwS0d5RUtDMEYvSVEwZ0NrSDkvLy8vQjBIKy8vLy9CeUFLSUJOeUlnOGJTZzBCSUFvZ0QwRUFSMnBCQVdvaEZnSkFJQVZCWDNFaUIwSEdBRVlFUUNBSklCWkIvLy8vL3dkelNnMERJQWxCQUNBSlFRQktHeUVHREFFTElCRWdDU0FKUVI5MUlnTnpJQU5yclNBUkVKb0NJZ1pyUVFGTUJFQURRQ0FHUVFGcklnWkJNRG9BQUNBUklBWnJRUUpJRFFBTEN5QUdRUUpySWhJZ0JUb0FBQ0FHUVFGclFTMUJLeUFKUVFCSUd6b0FBQ0FSSUJKcklnWWdGa0gvLy8vL0IzTktEUUlMSUFZZ0Ztb2lBeUFRUWYvLy8vOEhjMG9OQVNBQVFTQWdBaUFESUJCcUlna2dCQkNQQVNBQUlCUWdFQkNIQVNBQVFUQWdBaUFKSUFSQmdJQUVjeENQQVFKQUFrQUNRQ0FIUWNZQVJnUkFJQXRCRUdwQkNYSWhCU0FPSUFnZ0NDQU9TeHNpQXlFSUEwQWdDRFVDQUNBRkVKb0NJUVlDUUNBRElBaEhCRUFnQmlBTFFSQnFUUTBCQTBBZ0JrRUJheUlHUVRBNkFBQWdCaUFMUVJCcVN3MEFDd3dCQ3lBRklBWkhEUUFnQmtFQmF5SUdRVEE2QUFBTElBQWdCaUFGSUFackVJY0JJQWhCQkdvaUNDQU9UUTBBQ3lBUEJFQWdBRUhlaHdKQkFSQ0hBUXNnQ2tFQVRDQUlJQXhQY2cwQkEwQWdDRFVDQUNBRkVKb0NJZ1lnQzBFUWFrc0VRQU5BSUFaQkFXc2lCa0V3T2dBQUlBWWdDMEVRYWtzTkFBc0xJQUFnQmtFSklBb2dDa0VKVGhzUWh3RWdDa0VKYXlFR0lBaEJCR29pQ0NBTVR3MERJQXBCQ1VvZ0JpRUtEUUFMREFJTEFrQWdDa0VBU0EwQUlBd2dDRUVFYWlBSUlBeEpHeUVESUF0QkVHcEJDWEloRENBSUlRY0RRQ0FNSUFjMUFnQWdEQkNhQWlJR1JnUkFJQVpCQVdzaUJrRXdPZ0FBQ3dKQUlBY2dDRWNFUUNBR0lBdEJFR3BORFFFRFFDQUdRUUZySWdaQk1Eb0FBQ0FHSUF0QkVHcExEUUFMREFFTElBQWdCa0VCRUljQklBWkJBV29oQmlBS0lCTnlSUTBBSUFCQjNvY0NRUUVRaHdFTElBQWdCaUFNSUFacklnVWdDaUFGSUFwSUd4Q0hBU0FLSUFWcklRb2dCMEVFYWlJSElBTlBEUUVnQ2tFQVRnMEFDd3NnQUVFd0lBcEJFbXBCRWtFQUVJOEJJQUFnRWlBUklCSnJFSWNCREFJTElBb2hCZ3NnQUVFd0lBWkJDV3BCQ1VFQUVJOEJDeUFBUVNBZ0FpQUpJQVJCZ01BQWN4Q1BBU0FDSUFrZ0FpQUpTaHNoRFF3QkN5QVVJQVZCR25SQkgzVkJDWEZxSVFrQ1FDQURRUXRMRFFCQkRDQURheUVHUkFBQUFBQUFBREJBSVJnRFFDQVlSQUFBQUFBQUFEQkFvaUVZSUFaQkFXc2lCZzBBQ3lBSkxRQUFRUzFHQkVBZ0dDQUJtaUFZb2FDYUlRRU1BUXNnQVNBWW9DQVlvU0VCQ3lBUklBc29BaXdpQnlBSFFSOTFJZ1p6SUFacnJTQVJFSm9DSWdaR0JFQWdCa0VCYXlJR1FUQTZBQUFnQ3lnQ0xDRUhDeUFRUVFKeUlRb2dCVUVnY1NFTUlBWkJBbXNpRGlBRlFROXFPZ0FBSUFaQkFXdEJMVUVySUFkQkFFZ2JPZ0FBSUFSQkNIRkZJQU5CQUV4eElRZ2dDMEVRYWlFSEEwQWdCeUlGQW44Z0FabEVBQUFBQUFBQTRFRmpCRUFnQWFvTUFRdEJnSUNBZ0hnTElnWkJnTndEYWkwQUFDQU1jam9BQUNBQklBYTNvVVFBQUFBQUFBQXdRS0lpQVVRQUFBQUFBQUFBQUdFZ0NIRWdCVUVCYWlJSElBdEJFR3ByUVFGSGNrVUVRQ0FGUVM0NkFBRWdCVUVDYWlFSEN5QUJSQUFBQUFBQUFBQUFZZzBBQzBGL0lRMGdBMEg5Ly8vL0J5QUtJQkVnRG1zaUNHb2lCbXRLRFFBZ0FFRWdJQUlnQmlBRFFRSnFJQWNnQzBFUWFpSUZheUlISUFkQkFtc2dBMGdiSUFjZ0F4c2lBMm9pQmlBRUVJOEJJQUFnQ1NBS0VJY0JJQUJCTUNBQ0lBWWdCRUdBZ0FSekVJOEJJQUFnQlNBSEVJY0JJQUJCTUNBRElBZHJRUUJCQUJDUEFTQUFJQTRnQ0JDSEFTQUFRU0FnQWlBR0lBUkJnTUFBY3hDUEFTQUNJQVlnQWlBR1Noc2hEUXNnQzBHd0JHb2tBQ0FOQ3lFQkFYOGpBeWdDZUNJQVFRSCtGd0lBSUFBUTZRTWdBRUVCUVFEK1NBSUFHZ3NoQVFKL0lBQVFnd0ZCQVdvaUFSQk5JZ0pGQkVCQkFBOExJQUlnQUNBQkVHc0xCQUJDQUFzRUFDTURDeFFBSUFCQkFCRDdBa0VEUmdSQUlBQVFnUU1MQzRjRUFRWi9Jd01pQVVFQk9nQW9JQUVnQURZQ1FDQUJRUUE2QUNrZ0FVRUIvaVVDZkVFQmF5SUFCRUFnQVVIOEFHb2hBZ05BSUFJZ0FFUUFBQUFBQUFEd2Z4RENBaG9nQXY0UUFnQWlBQTBBQ3dzZ0FTZ0NlQkN0QlFKQUlBRW9BbmdpQVA0UUFnQkZCRUFnQUJDd0JRd0JDMEhFeUFRUWNCb2dBRUhBeUFRMkFqZ2dBRUgweUFRb0FnQTJBalJCOU1nRUlBQTJBZ0FnQUNnQ05DQUFOZ0k0UWNUSUJCQnNHZ3NqQXlFQ0EwQWdBaWdDUkNJQUJFQWdBQ2dDQkNBQUtBSUFJQUlnQUNnQ0NEWUNSQkVCQUF3QkN3dEJBQ0VDQWtBakF5SUFMUUFxUVFGeFJRMEFBMEJCa08wRUVPRURJQUFnQUMwQUtrSCtBWEU2QUNwQkFDRURBMEFnQTBFQ2RDSUZRY0R0Qkdvb0FnQWhCQ0FBS0FKSUlBVnFJZ1lvQWdBaEJTQUdRUUEyQWdBZ0JVVWdCRVZ5SUFSQm5BSkdja1VFUUVHUTdRUVErZ0lnQlNBRUVRRUFRWkR0QkJEaEF3c2dBMEVCYWlJRFFZQUJSdzBBQzBHUTdRUVErZ0lnQUMwQUtrRUJjVVVOQVNBQ1FRTkpJQUpCQVdvaEFnMEFDd3RCM09VRVFkemxCQ2dDQUVFQmF5SUFOZ0lBSUFCRkJFQkIyK1VFUVFBNkFBQUxFT1FESUFFb0Fnd2lBQ0FCS0FJSUlnSTJBZ2dnQWlBQU5nSU1JQUVnQVRZQ0NDQUJJQUUyQWd3UTR3TWpCVVVFUUVFQVFRQkJBRUVCRU1FRklBRkJJR29pQUVFQ1FRRVFlMEVEUmdSQUlBRVFKZzhMSUFBUTVRTWdBQkRRQVE4TFFRQVFBZ0FMRlFBZ0FDZ0NMQ0lBUVFCQmhBRVFVQm9nQUJCSUMrTDZBUVFwZjFWOUczd0RmaU1BUVNCcklpUWtBQUpBQWtBQ1FDQUFRUUFnQVJ0RkJFQkJBRUVEUWNMV0FFRUFFRTRNQVFzZ0FDZ0NFQ0VNSUFBb0Fnd2hFd0pBSUFBb0FoUWlLRUVCUmcwQUFuOGdBU0VHQWtBQ1FBSkFBa0FDUUFKQUFrQWdLRUVCYXc0RkFBSUVBd0VFQ3lBa0lCTTJBaHdnSkNBTU5nSVlJQXdnRTJ3aUFoQk5JZ0ZGRFFVZ0FTQUdJQUw4Q2dBQURBUUxJQ1FnRTBFRGJTSURRUUYwSWdrMkFod2dKQ0FNUVFOdElnSkJBWFFpQVRZQ0dDQUJJQWxzRUUwaUFVVU5CQ0FDUVFBZ0FrRUFTaHNoQ2lBRFFRQWdBMEVBU2hzaEZ5QUJJZ0loQkFOQUlBb2dEa1lOQkNBQ0lBbHFJUUlnQmlBT1FRTnNJZ01nRTJ4cUlRZ2dCaUFEUVFKcUlCTnNhaUVVSUFZZ0EwRUJhaUFUYkdvaEJVRUFJUU1EUUNBRElCZEhCRUFnQkNBSUxRQUFJQWd0QUFGQkFYWnFJQVV0QUFCQkFYWnFJQVV0QUFGQkFuWnFRUUowUVFsdU9nQUFJQUlnRkMwQUFDQUZMUUFCUVFKMklBVXRBQUJCQVhacWFpQVVMUUFCUVFGMmFrRUNkRUVKYmpvQUFDQUVJQWd0QUFJZ0NDMEFBVUVCZG1vZ0JTMEFBVUVDZG1vZ0JTMEFBa0VCZG1wQkFuUkJDVzQ2QUFFZ0FpQVVMUUFDSUFVdEFBSkJBWFlnQlMwQUFVRUNkbW9nRkMwQUFVRUJkbXBxUVFKMFFRbHVPZ0FCSUFOQkFXb2hBeUFVUVFOcUlSUWdCVUVEYWlFRklBaEJBMm9oQ0NBQ1FRSnFJUUlnQkVFQ2FpRUVEQUVMQ3lBT1FRRnFJUTRnQkNBSmFpRUVEQUFMQUFzZ0pDQVRRUUp0SWdRMkFod2dKQ0FNUVFKdElnSTJBaGdnQWlBRWJCQk5JZ0ZGRFFNZ0FrRUFJQUpCQUVvYklRb2dCRUVBSUFSQkFFb2JJUmNnQVNFQ0EwQWdBeUFLUmcwRElBWWdBMEVCZENJRUlCTnNhaUVGSUFZZ0JFRUJjaUFUYkdvaENFRUFJUlFEUUNBVUlCZEhCRUFnQWlBSUxRQUJJQWd0QUFBZ0JTMEFBU0FGTFFBQWFtcHFRUUoyT2dBQUlCUkJBV29oRkNBSVFRSnFJUWdnQlVFQ2FpRUZJQUpCQVdvaEFnd0JDd3NnQTBFQmFpRUREQUFMQUFzZ0pDQVRRUU50SWdRMkFod2dKQ0FNUVFOdElnSTJBaGdnQWlBRWJCQk5JZ0ZGRFFJZ0FrRUFJQUpCQUVvYklRb2dCRUVBSUFSQkFFb2JJUmNnQVNFRUEwQWdBeUFLUmcwQ0lBWWdBMEVEYkNJQ0lCTnNhaUVGSUFZZ0FrRUNhaUFUYkdvaENDQUdJQUpCQVdvZ0UyeHFJUlJCQUNFQ0EwQWdBaUFYUndSQUlBUWdDQzBBQWlBSUxRQUJJQWd0QUFBZ0ZDMEFBaUFVTFFBQklCUXRBQUFnQlMwQUFpQUZMUUFCSUFVdEFBQnFhbXBxYW1wcWFrRUpiam9BQUNBQ1FRRnFJUUlnQ0VFRGFpRUlJQlJCQTJvaEZDQUZRUU5xSVFVZ0JFRUJhaUVFREFFTEN5QURRUUZxSVFNTUFBc0FDeUFrSUJOQkJHMGlBellDSENBa0lBeEJCRzBpQWpZQ0dDQUNJQU5zRUUwaUFVVU5BU0FDUVFBZ0FrRUFTaHNoQ2lBRFFRQWdBMEVBU2hzaEZ5QUJJUU1EUUNBS0lBNUdEUUVnQmlBT1FRSjBJZ0lnRTJ4cUlRVWdCaUFDUVFOeUlCTnNhaUVJSUFZZ0FrRUNjaUFUYkdvaEZDQUdJQUpCQVhJZ0UyeHFJUUpCQUNFRUEwQWdCQ0FYUndSQUlBTWdDQzBBQXlBSUxRQUNJQWd0QUFFZ0NDMEFBQ0FVTFFBRElCUXRBQUlnRkMwQUFTQVVMUUFBSUFJdEFBTWdBaTBBQWlBQ0xRQUJJQUl0QUFBZ0JTMEFBeUFGTFFBQ0lBVXRBQUVnQlMwQUFHcHFhbXBxYW1wcWFtcHFhbXBxYWtFRWRqb0FBQ0FFUVFGcUlRUWdDRUVFYWlFSUlCUkJCR29oRkNBQ1FRUnFJUUlnQlVFRWFpRUZJQU5CQVdvaEF3d0JDd3NnRGtFQmFpRU9EQUFMQUFzZ0FRd0JDMEVBUVFOQjlRMUJBQkJPUVFFUUFnQUxJZ0VOQUF3QkN5QUFLQUlBSXdCQklHc2lLU1FBSUNrZ0FVRUJJQk1nRENBVEVQOEZJU1VvQWdBb0FnQWhDeU1BUVNCcklpb2tBQ0FMUWR3QWFpRUtBa0FDUUNBTEtBSmdJZ1FnQ3lnQ1pFWUVRQ0FsS0FJRUlRTU1BUXNnQkNnQ0JDSUNJQ1VvQWdRaUEwY05BQ0FDSVFNZ0JDZ0NDQ0FsS0FJSVJnMEJDeUFsS0FJSUlRUkJBQ0VJQTBBZ0EwRUlTQ0FFUVFoSWNrVUVRQ0FJUVFGcUlRZ2dCRUVCZFNFRUlBTkJBWFVoQXd3QkN3c2dKU2dDQkNFSklDVW9BZ2doRjBFQUlRVWdDa0x6aWRUOXc4ZXFuTUFBTndJWUlBcEJBellDRkNBS0lBZzJBaEFnQ2tFRWFpQUlRUU5zRU1ZRElBaEJBQ0FJUVFCS0d5RUdBMEFnQlNBR1J3UkFJQmNnQlhZaEJDQUpJQVYySVFOQkFDRUlBMEFnQ2lnQ0ZDSUNJQWhOQkVBZ0JVRUJhaUVGREFNRklBb29BZ1FnQWlBRmJFRUZkR29nQ0VFRmRHcEJBaUFESUFSQkFSRDhBeUFJUVFGcUlRZ01BUXNBQ3dBTEN3SkFJQWtnRjJ3aUNTQUtRU0JxSWd3b0FnUWdEQ2dDQUNJQ2EwRUJkU0lEU3dSQVFRQWhDQ01BUVNCcklnWWtBQUpBSUFrZ0Eyc2lGeUFNS0FJSUlBd29BZ1FpQW10QkFYVk5CRUFnRENnQ0JDSUVJQmRCQVhScUlRSURRQ0FDSUFSR0JFQWdEQ0FDTmdJRUJTQUVRUUE3QVFBZ0JFRUNhaUVFREFFTEN3d0JDeUFDSUF3b0FnQnJRUUYxSUJkcUlnTkJBRWdFUUVINjVBQVF1QUlBQzBILy8vLy9CeUFNS0FJSUlBd29BZ0JySWdJZ0F5QUNJQU5MR3lBQ1FmNy8vLzhIVHhzaEJDQU1LQUlFSUF3b0FnQnJRUUYxSVFNZ0JrRU1haUlDSUF4QkNHbzJBaEFnQWtFQU5nSU1JQVFFUUNBRVFRQklCRUFRNFFFQUN5QUVRUUYwRUdZaENBc2dBaUFJTmdJQUlBSWdDQ0FEUVFGMGFpSUROZ0lJSUFJZ0NDQUVRUUYwYWpZQ0RDQUNJQU0yQWdRZ0FpZ0NDQ0lGSUJkQkFYUnFJUU1EUUNBRElBVkhCRUFnQlVFQU93RUFJQVZCQW1vaEJRd0JDd3NnQWlBRE5nSUlJQUlvQWdRaENDQU1LQUlBSVFNZ0RDZ0NCQ0VGQTBBZ0F5QUZSd1JBSUFoQkFtc2lDQ0FGUVFKcklnVXZBUUE3QVFBTUFRc0xJQUlnQ0RZQ0JDQU1LQUlBSVFNZ0RDQUlOZ0lBSUFJZ0F6WUNCQ0FNS0FJRUlRTWdEQ0FDS0FJSU5nSUVJQUlnQXpZQ0NDQU1LQUlJSVFNZ0RDQUNLQUlNTmdJSUlBSWdBellDRENBQ0lBSW9BZ1EyQWdBZ0FpZ0NCQ0VESUFJb0FnZ2hCQU5BSUFNZ0JFY0VRQ0FDSUFSQkFtc2lCRFlDQ0F3QkN3c2dBaWdDQUNJREJFQWdBaWdDREJvZ0F4QklDd3NnQmtFZ2FpUUFEQUVMSUFNZ0NVc0VRQ0FNSUFJZ0NVRUJkR28yQWdRTEN5QUtRU3hxSUFrUThnRWdDa0U0YWlBSkVQSUJDeUFxUWRVZ0VKY0JBa0FDUUFKQUFrQUNRQ0FsS0FJQVFRRkdCRUFnSlNnQ0VFRUJSdzBCSUFvb0FoUWdDaWdDRUd3Z0NpZ0NDQ0FLS0FJRUlnSnJRUVYxUncwQ0lDVW9BZ1FnQWlnQ0JFY05BeUFsS0FJSUlBSW9BZ2hIRFFRZ0NpQUNJQ1VRMHdJZ0NpQUtLQUlFSWdKQklHb2dBaERUQWlBS0lBb29BZ1FpQWtGQWF5QUNRU0JxRU13R1FRRWhBd05BSUFNZ0NpZ0NFRThOQmlBS0tBSUVJQW9vQWhRZ0EyeEJCWFJxSWdJb0FoZ2hGQ0FDUVFocktBSUFJUWxCQUNFRUlBSkJIR3NvQWdBaURrRUJkQ0VYSUFKQkdHc29BZ0JCQVhZaEJpQU9RUUYySVFJRFFDQUVJQVpIQkVBZ0NTQUVJQmRzUVFKMGFpSUZJQTVCQW5ScUlRaEJBQ0VUQTBBZ0FpQVRSZ1JBSUFSQkFXb2hCQXdEQlNBVUlBVXFBZ0FnQlNvQ0JKSWdDQ29DQUpJZ0NDb0NCSkpEQUFDQVBwUTRBZ0FnQ0VFSWFpRUlJQVZCQ0dvaEJTQVRRUUZxSVJNZ0ZFRUVhaUVVREFFTEFBc0FDd3NnQ2lBS0tBSUVJQW9vQWhRZ0EyeEJCWFJxSWdKQklHb2dBaERUQWlBS0lBb29BZ1FnQ2lnQ0ZDQURiRUVGZEdvaUFrRkFheUFDUVNCcUVNd0dJQU5CQVdvaEF3d0FDd0FMUWZDSUJVSFVMUkJIUVo4U0VFZEJqQmtRUjBIS0FoQktRY2NkRUVkQnpqSVFSeEJKREFjTFFmQ0lCVUhhT1JCSFFaOFNFRWRCakJrUVIwSExBaEJLUWNjZEVFZEIyRHdRUnhCSkRBWUxRZkNJQlVHbHdnQVFSMEdmRWhCSFFZd1pFRWRCelFJUVNrSEhIUkJIUWFUR0FCQkhFRWtNQlF0QjhJZ0ZRZVhOQUJCSFFaOFNFRWRCakJrUVIwSE9BaEJLUWNjZEVFZEIxdEFBRUVjUVNRd0VDMEh3aUFWQm5OVUFFRWRCbnhJUVIwR01HUkJIUWM4Q0VFcEJ4eDBRUjBIVzBBQVFSeEJKREFNTEVKSUJJd0JCTUdzaUppUUFJQXRCb0FGcUlSY0NRQ0FMS0FLZ0FTQUtLQUlFSWdJb0FnUkdCRUFnQ3lnQ3BBRWdBaWdDQ0VZTkFRdEJBQ0VFUVFBaENDQVhRU0JxSVE0Q1FDQUtLQUlJSUFvb0FnUkhCRUFnQ2tFQVFRQVEzd0VvQWdBaERDQUtRUUJCQUJEZkFTZ0NCQ0VKSUFwQkFFRUFFTjhCS0FJSUlRWWdEaUFLS0FJUUlnTTJBZ3dnRGlBS0tBSVVRUUZySWdJMkFoQWdEaUFDSUFOc0VNWURBMEFnQkNBT0tBSU1UdzBDSUFZZ0JIWWhCU0FKSUFSMklRTkJBQ0VVQTBBZ0RpZ0NFQ0lDSUJSTkJFQWdCRUVCYWlFRURBSUZJQTRvQWdBZ0FpQUViRUVGZEdvZ0ZFRUZkR29nRENBRElBVkJBUkQ4QXlBVVFRRnFJUlFNQVFzQUN3QUxBQXRCOElnRlFlNEpFRWRCbkJBUVIwR01HUkJIUVRVUVNrSEhIUkJIUWY0Z0VFY1FTUXdFQ3lBS0tBSUVJZ0lvQWdRaENTQUNLQUlJSVFZZ0NpZ0NFQ0VNSUFvb0FoUWhEaUFYUWR3QWFpSVRRODNNVEQ4NEFoZ2dFMEVGTmdJVUlCTkRBQURBUHpnQ0VDQVRRd0FBUUVBNEFnd2dFMEVrTmdJSUlCTWdEallDQkNBVElBdzJBZ0FnRTBFY2FrRWtFUElCSUJOQktHb2dFeWdDQkNBVEtBSUFiQkRHQXdOQUlBZ2dERWNFUUNBR0lBaDJJUVVnQ1NBSWRpRURRUUFoQkNBSUlBNXNRUVYwSVFJRFFDQUVJQTVHQkVBZ0NFRUJhaUVJREFNRklCTW9BaWdnQW1vZ0JFRUZkR3BCQWlBRElBVkJBaEQ4QXlBRVFRRnFJUVFNQVFzQUN3QUxDeUFYSUFvb0FnUWlBaWdDQkRZQ0FDQVhJQUlvQWdnMkFnUUNRQ0FYS0FJSUlnVWdGMEVRYWlJT0tBSUVJQTRvQWdBaUFtdEJERzBpQTBzRVFDTUFRU0JySWdRa0FBSkFJQVVnQTJzaUJTQU9LQUlJSUE0b0FnUWlBbXRCREcxTkJFQWdEaUFGRUlFSERBRUxJQVJCREdvZ0RpQUNJQTRvQWdCclFReHRJQVZxRVB3R0lBNG9BZ1FnRGlnQ0FHdEJERzBnRGtFSWFpSURFTElDSWdrZ0JSRDFCaUFPS0FJRUlRVWdEaWdDQUNFQ0lBa29BZ1FoQmlNQVFTQnJJZ3drQUNBTUlBWTJBaHdnRENBR05nSVlJQXhCQURvQUZDQU1JQU0yQWdnZ0RDQU1RUnhxTmdJUUlBd2dERUVZYWpZQ0RBTkFJQUlnQlVjRVFDQUdRUXhySUFWQkRHc2lCUkR3QmlBTUlBd29BaHhCREdzaUJqWUNIQXdCQ3dzZ0RFRUJPZ0FVSUF3dEFCUkZCRUFnRENnQ0NCb2dEQ2dDRUNnQ0FDRUZJQXdvQWd3b0FnQWhBZ05BSUFJZ0JVY0VRQ0FGRUtFRVFReHFJUVVNQVFzTEN5QU1RU0JxSkFBZ0NTQUdOZ0lFSUE0b0FnQWhBaUFPSUFZMkFnQWdDU0FDTmdJRUlBNG9BZ1FoQWlBT0lBa29BZ2cyQWdRZ0NTQUNOZ0lJSUE0b0FnZ2hBaUFPSUFrb0FndzJBZ2dnQ1NBQ05nSU1JQWtnQ1NnQ0JEWUNBQ0FKS0FJRUlRTURRQ0FKS0FJSUlnSWdBMGNFUUNBSklBSkJER3NpQWpZQ0NDQUNFS0VFR2d3QkN3c2dDU2dDQUNJQ0JFQWdDU2dDREJvZ0FoQklDd3NnQkVFZ2FpUUFEQUVMSUFNZ0JVc0VRQ0FPSUFJZ0JVRU1iR29RdUFRTEMwRUFJUWdEUUNBSUlCY29BaFFnRnlnQ0VDSUNhMEVNYlVrRVFBSkFJQmNvQWd3aUJTQUNJQWhCREd4cUlnNG9BZ1FnRGlnQ0FDSUNhMEVNYlNJRFN3UkFJd0JCSUdzaUJDUUFBa0FnQlNBRGF5SUZJQTRvQWdnZ0RpZ0NCQ0lDYTBFTWJVMEVRQ0FPSUFVUWdRY01BUXNnQkVFTWFpQU9JQUlnRGlnQ0FHdEJERzBnQldvUS9BWWdEaWdDQkNBT0tBSUFhMEVNYlNBT1FRaHFJZ01Rc2dJaUNTQUZFUFVHSUE0b0FnUWhCU0FPS0FJQUlRSWdDU2dDQkNFR0l3QkJJR3NpRENRQUlBd2dCallDSENBTUlBWTJBaGdnREVFQU9nQVVJQXdnQXpZQ0NDQU1JQXhCSEdvMkFoQWdEQ0FNUVJocU5nSU1BMEFnQWlBRlJ3UkFJQVpCREdzZ0JVRU1heUlGRVBBR0lBd2dEQ2dDSEVFTWF5SUdOZ0ljREFFTEN5QU1RUUU2QUJRZ0RDMEFGRVVFUUNBTUtBSUlHaUFNS0FJUUtBSUFJUVVnRENnQ0RDZ0NBQ0VDQTBBZ0FpQUZSd1JBSUFVUVZrRU1haUVGREFFTEN3c2dERUVnYWlRQUlBa2dCallDQkNBT0tBSUFJUUlnRGlBR05nSUFJQWtnQWpZQ0JDQU9LQUlFSVFJZ0RpQUpLQUlJTmdJRUlBa2dBallDQ0NBT0tBSUlJUUlnRGlBSktBSU1OZ0lJSUFrZ0FqWUNEQ0FKSUFrb0FnUTJBZ0FnQ1NnQ0JDRURBMEFnQ1NnQ0NDSUNJQU5IQkVBZ0NTQUNRUXhySWdJMkFnZ2dBaEJXR2d3QkN3c2dDU2dDQUNJQ0JFQWdDU2dDREJvZ0FoQklDd3NnQkVFZ2FpUUFEQUVMSUFNZ0JVc0VRQ0FPSUFJZ0JVRU1iR29RdEFRTEN5QUlRUUZxSVFnTUFRc0xDMEdVQVJCbUVLNEdJUUlqQUVFUWF5SURKQUFnQTBFSWFpQUNFSzBHSWdVb0FnQWhBaUFGSUF0QlFHc2lCQ2dDQURZQ0FDQUVJQUkyQWdBZ0JTZ0NCQ0VDSUFVZ0JDZ0NCRFlDQkNBRUlBSTJBZ1FnQlJEQkFSb2dBMEVRYWlRQUlBc29Ba0FpQXlBS0tBSUVJZ0lvQWdRMkFnQWdBeUFDS0FJSU5nSUVJQ1pCRUdvaUhVSDhLaENYQVNBTEtBSkFJd0JCRUdzaUlpUUFBa0FDUUFKQUFrQUNRQ0FLQkVBZ0YwVU5BU0FLS0FJRUlnSWdDaWdDQ0VZTkFpQUNLQUlFSUJjb0FnQkhEUU1nQWlnQ0NDQVhLQUlFUncwRUlCY2hBaU1BUVNCcklpY2tBQUpBQWtBZ0NpZ0NFRUVBVEFSQVFmQ0lCVUdCTkJCSFFad1FFRWRCakJrUVIwR1RBUkJLUWNjZEVFZEI1emNRUnhCSkRBRUxJQ2RCMU84QUVKY0JBa0FDUUFKQUlBSWlDU2dDSkNBQ0tBSWdSd1JBSUFvb0FoQkJBRXdOQVNBS1FiQ0xBVUdjdEFFUXF3RkZEUUlEUUVFQUlRZ2dEeUFKS0FJc1R3MEVBMEFnQ1NnQ01DSUNJQWhOQkVBZ0QwRUJhaUVQREFJRklBa29BaUFnQWlBUGJFRUZkR29nQ0VFRmRHb2hHaUFLSUE4Z0NCRGZBU0VSSUFvZ0R5QUlRUUZxSWdnUTN3RWhEUUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUJvb0FnQkJBa1lFUUNBUktBSUFRUUpIRFFFZ0RTZ0NBRUVDUncwQ0lCb29BaEJCQVVjTkF5QVJLQUlRUVFGSERRUWdEU2dDRUVFQlJ3MEZJQm9vQWdRaUF5QU5LQUlFUncwR0lCb29BZ2dpQWlBTktBSUlSdzBISUJFb0FnUWdBMGNOQ0NBUktBSUlJQUpIRFFsQkFDRUZBMEFnQWlBRlRRME5JQm9vQWdnZ0JVMEVRRUh3aUFWQjZhb0JFRWRCanFzQkVFZEJqQmtRUjBINEFCQktRY2NkRUVkQjhxc0JFRWNRU1F3VUN5QWFLQUlZSUJvb0Fnd2dCV3hxSVF3Z0VTQUZFRnNoQmlBTklBVVFXeUVFSUJFb0FnUWhBMEVBSVFJRFFDQUNJQU5HQkVBZ0JVRUJhaUVGSUJFb0FnZ2hBZ3dDQlNBTUlBSkJBblFpRTJvZ0JpQVRhaW9DQUNBRUlCTnFLZ0lBa3pnQ0FDQUNRUUZxSVFJTUFRc0FDd0FMQUF0QjhJZ0ZRZGJIQUJCSFFad1FFRWRCakJrUVIwSFdBQkJLUWNjZEVFZEI4c3dBRUVjUVNRd0pDMEh3aUFWQjl0QUFFRWRCbkJBUVIwR01HUkJIUWRjQUVFcEJ4eDBRUjBIeXpBQVFSeEJKREFnTFFmQ0lCVUh0MUFBUVIwR2NFQkJIUVl3WkVFZEIyQUFRU2tISEhSQkhRZkxNQUJCSEVFa01Cd3RCOElnRlFaellBQkJIUVp3UUVFZEJqQmtRUjBIWkFCQktRY2NkRUVkQmk5c0FFRWNRU1F3R0MwSHdpQVZCbmQ0QUVFZEJuQkFRUjBHTUdSQkhRZG9BRUVwQnh4MFFSMEdMMndBUVJ4QkpEQVVMUWZDSUJVR0M0Z0FRUjBHY0VCQkhRWXdaRUVkQjJ3QVFTa0hISFJCSFFZdmJBQkJIRUVrTUJBdEI4SWdGUWFia0FCQkhRWndRRUVkQmpCa1FSMEhjQUJCS1FjY2RFRWRCZ2VVQUVFY1FTUXdEQzBId2lBVkJ6T2dBRUVkQm5CQVFSMEdNR1JCSFFkMEFFRXBCeHgwUVIwSCs2QUFRUnhCSkRBSUxRZkNJQlVIZDdBQVFSMEdjRUJCSFFZd1pFRWRCM2dBUVNrSEhIUkJIUVlIbEFCQkhFRWtNQVF0QjhJZ0ZRZHJ1QUJCSFFad1FFRWRCakJrUVIwSGZBQkJLUWNjZEVFZEIvdWdBRUVjUVNRc01Cd3NBQ3dBTEFBdEI4SWdGUWJBbkVFZEJuQkFRUjBHTUdSQkhRY2dBRUVwQnh4MFFSMEhDS3hCSEVFa01Bd3RCOElnRlFZRTBFRWRCbkJBUVIwR01HUkJIUWNrQUVFcEJ4eDBRUjBIbk54QkhFRWtNQWd0QjhJZ0ZRY0UrRUVkQm5CQVFSMEdNR1JCSFFjb0FFRXBCeHgwUVIwSHF3UUFRUnhCSkRBRUxFSklCSUNkQnd2QUFFSmNCSXdCQk1Hc2lJQ1FBSUFrZ0NTZ0NQRFlDUUNBSlFUeHFJUk1nQ1NvQ05DSXJJQ3VVSVRsQkFTRURBa0FEUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQWtvQWlRZ0NTZ0NJR3RCQlhWQkFXc2dBMHNFUUNBSktBSWdJUVVDZnlBSktBSWtJQWtvQWlBaUFtdEJCWFVnQTBzRVFDQUNLQUlFSUFJZ0EwRUZkR29vQWdSdXN4QzhBa01ZY2pFL2xVTUFBQUEva280aUs0dERBQUFBVDEwRVFDQXJxQXdDQzBHQWdJQ0FlQXdCQzBId2lBVkIzWk1CRUVkQmk1UUJFRWRCakJrUVIwSGVBQkJLUWNjZEVFZEJnWlVCRUVjUVNRd0xDeUViSUFVZ0EwRUJhaUlFUVFWMGFpRWVJQVVnQTBFRmRHb2lJMEVnYXlFZklBTWdDU2dDTUc4aEZTQWpRUnhyS0FJQUlnd2dJeWdDQkNJR1J3UkFJQXhCQVhZaEFnd0dDeUFlS0FJRUlnVWdERVlFUUNBalFSaHJLQUlBSWdNZ0l5Z0NDRWNOQWlBRElCNG9BZ2hIRFFOQkFTRUNRUUVnQTBFQmF5SURJQU5CQVUwYklROUJBU0FNUVFGcklnTWdBMEVCVFJzaEJrRUJJQnQwc2lFeUlCdEJBV3NRaGdORUFBQUFBQUFBNEwrZ3RpRXhJQld5SVMwRFFDQUNJQTlHRFFnZ0FyTWdNcFFnTVpJaExFRUJJUU1nSHlBQ1FRRnJJZ3dRV3lFUklCOGdBaEJiSVJBZ0h5QUNRUUZxSWdVUVd5RVdJQ01nREJCYklSZ2dJeUFDRUZzaERTQWpJQVVRV3lFSUlCNGdEQkJiSVJvZ0hpQUNFRnNoRENBZUlBVVFXeUVDQTBBZ0F5QUdSZ1JBSUFVaEFnd0NCUUpBSUEwZ0EwRUNkQ0laYWlvQ0FDSXZJQytVSURsZERRQUNRQUpBSUM4Z0VTQURRUUZyUVFKMElnZHFLZ0lBSWl0ZVJRMEFJQzhnRVNBWmFpb0NBRjVGRFFBZ0x5QVJJQU5CQVdwQkFuUWlFbW9xQWdCZVJRMEFJQzhnQnlBUWFpb0NBRjVGRFFBZ0x5QVFJQmxxS2dJQVhrVU5BQ0F2SUJBZ0Vtb3FBZ0JlUlEwQUlDOGdCeUFXYWlvQ0FGNUZEUUFnTHlBV0lCbHFLZ0lBWGtVTkFDQXZJQklnRm1vcUFnQmVSUTBBSUM4Z0J5QVlhaW9DQUY1RkRRQWdMeUFZSUJscUtnSUFYa1VOQUNBdklCSWdHR29xQWdCZVJRMEFJQzhnQnlBTmFpb0NBRjVGRFFBZ0x5QU5JQkpxS2dJQVhrVU5BQ0F2SUFjZ0NHb3FBZ0JlUlEwQUlDOGdDQ0FaYWlvQ0FGNUZEUUFnTHlBSUlCSnFLZ0lBWGtVTkFDQXZJQWNnR21vcUFnQmVSUTBBSUM4Z0dTQWFhaW9DQUY1RkRRQWdMeUFTSUJwcUtnSUFYa1VOQUNBdklBY2dER29xQWdCZVJRMEFJQzhnRENBWmFpb0NBRjVGRFFBZ0x5QU1JQkpxS2dJQVhrVU5BQ0F2SUFJZ0Iyb3FBZ0JlUlEwQUlDOGdBaUFaYWlvQ0FGNUZEUUFnTHlBQ0lCSnFLZ0lBWGcwQkN5QXJJQzllUlEwQklDOGdFU0FaYWlvQ0FGMUZEUUVnTHlBUklBTkJBV3BCQW5RaUVtb3FBZ0JkUlEwQklDOGdCeUFRYWlvQ0FGMUZEUUVnTHlBUUlCbHFLZ0lBWFVVTkFTQXZJQkFnRW1vcUFnQmRSUTBCSUM4Z0J5QVdhaW9DQUYxRkRRRWdMeUFXSUJscUtnSUFYVVVOQVNBdklCSWdGbW9xQWdCZFJRMEJJQzhnQnlBWWFpb0NBRjFGRFFFZ0x5QVlJQmxxS2dJQVhVVU5BU0F2SUJJZ0dHb3FBZ0JkUlEwQklDOGdCeUFOYWlvQ0FGMUZEUUVnTHlBTklCSnFLZ0lBWFVVTkFTQXZJQWNnQ0dvcUFnQmRSUTBCSUM4Z0NDQVphaW9DQUYxRkRRRWdMeUFJSUJKcUtnSUFYVVVOQVNBdklBY2dHbW9xQWdCZFJRMEJJQzhnR1NBYWFpb0NBRjFGRFFFZ0x5QVNJQnBxS2dJQVhVVU5BU0F2SUFjZ0RHb3FBZ0JkUlEwQklDOGdEQ0FaYWlvQ0FGMUZEUUVnTHlBTUlCSnFLZ0lBWFVVTkFTQXZJQUlnQjJvcUFnQmRSUTBCSUM4Z0FpQVphaW9DQUYxRkRRRWdMeUFDSUJKcUtnSUFYVVVOQVFzZ0lDQXZPQUlrSUNBZ0ZUWUNIQ0FnSUJzMkFoZ2dDaUFiSUMwUTNBSWhLeUFnSUN3NEFoQWdJQ0FyT0FJb0lDQWdBN01nTXBRZ01aSTRBZ3dnRXlBZ1FReHFFS29DQ3lBRFFRRnFJUU1NQVFzQUN3QUxBQXNnREVFQmRpSUNJQVZIRFFVZ0kwRVlheWdDQUNJQ0lDTW9BZ2hIRFFNZ0FrRUJkaUlESUI0b0FnaEhEUVJCQWlFQ1FRSUNmeUFEUVFGcnMwTUFBQUMva2lJcklDdVNRd0FBQUQrU2ppSXJRd0FBZ0U5ZElDdERBQUFBQUdCeEJFQWdLNmtNQVF0QkFBc2lBeUFEUVFKTkd5RU1RUUlDZnlBRlFRRnJzME1BQUFDL2tpSXJJQ3VTUXdBQUFEK1NqaUlyUXdBQWdFOWRJQ3REQUFBQUFHQnhCRUFnSzZrTUFRdEJBQXNpQXlBRFFRSk5HeUVQUVFFZ0czU3lJVFlnRzBFQmF4Q0dBMFFBQUFBQUFBRGd2NkMySVRVZ0ZiSWhNUU5BSUFJZ0RFWU5CeUFDc3lJcklEYVVJRFdTSVMwZ0swTUFBQUEvbEVNQUFJQytraUkzUXdBQUFEK1NJVGdnTjBNQUFBQy9raUV1UVFJaEF5QWZJQUpCQVdzaUJoQmJJUkVnSHlBQ0VGc2hGaUFmSUFKQkFXb2lCUkJiSVJnZ0l5QUdFRnNoQ0NBaklBSVFXeUVOSUNNZ0JSQmJJUm9EUUNBRElBOUdCRUFnQlNFQ0RBSUZBa0FnRFNBRFFRSjBJaEpxSWdjcUFnQWlLeUFybENBNVhRMEFJQU96SWl4REFBQUFQNVJEQUFDQXZwSWhPZ0pBQWtBZ0t5QVJJQU5CQVd0QkFuUWlFR29pQmlvQ0FGNUZEUUFnS3lBUklCSnFLZ0lBWGtVTkFDQXJJQkVnQTBFQmFrRUNkQ0lDYWlvQ0FGNUZEUUFnS3lBUUlCWnFLZ0lBWGtVTkFDQXJJQklnRm1vcUFnQmVSUTBBSUNzZ0FpQVdhaW9DQUY1RkRRQWdLeUFRSUJocUtnSUFYa1VOQUNBcklCSWdHR29xQWdCZVJRMEFJQ3NnQWlBWWFpb0NBRjVGRFFBZ0t5QUlJQkJxS2dJQVhrVU5BQ0FySUFnZ0Vtb3FBZ0JlUlEwQUlDc2dBaUFJYWlvQ0FGNUZEUUFnS3lBTklCQnFLZ0lBWGtVTkFDQXJJQUlnRFdvcUFnQmVSUTBBSUNzZ0VDQWFhaW9DQUY1RkRRQWdLeUFTSUJwcUtnSUFYa1VOQUNBcklBSWdHbW9xQWdCZVJRMEFJQjRnT2tNQUFBQy9raUl2SUM0UVZ5QXJYU0FIS2dJQUlTdEZEUUFnSGlBNklDNFFWeUFyWFNBSEtnSUFJU3RGRFFBZ0hpQTZRd0FBQUQrU0lqSWdMaEJYSUN0ZElBY3FBZ0FoSzBVTkFDQWVJQzhnTnhCWElDdGRJQWNxQWdBaEswVU5BQ0FlSURvZ054QlhJQ3RkSUFjcUFnQWhLMFVOQUNBZUlESWdOeEJYSUN0ZElBY3FBZ0FoSzBVTkFDQWVJQzhnT0JCWElDdGRJQWNxQWdBaEswVU5BQ0FlSURvZ09CQlhJQ3RkSUFjcUFnQWhLMFVOQUNBZUlESWdPQkJYSUN0ZERRRWdCeW9DQUNFckN5QXJJQVlxQWdCZFJRMEJJQ3NnRVNBU2Fpb0NBRjFGRFFFZ0t5QVJJQU5CQVdwQkFuUWlBbW9xQWdCZFJRMEJJQ3NnRUNBV2Fpb0NBRjFGRFFFZ0t5QVNJQlpxS2dJQVhVVU5BU0FySUFJZ0Ztb3FBZ0JkUlEwQklDc2dFQ0FZYWlvQ0FGMUZEUUVnS3lBU0lCaHFLZ0lBWFVVTkFTQXJJQUlnR0dvcUFnQmRSUTBCSUNzZ0NDQVFhaW9DQUYxRkRRRWdLeUFJSUJKcUtnSUFYVVVOQVNBcklBSWdDR29xQWdCZFJRMEJJQ3NnRFNBUWFpb0NBRjFGRFFFZ0t5QUNJQTFxS2dJQVhVVU5BU0FySUJBZ0dtb3FBZ0JkUlEwQklDc2dFaUFhYWlvQ0FGMUZEUUVnS3lBQ0lCcHFLZ0lBWFVVTkFTQWVJRHBEQUFBQXY1SWlNaUF1RUZjZ0sxNUZEUUVnQnlvQ0FDQWVJRG9nTGhCWFhVVU5BU0FIS2dJQUlCNGdPa01BQUFBL2tpSXJJQzRRVjExRkRRRWdCeW9DQUNBZUlESWdOeEJYWFVVTkFTQUhLZ0lBSUI0Z09pQTNFRmRkUlEwQklBY3FBZ0FnSGlBcklEY1FWMTFGRFFFZ0J5b0NBQ0FlSURJZ09CQlhYVVVOQVNBSEtnSUFJQjRnT2lBNEVGZGRSUTBCSUFjcUFnQWdIaUFySURnUVYxMUZEUUVMSUNBZ0ZUWUNIQ0FnSUJzMkFoZ2dJQ0FIS2dJQU9BSWtJQW9nR3lBeEVOd0NJU3NnSUNBdE9BSVFJQ0FnTENBMmxDQTFramdDRENBZ0lDczRBaWdnRXlBZ1FReHFFS29DQ3lBRFFRRnFJUU1NQVFzQUN3QUxBQXNnSUVFd2FpUUFEQWdMUWZDSUJVR0ErUUFRUjBHY0VCQkhRWXdaRUVkQndBRVFTa0hISFJCSFFiVDVBQkJIRUVrTUJRdEI4SWdGUWFIOEFCQkhRWndRRUVkQmpCa1FSMEhCQVJCS1FjY2RFRWRCdFBrQUVFY1FTUXdFQzBId2lBVkJnUGtBRUVkQm5CQVFSMEdNR1JCSFFaVUNFRXBCeHgwUVIwRzArUUFRUnhCSkRBTUxRZkNJQlVHci9nQVFSMEdjRUJCSFFZd1pFRWRCbGdJUVNrSEhIUkJIUWJUNUFCQkhFRWtNQWdzZ0JDRURJQUlnQmtjTkFpQUdJQjRvQWdSSERRSUNRQ0FqUVJocktBSUFRUUYySWdNZ0l5Z0NDRVlFUUNBRElCNG9BZ2hIRFFGQkFTRUNRUUVnQTBFQmF5SURJQU5CQVUwYklReEJBU0FHUVFGcklnTWdBMEVCVFJzaEQwRUJJQnQwc2lFMUlCdEJBV3NRaGdORUFBQUFBQUFBNEwrZ3RpRXZJQld5SVMwRFFDQUNJQXhHRFFNZ0FyTWdOWlFnTDVJaExFRUJJUU1nQWtFQmRMTkRBQUFBUDVJaU9FTUFBQUJBa2lFdUlEaERBQUFBd0pJaE5pQWpJQUpCQVdzaUJoQmJJUkVnSXlBQ0VGc2hEU0FqSUFKQkFXb2lCUkJiSVJZZ0hpQUdFRnNoR0NBZUlBSVFXeUVJSUI0Z0JSQmJJUm9EUUNBRElBOUdCRUFnQlNFQ0RBSUZBa0FnRFNBRFFRSjBJaEpxSWdjcUFnQWlLeUFybENBNVhRMEFJQU5CQVhTelF3QUFBRCtTSVRjQ1FBSkFJQ3NnRVNBRFFRRnJRUUowSWhCcUlnWXFBZ0JlUlEwQUlDc2dFU0FTYWlvQ0FGNUZEUUFnS3lBUklBTkJBV3BCQW5RaUFtb3FBZ0JlUlEwQUlDc2dEU0FRYWlvQ0FGNUZEUUFnS3lBQ0lBMXFLZ0lBWGtVTkFDQXJJQkFnRm1vcUFnQmVSUTBBSUNzZ0VpQVdhaW9DQUY1RkRRQWdLeUFDSUJacUtnSUFYa1VOQUNBcklCQWdHR29xQWdCZVJRMEFJQ3NnRWlBWWFpb0NBRjVGRFFBZ0t5QUNJQmhxS2dJQVhrVU5BQ0FySUFnZ0VHb3FBZ0JlUlEwQUlDc2dDQ0FTYWlvQ0FGNUZEUUFnS3lBQ0lBaHFLZ0lBWGtVTkFDQXJJQkFnR21vcUFnQmVSUTBBSUNzZ0VpQWFhaW9DQUY1RkRRQWdLeUFDSUJwcUtnSUFYa1VOQUNBZklEZERBQUFBd0pJaU1pQTJFRmNnSzEwZ0J5b0NBQ0VyUlEwQUlCOGdOeUEyRUZjZ0sxMGdCeW9DQUNFclJRMEFJQjhnTjBNQUFBQkFraUl4SURZUVZ5QXJYU0FIS2dJQUlTdEZEUUFnSHlBeUlEZ1FWeUFyWFNBSEtnSUFJU3RGRFFBZ0h5QTNJRGdRVnlBclhTQUhLZ0lBSVN0RkRRQWdIeUF4SURnUVZ5QXJYU0FIS2dJQUlTdEZEUUFnSHlBeUlDNFFWeUFyWFNBSEtnSUFJU3RGRFFBZ0h5QTNJQzRRVnlBclhTQUhLZ0lBSVN0RkRRQWdIeUF4SUM0UVZ5QXJYUTBCSUFjcUFnQWhLd3NnS3lBR0tnSUFYVVVOQVNBcklCRWdFbW9xQWdCZFJRMEJJQ3NnRVNBRFFRRnFRUUowSWdKcUtnSUFYVVVOQVNBcklBMGdFR29xQWdCZFJRMEJJQ3NnQWlBTmFpb0NBRjFGRFFFZ0t5QVFJQlpxS2dJQVhVVU5BU0FySUJJZ0Ztb3FBZ0JkUlEwQklDc2dBaUFXYWlvQ0FGMUZEUUVnS3lBUUlCaHFLZ0lBWFVVTkFTQXJJQklnR0dvcUFnQmRSUTBCSUNzZ0FpQVlhaW9DQUYxRkRRRWdLeUFJSUJCcUtnSUFYVVVOQVNBcklBZ2dFbW9xQWdCZFJRMEJJQ3NnQWlBSWFpb0NBRjFGRFFFZ0t5QVFJQnBxS2dJQVhVVU5BU0FySUJJZ0dtb3FBZ0JkUlEwQklDc2dBaUFhYWlvQ0FGMUZEUUVnSHlBM1F3QUFBTUNTSWpFZ05oQlhJQ3RlUlEwQklBY3FBZ0FnSHlBM0lEWVFWMTFGRFFFZ0J5b0NBQ0FmSURkREFBQUFRSklpS3lBMkVGZGRSUTBCSUFjcUFnQWdIeUF4SURnUVYxMUZEUUVnQnlvQ0FDQWZJRGNnT0JCWFhVVU5BU0FIS2dJQUlCOGdLeUE0RUZkZFJRMEJJQWNxQWdBZ0h5QXhJQzRRVjExRkRRRWdCeW9DQUNBZklEY2dMaEJYWFVVTkFTQUhLZ0lBSUI4Z0t5QXVFRmRkUlEwQkN5QWdJQlUyQWh3Z0lDQWJOZ0lZSUNBZ0J5b0NBRGdDSkNBS0lCc2dMUkRjQWlFcklDQWdMRGdDRUNBZ0lBT3pJRFdVSUMrU09BSU1JQ0FnS3pnQ0tDQVRJQ0JCREdvUXFnSUxJQU5CQVdvaEF3d0JDd0FMQUFzQUMwSHdpQVZCNVA4QUVFZEJuQkFRUjBHTUdSQkhRZW9DRUVwQnh4MFFSMEcwK1FBUVJ4QkpEQUlMUWZDSUJVR09nUUVRUjBHY0VCQkhRWXdaRUVkQjZ3SVFTa0hISFJCSFFiVDVBQkJIRUVrTUFRc2dCQ0VEREFFTEN3d0JDeENTQVNBblFhM3lBQkNYQVVFQUlSRkJBQ0ViSXdCQjBBQnJJZ2NrQUNBSlFUeHFJUWdnQ1NvQ09DSXNRd0FBZ0QrU0lpc2dLNVFnTEpVaE9pQUpLZ0kwSWlzZ0s1UWhOd0pBQWtBQ1FBTkFJQWtvQWtBZ0NTZ0NQQ0lDYTBFa2JTQVJTd1JBSUFJZ0VVRWtiR29pR2lnQ0VDSUVJQWtvQWpBaUEwNE5BaUFKS0FJZ0lBTWdHaWdDRENJQ2JFRUZkR29nQkVFRmRHb2hGZ0ovSUJvcUFnUkRBQUNBUDBFQklBSjBzcFVpTFpRZ0xVTUFBQUEvbEVNQUFBQy9raUlza2lJNFF3QUFBRCtTSWl1TFF3QUFBRTlkQkVBZ0s2Z01BUXRCZ0lDQWdIZ0xJUklDUUFKL0lCWkJJR3NoRUNBV1FTQnFJUlVDZnlBYUtnSUFJQzJVSUN5U0lpNURBQUFBUDVJaUs0dERBQUFBVDEwRVFDQXJxQXdCQzBHQWdJQ0FlQXNoR0FKQUFrQUNRQUpBQWtBZ0ZTZ0NCQ0lESUJBb0FnUWlBaUFXS0FJRUlnUkdSZ1JBSUJVb0FnZ2dFQ2dDQ0NBV0tBSUlSa2NOQWlNQVFTQnJJZzBrQUFKQUFrQUNRQUpBQWtBQ1FBSkFJQmhCQUV3TkFDQVdLQUlFSWdNZ0dFRUJhazBOQUNBU1FRQk1EUUVnRWtFQmFpSVRJQllvQWdnaUFrOE5BU0FRS0FJRUlBTkhEUUlnQXlBVktBSUVSdzBESUJBb0FnZ2dBa2NOQkNBQ0lCVW9BZ2hIRFFVZ0VDQVNRUUZySWdJUVd5QVFJQklRV3lFUElCQWdFeEJiSUJZZ0VoQmJJUVVnRlNBQ0VGc2hCQ0FWSUJJUVd5RURJQlVnRXhCYklRSWdEVUVjYWlBTlFSaHFJQTFCRkdvZ0RVRVFhaUFOUVF4cUlCWWdHQ0FTRUxNRElCaEJBblFpRTJvcUFnQWhPU0FUYWlvQ0FDRTJJQUlnRTJvcUFnQWhOU0FFSUJOcUtnSUFJUzhnQXlBVGFpSURLZ0lBSVRzZ0R5QVRhaUlDS2dJQUlUd2dCU0FUYWlvQ0FDRTlJQUlxQWdRaE1pQUNRUVJyS2dJQUlURWdBeW9DQkNFdElBTkJCR3NxQWdBaExDQUhJQTBxQWhRNEFpQWdCeUFOS2dJTUlpczRBaXdnQnlBck9BSWtJQWNnTVNBeWt5QXRJQ3lUa2tNQUFJQStsQ0l0T0FJb0lBMHFBaEFoTENBSElEc2dQQ0E5SUQyU2s1STRBa0FnQnlBMklEbVRJRFVnTDVPU1F3QUFnRDZVSWlzNEFqd2dCeUF0T0FJNElBY2dLemdDTkNBSElDdzRBakFnQnlBTktnSWNqRGdDRkNBTktnSVlJU3NnQnlBN0lEeVRRd0FBQUwrVU9BSWNJQWNnSzR3NEFoZ2dEVUVnYWlRQURBWUxRZkNJQlVIOG1nRVFSMEdMbEFFUVIwR01HUkJIUWJVQ0VFcEJ4eDBRUjBIa213RVFSeEJKREFzTFFmQ0lCVUdvbkFFUVIwR0xsQUVRUjBHTUdSQkhRYllDRUVwQnh4MFFSMEhqbkFFUVJ4QkpEQW9MUWZDSUJVSGRuUUVRUjBHTGxBRVFSMEdNR1JCSFFiY0NFRXBCeHgwUVIwR1JuZ0VRUnhCSkRBa0xRZkNJQlVING5nRVFSMEdMbEFFUVIwR01HUkJIUWJnQ0VFcEJ4eDBRUjBHUm5nRVFSeEJKREFnTFFmQ0lCVUcrbndFUVIwR0xsQUVRUjBHTUdSQkhRYmtDRUVwQnh4MFFSMEdSbmdFUVJ4QkpEQWNMUWZDSUJVR2NvQUVRUjBHTGxBRVFSMEdNR1JCSFFib0NFRXBCeHgwUVIwR1JuZ0VRUnhCSkRBWUxEQUVMSUFJZ0JFY2dCRUVCZGlBRFIzSkZCRUFnRUNnQ0NDSUNJQllvQWdoSERRTWdGU2dDQ0NBQ1FRRjJSdzBESXdCQklHc2lEeVFBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQVlRUUJNRFFBZ0ZpZ0NCQ0lFSUJoQkFXcE5EUUFnRWtFQVRBMEJJQkpCQVdvaUFpQVdLQUlJSWdOUERRRWdFQ2dDQkNBRVJ3MENJQlVvQWdRZ0JFRUJka2NOQXlBUUtBSUlJQU5IRFFRZ0ZTZ0NDQ0FEUVFGMlJ3MEZJQkFnRWtFQmF4QmJJQkFnRWhCYklCQWdBaEJiSVFNZ0ZpQVNFRnNoQWlBWXMwTUFBQUEvbEVNQUFJQytraUkrUXdBQUFMK1NJakpEQUFBQUFHQkZEUVlnRXJOREFBQUFQNVJEQUFDQXZwSWlMME1BQUFDL2tpSXhRd0FBQUFCZ1JRMEhJRDVEQUFBQVA1SWlMQ0FWS0FJRXMxMUZEUWdnTDBNQUFBQS9raUlySUJVb0FnaXpYVVVOQ1NBUFFSeHFJQTlCR0dvZ0QwRVVhaUFQUVJCcUlBOUJER29nRmlBWUlCSVFzd01nRlNBK0lDOFFWeUU3SUJoQkFuUWlCbW9pQkNvQ0FDRThJQUlnQm1vcUFnQWhQU0FFUVFScktnSUFJVGtnRlNBc0lDOFFWeUUySUFRcUFnUWhMU0FWSURJZ0x4QlhJU3dnQm1vcUFnQWhOU0FWSUQ0Z0t4QlhJUzhnQXlBR2Fpb0NBQ0V5SUJVZ1BpQXhFRmNoTVNBSElBOHFBaFE0QWlBZ0J5QVBLZ0lNSWlzNEFpd2dCeUE1SURhU0lDMGdMSktUUXdBQWdENlVJaTA0QWlnZ0J5QXJPQUlrSUE4cUFoQWhMQ0FISURzZ1BDQTlJRDJTazVJNEFrQWdCeUExSUMrU0lESWdNWktUUXdBQWdENlVJaXM0QWp3Z0J5QXRPQUk0SUFjZ0t6Z0NOQ0FISUN3NEFqQWdCeUFQS2dJY2pEZ0NGQ0FQS2dJWUlTc2dCeUE3SUR5VFF3QUFBTCtVT0FJY0lBY2dLNHc0QWhnZ0QwRWdhaVFBREFvTFFmQ0lCVUg4bWdFUVIwR0xsQUVRUjBHTUdSQkhRWjBERUVwQnh4MFFSMEhrbXdFUVJ4QkpEQThMUWZDSUJVR29uQUVRUjBHTGxBRVFSMEdNR1JCSFFaNERFRXBCeHgwUVIwSGpuQUVRUnhCSkRBNExRZkNJQlVIZG5RRVFSMEdMbEFFUVIwR01HUkJIUVo4REVFcEJ4eDBRUjBHUm5nRVFSeEJKREEwTFFmQ0lCVUd1b2dFUVIwR0xsQUVRUjBHTUdSQkhRYUFERUVwQnh4MFFSMEdSbmdFUVJ4QkpEQXdMUWZDSUJVRytud0VRUjBHTGxBRVFSMEdNR1JCSFFhRURFRXBCeHgwUVIwR1JuZ0VRUnhCSkRBc0xRZkNJQlVHTW93RVFSMEdMbEFFUVIwR01HUkJIUWFJREVFcEJ4eDBRUjBHUm5nRVFSeEJKREFvTFFmQ0lCVUhkb3dFUVIwR0xsQUVRUjBHTUdSQkhRYXdERUVwQnh4MFFSMEdHcEFFUVJ4QkpEQWtMUWZDSUJVSHNwQUVRUjBHTGxBRVFSMEdNR1JCSFFhMERFRXBCeHgwUVIwRytwUUVRUnhCSkRBZ0xRZkNJQlVIUXBnRVFSMEdMbEFFUVIwR01HUkJIUWE0REVFcEJ4eDBRUjBHR3BBRVFSeEJKREFjTFFmQ0lCVUhpcHdFUVIwR0xsQUVRUjBHTUdSQkhRYThERUVwQnh4MFFSMEcrcFFFUVJ4QkpEQVlMREFFTElBSkJBWFlnQkVjZ0F5QUVSM0lOQXlNQVFTQnJJZzhrQUFKQUFrQUNRQUpBQWtBQ1FBSkFJQmhCQUV3TkFDQVdLQUlFSWdRZ0dFRUJhazBOQUNBU1FRQk1EUUVnRWtFQmFpSUNJQllvQWdnaUEwOE5BU0FRS0FJRVFRRjJJQVJIRFFJZ0JDQVZLQUlFUncwRElCQW9BZ2hCQVhZZ0EwY05CQ0FESUJVb0FnaEhEUVVnRmlBU0VGc2dGU0FTUVFGckVGc2hCQ0FWSUJJUVd5QVZJQUlRV3lFQ0lBOUJIR29nRDBFWWFpQVBRUlJxSUE5QkVHb2dEMEVNYWlBV0lCZ2dFaEN6QXlBUUlCaXpJaXNnSzVKREFBQUFQNUlpTVNBU3N5SXJJQ3VTUXdBQUFEK1NJaXNRVnlFN0lCaEJBblFpQm1vaUF5b0NBQ0U4SUFacUtnSUFJVDBnRUNBeFF3QUFBTUNTSUNzUVZ5RTVJQU1xQWdRaE5pQVFJREZEQUFBQVFKSWdLeEJYSVMwZ0EwRUVheW9DQUNFc0lCQWdNU0FyUXdBQUFNQ1NFRmNoTlNBQ0lBWnFLZ0lBSVM4Z0VDQXhJQ3REQUFBQVFKSVFWeUV5SUFRZ0Jtb3FBZ0FoTVNBSElBOHFBaFE0QWlBZ0J5QVBLZ0lNSWlzNEFpd2dCeUE1SURhU0lDMGdMSktUUXdBQWdENlVJaTA0QWlnZ0J5QXJPQUlrSUE4cUFoQWhMQ0FISUR3Z095QTlJRDJTazVJNEFrQWdCeUExSUMrU0lESWdNWktUUXdBQWdENlVJaXM0QWp3Z0J5QXRPQUk0SUFjZ0t6Z0NOQ0FISUN3NEFqQWdCeUFQS2dJY2pEZ0NGQ0FQS2dJWUlTc2dCeUE4SUR1VFF3QUFBTCtVT0FJY0lBY2dLNHc0QWhnZ0QwRWdhaVFBREFZTFFmQ0lCVUg4bWdFUVIwR0xsQUVRUjBHTUdSQkhRZWNDRUVwQnh4MFFSMEhrbXdFUVJ4QkpEQW9MUWZDSUJVR29uQUVRUjBHTGxBRVFSMEdNR1JCSFFlZ0NFRXBCeHgwUVIwSGpuQUVRUnhCSkRBa0xRZkNJQlVISXFBRVFSMEdMbEFFUVIwR01HUkJIUWVrQ0VFcEJ4eDBRUjBHUm5nRVFSeEJKREFnTFFmQ0lCVUd1b2dFUVIwR0xsQUVRUjBHTUdSQkhRZW9DRUVwQnh4MFFSMEdSbmdFUVJ4QkpEQWNMUWZDSUJVR3pxUUVRUjBHTGxBRVFSMEdNR1JCSFFlc0NFRXBCeHgwUVIwR1JuZ0VRUnhCSkRBWUxRZkNJQlVHTW93RVFSMEdMbEFFUVIwR01HUkJIUWV3Q0VFcEJ4eDBRUjBHUm5nRVFSeEJKREFVTEMwRUJEQVFMUWZDSUJVSEZsd0VRUjBHTGxBRVFSMEdNR1JCSFFkSURFRXBCeHgwUVIwSEltQUVRUnhCSkRBSUxRZkNJQlVHS21RRVFSMEdMbEFFUVIwR01HUkJIUWRVREVFcEJ4eDBRUjBISW1BRVFSeEJKREFFTFFmQ0lCVUd3bWdFUVIwR0xsQUVRUjBHTUdSQkhRZHNERUVwQnh4MFFSMEhKbWdFUVJ4QkpDd3dIQzBVTkFDTUFRVEJySWdNa0FDQUhLZ0lrSWpFZ01aSWdCeW9DS0NJc2xDQUhLZ0kwSWl1VUlBY3FBa0FpTFNBeElER1VsSk1nTENBc2xDQUhLZ0l3SWl5VWt5QXJJQ3VVSUFjcUFpQWlLNVNUSUMwZ0xDQXJsSlNTSWl1TFF3QUFBRFJmSWdKRkJFQWdBME1BQUlBL0lDdVZJalVnQnlvQ01DQUhLZ0pBbENBSEtnSTBJaXNnSzVTVGxEZ0NBQ0FESURVZ0J5b0NLQ0FIS2dJOGxDQUhLZ0lrSUFjcUFrQ1VrNVFpTWpnQ0JDQURJRFVnQnlvQ0pDQUhLZ0kwbENBSEtnSW9JQWNxQWpDVWs1UWlNVGdDQ0NBRElEVWdCeW9DSUNBSEtnSkFsQ0FIS2dJb0lpc2dLNVNUbERnQ0VDQURJRFVnQnlvQ0tDQUhLZ0lzbENBSEtnSWdJQWNxQWpTVWs1UWlMVGdDRkNBSEtnSWtJUzhnQnlvQ01DRXNJQWNxQWlBaEt5QURJQzA0QWh3Z0F5QXhPQUlZSUFNZ01qZ0NEQ0FESURVZ0t5QXNsQ0F2SUMrVWs1UTRBaUFMSUFKRklnSUVRQ0FISUFNcUFnZ2dCeW9DSEpRZ0F5b0NBQ0FIS2dJVWxDQURLZ0lFSUFjcUFoaVVrcEk0QWdnZ0J5QURLZ0lVSUFjcUFoeVVJQU1xQWd3Z0J5b0NGSlFnQXlvQ0VDQUhLZ0lZbEpLU09BSU1JQWNnQXlvQ0lDQUhLZ0ljbENBREtnSVlJQWNxQWhTVUlBTXFBaHdnQnlvQ0dKU1NramdDRUFzZ0EwRXdhaVFBSUFKRkRRQWdDU29DV0NBSEtnSUlJaXNnSzVRZ0J5b0NEQ0lySUN1VWtsME5BQ0FIS2dJZ0lpMGdCeW9DTUNJc2xDQUhLZ0lrSWlzZ0s1U1RJakZEQUFBQUFGd0VRQ0FhSUMwZ0xKSWlLeUFybENBeGxUZ0NJQXNnTVVNQUFBQUFXdzBBSUJvcUFoZ2dGaUFTRUZzZ0dFRUNkQ0lDYWlvQ0FGd05CQ0FhSUJZZ0VoQmJJQUpxS2dJQUlBY3FBaHdnQnlvQ0VKUWdCeW9DRkNBSEtnSUlsQ0FIS2dJWUlBY3FBZ3lVa3BLVElpODRBaGdnQnlvQ0RDRXJJQm9vQWd3aUEwRUJheENHQXlHQUFTQUhLZ0lJSVMwZ0dpQTRJQ3VTUVFFZ0EzU3lJaXlVSUlBQlJBQUFBQUFBQU9DL29MWWlLNUlpTWpnQ0JDQWFJQzRnTFpJZ0xKUWdLNUlpTVRnQ0FFTUFBQUFBSVNzQ1FDQUhLZ0lRSUJvb0FoQ3lraUl0UXdBQUFBQmREUUFnQ1NnQ01MSWlMQ0F0SWl0ZFJRMEFJQ3doS3dzZ0dpQXJPQUlVSURGREFBQUFBR0JGSUJvcUFpQ0xJRHBkUlNBdklDK1VJRGRnUlhKeURRQWdNU0FKS0FJZ0lnSW9BZ1N6WFVVZ01rTUFBQUFBWUVWeURRQWdNaUFDS0FJSXMxMUZEUUFnR2lBS0lBTWdLeERjQWpnQ0hDQUlLQUlBSUJ0QkpHeHFJQnBCSlB3S0FBQWdHMEVCYWlFYkN5QVJRUUZxSVJFTUFRc0xBa0FnQ0NnQ0JDQUlLQUlBSWdKclFTUnRJZ01nRzBrRVFDTUFRU0JySWdRa0FBSkFJQnNnQTJzaUJpQUlLQUlJSUFnb0FnUWlBbXRCSkcxTkJFQWdDQ2dDQkNJRElBWkJKR3hxSVFJRFFDQUNJQU5HQkVBZ0NDQUNOZ0lFQlNBRFFRQkJKUHdMQUNBRFFTUnFJUU1NQVFzTERBRUxJQVJCREdvZ0NDQUNJQWdvQWdCclFTUnRJQVpxRU9vR0lBZ29BZ1FnQ0NnQ0FHdEJKRzBnQ0VFSWFoQzdBeUlGS0FJSUlnTWdCa0VrYkdvaEFnTkFJQUlnQTBjRVFDQURRUUJCSlB3TEFDQURRU1JxSVFNTUFRc0xJQVVnQWpZQ0NDQUlJQVVRdUFNZ0JSQzFBd3NnQkVFZ2FpUUFEQUVMSUFNZ0cwc0VRQ0FJSUFJZ0cwRWtiR28yQWdRTEN5QUhRZEFBYWlRQURBSUxRZkNJQlVHZGpRRVFSMEdjRUJCSFFZd1pFRWRCNlFNUVNrSEhIUkJIUWVXTkFSQkhFRWtNQWd0QjhJZ0ZRWUdQQVJCSFFad1FFRWRCakJrUVIwR09CQkJLUWNjZEVFZEI1bzhCRUVjUVNRd0JDeENTQVNBblFlVHpBQkNYQVNNQVFSQnJJaElrQUFKQUFrQUNRQUpBSUFrb0FsUWlEaUFKS0FKQUlBa29BanhyUVNSdFNRUkFJQWtvQWhRZ0NTZ0NFQ0lDYTBFTWJTSUZJQWtvQWdoSERRRWdBaWdDQkNBQ0tBSUFhMEVNYlNJRUlBa29BZ3hIRFFJZ0VrRUFOZ0lNSUJKQ0FEY0NCQ0FKS0FJQUlBa29BZ1FqQUVFUWF5SVZKQUFnRWtFRWFpSVlJQmdvQWdBMkFnUWdHQ0FPRU1FRElBUWdCV3doRENBSktBSVVJQWtvQWhBaUQydEJERzBoQnJJZ0JMS1ZqU0Vzc2lBRnNwV05JU3RCQUNFYkEwQUNRQUpBSUFZZ0cwY0VRQ0FQSUJ0QkRHeHFJZ0lvQWdRZ0FpZ0NBQ0lGYTBFTWJTRUVRUUFoQXd3QkN3Si9JQ3lMUXdBQUFFOWRCRUFnTEtnTUFRdEJnSUNBZ0hnTHNpRXhBbjhnSzR0REFBQUFUMTBFUUNBcnFBd0JDMEdBZ0lDQWVBdXlJUzFCQUNFREEwQWdDU2dDUUNBSktBSThJZ0pyUVNSdElBTk5CRUFnRGlBTWJTRVJJQWtvQWhBaEEwRUFJUUlEUUVFQUlSc2dDU2dDRkNBRGEwRU1iU0FDVFFSQUlCVkJFR29rQUF3RkN3TkFJQU1nQWtFTWJHb2lCQ2dDQkNBRUtBSUFJZ1JyUVF4dElCdE5CRUFnQWtFQmFpRUNEQUlGSUJFZ0JDQWJRUXhzYWlJSUtBSUVJZzhnQ0NnQ0FDSUVhMEVEZFNJRklBVWdFVXNiSWhvRVFDTUFRUkJySWc0a0FDQVBJQnBCQTNRaURDQUVJZ05xSWhCSEJFQWpBRUVRYXlJWkpBQURRQUpBSUE4Z0VFWU5BQUpBQWtBQ1FBSkFBa0FDUUNBUElBTnJRUU4xSWdRT0JBWUdBQUlCQ3lBRElBOUJDR3NpQkJDWUFVVU5CU0FES2dJQUlTc2dBeUFFS2dJQU9BSUFJQVFnS3pnQ0FDQURLQUlFSVFRZ0F5QVBRUVJySWdNb0FnQTJBZ1FnQXlBRU5nSUFEQVVMSUFSQkIwd0VRQ0FQUVFocklRWURRQ0FESUFaSEJFQWpBRUVRYXlJTkpBQWdEVUVBT2dBUEFrQWdEeUFESWdWR0RRQWdBeUVFQTBBZ0JFRUlhaUlFSUE5R0RRRWdCQ0FGSUFVZ0JCQ1lBUnNoQlF3QUN3QUxJQTFCRUdva0FDQURJQVZIQkVBZ0F5b0NBQ0VySUFNZ0JTb0NBRGdDQUNBRklDczRBZ0FnQXlnQ0JDRUVJQU1nQlNnQ0JEWUNCQ0FGSUFRMkFnUUxJQU5CQ0dvaEF3d0JDd3NNQlFzZ0F5QURJQVJCQW5SQmVIRnFJZ1FnRDBFSWF5SU5FTnNHSVFjZ0dTQUROZ0lNSUJrZ0RUWUNDQ0FFSUFNUW1BRkZCRUFEUUFKQUlCa2dHU2dDQ0VFSWF5SUdOZ0lJSUJrb0Fnd2lCU0FHUmcwQUlBUWdCaENZQVVVTkFRc0xJQmtvQWd3aEZpQUZJQVpHRFFNZ0Zpb0NBQ0VySUJZZ0dTZ0NDQ0lHS2dJQU9BSUFJQVlnS3pnQ0FDQVdLQUlFSVFVZ0ZpQUdLQUlFTmdJRUlBWWdCVFlDQkNBSFFRRnFJUWNMSUJrZ0dTZ0NERUVJYWlJRk5nSU1JQVVnR1NnQ0NFOE5BUU5BSUFRZ0JSQ1lBUVJBSUJrZ0dTZ0NERUVJYWlJRk5nSU1EQUVMQTBBZ0dTQVpLQUlJUVFocklnVTJBZ2dnQkNBRkVKZ0JSUTBBQ3lBWktBSU1JZ1lnR1NnQ0NDSU5Ud1JBSUFZaEJRd0RCU0FHS2dJQUlTc2dCaUFOS2dJQU9BSUFJQTBnS3pnQ0FDQUdLQUlFSVFVZ0JpQU5LQUlFTmdJRUlBMGdCVFlDQkNBWklBWkJDR29pQlRZQ0RDQVpLQUlJSUFRZ0JDQUdSaHNoQkNBSFFRRnFJUWNNQVFzQUN3QUxJQU1nQTBFSWFpQVBRUWhyRU5zR0dnd0RDd0pBSUFRZ0JVWU5BQ0FGSUFRUW1BRWdHU2dDRENFRlJRMEFJQVVxQWdBaEt5QUZJQVFxQWdBNEFnQWdCQ0FyT0FJQUlBVW9BZ1FoQmlBRklBUW9BZ1EyQWdRZ0JDQUdOZ0lFSUFkQkFXb2hCeUFaS0FJTUlRVUxJQVVnRUVZTkFnSkFJQWNOQUNBRElRUWdCU0FRU3dSQUEwQWdHU0FFUVFocUlnWTJBZ2dnQlNBR1JnMEZJQVFnQmhDWUFRMENJQmtvQWd3aEJTQVpLQUlJSVFRTUFBc0FDd05BSUJrZ0JVRUlhaUlFTmdJSUlBUWdEMFlOQkNBRklBUVFtQUVOQVNBWktBSUlJUVVNQUFzQUN5QURJQmtvQWd3aUJVRUlhaUFGSUJCTElnTWJJUVFnQlNBUElBTWJJUThNQVFzZ0dTQU5OZ0lJSUJrZ0ZrRUlhallDRENBTklBTVFtQUVnR1NnQ0RDRUVSUVJBQTBBZ0JDQVpLQUlJUmcwRElBUWdBeENZQVNBWktBSU1JUVlFUUNBR0tnSUFJU3NnQmlBWktBSUlJZ1VxQWdBNEFnQWdCU0FyT0FJQUlBWW9BZ1FoQkNBR0lBVW9BZ1EyQWdRZ0JTQUVOZ0lFSUJrZ0JrRUlhaUlFTmdJTUJTQVpJQVpCQ0dvaUJEWUNEQXdCQ3dzTElBUWdHU2dDQ0VZTkFRTkFBa0FDUUNBRUlBTVFtQUZGQkVBZ0dTZ0NEQ0VFREFFTEEwQWdHU0FaS0FJSVFRaHJJZ1EyQWdnZ0JDQURFSmdCRFFBTElCa29BZ3dpQkNBWktBSUlJZ1pQRFFFZ0JDb0NBQ0VySUFRZ0Jpb0NBRGdDQUNBR0lDczRBZ0FnQkNnQ0JDRUZJQVFnQmlnQ0JEWUNCQ0FHSUFVMkFnUUxJQmtnQkVFSWFpSUVOZ0lNREFFTEN5QUVJQkJMRFFFTElBUWhBd3dCQ3dzZ0dVRVFhaVFBQ3lBT1FSQnFKQUFDUUNBYUlBZ29BZ1FnQ0NnQ0FDSURhMEVEZFUwTkFDQURLZ0lBSUFNZ0RHb3FBZ0JnRFFCQjhJZ0ZRYUtRQVJCSFFad1FFRWRCakJrUVIwR1ZCUkJLUWNjZEVFZEIzSkFCRUVjUVNRd1BDMEVBSVFNRFFDQURJQnBIQkVBZ0dDQUpLQUk4SUFnb0FnQWdBMEVEZEdvb0FnUkJKR3hxRUtvQ0lBTkJBV29oQXd3QkN3c2dDU2dDRUNFREN5QWJRUUZxSVJzTUFRc0FDd0FMQUFVZ0NTZ0NFQUovSUFJZ0EwRWtiR29pQkNvQ0FDQXRsU0lyaTBNQUFBQlBYUVJBSUN1b0RBRUxRWUNBZ0lCNEMwRU1iR29vQWdBZ0JDb0NCQ0VzSUFRcUFoZ2hLeUFWSUFNMkFnd2dGU0FyaXpnQ0NBSi9JQ3dnTVpVaUs0dERBQUFBVDEwRVFDQXJxQXdCQzBHQWdJQ0FlQXRCREd4cUlnOENmeUFQS0FJRUlnSWdEeWdDQ0VrRVFDQUNJQlVwQWdnM0FnQWdBa0VJYWd3QkN5TUFRU0JySWdZa0FDQVBLQUlFSUE4b0FnQnJRUU4xUVFGcUlnVkJnSUNBZ0FKUEJFQVE4QUVBQ3lBR1FReHFRZi8vLy84QklBOG9BZ2dnRHlnQ0FHc2lCRUVDZFNJQ0lBVWdBaUFGU3hzZ0JFSDQvLy8vQjA4YklBOG9BZ1FnRHlnQ0FHdEJBM1VnRDBFSWFoQ3BBeUlFS0FJSUlCVXBBZ2czQWdBZ0JDQUVLQUlJUVFocU5nSUlJQThnQkJDb0F5QVBLQUlFSUFRUXB3TWdCa0VnYWlRQUN6WUNCQ0FEUVFGcUlRTU1BUXNBQ3dBTEEwQWdBeUFFUndSQUlBVWdBMEVNYkdvaUFpQUNLQUlBTmdJRUlBTkJBV29oQXd3QkN3c2dHMEVCYWlFYkRBRUxDeUFKS0FJOElRSWdDU0FTS0FJRUlnUTJBandnRWlBQ05nSUVJQWtvQWtBaEFpQUpJQklvQWdnaUF6WUNRQ0FTSUFJMkFnZ2dDU2dDUkNFQ0lBa2dFaWdDRERZQ1JDQVNJQUkyQWd3Z0NTZ0NWQ0FESUFSclFTUnRTUTBESUJnUVZob0xJQkpCRUdva0FBd0RDMEh3aUFWQnU0SUJFRWRCbkJBUVIwR01HUkJIUWNZREVFcEJ4eDBRUjBHVWhRRVFSeEJKREFNTFFmQ0lCVUhFaGdFUVIwR2NFQkJIUVl3WkVFZEJ4d01RU2tISEhSQkhRWlNGQVJCSEVFa01BZ3RCOElnRlFlR0hBUkJIUVp3UUVFZEJqQmtRUjBIVkF4QktRY2NkRUVkQnVJc0JFRWNRU1F3QkN4Q1NBU0FuUWFqMUFCQ1hBVUVBSVFOQkFDRVZJd0JCTUdzaUd5UUFBa0FnQ1MwQUhFVUVRQ0FKS0FKQUlBa29BandpQkd0QkpHMGhBZ05BSUFJZ0EwWU5BaUFFSUFOQkpHeHFRUUEyQWdnZ0EwRUJhaUVEREFBTEFBc2dDU0FKS0FKSU5nSk1JQWxCeUFCcUloZ2dDU2dDUUNBSktBSThheERCQTBFQUlRY0NRQUpBQTBBZ0NpZ0NDQ0FLS0FJRUlnTnJRUVYxSUFkTEJFQWdBeUFIUVFWMElnSnFJZ01vQWdRaURTQURLQUlNUVFKMlJ3MENJQU1vQWdnaER5QUpLQUtFQVNBQ2FpZ0NHQ0lFSUFNb0FoZ2lCaW9DQkNBR0tnSUFJaXVUSWl3Z0xKUWdCaUFOUVFKMGFpSUZLZ0lBSUN1VElpc2dLNVNTa1RnQ0JDQUVJQ3NnTEJEU0FidEVHQzFFVlBzaENVQ2d0amdDQUVFQklBMUJBV3NpQWlBQ1FRRk5HeUVPSUFaQkJHb2hDQ0FGSVFOQkFTRVJBMEFDUUNBRVFRaHFJUUlnQ0VFRWF5b0NBQ0VzSUFNcUFnUWhMU0FPSUJGR0JFQWdCQ0FJS2dJQUlpc2dMSk1pTENBc2xDQXRJQ3VUSWlzZ0s1U1NrVGdDRENBRUlDc2dMQkRTQWJ0RUdDMUVWUHNoQ1VDZ3RqZ0NDRUVCSUE5QkFXc2lEQ0FNUVFGTkd5RVBJQVVnRFVFQ2RHb2hDQ0FHSVFOQkFTRVJBMEFnRHlBUlJnUkFJQUpCQ0dvaEJDQUNJQVlnRENBTmJFRUNkR29pQXlvQ0JDQURLZ0lBSWl1VElpd2dMSlFnS3lBRElBMUJBblJySWdVcUFnQ1RJaXNnSzVTU2tUZ0NEQ0FDSUNzZ0xCRFNBYnRFR0MxRVZQc2hDVUNndGpnQ0NDQURRUVJxSVFKQkFTRUlBMEFnQlVFRWFpRUZJQWdnRGtZTkJDQUVJQUpCQkdvaUF5b0NBQ0FDUVFScktnSUFreUlzSUN5VUlBSXFBZ0FnQlNvQ0FKTWlLeUFybEpLUk9BSU1JQVFnS3lBc0VOSUJ1MFFZTFVSVSt5RUpRS0MyT0FJSUlBaEJBV29oQ0NBRVFRaHFJUVFnQXlFQ0RBQUxBQXNnQWlBRktnSUVJQVVxQWdDVElpd2dMSlFnQ0NvQ0FDQURLZ0lBa3lJcklDdVVrcEU0QWd3Z0FpQXJJQ3dRMGdHN1JCZ3RSRlQ3SVFsQW9MWTRBZ2dnQWtFUWFpRUNJQVZCQkdvaEJFRUJJUVVEUUNBRklBNUdCRUFnQWlBRUtnSUFJQVJCQkdzcUFnQ1RJaXdnTEpRZ0NDb0NCQ0FES2dJRWt5SXJJQ3VVa3BFNEFnUWdBaUFySUN3UTBnRzdSQmd0UkZUN0lRbEFvTFk0QWdBZ0VVRUJhaUVSSUFoQkNHb2hDQ0FEUVFocUlRTWdCRUVFYWlFRkRBSUZJQUlnQkNvQ0JDQUVRUVJyS2dJQWt5SXNJQ3lVSUFoQkJHb2lDQ29DQUNBRFFRUnFJZ01xQWdDVElpc2dLNVNTa1RnQ0JDQUNJQ3NnTEJEU0FidEVHQzFFVlBzaENVQ2d0amdDQUNBRlFRRnFJUVVnQWtFSWFpRUNJQVJCQkdvaEJBd0JDd0FMQUFzQUJTQURRUVJxSVFNZ0NDb0NBQ0VySUFRZ0NFRUVhaUlJS2dJQUlDeVRJaXdnTEpRZ0xTQXJreUlySUN1VWtwRTRBZ3dnQkNBcklDd1EwZ0c3UkJndFJGVDdJUWxBb0xZNEFnZ2dFVUVCYWlFUklBSWhCQXdDQ3dBTEN5QUVJQUlxQWdBaUt5QUNRUVJyS2dJQWt5SXNJQ3lVSUNzZ0JTb0NBSk1pS3lBcmxKS1JPQUlNSUFRZ0t5QXNFTklCdTBRWUxVUlUreUVKUUtDMk9BSUlJQWRCQVdvaEJ3d0JDd3NNQVF0QjhJZ0ZRZW9LRUVkQitBNFFSMEdNR1JCSFFlQUFFRXBCeHgwUVIwSFlIeEJIRUVrTUFnc2dDVUU4YWlFSUEwQWdDU2dDUUNBSktBSThJZ0pyUVNSdElCVk5CRUFnQ0NBWUVLZ0VEQUlMSUFJZ0ZVRWtiQ0lRYWlJREtnSWNJQU1xQWdSREFBQ0FQMEVCSUFNb0Fnd2lBblN5bFNJMWxDQTFRd0FBQUQrVVF3QUFBTCtTSWpHU0lUSWdBeW9DQUNFdFF3QUFBQUFoS3lBS0lBSkJBQkRmQVNFQ1F3QUFBQUFoTEFKQUlDMGdOWlFnTVpJaU1VTUFBQUFBWFEwQUlBSW9BZ1JCQVd1eklpMGdNU0lzWFVVTkFDQXRJU3dMSURXVUlTOGdDaUFJS0FJQUlCQnFLQUlNUVFBUTN3RWhBZ0pBSURKREFBQUFBRjBOQUNBQ0tBSUlRUUZyc3lJdElESWlLMTFGRFFBZ0xTRXJDeUFKS0FLUUFTRU9JQWtvQWp3Z0VHb2lBaWdDRENFRElBSW9BaEFoQWlNQVFUQnJJZ2NrQUFKQUlDeERBQUFBQUdBRVFDQUpLQUtFQVNBSktBSmdJQU5zUVFWMGFpQUNRUVYwYWlJV0tBSUVJZ2F6SUN4ZUJFQWdLME1BQUFBQVlBUkFJQllvQWdnaUJMTWdLMTRFUUNBV0tBSVFRUUpHQkVBZ0cwRUFOZ0lzQW44Z0xFTUFBQUEva2lJdGkwTUFBQUJQWFFSQUlDMm9EQUVMUVlDQWdJQjRDeUlSUVFCSUlBWWdFVTF5QW44Z0swTUFBQUEva2lJdGkwTUFBQUJQWFFSQUlDMm9EQUVMUVlDQWdJQjRDeUlGUVFCSUlBUWdCVTF5Y2cwRklBa3FBbXdoTVNBSktnSm9JUzBnQ1NnQ2VDSUNRUUFnQ1NnQ2ZDQUNhL3dMQUFKL0lERkRBQUNBUHlBdklDMlVJaTBnTFVNQUFJQS9YUnNpTXBRaU1VTUFBQUEva2lJdGkwTUFBQUJQWFFSQUlDMm9EQUVMUVlDQWdJQjRDeUlOSUFWcUlnTWdCRUVCYXlJQ0lBSWdBMG9iSVF3Z0JTQU5heUlDUVFBZ0FrRUFTaHNoQlNBTklCRnFJZ01nQmtFQmF5SUNJQUlnQTBvYklROGdFU0FOYXlJQ1FRQWdBa0VBU2hzaEEwTUFBSUMvSURJZ01wUWlMU0F0a3BVaEx5QXhJREdValNFeUEwQUNRQ0FGSUF4S0JFQkJBQ0VDREFFTElBV3pJQ3VUSWkwZ0xaUWhNU0FXSUFVUVd5RUdJQU1oQWdOQUlBSWdEMG9FUUNBRlFRRnFJUVVNQXdzZ01TQUNzeUFza3lJdElDMlVraUl0SURKZVJRUkFBa0FnQmlBQ1FRTjBhaUlFS2dJQUlBa29BbVFpRXJLVXUwUjN5TWx0TUYvRVA2SzJJVFVnTHlBdGxDSXRJQzBnTFNBdElDMGdMVU1BQU1CQWtwUkRBQUR3UVpLVVF3QUE4RUtTbEVNQUFMUkRrcFJEQUFBMFJKS1VRd0FBTkVTU3UwUTViRkwrYThGV1A2SzJJQVFxQWdTVUlUWUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBa29BbmdpR2dSQUlEVkRBQUFBUDVKREFBQUFBRjVGRFFFZ05VTUFBQUMva2lJdElCS3lYVVVOQVNBMlF3QUFBQUJnUlEwQ0lCSkJBRWdOQXdKL0lDMk9JaTJMUXdBQUFFOWRCRUFnTGFnTUFRdEJnSUNBZ0hnTEloRkJBV29nRW04aERTQVJJQkpxSUJKdklRUkRBQUNBUHlBMUlCR3lrME1BQUFDL2tpSTFreUl0UXdBQUFBQmdSUTBFSURWREFBQUFBR0JGRFFVZ0JFRUFTQTBHSUExQkFFZ05CeUFhSUFSQkFuUnFJZ1FnTFNBMmxDQUVLZ0lBa2pnQ0FDQWFJQTFCQW5ScUlnUWdOU0EybENBRUtnSUFramdDQUF3SkMwSHdpQVZCejkwQUVFZEJwT0FBRUVkQmpCa1FSMEdMQVJCS1FjY2RFRWRCNytJQUVFY1FTUXdIQzBId2lBVkJtZVlBRUVkQnBPQUFFRWRCakJrUVIwR01BUkJLUWNjZEVFZEJ4dWNBRUVjUVNRd0dDMEh3aUFWQnllb0FFRWRCcE9BQUVFZEJqQmtRUjBHTkFSQktRY2NkRUVkQnFPd0FFRWNRU1F3RkMwSHdpQVZCMXUwQUVFZEJwT0FBRUVkQmpCa1FSMEdPQVJCS1FjY2RFRWRCcGU4QUVFY1FTUXdFQzBId2lBVkI5ZkVBRUVkQnBPQUFFRWRCakJrUVIwR1dBUkJLUWNjZEVFZEJ0dklBRUVjUVNRd0RDMEh3aUFWQmlmVUFFRWRCcE9BQUVFZEJqQmtRUjBHWEFSQktRY2NkRUVkQnNQWUFFRWNRU1F3Q0MwSHdpQVZCMFBjQUVFZEJwT0FBRUVkQmpCa1FSMEdZQVJCS1FjY2RFRWRCaC9vQUVFY1FTUXdCQzBId2lBVkJodnNBRUVkQnBPQUFFRWRCakJrUVIwR1pBUkJLUWNjZEVFZEI3UDBBRUVjUVNRc01EUXNMSUFKQkFXb2hBZ3dBQ3dBTEN3TkFJQWtvQW5BZ0Frb0VRQ0FIUWNTMEFTZ0NBRFlDS0NBSFFieTBBU2tDQURjRElDQUpLQUo0SWc4Z0NTZ0NaRUVCYXlJR1FRSjBhaUlFS2dJQUlTc2dEeW9DQUNFc1FRQWhCUU5BSUFVZ0JrWUVRQ0FQSUFaQkFuUnFJQWNxQWlnZ0xKUWdCeW9DSUNBcmxDQUhLZ0lrSUFRcUFnQ1VrcEk0QWdBRklBOGdCVUVDZENJRGFpQUhLZ0lvSUE4Z0JVRUJhaUlGUVFKMGFpb0NBSlFnQnlvQ0lDQXJsQ0FESUE5cUtnSUFJaXNnQnlvQ0pKU1NramdDQUF3QkN3c2dBa0VCYWlFQ0RBRUxDMEVBSVFJZ0NTZ0NaQ0lEUVFBZ0EwRUFTaHNoQlNBSktBSjRJUVJEQUFBQUFDRXNBMEFnQWlBRlJnUkFBa0FnTEVNQUFBQUFXdzBJSUN4REFBQUFBRjVGRFFCQkFDRUNBMEFnQWlBRFRnMEpJQWNnQXJNaUt6Z0NJQ0FISUFrb0FuZ2lCaUFDUVFKMGFpSUZLZ0lBSWpJNEFpUWdCeUFDUVFGcklnU3lPQUlZSUFjZ0JpQURJQVJxSUFOdlFRSjBhaW9DQUNJeE9BSWNJQWNnQWtFQmFpSUNzemdDRUNBSElBWWdBaUFEYWlBRGIwRUNkR29xQWdBaUxUZ0NGQ0F0SURKZFJTQUZLZ0lBSUN3Z0NTb0NkSlJlUlNBeElESmRSWEp5RFFCREFBQUFBQ0UxQWtBZ0J5b0NHQ0k1SUFjcUFpQWlOcE1pTDBNQUFBQUFYQ0FIS2dJUUlpMGdOcE1nTFNBNWt5SXRsQ0l5UXdBQUFBQmNJQzhnTFpRaU1VTUFBQUFBWEhGeElnTkZCRUFnQjBFQU5nSU1JQWRCQURZQ0NBd0JDeUFISUFjcUFoUWdCeW9DSkNJdGt5QXlsU0FIS2dJY0lDMlRJREdWa3lJdE9BSU1JQWNnTFNBMklEYVVJRGtnT1pRaU1aT1VJQWNxQWh3Z0J5b0NKSk9TSUMrVklpMDRBZ2dnQnlvQ0hDQUhLZ0lNSURHVWt5QXRJQWNxQWhpVWt5RTFDeUFISURVNEFnUUNRQ0FEUlEwQUlBY3FBZ3dpTFVNQUFBQUFXdzBBSUFjcUFnaU1JQzBnTFpLVklTc0xJQTRnR3lnQ0xDSUZRUUowYWdKOElDdERBQUFBUDVJZ0NTZ0NaTElpSzVJZ0s1VzdSQmd0UkZUN0lSbEFvaUtBQWIwaW5BRkNOSWluUWY4UGNTSURRZjhQUmdSQUlJQUJSQmd0UkZUN0lSbEFvaUtBQVNDQUFhTU1BUXNnbkFGQ0FZWWltd0ZDc0xTaHhPcitrSm1BZjFnRVFDQ0FBVVFBQUFBQUFBQUFBS0lnZ0FFZ213RkNzTFNoeE9yK2tKbUFmMUViREFFTEFuNGdBMFVFUUVFQUlRTWduQUZDRElZaW13RkNBRmtFUUFOQUlBTkJBV3NoQXlDYkFVSUJoaUtiQVVJQVdRMEFDd3NnbkFGQkFTQURhNjJHREFFTElKd0JRdi8vLy8vLy8vOEhnMEtBZ0lDQWdJQ0FDSVFMSVpzQklBTkJnUWhLQkVBRFFBSkFJSnNCUXBqYWtLSzF2OGdNZlNLZEFVSUFVdzBBSUowQklwc0JRZ0JTRFFBZ2dBRkVBQUFBQUFBQUFBQ2lEQU1MSUpzQlFnR0dJWnNCSUFOQkFXc2lBMEdCQ0VvTkFBdEJnUWdoQXdzQ1FDQ2JBVUtZMnBDaXRiL0lESDBpblFGQ0FGTU5BQ0NkQVNLYkFVSUFVZzBBSUlBQlJBQUFBQUFBQUFBQW9nd0JDeUNiQVVMLy8vLy8vLy8vQjFnRVFBTkFJQU5CQVdzaEF5Q2JBVUtBZ0lDQWdJQ0FCRlFnbXdGQ0FZWWhtd0VOQUFzTElKd0JRb0NBZ0lDQWdJQ0FnSCtESUpzQlFvQ0FnSUNBZ0lBSWZTQURyVUkwaG9RZ213RkJBU0FEYTYySUlBTkJBRW9iaEw4THRqZ0NBQ0FiSUFWQkFXbzJBaXdnQ1NnQ1pDRUREQUFMQUFzRklBUWdBa0VDZEdvcUFnQWlLeUFzSUNzZ0xGNGJJU3dnQWtFQmFpRUNEQUVMQzBId2lBVkJ4ZGdBRUVkQitBNFFSMEdNR1JCSFFkb0JFRXBCeHgwUVIwSHMyZ0FRUnhCSkRBZ0xRZkNJQlVHbDBRQVFSMEg0RGhCSFFZd1pFRWRCL2dBUVNrSEhIUkJIUWZuVEFCQkhFRWtNQnd0QjhJZ0ZRY3pJQUJCSFFmZ09FRWRCakJrUVIwSDZBQkJLUWNjZEVFZEIxOHNBRUVjUVNRd0dDMEh3aUFWQm96NFFSMEg0RGhCSFFZd1pFRWRCK1FBUVNrSEhIUkJIUWEzQkFCQkhFRWtNQlF0QjhJZ0ZRZEkwRUVkQitBNFFSMEdNR1JCSFFmZ0FFRXBCeHgwUVIwRzRPQkJIRUVrTUJBdEI4SWdGUWRvbkVFZEIrQTRRUjBHTUdSQkhRZmNBRUVwQnh4MFFSMEd2S3hCSEVFa01Bd3NnQjBFd2FpUUFRUUFoQXdOQUlCc29BaXdnQTB3RVFDQVZRUUZxSVJVTUFnVWdHMEVJYWlJQ0lBa29BandnRUdwQkpQd0tBQUFnR3lBSktBS1FBU0FEUVFKMGFpb0NBRGdDRUNBWUlBSVFxZ0lnQTBFQmFpRUREQUVMQUFzQUN3QUxJQnRCTUdva0FCQ1NBU0FuUVNCcUpBQU1BUXNRV0FBTElCY29Ba0FnRnlnQ1BHdEJKRzBoQWlNQVFSQnJJZ01rQUNBaVFRUnFJZzFCQURZQ0NDQU5RZ0EzQWdBZ0F5QU5OZ0lJSUFJRVFDQU5JQUlRb3dZZ0RTQUNFS1lHQ3lBRFFRRTZBQXdnQTBFSWFoRFNBaUFEUVJCcUpBQWdGeWdDUUNBWEtBSThJZ1ZyUVNSdElRUWdEU2dDQUNFQ1FRQWhBd05BSUFNZ0JFWU5CaUFGSUFOQkpHeHFJaGNxQWhnaExDQVhLZ0lJSVNzZ0Z5a0NBQ0diQVNBQ0lBTkJGR3hxSWdZZ0Z5b0NIRGdDRENBR0lKc0JOd0lBSUFZZ0t6Z0NDQ0FHSUN4REFBQUFBRjQ2QUJBZ0EwRUJhaUVEREFBTEFBdEI4SWdGUWUvQ0FCQkhRY2ZHQUJCSFFhSE9BQkJIUWRRQkVFcEIrZEVBRUVkQjZkTUFFRWNRU1F3SEMwSHdpQVZCemRjQUVFZEJ4OFlBRUVkQm9jNEFFRWRCMVFFUVNrSDUwUUFRUjBHdzJ3QVFSeEJKREFZTFFmQ0lCVUh5M2dBUVIwSEh4Z0FRUjBHaHpnQVFSMEhXQVJCS1FmblJBQkJIUVlYZ0FCQkhFRWtNQlF0QjhJZ0ZRZDNqQUJCSFFjZkdBQkJIUWFIT0FCQkhRZGNCRUVwQitkRUFFRWRCb2VVQUVFY1FTUXdFQzBId2lBVkJnZWdBRUVkQng4WUFFRWRCb2M0QUVFZEIyQUVRU2tINTBRQVFSMEdoNVFBUVJ4QkpEQU1MUVFocUloTkI0QUEyQWdBZ0V5QU5LQUlFSUEwb0FnQnJRUlJ0RUlRR0lBc3FBdHdFSVRrZ0N5b0M0QVFoTmlBTEtnTGtCQ0UxSUFzcUF1Z0VJUzhnQ3lvQzdBUWhNaUFMS2dMd0JDRXhJQXNxQXZRRUlTMGdDeW9DK0FRaExFRUFJUU5CQUNFVUFrQUNRQ0FLQkVBZ0V5Z0NGQ0FUS0FJUWF5QU5LQUlFSWc0Z0RTZ0NBQ0lFYTBjTkFRTkFJQTRnQkd0QkZHMGlBaUFVVFFSQUlBSWdBMGNFUUVId2lBVkJoem9RUjBHZkZ4QkhRYWtkRUVkQjZRUVFTa0daSWhCSFFmSThFRWNRU1F3SUN3VWdFeWdDQkNBVEtBSUFJQU5zYWlFT0l3QkJvQUZySWhja0FDTUFRUkJySWdZa0FDQUxLZ0xrQWlFL0lBc3FBdWdDSVVBZ0N5b0MzQUloUVNBTEtnTGdBaUZDSUFzcUF0UUNJVU1nQ3lvQzJBSWhSQ0FMS2dMTUFpRkZJQXNxQXRBQ0lVWWdDeW9DeEFJaFJ5QUxLZ0xJQWlGSUlBc3FBcndDSVVrZ0N5b0N3QUloU2lBTEtnS1VBeUZMSUFzcUFwZ0RJVXdnQ3lvQ2pBTWhUU0FMS2dLUUF5Rk9JQXNxQW9RRElVOGdDeW9DaUFNaFVDQUxLZ0w4QWlGUklBc3FBb0FESVZJZ0N5b0M5QUloVXlBTEtnTDRBaUZVSUFzcUF1d0NJVlVnQ3lvQzhBSWhWaUFMS2dMRUF5RlhJQXNxQXNnRElWZ2dDeW9DdkFNaFdTQUxLZ0xBQXlGYUlBc3FBclFESVZzZ0N5b0N1QU1oWENBTEtnS3NBeUZkSUFzcUFyQURJVjRnQ3lvQ3BBTWhYeUFMS2dLb0F5RmdJQXNxQXB3RElXRWdDeW9Db0FNaFlpQUxLZ0wwQXlGaklBc3FBdmdESVdRZ0N5b0M3QU1oWlNBTEtnTHdBeUZtSUFzcUF1UURJV2NnQ3lvQzZBTWhhQ0FMS2dMY0F5RnBJQXNxQXVBRElXb2dDeW9DMUFNaGF5QUxLZ0xZQXlGc0lBc3FBc3dESVcwZ0N5b0MwQU1oYmlBTEtnS2tCQ0Z2SUFzcUFxZ0VJWEFnQ3lvQ25BUWhjU0FMS2dLZ0JDRnlJQXNxQXBRRUlYTWdDeW9DbUFRaGRDQUxLZ0tNQkNGMUlBc3FBcEFFSVhZZ0N5b0NoQVFoZHlBTEtnS0lCQ0Y0SUFzcUF2d0RJWGtnQ3lvQ2dBUWhlaUFMS2dMVUJDRjdJQXNxQXRnRUlYd2dDeW9DekFRaGZTQUxLZ0xRQkNGK0lBc3FBc1FFSVg4Z0N5b0N5QVFoUGlBTEtnSzhCQ0U3SUFzcUFzQUVJVHdnQ3lvQ3RBUWhQU0FMS2dLNEJDRTZJQVFnRkVFVWJDSU1haUlDS2dJQUlUTWdBaW9DQkNFMElBc3FBcXdFSVRjZ0N5b0NzQVFoT0NBQ0tnSUlJUzRnQ2lBR1FReHFJZ1VnQmtFSWFpSUVJQzFEQUFDQVB5QXNJQUlxQWd5VUlpc2dLME1BQUlBL1hSc2lLNVFRZ1FJZ0Z5SUNJQW9nTXlBM0lDc2dMaERDQlpRaU1KUWdPQ0FySUM0UW1BV1VJaTZVazVJZ05DQXVJRGVVSURBZ09KU1NraUFHS0FJTUlBWW9BZ2dRWnpnQ0FDQUNJQW9nTXlBd0lEMlVJRG9nTHBTVGtpQTBJQzRnUFpRZ01DQTZsSktTSUFZb0Fnd2dCaWdDQ0JCbk9BSUVJQUlnQ2lBeklEQWdPNVFnUENBdWxKT1NJRFFnTGlBN2xDQXdJRHlVa3BJZ0JpZ0NEQ0FHS0FJSUVHYzRBZ2dnQWlBS0lETWdNQ0IvbENBK0lDNlVrNUlnTkNBdUlIK1VJREFnUHBTU2tpQUdLQUlNSUFZb0FnZ1FaemdDRENBQ0lBb2dNeUF3SUgyVUlINGdMcFNUa2lBMElDNGdmWlFnTUNCK2xKS1NJQVlvQWd3Z0JpZ0NDQkJuT0FJUUlBSWdDaUF6SURBZ2U1UWdmQ0F1bEpPU0lEUWdMaUI3bENBd0lIeVVrcElnQmlnQ0RDQUdLQUlJRUdjNEFoUWdDaUFGSUFRZ01TQXJsQkNCQWlBQ0lBb2dNeUF3SUhtVUlIb2dMcFNUa2lBMElDNGdlWlFnTUNCNmxKS1NJQVlvQWd3Z0JpZ0NDQkJuT0FJWUlBSWdDaUF6SURBZ2Q1UWdlQ0F1bEpPU0lEUWdMaUIzbENBd0lIaVVrcElnQmlnQ0RDQUdLQUlJRUdjNEFod2dBaUFLSURNZ01DQjFsQ0IySUM2VWs1SWdOQ0F1SUhXVUlEQWdkcFNTa2lBR0tBSU1JQVlvQWdnUVp6Z0NJQ0FDSUFvZ015QXdJSE9VSUhRZ0xwU1RraUEwSUM0Z2M1UWdNQ0IwbEpLU0lBWW9BZ3dnQmlnQ0NCQm5PQUlrSUFJZ0NpQXpJREFnY1pRZ2NpQXVsSk9TSURRZ0xpQnhsQ0F3SUhLVWtwSWdCaWdDRENBR0tBSUlFR2M0QWlnZ0FpQUtJRE1nTUNCdmxDQndJQzZVazVJZ05DQXVJRytVSURBZ2NKU1NraUFHS0FJTUlBWW9BZ2dRWnpnQ0xDQUtJQVVnQkNBeUlDdVVFSUVDSUFJZ0NpQXpJREFnYlpRZ2JpQXVsSk9TSURRZ0xpQnRsQ0F3SUc2VWtwSWdCaWdDRENBR0tBSUlFR2M0QWpBZ0FpQUtJRE1nTUNCcmxDQnNJQzZVazVJZ05DQXVJR3VVSURBZ2JKU1NraUFHS0FJTUlBWW9BZ2dRWnpnQ05DQUNJQW9nTXlBd0lHbVVJR29nTHBTVGtpQTBJQzRnYVpRZ01DQnFsSktTSUFZb0Fnd2dCaWdDQ0JCbk9BSTRJQUlnQ2lBeklEQWdaNVFnYUNBdWxKT1NJRFFnTGlCbmxDQXdJR2lVa3BJZ0JpZ0NEQ0FHS0FJSUVHYzRBandnQWlBS0lETWdNQ0JsbENCbUlDNlVrNUlnTkNBdUlHV1VJREFnWnBTU2tpQUdLQUlNSUFZb0FnZ1FaemdDUUNBQ0lBb2dNeUF3SUdPVUlHUWdMcFNUa2lBMElDNGdZNVFnTUNCa2xKS1NJQVlvQWd3Z0JpZ0NDQkJuT0FKRUlBb2dCU0FFSUM4Z0s1UVFnUUlnQWlBS0lETWdNQ0JobENCaUlDNlVrNUlnTkNBdUlHR1VJREFnWXBTU2tpQUdLQUlNSUFZb0FnZ1FaemdDU0NBQ0lBb2dNeUF3SUYrVUlHQWdMcFNUa2lBMElDNGdYNVFnTUNCZ2xKS1NJQVlvQWd3Z0JpZ0NDQkJuT0FKTUlBSWdDaUF6SURBZ1haUWdYaUF1bEpPU0lEUWdMaUJkbENBd0lGNlVrcElnQmlnQ0RDQUdLQUlJRUdjNEFsQWdBaUFLSURNZ01DQmJsQ0JjSUM2VWs1SWdOQ0F1SUZ1VUlEQWdYSlNTa2lBR0tBSU1JQVlvQWdnUVp6Z0NWQ0FDSUFvZ015QXdJRm1VSUZvZ0xwU1RraUEwSUM0Z1daUWdNQ0JhbEpLU0lBWW9BZ3dnQmlnQ0NCQm5PQUpZSUFJZ0NpQXpJREFnVjVRZ1dDQXVsSk9TSURRZ0xpQlhsQ0F3SUZpVWtwSWdCaWdDRENBR0tBSUlFR2M0QWx3Z0NpQUZJQVFnTlNBcmxCQ0JBaUFDSUFvZ015QXdJRldVSUZZZ0xwU1RraUEwSUM0Z1ZaUWdNQ0JXbEpLU0lBWW9BZ3dnQmlnQ0NCQm5PQUpnSUFJZ0NpQXpJREFnVTVRZ1ZDQXVsSk9TSURRZ0xpQlRsQ0F3SUZTVWtwSWdCaWdDRENBR0tBSUlFR2M0QW1RZ0FpQUtJRE1nTUNCUmxDQlNJQzZVazVJZ05DQXVJRkdVSURBZ1VwU1NraUFHS0FJTUlBWW9BZ2dRWnpnQ2FDQUNJQW9nTXlBd0lFK1VJRkFnTHBTVGtpQTBJQzRnVDVRZ01DQlFsSktTSUFZb0Fnd2dCaWdDQ0JCbk9BSnNJQUlnQ2lBeklEQWdUWlFnVGlBdWxKT1NJRFFnTGlCTmxDQXdJRTZVa3BJZ0JpZ0NEQ0FHS0FJSUVHYzRBbkFnQWlBS0lETWdNQ0JMbENCTUlDNlVrNUlnTkNBdUlFdVVJREFnVEpTU2tpQUdLQUlNSUFZb0FnZ1FaemdDZENBS0lBVWdCQ0EySUN1VUVJRUNJQUlnQ2lBeklEQWdTWlFnU2lBdWxKT1NJRFFnTGlCSmxDQXdJRXFVa3BJZ0JpZ0NEQ0FHS0FJSUVHYzRBbmdnQWlBS0lETWdNQ0JIbENCSUlDNlVrNUlnTkNBdUlFZVVJREFnU0pTU2tpQUdLQUlNSUFZb0FnZ1FaemdDZkNBQ0lBb2dNeUF3SUVXVUlFWWdMcFNUa2lBMElDNGdSWlFnTUNCR2xKS1NJQVlvQWd3Z0JpZ0NDQkJuT0FLQUFTQUNJQW9nTXlBd0lFT1VJRVFnTHBTVGtpQTBJQzRnUTVRZ01DQkVsSktTSUFZb0Fnd2dCaWdDQ0JCbk9BS0VBU0FDSUFvZ015QXdJRUdVSUVJZ0xwU1RraUEwSUM0Z1FaUWdNQ0JDbEpLU0lBWW9BZ3dnQmlnQ0NCQm5PQUtJQVNBQ0lBb2dNeUF3SUQrVUlFQWdMcFNUa2lBMElDNGdQNVFnTUNCQWxKS1NJQVlvQWd3Z0JpZ0NDQkJuT0FLTUFTQUtJQVVnQkNBNUlDdVVFSUVDSUFJZ0NpQXpJRFFnQmlnQ0RDQUdLQUlJRUdjNEFwQUJJQVpCRUdva0FFRUFJUVpCQUNFRklBNUJBRUhVQVB3TEFFRWtJUmdEUUNBRlFTVkdCRUFDUUNBR1Fab0ZSZzBBUWZDSUJVR3VqQUVRUjBHZkZ4QkhRYWtkRUVkQm1nTVFTa0daSWhCSFFZQ05BUkJIRUVrUVdBQUxCU0FHSUJocUlRUWdGeUFGUVFKMGFpRUpJQVZCQVdvaUFpRUZBMEFnQkNBR1J3UkFJQTRnQmtFSWJXb2lEeUFQTFFBQUlBa3FBZ0FnRnlBRlFRSjBhaW9DQUYwZ0JrRUhjWFJ5T2dBQUlBVkJBV29oQlNBR1FRRnFJUVlNQVFzTElCaEJBV3NoR0NBRUlRWWdBaUVGREFFTEN5QVhRYUFCYWlRQUlCTW9BaEFnQTBFVWJHb2lCQ0FOS0FJQUlBeHFJZ0lwQWdBM0FnQWdCQ0FDTFFBUU9nQVFJQVFnQWlrQ0NEY0NDQ0FEUVFGcUlRTWdGRUVCYWlFVUlBMG9BZ0FoQkNBTktBSUVJUTRNQVFzTElCTWdBeENFQmd3Q0MwSHdpQVZCbUJRUVIwR2ZGeEJIUWFrZEVFZEJtUVFRU2tHWkloQkhRYlFsRUVjUVNRd0VDMEh3aUFWQmh5NFFSMEdmRnhCSFFha2RFRWRCbWdRUVNrR1pJaEJIUWZVeUVFY1FTUXdEQ3lBTkVGWWFJQ0pCRUdva0FCQ1NBUkNlQmlBZEVJTUdJQXNvQWtBaUFpZ0NHQ0VESUFJb0Fod2hBaUFtUWNFNk5nSUFJQ1pCMGJZQk5nSUlJQ1lnSmlnQ0VDQWRJQ1lzQUJ0QkFFZ2JOZ0lFSUNZZ0FpQURhMEVVYlRZQ0RFRzZqd0VnSmhEK0JTQWRFRXdhSUFzb0FrQWhIU01BUWVBQWF5SVFKQUFnQzBGL05nSVlJQXNnQ3lnQ0REWUNFQ0FMUVJ4cUlRa2dDMEdVQm1vaERpQUxRWXdGYWlFVElBdEIvQVJxSVJVZ0MwSFFBR29oR0NBZFFSaHFJUm9DUUFOQUFrQUNRQ0FZS0FJQUloZ0VRQ0FRUVRCcVFaR1FBUkNYQVNFTUlCZ29BZ3dpQTBFSWFpRUNBa0FnQ3kwQUNFRUJSZ1JBQW44Z0FpRUZJQU5CSkdvaERVRUFJUUlqQUVFUWF5SVVKQUFnRlNBVktBSUFOZ0lFSUIwb0Fod2lCaUFkS0FJWUlnUnJRUlJ0SVFNQ1FBSkFJQVFnQmtZTkFDQUZLQUlVSUFVb0FoQkdEUUFnRlNBREVKc0RRUUFoSWdOQUlCMG9BaHdnSFNnQ0dHdEJGRzBpQXlBaVRRUkFJQU1nRlNnQ0JDQVZLQUlBYTBFRGRTSUNUdzBDUWZDSUJVR01tQUVRUjBHU2xnRVFSMEdoemdBUVIwR3ZBUkJLUWZuUkFCQkhRZWlZQVJCSEVFa01DUXNnSFNnQ0RDQWRLQUlJSUNKc2FpSUtJUUlDUUNBTktBSUlCRUFnRFVFQU5nSmtJQTBnRFNnQ1NEWUNUQ0FOUWRRQWFpRURBMEFnRFNnQ1ZDQU5LQUpZUndSQUlBTVFqZ1lNQVFzTElBMGdBeUFOS0FJSUlBSVEvUU1nRFNnQ1RCb2dEU2dDU0JvTUFRdEI4SWdGUWV1WkFSQkhRZnpxQUJCSFFhSE9BQkJIUVpVREVFcEIrZEVBRUVkQjZyZ0JFRWNRU1F3T0N5QWRLQUlZSUNKQkZHeHFJUmRCQUNFY1FYOGhBMEgvLy8vL0J5RVBRWDhoQWdKQUEwQWdEU2dDVENBTktBSklJZ1JyUVFKMUlCeE5CRUFDUUNBQ1FYOUdEUU1nRDBGL1JnMEdJQU5CZjBjTkFDQVVJQTgyQWd3Z0ZDQWlOZ0lJSUJVZ0ZFRUlhaERYQVF3REN3VUNRQ0FYTFFBUUlBVW9BaEFnQkNBY1FRSjBJZ1pxS0FJQUlnUkJGR3hxTFFBUVJ3MEFJQUlnQ2lBRktBSUVJQVVvQWdBZ0JHeHFFTThDSWdSTEJFQWdEU2dDU0NBR2FpZ0NBQ0VQSUFJaEF5QUVJUUlNQVFzZ0JDQURJQU1nQkVzYklRTUxJQnhCQVdvaEhBd0JDd3NnRlNvQ0RDQUNzeUFEczVWZVJRMEFJQlFnRHpZQ0RDQVVJQ0kyQWdnZ0ZTQVVRUWhxRU5jQkN5QWlRUUZxSVNJTUFBc0FDeUFVUVJCcUpBQWdBZ3dCQzBId2lBVkJ5cFVCRUVkQmtwWUJFRWRCb2M0QUVFZEJvQUVRU2tINTBRQVFSMEd6bHdFUVJ4QkpEQVVMSUFzb0FnQlBEUUVNQXdzZ0FpRVhRUUFoQlVFQUlSd2pBRUVRYXlJVUpBQWdGU0FWS0FJQU5nSUVJQjBvQWh3aUJDQWRLQUlZSWdOclFSUnRJUUlDUUNBRElBUkdEUUFnRnlnQ0ZDQVhLQUlRUmcwQUlCVWdBaENiQXdOQUlCMG9BaHdnSFNnQ0dDSURhMEVVYlNJQ0lCeE5CRUFnQWlBVktBSUVJQlVvQWdCclFRTjFJZ1ZQRFFKQjhJZ0ZRWXlZQVJCSFFaS1dBUkJIUWFIT0FCQkhRZkFBRUVwQitkRUFFRWRCNkpnQkVFY1FTUXdHQlNBRElCeEJGR3hxSVE4Z0hTZ0NEQ0FkS0FJSUlCeHNhaUVLUVFBaEJVSC8vLy8vQnlFRVFYOGhBMEYvSVFJQ1FBTkFJQmNvQWhRZ0Z5Z0NFQ0lHYTBFVWJTQUZUUVJBQWtBZ0FrRi9SZzBESUFOQmYwY05BQ0FVSUFRMkFnd2dGQ0FjTmdJSUlCVWdGRUVJYWhEWEFRd0RDd1VDUUNBUExRQVFJQVlnQlVFVWJHb3RBQkJIRFFBZ0FpQUtJQmNvQWdRZ0Z5Z0NBQ0FGYkdvUXp3SWlCa3NFUUNBQ0lRTWdCU0VFSUFZaEFnd0JDeUFHSUFNZ0F5QUdTeHNoQXdzZ0JVRUJhaUVGREFFTEN5QVZLZ0lNSUFLeklBT3psVjVGRFFBZ0ZDQUVOZ0lNSUJRZ0hEWUNDQ0FWSUJSQkNHb1Exd0VMSUJ4QkFXb2hIQXdCQ3dBTEFBc2dGRUVRYWlRQUlBc29BZ0FnQlVzTkFnc2dEQkNTQVNBWUtBSU1JUUlnRUVFd2FpSUlRZStRQVJDWEFTQVRJQm9nQWtFWWFpSWNJQlVnSFNnQ0FDQWRLQUlFSUJnb0Fnd2lBaWdDQUNBQ0tBSUVFSlVHSVFRUWtnRWdCRUVBU0EwRElCQkJBRFlDWENBUVFnQTNBbFFnQ0VHQWtRRVFsd0VnRUVIVUFHb2lGQ0FUSUJVZ0JCQ1VCaENTQVNBUVFSQnFJaEZCb1pJQkVKY0JJQWdnR2lBY0lCUWdEaUFZS0FJTUlnSW9BZ0FnQWlnQ0JCQ1RCaUVDRUpJQklBSUVRQ0FRUVFBMkFnd2dFRUlBTndJRUlCRkJ6WklCRUpjQklCQkJCR29pRHlBSUlCb2dIQ0FVSUFzcUFnUVFrZ1lnQ3lnQ0FDRUVJQkFvQWdRaEF5QVFLQUlJSVFJUWtnRUNRQ0FDSUFOclFRTjFJQVJKRFFBZ0VVSGVrZ0VRbHdFQ2Z5QVlLQUlNSVExQkFDRUZRUUFoSWlNQVFVQnFJaFlrQUNBVklCVW9BZ0EyQWdRQ1FBSkFBa0FnSFNnQ0hDQWRLQUlZUmcwQUlBMG9BaHdnRFNnQ0dFWU5BQ0FXUVJCcUlBaERBQUFBQUJDUEJrVU5BU0FWSUIwb0Fod2dIU2dDR0d0QkZHMFFtd01EUUNBZEtBSWNJQjBvQWhnaUEydEJGRzBpQWlBaVRRUkFJQlVvQWdRZ0ZTZ0NBR3RCQTNVaUJTQUNUUTBDUWZDSUJVR01tQUVRUjBHU2xnRVFSMEdoemdBUVIwR0FBaEJLUWZuUkFCQkhRZWlZQVJCSEVFa01DZ3NnRmlvQ0pDQVdLZ0ljSUFNZ0lrRVViR29pRENvQ0FDSXhsQ0FNS2dJRUlpd2dGaW9DSUpTU2tpQVdLZ0l3SUJZcUFpZ2dNWlFnTENBV0tnSXNsSktTSWl1VklTMGdGaW9DR0NBV0tnSVFJREdVSUN3Z0Zpb0NGSlNTa2lBcmxTRXNJQjBvQWd3Z0hTZ0NDQ0FpYkdvaEYwRUFJUVZCZnlFRFFmLy8vLzhISVFSQmZ5RUNBa0FEUUNBTktBSWNJQTBvQWhnaUJtdEJGRzBnQlUwRVFBSkFJQUpCZjBZTkF5QUVRWDlHRFFjZ0EwRi9SdzBBSUJZZ0JEWUNEQ0FXSUNJMkFnZ2dGU0FXUVFocUVOY0JEQU1MQlFKQUlBd3RBQkFnQmlBRlFSUnNhaUlHTFFBUVJ3MEFJQ3dnQmlvQ0FKTWlLeUFybENBdElBWXFBZ1NUSWlzZ0s1U1NRd0FBeUVKZURRQWdBaUFYSUEwb0Fnd2dEU2dDQ0NBRmJHb1F6d0lpQmtzRVFDQUZJUVFnQWlFRElBWWhBZ3dCQ3lBR0lBTWdBeUFHU3hzaEF3c2dCVUVCYWlFRkRBRUxDeUFWS2dJTUlBS3pJQU96bFY1RkRRQWdGaUFFTmdJTUlCWWdJallDQ0NBVklCWkJDR29RMXdFTElDSkJBV29oSWd3QUN3QUxJQlpCUUdza0FDQUZEQUlMUWZDSUJVSGtyZ0VRUjBHU2xnRVFSMEdoemdBUVIwSEVBUkJLUWZuUkFCQkhRZjJ1QVJCSEVFa01CZ3RCOElnRlFjcVZBUkJIUVpLV0FSQkhRYUhPQUJCSFFmRUJFRXBCK2RFQUVFZEJzNWNCRUVjUVNRd0ZDeUVESUFzb0FnQWhBaENTQVNBQ0lBTkxEUUFnRVVHMWt3RVFsd0VnRXlBYUlCd2dGU0FkS0FJQUlCMG9BZ1FnR0NnQ0RDSUNLQUlBSUFJb0FnUVFsUVloQkJDU0FTQUVRUUJJRFFBZ0VVSEdrd0VRbHdFZ0ZDQVRJQlVnQkJDVUJoQ1NBU0FSUWVtVUFSQ1hBU0FJSUJvZ0hDQVVJQTRnR0NnQ0RDSUNLQUlBSUFJb0FnUVFrd1loQWhDU0FTQUNSUTBBSUJBZ0VDZ0NCRFlDQ0NBUlFaZVZBUkNYQVNBUElBZ2dHaUFjSUJRZ0N5b0NCQkNTQmhDU0FTQUxLQUlBSUJBb0FnZ2lCaUFRS0FJRUlnVnJJZ1JCQTNWTERRQWdCQ0FMS0FJUUlnTWdDeWdDRENJQ2EwME5BQ0FKSUFoQkpQd0tBQUFnQ3lBRk5nSU1JQkFnQWpZQ0JDQUxJQVkyQWhBZ0VDQUROZ0lJSUFzb0FoUWhBaUFMSUJBb0FndzJBaFFnRUNBQ05nSU1JQXNnR0NnQ0NEWUNHQXNnRUVFRWFoQldHZ3NnRUVIVUFHb1FWaG9NQXdzZ0N5Z0NHQm9nRUVIZ0FHb2tBQXdEQ3lBTUVKSUJEQUVMQ3d3REN5QW1RVEJxSkFBZ0trRWdhaVFBSUNVUXpnSWFJQ2xCSUdva0FDQUFJQUFvQWdBUWhnUWlBaWdDQkNJRElBSW9BZ0FpQW10QkZHMDJBakFDUUNBQ0lBTkdCRUJCQUNFQ0lBQW9BamdpQTBFQUlBTkJBRW9iSVFNRFFDQUNJQU5HRFFJZ0FDZ0NOQ0FDUWNRQWJHcEJmellDUENBQ1FRRnFJUUlNQUFzQUN5QUFLQUlzRUVnZ0FDQUFLQUl3UVFOMEVFMGlBallDTENBQ0JFQWdBQ2dDQUJDR0JDRUVBa0FnS0VFQlJnUkFRUUFoQWdOQUlBSWdBQ2dDTUU0TkFpQUVLQUlBSUFKQkZHeHFJZ01xQWdRaExDQURLZ0lBSVNzQ1FDQUFLQUlFSWdNRVFDQURRYmdCYWlBcklDd2dBQ2dDTENBQ1FRTjBhaUlESUFOQkJHb1FnQUlhREFFTElBQW9BaXdnQWtFRGRHb2lBeUFzT0FJRUlBTWdLemdDQUFzZ0FrRUJhaUVDREFBTEFBdEJBQ0VDQWtBQ1FBSkFBa0FnS0VFQ2F3NEVBUU1DQUFNTEEwQWdBaUFBS0FJd1RnMEVJQVFvQWdBZ0FrRVViR29pQXlvQ0JDRXNJQU1xQWdBaEt3SkFJQUFvQWdRaUF3UkFJQU5CdUFGcUlDdERBQURBUDVRZ0xFTUFBTUEvbENBQUtBSXNJQUpCQTNScUlnTWdBMEVFYWhDQUFob01BUXNnQUNnQ0xDQUNRUU4wYWlJRElDeERBQURBUDVRNEFnUWdBeUFyUXdBQXdEK1VPQUlBQ3lBQ1FRRnFJUUlNQUFzQUN3TkFJQUlnQUNnQ01FNE5BeUFFS0FJQUlBSkJGR3hxSWdNcUFnUWhMQ0FES2dJQUlTc0NRQ0FBS0FJRUlnTUVRQ0FEUWJnQmFpQXJJQ3VTSUN3Z0xKSWdBQ2dDTENBQ1FRTjBhaUlESUFOQkJHb1FnQUlhREFFTElBQW9BaXdnQWtFRGRHb2lBeUFzSUN5U09BSUVJQU1nS3lBcmtqZ0NBQXNnQWtFQmFpRUNEQUFMQUFzRFFDQUNJQUFvQWpCT0RRSWdCQ2dDQUNBQ1FSUnNhaUlES2dJRUlTd2dBeW9DQUNFckFrQWdBQ2dDQkNJREJFQWdBMEc0QVdvZ0swTUFBRUJBbENBc1F3QUFRRUNVSUFBb0Fpd2dBa0VEZEdvaUF5QURRUVJxRUlBQ0dnd0JDeUFBS0FJc0lBSkJBM1JxSWdNZ0xFTUFBRUJBbERnQ0JDQURJQ3REQUFCQVFKUTRBZ0FMSUFKQkFXb2hBZ3dBQ3dBTEEwQWdBaUFBS0FJd1RnMEJJQVFvQWdBZ0FrRVViR29pQXlvQ0JDRXNJQU1xQWdBaEt3SkFJQUFvQWdRaUF3UkFJQU5CdUFGcUlDdERBQUNBUUpRZ0xFTUFBSUJBbENBQUtBSXNJQUpCQTNScUlnTWdBMEVFYWhDQUFob01BUXNnQUNnQ0xDQUNRUU4wYWlJRElDeERBQUNBUUpRNEFnUWdBeUFyUXdBQWdFQ1VPQUlBQ3lBQ1FRRnFJUUlNQUFzQUMwRUFJUUlnQUNnQ09DSURRUUFnQTBFQVNoc2hBd05BSUFJZ0EwWUVRQ0FBS0FJQUtBSUFLQUlBSWdJaERDQUNLQUlZSWdORkRRTWdBQ0FEUVFKMGFpZ0NQQ0lKUWNRQWJDSUZJQUFvQWpScUtBSkFEUU1DZnlBQUtBSUVJUW9nQUNnQ0FDTUFRUkJySWdZa0FDQUdJQU0yQWd3b0FnQkJCR29nQmtFTWFoQ0hCQ0VFSUFaQkVHb2tBQ0FBS0FJQUVJWUVJUU1nQUNnQ05DQUZhaUVQSXdCQjRBRnJJaEVrQUVGL0lRZ0NRQUpBSUF3b0FoQWdEQ2dDRENJWGF5SUNRUU4xSWhOQkJFa05BQ0FDUVFGMEVFMGlEa1VOQVNBVFFSaHNFRTBpRkVVTkFTQUVLQUlBSVFZZ0F5Z0NBQ0VGQTBBZ0V5QWhSd1JBSUE0Z0lVRUVkR29pQkNBRklCY2dJVUVEZEdvaUF5Z0NBRUVVYkdvaUFpb0NBTHM1QXdBZ0JDQUNLZ0lFdXprRENDQVVJQ0ZCR0d4cUlnUWdCaUFES0FJRVFReHNhaUlDS2dJQXV6a0RBQ0FDS2dJRUlTc2dCRUlBTndNUUlBUWdLN3M1QXdnZ0lVRUJhaUVoREFFTEN5QVJJQlEyQXRRQklCRWdEallDMEFFZ0VTQVROZ0xZQVFKL0lBcEJDR29oRFVFQUlRVkJmeUVoQWtBQ1FDQVRRUVJJRFFBRFFDQUZJQk5IQkVBZ0JVRVliQ0FGUVFGcUlRVWdGR29yQXhCRUFBQUFBQUFBQUFCaERRRU1BZ3NMSUEwckF3QkVBQUFBQUFBQUFBQmhEUUFnRFNzRElFUUFBQUFBQUFBQUFHSU5BQ0FOS3dNb1JBQUFBQUFBQUFBQVlRMEFJQTByQTBCRUFBQUFBQUFBQUFCaURRQWdEU3NEU0VRQUFBQUFBQUFBQUdJTkFDQU5Ld05RUkFBQUFBQUFBUEEvWWcwQUlBMHJBeGhFQUFBQUFBQUFBQUJpRFFBZ0RTc0RPRVFBQUFBQUFBQUFBR0lOQUNBTkt3TllSQUFBQUFBQUFBQUFZZzBBSUJOQkFYUWlBa0VJRU5jQ0lncEZCRUJCQUVFRFFic0xRUUFRVGd3Q0N3SkFBbndDUUNBQ1FRRVExd0lpRndSQUlCY29BZ0FoQkNBS0tBSUFJUU5CQUNFaEEwQWdFeUFoUndSQUlBTWdJVUVIZEdvaUhDQVVJQ0ZCR0d4cUlnWXJBd0E1QXdBZ0Jpc0RDQ0dBQVNBY1FnQTNBeWdnSEVJQU53TWdJQnhDQURjREdDQWNRb0NBZ0lDQWdJRDRQemNERUNBY0lJQUJPUU1JSUJ3Z0RpQWhRUVIwSWdKcUlnVXJBd0FnQmlzREFKcWlPUU13SUFVckF3QWhnZ0VnQmlzRENDR0FBU0FjUWdBM0ExQWdIRUlBTndOSUlCeEJRR3RDQURjREFDQWNJSUlCSUlBQm1xSTVBemdnSENBR0t3TUFPUU5ZSUFZckF3Z2hnQUVnSEVLQWdJQ0FnSUNBK0Q4M0EyZ2dIQ0NBQVRrRFlDQWNJQVVyQXdnZ0Jpc0RBSnFpT1FOd0lCd2dCU3NEQ0NBR0t3TUltcUk1QTNnZ0FpQUVhaUlDSUFVckF3QTVBd0FnQWlBRkt3TUlPUU1JSUNGQkFXb2hJUXdCQ3dzZ0NoQ29CaUlHUlFSQUlBb1FaU0FYRUdWQkFFRURRZndaUVFBUVRnd0dDeUFHSUFvUTFBSWlCRVVFUUNBS0VHVWdGeEJsSUFZUVpVRUFRUU5CL2gxQkFCQk9EQVlMSUFZZ0Z4RFVBaUlEUlFSQUlBb1FaU0FYRUdVZ0JoQmxJQVFRWlVFQVFRTkJ5U0pCQUJCT0RBWUxJQVFRZ2dSQkFFZ0VRQ0FLRUdVZ0Z4QmxJQVlRWlNBRUVHVWdBeEJsUVFCQkEwSDBLRUVBRUU0TUJnc2dCQ0FERU5RQ0lnSkZCRUFnQ2hCbElCY1FaU0FHRUdVZ0JCQmxJQU1RWlVFQVFRTkI0eTVCQUJCT0RBWUxJQUlvQWdBaUJTc0RLQ0dMQVNBRkt3TVFJQVVyQXlBaGh3RWdCU3NEQ0NHRUFTQUZLd000SVl3QklBMHJBd0FoaVFFZ0RTc0RDQ0dOQVNBTkt3TW9JWWdCSUFVckF4Z2hoUUVnRFNzRE1DR0JBU0FGS3dNQUlZSUJJQTByQXhBaGlnRWdCU3NETUNHR0FTQUtFR1VnRnhCbElBWVFaU0FFRUdVZ0F4QmxJQUlRWlNDS0FhRWdqUUVnaXdFZ2dRR2hJSWdCb3lLQUFhS2hJSWtCb3lDR0FTQ0dBYUlnZ2dFZ2lnRWdoZ0dpb1NDTkFTQ0ZBU0NCQVNDR0FhS2hJSWdCb3lLREFhS2hJSWtCb3lLTEFTQ0xBYUlnZ3dFZ2d3R2lvS0NmSXBJQklJd0JJSXdCb2lDRUFTQ0tBU0NNQWFLaElJMEJJSWNCSUlFQklJd0JvcUVnaUFHaklvUUJvcUVnaVFHaklvVUJJSVVCb2lDRUFTQ0VBYUtnb0o4aWlnR2dSQUFBQUFBQUFPQS9vaUtDQWFNaG1BRWdnQUVnZ2dHaklaa0JSQUFBQUFBQUFQQS9JSUlCb3lHYUFTQ0xBU0NTQWFNaWtRRWdoQUVnaWdHaklvZ0JvaUNEQVNDU0FhTWlqZ0VnaFFFZ2lnR2pJb2NCb3FFaWhBRWdoQUdpSUk0QklJd0JJSW9Cb3lLRkFhSWdoZ0Vna2dHaklvd0JJSWdCb3FFaWdnRWdnZ0dpSUl3QklJY0JvaUNSQVNDRkFhS2hJb3NCSUlzQm9xQ2dJb0FCUkFBQUFBQUFBQUFBWVEwRElJUUJJSUFCbnlLQUFhTWhnUUVnZ2dFZ2dBR2pJb1FCbWlHQ0FVRUFJUVVDZkNDTEFTQ0FBYU1pZ0FFZ2tRR2lJSTRCSUlRQm9xRWlrQUZFQUFBQUFBQUFBQUJpQkVBZ2pnRWhqd0Vna1FFaGhnRWdnQUVoaVFFZ2hBRWhnd0ZCQUNFRUlJd0JEQUVMSUlFQklJQUJJSUVCSUpFQm9pQ01BU0NDQWFLZ0lvSUJSQUFBQUFBQUFBQUFZaUlGR3lLSkFTQ1JBU0NNQVNBRkd5S0dBYUlnakFFZ2pnRWdCUnNpandFZ2hBRWdnUUVnQlJzaWd3R2lvU0dRQVNDQUFTQ0VBU0FGR3lHQkFTQ0NBVVFBQUFBQUFBQUFBR0VoQkNDREFab2hnZ0VnamdFZ2tRRWdCUnNMSVlRQklKQUJSQUFBQUFBQUFBQUFZUTBESUk4QklJRUJvaUNKQVNDRUFhS2hJSkFCb3lLVEFTQ01BU0NGQWFJZ2tRRWdod0dpSUk0QklJZ0JvcUNnSW9BQm1pQ0FBU0NBQVVRQUFBQUFBQUFBQUdNYklvQUJSQUFBQUFBQUFQQS9vSjlFQUFBQUFBQUE4RDhnZ0FHaG42QkVBQUFBQUFBQTREK2lJcGNCSUlrQm9pQ1FBYU1pbEFHaUlKY0JJSU1Cb2lDREFTQ1BBYUlnaGdFZ2lRR2lvU0tBQWFNaWpRRWdoZ0VnZ1FHaUlJTUJJSVFCb3FFZ2dBR2pJb29Cb3FBaWl3RWdpd0dpSUpNQklKTUJvaUNLQVNDS0FhS2dSQUFBQUFBQUFQQS9vQ0tFQVNDVUFTQ1VBYUlnalFFZ2pRR2lvRVFBQUFBQUFBRHd2NkNpb1NLQUFVUUFBQUFBQUFBQUFHTU5BeUNLQVNDTEFab2dnQUdmSW9BQm9TQ0VBYU1pandHaUlJMEJvQ0dWQVNDVEFTQ1BBYUlnbEFHZ0laSUJJSW9CSUlBQklJc0JvU0NFQWFNaWhnR2lJSTBCb0NHTkFTQ1RBU0NHQWFJZ2xBR2dJWVFCQW53Z0JRUkFJSWtCSVlBQklJRUJJWWtCSUlNQklZRUJJSVFCSVlvQklJWUJJWXNCSUkwQklZUUJJSklCSVkwQklKVUJJWklCSUk4QkRBRUxJQVJGQkVBZ2dRRWhnQUVnZ3dFaGdRRWdoQUVoaWdFZ2pRRWhpd0VnaGdFaGhBRWdrZ0VoalFFZ2p3RWhrZ0VnbFFFTUFRc2dnUUdhSVlJQklJTUJJWUFCSUlZQklZb0JJSTBCSVlzQklJOEJJWTBCSUpVQkN5R1VBVUVBSVFVQ2Z5Q0pBU0NIQWFJZ2lBRWdnZ0dpb0NLUUFVUUFBQUFBQUFBQUFHSUVRQ0NGQVNHVkFTQ0lBU0dQQVNDSEFTR0dBU0NKQVNHREFTQ0JBU0dDQVVFQURBRUxJSUFCSUlrQklJQUJJSWNCb2lDRkFTQ0NBYUtnSXBNQlJBQUFBQUFBQUFBQVlpSUZHeUtEQVNDSEFTQ0ZBU0FGR3lLR0FhSWdoUUVnaUFFZ0JSc2lqd0VnZ1FFZ2dBRWdCUnNpZ2dHaW9TR1FBU0NKQVNDQkFTQUZHeUdBQVNDSUFTQ0hBU0FGR3lHVkFTQ1RBVVFBQUFBQUFBQUFBR0VMSVFJZ2tBRkVBQUFBQUFBQUFBQmhEUU1nandFZ2dBR2lJSU1CSUpVQm9xRWdrQUdqSXBZQklKY0JJSU1Cb2lDUUFhTWlrQUdpSUpjQklJSUJvaUNDQVNDUEFhSWdoZ0VnZ3dHaW9TS0RBYU1pa3dFZ2hnRWdnQUdpSUlJQklKVUJvcUVnZ3dHaklvOEJvcUFpaGdFZ2hnR2lJSllCSUpZQm9pQ1BBU0NQQWFLZ1JBQUFBQUFBQVBBL29DS0RBU0NRQVNDUUFhSWdrd0Vna3dHaW9FUUFBQUFBQUFEd3Y2Q2lvU0tBQVVRQUFBQUFBQUFBQUdNTkF5Q1BBU0NHQVpvZ2dBR2ZJb0FCb1NDREFhTWlnUUdpSUpNQm9DR0pBU0NXQVNDQkFhSWdrQUdnSVlJQklJOEJJSUFCSUlZQm9TQ0RBYU1pZ3dHaUlKTUJvQ0dBQVNDV0FTQ0RBYUlna0FHZ0lZVUJBbndnQlFSQUlJVUJJWWNCSUlNQklZZ0JJSUFCSVlVQklJSUJJWUFCSUlrQklZSUJJSUVCREFFTElBSkZCRUFnaFFFaGh3RWdnQUVoaUFFZ2d3RWhoUUVnZ2dFaGdBRWdnUUVoZ2dFZ2lRRU1BUXNnZ3dFaGh3RWdnQUVoaUFFZ2dRRWhnQUVnaVFFTElZTUJJSklCSUlJQm9pQ05BU0NBQWFJZ2xBRWdnd0dpb0tBaWdRR2FJSUVCSUlFQlJBQUFBQUFBQUFBQVl4c2hoZ0Vna2dFZ2hRR2lJSTBCSUljQm9pQ1VBU0NJQWFLZ29DS0JBWm9nZ1FFZ2dRRkVBQUFBQUFBQUFBQmpHeUdPQVNDRUFTQ0ZBYUlnaWdFZ2h3R2lJSXNCSUlnQm9xQ2dJb0VCbWlDQkFTQ0JBVVFBQUFBQUFBQUFBR01iSW9rQklJUUJJSUlCb2lDS0FTQ0FBYUlnaXdFZ2d3R2lvS0FpZ1FHYUlJRUJJSUVCUkFBQUFBQUFBQUFBWXhzaWdRRmpCRUFnaVFFZ2pnRmpCRUFnaEFFaGpBRWdpd0VoamdFZ2lnRWhrUUVnaGdFZ2lRRmtEUVVNQXdzZ2hRRWdnZ0VnaGdFZ2pnRmtJZ0liSVlVQklJY0JJSUFCSUFJYklZY0JJSWdCSUlNQklBSWJEQU1MSUlFQklJNEJZd1JBSUlFQklJWUJZMFVOQWlDQ0FTR0ZBU0NEQVNHSUFTQ0FBU0dIQVNDRUFTR01BU0NMQVNHT0FTQ0tBU0dSQVF3RUN5Q0ZBU0NDQVNDR0FTQ09BV1FpQWhzaGhRRWdod0VnZ0FFZ0Foc2hod0VnaUFFZ2d3RWdBaHNNQWdzZ0NoQmxRUUJCQTBIY0ZFRUFFRTRNQkFzZ2dnRWhoUUVnZ0FFaGh3RWdnd0VMSVlnQklKSUJJWXdCSUpRQklZNEJJSTBCSVpFQkN5QVJJSXdCT1FPd0FTQVJJSTRCT1FPUUFTQVJJSkVCT1FOd0lCRWdoUUU1QTdnQklCRWdpQUU1QTVnQklCRWdod0U1QTNnZ0VTQ2FBVGtEeUFFZ0VTQ1pBVGtEcUFFZ0VTQ1lBVGtEaUFFZ0VTQ1JBU0NJQWFJZ2pnRWdod0dpb1NLQUFTQ0FBU0NBQWFJZ2pnRWdoUUdpSUl3QklJZ0JvcUVpaEFFZ2hBR2lJSXdCSUljQm9pQ1JBU0NGQWFLaElvSUJJSUlCb3FDZ255S0FBYU01QThBQklCRWdnZ0VnZ0FHak9RT2dBU0FSSUlRQklJQUJvemtEZ0FGQkFDRWhDeUFoREFFTFFYOExRUUJJQkVBZ0RoQklJQlFRU0F3QkN5QVJJQTBROVFNaUFqWUMzQUVnQWtVRVFDQU9FRWdnRkJCSURBRUxJQUlnRVVIUUFXb2dFVUh3QUdvZ0VTQVJRZWdBYWhEbUJVRUFUZ1JBUVFBaENBTkFRUUFoSVNBSVFRTkdCRUFnRVVIY0FXb1E4d01nRGhCSUlCUVFTQ0FQSUJFckEyaTJJaXM0QWpSQmYwRUFJQ3REQUFBZ1FWNGJJUWdNQXdVRFFDQWhRUVJIQkVBZ0R5QUlRUVIwYWlBaFFRSjBhaUFSSUFoQkJYUnFJQ0ZCQTNScUt3TUF0amdDQUNBaFFRRnFJU0VNQVFzTElBaEJBV29oQ0F3QkN3QUxBQXNnRGhCSUlCUVFTQ0FSUWR3QmFoRHpBd3NnRVVIZ0FXb2tBQ0FJREFFTERBWUxEUU1nQUNnQ05DQUpRY1FBYkdvaUJFRUFOZ0k4SUF3b0Fnd2hBeUFNS0FJUUlRSWdCQ0FKTmdJd0lBUWdBaUFEYTBFRGRTSUNOZ0k0SUNRZ0JDb0NOTHM1QXhBZ0pDQUNOZ0lJSUNRZ0FqWUNCQ0FrSUFrMkFnQkJBRUVCUWJEWkFDQWtFRTRNQXdVZ0FDZ0NOQ0FDUWNRQWJHcEJmellDUENBQ1FRRnFJUUlNQVFzQUN3QUxEQUlMSUFBb0FqZ2lBa0VBSUFKQkFFb2JJUU5CQUNFQ0EwQWdBaUFEUndSQUlBQW9BalFnQWtIRUFHeHFRUUEyQWtBZ0FrRUJhaUVDREFFTEN5QW9RUUZHRFFBZ0FSQklDeUFrUVNCcUpBQVBDMEVBUVFOQms4WUFRUUFRVGtFQkVBSUFDeEJZQUFzb0FRSi9RZERvQkNnQ0FFRUFFUGtDSUFBaEFRTkFJQUVvQWxnZ0FSQ29CU0lCSUFCSERRQUxDNlFlQXhkL0FuMEJmaU1BUWRBQWF5SUlKQUFDUUFKQUFrQkJBRUVESUFCRklBRkZjZ1IvUWNrNkJTQUJLQUlFRFFGQnl6OExRUUFRVGtGL0lSSU1BUXNnQUNnQ0hCQklBa0FnQVNnQ0JDSUtCRUFnQUNBS1FZUUJiQkJOSWdJMkFod2dBa1VOQXdOQUlBUWdDazROQWlBRVFZUUJiQ0lDSUFBb0FoeHFJQUVvQWdBZ0FtcEJoQUg4Q2dBQUlBUkJBV29oQkNBQktBSUVJUW9NQUFzQUMwRUFJUW9nQUVFQU5nSWNDeUFBSUFvMkFpQWdBQ2dDSkFSQVFRQWhCQU5BSUFBb0FpUWhBaUFBS0FJb0lBUktCRUFnQWlBRVFReHNhaWdDQUJCSUlBUkJBV29oQkF3QkN3c2dBaEJJQ3dKQUlBRW9BZ3dpQ2dSQUlBQWdDa0VNYkJCTklnSTJBaVFnQWtVTkF3TkFJQW9nRGt3TkFpQU9RUXhzSWdNZ0FDZ0NKR29pQkNBQktBSUlJZ0lnQTJvaUJTZ0NDRFlDQ0NBRUlBVW9BZ1FpQmpZQ0JBSkFBa0FnQmdSQUlBUWdCa0VNYkJCTklnbzJBZ0JCQUNFRUlBcEZEUWNEUUNBRUlBWk9EUUlnQkVFTWJDSUdJQUFvQWlRZ0Eyb29BZ0JxSWdvZ0FpQURhaWdDQUNBR2FpSUNLUUlBTndJQUlBb2dBaWdDQ0RZQ0NDQUVRUUZxSVFRZ0FTZ0NDQ0lDSUFOcUtBSUVJUVlNQUFzQUN5QUZRUUEyQWdBTUFRc2dBU2dDRENFS0N5QU9RUUZxSVE0TUFBc0FDMEVBSVFvZ0FFRUFOZ0lrQ3lBQUlBbzJBaWdnQUNnQ05DSUNCRUFnQWhCSUlBQkNBRGNDTkFzQ1FBSkFJQUVvQWd3aUFVRUFUQTBBSUFBZ0FUWUNPQ0FBSUFGQnhBQnNFRTBpQWpZQ05DQUNSUTBCUVFBaEJBTkFJQUVnQkVZTkFTQUNJQVJCeEFCc2FrRUFOZ0pBSUFSQkFXb2hCQXdBQ3dBTElBQW9BaUFpQVVVTkFTQUJRUUFnQVVFQVNoc2hFeUFBUVR4cUlSUkJBQ0VLUVFBaERnTkFRUUFoQVNBT0lBQW9BaWhPRFFJRFFDQU9RUXhzSWdzZ0FDZ0NKR29vQWdRZ0FVd0VRQ0FPUVFGcUlRNE1BZ3RCQUNFR0lBaEJBRFlDVENBSVFnQTNBa1FnQ0VFQU5nSkFJQWhDQURjQ09DQUlRUUEyQWpRZ0NFSUFOd0lzQTBBZ0JpQVRSZ1JBSUFnZ0NDZ0NTQ0FJS0FKRWEwRVViVFlDQ0NBSUlBRTJBZ1FnQ0NBT05nSUFRUUJCQVVIQXlRQWdDQkJPSUJRZ0NrRUNkR29nQUNnQ0pDQUxhaUlDS0FJSU5nSUFJQUFvQWdBaEVTQUNLQUlBSUFGQkRHeHFJZ0lvQWdBaEJDQUNLQUlFSVFZakFFRWdheUlMSkFBZ0N5QUtOZ0ljSUF0QkZHcEJsQUVRWmhDdUJoQ3RCaUlNS0FJQUlnSkI0QUEyQWdnZ0FpQUdOZ0lFSUFJZ0JEWUNBQ0FDUVJocUlBaEJ4QUJxSWhVaUJpZ0NCQ0FHS0FJQWEwRVViUkNzQmlBR0lBd29BZ0JCR0dvaUFrY0VRQ0FHS0FJQUlRUWdCaWdDQkNFR0l3QkJFR3NpQXlRQUFrQWdCaUFFYTBFVWJTSUhJQUlvQWdnZ0FpZ0NBQ0lGYTBFVWJVMEVRQ0FDS0FJRUlBVnJJZ2xCRkcwZ0Iwa0VRQ01BUVJCcklnY2tBQ0FIUVFocUlBUWdCQ0FKYWlJRUlBVVFwQVlnQnlnQ0RCb2dCMEVRYWlRQUlBSW9BZ1FhSUFJb0FnQWFJQUlnQkNBR0VLVUdEQUlMSUFOQkNHb2dCQ0FHSUFVUXBBWWdBaUFES0FJTU5nSUVEQUVMSUFJUWhRUWdBaUFDSUFjUTJBTVFvd1lnQWlBRUlBWVFwUVlMSUFOQkVHb2tBQXNnRENnQ0FFRU1haUFJUVN4cUloWWlCQ2dDQkNBRUtBSUFheENyQmlBRUlBd29BZ0JCREdvaUFrY0VRQUpBSUFRb0FnUWlCaUFFS0FJQUlnUnJJZ1VnQWlnQ0NDQUNLQUlBSWdOclRRUkFJQVVnQWlnQ0JDSUhJQU5ySWdsTEJFQWdBeUFIUndSQUlBTWdCQ0FKL0FvQUFDQUNLQUlFSVFjTElBWWdCQ0FKYWlJRWF5RURJQVFnQmtjRVFDQUhJQVFnQS93S0FBQUxJQUlnQXlBSGFqWUNCQXdDQ3lBR0lBUnJJUVVnQkNBR1J3UkFJQU1nQkNBRi9Bb0FBQXNnQWlBRElBVnFOZ0lFREFFTElBSVFoUVFnQWlBRkVPd0NJZ05CQUVnRVFCQ1lBZ0FMSUFJZ0F4Qm1JZ1UyQWdRZ0FpQUZOZ0lBSUFJZ0F5QUZhallDQ0NBR0lBUnJJUU1nQWlnQ0JDRUZJQVFnQmtjRVFDQUZJQVFnQS93S0FBQUxJQUlnQXlBRmFqWUNCQXNMSUF3b0FnQWlCa0dBQVRZQ09DQUdRVEJxRUtvR0lBWkNpSUNBZ0lBQ053S01BU0FHS0FJTUlRMGdCaWdDSENBR0tBSVlhMEVVYlNFRFFRQWhBaU1BUVJCcklnY2tBQ01BUVJCcklnVWtBQ0FIUVFScUlnUkJBRFlDQ0NBRVFnQTNBZ0FnQlNBRU5nSUlJQU1FUUNBRUlBTVFtQVlnQkNBREVMQURDeUFHUVNScUlRWWdCVUVCT2dBTUlBVkJDR29RMGdJZ0JVRVFhaVFBSUFRb0FnUWdCQ2dDQUNJRmEwRUNkU0VKQTBBZ0FpQUpSZ1JBUVlBQkVHWWhBaUFHSUFZb0FnUWlEMEVCYWpZQ0JDQUNRUUU2QUdRZ0FpQVBOZ0lBSUFKQkJHcEJBRUhnQVB3TEFDQUNRZ0EzQW5nZ0FrSUFOd0p3SUFKQ0FEY0NhQ0FHUVFocUlBSVFtZ1lnQmlnQ0NDSUNRUUE2QUdRZ0JpQUNJQTBnQXlBRklBa1Fsd1lnQkJCV0dpQUhRUkJxSkFBRklBVWdBa0VDZEdvZ0FqWUNBQ0FDUVFGcUlRSU1BUXNMSUJFb0FnQW9BZ0FnQ3lBTUtBSUFOZ0lNSUFzZ0RDZ0NCQ0lDTmdJUUlBSUVRQ0FDUVFIK0hnSUVHZ3NnQ3lBTEtRSU1Od01BSXdCQkVHc2lEU1FBSUEwZ0NqWUNERUhJQUdvaUJTQU5RUXhxRUlnRUJFQkJFQkNFQWlBTlFhc2NFRk1Rb2dOQjhMTUJRUkFRQkFBTElBaEJPR29oRUNNQVFSQnJJZzhrQUNBUElBMUJER28yQWdSQkFDRUNJd0JCRUdzaUJ5UUFJQTBvQWd3aEJDQVBBbjhDUUNBRktBSUVJZ1pGRFFBZ0JTZ0NBQUovSUFaQkFXc2dCSEVnQm1raUEwRUJUUTBBR2lBRUlBUWdCa2tOQUJvZ0JDQUdjQXNpQWtFQ2RHb29BZ0FpQ1VVTkFDQUdRUUZySVJjZ0EwRUJTeUVZQTBBZ0NTZ0NBQ0lKUlEwQklBUWdDU2dDQkNJRFJ3UkFBa0FnR0VVRVFDQURJQmR4SVFNTUFRc2dBeUFHU1EwQUlBTWdCbkFoQXdzZ0FpQURSdzBDREFFTElBa29BZ2dnQkVjTkFBdEJBQXdCQzBFVUVHWWhBeUFISUFWQkNHbzJBZ2dnQnlBRE5nSUVJQU1nQkRZQ0JDQURRUUEyQWdBZ0R5Z0NCQ2dDQUNFSklBTkNBRGNDRENBRElBazJBZ2dnQjBFQk9nQU1Ba0JCQUNBR0lBVW9BZ3hCQVdxekloa2dCU29DRUNJYUlBYXpsRjRiRFFBZ0JTQUdJQVpCQVd0eFFRQkhJQVpCQTBseUlBWkJBWFJ5SWdJQ2Z5QVpJQnFWalNJWlF3QUFnRTlkSUJsREFBQUFBR0J4QkVBZ0dha01BUXRCQUFzaUJpQUNJQVpMR3hDY0F5QUZLQUlFSWdZZ0JrRUJheUlDY1VVRVFDQUNJQVJ4SVFJTUFRc2dCQ0FHU1FSQUlBUWhBZ3dCQ3lBRUlBWndJUUlMQWtBZ0FrRUNkQ0lFSUFVb0FnQnFLQUlBSWdKRkJFQWdCeWdDQkNBRktBSUlOZ0lBSUFVZ0J5Z0NCRFlDQ0NBRktBSUFJQVJxSUFWQkNHbzJBZ0FnQnlnQ0JDSUpLQUlBSWdKRkRRRWdBaWdDQkNFREFrQWdCaUFHUVFGcklnSnhSUVJBSUFJZ0EzRWhBd3dCQ3lBRElBWkpEUUFnQXlBR2NDRURDeUFGS0FJQUlBTkJBblJxSUFrMkFnQWdCeWdDQkNFSkRBRUxJQWNvQWdRZ0FpZ0NBRFlDQUNBQ0lBY29BZ1FpQ1RZQ0FBc2dCMEVBTmdJRUlBVWdCU2dDREVFQmFqWUNEQ0FIS0FJRUlRSWdCMEVBTmdJRUlBSUVRQ0FITFFBTVFRRkdCRUFnQWtFTWFoREJBUm9MSUFJRVFDQUNFRWdMQzBFQkN6b0FEQ0FQSUFrMkFnZ2dCMEVRYWlRQUlBOG9BZ2dnRDBFUWFpUUFRUXhxSUFzUXFRWWdDeERCQVJvZ0RVRVFhaVFBSUJBZ0VTZ0NBRUVFYWlBTFFSeHFFSWNFSWdKSEJFQUNRQ0FRS0FJRUlnWWdFQ2dDQUNJRWEwRU1iU0lGSUFJb0FnZ2dBaWdDQUNJRGEwRU1iVTBFUUNBRklBSW9BZ1FpQnlBRGF5SUpRUXh0U3dSQUlBTWdCMGNFUUNBRElBUWdDZndLQUFBZ0FpZ0NCQ0VIQ3lBR0lBUWdDV29pQkdzaEF5QUVJQVpIQkVBZ0J5QUVJQVA4Q2dBQUN5QUNJQU1nQjJvMkFnUU1BZ3NnQmlBRWF5RUZJQVFnQmtjRVFDQURJQVFnQmZ3S0FBQUxJQUlnQXlBRmFqWUNCQXdCQ3lBQ0VJVUVJQUlnQlJEM0JDSURRZGFxMWFvQlR3UkFFSmdDQUFzZ0FpQURFTzRFSWdVMkFnUWdBaUFGTmdJQUlBSWdCU0FEUVF4c2FqWUNDQ0FHSUFScklRTWdBaWdDQkNFRklBUWdCa2NFUUNBRklBUWdBL3dLQUFBTElBSWdBeUFGYWpZQ0JBc0xJQXdRd1FFYUlBdEJJR29rQUNBS1FRRnFJUW9nQVVFQmFpRUJJQllRVmhvZ0VCQldHaUFWRUZZYURBSUZBa0FnQmtHRUFXd2lDU0FBS0FJY2FpSUNLQUtBQVNBQUtBSWtJQXRxSWdRb0FnQWdBVUVNYkdvb0FnaEhEUUFnQWlnQ2ZDQUVLQUlJUncwQUlBSW9BbmdoQXlBQ0tRSUFJUnNnQ0NBQ0tRSndOd0lnSUFnZ0d6Y0NHRUVBSVFRZ0NDQURRUUJIT2dBb0lBaEJ4QUJxSWdJQ2Z5QUNLQUlFSWdNZ0FpZ0NDRWtFUUNBRElBZ3BBaGczQWdBZ0F5QUlLQUlvTmdJUUlBTWdDQ2tDSURjQ0NDQURRUlJxREFFTEl3QkJJR3NpQlNRQUlBVkJER29nQWlBQ0tBSUVJQUlvQWdCclFSUnRRUUZxRU5nRElBSW9BZ1FnQWlnQ0FHdEJGRzBnQWtFSWFoQ05CU0lES0FJSUlnY2dDQ2tDR0RjQ0FDQUhJQWdvQWlnMkFoQWdCeUFJS1FJZ053SUlJQU1nQXlnQ0NFRVVhallDQ0NBQ0lBTVFod1VnQWlnQ0JDQURFSU1GSUFWQklHb2tBQXMyQWdRZ0FDZ0NIQ0FKYWlrQ0NDRWJJQWhCQURZQ0lDQUlJQnMzQWhnZ0NFRTRhaUlDQW44Z0FpZ0NCQ0lESUFJb0FnaEpCRUFnQXlBSUtRSVlOd0lBSUFNZ0NDZ0NJRFlDQ0NBRFFReHFEQUVMSXdCQklHc2lEQ1FBSUF4QkRHb2dBaUFDS0FJRUlBSW9BZ0JyUVF4dFFRRnFFUGNFSUFJb0FnUWdBaWdDQUd0QkRHMGdBa0VJYWhDeUFpSUZLQUlJSWdNZ0NDa0NHRGNDQUNBRElBZ29BaUEyQWdnZ0JTQUZLQUlJUVF4cU5nSUlJQVVvQWdRaEJ5QUNLQUlBSVEwZ0FpZ0NCQ0VEQTBBZ0F5QU5Sd1JBSUFkQkRHc2lCeUFEUVF4cklnTXBBZ0EzQWdBZ0J5QURLQUlJTmdJSURBRUxDeUFGSUFjMkFnUWdBaWdDQUNFRElBSWdCellDQUNBRklBTTJBZ1FnQWlnQ0JDRURJQUlnQlNnQ0NEWUNCQ0FGSUFNMkFnZ2dBaWdDQ0NFRElBSWdCU2dDRERZQ0NDQUZJQU0yQWd3Z0JTQUZLQUlFTmdJQUlBSW9BZ1FnQlNnQ0JDRUhJQVVvQWdnaEFnTkFJQUlnQjBjRVFDQUZJQUpCREdzaUFqWUNDQXdCQ3dzZ0JTZ0NBQ0lDQkVBZ0JTZ0NEQm9nQWhCSUN5QU1RU0JxSkFBTE5nSUVBMEFnQkVIZ0FFWU5BU0FBS0FJY0lBbHFJQVJxSVFVZ0NFRXNhaUlDQW44Z0FpZ0NCQ0lESUFJb0FnaEpCRUFnQXlBRkxRQVFPZ0FBSUFOQkFXb01BUXNqQUVFZ2F5SUhKQUFnQjBFTWFpQUNJQUlvQWdRZ0FpZ0NBR3RCQVdvUTdBSWdBaWdDQkNBQ0tBSUFheUFDUVFocUVNNERJZ01vQWdnZ0JTMEFFRG9BQUNBRElBTW9BZ2hCQVdvMkFnZ2dBaUFERU1vRElBSW9BZ1FnQXhESkF5QUhRU0JxSkFBTE5nSUVJQVJCQVdvaEJBd0FDd0FMSUFaQkFXb2hCZ3dCQ3dBTEFBc0FDd0FMREFFTElBaEIwQUJxSkFBZ0VnOExRUUJCQTBHVHhnQkJBQkJPUVFFUUFnQUxPQUFnQUNBQUtBSUFJQUFvQWdRZ0FDZ0NDQ0FBS0FJTUlBQW9BaEFRS2prREdDQUFMUUFnUVFGR0JFQWdBQ2dDRUJCSUlBQVFTQXNMMEFVQ0EzOEJmQ01BUVRCcklnVWtBQ0FGSUFFMkFnd2dCU0FBTmdJSUlBVkJBRG9BS0NBRlFnQTNBeUFnQlNBRE5nSVlJQVVnQWpZQ0ZDQUZJd00yQWhBQ2ZDQUVCRUFqQUVFUWF5SURKQUFnQXlBRlFRaHFOZ0lNSUFOQkFEWUNDQ0FEUVpzQ05nSUVJQU5CQkdvaEJDTUFRWUFCYXlJQUpBQWpBRUhnQUdzaUFTUUFBa0JCMU9nRUtBSUFRUUpHQkVBakFFRVFhMEVBTmdJTURBRUxJd0JCRUdzaUFpUUFBMEFDUUFKQUFrQUNRQUpBUWRUb0JFRUFRUUVRZXc0RUFBSUJBd1VMSUFKQkJHb2lCa0hVNkFRMkFnUWdBa0dkQWpZQ0JDQUNJd01pQnlnQ1JEWUNEQ0FISUFZMkFrUVFwd1VqQXlBQ0tBSU1OZ0pFUWRUb0JFRUNFUHNDUVFOSERRQkIxT2dFRUlFREN5QUNRUkJxSkFBTUFndEIxT2dFUVFGQkF4QjdHZ3RCMU9nRVFRQkJBeEQrQVF3QkN3c0xJQUZCQUVIUUFQd0xBQ0FCUVpvQ05nSmNJQUVnQkRZQ1dDQUJRUUEyQWxRZ0FVRUFOZ0pRSUFCQklHb2lBaUFCS0FKY05nSUFJQUlnQVNnQ1dEWUNCQ0FDSUFFb0FsUTJBZ2dnQWlBQktBSlFOZ0lNSUFKQkVHb2dBVUhRQVB3S0FBQWdBVUhnQUdva0FDQUFRWlVDTmdJWUlBQkJsZ0kyQWhRZ0FDQUNOZ0ljSUFBZ0FqWUNFQ0FBSUFBcEFoUTNBd2hCck9nRVFaRG1CQ0FBUVFocUVJSURCSDhnQUVFd2FpSUJFSEFhSUFBb0FpeEZCRUFnQUVISUFHb2hBZ05BSUFJZ0FSRCtBaUFBS0FJc1JRMEFDd3NnQVJCc0dpQUFLQUlzUVFGR0JVRUFDeUVCSUFCQklHb1FxUVVnQUVHQUFXb2tBQ0FEUVJCcUpBQWdCU3NESUVRQUFBQUFBQUFBQUNBQkd3d0JDMEVvRUUwaUFTQUZRUWhxUVNqOENnQUFJQUZCQVRvQUlDQUJJQUpCQTNRaUFCQk5JZ0kyQWhBZ0FpQURJQUFRYXhvakFFRWdheUlBSkFBZ0FDQUJOZ0ljSUFBZ0FUWUNFQ0FBUVFBMkFoZ2dBRUdiQWpZQ0ZDQUFJQUFwQWhRM0F3aEJyT2dFUVpEbUJDQUFRUWhxRUlJREdpQUFRU0JxSkFCRUFBQUFBQUFBQUFBTElBVkJNR29rQUF1Y0FRRUNmeUFCS0FJSUlBRW9BZ0FSQVFBakFFRWdheUlCSkFBQ1FDQUFLQUlJUlFSQUlBQkJFR29pQWhCd0dpQUFRUUUyQWd3Z0FCQ3FCU0FDRUd3YUlBQkJLR29RdVFJTUFRc2dBQkNxQlNBQUtBSVFJUUlnQUNnQ0RDQUJJQUEyQWh3Z0FTQUFOZ0lRSUFGQmt3STJBaGdnQVVHVUFqWUNGQ0FCSUFFcEFoUTNBd2dnQWlBQlFRaHFFSUlERFFBZ0FCQzZBZ3NnQVVFZ2FpUUFDeFFBSUFBb0FnUWdBQ2dDR0JFQkFDQUFFTG9DQzJRQkFYOENRRUhRNkFRb0FnQVFvZ1VpQVVVRVFDQUFJQUEyQWxnZ0FDQUFOZ0pjUWREb0JDZ0NBQ0FBRVBrQ0RBRUxJQUFnQVRZQ1dDQUFJQUVvQWx3MkFsd2dBU0FBTmdKY0lBQW9BbHdnQURZQ1dBc2dBQ0FBS0FJRUlBQW9BZ0FSQWdBTEZBQWdBQ2dDQkNBQUtBSVVFUUVBSUFBUXVnSUxHZ0FnQUVFQi9oY0NBQ0FBRU9rRElBQkJBVUVBL2tnQ0FCb0xCd0FnQUJDdEJRdEtBUUYvSXdFaUFDZ0NJRVVFUUNBQVFRRTJBaUJCck9nRUVIQWFRYXpvQkNNREVLc0ZJUUJCck9nRUVHd2FBa0FnQUVVTkFDQUFLQUlnRFFBZ0FCRHBBd3NqQVVFQU5nSWdDd3NNQUNBQUtBSThFQkFRdFFJTDF3RUJCSDhqQUVFZ2F5SUVKQUFnQkNBQk5nSVFJQVFnQWlBQUtBSXdJZ05CQUVkck5nSVVJQUFvQWl3aEJpQUVJQU0yQWh3Z0JDQUdOZ0lZUVNBaEF3SkFBa0FnQUNBQUtBSThJQVJCRUdwQkFpQUVRUXhxRURBUXRRSUVmMEVnQlNBRUtBSU1JZ05CQUVvTkFVRWdRUkFnQXhzTElBQW9BZ0J5TmdJQURBRUxJQVFvQWhRaUJpQURJZ1ZQRFFBZ0FDQUFLQUlzSWdNMkFnUWdBQ0FESUFVZ0JtdHFOZ0lJSUFBb0FqQUVRQ0FBSUFOQkFXbzJBZ1FnQVNBQ2FrRUJheUFETFFBQU9nQUFDeUFDSVFVTElBUkJJR29rQUNBRkM5UUNBUWQvSXdCQklHc2lBeVFBSUFNZ0FDZ0NIQ0lFTmdJUUlBQW9BaFFoQlNBRElBSTJBaHdnQXlBQk5nSVlJQU1nQlNBRWF5SUJOZ0lVSUFFZ0Ftb2hCU0FEUVJCcUlRRkJBaUVIQW44Q1FBSkFBa0FnQUNnQ1BDQUJRUUlnQTBFTWFoQVJFTFVDQkVBZ0FTRUVEQUVMQTBBZ0JTQURLQUlNSWdaR0RRSWdCa0VBU0FSQUlBRWhCQXdFQ3lBQklBWWdBU2dDQkNJSVN5SUpRUU4wYWlJRUlBWWdDRUVBSUFrYmF5SUlJQVFvQWdCcU5nSUFJQUZCREVFRUlBa2JhaUlCSUFFb0FnQWdDR3MyQWdBZ0JTQUdheUVGSUFBb0Fqd2dCQ0lCSUFjZ0NXc2lCeUFEUVF4cUVCRVF0UUpGRFFBTEN5QUZRWDlIRFFFTElBQWdBQ2dDTENJQk5nSWNJQUFnQVRZQ0ZDQUFJQUVnQUNnQ01HbzJBaEFnQWd3QkN5QUFRUUEyQWh3Z0FFSUFOd01RSUFBZ0FDZ0NBRUVnY2pZQ0FFRUFJQWRCQWtZTkFCb2dBaUFFS0FJRWF3c2dBMEVnYWlRQUMwSUJBWDhnQUNnQ1BDTUFRUkJySWdBa0FDQUJweUFCUWlDSXB5QUNRZjhCY1NBQVFRaHFFQjBRdFFJaEFpQUFLUU1JSVFFZ0FFRVFhaVFBUW44Z0FTQUNHd3NNQUVITTVRUWpBLzRYQWdBTFBnRURmeU1CSVFBakF5SUNLQUowSWdFRVFDQUNRUUEyQW5RZ0FSQ1hCeUFCRHdzakFrRUJJQUFiQkVCQkFTUUNRU3dRVFNFQUN5QUFFSmNISUFBTG53RUJCSDhnQTBFQVNnUkFJQUFvQW5BaEFpQUFLQUxrQXlnQ0dDRUhBMEFnQWdSQUlBRWdCVUVDZEdvb0FnQWhBQ0FDSVFZRFFDQUhJQUF0QUFCQkFYWkIvQUJ4YWlnQ0FDQUFMUUFCUVFSMFFjQWZjV29nQUMwQUFrRUNka0UrY1dvaUJDQUVMd0VBSWdRZ0JFRUJhaUlFSUFRZ0JFSC8vd054UnhzN0FRQWdBRUVEYWlFQUlBWkJBV3NpQmcwQUN3c2dCVUVCYWlJRklBTkhEUUFMQ3d2bENnRWJmeUFBSUFBb0F1UURJaE1vQWhBMkFvZ0JJQUJCQVNBVEtBSVVJZ2xCQlhRZ0FDZ0NCQ2dDQUJFRUFDSU5Rb0NBZ0lEd0F6Y0NFQ0FOUW9DQWdJRHdCemNDQ0NBTlFvQ0FnSUR3QXpjQ0FDQUFJQTBRN2dOQkFTRUhBa0FnQ1VFQ1NBMEFBMEFDUUFKQUFrQWdDU0FIUVFGMFRnUkFJQThOQVVFQUlRSkJBQ0VESUEwaEFRd0NDMEVBSVFwQkFDRUNRUUFoQXlBTklRRWdEMEVEVHdSQUlBZEIvUC8vL3dkeElRWkJBQ0VFQTBBZ0FVSGdBR29nQVVGQWF5QUJRU0JxSUFFZ0FpQUJLQUlZSWdJZ0Ewb2lCUnNnQVNnQ09DSUlJQUlnQXlBRkd5SUNTaUlER3lBQktBSllJZ1VnQ0NBQ0lBTWJJZ0pLSWdNYklBRW9BbmdpQ0NBRklBSWdBeHNpQTBvaUJSc2hBaUFJSUFNZ0JSc2hBeUFCUVlBQmFpRUJJQVJCQkdvaUJDQUdSdzBBQ3dzZ0IwRURjU0lFUlEwQ0EwQWdBU0FDSUFFb0FoZ2lCaUFEU2lJRkd5RUNJQVlnQXlBRkd5RURJQUZCSUdvaEFTQUtRUUZxSWdvZ0JFY05BQXNNQWdzZ0IwSCsvLy8vQjNFaEJFRUFJUUpCQUNFRElBMGhBVUVBSVFvRFFDQURJQUVvQWh3aUJrZ0VRQ0FCSUFJZ0FTZ0NHRUVBU2lJRkd5RUNJQVlnQXlBRkd5RURDeUFESUFFb0Fqd2lCa2dFUUNBQlFTQnFJQUlnQVNnQ09FRUFTaUlGR3lFQ0lBWWdBeUFGR3lFREN5QUJRVUJySVFFZ0NrRUNhaUlLSUFSSERRQUxDeUFIUVFGeFJRMEFJQUVvQWh3Z0Ewd05BQ0FCSUFJZ0FTZ0NHRUVBU2hzaEFnc2dBa1VOQVNBTklBZEJCWFJxSWdFZ0FpZ0NCQ0lETmdJRUlBRWdBaWdDRENJS05nSU1JQUVnQWlnQ0ZDSUVOZ0lVSUFFZ0FpZ0NBQ0lHTmdJQUlBRWdBaWdDQ0NJRk5nSUlJQUVnQWlnQ0VDSUlOZ0lRQWtBQ1FBSkFBa0JCQWlBRElBWnJRUVIwSWdzZ0NpQUZhMEVNYkNJT1RDQUVJQWhyUVFOMElBc2dEaUFMSUE1S0cwb2JRUUZyRGdJQkFnQUxJQUlnQXlBR2FrRUNiU0lETmdJRUlBRWdBMEVCYWpZQ0FBd0NDeUFDSUFVZ0NtcEJBbTBpQXpZQ0RDQUJJQU5CQVdvMkFnZ01BUXNnQWlBRUlBaHFRUUp0SWdNMkFoUWdBU0FEUVFGcU5nSVFDeUFBSUFJUTdnTWdBQ0FCRU80RElBOUJBV29oRHlBSFFRRnFJZ2NnQ1VjTkFBc2dDU0VIQzBFQklBY2dCMEVCVEJzaEZrRUFJUXNEUUNBTklBdEJCWFJxSWdFb0FoUWlFQ0FCS0FJUUlnbHFRUUZ4SVJjZ0NVRUJhaUVQSUFsQkEzUkJCSEloR0NBQktBSU1JUlFnQVNnQ0NDRURJQUVvQWdRaEdTQUJLQUlBSVE0Z0FDZ0M1QU1vQWhnaEdrRUFJUVpCQUNFRlFRQWhDRUVBSVFRRFFDQURJQlJNQkVBZ0RrRURkRUVFY2lFUklCb2dEa0VDZEdvb0FnQWhHeUFESVFFRFFDQUJJUW9DUUNBSklCQktEUUFnR3lBQlFRWjBhaUFKUVFGMGFpRUNJQUZCQW5SQkFuSWhFZ0ovSUJjRVFDQUNJUUVnQ1F3QkN5QUNRUUpxSVFFZ0FpOEJBQ0lDQkVBZ0FpQVliQ0FHYWlFR0lBSWdFbXdnQldvaEJTQUNJQkZzSUFocUlRZ2dBaUFFYWlFRUN5QVBDeUVDSUFrZ0VFWU5BQU5BSUFFdkFRQWlEQVJBSUF3Z0Vtd2dCV29oQlNBTUlCRnNJQWhxSVFnZ0FrRURkRUVFY2lBTWJDQUdhaUVHSUFRZ0RHb2hCQXNnQWtFQmFpRVZJQUV2QVFJaURBUkFJQXdnRW13Z0JXb2hCU0FNSUJGc0lBaHFJUWdnRlVFRGRFRUVjaUFNYkNBR2FpRUdJQVFnREdvaEJBc2dBVUVFYWlFQklBSkJBbW9oQWlBUUlCVkhEUUFMQ3lBS1FRRnFJUUVnQ2lBVVJ3MEFDd3NnRGlBWlJ5QU9RUUZxSVE0TkFBc2dBQ2dDaUFFb0FnQWdDMm9nQ0NBRVFRRjFJZ0ZxSUFSdE9nQUFJQUFvQW9nQktBSUVJQXRxSUFFZ0JXb2dCRzA2QUFBZ0FDZ0NpQUVvQWdnZ0Myb2dBU0FHYWlBRWJUb0FBQ0FMUVFGcUlnc2dGa2NOQUFzZ0FDQUhOZ0tFQVNBQUtBSUFJZ0VnQnpZQ0dDQUJRZUlBTmdJVUlBQkJBU0FBS0FJQUtBSUVFUUlBSUJOQkFUWUNIQXZVSHdJc2Z3SjlJd0JCUUdvaUVDUUFJQUFvQW9nQklROGdFQ0FBS0FJQUlpWTJBaEJCQUVFQlFka05JQkJCRUdvUVRpQVBRUmhxSVNRQ1FBTkFJQUFRM3dWQkFFNEVRQ0FQS0FJUUlSTWdEeWdDRENFZklBOG9BZ1FoR0NBUEtBSUFJUVlnRHlnQ0NDSURLQUlJSUFNb0FnUWdBeWdDQUNFRklBOG9BaFFpQTBVRVFDQVBBbjhnQmlnQ0hDRUNJQVlvQWlBaEJFRW9FRTBpQXdSQUFrQWdBeUFFTmdJVUlBTWdBallDQ0NBRElBSTJBaEFnQXlBRU5nSU1JQU1nQWlBRWFrRUJhaUlDTmdJRUlBTWdBallDQUNBRElBSWdBbXhCQVhRUVRTSUNOZ0lZSUFKRkRRQWdBd3dDQ3dzTUJBc2lBellDRkF0QmZ5RWxJQVlvQWd3aEJDQUdJQVZCTUd4cUlnaEJNR29oRFNBRlFmQUFiQ0lnSUJnb0FnQnFJZ0lvQWdBaEZFRVViQ0loSUFJb0FnUW9BZ0JxSVFjaEdTQURJUUZCQUNFTFFRQWhEa0VBSVJFakFFSFFBR3NpQXlRQUFrQUNRQUpBSUFRRVFDQUVRUWhxSUEwZ0EwRVFhaUlGRVBJQ0lBTWdCeWdDQUNBWlFSUnNhaUlDS2dJSUlpMDRBa3dnQXlBQ0tnSU1JaTQ0QWtoQmZ5RUNRUUFnQlNBdElDNGdBMEhNQUdvZ0EwSElBR29Rd0FKQkFFZ05BeUFFUWJnQmFpSVNJQU1xQWt3Z0F5b0NTQ0FEUWNRQWFpQURRVUJyRVBzRFFRQklEUU1nQVNnQ0VDRUNBbjhnQXlvQ1FFTUFBQUEva2lJdGkwTUFBQUJQWFFSQUlDMm9EQUVMUVlDQWdJQjRDeUFDUVFGMEFuOGdBeW9DUkVNQUFBQS9raUl0aTBNQUFBQlBYUVJBSUMyb0RBRUxRWUNBZ0lCNEN5RWFheUVKUVFBZ0Ftc2hDaUFCS0FJWUlRUURRQ0FLSUFFb0FoUktEUUpCQUNBQktBSUlJZ0pySVFVZ0dpQUNRUUYwYXlFQ0lBbXlJUzBEUUFKQUFrQWdBU2dDRENBRlRnUkFJQklnQXJJZ0xTQURRY1FBYWlBRFFVQnJFSUFDUVFCSURRRWdBMEVRYWlBVUtBSUFJQWNvQWdoQkFuUnFLQUlBSUFNcUFrUWdBeW9DUUNBRFFROXFFTG9GUVFCSURRRWdCQ0FETFFBUElndzdBUUFnRGtFQmFpRU9JQXNnREdvaEN5QU1JQXhzSUJGcUlSRU1BZ3NnQ1VFQ2FpRUpJQXBCQVdvaENnd0RDeUFFUVlBZ093RUFDeUFDUVFKcUlRSWdCVUVCYWlFRklBUkJBbW9oQkF3QUN3QUxBQXRCQUNBTklBY29BZ0FnR1VFVWJHb2lBaW9DQ0NBQ0tnSU1JQU5CeEFCcUlBTkJRR3NRd0FKQkFFZ05BU0FCS0FJUUlRSUNmeUFES2dKQVF3QUFBRCtTSWkyTFF3QUFBRTlkQkVBZ0xhZ01BUXRCZ0lDQWdIZ0xJQUpCQVhRQ2Z5QURLZ0pFUXdBQUFEK1NJaTJMUXdBQUFFOWRCRUFnTGFnTUFRdEJnSUNBZ0hnTElSSnJJUWxCQUNBQ2F5RUtJQUVvQWhnaERBTkFJQW9nQVNnQ0ZFb05BVUVBSUFFb0FnZ2lCR3NoQWlBU0lBUkJBWFJySVFRZ0NiSWhMUU5BSUFFb0Fnd2dBazRFUUFKQUlBMGdGQ2dDQUNBSEtBSUlRUUowYWlnQ0FDQUVzaUF0SUFOQkQyb1F1Z1ZCQUVnRVFFR0FJQ0VGREFFTElBNUJBV29oRGlBTElBTXRBQThpQldvaEN5QUZJQVZzSUJGcUlSRUxJQXdnQlRzQkFDQUVRUUpxSVFRZ0FrRUJhaUVDSUF4QkFtb2hEQXdCQ3dzZ0NVRUNhaUVKSUFwQkFXb2hDZ3dBQ3dBTElBNUZEUUFnQVNBT05nSWtJQUVnQ3pZQ0lDQUJBbjhnRVNBTElBdHNJQTV0YTdLUklpMkxRd0FBQUU5ZEJFQWdMYWdNQVF0QmdJQ0FnSGdMTmdJY1FRQWhBZ3dCQzBGL0lRSUxJQU5CMEFCcUpBQUNRQ0FDUVFCSURRQWdEeWdDRkNJQktBSVFJQUVvQWhScVFRRnFJQUVvQWdnZ0FTZ0NER3BCQVdwc3NrTUFBS0JBbEVNQUFLQkFsQ0FCS0FJY0lnRWdBV3l6WGcwQUlBWW9BZ3doQVFKQUFrQUNRQUpBSUJnb0FwZ0JRUUZyRGdJQUFRSUxJQUVnRFVFQVFRQWdHQ2dDQUNBZ2FpZ0NCQ2dDQUNBaGFpZ0NBQ0FaUVJSc2FpQVFRU0JxRU8wRERBSUxJQUVnRFNBSVFaQUVha0VBSUJnb0FnQWdJR29vQWdRb0FnQWdJV29vQWdBZ0dVRVViR29nRUVFZ2FoRHRBd3dCQ3lBQklBMGdDRUdRQkdvZ0NFSHdCMm9nR0NnQ0FDQWdhaWdDQkNnQ0FDQWhhaWdDQUNBWlFSUnNhaUFRUVNCcUVPMERDd0ovSUFZb0FnUWhEU0FHS0FJSUlSUWdCaWdDRkNFYUlBOG9BaFFoQ0NBR0tBSVlJUXNnRUVFZ2FpRVJRUUFoQkNNQVFVQnFJZ2NrQUNBVVFRRnJJUVVnRFVFQmF5RU9JQXRCQW1vaERDQUlLQUlVSUFnb0FoQURRQUpBSUFSQkEwWU5BQ0FSSUFSQkEzUnFJZ0VvQWdBaUEwRUFTQTBBSUFOQi9QLy8vd2R4UVFKeUlnTWdDMm9pQWlBT0lBSWdEVWdiSVJJZ0FTZ0NCRUVFYlVFQ2RDSUJJQXhxSWdJZ0JTQUNJQlJJR3lFVklBRkJBbklnQzJzaUFVRUFJQUZCQUVvYklRWWdFeUFESUF0cklnRkJBQ0FCUVFCS0d5SURhaUViQTBBZ0JpQVZUQVJBSUJzZ0JpQU5iR29oQWlBRElRRURRQ0FCSUJKTUJFQWdBa0VBT2dBQUlBRkJBV29oQVNBQ1FRRnFJUUlNQVFzTElBWkJBV29oQmd3QkN3c2dCRUVCYWlFRURBRUxDMEVCZENFU1FRRjBJUlZCQUNFQ1FRQWhDVUVCSVFVRFFBSkFBa0FDUUNBSlFRTkhCRUFnRVNBSlFRTjBhaUlCS0FJQUlnTkJBRTROQWtGL0lSVWdCUTBCQ3lBSUtBSUFRUU4wUVNCcUlBZ29BZ1JCQVhSQkNHcHNJZ0VRVFNJVEJFQWdBUkJOSWdzRVFDQUNRUUFnQWtFQVNoc2hJaUFOUVFGMElTTkJmeUVWSUJwQkRrc2hGMEVBSVJKQkFDRU9BMEFDUUNBU0lDSkhCRUFDUUFKQVFRRWdHblJCb09BQmNVVWdDQ2dDSkNBSUtBSUVJZ0lnQ0NnQ0FDSURiRWNnRjNKeURRQWdFa0VDZENJQklBZEJLR3BxSWljb0FnQWlCaUFJS0FJUVFRRjBhMEVEYXlJYlFRQklEUUFnQmlBSUtBSVVRUUYwYWtFRGFpQVVUZzBBSUFkQk5Hb2dBV29pS0NnQ0FDSUJJQWdvQWdoQkFYUnJRUU5ySWdSQkFFZ05BQ0FCSUFnb0FneEJBWFJxUVFOcUlBMUlEUUVMSUJKQkFuUWlBU0FIUVNocWFpZ0NBQ0lEUVFOcUlRWWdBMEVEYXlFQ0lBZEJOR29nQVdvaEJBTkFJQUlnQmtvTkF3SkFJQUlnQ0NnQ0VFRUJkRWdOQUNBSUtBSVVRUUYwSUFKcUlCUk9EUVFnQkNnQ0FDSUJRUU5xSVFVZ0FVRURheUVCQTBBZ0FTQUZTZzBCQWtBZ0FTQUlLQUlJUVFGMFNBMEFJQWdvQWd4QkFYUWdBV29nRFU0TkFpQWZJQTBnR2lBSUlBRWdBaUFIUVJocUVNY0ZJQWNvQWhnaUF5QU9UQTBBSUJBZ0FUWUNIQ0FRSUFJMkFoZ2dKQ0FEc2tNQVFCeEdsVGdDQUVFQUlSVWdBeUVPQ3lBQlFRRnFJUUVNQUFzQUN5QUNRUUZxSVFJTUFBc0FDMEVBSVFFZ0EwRUNkRUVRYWlJR1FRQWdCa0VBU2hzaENTQUNRUUYwUVFacUlRWWdFeUVDSUFzaEJRTkFJQUVnQ1VjRVFDQUNRUUEyQWdBZ0JVRUFOZ0lBSUFGQkFXb2hBU0FGUVFScUlRVWdBa0VFYWlFQ0RBRUxDMEVBSVF3Z0EwRUJkRUVHYWlJQlFRQWdBVUVBU2hzaEZpQUdRUUFnQmtFQVNoc2hIQ0FmSUEwZ0cyeHFJQVJxSVFvZ0V5RUdJQXNoQXdOL0lBd2dIRVlFZnlBRUlCOXFJUjBnQ0NnQ0dDRVJRUUFGUVFBaEFTQUNRUUEyQWdBZ0JVRUFOZ0lBSUFkQkFEWUNDQ0FIUVFBMkFoQWdBa0VBTmdJRUlBVkJBRFlDQkNBSFFRQTJBZ3dnQjBFQU5nSVVJQU5CQ0dvaEF5QUdRUWhxSVFZZ0FrRUlhaUVDSUFWQkNHb2hCU0FLSVFrRFFDQUJJQlpIQkVBZ0FVRUNkRUVFY1NJZElBZEJFR3BxSWg0Z0NTMEFBQ0lSSUI0b0FnQnFJaDQyQWdBZ0IwRUlhaUFkYWlJZElCMG9BZ0FnRVNBUmJHb2lFVFlDQUNBQ0lBWW9BZ0FnSG1vMkFnQWdCU0FES0FJQUlCRnFOZ0lBSUFGQkFXb2hBU0FGUVFScUlRVWdBMEVFYWlFRElBSkJCR29oQWlBR1FRUnFJUVlnQ1VFQmFpRUpEQUVMQ3lBTVFRRnFJUXdnQ2lBTmFpRUtEQUVMQ3lFS0EwQUNRQ0FLUVFkSEJFQWdDa0VEYXlFZUlCMGdDaUFiYWlBTmJHb2hLVUVBSVF3RFFDQU1RUWRHRFFKQkFDRUdJQWdvQWdRaUZrRUFJQlpCQUVvYklTb2dEQ0FwYWlFRElBZ29BZ0FpSEVFQUlCeEJBRW9iSWl0QkFYUWhMQ0FSSVFSQkFDRUpBMEFnQ1NBcVJ3UkFJQU1oQWlBRUlRVkJBQ0VCQTBBZ0FTQXJSd1JBSUFGQkFXb2hBU0FGTHdFQUlBSXRBQUJzSUFacUlRWWdBa0VDYWlFQ0lBVkJBbW9oQlF3QkN3c2dDVUVCYWlFSklBTWdJMm9oQXlBRUlDeHFJUVFNQVFzTFFRQWhBU0FMSUJ4QkFYUWlBMEVJYWlJQ0lBcHNJZ1FnREdwQkFuUWlCV29vQWdBZ0N5QUNJQlpCQVhRZ0NtcHNJZ0lnQXlBTWFpSURha0VDZENJSmFpZ0NBR29pRmlBTElBTWdCR3BCQW5RaUEyb29BZ0FnQ3lBQ0lBeHFRUUowSWdKcUtBSUFhaUFGSUJOcUtBSUFJQWtnRTJvb0FnQnFJQUlnRTJvb0FnQWdBeUFUYWlnQ0FHcHJJZ01nQTJ3Z0NDZ0NKQ0lDYldvaUJFY0VRQ0FHSUFnb0FpQWdBMndnQW0xclFlUUFiQ0FJS0FJY2JVSGtBR3dDZnlBV0lBUnJzcEVpTFl0REFBQUFUMTBFUUNBdHFBd0JDMEdBZ0lDQWVBdHRJUUVMSUFFZ0Rrb0VRQ0FRSUF3Z0tDZ0NBR3BCQTJzMkFod2dFQ0FlSUNjb0FnQnFOZ0lZSUNRZ0FiSkRBRUFjUnBVNEFnQkJBQ0VWSUFFaERnc2dERUVCYWlFTURBQUxBQXNnQnlBQk5nSVlEQU1MSUFwQkFXb2hDZ3dBQ3dBTElCTVFTQ0FMRUVnTUJBc2dFa0VCYWlFU0RBQUxBQXNNQXdzTUFnc2dCMEZBYXlRQUlCVU1Bd3NnQTBIOC8vLy9CM0ZCQW5JaUF5QUxhaUViSUFNZ0Myc2hEaUFCS0FJRVFRUnRRUUowSWdFZ0RHb2hGaUFCUVFKeUlBdHJJUVFEUUFKQUFrQWdCQ0FXU2cwQUlBUWdFa2dOQVNBRUlCVnFJQlJPRFFBZ0V5QUVJQTFzYWlFY0lBNGhCZ05BSUFZZ0cwb05BZ0pBSUFZZ0NDZ0NDRUVCZEVnTkFDQUlLQUlNUVFGMElBWnFJQTFPRFFNZ0JpQWNhaUlCTFFBQURRQWdBVUVCT2dBQUlCOGdEU0FhSUFnZ0JpQUVJQWRCR0dvUXh3VWdCeWdDR0NFS0lBSUVRRUVBSVFFZ0FrRUFJQUpCQUVvYklRTURRQUpBSUFFZ0EwY0VRQ0FIUVJ4cUlBRkJBblJxS0FJQUlBcE9EUUVnQVNFREN5QUNJQU5HQkVCQkFDRUZJQUpCQWtzTkJDQUNRUUowSWdFZ0IwRW9hbW9nQkRZQ0FDQUhRVFJxSUFGcUlBWTJBZ0FnQjBFY2FpQUJhaUFLTmdJQUlBSkJBV29oQWd3RUMwRUNJQUlnQWtFRFJpSWlHeUVCSUFKQkFXb2hJd05BSUFFZ0Ewb0VRQ0FCUVFKMElnSWdCMEUwYWlJWGFpQVhJQUZCQVdzaUFVRUNkQ0lGYWlnQ0FEWUNBQ0FDSUFkQktHb2lGMm9nQlNBWGFpZ0NBRFlDQUNBQ0lBZEJIR29pRjJvZ0JTQVhhaWdDQURZQ0FBd0JDd3NnQVVFQ2RDSUJJQWRCS0dwcUlBUTJBZ0FnQjBFMGFpQUJhaUFHTmdJQUlBZEJIR29nQVdvZ0NqWUNBRUVESUNNZ0loc2hBa0VBSVFVTUF3c2dBVUVCYWlFQkRBQUxBQXNnQnlBRU5nSW9JQWNnQmpZQ05DQUhJQW8yQWh4QkFDRUZRUUVoQWdzZ0JrRUVhaUVHREFBTEFBc2dDVUVCYWlFSkRBTUxJQVJCQkdvaEJBd0FDd0FMQ3d3RUMwRUFTQTBBSUE4Z0VDZ0NITEk0QWh3Z0R5QVFLQUlZc2pnQ0lDQVBJQmdvQWdBZ0lHb2lBU29DR0NBQktnSU1JQUVvQWdRb0FnQWdJV29vQWdBZ0dVRVViR29pQXlvQ0NKUWdBU29DRUNBREtnSU1sSktTT0FJa0lBOGdBU29DS0NBQktnSWNJQU1xQWdpVUlBRXFBaUFnQXlvQ0RKU1NramdDS0NBUElBRXFBamdnQVNvQ0xDQURLZ0lJbENBQktnSXdJQU1xQWd5VWtwSTRBaXhCQUNFbEN5QVBJQ1UyQWpBZ0FCRGVCUXdCQ3dzZ0VDQW1OZ0lBUVFCQkFVSHlGaUFRRUU0Z0VFRkFheVFBUVFBUEMwRUFRUU5COVExQkFCQk9RUUVRQWdBTHFBVUJJMzhnQTBFQVNnUkFJQUFvQXRBQ0lSTWdBQ2dDaUFFaUNDZ0NDQ0VjSUFnb0FnUWhIU0FJS0FJQUlSNGdBQ2dDNUFNaUNpZ0NLQ0VVSUFvb0FoZ2hIeUFBS0FKd0loVkJCbXdoSUNBVlFRRnJJaUZCQTJ3aElnTkFJQUlnRmtFQ2RDSUlhaWdDQUNFTElBRWdDR29vQWdBaEJnSi9JQW9vQWlRRVFDQUxJQ0ZxSVFzZ0JpQWlhaUVHUVgwaERFRi9JUmRCQUNFTklBb29BaUFnSUdwQkJtb01BUXRCQXlFTVFRRWhEVUVCSVJjZ0NpZ0NJQXNoQkNBS0lBMDJBaVFDUUNBVlJRUkFRUUFoRGtFQUlROUJBQ0VRREFFTFFRQWhFU0FNUVFGcVFRRjBJU01nREVFQ2FrRUJkQ0VrUVFBaENVRUFJUkpCQUNFWVFRQWhHVUVBSVJwQkFDRVFRUUFoRDBFQUlRNGdGU0ViQTBBZ0N5QWZJQVl0QUFBZ0V5QVVJQkVnQkNBTVFRRjBhaUlJTGdFQWFrRUlha0VFZFVFQ2RHb29BZ0JxYWkwQUFDSWxRUU4ySWlaQkFuUnFLQUlBSUFZdEFBRWdFeUFVSUFrZ0JDQWphaTRCQUdwQkNHcEJCSFZCQW5ScUtBSUFhbW90QUFBaUVVRUNkaUlKUVFaMGFpQUdMUUFDSUJNZ0ZDQVNJQVFnSkdvdUFRQnFRUWhxUVFSMVFRSjBhaWdDQUdwcUxRQUFJaEpCQTNZaUJVRUJkR29pQnk4QkFDSU5CSDhnRFFVZ0FDQW1JQWtnQlJESUJTQUhMd0VBQzBFQmF5SUZPZ0FBSUFVZ0htb3RBQUFoQ1NBRklCMXFMUUFBSVFjZ0JDQVNJQVVnSEdvdEFBQnJJZ1ZCQTJ3Z0RtbzdBUVFnQkNBUklBZHJJZ2RCQTJ3Z0QybzdBUUlnQkNBbElBbHJJZ1JCQTJ3Z0VHbzdBUUFnQ3lBWGFpRUxJQVlnREdvaEJpQUZRUWRzSVJJZ0IwRUhiQ0VKSUFSQkIyd2hFU0FGUVFWc0lCcHFJUTRnQjBFRmJDQVphaUVQSUFSQkJXd2dHR29oRUNBRUlSZ2dCeUVaSUFVaEdpQUlJUVFnRzBFQmF5SWJEUUFMQ3lBRUlBNDdBUVFnQkNBUE93RUNJQVFnRURzQkFDQVdRUUZxSWhZZ0EwY05BQXNMQzc4QkFRdC9JQU5CQUVvRVFDQUFLQUp3SVFrZ0FDZ0M1QU1vQWhnaENnTkFJQWtFUUNBQklBWkJBblFpQldvb0FnQWhCQ0FDSUFWcUtBSUFJUWNnQ1NFRkEwQWdDaUFFTFFBQVFRTjJJZ3RCQW5ScUtBSUFJQVF0QUFGQkFuWWlERUVHZEdvZ0JDMEFBa0VEZGlJTlFRRjBhaUlPTHdFQUlnaEZCRUFnQUNBTElBd2dEUkRJQlNBT0xRQUFJUWdMSUFSQkEyb2hCQ0FISUFoQkFXczZBQUFnQjBFQmFpRUhJQVZCQVdzaUJRMEFDd3NnQmtFQmFpSUdJQU5IRFFBTEN3dkJCUUVFZnlBQUtBTGtBeUlES0FJWUlRSUNRQUpBQWtBQ2Z5QUFLQUpZUlFSQUlBRU5Ba0dJQWd3QkN5QUFRUUkyQWxnZ0FRMEJRWWtDQ3lFQklBTkJpZ0kyQWdnZ0F5QUJOZ0lFUVFFaEFRSkFJQUFvQW9RQklnUkJBRXdFZjBFNkJTQUVRWUVDU1EwQlFZQUNJUUZCT3dzaEJDQUFLQUlBSWdVZ0FUWUNHQ0FGSUFRMkFoUWdBQ0FBS0FJQUtBSUFFUUVBQ3lBQUtBSllRUUpIRFFJZ0FDZ0NjRUVHYkVFTWFpRUVJQU1vQWlBaUJVVUVRQ0FESUFCQkFTQUVJQUFvQWdRb0FnUVJCQUFpQlRZQ0lBdEJBQ0VCSUFWQkFDQUVFRkFhUVNRaEJDQURLQUlvRFFFZ0FCREpCUXdCQ3lBRFFZc0NOZ0lJSUFOQmpBSTJBZ1JCQVNFQlFSd2hCQXNnQXlBRWFpQUJOZ0lBQ3lBREtBSWNCRUFnQWlnQ0FFRUFRWUFnRUZBYUlBSW9BZ1JCQUVHQUlCQlFHaUFDS0FJSVFRQkJnQ0FRVUJvZ0FpZ0NERUVBUVlBZ0VGQWFJQUlvQWhCQkFFR0FJQkJRR2lBQ0tBSVVRUUJCZ0NBUVVCb2dBaWdDR0VFQVFZQWdFRkFhSUFJb0FoeEJBRUdBSUJCUUdpQUNLQUlnUVFCQmdDQVFVQm9nQWlnQ0pFRUFRWUFnRUZBYUlBSW9BaWhCQUVHQUlCQlFHaUFDS0FJc1FRQkJnQ0FRVUJvZ0FpZ0NNRUVBUVlBZ0VGQWFJQUlvQWpSQkFFR0FJQkJRR2lBQ0tBSTRRUUJCZ0NBUVVCb2dBaWdDUEVFQVFZQWdFRkFhSUFJb0FrQkJBRUdBSUJCUUdpQUNLQUpFUVFCQmdDQVFVQm9nQWlnQ1NFRUFRWUFnRUZBYUlBSW9Ba3hCQUVHQUlCQlFHaUFDS0FKUVFRQkJnQ0FRVUJvZ0FpZ0NWRUVBUVlBZ0VGQWFJQUlvQWxoQkFFR0FJQkJRR2lBQ0tBSmNRUUJCZ0NBUVVCb2dBaWdDWUVFQVFZQWdFRkFhSUFJb0FtUkJBRUdBSUJCUUdpQUNLQUpvUVFCQmdDQVFVQm9nQWlnQ2JFRUFRWUFnRUZBYUlBSW9BbkJCQUVHQUlCQlFHaUFDS0FKMFFRQkJnQ0FRVUJvZ0FpZ0NlRUVBUVlBZ0VGQWFJQUlvQW54QkFFR0FJQkJRR2lBRFFRQTJBaHdMQ3cwQUlBQW9BdVFEUVFFMkFod0x0QU1CR1g4Z0EwRUFTZ1JBSUFBb0F0QUNJUkpCQUNBQUtBSjRJZ2xySVJNZ0FDZ0M1QU1pQjBIRUFHb2hEeUFBS0FKd0lncEJBV3NpRkNBSmJDRVZJQWxCQUV3aEZnTkFJQUlnQzBFQ2RDSUFhaUlYS0FJQVFRQWdDaEJRR2lBV1JRUkFJQUFnQVdvaEdFRUFJUVlEUUNBWUtBSUFJQVpxSVFnZ0Z5Z0NBQ0VBQW44Z0J5Z0NWQVJBSUE4Z0JrRUNkR29vQWdBZ0NrRUJkR3BCQW1vaEJDQUFJQlJxSVFBZ0NDQVZhaUVJUVg4aERDQVREQUVMSUE4Z0JrRUNkR29vQWdBaEJFRUJJUXdnQ1FzaEdVRUFJUVVnQ2dSQUlBWkJBblFpRFNBSEtBSVFhaWdDQUNFYUlBY29BaGdnRFdvb0FnQWhHMEVBSVJBZ0NpRVJRUUFoRGdOQUlBQWdHeUFJTFFBQUlCSWdCU0FFSUF4QkFYUnFJZzB1QVFCcVFRaHFRUVIxYW1vdEFBQWlIR290QUFBaUJTQUFMUUFBYWpvQUFDQUVJQndnQlNBYWFpMEFBR3NpQkVFRGJDQU9hanNCQUNBRVFRZHNJUVVnQkVFRmJDQVFhaUVPSUFBZ0RHb2hBQ0FJSUJscUlRZ2dCQ0VRSUEwaEJDQVJRUUZySWhFTkFBc2dEaUVGQ3lBRUlBVTdBUUFnQmtFQmFpSUdJQWxIRFFBTEN5QUhJQWNvQWxSRk5nSlVJQXRCQVdvaUN5QURSdzBBQ3dzTCtnSUJFWDhnQTBFQVNnUkFJQUFvQW5naEJpQUFLQUp3SWdkQmZuRWhEeUFIUVFGeElSQWdBQ2dDNUFNaUNVRTBhaUVSQTBBZ0FpQUtRUUowSWdCcUloSW9BZ0JCQUNBSEVGQWFJQWtvQWpBaERTQUdRUUJLQkVBZ0FDQUJhaUVUUVFBaENDQU5RUVowSVJRRFFBSkFJQWRGRFFBZ0VTQUlRUUowSWdCcUtBSUFJQlJxSVFzZ0NTZ0NHQ0FBYWlnQ0FDRU1JQk1vQWdBZ0NHb2hCQ0FTS0FJQUlRQkJBQ0VGUVFBaERpQUhRUUZIQkVBRFFDQUFJQUF0QUFBZ0JDMEFBQ0FNSUFzZ0JVRUNkR29vQWdCcWFpMEFBR282QUFBZ0FDQUFMUUFCSUFRZ0Jtb2lCQzBBQUNBTUlBc2dCVUVCYWtFUGNVRUNkR29vQWdCcWFpMEFBR282QUFFZ0FFRUNhaUVBSUFWQkFtcEJEM0VoQlNBRUlBWnFJUVFnRGtFQ2FpSU9JQTlIRFFBTEN5QVFSUTBBSUFBZ0FDMEFBQ0FFTFFBQUlBd2dDeUFGUVFKMGFpZ0NBR3BxTFFBQWFqb0FBQXNnQ0VFQmFpSUlJQVpIRFFBTEN5QUpJQTFCQVdwQkQzRTJBakFnQ2tFQmFpSUtJQU5IRFFBTEN3dU5BZ0VPZnlBRFFRQktCRUFnQUNnQ2NDRUtJQUFvQXVRRElnUW9BaGdpQUNnQ0NDRU1JQUFvQWdRaERTQUFLQUlBSVE0Z0JDZ0NNQ0VHQTBBZ0NnUkFJQVpCQm5RaUFDQUVLQUk4YWlFUElBUW9BamdnQUdvaEVDQUVLQUkwSUFCcUlSRWdBU0FIUVFKMElnVnFLQUlBSVFBZ0FpQUZhaWdDQUNFSVFRQWhDU0FLSVFVRFFDQUlJQUF0QUFFZ0RTQVFJQWxCQW5RaUMyb29BZ0JxYWkwQUFDQUFMUUFBSUE0Z0N5QVJhaWdDQUdwcUxRQUFhaUFBTFFBQ0lBd2dDeUFQYWlnQ0FHcHFMUUFBYWpvQUFDQUlRUUZxSVFnZ0FFRURhaUVBSUFsQkFXcEJEM0VoQ1NBRlFRRnJJZ1VOQUFzTElBUWdCa0VCYWtFUGNTSUdOZ0l3SUFkQkFXb2lCeUFEUncwQUN3c0wyUUlCRDM4Z0EwRUFTZ1JBSUFBb0FuQWhDeUFBS0FMa0F5Z0NHQ0VNSUFBb0FuZ2lCa0g4Ly8vL0IzRWhFU0FHUVFOeElRMGdCa0VFU1NFU0EwQWdDd1JBSUFFZ0IwRUNkQ0lBYWlnQ0FDRUlJQUFnQW1vb0FnQWhDU0FMSVE0RFFBSkFJQVpCQUV3RVFFRUFJUVFNQVF0QkFDRVBRUUFoQkVFQUlRVWdDQ0VBUVFBaEVDQVNSUVJBQTBBZ0JDQU1JQVZCQW5ScUlnb29BZ0FnQUMwQUFHb3RBQUJxSUFvb0FnUWdBQzBBQVdvdEFBQnFJQW9vQWdnZ0FDMEFBbW90QUFCcUlBb29BZ3dnQUMwQUEyb3RBQUJxSVFRZ0JVRUVhaUVGSUFCQkJHb2hBQ0FRUVFScUloQWdFVWNOQUFzTElBMEVRQU5BSUFRZ0RDQUZRUUowYWlnQ0FDQUFMUUFBYWkwQUFHb2hCQ0FGUVFGcUlRVWdBRUVCYWlFQUlBOUJBV29pRHlBTlJ3MEFDd3NnQmlBSWFpRUlDeUFKSUFRNkFBQWdDVUVCYWlFSklBNUJBV3NpRGcwQUN3c2dCMEVCYWlJSElBTkhEUUFMQ3d1Z0FnRUpmeUFEUVFCS0JFQWdBQ2dDNUFNb0FoZ2lCQ2dDQ0NFSElBUW9BZ1FoQ0NBRUtBSUFJUWtnQUNnQ2NDSUdRUUZySVFzZ0JrRUJjU0VNQTBBQ1FDQUdSUTBBSUFFZ0NrRUNkQ0lFYWlnQ0FDRUFJQUlnQkdvb0FnQWhCU0FNQkg4Z0JTQUhJQUF0QUFKcUxRQUFJQWdnQUMwQUFXb3RBQUFnQ1NBQUxRQUFhaTBBQUdwcU9nQUFJQVZCQVdvaEJTQUFRUU5xSVFBZ0N3VWdCZ3NoQkNBR1FRRkdEUUFEUUNBRklBY2dBQzBBQW1vdEFBQWdDQ0FBTFFBQmFpMEFBQ0FKSUFBdEFBQnFMUUFBYW1vNkFBQWdCU0FISUFBdEFBVnFMUUFBSUFnZ0FDMEFCR290QUFBZ0NTQUFMUUFEYWkwQUFHcHFPZ0FCSUFWQkFtb2hCU0FBUVFacUlRQWdCRUVDYXlJRURRQUxDeUFLUVFGcUlnb2dBMGNOQUFzTEN5SUJBWDFCZnlBQUtnSUFJQUVxQWdDVElnSkRBQUFBQUY0Z0FrTUFBQUFBWFJzTGl3VUJDbjhnQUNBQUtBTGtBeUlCS0FJUU5nS0lBU0FBSUFFb0FoUTJBb1FCQWtBQ1FBSkFBa0FDUUNBQUtBSllEZ01BQVFJREN5QUFLQUo0UVFOR0JFQWdBVUdCQWpZQ0JBOExJQUZCZ2dJMkFnUVBDeUFBS0FKNElRTWdBVUVBTmdJd0lBRkJnd0pCaEFJZ0EwRURSaHMyQWdRZ0FTZ0NIRVVFUUNBQUVNb0ZDeUFCS0FJMERRSWdBQ2dDZUNJQ1FRQk1EUUlnQUNnQzVBTWlBVUUwYWlFR0lBRkJJR29oQjBFQUlRTURRQ0FISUFOQkFuUWlDbW9vQWdBaEJVRUFJUUVDUUFKQUlBTkZEUUFEUUNBSElBRkJBblFpQkdvb0FnQWdCVWNFUUNBQlFRRnFJZ0VnQTBjTkFRd0NDd3NnQkNBR2FpZ0NBQ0lFRFFFTElBVkJDWFJCZ0FScklRVkJBQ0VDSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBSVFRRFFDQUVJQUpCQm5ScUlRZ2dBa0VFZEVHd2xRTnFJUWxCQUNFQkEwQWdDQ0FCUVFKMGFrSC9BU0FCSUFscUxRQUFRUUYwYTBIL0FXd2dCVzAyQWdBZ0NDQUJRUUZ5SWd0QkFuUnFRZjhCSUFrZ0Myb3RBQUJCQVhSclFmOEJiQ0FGYlRZQ0FDQUJRUUpxSWdGQkVFY05BQXNnQWtFQmFpSUNRUkJIRFFBTElBQW9BbmdoQWdzZ0JpQUthaUFFTmdJQUlBTkJBV29pQXlBQ1NBMEFDd3dDQ3lBQlFRQTJBbFFnQVVHRkFqWUNCQ0FCUWNRQWFpRURBa0FnQVNnQ1JBUkFJQUFvQW5naEFnd0JDeUFBS0FKNFFRQk1EUUlnQUNnQ2NFRUJkRUVFYWlFRVFRQWhBUU5BSUFNZ0FVRUNkR29nQUVFQklBUWdBQ2dDQkNnQ0JCRUVBRFlDQUNBQlFRRnFJZ0VnQUNnQ2VDSUNTQTBBQ3dzZ0FrRUFUQTBCSUFBb0FuQkJBWFJCQkdvaEFrRUFJUUVEUUNBRElBRkJBblJxS0FJQVFRQWdBaEJRR2lBQlFRRnFJZ0VnQUNnQ2VFZ05BQXNNQVFzZ0FDZ0NBQ0lCUVRFMkFoUWdBQ0FCS0FJQUVRRUFDd3NhQVFGL0lBQW9BZ0FpQVVFdk5nSVVJQUFnQVNnQ0FCRUJBQXZLQVFFRGZ5QUFLQUlFSVFNZ0FrSHhrK3ZjQTA4RVFDQUFLQUlBUXJpQWdJQXdOd0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBVUVDVHdSQUlBQW9BZ0FpQkNBQk5nSVlJQVJCRHpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFKQkIycEJlSEVpQkVFUWFpSUZFRTBpQWtVRVFDQUFLQUlBUXJpQWdJREFBRGNDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQU1nQXlnQ1RDQUZhallDVENBRElBRkJBblJxSWdBb0Fqd2hBU0FDUVFBMkFnZ2dBaUFFTmdJRUlBSWdBVFlDQUNBQUlBSTJBandnQWtFUWFndDZBUUovSUFBb0FnUWhCaUFCUVFGSEJFQWdBQ2dDQUNJSElBRTJBaGdnQjBFUE5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0FDQUJRWUFCRU1VQ0lnQkJBRFlDS0NBQUlBSTJBaUFnQUNBRk5nSU1JQUFnQXpZQ0NDQUFJQVEyQWdRZ0FFRUFOZ0lBSUFBZ0JpZ0NSRFlDTENBR0lBQTJBa1FnQUF0NkFRSi9JQUFvQWdRaEJpQUJRUUZIQkVBZ0FDZ0NBQ0lISUFFMkFoZ2dCMEVQTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQUNBQlFZQUJFTVVDSWdCQkFEWUNLQ0FBSUFJMkFpQWdBQ0FGTmdJTUlBQWdBellDQ0NBQUlBUTJBZ1FnQUVFQU5nSUFJQUFnQmlnQ1NEWUNMQ0FHSUFBMkFrZ2dBQXZUQXdFRmZ5QUFLQUlFSWdVb0FrUWlBUVJBQTBBZ0FTZ0NBRVVFUUNBQktBSUlJZ1FnQVNnQ0JHd2dBMm9oQXlBRUlBRW9BZ3hzSUFKcUlRSUxJQUVvQWl3aUFRMEFDd3NnQlNnQ1NDSUJCRUFEUUNBQktBSUFSUVJBSUFFb0FnZ2lCQ0FCS0FJRWJFRUhkQ0FEYWlFRElBRW9BZ3dnQkd4QkIzUWdBbW9oQWdzZ0FTZ0NMQ0lCRFFBTEN3SkFJQUpCQUV3TkFFR0FsT3ZjQXlFRUlBVW9Ba3dhSUFVb0FrUWlBUVJBQTBBZ0FTZ0NBRVVFUUFKQUlBUWdBU2dDQkNJQ1FRRnJJQUVvQWd3aUEyNUJBV3BPQkVBZ0FTQUNOZ0lRREFFTElBRWdBeUFFYkRZQ0VDQUJLQUlJR2lBQUVNc0ZJQUZCQVRZQ0tDQUJLQUlRSVFJTElBRWdBRUVCSUFFb0FnZ2dBaERNQlRZQ0FDQUZLQUpRSVFJZ0FVRUFOZ0lrSUFGQ0FEY0NHQ0FCSUFJMkFoUUxJQUVvQWl3aUFRMEFDd3NnQlNnQ1NDSUJSUTBBQTBBZ0FTZ0NBRVVFUUFKQUlBUWdBU2dDQkNJQ1FRRnJJQUVvQWd3aUEyNUJBV3BPQkVBZ0FTQUNOZ0lRREFFTElBRWdBeUFFYkRZQ0VDQUJLQUlJR2lBQUVNc0ZJQUZCQVRZQ0tDQUJLQUlRSVFJTElBRWdBRUVCSUFFb0FnZ2dBaEROQlRZQ0FDQUZLQUpRSVFJZ0FVRUFOZ0lrSUFGQ0FEY0NHQ0FCSUFJMkFoUUxJQUVvQWl3aUFRMEFDd3NMN3dZQkIzOENRQUpBSUFJZ0Eyb2lDQ0FCS0FJRVN3MEFJQU1nQVNnQ0RFc05BQ0FCS0FJQURRRUxJQUFvQWdBaUEwRVhOZ0lVSUFBZ0F5Z0NBQkVCQUFzQ1FDQUJLQUlZSWdNZ0FrMEVRQ0FJSUFFb0FoQWdBMnBORFFFTElBRW9BaWhGQkVBZ0FDZ0NBQ0lEUWNjQU5nSVVJQUFnQXlnQ0FCRUJBQXNnQVNnQ0pBUkFBa0FnQVNnQ0VDSUdRUUJNRFFBZ0FVRXdhaUVKSUFFb0FnZ2lDaUFCS0FJWWJDRUhJQUVvQWhRaEJVRUFJUU1EUUNBRklBWWdBMnNpQmlBRklBWklHeUlGSUFFb0Fod2dBU2dDR0NBRGFpSUdheUlMSUFVZ0MwZ2JJZ1VnQVNnQ0JDQUdheUlHSUFVZ0JrZ2JJZ1ZCQUV3TkFTQUFJQWtnQVNnQ0FDQURRUUowYWlnQ0FDQUhJQVVnQ213aUJTQUJLQUkwRVFZQUlBVWdCMm9oQnlBQktBSVVJZ1VnQTJvaUF5QUJLQUlRSWdaSURRQUxDeUFCUVFBMkFpUUxRUUFoQXlBQklBSWdDQ0FCS0FJUUlnWnJJZ1ZCQUNBRlFRQktHeUFDSUFFb0FoaExHeUlGTmdJWUlBWkJBRXdOQUNBQlFUQnFJUWtnQVNnQ0NDSUtJQVZzSVFjZ0FTZ0NGQ0VGQTBBZ0JTQUdJQU5ySWdZZ0JTQUdTQnNpQlNBQktBSWNJQUVvQWhnZ0Eyb2lCbXNpQ3lBRklBdElHeUlGSUFFb0FnUWdCbXNpQmlBRklBWklHeUlGUVFCTURRRWdBQ0FKSUFFb0FnQWdBMEVDZEdvb0FnQWdCeUFGSUFwc0lnVWdBU2dDTUJFR0FDQUZJQWRxSVFjZ0FTZ0NGQ0lGSUFOcUlnTWdBU2dDRUNJR1NBMEFDd3NDUUFKQUFrQWdBU2dDSENJRklBaFBEUUFDUUFKQUFrQUNRQ0FDSUFWTEJFQWdCRVVOQVNBQUtBSUFJZ05CRnpZQ0ZDQUFJQU1vQWdBUkFRQWdBaUVGREFNTElBUU5BZ3dCQ3lBQ0lRVUxJQUVvQWlBTkFTQUFLQUlBSWdOQkZ6WUNGQ0FBSUFNb0FnQVJBUUFNQkFzZ0FTQUlOZ0ljSUFFb0FpQkZEUUlMSUFVZ0FTZ0NHQ0lBYXlJRElBZ2dBR3NpQms4TkFDQUJLQUlJSVFBZ0NDQUZhMEVEY1NJSkJFQkJBQ0VIQTBBZ0FTZ0NBQ0FEUVFKMGFpZ0NBRUVBSUFBUVVCb2dBMEVCYWlFRElBZEJBV29pQnlBSlJ3MEFDd3NnQlNBSWEwRjhTdzBBQTBBZ0EwRUNkQ0lGSUFFb0FnQnFLQUlBUVFBZ0FCQlFHaUFCS0FJQUlBVnFLQUlFUVFBZ0FCQlFHaUFCS0FJQUlBVnFLQUlJUVFBZ0FCQlFHaUFCS0FJQUlBVnFLQUlNUVFBZ0FCQlFHaUFEUVFScUlnTWdCa2NOQUFzTElBUkZEUUVMSUFGQkFUWUNKQXNnQVNnQ0FDQUNJQUVvQWhoclFRSjBhZ3Y0QmdFSGZ3SkFBa0FnQWlBRGFpSUlJQUVvQWdSTERRQWdBeUFCS0FJTVN3MEFJQUVvQWdBTkFRc2dBQ2dDQUNJRFFSYzJBaFFnQUNBREtBSUFFUUVBQ3dKQUlBRW9BaGdpQXlBQ1RRUkFJQWdnQVNnQ0VDQURhazBOQVFzZ0FTZ0NLRVVFUUNBQUtBSUFJZ05CeHdBMkFoUWdBQ0FES0FJQUVRRUFDeUFCS0FJa0JFQUNRQ0FCS0FJUUlnWkJBRXdOQUNBQlFUQnFJUWtnQVNnQ0NFRUhkQ0lLSUFFb0FoaHNJUWNnQVNnQ0ZDRUZRUUFoQXdOQUlBVWdCaUFEYXlJR0lBVWdCa2diSWdVZ0FTZ0NIQ0FCS0FJWUlBTnFJZ1pySWdzZ0JTQUxTQnNpQlNBQktBSUVJQVpySWdZZ0JTQUdTQnNpQlVFQVRBMEJJQUFnQ1NBQktBSUFJQU5CQW5ScUtBSUFJQWNnQlNBS2JDSUZJQUVvQWpRUkJnQWdCU0FIYWlFSElBRW9BaFFpQlNBRGFpSURJQUVvQWhBaUJrZ05BQXNMSUFGQkFEWUNKQXRCQUNFRElBRWdBaUFJSUFFb0FoQWlCbXNpQlVFQUlBVkJBRW9iSUFJZ0FTZ0NHRXNiSWdVMkFoZ2dCa0VBVEEwQUlBRkJNR29oQ1NBQktBSUlRUWQwSWdvZ0JXd2hCeUFCS0FJVUlRVURRQ0FGSUFZZ0Eyc2lCaUFGSUFaSUd5SUZJQUVvQWh3Z0FTZ0NHQ0FEYWlJR2F5SUxJQVVnQzBnYklnVWdBU2dDQkNBR2F5SUdJQVVnQmtnYklnVkJBRXdOQVNBQUlBa2dBU2dDQUNBRFFRSjBhaWdDQUNBSElBVWdDbXdpQlNBQktBSXdFUVlBSUFVZ0Iyb2hCeUFCS0FJVUlnVWdBMm9pQXlBQktBSVFJZ1pJRFFBTEN3SkFBa0FDUUNBQktBSWNJZ1VnQ0U4TkFBSkFBa0FDUUFKQUlBSWdCVXNFUUNBRVJRMEJJQUFvQWdBaUEwRVhOZ0lVSUFBZ0F5Z0NBQkVCQUNBQ0lRVU1Bd3NnQkEwQ0RBRUxJQUloQlFzZ0FTZ0NJQTBCSUFBb0FnQWlBMEVYTmdJVUlBQWdBeWdDQUJFQkFBd0VDeUFCSUFnMkFod2dBU2dDSUVVTkFnc2dCU0FCS0FJWUlnQnJJZ01nQ0NBQWF5SUdUdzBBSUFFb0FnaEJCM1FoQUNBSUlBVnJRUU54SWdrRVFFRUFJUWNEUUNBQktBSUFJQU5CQW5ScUtBSUFRUUFnQUJCUUdpQURRUUZxSVFNZ0IwRUJhaUlISUFsSERRQUxDeUFGSUFoclFYeExEUUFEUUNBRFFRSjBJZ1VnQVNnQ0FHb29BZ0JCQUNBQUVGQWFJQUVvQWdBZ0JXb29BZ1JCQUNBQUVGQWFJQUVvQWdBZ0JXb29BZ2hCQUNBQUVGQWFJQUVvQWdBZ0JXb29BZ3hCQUNBQUVGQWFJQU5CQkdvaUF5QUdSdzBBQ3dzZ0JFVU5BUXNnQVVFQk5nSWtDeUFCS0FJQUlBSWdBU2dDR0d0QkFuUnFDeDRBSUFCQkFSRHZBeUFBUVFBUTd3TWdBQ2dDQkJCSUlBQkJBRFlDQkF0bkFRRi9JQU1vQWdBZ0JHb2dBQ2dDMEFKQmdBTnJJZ0FnQVNnQ1ZDSUJLQUlnSUFJdkFSQnNJZ1VnQVNnQ0FDQUNMd0VBYkVHRUlHb2lBV3BCQTNaQi93ZHhhaTBBQURvQUFDQURLQUlFSUFScUlBQWdBU0FGYTBFRGRrSC9CM0ZxTFFBQU9nQUFDOXNEQVExL0lBTW9BZ0FnQkdvaUJTQUFLQUxRQWtHQUEyc2lBQ0FCS0FKVUlnRW9BbUFnQWk0Qk1Hd2lCaUFCS0FJZ0lBSXVBUkJzSWdkcVFkRWliQ0lJSUFkQi9qQnNhaUlISUFFb0FrQWdBaThCSUd3aUNTQUJLQUlBSUFJdkFRQnNJZ3BxUVExMElnMXFRWUNBZ2hCcUlnc2dBU2dDWkNBQ0xnRXliQ0lPSUFFb0FpUWdBaTRCRW13aURHcEIwU0pzSWc4Z0RFSCtNR3hxSWd3Z0FTZ0NSQ0FDTHdFaWJDSVFJQUVvQWdRZ0FpOEJBbXdpQVdwQkRYUWlBbW9pRVdwQkVIWkIvd2R4YWkwQUFEb0FBQ0FGSUFBZ0N5QVJhMEVRZGtIL0IzRnFMUUFBT2dBQklBTW9BZ1FnQkdvaUJTQUFJQWdnQmtIZmlYOXNhaUlHSUFvZ0NXdEJEWFFpQ0dwQmdJQ0NFR29pQ1NBUElBNUIzNGwvYkdvaUNpQUJJQkJyUVExMElnRnFJZ3RxUVJCMlFmOEhjV290QUFBNkFBQWdCU0FBSUFrZ0MydEJFSFpCL3dkeGFpMEFBRG9BQVNBREtBSUlJQVJxSWdVZ0FDQUlJQVpyUVlDQWdoQnFJZ1lnQVNBS2F5SUJha0VRZGtIL0IzRnFMUUFBT2dBQUlBVWdBQ0FHSUFGclFSQjJRZjhIY1dvdEFBQTZBQUVnQXlnQ0RDQUVhaUlCSUFBZ0RTQUhhMEdBZ0lJUWFpSURJQUlnREdzaUFtcEJFSFpCL3dkeGFpMEFBRG9BQUNBQklBQWdBeUFDYTBFUWRrSC9CM0ZxTFFBQU9nQUJDODREQVF4L0lBQW9BdEFDSUFFb0FsUWhBQ01BUWRBQWF5SUhJUUVEUUNBQUtBSkFJUW9nQWk0QklDRUxJQUVnQWk0QkFDQUFLQUlBYkVFTmRFR0FDSElpRENBQUtBS0FBU0FDTGdGQWJDSU5RYjZsZjJ4cVFRdDFJZzhnQUNnQ0lDQUNMZ0VRYkNJRklBQW9BbUFnQWk0Qk1Hd2lCaUFBS0FLZ0FTQUNMZ0ZRYkNJSmFtdEJBblFpRUdzMkFqQWdBU0FQSUJCcU5nSU1JQUVnQ2lBTGJFR3h6Z0JzSWdvZ0RVR2hMV3dnREdvaUMyb2lEQ0FGSUFscVFiWVhiQ0lOSUFVZ0JtcEJEWFJxSWdWclFRdDFOZ0k4SUFFZ0JTQU1ha0VMZFRZQ0FDQUJJQXNnQ21zaUJTQU5JQWtnQm10QkRYUnFJZ1pyUVF0MU5nSWtJQUVnQlNBR2FrRUxkVFlDR0NBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQUlRUUZxSWdoQkEwY05BQXRCZ0FOcklRQWdCeUVDUVFBaEFRTkFJQU1nQVVFQ2RHb29BZ0FnQkdvaUJ5QUFJQUlvQWdCQkRYUkJnSUNJd0FCcUlnZ2dBaWdDQ0NJRlFhRXRiR29pQmlBQ0tBSUVRYkhPQUd3aUNXcEJFblpCL3dkeGFpMEFBRG9BQUNBSElBQWdCaUFKYTBFU2RrSC9CM0ZxTFFBQU9nQUNJQWNnQUNBRlFiNmwvLzhBYkNBSWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFKQkRHb2hBaUFCUVFGcUlnRkJCa2NOQUFzTGx3WUJFbjhnQUNnQzBBSWdBU2dDVkNFQkl3QkJnQUZySWdraEFFRUVJUWNEUUFKL0FrQWdBaTRCRUNJR0lBSXZBU0FpQlhKQi8vOERjUTBBUVFBaEJTQUNMd0V3RFFBZ0FpOEJRQTBBSUFJdkFWQU5BQ0FDTHdGZ0RRQWdBaThCY0EwQUlBQWdBaTRCQUNBQktBSUFiRUVDZENJRk5nSmdJQUFnQlRZQ1VDQUFJQVUyQWtBZ0FDQUZOZ0l3SUFBZ0JUWUNJQ0FBSUFVMkFoQWdBQ0FGTmdJQVFmQUFEQUVMSUFBZ0FTZ0N3QUVnQWk0QllHd2lDaUFCS0FKQUlBWEJiQ0lGYWtIUkltd2lEQ0FGUWY0d2JHb2lFU0FDTGdGQUlBRW9Bb0FCYkVFTmRDSU5JQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZzVxSWhKcUlnOGdBU2dDSUNBR2JDSUZJQUVvQXVBQklBSXVBWEJzSWdacVFiTkdiQ0lUSUFWQmkrQUFiR29nQlNBQktBS2dBU0FDTGdGUWJDSUlhaUlRSUFFb0FtQWdBaTRCTUd3aUJTQUdhaUlVYWtHaHl3QnNJaFVnRUVHRVoyeHFJaEJxSWhaclFRdDFOZ0p3SUFBZ0R5QVdha0VMZFRZQ0FDQUFJQXdnQ2tIZmlYOXNhaUlLSUE0Z0RXc2lER29pRFNBVklCUkJ1NEovYkdvaURpQUZJQWhxUWYzYmZtd2lEeUFGUWRURUFXeHFhaUlGYTBFTGRUWUNZQ0FBSUFVZ0RXcEJDM1UyQWhBZ0FDQU1JQXBySWdVZ0R5QUlRYk9EQVd4cUlCQnFJZ2hyUVF0MU5nSlFJQUFnQlNBSWFrRUxkVFlDSUNBQUlCTWdCa0dPRTJ4cUlBNXFJZ1VnRWlBUmF5SUdha0VMZFRZQ01DQUdJQVZyUVF0MUlRVkJ3QUFMSUFCcUlBVTJBZ0FnQWtFQ2FpRUNJQUZCQkdvaEFTQUFRUVJxSVFBZ0IwRUJTeUFIUVFGcklRY05BQXRCZ0FOcklRQWdDU0VDUVFBaEJ3TkFJQU1nQjBFQ2RHb29BZ0FnQkdvaUFTQUFJQUlvQWd3aUNTQUNLQUlFSWdWcVFkRWliQ0lHSUFWQi9qQnNhaUlGSUFJb0FnQkJrSUFCYWlJSUlBSW9BZ2dpQzJwQkRYUWlDbXBCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnQ2lBRmEwRVNka0gvQjNGcUxRQUFPZ0FESUFFZ0FDQUdJQWxCMzRsL2JHb2lDU0FJSUF0clFRMTBJZ1ZxUVJKMlFmOEhjV290QUFBNkFBRWdBU0FBSUFVZ0NXdEJFblpCL3dkeGFpMEFBRG9BQWlBQ1FSQnFJUUlnQjBFQmFpSUhRUWhIRFFBTEM0TUdBUkYvSXdCQjBBRnJJZzhrQUNBQUtBTFFBaUFCS0FKVUlRRWdEeUVBQTBBZ0FTZ0N3QUVoQmlBQ0xnRmdJUWdnQVNnQ1FDRUpJQUl1QVNBaEVDQUFJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ1VnQVNnQ2dBRWdBaTRCUUd3aUMwRytwWDlzYWtFTGRTSU9JQUVvQWlBZ0FpNEJFR3dpQnlBQktBS2dBU0FDTGdGUWJDSVJJQUVvQW1BZ0FpNEJNR3dpRWlBQktBTGdBU0FDTGdGd2JDSVRheUlNYW10QkFuUWlGR3MyQW93QklBQWdEaUFVYWpZQ0tDQUFJQVlnQ0d3aUJpQUpJQkJzSWdocVFabzFiQ0lKSUFoQjhTQnNhaUlJSUF0Qm5ja0FiQ0FGYWlJUWFpSU9JQkZCRFhRaUVTQU1RZU1UYkdvaUZDQVNJQk5xSWhKQjd6eHNJaE1nQjBHejJRQnNhbW9pRld0QkMzVTJBclFCSUFBZ0RpQVZha0VMZFRZQ0FDQUFJQXRCaEdSc0lBVnFJZ1VnQ1NBR1FkejBmbXhxSWd0cklnWWdERUdkVEd3Z0VXb2lEQ0FIUVl3cGJDQVNRYzhsYkNJSmEyb2lEbXRCQzNVMkFuZ2dBQ0FHSUE1cVFRdDFOZ0k4SUFBZ0VDQUlheUlHSUFkQmxBNXNJQk5ySUJScUlnaHJRUXQxTmdKa0lBQWdCaUFJYWtFTGRUWUNVQ0FBSUFVZ0Myb2lCU0FIUWRQUUFHd2dDU0FNYW1zaUIydEJDM1UyQXFBQklBQWdCU0FIYWtFTGRUWUNGQ0FBUVFScUlRQWdBVUVFYWlFQklBSkJBbW9oQWlBS1FRRnFJZ3BCQlVjTkFBdEJnQU5ySVFFZ0R5RUFRUUFoQndOQUlBTWdCMEVDZEdvb0FnQWdCR29pQWlBQklBQW9BZ3dpQ2lBQUtBSUVJZ1ZxUVpvMWJDSUxJQVZCOFNCc2FpSUZJQUFvQWdCQkRYUkJnSUNJd0FCcUlnd2dBQ2dDQ0NJTklBQW9BaEFpQm1zaUNFSFFGbXhxSWdrZ0JpQU5ha0hNTW13aURXb2lCbXBCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUVnQmlBRmEwRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FTQUxJQXBCM1BSK2JHb2lDaUFKSUExcklnVnFRUkoyUWY4SGNXb3RBQUE2QUFFZ0FpQUJJQVVnQ210QkVuWkIvd2R4YWkwQUFEb0FBeUFDSUFFZ0NFSEFwZi8vQUd3Z0RHcEJFblpCL3dkeGFpMEFBRG9BQWlBQVFSUnFJUUFnQjBFQmFpSUhRUXBIRFFBTElBOUIwQUZxSkFBTDZRWUJFbjhqQUVHZ0Ftc2lFaVFBSUFBb0F0QUNJQUVvQWxRaEFTQVNJUUFEUUNBQktBS0FBU0VOSUFJdUFVQWhDaUFBSUFFb0FrQWdBaTRCSUd3aUNDQUJLQUxBQVNBQ0xnRmdiQ0lQYTBFTmRDSUxJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ1pxSWd3Z0FTZ0NJQ0FDTGdFUWJDSUZJQUVvQXVBQklBSXVBWEJzSWdkckloQWdBU2dDWUNBQ0xnRXdiQ0lPSUFFb0FxQUJJQUl1QVZCc0lnbHJJaFJxUWRFaWJDSVZJQkJCL2pCc2FpSVFhMEVMZFRZQzhBRWdBQ0FNSUJCcVFRdDFOZ0lZSUFBZ0JpQUxheUlMSUJVZ0ZFSGZpWDlzYWlJTWEwRUxkVFlDcUFFZ0FDQUxJQXhxUVF0MU5nSmdJQUFnQ2lBTmJFR3h6Z0JzSWdvZ0Jtb2lDeUFQUVExMElnOGdDRUcyMXdCc2FpSU1heUlRSUFjZ0JTQUphaUlVYWtHTk4yd2lEU0FPUWE5ZGJDSVZJQVZCM0ZSc2FpQUhRWXlCZjJ4cWFpSVdhMEVMZFRZQ2tBRWdBQ0FRSUJacVFRdDFOZ0o0SUFBZ0N5QU1haUlMSUEwZ0ZFSGJFR3hxSWd3Z0RrSFAwd0JzSWc0Z0JVSDNFV3hxYWlJRmEwRUxkVFlDaUFJZ0FDQUZJQXRxUVF0MU5nSUFJQUFnQ0VHMkYyd2dEMnNpQlNBR0lBcHJJZ1pxSWdnZ0J5QUpha0dMdlg5c0lnb2dDVUd3b1g5c0lCVnFhaUFNYWlJSmEwRUxkVFlDMkFFZ0FDQUlJQWxxUVF0MU5nSXdJQUFnQmlBRmF5SUdJQWRCeHVVQWJDQU9heUFOYWlBS2FpSUhhMEVMZFRZQ3dBRWdBQ0FHSUFkcVFRdDFOZ0pJSUFCQkJHb2hBQ0FCUVFScUlRRWdBa0VDYWlFQ0lCRkJBV29pRVVFR1J3MEFDMEdBQTJzaEFTQVNJUUJCQUNFSEEwQWdBeUFIUVFKMGFpZ0NBQ0FFYWlJQ0lBRWdBQ2dDRkNJR0lBQW9BZ1FpQldwQnRoZHNJaEVnQUNnQ0RDSUpJQVZxUVExMGFpSUlJQUFvQWdCQkRYUkJnSUNJd0FCcUlnNGdBQ2dDRUNJTlFhRXRiR29pRXlBQUtBSUlRYkhPQUd3aUNtb2lEMnBCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUVnRHlBSWEwRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FTQUZJQVlnQ1dwclFRMTBJZ1VnRFVHK3BYOXNJQTVxSWdocVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQklBZ2dCV3RCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUVnRVNBR0lBbHJRUTEwYWlJR0lCTWdDbXNpQldwQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFFZ0JTQUdhMEVTZGtIL0IzRnFMUUFBT2dBRElBQkJHR29oQUNBSFFRRnFJZ2RCREVjTkFBc2dFa0dnQW1va0FBdWZDQUVWZnlNQVFaQURheUlUSkFBZ0FDZ0MwQUlnQVNnQ1ZDRUJJQk1oQUFOQUlBRW9Bc0FCSVEwZ0FpNEJZQ0VJSUFFb0FrQWhDU0FDTGdFZ0lRd2dBQ0FDTGdFQUlBRW9BZ0JzUVExMFFZQUljaUlLSUFFb0FvQUJJQUl1QVVCc0lndEJ2cVYvYkdwQkMzVWlEaUFCS0FMZ0FTQUNMZ0Z3YkNJUElBRW9BaUFnQWk0QkVHd2lCeUFCS0FKZ0lBSXVBVEJzSWdWckloRWdBU2dDb0FFZ0FpNEJVR3dpQm10cVFRSjBJaEpyTmdLWUFpQUFJQTRnRW1vMkFsUWdBQ0FJSUExc0lnZ2dDU0FNYkNJSmFrSGl4Z0JzSWd3Z0NFSDhrWDlzYWlJT0lBdEJraFJzSUFwcUloSnFJaFVnQlNBR2FrSHZkV3dnRDBFTmRDSU5heUlQSUFVZ0IycEJ0OVVBYkNJWElBVkI3bVJzYW1vaUZtdEJDM1UyQXRBQ0lBQWdGU0FXYWtFTGRUWUNIQ0FBSUFoQjRhZC9iQ0FKUWFNbmJHb2lDQ0FMUWNsSGJDQUthaUlWYWlJV0lBOGdCaUFIYWlJUFFkTE1BR3dpR0NBR1FZbm9mbXhxYWlJWmEwRUxkVFlDdEFJZ0FDQVdJQmxxUVF0MU5nSTRJQUFnRWlBT2F5SU9JQkZCOGgxc0lBMXJJaEVnQmlBRmEwSDQyUUJzSWhJZ0JVR1pLMnhxYWlJRmEwRUxkVFlDNEFFZ0FDQUZJQTVxUVF0MU5nS01BU0FBSUF0Qnh0RUFiQ0FLYWlJRklBd2dDVUc5RVd4cUlncHJJZ3NnRDBHVU1Hd2lDU0FIUVl1OGYyeHFJQkZxSWd4clFRdDFOZ0xFQVNBQUlBc2dER3BCQzNVMkFxZ0JJQUFnQlNBS2FpSUZJQmNnQjBId3QzOXNhaUFZYWlBTmFpSUhhMEVMZFRZQzdBSWdBQ0FGSUFkcVFRdDFOZ0lBSUFBZ0ZTQUlheUlGSUJJZ0JrSG1rMzlzYWlBSmFpQU5haUlHYTBFTGRUWUMvQUVnQUNBRklBWnFRUXQxTmdKd0lBQkJCR29oQUNBQlFRUnFJUUVnQWtFQ2FpRUNJQkJCQVdvaUVFRUhSdzBBQzBHQUEyc2hBU0FUSVFCQkFDRUZBMEFnQXlBRlFRSjBhaWdDQUNBRWFpSUNJQUVnQUNnQ0RDSUhJQUFvQWdRaUJtcEI3enRzSWdnZ0JpQUhhMEh6Q213aUNXc2dBQ2dDRkNJS0lBWnFRYU1uYkNJVWFpSU1JQUFvQWhBaUJpQUFLQUlZSWd0clFiYzRiQ0lPSUF0QmczdHNhaUFBS0FJQVFRMTBRWUNBaU1BQWFpSU5JQXNnQUNnQ0NDSVFhaUlMUWNiUkFHeHFJZzlxSWhGcVFSSjJRZjhIY1dvdEFBQTZBQUFnQWlBQklCRWdER3RCRW5aQi93ZHhhaTBBQURvQUJpQUNJQUVnQnlBS2FrSGhwMzlzSWdjZ0NDQUphbW9pQ0NBUUlBWnJRWklVYkNJSklBWkJsWXAvYkNBTmFtb2dEbW9pREdwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFFZ0RDQUlhMEVTZGtIL0IzRnFMUUFBT2dBRklBSWdBU0FVSUFwQjN2Y0FiR29nQjJvaUJ5QUpJQkJCOGVGK2JHb2dEMm9pQ21wQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFFZ0NpQUhhMEVTZGtIL0IzRnFMUUFBT2dBRUlBSWdBU0FHSUF0clFjSGFBR3dnRFdwQkVuWkIvd2R4YWkwQUFEb0FBeUFBUVJ4cUlRQWdCVUVCYWlJRlFRNUhEUUFMSUJOQmtBTnFKQUFMdkFrQkduOGpBRUdBQkdzaUZDUUFJQUFvQXRBQ0lBRW9BbFFoQVNBVUlRQURRQ0FBSUFFb0FrQWdBaTRCSUd3aURDQUJLQUxBQVNBQ0xnRmdiQ0lOYXlJSlFlUFlBR3dpRGlBTlFZT2tBV3hxSWhFZ0FTZ0NnQUVnQWk0QlFHd2lDa0hQMHdCc0loVWdBaTRCQUNBQktBSUFiRUVOZEVHQUNISWlDMm9pRm1vaUVpQUJLQUpnSUFJdUFUQnNJZ2dnQVNnQ0lDQUNMZ0VRYkNJRmFrSE8xZ0JzSWhNZ0JVSFc3WDVzYWlBQktBS2dBU0FDTGdGUWJDSUhJQVZxSWhsQjZjOEFiQ0lYYWlBQktBTGdBU0FDTGdGd2JDSUdJQVZxUWZ6RkFHd2lHbW9pR0d0QkMzVTJBdUFESUFBZ0VpQVlha0VMZFRZQ0FDQUFJQWxCMUJGc0lna2dERUhOT1d4cUloSWdDa0hSSW13aUNpQUxhaUlZYWlJYklBWWdDR29pSEVHclZXd2lIU0FISUFocVFmQUliQ0llSUJNZ0NFSE5CR3hxYW1vaUUydEJDM1UyQXNBRElBQWdFeUFiYWtFTGRUWUNJQ0FBSUE0Z0RFSENXV3hxSWd3Z0N5QUtheUlPYWlJS0lBWWdCMnBCc3FsL2JDSVRJQjRnQjBINnQzOXNhaUFYYW1vaUYydEJDM1UyQXFBRElBQWdDaUFYYWtFTGRUWUNRQ0FBSUFrZ0RVR3dYMnhxSWcwZ0N5QVZheUlMYWlJSklCMGdCa0dZeEFCc2FpQWFhaUFUYWlJS2EwRUxkVFlDZ0FNZ0FDQUpJQXBxUVF0MU5nSmdJQUFnQ3lBTmF5SUxJQVlnQjJ0Qm94cHNJZzBnQlNBR2EwRzJPV3dpQ1NBY1FaZXdmMndpQ2lBR1FZWEpBV3hxYW1vaUJtdEJDM1UyQXVBQ0lBQWdCaUFMYWtFTGRUWUNnQUVnQUNBT0lBeHJJZ1lnR1VIVkttd2lDeUFISUFoclFZbmFBR3dpRENBSFFmcE9iR3BxSUExcUlnZHJRUXQxTmdMQUFpQUFJQVlnQjJwQkMzVTJBcUFCSUFBZ0dDQVNheUlISUFVZ0NHdEJveHBzSWdZZ0NFR2EvZ0JzYWlBTWFpQUthaUlJYTBFTGRUWUNvQUlnQUNBSElBaHFRUXQxTmdMQUFTQUFJQllnRVdzaUNDQUdJQVZCd29wL2JHb2dDMm9nQ1dvaUJXdEJDM1UyQW9BQ0lBQWdCU0FJYWtFTGRUWUM0QUVnQUVFRWFpRUFJQUZCQkdvaEFTQUNRUUpxSVFJZ0QwRUJhaUlQUVFoSERRQUxRWUFEYXlFQklCUWhBRUVBSVFnRFFDQURJQWhCQW5ScUtBSUFJQVJxSWdJZ0FTQUFLQUlFSWdVZ0FDZ0NIQ0lIYWtHelJtd2lDeUFGUVl2Z0FHeHFJQVVnQUNnQ0ZDSUdhaUlQSUFBb0Fnd2lCU0FIYWlJTWFrR2h5d0JzSWcwZ0QwR0VaMnhxSWc5cUloQWdBQ2dDR0NJSklBQW9BZ2dpRG1wQjBTSnNJaEVnRGtIK01HeHFJZzRnQUNnQ0FFR1FnQUZxSWdvZ0FDZ0NFQ0lWYWtFTmRDSVdhaUlTYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQVNBU0lCQnJRUkoyUWY4SGNXb3RBQUE2QUFjZ0FpQUJJQTBnREVHN2duOXNhaUlNSUFVZ0JtcEIvZHQrYkNJTklBVkIxTVFCYkdwcUlnVWdFU0FKUWQrSmYyeHFJaEFnQ2lBVmEwRU5kQ0lKYWlJUmFrRVNka0gvQjNGcUxRQUFPZ0FCSUFJZ0FTQVJJQVZyUVJKMlFmOEhjV290QUFBNkFBWWdBaUFCSUEwZ0JrR3pnd0ZzYWlBUGFpSUZJQWtnRUdzaUJtcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBRWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQVNBTElBZEJqaE5zYWlBTWFpSUZJQllnRG1zaUIycEJFblpCL3dkeGFpMEFBRG9BQXlBQ0lBRWdCeUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUVJQUJCSUdvaEFDQUlRUUZxSWdoQkVFY05BQXNnRkVHQUJHb2tBQXRoQUNBREtBSUFJQVJxSWdNZ0FDZ0MwQUpCZ0FOcklnQWdBU2dDVkNJQktBSUVJQUl2QVFKc0lnUWdBU2dDQUNBQ0x3RUFiRUdFSUdvaUFXcEJBM1pCL3dkeGFpMEFBRG9BQUNBRElBQWdBU0FFYTBFRGRrSC9CM0ZxTFFBQU9nQUJDN3NEQVExL0lBTW9BZ0FnQkdvaUJTQUFLQUxRQWtHQUEyc2lBQ0FCS0FKVUlnRW9BaXdnQWk0QkZtd2lCaUFCS0FJTUlBSXVBUVpzSWdkcUlnZ2dBU2dDSkNBQ0xnRVNiQ0lLSUFFb0FnUWdBaTRCQW13aUMyb2lDV3BCMFNKc0lnd2dDVUgrTUd4cUlna2dBU2dDSUNBQ0x3RVFiQ0lOSUFFb0FnQWdBaThCQUd3aURtcEJoQ0JxSWc4Z0FTZ0NLQ0FDTHdFVWJDSVFJQUVvQWdnZ0FpOEJCR3dpQW1vaUFXcEJEWFFpRVdwQkVIWkIvd2R4YWkwQUFEb0FBQ0FGSUFBZ0VTQUphMEVRZGtIL0IzRnFMUUFBT2dBRElBVWdBQ0FNSUFoQjM0bC9iR29pQ0NBUElBRnJRUTEwSWdGcVFSQjJRZjhIY1dvdEFBQTZBQUVnQlNBQUlBRWdDR3RCRUhaQi93ZHhhaTBBQURvQUFpQURLQUlFSUFScUlnRWdBQ0FISUFacklnTWdDeUFLYXlJRWFrSFJJbXdpQlNBRVFmNHdiR29pQkNBT0lBMXJRWVFnYWlJR0lBSWdFR3NpQW1wQkRYUWlCMnBCRUhaQi93ZHhhaTBBQURvQUFDQUJJQUFnQnlBRWEwRVFka0gvQjNGcUxRQUFPZ0FESUFFZ0FDQUZJQU5CMzRsL2JHb2lBeUFHSUFKclFRMTBJZ0pxUVJCMlFmOEhjV290QUFBNkFBRWdBU0FBSUFJZ0EydEJFSFpCL3dkeGFpMEFBRG9BQWd2QkJ3RUxmeUFBS0FMUUFpQUNMZ0VRSVFVZ0FTZ0NWQ0lCS0FJZ0lRY2pBRUhRQUdzaUFDQUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSUdJQUVvQWtBZ0FpNEJJR3dpQ0VHK3BYOXNha0VMZFRZQ0dDQUFJQWhCb1Mxc0lBWnFJZ1lnQlNBSGJFR3h6Z0JzSWdWclFRdDFOZ0l3SUFBZ0JTQUdha0VMZFRZQ0FDQUJLQUlrSVFVZ0FpNEJFaUVISUFBZ0FpNEJBaUFCS0FJRWJFRU5kRUdBQ0hJaUJpQUJLQUpFSUFJdUFTSnNJZ2hCdnFWL2JHcEJDM1UyQWh3Z0FDQUlRYUV0YkNBR2FpSUdJQVVnQjJ4QnNjNEFiQ0lGYTBFTGRUWUNOQ0FBSUFVZ0JtcEJDM1UyQWdRZ0FTZ0NLQ0VGSUFJdUFSUWhCeUFBSUFJdUFRUWdBU2dDQ0d4QkRYUkJnQWh5SWdZZ0FTZ0NTQ0FDTGdFa2JDSUlRYjZsZjJ4cVFRdDFOZ0lnSUFBZ0NFR2hMV3dnQm1vaUJpQUZJQWRzUWJIT0FHd2lCV3RCQzNVMkFqZ2dBQ0FGSUFacVFRdDFOZ0lJSUFFb0Fpd2hCU0FDTGdFV0lRY2dBQ0FDTGdFR0lBRW9BZ3hzUVExMFFZQUljaUlHSUFFb0Frd2dBaTRCSm13aUNFRytwWDlzYWtFTGRUWUNKQ0FBSUFoQm9TMXNJQVpxSWdZZ0JTQUhiRUd4emdCc0lnVnJRUXQxTmdJOElBQWdCU0FHYWtFTGRUWUNEQ0FCS0FJd0lRVWdBaTRCR0NFSElBQWdBaTRCQ0NBQktBSVFiRUVOZEVHQUNISWlCaUFCS0FKUUlBSXVBU2hzSWdoQnZxVi9iR3BCQzNVMkFpZ2dBQ0FJUWFFdGJDQUdhaUlHSUFVZ0IyeEJzYzRBYkNJRmEwRUxkVFlDUUNBQUlBVWdCbXBCQzNVMkFoQWdBU2dDTkNFRklBSXVBUm9oQnlBQUlBSXVBUW9nQVNnQ0ZHeEJEWFJCZ0FoeUlnWWdBU2dDVkNBQ0xnRXFiQ0lCUWI2bGYyeHFRUXQxTmdJc0lBQWdBVUdoTFd3Z0Jtb2lBU0FGSUFkc1FiSE9BR3dpQW10QkMzVTJBa1FnQUNBQklBSnFRUXQxTmdJVVFZQURheUVCSUFBaEFrRUFJUWtEUUNBRElBbEJBblJxS0FJQUlBUnFJZ0FnQVNBQ0tBSVVJZ1VnQWlnQ0JDSUhha0cyRjJ3aUNDQUNLQUlNSWdZZ0IycEJEWFJxSWdvZ0FpZ0NBRUVOZEVHQWdJakFBR29pQ3lBQ0tBSVFJZ3hCb1Mxc2FpSU5JQUlvQWdoQnNjNEFiQ0lPYWlJUGFrRVNka0gvQjNGcUxRQUFPZ0FBSUFBZ0FTQVBJQXByUVJKMlFmOEhjV290QUFBNkFBVWdBQ0FCSUFjZ0JTQUdhbXRCRFhRaUJ5QU1RYjZsZjJ3Z0Myb2lDbXBCRW5aQi93ZHhhaTBBQURvQUFTQUFJQUVnQ2lBSGEwRVNka0gvQjNGcUxRQUFPZ0FFSUFBZ0FTQUlJQVVnQm10QkRYUnFJZ1VnRFNBT2F5SUhha0VTZGtIL0IzRnFMUUFBT2dBQ0lBQWdBU0FISUFWclFSSjJRZjhIY1dvdEFBQTZBQU1nQWtFWWFpRUNJQWxCQVdvaUNVRURSdzBBQ3d1TkJRRVFmeUFBS0FMUUFpQUJLQUpVSVFBakFFR0FBV3NpQlNFQkEwQWdBU0FBS0FKQUlBSXVBU0JzSWdZZ0FDZ0NBQ0FDTGdFQWJDSUtha0VDZENJTElBQW9BbUFnQWk0Qk1Hd2lEQ0FBS0FJZ0lBSXVBUkJzSWdkcVFkRWliRUdBQ0dvaURTQUhRZjR3YkdwQkMzVWlCMnMyQW1BZ0FTQUhJQXRxTmdJQUlBRWdDaUFHYTBFQ2RDSUdJQTBnREVIZmlYOXNha0VMZFNJS2F6WUNRQ0FCSUFZZ0NtbzJBaUFnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0NVRUJhaUlKUVFoSERRQUxRWUFEYXlFQUlBVWhBa0VBSVFrRFFDQURJQWxCQW5ScUtBSUFJQVJxSWdFZ0FDQUNLQUlFSWdVZ0FpZ0NIQ0lJYWtHelJtd2lDaUFGUVl2Z0FHeHFJQVVnQWlnQ0ZDSUdhaUlMSUFJb0Fnd2lCU0FJYWlJTWFrR2h5d0JzSWdjZ0MwR0VaMnhxSWd0cUlnMGdBaWdDR0NJT0lBSW9BZ2dpRDJwQjBTSnNJaEFnRDBIK01HeHFJZzhnQWlnQ0FFR1FnQUZxSWhFZ0FpZ0NFQ0lTYWtFTmRDSVRhaUlVYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUVnQUNBVUlBMXJRUkoyUWY4SGNXb3RBQUE2QUFjZ0FTQUFJQWNnREVHN2duOXNhaUlNSUFVZ0JtcEIvZHQrYkNJSElBVkIxTVFCYkdwcUlnVWdFQ0FPUWQrSmYyeHFJZzBnRVNBU2EwRU5kQ0lPYWlJUWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQVFJQVZyUVJKMlFmOEhjV290QUFBNkFBWWdBU0FBSUFjZ0JrR3pnd0ZzYWlBTGFpSUZJQTRnRFdzaUJtcEJFblpCL3dkeGFpMEFBRG9BQWlBQklBQWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUVnQUNBS0lBaEJqaE5zYWlBTWFpSUZJQk1nRDJzaUNHcEJFblpCL3dkeGFpMEFBRG9BQXlBQklBQWdDQ0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUVJQUpCSUdvaEFpQUpRUUZxSWdsQkJFY05BQXNMbndZQkVYOGpBRUdnQVdzaURpUUFJQUFvQXRBQ0lBRW9BbFFoQUNBT0lRRURRQ0FBS0FKZ0lRWWdBaTRCTUNFRklBQW9BaUFoQ1NBQ0xnRVFJUXNnQVNBQ0xnRUFJQUFvQWdCc1FRMTBRWUFJY2lJTUlBQW9Ba0FnQWk0QklHd2lEU0FBS0FLQUFTQUNMZ0ZBYkNJSWF5SVBRY0NsZjJ4cVFRdDFOZ0pBSUFFZ0QwSFFGbXdnREdvaURDQUlJQTFxUWN3eWJDSU5haUlJSUFVZ0Jtd2lCaUFKSUF0c0lnVnFRWm8xYkNJSklBVkI4U0JzYWlJRmEwRUxkVFlDZ0FFZ0FTQUZJQWhxUVF0MU5nSUFJQUVnRENBTmF5SUZJQWtnQmtIYzlINXNhaUlHYTBFTGRUWUNZQ0FCSUFVZ0JtcEJDM1UyQWlBZ0FVRUVhaUVCSUFCQkJHb2hBQ0FDUVFKcUlRSWdCMEVCYWlJSFFRaEhEUUFMUVlBRGF5RUJJQTRoQUVFQUlRb0RRQ0FESUFwQkFuUnFLQUlBSUFScUlnSWdBU0FBS0FJY0lnWWdBQ2dDRENJRmFpSUxRZTg4YkNJTUlBQW9BZ1FpQjBHejJRQnNhaUFBS0FJVUlnMUJEWFFpQ0NBRklBWnJJZ1pCNHhOc2FpSVBhaUlRSUFBb0FoZ2lFU0FBS0FJSUlnVnFRWm8xYkNJU0lBVkI4U0JzYWlJVUlBQW9BZ0JCRFhSQmdJQ0l3QUJxSWdVZ0FDZ0NFQ0lKUVozSkFHeHFJaFZxSWhOcVFSSjJRZjhIY1dvdEFBQTZBQUFnQWlBQklCTWdFR3RCRW5aQi93ZHhhaTBBQURvQUNTQUNJQUVnQjBIVDBBQnNJQXRCenlWc0lnc2dCa0dkVEd3Z0NHb2lDR3BySWhBZ0VpQVJRZHowZm14cUloRWdDVUdFWkd3Z0JXb2lFbW9pRTJwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFFZ0V5QVFhMEVTZGtIL0IzRnFMUUFBT2dBSUlBSWdBU0FISUFZZ0RXcHJRUTEwSWdZZ0NVRytwWDlzSUFWcUlnVnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQVVnQm10QkVuWkIvd2R4YWkwQUFEb0FCeUFDSUFFZ0IwR01LV3dnQzJzZ0NHb2lCaUFTSUJGcklnVnFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUJJQVVnQm10QkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFFZ0IwR1VEbXdnREdzZ0Qyb2lCeUFWSUJScklnWnFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUJJQVlnQjJ0QkVuWkIvd2R4YWkwQUFEb0FCU0FBUVNCcUlRQWdDa0VCYWlJS1FRVkhEUUFMSUE1Qm9BRnFKQUFMa0FjQkZIOGpBRUhBQVdzaUVDUUFJQUFvQXRBQ0lBRW9BbFFoQUNBUUlRRURRQ0FBS0FKQUlRd2dBaTRCSUNFTklBRWdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlCaUFBS0FLQUFTQUNMZ0ZBYkNJT1FiNmxmMnhxUVF0MUlnOGdBQ2dDSUNBQ0xnRVFiQ0lISUFBb0FtQWdBaTRCTUd3aUNDQUFLQUtnQVNBQ0xnRlFiQ0lGYW10QkFuUWlDMnMyQW9BQklBRWdDeUFQYWpZQ0lDQUJJQXdnRFd4QnNjNEFiQ0lNSUE1Qm9TMXNJQVpxSWcxcUlnWWdCU0FIYWtHMkYyd2lEaUFISUFocVFRMTBhaUlIYTBFTGRUWUNvQUVnQVNBR0lBZHFRUXQxTmdJQUlBRWdEU0FNYXlJSElBNGdCU0FJYTBFTmRHb2lDR3RCQzNVMkFtQWdBU0FISUFocVFRdDFOZ0pBSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lBcEJBV29pQ2tFSVJ3MEFDMEdBQTJzaEFDQVFJUUZCQUNFSEEwQWdBeUFIUVFKMGFpZ0NBQ0FFYWlJQ0lBQWdBU2dDRENJTVFjL1RBR3dpRGlBQktBSUVJZ2hCOXhGc2FpQUJLQUlVSWdVZ0NHb2lDU0FCS0FJY0lncHFRWTAzYkNJTklBbEIyeEJzYWlJUGFpSUxJQUVvQWhnaUVVRU5kQ0lTSUFFb0FnZ2lCa0cyMXdCc2FpSVVJQUVvQWdCQkRYUkJnSUNJd0FCcUlna2dBU2dDRUVHeHpnQnNJaFZxSWhacUloTnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQk1nQzJ0QkVuWkIvd2R4YWkwQUFEb0FDeUFDSUFBZ0NDQUtheUlMSUF3Z0JXc2lFMnBCMFNKc0loY2dDMEgrTUd4cUlnc2dCaUFSYTBFTmRDSVJJQWxxSWhocVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQUlCZ2dDMnRCRW5aQi93ZHhhaTBBQURvQUNpQUNJQUFnRHlBRklBcHFRWXU5ZjJ3aUR5QU1RYTlkYkNJTUlBVkJzS0YvYkdwcWFpSUZJQVpCdGhkc0lCSnJJZ1lnQ1NBVmF5SUxhaUlTYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUlnQUNBU0lBVnJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUFJQXBCeHVVQWJDQU9heUFOYWlBUGFpSUZJQXNnQm1zaUJtcEJFblpCL3dkeGFpMEFBRG9BQXlBQ0lBQWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUlnQUNBWElCTkIzNGwvYkdvaUJTQUpJQkZySWdscVFSSjJRZjhIY1dvdEFBQTZBQVFnQWlBQUlBa2dCV3RCRW5aQi93ZHhhaTBBQURvQUJ5QUNJQUFnRENBSVFkeFViR29nQ2tHTWdYOXNhaUFOYWlJS0lCWWdGR3NpQ0dwQkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFBZ0NDQUthMEVTZGtIL0IzRnFMUUFBT2dBR0lBRkJJR29oQVNBSFFRRnFJZ2RCQmtjTkFBc2dFRUhBQVdva0FBdmpDQUVVZnlNQVFlQUJheUlUSkFBZ0FDZ0MwQUlnQVNnQ1ZDRUFJQk1oQVFOQUlBQW9BcUFCSVFjZ0FpNEJVQ0VKSUFBb0FpQWhEU0FDTGdFUUlRNGdBQ2dDWUNFSUlBSXVBVEFoRkNBQklBSXVBUUFnQUNnQ0FHeEJEWFJCZ0FoeUlnVWdBQ2dDZ0FFZ0FpNEJRR3dpQmlBQUtBTEFBU0FDTGdGZ2JDSUtJQUFvQWtBZ0FpNEJJR3dpQzJvaUQydEJ3ZG9BYkdwQkMzVTJBbUFnQVNBUFFjYlJBR3dnQldvaUR5QUdJQXByUWJjNGJDSVJJQXBCZzN0c2Ftb2lFaUFISUFsc0lnb2dEU0FPYkNJSGFrR2pKMndpRFNBSUlCUnNJZ2tnQjJwQjd6dHNJZzRnQnlBSmEwSHpDbXdpQjJ0cUlnaHJRUXQxTmdMQUFTQUJJQWdnRW1wQkMzVTJBZ0FnQVNBTElBWnJRWklVYkNJSUlBdEI4ZUYrYkdvZ0Qyb2lDeUFKSUFwcVFlR25mMndpQ1NBTklBcEIzdmNBYkdwcUlncHJRUXQxTmdLQUFTQUJJQW9nQzJwQkMzVTJBa0FnQVNBR1FaV0tmMndnQldvZ0NHb2dFV29pQmlBSElBNXFJQWxxSWdWclFRdDFOZ0tnQVNBQklBVWdCbXBCQzNVMkFpQWdBVUVFYWlFQklBQkJCR29oQUNBQ1FRSnFJUUlnRUVFQmFpSVFRUWhIRFFBTFFZQURheUVBSUJNaEFVRUFJUkFEUUNBRElCQkJBblJxS0FJQUlBUnFJZ0lnQUNBQktBSWNJZzVCRFhRaUN5QUJLQUlNSWdZZ0FTZ0NCQ0lLYWtHMzFRQnNJZ2dnQ2tId3QzOXNhaUFCS0FJVUlnVWdDbW9pRkVIU3pBQnNJZzlxYWlJUklBRW9BaGdpRENBQktBSUlJZzFxUWVMR0FHd2lFaUFOUWIwUmJHb2lGaUFCS0FJQVFRMTBRWUNBaU1BQWFpSUhJQUVvQWhBaUNVSEcwUUJzYWlJWGFpSVZha0VTZGtIL0IzRnFMUUFBT2dBQUlBSWdBQ0FWSUJGclFSSjJRZjhIY1dvdEFBQTZBQTBnQWlBQUlBVWdCbXBCNzNWc0lBdHJJaEVnQ0NBR1FlNWtiR3BxSWdnZ0VpQU1RZnlSZjJ4cUloSWdCeUFKUVpJVWJHb2lGV29pR0dwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFBZ0dDQUlhMEVTZGtIL0IzRnFMUUFBT2dBTUlBSWdBQ0FQSUFWQmllaCtiR29nRVdvaUNDQU1RZUduZjJ3Z0RVR2pKMnhxSWd3Z0NVSEpSMndnQjJvaURXb2lEMnBCRW5aQi93ZHhhaTBBQURvQUFpQUNJQUFnRHlBSWEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FDQU9JQW9nQm1zaUNDQUZhMnBCRFhRaURpQUpRYjZsZjJ3Z0Iyb2lCMnBCRW5aQi93ZHhhaTBBQURvQUF5QUNJQUFnQnlBT2EwRVNka0gvQjNGcUxRQUFPZ0FLSUFJZ0FDQVVRWlF3YkNJSElBVWdCbXRCK05rQWJDSUpJQXNnQlVIbWszOXNhbXBxSWdVZ0RTQU1heUlNYWtFU2RrSC9CM0ZxTFFBQU9nQUVJQUlnQUNBTUlBVnJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUFJQWhCOGgxc0lBdHJJZ1VnQ1NBR1Faa3JiR3BxSWdZZ0ZTQVNheUlMYWtFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQUNBTElBWnJRUkoyUWY4SGNXb3RBQUE2QUFnZ0FpQUFJQWNnQ2tHTHZIOXNhaUFGYWlJR0lCY2dGbXNpQldwQkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFBZ0JTQUdhMEVTZGtIL0IzRnFMUUFBT2dBSElBRkJJR29oQVNBUVFRRnFJaEJCQjBjTkFBc2dFMEhnQVdva0FBdVlDd0VaZnlNQVFZQUNheUlWSkFBZ0FDZ0MwQUlnQVNnQ1ZDRUJJQlVoQUVFSUlRb0RRQUovQWtBZ0FpNEJFQ0lHSUFJdkFTQWlCWEpCLy84RGNRMEFRUUFoQlNBQ0x3RXdEUUFnQWk4QlFBMEFJQUl2QVZBTkFDQUNMd0ZnRFFBZ0FpOEJjQTBBSUFBZ0FpNEJBQ0FCS0FJQWJFRUNkQ0lGTmdMQUFTQUFJQVUyQXFBQklBQWdCVFlDZ0FFZ0FDQUZOZ0pnSUFBZ0JUWUNRQ0FBSUFVMkFpQWdBQ0FGTmdJQVFlQUJEQUVMSUFBZ0FTZ0N3QUVnQWk0QllHd2lCeUFCS0FKQUlBWEJiQ0lGYWtIUkltd2lDeUFGUWY0d2JHb2lFQ0FDTGdGQUlBRW9Bb0FCYkVFTmRDSUpJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJaEpxSWd4cUlnMGdBU2dDSUNBR2JDSUZJQUVvQXVBQklBSXVBWEJzSWdacVFiTkdiQ0lUSUFWQmkrQUFiR29nQlNBQktBS2dBU0FDTGdGUWJDSUlhaUlPSUFFb0FtQWdBaTRCTUd3aUJTQUdhaUlVYWtHaHl3QnNJaFlnRGtHRVoyeHFJZzVxSWc5clFRdDFOZ0xnQVNBQUlBMGdEMnBCQzNVMkFnQWdBQ0FMSUFkQjM0bC9iR29pQnlBU0lBbHJJZ3RxSWdrZ0ZpQVVRYnVDZjJ4cUloSWdCU0FJYWtIOTIzNXNJZzBnQlVIVXhBRnNhbW9pQld0QkMzVTJBc0FCSUFBZ0JTQUpha0VMZFRZQ0lDQUFJQXNnQjJzaUJTQU5JQWhCczRNQmJHb2dEbW9pQ0d0QkMzVTJBcUFCSUFBZ0JTQUlha0VMZFRZQ1FDQUFJQk1nQmtHT0UyeHFJQkpxSWdVZ0RDQVFheUlHYWtFTGRUWUNZQ0FHSUFWclFRdDFJUVZCZ0FFTElBQnFJQVUyQWdBZ0FrRUNhaUVDSUFGQkJHb2hBU0FBUVFScUlRQWdDa0VCU3lBS1FRRnJJUW9OQUF0QmdBTnJJUUFnRlNFQlFRQWhFUU5BSUFNZ0VVRUNkR29vQWdBZ0JHb2lBaUFBSUFFb0Fnd2lCU0FCS0FJRUlncHFRYzdXQUd3aUNTQUtRZGJ0Zm14cUlBRW9BaFFpQmlBS2FpSVNRZW5QQUd3aURHb2dBU2dDSENJSUlBcHFRZnpGQUd3aURXb2lFeUFCS0FJSUlnc2dBU2dDR0NJUWF5SU9RZVBZQUd3aUZDQVFRWU9rQVd4cUloWWdBU2dDQUVFTmRFR0FnSWpBQUdvaUJ5QUJLQUlRSWc5Qno5TUFiQ0lZYWlJWmFpSVhha0VTZGtIL0IzRnFMUUFBT2dBQUlBSWdBQ0FYSUJOclFSSjJRZjhIY1dvdEFBQTZBQThnQWlBQUlBVWdDR29pRTBHclZXd2lGeUFGSUFacVFmQUliQ0lhSUFrZ0JVSE5CR3hxYW1vaUNTQU9RZFFSYkNJT0lBdEJ6VGxzYWlJYklBY2dEMEhSSW13aUQyb2lIR29pSFdwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFBZ0hTQUphMEVTZGtIL0IzRnFMUUFBT2dBT0lBSWdBQ0FHSUFocVFiS3BmMndpQ1NBYUlBWkIrcmQvYkdvZ0RHcHFJZ3dnRkNBTFFjSlpiR29pQ3lBSElBOXJJaFJxSWc5cVFSSjJRZjhIY1dvdEFBQTZBQUlnQWlBQUlBOGdER3RCRW5aQi93ZHhhaTBBQURvQURTQUNJQUFnRnlBSVFaakVBR3hxSUExcUlBbHFJZ2tnRGlBUVFiQmZiR29pRUNBSElCaHJJZ2RxSWd4cVFSSjJRZjhIY1dvdEFBQTZBQU1nQWlBQUlBd2dDV3RCRW5aQi93ZHhhaTBBQURvQURDQUNJQUFnQ0NBR2EwR2pHbXdpQ1NBS0lBaHJRYlk1YkNJTUlCTkJsN0IvYkNJTklBaEJoY2tCYkdwcWFpSUlJQWNnRUdzaUIycEJFblpCL3dkeGFpMEFBRG9BQkNBQ0lBQWdCeUFJYTBFU2RrSC9CM0ZxTFFBQU9nQUxJQUlnQUNBU1FkVXFiQ0lJSUFZZ0JXdEJpZG9BYkNJSElBWkIrazVzYW1vZ0NXb2lCaUFVSUF0cklndHFRUkoyUWY4SGNXb3RBQUE2QUFVZ0FpQUFJQXNnQm10QkVuWkIvd2R4YWkwQUFEb0FDaUFDSUFBZ0NpQUZhMEdqR213aUJpQUZRWnIrQUd4cUlBZHFJQTFxSWdVZ0hDQWJheUlIYWtFU2RrSC9CM0ZxTFFBQU9nQUdJQUlnQUNBSElBVnJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUFJQVlnQ2tIQ2luOXNhaUFJYWlBTWFpSUZJQmtnRm1zaUNtcEJFblpCL3dkeGFpMEFBRG9BQnlBQ0lBQWdDaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUZCSUdvaEFTQVJRUUZxSWhGQkNFY05BQXNnRlVHQUFtb2tBQXU2REFFYWZ5TUFRWUFFYXlJWkpBQWdBQ2dDMEFJZ0FTZ0NWQ0VCSUJraEFBTkFJQUFnQVNnQ1FDQUNMZ0VnYkNJS0lBRW9Bc0FCSUFJdUFXQnNJZzVySWhGQjQ5Z0FiQ0lQSUE1Qmc2UUJiR29pRWlBQktBS0FBU0FDTGdGQWJDSUxRYy9UQUd3aUV5QUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSU1haUlVYWlJVklBRW9BbUFnQWk0Qk1Hd2lCaUFCS0FJZ0lBSXVBUkJzSWdocVFjN1dBR3dpRUNBSVFkYnRmbXhxSUFFb0FxQUJJQUl1QVZCc0lnY2dDR29pR2tIcHp3QnNJaFpxSUFFb0F1QUJJQUl1QVhCc0lnVWdDR3BCL01VQWJDSVhhaUlZYTBFTGRUWUM0QU1nQUNBVklCaHFRUXQxTmdJQUlBQWdFVUhVRVd3aUVTQUtRYzA1YkdvaUZTQUxRZEVpYkNJTElBeHFJaGhxSWhzZ0JTQUdhaUljUWF0VmJDSWRJQVlnQjJwQjhBaHNJaDRnRUNBR1FjMEViR3BxYWlJUWEwRUxkVFlDd0FNZ0FDQVFJQnRxUVF0MU5nSWdJQUFnRHlBS1FjSlpiR29pQ2lBTUlBdHJJZzlxSWdzZ0JTQUhha0d5cVg5c0loQWdIaUFIUWZxM2YyeHFJQlpxYWlJV2EwRUxkVFlDb0FNZ0FDQUxJQlpxUVF0MU5nSkFJQUFnRVNBT1FiQmZiR29pRGlBTUlCTnJJZ3hxSWhFZ0hTQUZRWmpFQUd4cUlCZHFJQkJxSWd0clFRdDFOZ0tBQXlBQUlBc2dFV3BCQzNVMkFtQWdBQ0FNSUE1cklnd2dCU0FIYTBHakdtd2lEaUFJSUFWclFiWTViQ0lSSUJ4Qmw3Qi9iQ0lMSUFWQmhja0JiR3BxYWlJRmEwRUxkVFlDNEFJZ0FDQUZJQXhxUVF0MU5nS0FBU0FBSUE4Z0Ntc2lCU0FhUWRVcWJDSU1JQWNnQm10Qmlkb0FiQ0lLSUFkQitrNXNhbW9nRG1vaUIydEJDM1UyQXNBQ0lBQWdCU0FIYWtFTGRUWUNvQUVnQUNBWUlCVnJJZ2NnQ0NBR2EwR2pHbXdpQlNBR1FacitBR3hxSUFwcUlBdHFJZ1pyUVF0MU5nS2dBaUFBSUFZZ0IycEJDM1UyQXNBQklBQWdGQ0FTYXlJR0lBVWdDRUhDaW45c2FpQU1haUFSYWlJSWEwRUxkVFlDZ0FJZ0FDQUdJQWhxUVF0MU5nTGdBU0FBUVFScUlRQWdBVUVFYWlFQklBSkJBbW9oQWlBSlFRRnFJZ2xCQ0VjTkFBdEJnQU5ySVFBZ0dTRUJRUUFoREFOQUlBTWdERUVDZEdvb0FnQWdCR29pQWlBQUlBRW9BZ3dpQmlBQktBSUVJZ2hxUWM3V0FHd2lEU0FJUWRidGZteHFJQUVvQWhRaUJ5QUlhaUlSUWVuUEFHd2lEMm9nQVNnQ0hDSUZJQWhxUWZ6RkFHd2lFbW9pQ3lBQktBSUlJZ29nQVNnQ0dDSU9heUlUUWVQWUFHd2lGQ0FPUVlPa0FXeHFJaFVnQVNnQ0FFRU5kRUdBZ0lqQUFHb2lDU0FCS0FJUUloQkJ6OU1BYkNJYWFpSVdhaUlYYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQUNBWElBdHJRUkoyUWY4SGNXb3RBQUE2QUE4Z0FpQUFJQVVnQm1vaUMwR3JWV3dpRnlBR0lBZHFRZkFJYkNJWUlBMGdCa0hOQkd4cWFtb2lEU0FUUWRRUmJDSVRJQXBCelRsc2FpSWJJQWtnRUVIUkltd2lFR29pSEdvaUhXcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBQWdIU0FOYTBFU2RrSC9CM0ZxTFFBQU9nQU9JQUlnQUNBRklBZHFRYktwZjJ3aURTQVlJQWRCK3JkL2JHb2dEMnBxSWc4Z0ZDQUtRY0paYkdvaUNpQUpJQkJySWhScUloQnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUFJQkFnRDJ0QkVuWkIvd2R4YWkwQUFEb0FEU0FDSUFBZ0Z5QUZRWmpFQUd4cUlCSnFJQTFxSWcwZ0V5QU9RYkJmYkdvaURpQUpJQnBySWdscUlnOXFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUFJQThnRFd0QkVuWkIvd2R4YWkwQUFEb0FEQ0FDSUFBZ0JTQUhhMEdqR213aURTQUlJQVZyUWJZNWJDSVBJQXRCbDdCL2JDSVNJQVZCaGNrQmJHcHFhaUlGSUFrZ0Rtc2lDV3BCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUFnQ1NBRmEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FDQVJRZFVxYkNJRklBY2dCbXRCaWRvQWJDSUpJQWRCK2s1c2Ftb2dEV29pQnlBVUlBcHJJZ3BxUVJKMlFmOEhjV290QUFBNkFBVWdBaUFBSUFvZ0IydEJFblpCL3dkeGFpMEFBRG9BQ2lBQ0lBQWdDQ0FHYTBHakdtd2lCeUFHUVpyK0FHeHFJQWxxSUJKcUlnWWdIQ0FiYXlJSmFrRVNka0gvQjNGcUxRQUFPZ0FHSUFJZ0FDQUpJQVpyUVJKMlFmOEhjV290QUFBNkFBa2dBaUFBSUFjZ0NFSENpbjlzYWlBRmFpQVBhaUlHSUJZZ0ZXc2lDR3BCRW5aQi93ZHhhaTBBQURvQUJ5QUNJQUFnQ0NBR2EwRVNka0gvQjNGcUxRQUFPZ0FJSUFGQklHb2hBU0FNUVFGcUlneEJFRWNOQUFzZ0dVR0FCR29rQUF1bkN3RVpmeU1BUWVBRGF5SVpKQUFnQUNnQzBBSWdBU2dDVkNFQklCa2hBQU5BSUFFb0FxQUJJUVVnQWk0QlVDRUlJQUVvQWlBaEVDQUNMZ0VRSVFrZ0FTZ0M0QUVoQnlBQ0xnRndJUW9nQVNnQ1lDRVJJQUl1QVRBaEVpQUFJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZzhnQVNnQ3dBRWdBaTRCWUd3aUMwRytwWDlzYWlJVklBRW9Ba0FnQWk0QklHd2lEQ0FCS0FLQUFTQUNMZ0ZBYkNJTmF5SUdRY0NsZjJ4cVFRdDFOZ0xnQVNBQUlBdEJuY2tBYkNBUGFpSU9JQVpCOWdKc0lob2dEQ0FOYWlJTlFjN1ZBR3dpRm1wcUloY2dCeUFLYkNJSFFhT2RBV3dnRVNBU2JDSUtRZmFwZjJ3aUVXc2dCU0FJYkNJU1FiSE9BR3dpQ0NBSklCQnNJZ1VnQjJzaUVFR0MyZ0JzYWlJSmFpSVlhMEVMZFRZQ3dBTWdBQ0FYSUJocVFRdDFOZ0lBSUFBZ0MwR0VaR3dnRDJvaUR5QUdRZEFXYkNJTElBMUJ6REpzSWhkcWFpSVlJQW9nQjJzaUd5QUZha0dhTld3aUhDQUZRZkVnYkdvaUhXdEJDM1UyQXFBRElBQWdHQ0FkYWtFTGRUWUNJQ0FBSUJVZ0JrR2dMV3hxSWhVZ0VDQVNhMEd4emdCc0loQnJRUXQxTmdLQUF5QUFJQkFnRldwQkMzVTJBa0FnQUNBR1FibG1iQ0lHSUExQmdpTnNJZzFySUE1cUloQWdCU0FIYWtIb0pHd2lFaUFJSUJGcUlBZEJyMGhzYW1vaUIydEJDM1UyQXFBQ0lBQWdCeUFRYWtFTGRUWUNvQUVnQUNBTVFaUGNBR3dpQnlBV2F5QWFhaUFQYWlJTUlBcEI1a3BzSWdvZ0JVRzVIbXhxSUFocklCSnFJZ2hyUVF0MU5nTGdBaUFBSUFnZ0RHcEJDM1UyQW1BZ0FDQU9JQmRySUF0cUlnc2dIQ0FiUWR6MGZteHFJZ3hyUVF0MU5nTEFBaUFBSUFzZ0RHcEJDM1UyQW9BQklBQWdEU0FIYXlBR2FpQVBhaUlHSUFvZ0JVSG51SDlzYWlBSmFpSUZhMEVMZFRZQ2dBSWdBQ0FGSUFacVFRdDFOZ0xBQVNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQVVRUUZxSWhSQkNFY05BQXRCZ0FOcklRQWdHU0VCUVFBaEZBTkFJQU1nRkVFQ2RHb29BZ0FnQkdvaUFpQUFJQUVvQWh3aUJrR2puUUZzSUFFb0Fnd2lEMEgycVg5c0loQnJJQUVvQWhRaUNVR3h6Z0JzSWdzZ0FTZ0NCQ0lGSUFackloRkJndG9BYkdvaUVtb2lFeUFCS0FJQVFRMTBRWUNBaU1BQWFpSU1JQUVvQWhnaURrR2R5UUJzYWlJTklBRW9BZ2dpQ2lBQktBSVFJZ2hySWdkQjlnSnNJaFVnQ0NBS2FpSUlRYzdWQUd3aUdtcHFJaFpxUVJKMlFmOEhjV290QUFBNkFBQWdBaUFBSUJZZ0UydEJFblpCL3dkeGFpMEFBRG9BRGlBQ0lBQWdCU0FQSUFackloWnFRWm8xYkNJWElBVkI4U0JzYWlJWUlBNUJoR1JzSUF4cUloTWdCMEhRRm13aUd5QUlRY3d5YkNJY2Ftb2lIV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnSFNBWWEwRVNka0gvQjNGcUxRQUFPZ0FOSUFJZ0FDQVJJQWxyUWJIT0FHd2lDU0FPUWI2bGYyd2dER29pRENBSFFhQXRiR29pRG1wQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFBZ0RpQUphMEVTZGtIL0IzRnFMUUFBT2dBTUlBSWdBQ0FGSUFacVFlZ2tiQ0lPSUE5QjVrcHNJZzhnQlVHNUhteHFJQXRyYWlJSklBcEJrOXdBYkNJS0lCcHJJQlZxSUJOcUloRnFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUFJQkVnQ1d0QkVuWkIvd2R4YWkwQUFEb0FDeUFDSUFBZ0Z5QVdRZHowZm14cUlna2dEU0FjYXlBYmFpSVJha0VTZGtIL0IzRnFMUUFBT2dBRUlBSWdBQ0FSSUFsclFSSjJRZjhIY1dvdEFBQTZBQW9nQWlBQUlBc2dFR29nQmtHdlNHeHFJQTVxSWdZZ0IwRzVabXdpQ3lBSVFZSWpiQ0lPYXlBTmFpSU5ha0VTZGtIL0IzRnFMUUFBT2dBRklBSWdBQ0FOSUFaclFSSjJRZjhIY1dvdEFBQTZBQWtnQWlBQUlBOGdCVUhudUg5c2FpQVNhaUlGSUE0Z0Ntc2dDMm9nRTJvaUJtcEJFblpCL3dkeGFpMEFBRG9BQmlBQ0lBQWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUlnQUNBTUlBZEJ3S1gvL3dCc2FrRVNka0gvQjNGcUxRQUFPZ0FISUFGQklHb2hBU0FVUVFGcUloUkJEMGNOQUFzZ0dVSGdBMm9rQUF2RENnRVZmeU1BUWNBRGF5SVdKQUFnQUNnQzBBSWdBU2dDVkNFQklCWWhBQU5BSUFFb0FzQUJJUWNnQWk0QllDRUlJQUVvQWtBaENpQUNMZ0VnSVFrZ0FDQUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSU5JQUVvQW9BQklBSXVBVUJzSWd0QnZxVi9iR3BCQzNVaUVTQUJLQUxnQVNBQ0xnRndiQ0lPSUFFb0FpQWdBaTRCRUd3aURDQUJLQUpnSUFJdUFUQnNJZ1ZySWhJZ0FTZ0NvQUVnQWk0QlVHd2lCbXRxUVFKMElnOXJOZ0xBQWlBQUlBOGdFV28yQW1BZ0FDQUhJQWhzSWdnZ0NTQUtiQ0lLYWtIaXhnQnNJZ2tnQ0VIOGtYOXNhaUlSSUF0QmtoUnNJQTFxSWc5cUloVWdCU0FHYWtIdmRXd2dEa0VOZENJSGF5SU9JQVVnREdwQnQ5VUFiQ0lYSUFWQjdtUnNhbW9pRTJ0QkMzVTJBb0FESUFBZ0V5QVZha0VMZFRZQ0lDQUFJQWhCNGFkL2JDQUtRYU1uYkdvaUNDQUxRY2xIYkNBTmFpSVZhaUlUSUE0Z0JpQU1haUlPUWRMTUFHd2lHQ0FHUVlub2ZteHFhaUlaYTBFTGRUWUM0QUlnQUNBVElCbHFRUXQxTmdKQUlBQWdEeUFSYXlJUklCSkI4aDFzSUFkckloSWdCaUFGYTBINDJRQnNJZzhnQlVHWksyeHFhaUlGYTBFTGRUWUNnQUlnQUNBRklCRnFRUXQxTmdLZ0FTQUFJQXRCeHRFQWJDQU5haUlGSUFrZ0NrRzlFV3hxSWcxcklnc2dEa0dVTUd3aUNpQU1RWXU4ZjJ4cUlCSnFJZ2xyUVF0MU5nTGdBU0FBSUFrZ0MycEJDM1UyQXNBQklBQWdCU0FOYWlJRklCY2dERUh3dDM5c2FpQVlhaUFIYWlJTWEwRUxkVFlDb0FNZ0FDQUZJQXhxUVF0MU5nSUFJQUFnRlNBSWF5SUZJQThnQmtIbWszOXNhaUFLYWlBSGFpSUdhMEVMZFRZQ29BSWdBQ0FGSUFacVFRdDFOZ0tBQVNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQVFRUUZxSWhCQkNFY05BQXRCZ0FOcklRQWdGaUVCUVFBaERRTkFJQU1nRFVFQ2RHb29BZ0FnQkdvaUFpQUFJQUVvQWh3aUZFRU5kQ0lMSUFFb0Fnd2lCU0FCS0FJRUlneHFRYmZWQUd3aUNTQU1RZkMzZjJ4cUlBRW9BaFFpQmlBTWFpSVJRZExNQUd3aURtcHFJaElnQVNnQ0dDSUlJQUVvQWdnaUNtcEI0c1lBYkNJUElBcEJ2UkZzYWlJVklBRW9BZ0JCRFhSQmdJQ0l3QUJxSWdjZ0FTZ0NFQ0lRUWNiUkFHeHFJaGRxSWhOcVFSSjJRZjhIY1dvdEFBQTZBQUFnQWlBQUlCTWdFbXRCRW5aQi93ZHhhaTBBQURvQURTQUNJQUFnQlNBR2FrSHZkV3dnQzJzaUVpQUpJQVZCN21Sc2Ftb2lDU0FQSUFoQi9KRi9iR29pRHlBSElCQkJraFJzYWlJVGFpSVlha0VTZGtIL0IzRnFMUUFBT2dBQklBSWdBQ0FZSUFsclFSSjJRZjhIY1dvdEFBQTZBQXdnQWlBQUlBNGdCa0dKNkg1c2FpQVNhaUlKSUFoQjRhZC9iQ0FLUWFNbmJHb2lDQ0FRUWNsSGJDQUhhaUlLYWlJT2FrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FDQU9JQWxyUVJKMlFmOEhjV290QUFBNkFBc2dBaUFBSUJRZ0RDQUZheUlKSUFacmFrRU5kQ0lVSUJCQnZxVi9iQ0FIYWlJSGFrRVNka0gvQjNGcUxRQUFPZ0FESUFJZ0FDQUhJQlJyUVJKMlFmOEhjV290QUFBNkFBb2dBaUFBSUJGQmxEQnNJZ2NnQmlBRmEwSDQyUUJzSWhBZ0N5QUdRZWFUZjJ4cWFtb2lCaUFLSUFocklnaHFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUFJQWdnQm10QkVuWkIvd2R4YWkwQUFEb0FDU0FDSUFBZ0NVSHlIV3dnQzJzaUJpQVFJQVZCbVN0c2Ftb2lCU0FUSUE5cklndHFRUkoyUWY4SGNXb3RBQUE2QUFVZ0FpQUFJQXNnQld0QkVuWkIvd2R4YWkwQUFEb0FDQ0FDSUFBZ0J5QU1RWXU4ZjJ4cUlBWnFJZ1VnRnlBVmF5SUdha0VTZGtIL0IzRnFMUUFBT2dBR0lBSWdBQ0FHSUFWclFSSjJRZjhIY1dvdEFBQTZBQWNnQVVFZ2FpRUJJQTFCQVdvaURVRU9SdzBBQ3lBV1FjQURhaVFBQy9zS0FSWi9Jd0JCb0FOckloWWtBQ0FBS0FMUUFpQUJLQUpVSVFFZ0ZpRUFBMEFnQVNnQzRBRWhDaUFDTGdGd0lSQWdBU2dDWUNFRklBSXVBVEFoQmlBQktBS2dBU0VSSUFJdUFWQWhFeUFCS0FJZ0lRZ2dBaTRCRUNFTElBQWdBaTRCQUNBQktBSUFiRUVOZEVHQUNISWlEQ0FCS0FLQUFTQUNMZ0ZBYkNJTklBRW9Bc0FCSUFJdUFXQnNJZzVySWc4Z0FTZ0NRQ0FDTGdFZ2JDSUhhMEhCMmdCc2FrRUxkVFlDd0FFZ0FDQVBRWmtHYkNBTWFpSVhJQTBnRG1vaURVSDV5UUJzSWc0Z0IwSHgxd0JzYW1vaUZDQUZJQVpzSWdVZ0NDQUxiQ0lJYWtIUTFBQnNJZ3NnQ0VIYi9uNXNhaUFSSUJOc0lnWWdDR3BCdnNvQWJDSVJhaUFLSUJCc0lnb2dDR29pRUVHQ1BHd2lFMm9pRld0QkMzVTJBb0FESUFBZ0ZDQVZha0VMZFRZQ0FDQUFJQTlCbFI5c0lBeHFJaFFnQjBIZ3d3QnNJQTFCb0JSc0loVnJhaUlZSUFVZ0NtcEJ3clYvYkNJWklBVWdCbXBCcTJwc0lob2dDeUFGUWNzMWJHcHFhaUlMYTBFTGRUWUM0QUlnQUNBTElCaHFRUXQxTmdJZ0lBQWdCMEdNSUd3Z0Rtc2dGMm9pQ3lBR0lBcHFRZmhWYkNJT0lCb2dCa0d4bTM5c2FpQVJhbW9pRVd0QkMzVTJBc0FDSUFBZ0N5QVJha0VMZFRZQ1FDQUFJQTlCZ2tSc0lBeHFJZ3dnQjBHTWRXd2dEVUh5RzJ3aUQydHFJZzBnR1NBS1FaU05BV3hxSUJOcUlBNXFJaEZyUVF0MU5nS2dBaUFBSUEwZ0VXcEJDM1UyQW1BZ0FDQVBJQWRCeTB4c2FpQU1haUlNSUJCQjFSVnNJQVlnQld0QmdqeHNhaUlQSUFoQnN4UnNhaUFGUVpaaWJHb2lCV3RCQzNVMkFvQUNJQUFnQlNBTWFrRUxkVFlDZ0FFZ0FDQVZJQWRCN3E5L2JHb2dGR29pQnlBUElBWkJ6aGhzYWlBS1FiK1FmMnhxSWdWclFRdDFOZ0xnQVNBQUlBVWdCMnBCQzNVMkFxQUJJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUJKQkFXb2lFa0VJUncwQUMwR0FBMnNoQUNBV0lRRkJBQ0VNQTBBZ0F5QU1RUUowYWlnQ0FDQUVhaUlDSUFBZ0FTZ0NEQ0lGSUFFb0FnUWlDR3BCME5RQWJDSUpJQWhCMi81K2JHb2dBU2dDRkNJR0lBaHFRYjdLQUd3aUVHb2dBU2dDSENJS0lBaHFJaEZCZ2p4c0loTnFJZ3NnQVNnQ0dDSVNJQUVvQWhBaURtb2lEVUg1eVFCc0loY2dBU2dDQ0NJSFFmSFhBR3hxSUFFb0FnQkJEWFJCZ0lDSXdBQnFJZzhnRGlBU2F5SVNRWmtHYkdvaURtb2lGR3BCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUFnRkNBTGEwRVNka0gvQjNGcUxRQUFPZ0FNSUFJZ0FDQUZJQXBxUWNLMWYyd2lDeUFGSUFacVFhdHFiQ0lVSUFrZ0JVSExOV3hxYW1vaUNTQVNRWlVmYkNBUGFpSVZJQWRCNE1NQWJDQU5RYUFVYkNJWWEyb2lHV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnR1NBSmEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FDQUdJQXBxUWZoVmJDSUpJQlFnQmtHeG0zOXNhaUFRYW1vaUVDQUhRWXdnYkNBWGF5QU9haUlPYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUlnQUNBT0lCQnJRUkoyUWY4SGNXb3RBQUE2QUFvZ0FpQUFJQXNnQ2tHVWpRRnNhaUFUYWlBSmFpSUpJQkpCZ2tSc0lBOXFJaEFnQjBHTWRXd2dEVUh5RzJ3aURXdHFJaE5xUVJKMlFmOEhjV290QUFBNkFBTWdBaUFBSUJNZ0NXdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBQWdFVUhWRld3Z0JpQUZhMEdDUEd4cUlna2dDRUd6Rkd4cUlBVkJsbUpzYWlJRklBMGdCMEhMVEd4cUlCQnFJZ2hxUVJKMlFmOEhjV290QUFBNkFBUWdBaUFBSUFnZ0JXdEJFblpCL3dkeGFpMEFBRG9BQ0NBQ0lBQWdDU0FHUWM0WWJHb2dDa0cva0g5c2FpSUZJQmdnQjBIdXIzOXNhaUFWYWlJR2FrRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FDQUdJQVZyUVJKMlFmOEhjV290QUFBNkFBY2dBaUFBSUJJZ0IydEJ3ZG9BYkNBUGFrRVNka0gvQjNGcUxRQUFPZ0FHSUFGQklHb2hBU0FNUVFGcUlneEJEVWNOQUFzZ0ZrR2dBMm9rQUF1VUNRRVVmeU1BUVlBRGF5SVZKQUFnQUNnQzBBSWdBU2dDVkNFQklCVWhBQU5BSUFFb0FvQUJJUWdnQWk0QlFDRU9JQUFnQVNnQ1FDQUNMZ0VnYkNJUElBRW9Bc0FCSUFJdUFXQnNJZ2xyUVExMElnb2dBaTRCQUNBQktBSUFiRUVOZEVHQUNISWlDMm9pRENBQktBSWdJQUl1QVJCc0lnWWdBU2dDNEFFZ0FpNEJjR3dpQjJzaUVDQUJLQUpnSUFJdUFUQnNJaEVnQVNnQ29BRWdBaTRCVUd3aUJXc2lFbXBCMFNKc0loTWdFRUgrTUd4cUloQnJRUXQxTmdMQUFpQUFJQXdnRUdwQkMzVTJBaUFnQUNBTElBcHJJZ29nRXlBU1FkK0pmMnhxSWd4clFRdDFOZ0xnQVNBQUlBb2dER3BCQzNVMkFvQUJJQUFnQ0NBT2JFR3h6Z0JzSWc0Z0Myb2lDaUFKUVExMElna2dEMEcyMXdCc2FpSU1heUlRSUFjZ0JTQUdhaUlTYWtHTk4yd2lDQ0FSUWE5ZGJDSVRJQVpCM0ZSc2FpQUhRWXlCZjJ4cWFpSVVhMEVMZFRZQ3dBRWdBQ0FRSUJScVFRdDFOZ0tnQVNBQUlBb2dER29pQ2lBSUlCSkIyeEJzYWlJTUlCRkJ6OU1BYkNJUklBWkI5eEZzYW1vaUJtdEJDM1UyQXVBQ0lBQWdCaUFLYWtFTGRUWUNBQ0FBSUE5QnRoZHNJQWxySWdZZ0N5QU9heUlMYWlJUElBVWdCMnBCaTcxL2JDSU9JQVZCc0tGL2JDQVRhbW9nREdvaUJXdEJDM1UyQXFBQ0lBQWdCU0FQYWtFTGRUWUNRQ0FBSUFzZ0Jtc2lDeUFIUWNibEFHd2dFV3NnQ0dvZ0Rtb2lCMnRCQzNVMkFvQUNJQUFnQnlBTGFrRUxkVFlDWUNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQU5RUUZxSWcxQkNFY05BQXRCZ0FOcklRQWdGU0VCUVFBaEN3TkFJQU1nQzBFQ2RHb29BZ0FnQkdvaUFpQUFJQUVvQWd3aUQwSFAwd0JzSWhZZ0FTZ0NCQ0lHUWZjUmJHb2dBU2dDRkNJRklBWnFJZzBnQVNnQ0hDSUhha0dOTjJ3aUVTQU5RZHNRYkdvaURtb2lDU0FCS0FJWUlncEJEWFFpRENBQktBSUlJZ2hCdHRjQWJHb2lFQ0FCS0FJQVFRMTBRWUNBaU1BQWFpSU5JQUVvQWhCQnNjNEFiQ0lTYWlJVGFpSVVha0VTZGtIL0IzRnFMUUFBT2dBQUlBSWdBQ0FVSUFsclFSSjJRZjhIY1dvdEFBQTZBQXNnQWlBQUlBWWdCMnNpQ1NBUElBVnJJaFJxUWRFaWJDSVhJQWxCL2pCc2FpSUpJQWdnQ210QkRYUWlDaUFOYWlJWWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFJZ0FDQVlJQWxyUVJKMlFmOEhjV290QUFBNkFBb2dBaUFBSUE0Z0JTQUhha0dMdlg5c0lnNGdEMEd2WFd3aUR5QUZRYkNoZjJ4cWFtb2lCU0FJUWJZWGJDQU1heUlJSUEwZ0Vtc2lDV29pREdwQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFBZ0RDQUZhMEVTZGtIL0IzRnFMUUFBT2dBSklBSWdBQ0FIUWNibEFHd2dGbXNnRVdvZ0Rtb2lCU0FKSUFocklnaHFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUFJQWdnQld0QkVuWkIvd2R4YWkwQUFEb0FDQ0FDSUFBZ0Z5QVVRZCtKZjJ4cUlnVWdEU0FLYXlJTmFrRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FDQU5JQVZyUVJKMlFmOEhjV290QUFBNkFBY2dBaUFBSUE4Z0JrSGNWR3hxSUFkQmpJRi9iR29nRVdvaUJ5QVRJQkJySWdacVFSSjJRZjhIY1dvdEFBQTZBQVVnQWlBQUlBWWdCMnRCRW5aQi93ZHhhaTBBQURvQUJpQUJRU0JxSVFFZ0MwRUJhaUlMUVF4SERRQUxJQlZCZ0FOcUpBQUw0d2tCRkg4akFFSGdBbXNpRlNRQUlBQW9BdEFDSUFFb0FsUWhBU0FWSVFBRFFDQUJLQUxnQVNFRklBSXVBWEFoQ3lBQktBSmdJUVlnQWk0Qk1DRUlJQUVvQXFBQklRNGdBaTRCVUNFUElBRW9BaUFoQ1NBQ0xnRVFJUkFnQUNBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJTUlBRW9Bc0FCSUFJdUFXQnNJZzBnQVNnQ1FDQUNMZ0VnYkNJSGFpSVhJQUVvQW9BQklBSXVBVUJzSWdwckloSkJ2NlYvYkdwQkMzVTJBcUFCSUFBZ0VrSHMxZ0JzSUF4cUlnd2dDaUFOYTBIK29nRnNJaEpxSUExQnRZY0JiR29pRXlBR0lBaHNJZ1lnQ1NBUWJDSUphaUlRUWVvNGJDSVVJQWxCOWtSc2FpQU9JQTlzSWdnZ0NXcEI5Q3BzSWc1cUlBVWdDMndpQlNBSUlCQnFha0hBR1d3aUN5QUZJQWxxUWJnWGJHb2lDV29pRDJ0QkMzVTJBc0FDSUFBZ0R5QVRha0VMZFRZQ0FDQUFJQXdnRjBHRnRuOXNhaUlQSUExQncwMXNhaUlOSUFzZ0JpQUlha0hKdFg5c2FpSVFJQTRnQ0VIYXMzOXNhbW9pRG10QkMzVTJBb0FDSUFBZ0RTQU9ha0VMZFRZQ1FDQUFJQXdnQ2lBSGEwSEpHMnhxSWcwZ0IwR1JuMzlzYWlJTUlBa2dCU0FHYWtIMWpIOXNJZ2tnQlVISGhnRnNhbW9pRG10QkMzVTJBdUFCSUFBZ0RDQU9ha0VMZFRZQ1lDQUFJQXBCdWZ3QWJDQUhRZjJtZjJ4cUlBOXFJZ2NnQ0VHTHdBQnNJQVpCamFKL2JHb2dCVUdXbEg5c2FpQUxhaUlJYTBFTGRUWUN3QUVnQUNBSElBaHFRUXQxTmdLQUFTQUFJQTBnQ2tHMGkzOXNhaUFTYWlJS0lCUWdCa0hZaEFGc2FpQUphaUFRYWlJR2EwRUxkVFlDb0FJZ0FDQUdJQXBxUVF0MU5nSWdJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUJGQkFXb2lFVUVJUncwQUMwR0FBMnNoQUNBVklRRkJBQ0VOQTBBZ0F5QU5RUUowYWlnQ0FDQUVhaUlDSUFBZ0FTZ0NEQ0lLSUFFb0FnUWlCV29pQjBIcU9Hd2lDeUFGUWZaRWJHb2dBU2dDRkNJR0lBVnFRZlFxYkNJV2FpQUJLQUljSWdnZ0JpQUhhbXBCd0Jsc0loRWdCU0FJYWtHNEYyeHFJZzVxSWc4Z0FTZ0NBRUVOZEVHQWdJakFBR29pRUNBQktBSVlJZ2NnQVNnQ0NDSUphaUlYSUFFb0FoQWlCV3NpRWtIczFnQnNhaUlNSUFVZ0IydEIvcUlCYkNJVGFpQUhRYldIQVd4cUloUnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQlFnRDJ0QkVuWkIvd2R4YWkwQUFEb0FDaUFDSUFBZ0VTQUdJQXBxUWNtMWYyeHFJZzhnQ0NBS2FrSDFqSDlzSWhRZ0N5QUtRZGlFQVd4cWFtb2lDeUFUSUF3Z0JTQUphMEhKRzJ4cUloTWdCVUcwaTM5c2Ftb2lHR3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnR0NBTGEwRVNka0gvQjNGcUxRQUFPZ0FKSUFJZ0FDQVdJQVpCMnJOL2JHb2dEMm9pQ3lBTUlCZEJoYlovYkdvaURDQUhRY05OYkdvaUIycEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBQWdCeUFMYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUlnQUNBVUlBaEJ4NFlCYkdvZ0Rtb2lCeUFUSUFsQmtaOS9iR29pQzJwQkVuWkIvd2R4YWkwQUFEb0FBeUFDSUFBZ0N5QUhhMEVTZGtIL0IzRnFMUUFBT2dBSElBSWdBQ0FHUVl2QUFHd2dDa0dOb245c2FpQUlRWmFVZjJ4cUlCRnFJZ29nQlVHNS9BQnNJQWxCL2FaL2JHb2dER29pQm1wQkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFBZ0JpQUthMEVTZGtIL0IzRnFMUUFBT2dBR0lBSWdBQ0FTUWIrbC8vOEFiQ0FRYWtFU2RrSC9CM0ZxTFFBQU9nQUZJQUZCSUdvaEFTQU5RUUZxSWcxQkMwY05BQXNnRlVIZ0Ftb2tBQXY3QndFUmZ5TUFRY0FDYXlJVkpBQWdBQ2dDMEFJZ0FTZ0NWQ0VCSUJVaEFBTkFJQUVvQXNBQklRZ2dBaTRCWUNFSklBRW9Ba0FoQ2lBQ0xnRWdJUkVnQUNBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJRklBRW9Bb0FCSUFJdUFVQnNJZ1pCdnFWL2JHcEJDM1VpQ3lBQktBSWdJQUl1QVJCc0lnY2dBU2dDb0FFZ0FpNEJVR3dpRENBQktBSmdJQUl1QVRCc0lnMGdBU2dDNEFFZ0FpNEJjR3dpRW1zaURtcHJRUUowSWhOck5nTGdBU0FBSUFzZ0UybzJBa0FnQUNBSUlBbHNJZ2dnQ2lBUmJDSUpha0dhTld3aUNpQUpRZkVnYkdvaUNTQUdRWjNKQUd3Z0JXb2lFV29pQ3lBTVFRMTBJZ3dnRGtIakUyeHFJaE1nRFNBU2FpSU5RZTg4YkNJU0lBZEJzOWtBYkdwcUloUnJRUXQxTmdLZ0FpQUFJQXNnRkdwQkMzVTJBZ0FnQUNBR1FZUmtiQ0FGYWlJRklBb2dDRUhjOUg1c2FpSUdheUlJSUE1Qm5VeHNJQXhxSWc0Z0IwR01LV3dnRFVIUEpXd2lDbXRxSWd0clFRdDFOZ0xBQVNBQUlBZ2dDMnBCQzNVMkFtQWdBQ0FSSUFscklnZ2dCMEdVRG13Z0Vtc2dFMm9pQ1d0QkMzVTJBcUFCSUFBZ0NDQUpha0VMZFRZQ2dBRWdBQ0FGSUFacUlnVWdCMEhUMEFCc0lBb2dEbXBySWdkclFRdDFOZ0tBQWlBQUlBVWdCMnBCQzNVMkFpQWdBRUVFYWlFQUlBRkJCR29oQVNBQ1FRSnFJUUlnRDBFQmFpSVBRUWhIRFFBTFFZQURheUVBSUJVaEFrRUFJUThEUUNBRElBOUJBblJxS0FJQUlBUnFJZ0VnQUNBQ0tBSWNJZ1VnQWlnQ0RDSUdhaUlRUWU4OGJDSUlJQUlvQWdRaUIwR3oyUUJzYWlBQ0tBSVVJZ2xCRFhRaUNpQUdJQVZySWdWQjR4TnNhaUlSYWlJTElBSW9BaGdpRENBQ0tBSUlJZ1pxUVpvMWJDSU5JQVpCOFNCc2FpSVNJQUlvQWdCQkRYUkJnSUNJd0FCcUlnWWdBaWdDRUNJT1FaM0pBR3hxSWhOcUloUnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FTQUFJQlFnQzJ0QkVuWkIvd2R4YWkwQUFEb0FDU0FCSUFBZ0IwSFQwQUJzSUJCQnp5VnNJaEFnQlVHZFRHd2dDbW9pQ21wcklnc2dEU0FNUWR6MGZteHFJZ3dnRGtHRVpHd2dCbW9pRFdvaUZHcEJFblpCL3dkeGFpMEFBRG9BQVNBQklBQWdGQ0FMYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUVnQUNBSElBVWdDV3ByUVExMElnVWdEa0crcFg5c0lBWnFJZ1pxUVJKMlFmOEhjV290QUFBNkFBSWdBU0FBSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQnlBQklBQWdCMEdNS1d3Z0VHc2dDbW9pQlNBTklBeHJJZ1pxUVJKMlFmOEhjV290QUFBNkFBTWdBU0FBSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQmlBQklBQWdCMEdVRG13Z0NHc2dFV29pQnlBVElCSnJJZ1ZxUVJKMlFmOEhjV290QUFBNkFBUWdBU0FBSUFVZ0IydEJFblpCL3dkeGFpMEFBRG9BQlNBQ1FTQnFJUUlnRDBFQmFpSVBRUXBIRFFBTElCVkJ3QUpxSkFBTHN3Y0JFMzhqQUVHZ0Ftc2lFaVFBSUFBb0F0QUNJQUVvQWxRaEFTQVNJUUFEUUNBQktBSmdJUW9nQWk0Qk1DRUlJQUVvQXFBQklRWWdBaTRCVUNFT0lBRW9BdUFCSVE4Z0FpNEJjQ0VKSUFFb0FpQWhFQ0FDTGdFUUlSTWdBQ0FDTGdFQUlBRW9BZ0JzUVExMFFZQUljaUlMSUFFb0FzQUJJQUl1QVdCc0loRkJ2cVYvYkdvaUZDQUJLQUpBSUFJdUFTQnNJZ2NnQVNnQ2dBRWdBaTRCUUd3aUJXc2lGVUcrcFg5c2FrRUxkVFlDZ0FFZ0FDQVJRYUV0YkNBTGFpSUxJQVVnQjJwQmg5VUFiQ0lSSUFWQjNBOXNJaFpyYWlJWElBWWdEbXdpQlNBUUlCTnNJZ1pxUVpjNmJDSU9JQWdnQ214Qno3Ri9iQ0lLYXlBSklBOXNJZ2dnQm1wQitoNXNJZzlxSWdsclFRdDFOZ0tBQWlBQUlBa2dGMnBCQzNVMkFnQWdBQ0FVSUJWQm9TMXNhaUlKSUFZZ0JTQUlhbXRCc2M0QWJDSUdhMEVMZFRZQzRBRWdBQ0FHSUFscVFRdDFOZ0lnSUFBZ0IwR3J4UUJzSWdjZ0N5QVJhMm9pQmlBS0lBVWdDR3RCa2RrQWJDSUZheUFPYWlJSWEwRUxkVFlDd0FFZ0FDQUdJQWhxUVF0MU5nSkFJQUFnQ3lBSGF5QVdhaUlISUFVZ0Ntb2dEMm9pQld0QkMzVTJBcUFCSUFBZ0JTQUhha0VMZFRZQ1lDQUFRUVJxSVFBZ0FVRUVhaUVCSUFKQkFtb2hBaUFOUVFGcUlnMUJDRWNOQUF0QmdBTnJJUUVnRWlFQVFRQWhEUU5BSUFNZ0RVRUNkR29vQWdBZ0JHb2lBaUFCSUFBb0FoUWlCeUFBS0FJRUlnVnFRWmM2YkNJT0lBQW9BZ3hCejdGL2JDSUxheUFBS0FJY0lnWWdCV3BCK2g1c0lnOXFJZ2tnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lFQ0FBS0FJWUloTkJvUzFzYWlJS0lBQW9BaEFpQ0NBQUtBSUlJZ3hxUVlmVkFHd2lFU0FJUWR3UGJDSVVhMm9pRldwQkVuWkIvd2R4YWkwQUFEb0FBQ0FDSUFFZ0ZTQUphMEVTZGtIL0IzRnFMUUFBT2dBSUlBSWdBU0FGSUFZZ0IycHJRYkhPQUd3aUJTQVRRYjZsZjJ3Z0VHb2lDU0FNSUFocklnaEJvUzFzYWlJUWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFJZ0FTQVFJQVZyUVJKMlFmOEhjV290QUFBNkFBY2dBaUFCSUFzZ0J5QUdhMEdSMlFCc0lnZHJJQTVxSWdVZ0RFR3J4UUJzSWdZZ0NpQVJhMm9pREdwQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFFZ0RDQUZhMEVTZGtIL0IzRnFMUUFBT2dBR0lBSWdBU0FISUF0cUlBOXFJZ2NnQ2lBR2F5QVVhaUlGYWtFU2RrSC9CM0ZxTFFBQU9nQURJQUlnQVNBRklBZHJRUkoyUWY4SGNXb3RBQUE2QUFVZ0FpQUJJQWtnQ0VHK3BmLy9BR3hxUVJKMlFmOEhjV290QUFBNkFBUWdBRUVnYWlFQUlBMUJBV29pRFVFSlJ3MEFDeUFTUWFBQ2FpUUFDelFBSUFNb0FnQWdCR29nQUNnQzBBSWdBU2dDVkNnQ0FDQUNMd0VBYkVHRUlHcEJBM1pCL3dkeGFrR0FBMnN0QUFBNkFBQUx3d0VCQlg4Z0F5Z0NBQ0FFYWlJRklBQW9BdEFDUVlBRGF5SUFJQUVvQWxRaUFTZ0NKQ0FDTHdFU2JDSUdJQUVvQWdRZ0FpOEJBbXdpQjJvaUNDQUJLQUlnSUFJdkFSQnNJZ2tnQVNnQ0FDQUNMd0VBYkVHRUlHb2lBV29pQW1wQkEzWkIvd2R4YWkwQUFEb0FBQ0FGSUFBZ0FpQUlhMEVEZGtIL0IzRnFMUUFBT2dBQklBTW9BZ1FnQkdvaUFpQUFJQWNnQm1zaUF5QUJJQWxySWdGcVFRTjJRZjhIY1dvdEFBQTZBQUFnQWlBQUlBRWdBMnRCQTNaQi93ZHhhaTBBQURvQUFRdlZCQUVQZnlBREtBSUFJQVJxSWdVZ0FDZ0MwQUpCZ0FOcklnQWdBaTRCRUNBQktBSlVJZ0VvQWlCc1FiSE9BR3dpQ0NBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJR0lBRW9Ba0FnQWk0QklHd2lCMEdoTFd4cUlnbHFRUUowUVlCQWNVR0FnSWpBQUdvaUNpQUNMZ0VVSUFFb0FpaHNRYkhPQUd3aUN5QUNMZ0VFSUFFb0FnaHNRUTEwUVlBSWNpSU1JQUVvQWtnZ0FpNEJKR3dpRFVHaExXeHFJZzVxUVF0MUlnOUJvUzFzYWlJUUlBSXVBUklnQVNnQ0pHeEJzYzRBYkNJUklBSXVBUUlnQVNnQ0JHeEJEWFJCZ0FoeUloSWdBU2dDUkNBQ0xnRWliQ0lDUWFFdGJHb2lFMnBCQzNWQnNjNEFiQ0lCYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQVVnQUNBUUlBRnJRUkoyUWY4SGNXb3RBQUE2QUFJZ0JTQUFJQTlCdnFYLy93QnNJQXBxUVJKMlFmOEhjV290QUFBNkFBRWdBeWdDQkNBRWFpSUJJQUFnQjBHK3BmLy9BMndnQm1wQkFuUkJnRUJ4UVlDQWlNQUFhaUlGSUExQnZxVi9iQ0FNYWtFTGRTSUdRYUV0YkdvaUJ5QUNRYjZsZjJ3Z0VtcEJDM1ZCc2M0QWJDSUNha0VTZGtIL0IzRnFMUUFBT2dBQUlBRWdBQ0FISUFKclFSSjJRZjhIY1dvdEFBQTZBQUlnQVNBQUlBWkJ2cVgvL3dCc0lBVnFRUkoyUWY4SGNXb3RBQUE2QUFFZ0F5Z0NDQ0FFYWlJQklBQWdDU0FJYTBFQ2RFR0FRSEZCZ0lDSXdBQnFJZ0lnRGlBTGEwRUxkU0lEUWFFdGJHb2lCQ0FUSUJGclFRdDFRYkhPQUd3aUJXcEJFblpCL3dkeGFpMEFBRG9BQUNBQklBQWdCQ0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUNJQUVnQUNBRFFiNmwvLzhBYkNBQ2FrRVNka0gvQjNGcUxRQUFPZ0FCQzQ4R0FRZC9JQUFvQXRBQ0l3QkJRR29pQUNBQktBSlVJZ0VvQWtBZ0FpNEJJR3dpQmlBQktBSUFJQUl1QVFCc0lnVnFRUUowSWdnZ0FTZ0NZQ0FDTGdFd2JDSUpJQUVvQWlBZ0FpNEJFR3dpQjJwQjBTSnNRWUFJYWlJS0lBZEIvakJzYWtFTGRTSUhhellDTUNBQUlBY2dDR28yQWdBZ0FDQUZJQVpyUVFKMElnWWdDaUFKUWQrSmYyeHFRUXQxSWdWck5nSWdJQUFnQlNBR2FqWUNFQ0FBSUFFb0FrUWdBaTRCSW13aUJpQUJLQUlFSUFJdUFRSnNJZ1ZxUVFKMElnZ2dBU2dDWkNBQ0xnRXliQ0lKSUFFb0FpUWdBaTRCRW13aUIycEIwU0pzUVlBSWFpSUtJQWRCL2pCc2FrRUxkU0lIYXpZQ05DQUFJQWNnQ0dvMkFnUWdBQ0FGSUFaclFRSjBJZ1lnQ2lBSlFkK0pmMnhxUVF0MUlnVnJOZ0lrSUFBZ0JTQUdhallDRkNBQUlBRW9Ba2dnQWk0QkpHd2lCaUFCS0FJSUlBSXVBUVJzSWdWcVFRSjBJZ2dnQVNnQ2FDQUNMZ0UwYkNJSklBRW9BaWdnQWk0QkZHd2lCMnBCMFNKc1FZQUlhaUlLSUFkQi9qQnNha0VMZFNJSGF6WUNPQ0FBSUFjZ0NHbzJBZ2dnQUNBRklBWnJRUUowSWdZZ0NpQUpRZCtKZjJ4cVFRdDFJZ1ZyTmdJb0lBQWdCU0FHYWpZQ0dDQUFJQUVvQWt3Z0FpNEJKbXdpQmlBQktBSU1JQUl1QVFac0lnVnFRUUowSWdnZ0FTZ0NiQ0FDTGdFMmJDSUpJQUVvQWl3Z0FpNEJGbXdpQVdwQjBTSnNRWUFJYWlJQ0lBRkIvakJzYWtFTGRTSUJhellDUENBQUlBRWdDR28yQWd3Z0FDQUZJQVpyUVFKMElnRWdBaUFKUWQrSmYyeHFRUXQxSWdKck5nSXNJQUFnQVNBQ2FqWUNIRUdBQTJzaEN5QUFJUUpCQUNFQkEwQWdBeUFCUVFKMGFpZ0NBQ0FFYWlJQUlBc2dBaWdDRENJR0lBSW9BZ1FpQldwQjBTSnNJZ2dnQlVIK01HeHFJZ1VnQWlnQ0FFR1FnQUZxSWdrZ0FpZ0NDQ0lIYWtFTmRDSUtha0VTZGtIL0IzRnFMUUFBT2dBQUlBQWdDeUFLSUFWclFSSjJRZjhIY1dvdEFBQTZBQU1nQUNBTElBZ2dCa0hmaVg5c2FpSUdJQWtnQjJ0QkRYUWlCV3BCRW5aQi93ZHhhaTBBQURvQUFTQUFJQXNnQlNBR2EwRVNka0gvQjNGcUxRQUFPZ0FDSUFKQkVHb2hBaUFCUVFGcUlnRkJCRWNOQUFzTG5RUUJDMzhnQUNnQzBBSWdBU2dDVkNFQUl3QkI4QUJySWdvaEFRTkFJQUFvQW1BaEJ5QUNMZ0V3SVFVZ0FDZ0NJQ0VJSUFJdUFSQWhDeUFCSUFJdUFRQWdBQ2dDQUd4QkRYUkJnQWh5SWd3Z0FDZ0NRQ0FDTGdFZ2JDSU5JQUFvQW9BQklBSXVBVUJzSWc1cklnOUJ3S1YvYkdwQkMzVTJBaWdnQVNBUFFkQVdiQ0FNYWlJTUlBMGdEbXBCekRKc0lnMXFJZzRnQlNBSGJDSUhJQWdnQzJ3aUJXcEJtalZzSWdnZ0JVSHhJR3hxSWdWclFRdDFOZ0pRSUFFZ0JTQU9ha0VMZFRZQ0FDQUJJQXdnRFdzaUJTQUlJQWRCM1BSK2JHb2lCMnRCQzNVMkFqd2dBU0FGSUFkcVFRdDFOZ0lVSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lBbEJBV29pQ1VFRlJ3MEFDMEdBQTJzaEFDQUtJUUpCQUNFSkEwQWdBeUFKUVFKMGFpZ0NBQ0FFYWlJQklBQWdBaWdDRENJS0lBSW9BZ1FpQm1wQm1qVnNJZ2NnQmtIeElHeHFJZ1lnQWlnQ0FFRU5kRUdBZ0lqQUFHb2lCU0FDS0FJSUlnZ2dBaWdDRUNJTGF5SU1RZEFXYkdvaURTQUlJQXRxUWN3eWJDSUlhaUlMYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUVnQUNBTElBWnJRUkoyUWY4SGNXb3RBQUE2QUFRZ0FTQUFJQWNnQ2tIYzlINXNhaUlLSUEwZ0NHc2lCbXBCRW5aQi93ZHhhaTBBQURvQUFTQUJJQUFnQmlBS2EwRVNka0gvQjNGcUxRQUFPZ0FESUFFZ0FDQU1RY0NsLy84QWJDQUZha0VTZGtIL0IzRnFMUUFBT2dBQ0lBSkJGR29oQWlBSlFRRnFJZ2xCQlVjTkFBc0w1UVFCREg4akFFR1FBV3NpRFNRQUlBQW9BdEFDSUFFb0FsUWhBQ0FOSVFFRFFDQUFLQUpBSVFjZ0FpNEJJQ0VKSUFFZ0FpNEJBQ0FBS0FJQWJFRU5kRUdBQ0hJaUNpQUFLQUtBQVNBQ0xnRkFiQ0lMUWI2bGYyeHFRUXQxSWc4Z0FDZ0NJQ0FDTGdFUWJDSUZJQUFvQW1BZ0FpNEJNR3dpQmlBQUtBS2dBU0FDTGdGUWJDSU1hbXRCQW5RaUVHczJBbUFnQVNBUElCQnFOZ0lZSUFFZ0J5QUpiRUd4emdCc0lnY2dDMEdoTFd3Z0Ntb2lDV29pQ2lBRklBeHFRYllYYkNJTElBVWdCbXBCRFhScUlnVnJRUXQxTmdKNElBRWdCU0FLYWtFTGRUWUNBQ0FCSUFrZ0Iyc2lCU0FMSUF3Z0JtdEJEWFJxSWdaclFRdDFOZ0pJSUFFZ0JTQUdha0VMZFRZQ01DQUJRUVJxSVFFZ0FFRUVhaUVBSUFKQkFtb2hBaUFJUVFGcUlnaEJCa2NOQUF0QmdBTnJJUUFnRFNFQ1FRQWhDQU5BSUFNZ0NFRUNkR29vQWdBZ0JHb2lBU0FBSUFJb0FoUWlCU0FDS0FJRUlnWnFRYllYYkNJT0lBSW9BZ3dpRENBR2FrRU5kR29pQnlBQ0tBSUFRUTEwUVlDQWlNQUFhaUlKSUFJb0FoQWlDa0doTFd4cUlnc2dBaWdDQ0VHeHpnQnNJZzlxSWhCcVFSSjJRZjhIY1dvdEFBQTZBQUFnQVNBQUlCQWdCMnRCRW5aQi93ZHhhaTBBQURvQUJTQUJJQUFnQmlBRklBeHFhMEVOZENJR0lBcEJ2cVYvYkNBSmFpSUhha0VTZGtIL0IzRnFMUUFBT2dBQklBRWdBQ0FISUFaclFSSjJRZjhIY1dvdEFBQTZBQVFnQVNBQUlBNGdCU0FNYTBFTmRHb2lCU0FMSUE5cklnWnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FTQUFJQVlnQld0QkVuWkIvd2R4YWkwQUFEb0FBeUFDUVJocUlRSWdDRUVCYWlJSVFRWkhEUUFMSUExQmtBRnFKQUFMdndZQkVIOGpBRUhRQVdzaUVTUUFJQUFvQXRBQ0lBRW9BbFFoQUNBUklRRURRQ0FBS0FLZ0FTRUlJQUl1QVZBaENTQUFLQUlnSVEwZ0FpNEJFQ0VQSUFBb0FtQWhDaUFDTGdFd0lSSWdBU0FDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlHSUFBb0FvQUJJQUl1QVVCc0lnc2dBQ2dDd0FFZ0FpNEJZR3dpQlNBQUtBSkFJQUl1QVNCc0lneHFJaEJyUWNIYUFHeHFRUXQxTmdKVUlBRWdFRUhHMFFCc0lBWnFJaEFnQ3lBRmEwRzNPR3dpRXlBRlFZTjdiR3BxSWhRZ0NDQUpiQ0lGSUEwZ0Qyd2lDR3BCb3lkc0lnMGdDaUFTYkNJSklBaHFRZTg3YkNJUElBZ2dDV3RCOHdwc0lnaHJhaUlLYTBFTGRUWUNxQUVnQVNBS0lCUnFRUXQxTmdJQUlBRWdEQ0FMYTBHU0ZHd2lDaUFNUWZIaGZteHFJQkJxSWd3Z0JTQUpha0hocDM5c0lna2dEU0FGUWQ3M0FHeHFhaUlGYTBFTGRUWUNjQ0FCSUFVZ0RHcEJDM1UyQWpnZ0FTQUxRWldLZjJ3Z0Jtb2dDbW9nRTJvaUN5QUlJQTlxSUFscUlnWnJRUXQxTmdLTUFTQUJJQVlnQzJwQkMzVTJBaHdnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0IwRUJhaUlIUVFkSERRQUxRWUFEYXlFQUlCRWhBa0VBSVFzRFFDQURJQXRCQW5ScUtBSUFJQVJxSWdFZ0FDQUNLQUlNSWdZZ0FpZ0NCQ0lIYWtIdk8yd2lEaUFISUFaclFmTUtiQ0lOYXlBQ0tBSVVJZ1VnQjJwQm95ZHNJZzlxSWdvZ0FpZ0NFQ0lISUFJb0FoZ2lER3RCdHpoc0loSWdERUdEZTJ4cUlBSW9BZ0JCRFhSQmdJQ0l3QUJxSWdnZ0RDQUNLQUlJSWdscUlneEJ4dEVBYkdvaUVHb2lFMnBCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnRXlBS2EwRVNka0gvQjNGcUxRQUFPZ0FHSUFFZ0FDQUZJQVpxUWVHbmYyd2lCaUFOSUE1cWFpSU9JQWtnQjJ0QmtoUnNJZzBnQjBHVmluOXNJQWhxYWlBU2FpSUtha0VTZGtIL0IzRnFMUUFBT2dBQklBRWdBQ0FLSUE1clFSSjJRZjhIY1dvdEFBQTZBQVVnQVNBQUlBOGdCVUhlOXdCc2FpQUdhaUlHSUEwZ0NVSHg0WDVzYWlBUWFpSUZha0VTZGtIL0IzRnFMUUFBT2dBQ0lBRWdBQ0FGSUFaclFSSjJRZjhIY1dvdEFBQTZBQVFnQVNBQUlBY2dER3RCd2RvQWJDQUlha0VTZGtIL0IzRnFMUUFBT2dBRElBSkJIR29oQWlBTFFRRnFJZ3RCQjBjTkFBc2dFVUhRQVdva0FBdWRDUUVTZnlNQVFZQUNheUlTSkFBZ0FDZ0MwQUlnQVNnQ1ZDRUJJQkloQUVFSUlRWURRQUovQWtBZ0FpNEJFQ0lJSUFJdkFTQWlCWEpCLy84RGNRMEFRUUFoQlNBQ0x3RXdEUUFnQWk4QlFBMEFJQUl2QVZBTkFDQUNMd0ZnRFFBZ0FpOEJjQTBBSUFBZ0FpNEJBQ0FCS0FJQWJFRUNkQ0lGTmdMQUFTQUFJQVUyQXFBQklBQWdCVFlDZ0FFZ0FDQUZOZ0pnSUFBZ0JUWUNRQ0FBSUFVMkFpQWdBQ0FGTmdJQVFlQUJEQUVMSUFBZ0FTZ0N3QUVnQWk0QllHd2lDU0FCS0FKQUlBWEJiQ0lGYWtIUkltd2lEU0FGUWY0d2JHb2lEaUFDTGdGQUlBRW9Bb0FCYkVFTmRDSUtJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ3RxSWc5cUlnd2dBU2dDSUNBSWJDSUZJQUVvQXVBQklBSXVBWEJzSWdocVFiTkdiQ0lUSUFWQmkrQUFiR29nQlNBQktBS2dBU0FDTGdGUWJDSUhhaUlRSUFFb0FtQWdBaTRCTUd3aUJTQUlhaUlVYWtHaHl3QnNJaFVnRUVHRVoyeHFJaEJxSWhaclFRdDFOZ0xnQVNBQUlBd2dGbXBCQzNVMkFnQWdBQ0FOSUFsQjM0bC9iR29pQ1NBTElBcHJJZzFxSWdvZ0ZTQVVRYnVDZjJ4cUlnc2dCU0FIYWtIOTIzNXNJZ3dnQlVIVXhBRnNhbW9pQld0QkMzVTJBc0FCSUFBZ0JTQUtha0VMZFRZQ0lDQUFJQTBnQ1dzaUJTQU1JQWRCczRNQmJHb2dFR29pQjJ0QkMzVTJBcUFCSUFBZ0JTQUhha0VMZFRZQ1FDQUFJQk1nQ0VHT0UyeHFJQXRxSWdVZ0R5QU9heUlJYWtFTGRUWUNZQ0FJSUFWclFRdDFJUVZCZ0FFTElBQnFJQVUyQWdBZ0FrRUNhaUVDSUFGQkJHb2hBU0FBUVFScUlRQWdCa0VCU3lBR1FRRnJJUVlOQUF0QmdBTnJJUUVnRWlFQ1FRQWhDQU5BSUFJb0FnQkJrSUFCYWlFR0lBTWdDRUVDZEdvb0FnQWdCR29oQUFKL0FrQWdBaWdDQkNJSElBSW9BZ2dpQlhJTkFFRUFJUVVnQWlnQ0RBMEFJQUlvQWhBTkFDQUNLQUlVRFFBZ0FpZ0NHQTBBSUFJb0Fod05BQ0FBSUFFZ0JrRUZka0gvQjNGcUxRQUFJZ1k2QUFZZ0FDQUdPZ0FGSUFBZ0Jqb0FCQ0FBSUFZNkFBTWdBQ0FHT2dBQ0lBQWdCam9BQVNBQUlBWTZBQUJCQnd3QkN5QUFJQUVnQWlnQ0hDSVJJQWRxUWJOR2JDSU5JQWRCaStBQWJHb2dBaWdDRENJSklCRnFJZzRnQnlBQ0tBSVVJZ2RxSWdwcVFhSExBR3dpQ3lBS1FZUm5iR29pQ21vaUR5QUNLQUlZSWd3Z0JXcEIwU0pzSWhNZ0JVSCtNR3hxSWdVZ0FpZ0NFQ0lRSUFacVFRMTBJaFJxSWhWcVFSSjJRZjhIY1dvdEFBQTZBQUFnQUNBQklCVWdEMnRCRW5aQi93ZHhhaTBBQURvQUJ5QUFJQUVnQ3lBT1FidUNmMnhxSWc0Z0J5QUpha0g5MjM1c0lnc2dDVUhVeEFGc2Ftb2lDU0FUSUF4QjM0bC9iR29pRHlBR0lCQnJRUTEwSWdacUlneHFRUkoyUWY4SGNXb3RBQUE2QUFFZ0FDQUJJQXdnQ1d0QkVuWkIvd2R4YWkwQUFEb0FCaUFBSUFFZ0N5QUhRYk9EQVd4cUlBcHFJZ2NnQmlBUGF5SUdha0VTZGtIL0IzRnFMUUFBT2dBQ0lBQWdBU0FHSUFkclFSSjJRZjhIY1dvdEFBQTZBQVVnQUNBQklBMGdFVUdPRTJ4cUlBNXFJZ1lnRkNBRmF5SUZha0VTZGtIL0IzRnFMUUFBT2dBRElBRWdCU0FHYTBFU2RrSC9CM0ZxTFFBQUlRWkJCQXNnQUdvZ0Jqb0FBQ0FDUVNCcUlRSWdDRUVCYWlJSVFRaEhEUUFMSUJKQmdBSnFKQUFMckFnQkVYOGpBRUdBQW1zaUVDUUFJQUFvQXRBQ0lBRW9BbFFoQVNBUUlRQkJDQ0VGQTBBQ2Z3SkFJQUl1QVJBaUJpQUNMd0VnSWdkeVFmLy9BM0VOQUVFQUlRY2dBaThCTUEwQUlBSXZBVUFOQUNBQ0x3RlFEUUFnQWk4QllBMEFJQUl2QVhBTkFDQUFJQUVvQWdBZ0FpNEJBR3dpQnpZQ3dBRWdBQ0FITmdLZ0FTQUFJQWMyQW9BQklBQWdCellDWUNBQUlBYzJBa0FnQUNBSE5nSWdJQUFnQnpZQ0FFSGdBUXdCQ3lBQUlBRW9Bc0FCSUFJdUFXQnNJZ2dnQVNnQ1FDQUh3V3dpQzJvaUJ5QUJLQUtBQVNBQ0xnRkFiQ0lLSUFFb0FnQWdBaTRCQUd3aURHb2lEV29pRGlBQktBTGdBU0FDTGdGd2JDSVBJQUVvQWlBZ0Jtd2lFV29pRWlBQktBS2dBU0FDTGdGUWJDSVRJQUVvQW1BZ0FpNEJNR3dpRkdvaUZXb2lCbXMyQXVBQklBQWdCaUFPYWpZQ0FDQUFJQXNnQ0d0QjZnSnNRUWgxSUFkcklnZ2dEQ0FLYXlJTGFpSUtJQkVnRDJzaURDQVRJQlJySWc1cVFka0RiRUVJZFNJUElBWWdEa0dkQld4QkNIVnFheUlHYXpZQ3dBRWdBQ0FHSUFwcU5nSWdJQUFnQ3lBSWF5SUlJQklnRld0QjZnSnNRUWgxSUFacklnWnJOZ0tnQVNBQUlBWWdDR28yQWtBZ0FDQVBJQXhCbFFKc1FRaDFJQVpxYXlJR0lBMGdCMnNpQjJvMkFtQWdCeUFHYXlFSFFZQUJDeUFBYWlBSE5nSUFJQUpCQW1vaEFpQUJRUVJxSVFFZ0FFRUVhaUVBSUFWQkFVc2dCVUVCYXlFRkRRQUxRWUFEYXlFQklCQWhBa0VBSVFjRFFDQUNLQUlBUVpDQUFXb2hCaUFESUFkQkFuUnFLQUlBSUFScUlRQUNmd0pBSUFJb0FnUWlDU0FDS0FJSUlnVnlEUUJCQUNFRklBSW9BZ3dOQUNBQ0tBSVFEUUFnQWlnQ0ZBMEFJQUlvQWhnTkFDQUNLQUljRFFBZ0FDQUJJQVpCQlhaQi93ZHhhaTBBQUNJRk9nQUdJQUFnQlRvQUJTQUFJQVU2QUFRZ0FDQUZPZ0FESUFBZ0JUb0FBaUFBSUFVNkFBRWdBQ0FGT2dBQVFRY01BUXNnQUNBQklBSW9BaHdpQ2lBSmFpSU1JQUlvQWd3aURTQUNLQUlVSWc1cUlnOXFJZ2dnQWlnQ0dDSVJJQVZxSWdzZ0FpZ0NFQ0lTSUFacUloTnFJaFJxUVFWMlFmOEhjV290QUFBNkFBQWdBQ0FCSUJRZ0NHdEJCWFpCL3dkeGFpMEFBRG9BQnlBQUlBRWdDU0FLYXlJS0lBNGdEV3NpQ1dwQjJRTnNRUWgxSWcwZ0NVR2RCV3hCQ0hVZ0NHcHJJZ2tnQlNBUmEwSHFBbXhCQ0hVZ0Myc2lDQ0FHSUJKcklnWnFJZ1ZxUVFWMlFmOEhjV290QUFBNkFBRWdBQ0FCSUFVZ0NXdEJCWFpCL3dkeGFpMEFBRG9BQmlBQUlBRWdEQ0FQYTBIcUFteEJDSFVnQ1dzaUJTQUdJQWhySWdacVFRVjJRZjhIY1dvdEFBQTZBQUlnQUNBQklBWWdCV3RCQlhaQi93ZHhhaTBBQURvQUJTQUFJQUVnRFNBS1FaVUNiRUVJZFNBRmFtc2lCU0FUSUF0cklnWnFRUVYyUWY4SGNXb3RBQUE2QUFNZ0FTQUdJQVZyUVFWMlFmOEhjV290QUFBaEJVRUVDeUFBYWlBRk9nQUFJQUpCSUdvaEFpQUhRUUZxSWdkQkNFY05BQXNnRUVHQUFtb2tBQXZmQ0FJUGZRVi9Jd0JCZ0FKckloWWtBQ0FBS0FMUUFpQUJLQUpVSVFFZ0ZpRUFRUWdoRkFOQUFuOENRQ0FDTHdFUUloZ2dBaThCSUNJVmNnMEFRUUFoRlNBQ0x3RXdEUUFnQWk4QlFBMEFJQUl2QVZBTkFDQUNMd0ZnRFFBZ0FpOEJjQTBBSUFBZ0FTb0NBQ0FDTGdFQXNwUWlCamdDd0FFZ0FDQUdPQUtnQVNBQUlBWTRBb0FCSUFBZ0JqZ0NZQ0FBSUFZNEFrQWdBQ0FHT0FJZ0lBQWdCamdDQUVIZ0FRd0JDeUFBSUFFcUFnQWdBaTRCQUxLVUlnY2dBU29DZ0FFZ0FpNEJRTEtVSWdpU0lnMGdBU29DUUNBVndiS1VJZ2tnQVNvQ3dBRWdBaTRCWUxLVUlncVNJZ2FTSWdzZ0FTb0NZQ0FDTGdFd3NwUWlEQ0FCS2dLZ0FTQUNMZ0ZRc3BRaURwSWlEeUFCS2dJZ0lCakJzcFFpRUNBQktnTGdBU0FDTGdGd3NwUWlFWklpRXBJaUJaTTRBdUFCSUFBZ0N5QUZramdDQUNBQUlBY2dDSk1pQnlBSklBcVRRL01FdFQrVUlBYVRJZ2lTSWdrZ0RpQU1reUlLSUJBZ0VaTWlDNUpEWG9Qc1A1UWlEQ0FLUTNVOUo4Q1VraUFGa3lJRmt6Z0N3QUVnQUNBSklBV1NPQUlnSUFBZ0J5QUlreUlISUJJZ0Q1TkQ4d1MxUDVRZ0JaTWlCWk00QXFBQklBQWdCeUFGa2pnQ1FDQUFJQTBnQnBNaUJpQU1JQXREMUl1S3Y1U1NJQVdUSWdXU09BSmdJQVlnQlpNaEJrR0FBUXNnQUdvZ0JqZ0NBQ0FDUVFKcUlRSWdBVUVFYWlFQklBQkJCR29oQUNBVVFRRkxJQlJCQVdzaEZBMEFDMEdBQTJzaEFDQVdJUUpCQUNFVUEwQWdBeUFVUVFKMGFpZ0NBQ0FFYWlJQklBQUNmeUFDS2dJQVF3QWdBRVNTSWdjZ0Fpb0NFQ0lJa2lJTklBSXFBZ2dpQ1NBQ0tnSVlJZ3FTSWdhU0lnc2dBaW9DRkNJTUlBSXFBZ3dpRHBJaUR5QUNLZ0lFSWhBZ0Fpb0NIQ0lSa2lJU2tpSUZraUlUaTBNQUFBQlBYUVJBSUJPb0RBRUxRWUNBZ0lCNEMwSC9CM0ZxTFFBQU9nQUFJQUVnQUFKL0lBc2dCWk1pQzR0REFBQUFUMTBFUUNBTHFBd0JDMEdBZ0lDQWVBdEIvd2R4YWkwQUFEb0FCeUFCSUFBQ2Z5QUhJQWlUSWdjZ0NTQUtrMFB6QkxVL2xDQUdreUlJa2lJSklBd2dEcE1pQ2lBUUlCR1RJZ3VTUTE2RDdEK1VJZ3dnQ2tOMVBTZkFsSklnQlpNaUJaSWlDb3REQUFBQVQxMEVRQ0FLcUF3QkMwR0FnSUNBZUF0Qi93ZHhhaTBBQURvQUFTQUJJQUFDZnlBSklBV1RJZ21MUXdBQUFFOWRCRUFnQ2FnTUFRdEJnSUNBZ0hnTFFmOEhjV290QUFBNkFBWWdBU0FBQW44Z0J5QUlreUlISUJJZ0Q1TkQ4d1MxUDVRZ0JaTWlCWklpQ0l0REFBQUFUMTBFUUNBSXFBd0JDMEdBZ0lDQWVBdEIvd2R4YWkwQUFEb0FBaUFCSUFBQ2Z5QUhJQVdUSWdlTFF3QUFBRTlkQkVBZ0I2Z01BUXRCZ0lDQWdIZ0xRZjhIY1dvdEFBQTZBQVVnQVNBQUFuOGdEU0FHa3lJR0lBd2dDMFBVaTRxL2xKSWdCWk1pQlpJaUI0dERBQUFBVDEwRVFDQUhxQXdCQzBHQWdJQ0FlQXRCL3dkeGFpMEFBRG9BQXlBQklBQUNmeUFHSUFXVElnYUxRd0FBQUU5ZEJFQWdCcWdNQVF0QmdJQ0FnSGdMUWY4SGNXb3RBQUE2QUFRZ0FrRWdhaUVDSUJSQkFXb2lGRUVJUncwQUN5QVdRWUFDYWlRQUN4a0FJQUFnQUNnQ0FDZ0NDQkVCQUNBQUVOc0ZRUUVRQWdBTFd3RUJmeUFBS0FJQUlRSWdBVUVBU0FSQUFrQWdBaWdDYkNJQkJFQWdBaWdDYUVFRFNBMEJDeUFBSUFJb0FnZ1JBUUFnQWlnQ2JDRUJDeUFDSUFGQkFXbzJBbXdQQ3lBQklBSW9BbWhNQkVBZ0FDQUNLQUlJRVFFQUN3dFlBUUovSXdCQjRBRnJJZ0VrQUNBQUlBRkJFR29pQWlBQUtBSUFLQUlNRVFJQUlBRWdBallDQUVIQXZ3TW9BZ0FqQUVFUWF5SUFKQUFnQUNBQk5nSU1RZm1KQWlBQkVOWURJQUJCRUdva0FDQUJRZUFCYWlRQUM1TUNBZ1IvQTM0akFFRXdheUlESkFBQ1FBSkFBbjhDUUNBQUtBSUFJZ0lvQWhRaUFFRUFUQTBBSUFBZ0FpZ0NkRW9OQUNBQ0tBSndJQUJCQW5ScURBRUxJQUlvQW5naUJFVU5BU0FBSUFJb0Fud2lCVWdOQVNBQUlBSW9Bb0FCU2cwQklBUWdBQ0FGYTBFQ2RHb0xLQUlBSWdRTkFRc2dBaUFBTmdJWUlBSW9BbkFvQWdBaEJBc2dCQ0VBQWtBQ1FBTkFJQUF0QUFBaUJVVU5BU0FBUVFGcUlRQWdCVUVsUncwQUN5QUFMUUFBUWZNQVJ3MEFJQU1nQWtFWWFqWUNJQ0FCSUFRZ0EwRWdhaEQ3QVF3QkN5QUNLUUlZSVFZZ0Fpa0NJQ0VISUFJcEFpZ2hDQ0FESUFJcEFqQTNBeGdnQXlBSU53TVFJQU1nQnpjRENDQURJQVkzQXdBZ0FTQUVJQU1RK3dFTElBTkJNR29rQUFzVkFDQUFLQUlBSWdCQkFEWUNGQ0FBUVFBMkFtd0x3UUVCQjM4Z0FDZ0N3QUpCQUVvRVFDQUFLQUxjQXlBQktBSUVhaUlCTFFDTUFTRUZJQU1vQWdBaEJpQUJMUUNXQVNJSVFRRnJJUWtEUUNBQUtBSndJZ0ZCQUVvRVFDQUdJQVJCQW5ScUtBSUFJZ01nQVdvaENpQUNJQWRCQW5ScUtBSUFJUUVEUUNBRkJFQWdBeUFCTFFBQUlBVVFVQ0FGYWlFREN5QUJRUUZxSVFFZ0F5QUtTUTBBQ3dzZ0NFRUNUd1JBSUFZZ0JDQUdJQVJCQVdvZ0NTQUFLQUp3RUkwREN5QUhRUUZxSVFjZ0JDQUlhaUlFSUFBb0FzQUNTQTBBQ3dzTG5nRUJCWDhnQUNnQ3dBSkJBRW9FUUNBREtBSUFJUVVEUUNBRklBUWdCU0FFUVFGeVFRRWdBQ2dDY0NJQlFRQktCSDhnQlNBRVFRSjBhaWdDQUNJRElBRnFJUWNnQWlBR1FRSjBhaWdDQUNFQkEwQWdBeUFCTFFBQUlnZzZBQUVnQXlBSU9nQUFJQUZCQVdvaEFTQURRUUpxSWdNZ0Iwa05BQXNnQUNnQ2NBVWdBUXNRalFNZ0JrRUJhaUVHSUFSQkFtb2lCQ0FBS0FMQUFrZ05BQXNMQzRRQkFRUi9JQUFvQXNBQ0lnRkJBRW9FUUNBREtBSUFJUVVEUUNBQUtBSndJZ05CQUVvRVFDQURJQVVnQkVFQ2RDSURhaWdDQUNJQmFpRUdJQUlnQTJvb0FnQWhBd05BSUFFZ0F5MEFBQ0lIT2dBQklBRWdCem9BQUNBRFFRRnFJUU1nQVVFQ2FpSUJJQVpKRFFBTElBQW9Bc0FDSVFFTElBUkJBV29pQkNBQlNBMEFDd3NMQ1FBZ0F5QUNOZ0lBQ3drQUlBTkJBRFlDQUFzZkFRRi9JQUFvQXR3RElnRWdBQ2dDd0FJMkFsd2dBU0FBS0FKME5nSmdDN01DQVFaL0lBQW9BdHdESWdNb0Fsd2lCeUFBS0FMQUFpSUlUZ1JBSUFBb0FpUkJBRW9FUUNBRFFReHFJUW9nQTBIa0FHb2hDeUFEUVRScUlRd2dBQ2dDMkFFaEIwRUFJUWdEUUNBQUlBY2dBU0FJUVFKMElnbHFLQUlBSUFrZ0Myb29BZ0FnQWlnQ0FHeEJBblJxSUFrZ0Ntb2dDU0FNYWlnQ0FCRUhBQ0FIUWRnQWFpRUhJQWhCQVdvaUNDQUFLQUlrU0EwQUN5QUFLQUxBQWlFSUN5QURRUUEyQWx4QkFDRUhDeUFBSUFOQkRHb2dCeUFFSUFVb0FnQWlBVUVDZEdvZ0NDQUhheUlFSUFNb0FtQWlCeUFFSUFkSkd5SUVJQVlnQVdzaUFTQUJJQVJMR3lJQklBQW9BdUFES0FJRUVRWUFJQVVnQlNnQ0FDQUJhallDQUNBRElBTW9BbUFnQVdzMkFtQWdBeUFES0FKY0lBRnFJZ0UyQWx3Z0FDZ0N3QUlnQVV3RVFDQUNJQUlvQWdCQkFXbzJBZ0FMQzlnQkFBSkFJQUFvQXNnRElnRW9BaGdpQWdSQUlBRW9BZ3doQXd3QkN5QUJJQUFnQVNnQ0NDQUJLQUlVSUFFb0FoQkJBQ0FBS0FJRUtBSWNFUW9BSWdNMkFnd2dBU2dDR0NFQ0N5QUFJQU1nQWtFQ2RHb2dCQ0FGS0FJQUlnTkJBblJxSUFFb0FoQWdBbXNpQWlBR0lBTnJJZ01nQWlBRFNSc2lBaUFBS0FKMElBRW9BaFJySWdNZ0FpQURTUnNpQWlBQUtBTGtBeWdDQkJFSEFDQUZJQVVvQWdBZ0FtbzJBZ0FnQVNBQktBSVlJQUpxSWdBMkFoZ2dBQ0FCS0FJUUlnQlBCRUFnQVVFQU5nSVlJQUVnQVNnQ0ZDQUFhallDRkFzTDB3RUJBbjhnQUNnQ3lBTWlCRUVZYWlFSUFrQWdCQ2dDR0NJR0JFQWdCQ2dDRENFSERBRUxJQVFnQUNBRUtBSUlJQVFvQWhRZ0JDZ0NFRUVCSUFBb0FnUW9BaHdSQ2dBaUJ6WUNEQ0FFS0FJWUlRWUxJQUFnQVNBQ0lBTWdCeUFJSUFRb0FoQWdBQ2dDM0FNb0FnUVJEUUFnQmlBRUtBSVlJZ05KQkg4Z0FDQUVLQUlNSUFaQkFuUnFRUUFnQXlBR2F5SUJJQUFvQXVRREtBSUVFUWNBSUFVZ0JTZ0NBQ0FCYWpZQ0FDQUVLQUlZQlNBREN5QUVLQUlRSWdCUEJFQWdCRUVBTmdJWUlBUWdCQ2dDRkNBQWFqWUNGQXNMandFQkJIOGpBRUVRYXlJSEpBQWdBQ2dDeUFNaUNDZ0NFQ0VKSUFVb0FnQWhDaUFIUVFBMkFnd2dBQ0FCSUFJZ0F5QUlLQUlNSUFkQkRHb2dCaUFLYXlJQklBa2dBU0FKU1JzZ0FDZ0MzQU1vQWdRUkRRQWdBQ0FJS0FJTUlBUWdCU2dDQUVFQ2RHb2dCeWdDRENBQUtBTGtBeWdDQkJFSEFDQUZJQVVvQWdBZ0J5Z0NER28yQWdBZ0IwRVFhaVFBQzl3QkFRRi9JQUFvQXNnRElRSUNRQUpBQWtBQ1FBSkFJQUVPQkFBREFnRURDeUFBS0FKVUJFQWdBa0hrQVRZQ0JDQUNLQUlNRFFRZ0FpQUFJQUlvQWdoQkFDQUNLQUlRUVFFZ0FDZ0NCQ2dDSEJFS0FEWUNEQXdFQ3lBQ0lBQW9BdHdES0FJRU5nSUVEQU1MSUFJb0FnaEZCRUFnQUNnQ0FDSUJRUU0yQWhRZ0FDQUJLQUlBRVFFQUN5QUNRZVVCTmdJRURBSUxJQUlvQWdoRkJFQWdBQ2dDQUNJQlFRTTJBaFFnQUNBQktBSUFFUUVBQ3lBQ1FlWUJOZ0lFREFFTElBQW9BZ0FpQVVFRE5nSVVJQUFnQVNnQ0FCRUJBQXNnQWtJQU53SVVDendBSUFBZ0FTQUNLQUlBSUFRZ0JTZ0NBRUVDZEdvZ0FDZ0MzQU1vQWd3UkJ3QWdCU0FGS0FJQVFRRnFOZ0lBSUFJZ0FpZ0NBRUVCYWpZQ0FBdTdBd0VNZnlBQ1FRSjBJZ0lnQVNnQ0NHb29BZ0FoQmlBQktBSUVJQUpxS0FJQUlRY2dBU2dDQUNBQ2FpZ0NBQ0VDSUFNb0FnQWhBU0FBS0FMUUFpRURJQUFvQXR3RElnUW9BaHdoQ0NBRUtBSVlJUXdnQkNnQ0ZDRU5JQVFvQWhBaERpQUFLQUp3SWdSQkFrOEVmeUFFUVFGMklRUURRQ0FOSUFjdEFBQkJBblFpQldvb0FnQWhDU0FNSUFZdEFBQkJBblFpQ21vb0FnQWhDeUFGSUFocUtBSUFJUThnQVNBRElBb2dEbW9vQWdCcUlnb2dBaTBBQUNJRmFpMEFBRG9BQUNBQklBVWdBeUFMSUE5cVFSQjFhaUlMYWkwQUFEb0FBU0FCSUFVZ0F5QUphaUlKYWkwQUFEb0FBaUFCSUFvZ0FpMEFBU0lGYWkwQUFEb0FBeUFCSUFVZ0Myb3RBQUE2QUFRZ0FTQUZJQWxxTFFBQU9nQUZJQUZCQm1vaEFTQUNRUUpxSVFJZ0JrRUJhaUVHSUFkQkFXb2hCeUFFUVFGcklnUU5BQXNnQUNnQ2NBVWdCQXRCQVhFRVFDQU5JQWN0QUFCQkFuUWlBR29vQWdBaEJ5QU1JQVl0QUFCQkFuUWlCbW9vQWdBaEJDQUFJQWhxS0FJQUlRZ2dBU0FDTFFBQUlnQWdBeUFHSUE1cUtBSUFhbW90QUFBNkFBQWdBU0FBSUFNZ0JDQUlha0VRZFdwcUxRQUFPZ0FCSUFFZ0FDQURJQWRxYWkwQUFEb0FBZ3NMN2dFQkEzOGpBRUVRYXlJSEpBQWdCUUovSUFBb0F0d0RJZ01vQWlRRVFDQURRU0JxUVFBZ0JDQUZLQUlBUVFKMGFrRUFRUUVnQXlnQ0tCQ05BeUFEUVFBMkFpUkJBUXdCQ3lBREtBSXNJUWdnQnlBRUlBVW9BZ0FpQ1VFQ2RHb2lCQ2dDQURZQ0NDQUhBbjhnQ0NBR0lBbHJJZ1lnQmlBSVN4c2lCa0VDU1NJSVJRUkFJQVFvQWdRTUFRc2dBMEVCTmdJa0lBTW9BaUFMTmdJTUlBQWdBU0FDS0FJQUlBZEJDR29nQXlnQ0RCRUhBQ0FHUVFJZ0NCc0xJZ1lnQlNnQ0FHbzJBZ0FnQXlBREtBSXNJQVpyTmdJc0lBTW9BaVJGQkVBZ0FpQUNLQUlBUVFGcU5nSUFDeUFIUVJCcUpBQUw1Z1FCRDM4Z0FrRUNkQ0lGSUFFb0FnaHFLQUlBSVFZZ0FTZ0NCQ0FGYWlnQ0FDRUpJQUVvQWdBZ0FrRURkR29pQVNnQ0FDRUhJQUVvQWdRaENpQURLQUlFSVFFZ0F5Z0NBQ0VDSUFBb0F0QUNJUVVnQUNnQzNBTWlBeWdDSENFTUlBTW9BaGdoRFNBREtBSVVJUTRnQXlnQ0VDRVBJQUFvQW5BaUEwRUNUd1IvSUFOQkFYWWhFQU5BSUE0Z0NTMEFBRUVDZENJRGFpZ0NBQ0VMSUEwZ0JpMEFBRUVDZENJSWFpZ0NBQ0VSSUFNZ0RHb29BZ0FoRWlBQ0lBVWdDQ0FQYWlnQ0FHb2lBeUFITFFBQUlnUnFMUUFBT2dBQUlBSWdCQ0FGSUJFZ0VtcEJFSFZxSWdocUxRQUFPZ0FCSUFJZ0JDQUZJQXRxSWd0cUxRQUFPZ0FDSUFJZ0F5QUhMUUFCSWdScUxRQUFPZ0FESUFJZ0JDQUlhaTBBQURvQUJDQUNJQVFnQzJvdEFBQTZBQVVnQVNBRElBb3RBQUFpQkdvdEFBQTZBQUFnQVNBRUlBaHFMUUFBT2dBQklBRWdCQ0FMYWkwQUFEb0FBaUFCSUFNZ0NpMEFBU0lFYWkwQUFEb0FBeUFCSUFRZ0NHb3RBQUE2QUFRZ0FTQUVJQXRxTFFBQU9nQUZJQUZCQm1vaEFTQUtRUUpxSVFvZ0FrRUdhaUVDSUFkQkFtb2hCeUFHUVFGcUlRWWdDVUVCYWlFSklCQkJBV3NpRUEwQUN5QUFLQUp3QlNBREMwRUJjUVJBSUE0Z0NTMEFBRUVDZENJQWFpZ0NBQ0VESUEwZ0JpMEFBRUVDZENJR2FpZ0NBQ0VKSUFBZ0RHb29BZ0FoQ0NBQ0lBVWdCaUFQYWlnQ0FHb2lCaUFITFFBQUlnQnFMUUFBT2dBQUlBSWdBQ0FGSUFnZ0NXcEJFSFZxSWdkcUxRQUFPZ0FCSUFJZ0FDQURJQVZxSWdKcUxRQUFPZ0FDSUFFZ0JpQUtMUUFBSWdCcUxRQUFPZ0FBSUFFZ0FDQUhhaTBBQURvQUFTQUJJQUFnQW1vdEFBQTZBQUlMQ3hzQkFYOGdBQ2dDM0FNaUFVRUFOZ0lrSUFFZ0FDZ0NkRFlDTEF1RkF3RURmd0pBSUFBQ2Z5QUFLQUs4QXlJQktBSUlCRUFnQVVFQU5nSUlJQUJCQUNBQUtBTGtBeWdDQUJFQ0FDQUFRUUlnQUNnQ3lBTW9BZ0FSQWdCQkFnd0JDd0pBSUFBb0FsUkZEUUFnQUNnQ2lBRU5BQUpBSUFBb0FseEZEUUFnQUNnQ2JFVU5BQ0FBSUFFb0FoZzJBdVFESUFGQkFUWUNDQXdCQ3lBQUtBSmtCRUFnQUNBQktBSVVOZ0xrQXd3QkN5QUFLQUlBSWdKQkx6WUNGQ0FBSUFJb0FnQVJBUUFMSUFBZ0FDZ0MyQU1vQWdBUkFRQWdBQ0FBS0FMRUF5Z0NDQkVCQUNBQUtBSkVEUUVnQVNnQ0VFVUVRQ0FBSUFBb0F1QURLQUlBRVFFQUN5QUFJQUFvQXR3REtBSUFFUUVBSUFBb0FsUUVRQ0FBSUFFb0FnZ2dBQ2dDNUFNb0FnQVJBZ0FMSUFCQkEwRUFJQUVvQWdnYklBQW9Bc2dES0FJQUVRSUFRUUFMSUFBb0FzQURLQUlBRVFJQUN3SkFJQUFvQWdnaUFrVU5BQ0FDSUFFb0Fnd2lBellDRENBQ0lBTkJBa0VCSUFFb0FnZ2JhaUlCTmdJUUlBQW9Ba0JGRFFBZ0FDZ0N6QU1vQWhRTkFDQUNRUUpCQVNBQUtBSnNHeUFCYWpZQ0VBc0xMd0VCZnlBQUtBSzhBeUVCSUFBb0FsUUVRQ0FBSUFBb0F1UURLQUlJRVFFQUN5QUJJQUVvQWd4QkFXbzJBZ3dMSEFBZ0FFRUFRUUJCQUNBQklBSWdBeUFBS0FMSUF5Z0NCQkVOQUF0aEFRSi9Ba0FnQUNnQ3dBTWlCQ2dDTUNBRUtBSTBJZ1ZQQkVBZ0FDQUVRUWhxSUFBb0FzUURLQUlNRVFNQVJRMEJJQVJCQURZQ01DQUVLQUkwSVFVTElBQWdCRUVJYWlBRVFUQnFJQVVnQVNBQ0lBTWdBQ2dDeUFNb0FnUVJEUUFMQzUwSEFROS9Ba0FnQUNnQ3dBTWlCQ2dDT0VVRVFDQUFJQVFnQkNnQ1JFRUNkR29vQWp3Z0FDZ0N4QU1vQWd3UkF3QkZEUUVnQkVFQk5nSTRJQVFnQkNnQ1RFRUJhallDVEFzQ1FBSkFBa0FnQkNnQ1NBNERBUUlBQXdzZ0FDQUVJQVFvQWtSQkFuUnFLQUk4SUFSQk1Hb2dCQ2dDTkNBQklBSWdBeUFBS0FMSUF5Z0NCQkVOQUNBRUtBSXdJQVFvQWpSSkRRSWdCRUVBTmdKSUlBSW9BZ0FnQTA4TkFnc2dCRUVBTmdJd0lBUWdBQ2dDeUFJaUMwRUJhellDTkFKQUlBUW9Ba3dnQUNnQ3pBSkhEUUFnQUNnQ0pDSVFRUUJNRFFBZ0FDZ0N3QU1pRENBTUtBSkVRUUowYWlFUklBQW9BdGdCSVFnRFFDQUlLQUl3SUFnb0FpZ2dDQ2dDREd3aUJYQWlCaUFGSUFZYklRWWdCU0FMYlNFRklBbEZCRUFnRENBR1FRRnJJQVZ0UVFGcU5nSTBDd0pBSUFWQkFFd05BRUVCSUFWQkFYUWlCeUFIUVFGTUd5SUtRUWR4SVEwZ0VTZ0NQQ0FKUVFKMGFpZ0NBQ0FHUVFKMGFpSU9RUVJyS0FJQUlRVkJBQ0VQUVFBaEJpQUhRUWhPQkVBZ0NrSDQvLy8vQjNFaEVrRUFJUW9EUUNBT0lBWkJBblJxSWdjZ0JUWUNBQ0FISUFVMkFnUWdCeUFGTmdJSUlBY2dCVFlDRENBSElBVTJBaEFnQnlBRk5nSVVJQWNnQlRZQ0dDQUhJQVUyQWh3Z0JrRUlhaUVHSUFwQkNHb2lDaUFTUncwQUN3c2dEVVVOQUFOQUlBNGdCa0VDZEdvZ0JUWUNBQ0FHUVFGcUlRWWdEMEVCYWlJUElBMUhEUUFMQ3lBSVFkZ0FhaUVJSUFsQkFXb2lDU0FRUncwQUN3c2dCRUVCTmdKSUN5QUFJQVFnQkNnQ1JFRUNkR29vQWp3Z0JFRXdhaUFFS0FJMElBRWdBaUFESUFBb0FzZ0RLQUlFRVEwQUlBUW9BakFnQkNnQ05Fa05BQ0FBS0FMSUFpRUJBa0FnQkNnQ1RFRUJSdzBBSUFBb0FpUWlCMEVBVEEwQUlBRkJBbW9oRENBQlFRRnFJUTBnQUNnQ3dBTWhCaUFBS0FMWUFTRUlRUUFoQ1FOQUlBZ29BaWdnQ0NnQ0RHd2dBVzBpQWtFQVNnUkFJQWxCQW5RaUFDQUdLQUpBYWlnQ0FDRURJQVlvQWp3Z0FHb29BZ0FoQlNBQ0lBeHNJUTRnQWlBTmJDRVBRUUFoQUFOQUlBVWdBQ0FDYTBFQ2RDSUthaUFGSUFBZ0QycEJBblFpQzJvb0FnQTJBZ0FnQXlBS2FpQURJQXRxS0FJQU5nSUFJQVVnQUNBT2FrRUNkQ0lLYWlBRklBQkJBblFpQzJvb0FnQTJBZ0FnQXlBS2FpQURJQXRxS0FJQU5nSUFJQUJCQVdvaUFDQUNSdzBBQ3dzZ0NFSFlBR29oQ0NBSlFRRnFJZ2tnQjBjTkFBc0xJQVJCQURZQ09DQUVRUUkyQWtnZ0JDQUJRUUpxTmdJMElBUWdBVUVCYWpZQ01DQUVJQVFvQWtSQkFYTTJBa1FMQzZvSEFSSi9JQUFvQXNBRElRWUNRQUpBQWtBZ0FRNERBQUlCQWdzZ0FDZ0MzQU1vQWdnRVFDQUdRZGtCTmdJRUlBQW9BaVFpRUVFQVNnUkFJQUFvQXNnQ0lnNUJBbXNoRVNBT1FRSnFJUklnQmtFSWFpRVRJQUFvQXRnQklRMERRQ0FUSUE5QkFuUWlBR29vQWdBaEFTQUdLQUpBSUFCcUtBSUFJUUlnQmlnQ1BDQUFhaWdDQUNFSEFrQWdEU2dDS0NBTktBSU1iQ0FPYlNJRklCSnNJZ2xCQUV3TkFFRUFJUVJCQUNFQUlBbEJCRThFUUNBSlFmei8vLzhIY1NFS1FRQWhEQU5BSUFJZ0FFRUNkQ0lEYWlBQklBTnFLQUlBSWdnMkFnQWdBeUFIYWlBSU5nSUFJQUlnQTBFRWNpSUlhaUFCSUFocUtBSUFJZ3MyQWdBZ0J5QUlhaUFMTmdJQUlBSWdBMEVJY2lJSWFpQUJJQWhxS0FJQUlnczJBZ0FnQnlBSWFpQUxOZ0lBSUFJZ0EwRU1jaUlEYWlBQklBTnFLQUlBSWdnMkFnQWdBeUFIYWlBSU5nSUFJQUJCQkdvaEFDQU1RUVJxSWd3Z0NrY05BQXNMSUFsQkEzRWlDVVVOQUFOQUlBSWdBRUVDZENJRGFpQUJJQU5xS0FJQUlndzJBZ0FnQXlBSGFpQU1OZ0lBSUFCQkFXb2hBQ0FFUVFGcUlnUWdDVWNOQUFzTEFrQWdCVUVBVEEwQVFRRWdCVUVCZENJQUlBQkJBVXdiSWdSQkFYRWdCU0FSYkNFRElBVWdEbXdoQ1VFQUlRQWdCRUVCUndSQUlBUkIvdi8vL3dkeElRaEJBQ0VFQTBBZ0FpQUFJQU5xUVFKMElncHFJQUVnQUNBSmFrRUNkQ0lMYWlnQ0FEWUNBQ0FDSUF0cUlBRWdDbW9vQWdBMkFnQWdBaUFBUVFGeUlnb2dBMnBCQW5RaUMyb2dBU0FKSUFwcVFRSjBJZ3BxS0FJQU5nSUFJQUlnQ21vZ0FTQUxhaWdDQURZQ0FDQUFRUUpxSVFBZ0JFRUNhaUlFSUFoSERRQUxDd1JBSUFJZ0FDQURha0VDZENJRWFpQUJJQUFnQ1dwQkFuUWlBR29vQWdBMkFnQWdBQ0FDYWlBQklBUnFLQUlBTmdJQUN5QUhLQUlBSVFKQkFDRUFRUUFoQVNBRlFRUlBCRUFnQlVIOC8vLy9CM0VoQTBFQUlRUURRQ0FISUFFZ0JXdEJBblJxSUFJMkFnQWdCeUFCUVFGeUlBVnJRUUowYWlBQ05nSUFJQWNnQVVFQ2NpQUZhMEVDZEdvZ0FqWUNBQ0FISUFGQkEzSWdCV3RCQW5ScUlBSTJBZ0FnQVVFRWFpRUJJQVJCQkdvaUJDQURSdzBBQ3dzZ0JVRURjU0lFUlEwQUEwQWdCeUFCSUFWclFRSjBhaUFDTmdJQUlBRkJBV29oQVNBQVFRRnFJZ0FnQkVjTkFBc0xJQTFCMkFCcUlRMGdEMEVCYWlJUElCQkhEUUFMQ3lBR1FRQTJBa3dnQmtJQU53SkVJQVpCQURZQ09BOExJQVpCMmdFMkFnUWdCaUFHS0FJME5nSXdEd3NnQmtIYkFUWUNCQThMSUFBb0FnQWlBVUVETmdJVUlBQWdBU2dDQUJFQkFBdWFDd0V0ZnlNQVFZQUJheUlISkFBZ0FDZ0N6QUpCQVdzaEd5QUFLQUxFQXlFY0FuOENRQU5BSUFBb0FwQUJJZ1FnQUNnQ21BRWlCa29OQVNBQUtBTE1BeUlNS0FJVURRRWdCQ0FHUmdSQUlBQW9BcFFCSUFBb0Fwd0JJQUFvQXB3RFJXcExEUUlMSUFBZ0RDZ0NBQkVBQUEwQUMwRUFEQUVMSUFBb0FpUkJBRW9FUUNBY1FjZ0FhaUVkSUFBb0F0Z0JJUWdEUUFKQUlBZ29BalJGRFFBQ2Z5QWJJQUFvQXB3QkloTkxCRUFnQ0NnQ0RDSUVRUUYwSVFvZ0JBd0JDeUFJS0FJZ0lBZ29BZ3dpQkhBaUJpQUVJQVliSWdvTElSUUNmeUFUQkVBZ0FDQWRJQTlCQW5ScUtBSUFJQVFnRTBFQmEyd2dCQ0FLYWtFQUlBQW9BZ1FvQWlBUkNnQWdDQ2dDREVFQ2RHb01BUXNnQUNBZElBOUJBblJxS0FJQVFRQWdDa0VBSUFBb0FnUW9BaUFSQ2dBTElTc2dGRUVBVEEwQUlBOUJBblFpRENBQUtBTFlBMm9vQWdRaExDQVVRUUZySVMwZ0hDZ0NjQ0FQUVJoc2FpRVFJQWdvQWxBaUJDOEJCQ0lHUVFoMElSNGdCa0VIZENFZklBUXZBUklpQmtFSWRDRWdJQVpCQjNRaElTQUVMd0VBSWdaQkJXd2hMaUFFTHdFZ0lndEJDSFFoSWlBTFFRZDBJU01nQmtFSmJDRWtJQVF2QVJBaUMwRUlkQ0VsSUF0QkIzUWhKaUFFTHdFQ0lnUkJDSFFoSnlBRVFRZDBJU2dnQmtFa2JDRXBJQUVnREdvb0FnQWhGVUVBSVJFRFFDQXJJQkZCQW5ScUlnUW9BZ0FpQ2lFT0lCRWdFM0lFUUNBRVFRUnJLQUlBSVE0TElBZ29BaHhCQVdzaEtrRUFJUllDZnlBVElCdFBCRUFnQ2lBUklDMUdEUUVhQ3lBRUtBSUVDeUlYTGdFQUloZ2hCQ0FLTGdFQUlnc2hCaUFPTGdFQUloa2hERUVBSVJvRFFDQU1JUVVnR1NFTUlBWWhDU0FMSVFZZ0JDRU5JQmdoQkNBSElBcEJnQUVRYXhvZ0ZpQXFTUVJBSUJjdUFZQUJJUmdnRGk0QmdBRWhHU0FLTGdHQUFTRUxDd0pBSUJBb0FnUWlBMFVOQUNBSEx3RUNEUUFnQndKL0lDa2dDU0FMYTJ3aUFrRUFUZ1JBSUFJZ0tHb2dKMjRpQWlBRFFRQk1EUUVhSUFKQkFTQURkQ0lEUVFGcklBSWdBMGdiREFFTFFRQWdLQ0FDYXlBbmJpSUNRUUVnQTNRaUVrRUJheUFDSUJKSUd5QUNJQU5CQUVvYmF3czdBUUlMQWtBZ0VDZ0NDQ0lEUlEwQUlBY3ZBUkFOQUNBSEFuOGdLU0FNSUFScmJDSUNRUUJPQkVBZ0FpQW1haUFsYmlJQ0lBTkJBRXdOQVJvZ0FrRUJJQU4wSWdOQkFXc2dBaUFEU0JzTUFRdEJBQ0FtSUFKcklDVnVJZ0pCQVNBRGRDSVNRUUZySUFJZ0VrZ2JJQUlnQTBFQVNodHJDenNCRUFzQ1FDQVFLQUlNSWdORkRRQWdCeThCSUEwQUlBY0NmeUFrSUF3Z0JrRUJkR3NnQkdwc0lnSkJBRTRFUUNBQ0lDTnFJQ0p1SWdJZ0EwRUFUQTBCR2lBQ1FRRWdBM1FpQTBFQmF5QUNJQU5JR3d3QkMwRUFJQ01nQW1zZ0ltNGlBa0VCSUFOMEloSkJBV3NnQWlBU1NCc2dBaUFEUVFCS0cyc0xPd0VnQ3dKQUlCQW9BaEFpQTBVTkFDQUhMd0VTRFFBZ0J3Si9JQzRnQlNBTklCbHFheUFZYW13aUJVRUFUZ1JBSUFVZ0lXb2dJRzRpQlNBRFFRQk1EUUVhSUFWQkFTQURkQ0lOUVFGcklBVWdEVWdiREFFTFFRQWdJU0FGYXlBZ2JpSUZRUUVnQTNRaURVRUJheUFGSUExSUd5QUZJQU5CQUVvYmF3czdBUklMQWtBZ0VDZ0NGQ0lGUlEwQUlBY3ZBUVFOQUNBSEFuOGdKQ0FKSUFaQkFYUnJJQXRxYkNJSlFRQk9CRUFnQ1NBZmFpQWViaUlKSUFWQkFFd05BUm9nQ1VFQklBVjBJZ1ZCQVdzZ0JTQUpTaHNNQVF0QkFDQWZJQWxySUI1dUlnbEJBU0FGZENJTlFRRnJJQWtnRFVnYklBa2dCVUVBU2h0ckN6c0JCQXNnQUNBSUlBY2dGU0FhSUN3UkJnQWdGMEdBQVdvaEZ5QU9RWUFCYWlFT0lBcEJnQUZxSVFvZ0NDZ0NKQ0FhYWlFYUlCWkJBV29pRmlBcVRRMEFDeUFWSUFnb0FpaEJBblJxSVJVZ0VVRUJhaUlSSUJSSERRQUxDeUFJUWRnQWFpRUlJQTlCQVdvaUR5QUFLQUlrU0EwQUN3c2dBQ0FBS0FLY0FVRUJhaUlCTmdLY0FVRURRUVFnQVNBQUtBTE1Ba2tiQ3lBSFFZQUJhaVFBQzRvR0FSVi9JQUFvQXN3Q0lRUUNRQ0FBS0FMRUF5SUZLQUlZSWdnZ0JTZ0NIQ0lDU0FSQUlBUkJBV3NoRVNBQUtBTG9Ba0VCYXlFTklBQkIyQUpxSVJJZ0JVRWdhaUVMSUFVb0FoUWhCZ05BSUFZZ0RVMEVRQU5BSUFBb0FyUURCRUFnQ3lnQ0FFRUFJQUFvQXZBQ1FRZDBFRkFhQ3lBQUlBc2dBQ2dDMUFNb0FnUVJBd0JGRFFRZ0FDZ0MxQUlpQWtFQVNnUkFRUUFoQjBFQUlRNERRQUpBSUJJZ0RrRUNkR29vQWdBaUF5Z0NORVVFUUNBREtBSkFJQWRxSVFjTUFRc2dBeWdDUENJRVFRQk1EUUFnQXlnQ1JDQUdiQ0VUSUFNb0FnUkJBblFpQWlBQUtBTFlBMm9vQWdRaER5QUJJQUpxS0FJQUlBTW9BaWdpQWlBSWJFRUNkR29oQ1VFQklBTkJPRUhJQUNBR0lBMUpHMm9vQWdBaURDQU1RUUZNR3lJS1FmNy8vLzhIY1NFVUlBcEJBWEVoRlVFQUlRb0RRQUpBQWtBZ0VTQUFLQUtVQVUwRVFDQURLQUpNSUFnZ0NtcE1EUUlnREVFQVNnMEJEQUlMSUF4QkFFd05BUXRCQUNFRUlCTWhBa0VBSVJBZ0RFRUNUZ1JBQTBBZ0FDQURJQXNnQkNBSGFrRUNkR29pRmlnQ0FDQUpJQUlnRHhFR0FDQUFJQU1nRmlnQ0JDQUpJQU1vQWlRZ0Ftb2lBaUFQRVFZQUlBUkJBbW9oQkNBREtBSWtJQUpxSVFJZ0VFRUNhaUlRSUJSSERRQUxDeUFWQkVBZ0FDQURJQXNnQkNBSGFrRUNkR29vQWdBZ0NTQUNJQThSQmdBTElBTW9BandoQkNBREtBSW9JUUlMSUFrZ0FrRUNkR29oQ1NBREtBSTRJQWRxSVFjZ0NrRUJhaUlLSUFSSURRQUxJQUFvQXRRQ0lRSUxJQTVCQVdvaURpQUNTQTBBQ3dzZ0JrRUJhaUlHSUExTkRRQUxJQVVvQWh3aEFndEJBQ0VHSUFWQkFEWUNGQ0FJUVFGcUlnZ2dBa2dOQUFzZ0FDZ0N6QUloQkFzZ0FDQUFLQUtjQVVFQmFqWUNuQUVnQUNBQUtBS1VBVUVCYWlJQ05nS1VBU0FDSUFSSkJFQWdBQ2dDeEFNaEFRSkFJQUFvQXRRQ1FRSk9CRUFnQVVFQk5nSWNEQUVMSUFBb0F0Z0NJUUFnQkVFQmF5QUNTd1JBSUFFZ0FDZ0NERFlDSEF3QkN5QUJJQUFvQWt3MkFod0xJQUZDQURjQ0ZFRUREd3NnQUNBQUtBTE1BeWdDREJFQkFFRUVEd3NnQlNBR05nSVVJQVVnQ0RZQ0dFRUFDOWNGQVJSL0l3QkJFR3NpQ0NRQUlBQW9Bc1FESVFNZ0FDZ0MxQUpCQUVvRVFDQURRY2dBYWlFQ0lBQkIyQUpxSVFVRFFDQUlJQUZCQW5RaUJHb2dBQ0FDSUFRZ0JXb29BZ0FpQkNnQ0JFRUNkR29vQWdBZ0JDZ0NEQ0lFSUFBb0FwUUJiQ0FFUVFFZ0FDZ0NCQ2dDSUJFS0FEWUNBQ0FCUVFGcUlnRWdBQ2dDMUFKSURRQUxDd0ovSUFNb0FoZ2lCQ0FES0FJY0lnSklCRUFnQTBFZ2FpRUpJQUJCMkFKcUlRNGdBQ2dDNkFJaEFTQURLQUlVSVFVRFFDQUJJQVZMQkVBRFFFRUFJUXBCQUNFQ0lBQW9BdFFDSWc5QkFFb0VRQU5BSUE0Z0NrRUNkQ0lCYWlnQ0FDSUdLQUk4SWhCQkFFb0VRQ0FCSUFocUtBSUFJQVJCQW5ScUlSRWdCaWdDT0NJR1Fmei8vLzhIY1NFU0lBWkJBM0VoREVFQUlRc2dCU0FHYkVFSGRDRVRJQVpCQkVraEZBTkFBa0FnQmtFQVRBMEFJQkVnQzBFQ2RHb29BZ0FnRTJvaEFVRUFJUTBnRkVVRVFBTkFJQWtnQWtFQ2RHb2lCeUFCTmdJQUlBY2dBVUdBQVdvMkFnUWdCeUFCUVlBQ2FqWUNDQ0FISUFGQmdBTnFOZ0lNSUFKQkJHb2hBaUFCUVlBRWFpRUJJQTFCQkdvaURTQVNSdzBBQ3d0QkFDRUhJQXhGRFFBRFFDQUpJQUpCQW5ScUlBRTJBZ0FnQWtFQmFpRUNJQUZCZ0FGcUlRRWdCMEVCYWlJSElBeEhEUUFMQ3lBTFFRRnFJZ3NnRUVjTkFBc0xJQXBCQVdvaUNpQVBSdzBBQ3dzZ0FDQUpJQUFvQXRRREtBSUVFUU1BUlFSQUlBTWdCVFlDRkNBRElBUTJBaGhCQUF3RkN5QUZRUUZxSWdVZ0FDZ0M2QUlpQVVrTkFBc2dBeWdDSENFQ0MwRUFJUVVnQTBFQU5nSVVJQVJCQVdvaUJDQUNTQTBBQ3dzZ0FDQUFLQUtVQVVFQmFpSUROZ0tVQVNBQUtBTE1BaUlDSUFOTEJFQWdBQ2dDeEFNaEFRSkFJQUFvQXRRQ1FRSk9CRUFnQVVFQk5nSWNEQUVMSUFBb0F0Z0NJUUFnQWtFQmF5QURTd1JBSUFFZ0FDZ0NERFlDSEF3QkN5QUJJQUFvQWt3MkFod0xJQUZDQURjQ0ZFRUREQUVMSUFBZ0FDZ0N6QU1vQWd3UkFRQkJCQXNnQ0VFUWFpUUFDNjREQVExL0lBQW9Bc3dDUVFGcklRc2dBQ2dDeEFNaEF3SkFBMEFnQUNnQ2tBRWlCQ0FBS0FLWUFTSUNUZ1JBSUFJZ0JFY05BaUFBS0FLVUFTQUFLQUtjQVVzTkFnc2dBQ0FBS0FMTUF5Z0NBQkVBQUEwQUMwRUFEd3NnQUNnQ0pFRUFTZ1JBSUFOQnlBQnFJUXdnQUNnQzJBRWhBZ05BQWtBZ0FpZ0NORVVOQUNBQUlBd2dCVUVDZENJRGFpZ0NBQ0FDS0FJTUlnUWdBQ2dDbkFGc0lBUkJBQ0FBS0FJRUtBSWdFUW9BSVEwQ2Z5QUxJQUFvQXB3QlN3UkFJQUlvQWd3TUFRc2dBaWdDSUNBQ0tBSU1JZ1J3SWdZZ0JDQUdHd3NpQmtFQVRBMEFJQUFvQXRnRElBTnFLQUlFSVE0Z0FTQURhaWdDQUNFSElBSW9BaHdoQTBFQUlRZ0RRRUVBSVFRZ0F3UkFJQTBnQ0VFQ2RHb29BZ0FoQTBFQUlRbEJBQ0VLQTBBZ0FDQUNJQU1nQnlBSklBNFJCZ0FnQTBHQUFXb2hBeUFDS0FJa0lBbHFJUWtnQ2tFQmFpSUtJQUlvQWh3aUJFa05BQXNMSUFjZ0FpZ0NLRUVDZEdvaEJ5QUVJUU1nQ0VFQmFpSUlJQVpIRFFBTEN5QUNRZGdBYWlFQ0lBVkJBV29pQlNBQUtBSWtTQTBBQ3dzZ0FDQUFLQUtjQVVFQmFpSUJOZ0tjQVVFRFFRUWdBU0FBS0FMTUFra2JDMTBCQW44Z0FFRUFOZ0tVQVNBQUtBTEVBeUVCQWtBZ0FDZ0MxQUpCQWs0RVFDQUJRUUUyQWh3TUFRc2dBQ2dDMkFJaEFpQUFLQUxNQWtFQlJ3UkFJQUVnQWlnQ0REWUNIQXdCQ3lBQklBSW9Ba3cyQWh3TElBRkNBRGNDRkF2SEFnRUpmeUFBS0FMRUF5SUJLQUlRQkVBZ0FRSi9Ba0FnQUNnQ1VFVU5BQ0FBS0FMZ0FVVU5BQ0FBS0FLZ0FVVU5BQ0FCS0FKd0lnSkZCRUFnQVNBQVFRRWdBQ2dDSkVFWWJDQUFLQUlFS0FJQUVRUUFJZ0kyQW5BTElBQW9BaVJCQUV3TkFDQUFLQUxZQVNFREEwQWdBeWdDVUNJQlJRMEJJQUV2QVFCRkRRRWdBUzhCQWtVTkFTQUJMd0VRUlEwQklBRXZBU0JGRFFFZ0FTOEJFa1VOQVNBQkx3RUVSUTBCSUFBb0FxQUJJQVZCQ0hScUlnRW9BZ0JCQUVnTkFTQUNJQUVvQWdRaUJqWUNCQ0FDSUFFb0FnZ2lCellDQ0NBQ0lBRW9BZ3dpQ0RZQ0RDQUNJQUVvQWhBaUNUWUNFQ0FDSUFFb0FoUWlBVFlDRkVFQklBUWdBU0FKY2lBSUlBWWdCM0p5Y2hzaEJDQURRZGdBYWlFRElBSkJHR29oQWlBRlFRRnFJZ1VnQUNnQ0pFZ05BQXRCMXdFZ0JBMEJHZ3RCMHdFTE5nSU1DeUFBUVFBMkFwd0JDN3dMQVJWL0l3QkJNR3NpQkNRQUlBQW9BdFFESVFZQ2Z3SkFJQUFvQXBnQ1JRMEFJQVlvQWl3TkFDQUFLQUxRQXlJRElBTW9BaGdnQmlnQ0VFRUliV28yQWhnZ0JrRUFOZ0lRUVFBZ0FDQURLQUlJRVFBQVJRMEJHaUFBS0FMVUFrRUFTZ1JBSUFaQkdHb2hBa0VBSVFNRFFDQUNJQU5CQW5ScVFRQTJBZ0FnQTBFQmFpSURJQUFvQXRRQ1NBMEFDd3NnQmtFQU5nSVVJQVlnQUNnQ21BSTJBaXdnQUNnQ3VBTU5BQ0FHUVFBMkFpZ0xJQVlvQWloRkJFQWdBQ2dDdEFNaERpQUFLQUt3QXlFUElBUWdBRFlDTENBRUlBQW9BaGdpQnlnQ0FDSUNOZ0ljSUFRZ0J5Z0NCQ0lJTmdJZ0lBWW9BaEFoQXlBR0tBSU1JUVVnQkNBR0tBSWtOZ0lZSUFRZ0Jpa0NIRGNERUNBRUlBWXBBaFEzQXdnZ0FDZ0M4QUpCQUVvRVFDQUFRZlFDYWlFUUlBWkJ0QUZxSVJFZ0JrR01BV29oRWlBR1FlUUFhaUVUSUFSQkNHcEJCSEloRkFOQUlCTWdERUVDZENJSGFpZ0NBQ0VDSUFFZ0Iyb29BZ0FoQ2dKL0FrQUNmd0pBSUFOQkIwb05BRUVBSUFSQkhHb2dCU0FEUVFBUWVFVU5CeG9nQkNnQ0pDRUZJQVFvQWlnaUEwRUlUZzBBUVFFTUFRc2dBaUFGSUFOQkNHdDFRZjhCY1NJSVFRSjBhaWdDa0FFaUNRMEJRUWtMSVFsQkFDQUVRUnhxSUFVZ0F5QUNJQWtRMHdFaUFrRUFTQTBGR2lBRUtBSWtJUVVnQkNnQ0tBd0JDeUFDSUFocVFaQUphaTBBQUNFQ0lBTWdDV3NMSVFNZ0J5QVNhaWdDQUNFSkFrQUNRQ0FISUJGcUtBSUFJZ3NFUUNBQ0JIOGdBaUFEU2dSQVFRQWdCRUVjYWlBRklBTWdBaEI0UlEwSUdpQUVLQUlrSVFVZ0JDZ0NLQ0VEQ3lBQ1FRSjBJZ2hCd0pBRGFpZ0NBQ0lOSUFVZ0F5QUNheUlEZFhFaUFpQU5RUUFnQWlBSVFieVFBMm9vQWdCTUcyc0ZRUUFMSVFJZ0ZDQUhJQkJxS0FJQVFRSjBhaUlISUFjb0FnQWdBbW9pQWpZQ0FDQUtJQUk3QVFCQkFTRUhJQXRCQWtnTkFTQUpRWkFKYWlFTklBbEJrQUZxSVJVRFFBSi9Ba0FDZndKQUlBTkJCMG9OQUVFQUlBUkJIR29nQlNBRFFRQVFlRVVOQ3hvZ0JDZ0NKQ0VGSUFRb0FpZ2lBMEVJVGcwQVFRRU1BUXNnRlNBRklBTkJDR3QxUWY4QmNTSUNRUUowYWlnQ0FDSUlEUUZCQ1FzaEFrRUFJQVJCSEdvZ0JTQURJQWtnQWhEVEFTSUNRUUJJRFFrYUlBUW9BaVFoQlNBRUtBSW9EQUVMSUFJZ0RXb3RBQUFoQWlBRElBaHJDeUVESUFKQkJIWWhDQUpBSUFKQkQzRWlBZ1JBSUFJZ0Ewb0VRRUVBSUFSQkhHb2dCU0FESUFJUWVFVU5DaG9nQkNnQ0pDRUZJQVFvQWlnaEF3c2dDaUFQSUFjZ0NHb2lCMEVDZEdvb0FnQkJBWFJxSUFKQkFuUWlDRUhBa0FOcUtBSUFJaFlnQlNBRElBSnJJZ04xY1NJQ0lCWkJBQ0FDSUFoQnZKQURhaWdDQUV3YmF6c0JBQXdCQ3lBSVFROUhEUVFnQjBFUGFpRUhDeUFIUVFGcUlnY2dDMGdOQUFzTUFRdEJBU0VISUFKRkRRQWdBaUFEU2dSL1FRQWdCRUVjYWlBRklBTWdBaEI0UlEwR0dpQUVLQUlrSVFVZ0JDZ0NLQVVnQXdzZ0Ftc2hBd3NnQnlBT1NnMEFJQWxCa0FscUlRb2dDVUdRQVdvaEN3TkFBbjhDUUFKL0FrQWdBMEVIU2cwQVFRQWdCRUVjYWlBRklBTkJBQkI0UlEwSkdpQUVLQUlrSVFVZ0JDZ0NLQ0lEUVFoT0RRQkJBUXdCQ3lBTElBVWdBMEVJYTNWQi93RnhJZ0pCQW5ScUtBSUFJZ2dOQVVFSkN5RUNRUUFnQkVFY2FpQUZJQU1nQ1NBQ0VOTUJJZ0pCQUVnTkJ4b2dCQ2dDSkNFRklBUW9BaWdNQVFzZ0FpQUthaTBBQUNFQ0lBTWdDR3NMSVFNZ0FrRUVkaUVJQWtBZ0FrRVBjU0lDQkVBZ0FpQURTZ1IvUVFBZ0JFRWNhaUFGSUFNZ0FoQjRSUTBJR2lBRUtBSWtJUVVnQkNnQ0tBVWdBd3NnQW1zaEF3d0JDeUFJUVE5SERRSUxJQWNnQ0dwQkFXb2lCeUFPVEEwQUN3c2dERUVCYWlJTUlBQW9BdkFDU0EwQUN5QUFLQUlZSVFjZ0JDZ0NJQ0VJSUFRb0Fod2hBZ3NnQnlBSU5nSUVJQWNnQWpZQ0FDQUdJQU0yQWhBZ0JpQUZOZ0lNSUFZZ0JDZ0NHRFlDSkNBR0lBUXBBeEEzQWh3Z0JpQUVLUU1JTndJVUN5QUdJQVlvQWl4QkFXczJBaXhCQVFzZ0JFRXdhaVFBQzdNTEFSTi9Jd0JCTUdzaUJDUUFJQUFvQXRRRElRY0Nmd0pBSUFBb0FwZ0NSUTBBSUFjb0Fpd05BQ0FBS0FMUUF5SUNJQUlvQWhnZ0J5Z0NFRUVJYldvMkFoZ2dCMEVBTmdJUVFRQWdBQ0FDS0FJSUVRQUFSUTBCR2lBQUtBTFVBa0VBU2dSQUlBZEJHR29oQlVFQUlRSURRQ0FGSUFKQkFuUnFRUUEyQWdBZ0FrRUJhaUlDSUFBb0F0UUNTQTBBQ3dzZ0IwRUFOZ0lVSUFjZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBSFFRQTJBaWdMSUFjb0FpaEZCRUFnQkNBQU5nSXNJQVFnQUNnQ0dDSURLQUlBSWdnMkFod2dCQ0FES0FJRUlnWTJBaUFnQnlnQ0VDRUNJQWNvQWd3aEJTQUVJQWNvQWlRMkFoZ2dCQ0FIS1FJY053TVFJQVFnQnlrQ0ZEY0RDQ0FBS0FMd0FrRUFTZ1JBSUFCQjlBSnFJUTRnQjBHMEFXb2hEeUFIUVl3QmFpRVFJQWRCNUFCcUlSRWdCRUVJYWtFRWNpRVNBMEFnRVNBTlFRSjBJZ2xxS0FJQUlRTWdBU0FKYWlnQ0FDRUxBbjhDUUFKL0FrQWdBa0VIU2cwQVFRQWdCRUVjYWlBRklBSkJBQkI0UlEwSEdpQUVLQUlrSVFVZ0JDZ0NLQ0lDUVFoT0RRQkJBUXdCQ3lBRElBVWdBa0VJYTNWQi93RnhJZ1pCQW5ScUtBS1FBU0lJRFFGQkNRc2hDRUVBSUFSQkhHb2dCU0FDSUFNZ0NCRFRBU0lEUVFCSURRVWFJQVFvQWlRaEJTQUVLQUlvREFFTElBTWdCbXBCa0FscUxRQUFJUU1nQWlBSWF3c2hBaUFKSUJCcUtBSUFJUW9DUUFKQUlBa2dEMm9vQWdBaURBUkFJQU1FZnlBQ0lBTklCRUJCQUNBRVFSeHFJQVVnQWlBREVIaEZEUWdhSUFRb0FpUWhCU0FFS0FJb0lRSUxJQU5CQW5RaUJrSEFrQU5xS0FJQUlnZ2dCU0FDSUFOcklnSjFjU0lESUFoQkFDQURJQVpCdkpBRGFpZ0NBRXdiYXdWQkFBc2hDQ0FTSUFrZ0Rtb29BZ0JCQW5ScUlnWWdCaWdDQUNBSWFpSUdOZ0lBSUFzZ0Jqc0JBRUVCSVFnZ0RFRUNTQTBCSUFwQmtBbHFJUWtnQ2tHUUFXb2hFd05BQWtBQ1FBSi9Ba0FnQWtFSFNnMEFRUUFnQkVFY2FpQUZJQUpCQUJCNFJRMExHaUFFS0FJa0lRVWdCQ2dDS0NJQ1FRaE9EUUJCQVF3QkN5QVRJQVVnQWtFSWEzVkIvd0Z4SWdaQkFuUnFLQUlBSWdNTkFVRUpDeUVEUVFBZ0JFRWNhaUFGSUFJZ0NpQURFTk1CSWdOQkFFZ05DUm9nQkNnQ0tDRUNJQVFvQWlRaEJRd0JDeUFDSUFOcklRSWdCaUFKYWkwQUFDRURDeUFEUVFSMklRWUNRQ0FEUVE5eElnTUVRQ0FDSUFOSUJFQkJBQ0FFUVJ4cUlBVWdBaUFERUhoRkRRb2FJQVFvQWlRaEJTQUVLQUlvSVFJTElBc2dCaUFJYWlJR1FRSjBRY0NYQTJvb0FnQkJBWFJxSUFOQkFuUWlDRUhBa0FOcUtBSUFJaFFnQlNBQ0lBTnJJZ0oxY1NJRElCUkJBQ0FESUFoQnZKQURhaWdDQUV3YmF6c0JBQXdCQ3lBR1FROUhEUVFnQ0VFUGFpRUdDeUFHUVFGcUlnZ2dERWdOQUFzZ0JrRStUQTBCREFJTFFRRWhDQ0FEUlEwQUlBSWdBMGdFZjBFQUlBUkJIR29nQlNBQ0lBTVFlRVVOQmhvZ0JDZ0NKQ0VGSUFRb0FpZ0ZJQUlMSUFOcklRSUxJQXBCa0FscUlRc2dDa0dRQVdvaERBTkFBa0FDUUFKL0FrQWdBa0VIU2cwQVFRQWdCRUVjYWlBRklBSkJBQkI0UlEwSkdpQUVLQUlrSVFVZ0JDZ0NLQ0lDUVFoT0RRQkJBUXdCQ3lBTUlBVWdBa0VJYTNWQi93RnhJZ1pCQW5ScUtBSUFJZ01OQVVFSkN5RURRUUFnQkVFY2FpQUZJQUlnQ2lBREVOTUJJZ05CQUVnTkJ4b2dCQ2dDS0NFQ0lBUW9BaVFoQlF3QkN5QUNJQU5ySVFJZ0JpQUxhaTBBQUNFREN5QURRUVIySVFrQ1FDQURRUTl4SWdZRVFDQUNJQVpJQkg5QkFDQUVRUnhxSUFVZ0FpQUdFSGhGRFFnYUlBUW9BaVFoQlNBRUtBSW9CU0FDQ3lBR2F5RUNEQUVMSUFsQkQwY05BZ3NnQ0NBSmFrRUJhaUlJUWNBQVNBMEFDd3NnRFVFQmFpSU5JQUFvQXZBQ1NBMEFDeUFBS0FJWUlRTWdCQ2dDSENFSUlBUW9BaUFoQmdzZ0F5QUdOZ0lFSUFNZ0NEWUNBQ0FISUFJMkFoQWdCeUFGTmdJTUlBY2dCQ2dDR0RZQ0pDQUhJQVFwQXhBM0Fod2dCeUFFS1FNSU53SVVDeUFISUFjb0FpeEJBV3MyQWl4QkFRc2dCRUV3YWlRQUN4RUFJQUFvQWdCQmhBRnFRUUVRL2dRQUM0VUdBUTkvSXdCQk1Hc2lBeVFBSUFBb0FxZ0RJUW9nQUNnQzFBTWhCQUovQWtBZ0FDZ0NtQUpGRFFBZ0JDZ0NMQTBBSUFBb0F0QURJZ1VnQlNnQ0dDQUVLQUlRUVFodGFqWUNHQ0FFUVFBMkFoQkJBQ0FBSUFVb0FnZ1JBQUJGRFFFYUlBQW9BdFFDUVFCS0JFQWdCRUVZYWlFQ1FRQWhCUU5BSUFJZ0JVRUNkR3BCQURZQ0FDQUZRUUZxSWdVZ0FDZ0MxQUpJRFFBTEN5QUVRUUEyQWhRZ0JDQUFLQUtZQWpZQ0xDQUFLQUs0QXcwQUlBUkJBRFlDS0FzZ0JDZ0NLRVVFUUNBRElBQTJBaXdnQXlBQUtBSVlJZ0lvQWdBaUNEWUNIQ0FESUFJb0FnUWlCallDSUNBRUtBSVFJUVVnQkNnQ0RDRUhJQU1nQkNnQ0pEWUNHQ0FESUFRcEFodzNBeEFnQXlBRUtRSVVOd01JSUFBb0F2QUNRUUJLQkVBZ0JFRXdhaUVMSUFCQjJBSnFJUXdnQUVIMEFtb2hEU0FEUVFocVFRUnlJUTVCQUNFSUEwQWdBU0FJUVFKMElnSnFLQUlBSUFzZ0RDQUNJQTFxS0FJQVFRSjBJaEJxS0FJQUtBSVVRUUowYWlnQ0FDRUNBbjhDUUFKL0FrQWdCVUVIU2cwQVFRQWdBMEVjYWlBSElBVkJBQkI0UlEwSEdpQURLQUlrSVFjZ0F5Z0NLQ0lGUVFoT0RRQkJBUXdCQ3lBQ0lBY2dCVUVJYTNWQi93RnhJZ1pCQW5ScUtBS1FBU0lKRFFGQkNRc2hDVUVBSUFOQkhHb2dCeUFGSUFJZ0NSRFRBU0lDUVFCSURRVWFJQU1vQWlRaEJ5QURLQUlvREFFTElBSWdCbXBCa0FscUxRQUFJUUlnQlNBSmF3c2hCU0FDQkg4Z0FpQUZTZ1JBUVFBZ0EwRWNhaUFISUFVZ0FoQjRSUTBGR2lBREtBSWtJUWNnQXlnQ0tDRUZDeUFDUVFKMElnWkJ3SkFEYWlnQ0FDSUpJQWNnQlNBQ2F5SUZkWEVpQWlBSlFRQWdBaUFHUWJ5UUEyb29BZ0JNRzJzRlFRQUxJUUlnRGlBUWFpSUdJQVlvQWdBZ0Ftb2lBallDQUNBQ0lBcDBPd0VBSUFoQkFXb2lDQ0FBS0FMd0FrZ05BQXNnQXlnQ0lDRUdJQU1vQWh3aENDQUFLQUlZSVFJTElBSWdCallDQkNBQ0lBZzJBZ0FnQkNBRk5nSVFJQVFnQnpZQ0RDQUVJQU1vQWhnMkFpUWdCQ0FES1FNUU53SWNJQVFnQXlrRENEY0NGQXNnQkNBRUtBSXNRUUZyTmdJc1FRRUxJQU5CTUdva0FBdWhCZ0VPZnlNQVFTQnJJZ01rQUNBQUtBTFVBeUVFQW44Q1FDQUFLQUtZQWtVTkFDQUVLQUlzRFFBZ0FDZ0MwQU1pQWlBQ0tBSVlJQVFvQWhCQkNHMXFOZ0lZSUFSQkFEWUNFRUVBSUFBZ0FpZ0NDQkVBQUVVTkFSb2dBQ2dDMUFKQkFFb0VRQ0FFUVJocUlRWkJBQ0VDQTBBZ0JpQUNRUUowYWtFQU5nSUFJQUpCQVdvaUFpQUFLQUxVQWtnTkFBc0xJQVJCQURZQ0ZDQUVJQUFvQXBnQ05nSXNJQUFvQXJnRERRQWdCRUVBTmdJb0N5QUVLQUlvUlFSQUFrQWdCQ2dDRkNJQ0JFQWdBa0VCYXlFRkRBRUxJQU1nQURZQ0hDQURJQUFvQWhnaUFpZ0NBRFlDRENBRElBSW9BZ1EyQWhBZ0JDZ0NFQ0VDSUFRb0Fnd2hCZ0ovQWtBZ0FDZ0NuQU1pQ0NBQUtBS2dBeUlLU2cwQUlBRW9BZ0FoQ3lBQUtBS3dBeUVNSUFBb0FxZ0RJUTBnQkNnQ1FDSUpRWkFKYWlFT0lBbEJrQUZxSVE4RFFBSi9Ba0FDZndKQUlBSkJCMG9OQUVFQUlBTkJER29nQmlBQ1FRQVFlRVVOQ1JvZ0F5Z0NGQ0VHSUFNb0FoZ2lBa0VJVGcwQVFRRU1BUXNnRHlBR0lBSkJDR3QxUWY4QmNTSUJRUUowYWlnQ0FDSUZEUUZCQ1FzaEFVRUFJQU5CREdvZ0JpQUNJQWtnQVJEVEFTSUJRUUJJRFFjYUlBTW9BaFFoQmlBREtBSVlEQUVMSUFFZ0Rtb3RBQUFoQVNBQ0lBVnJDeUVDSUFGQkJIWWhCUUpBSUFGQkQzRWlCd1JBSUFJZ0IwZ0VRRUVBSUFOQkRHb2dCaUFDSUFjUWVFVU5DQm9nQXlnQ0ZDRUdJQU1vQWhnaEFnc2dDeUFNSUFVZ0NHb2lBVUVDZEdvb0FnQkJBWFJxSUFkQkFuUWlCVUhBa0FOcUtBSUFJZ2dnQmlBQ0lBZHJJZ0oxY1NJSElBaEJBQ0FISUFWQnZKQURhaWdDQUV3YmF5QU5kRHNCQUF3QkN5QUZRUTlIQkVBZ0FVRVFTUTBESUFJZ0JVZ0VRRUVBSUFOQkRHb2dCaUFDSUFVUWVFVU5DQm9nQXlnQ0ZDRUdJQU1vQWhnaEFnc2dCVUVDZEVIQWtBTnFLQUlBSUFZZ0FpQUZheUlDZFhGQmZ5QUZkRUYvYzJvTUJBc2dDRUVQYWlFQkN5QUJRUUZxSVFnZ0FTQUtTQTBBQ3d0QkFBc2hCU0FBS0FJWUlnQWdBeWdDRERZQ0FDQUFJQU1vQWhBMkFnUWdCQ0FDTmdJUUlBUWdCallDREFzZ0JDQUZOZ0lVQ3lBRUlBUW9BaXhCQVdzMkFpeEJBUXNnQTBFZ2FpUUFDN0FEQVFoL0l3QkJJR3NpQlNRQUlBQW9BdFFESVFNQ1FBSkFJQUFvQXBnQ1JRMEFJQU1vQWl3TkFDQUFLQUxRQXlJQ0lBSW9BaGdnQXlnQ0VFRUliV28yQWhnZ0EwRUFOZ0lRSUFBZ0FpZ0NDQkVBQUVVTkFTQUFLQUxVQWtFQVNnUkFJQU5CR0dvaEJFRUFJUUlEUUNBRUlBSkJBblJxUVFBMkFnQWdBa0VCYWlJQ0lBQW9BdFFDU0EwQUN3c2dBMEVBTmdJVUlBTWdBQ2dDbUFJMkFpd2dBQ2dDdUFNTkFDQURRUUEyQWlnTElBVWdBRFlDSENBRklBQW9BaGdpQkNnQ0FDSUdOZ0lNSUFVZ0JDZ0NCQ0lITmdJUVFRRWhDU0FES0FJUUlRSWdBeWdDRENFSUlBQW9BdkFDUVFCS0JFQkJBU0FBS0FLb0EzUWhCa0VBSVFRRFFDQUNRUUJNQkVBZ0JVRU1haUFJSUFKQkFSQjRSUVJBUVFBaENRd0VDeUFGS0FJVUlRZ2dCU2dDR0NFQ0N5QUlJQUpCQVdzaUFuWkJBWEVFUUNBQklBUkJBblJxS0FJQUlnY2dCeThCQUNBR2Nqc0JBQXNnQkVFQmFpSUVJQUFvQXZBQ1NBMEFDeUFGS0FJUUlRY2dCU2dDRENFR0lBQW9BaGdoQkFzZ0JDQUhOZ0lFSUFRZ0JqWUNBQ0FESUFJMkFoQWdBeUFJTmdJTUlBTWdBeWdDTEVFQmF6WUNMQXNnQlVFZ2FpUUFJQWtMMHdvQkUzOGpBRUdnQW1zaUJDUUFJQUFvQXRRRElRY0NRQUpBSUFBb0FwZ0NSUTBBSUFjb0Fpd05BQ0FBS0FMUUF5SUZJQVVvQWhnZ0J5Z0NFRUVJYldvMkFoZ2dCMEVBTmdJUUlBQWdCU2dDQ0JFQUFFVU5BU0FBS0FMVUFrRUFTZ1JBSUFkQkdHb2hBd05BSUFNZ0FrRUNkR3BCQURZQ0FDQUNRUUZxSWdJZ0FDZ0MxQUpJRFFBTEN5QUhRUUEyQWhRZ0J5QUFLQUtZQWpZQ0xDQUFLQUs0QXcwQUlBZEJBRFlDS0FzQ1FDQUhLQUlvUlFSQUlBQW9BckFESVEwZ0FDZ0NvQU1oQ3lBQUtBS29BeUVESUFRZ0FEWUNuQUlnQkNBQUtBSVlJZ1VvQWdBMkFvd0NJQVFnQlNnQ0JEWUNrQUpCZnlBRGRDRU9RUUVnQTNRaERDQUFLQUtjQXlFRklBRW9BZ0FoQ1NBSEtBSVFJUUlnQnlnQ0RDRUdBbjhDUUNBSEtBSVVJZ29FUUVFQUlRRU1BUXNnQnlnQ1FDSVFRWkFKYWlFU0lCQkJrQUZxSVJOQkFDRUJBMEFDZndKQUFuOENRQ0FDUVFkS0RRQWdCRUdNQW1vZ0JpQUNRUUFRZUVVTkNDQUVLQUtVQWlFR0lBUW9BcGdDSWdKQkNFNE5BRUVCREFFTElCTWdCaUFDUVFocmRVSC9BWEVpQTBFQ2RHb29BZ0FpQ2cwQlFRa0xJUU1nQkVHTUFtb2dCaUFDSUJBZ0F4RFRBU0lEUVFCSURRWWdCQ2dDbEFJaEJpQUVLQUtZQWd3QkN5QURJQkpxTFFBQUlRTWdBaUFLYXdzaEFpQURRUVIySVFnQ1FBSkFBa0FDUUFKQUlBTkJEM0VPQWdJQkFBc2dBQ2dDQUNJRFFma0FOZ0lVSUFCQmZ5QURLQUlFRVFJQUN5QUNRUUJNQkVBZ0JFR01BbW9nQmlBQ1FRRVFlRVVOQ0NBRUtBS1VBaUVHSUFRb0FwZ0NJUUlMSUF3Z0RpQUdJQUpCQVdzaUFuWkJBWEViSVE4TUFRdEJBQ0VQSUFoQkQwWU5BRUVCSUFoMElRb2dBMEVRU1EwRElBSWdDRWdFUUNBRVFZd0NhaUFHSUFJZ0NCQjRSUTBISUFRb0FwUUNJUVlnQkNnQ21BSWhBZ3NnQ0VFQ2RFSEFrQU5xS0FJQUlBWWdBaUFJYXlJQ2RYRWdDbW9pQ2cwRERBRUxJQVVnQ3lBRklBdEtHeUlVUVFGcUlRb0NRQU5BQWtBZ0NTQU5JQVVpQTBFQ2RHb29BZ0JCQVhScUlnVXZBUUFFUUNBQ1FRQk1CRUFnQkVHTUFtb2dCaUFDUVFFUWVFVU5DaUFFS0FLVUFpRUdJQVFvQXBnQ0lRSUxJQVlnQWtFQmF5SUNka0VCY1VVTkFTQU1JQVV1QVFBaUVYRU5BU0FGSUJFZ0RpQU1JQkZCQUVnYmFqc0JBQXdCQ3lBSVFRQk1EUUlnQ0VFQmF5RUlDeUFEUVFGcUlRVWdBeUFVUncwQUN5QUtJUU1MSUE4RVFDQUpJQTBnQTBFQ2RHb29BZ0FpQlVFQmRHb2dEenNCQUNBRUlBRkJBblJxSUFVMkFnQWdBVUVCYWlFQkN5QURRUUZxSVFVZ0F5QUxTQTBCQ3d0QkFBd0JDeUFGSUFzZ0JTQUxTaHNoQ3dOQUFrQWdDU0FOSUFVaUEwRUNkR29vQWdCQkFYUnFJZ1V2QVFCRkRRQWdBa0VBVEFSQUlBUkJqQUpxSUFZZ0FrRUJFSGhGRFFVZ0JDZ0NsQUloQmlBRUtBS1lBaUVDQ3lBR0lBSkJBV3NpQW5aQkFYRkZEUUFnRENBRkxnRUFJZ2h4RFFBZ0JTQUlJQTRnRENBSVFRQklHMm83QVFBTElBTkJBV29oQlNBRElBdEhEUUFMSUFwQkFXc0xJUVVnQUNnQ0dDSUFJQVFvQW93Q05nSUFJQUFnQkNnQ2tBSTJBZ1FnQnlBRk5nSVVJQWNnQWpZQ0VDQUhJQVkyQWd3TElBY2dCeWdDTEVFQmF6WUNMRUVCSVFNTUFRc2dBVVVFUUVFQUlRTU1BUXNnQVNJQ1FRTnhJZ0FFUUVFQUlRVURRQ0FKSUFRZ0FrRUJheUlDUVFKMGFpZ0NBRUVCZEdwQkFEc0JBQ0FGUVFGcUlnVWdBRWNOQUFzTElBRkJCRWtFUUVFQUlRTU1BUXNEUUVFQUlRTWdDU0FDUVFKMElBUnFJZ0JCQkdzb0FnQkJBWFJxUVFBN0FRQWdDU0FBUVFocktBSUFRUUYwYWtFQU93RUFJQWtnQUVFTWF5Z0NBRUVCZEdwQkFEc0JBQ0FKSUFRZ0FrRUVheUlDUVFKMGFpZ0NBRUVCZEdwQkFEc0JBQ0FDRFFBTEN5QUVRYUFDYWlRQUlBTUx5d3dCRFg4Z0FDZ0NuQU1oQWlBQUtBTFVBeUVFQWtBZ0FDZ0M0QUVFUUNBQUtBS2dBeUVCQWtBQ1FBSkFJQUpGQkVBZ0FVVU5BUXdDQ3lBQklBSklEUUVnQVNBQUtBSzBBMG9OQVNBQUtBTFVBa0VCUncwQkN3SkFJQUFvQXFRRElnRkZCRUFnQUNnQ3FBTWhBUXdCQ3lBQlFRRnJJZ0VnQUNnQ3FBTkhEUUVMSUFGQkRrZ05BUXNnQUNnQ0FDSUJJQUkyQWhnZ0FVRVJOZ0lVSUFBb0FnQWdBQ2dDb0FNMkFod2dBQ2dDQUNBQUtBS2tBellDSUNBQUtBSUFJQUFvQXFnRE5nSWtJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0FDZ0MxQUpCQUV3RWYwRUFCU0FBUWRnQ2FpRUpBMEFnQUNnQ29BRWdDU0FLUVFKMGFpZ0NBQ2dDQkNJR1FRaDBhaUVJQW45QkFDQUFLQUtjQXlJQlJRMEFHaUFCSUFnb0FnQkJBRTROQUJvZ0FDZ0NBQ0lCSUFZMkFoZ2dBVUgyQURZQ0ZDQUFLQUlBUVFBMkFod2dBRUYvSUFBb0FnQW9BZ1FSQWdBZ0FDZ0NuQU1MSWdJZ0FDZ0NvQU5NQkVBRFFDQUFLQUtrQXlBSUlBSkJBblJxSWdzb0FnQWlBVUVBSUFGQkFFb2JSd1JBSUFBb0FnQWlBU0FHTmdJWUlBRkI5Z0EyQWhRZ0FDZ0NBQ0FDTmdJY0lBQkJmeUFBS0FJQUtBSUVFUUlBQ3lBTElBQW9BcWdETmdJQUlBSWdBQ2dDb0FOSUlBSkJBV29oQWcwQUN3c2dDa0VCYWlJS0lBQW9BdFFDSWdGSURRQUxJQUZCQUVvTElBUkJ5d0ZCekFFZ0FDZ0NuQU1pQVJ0QnpRRkJ6Z0VnQVJzZ0FDZ0NwQU1iTmdJRUJFQWdCRUVZYWlFSUlBUkJNR29oQmlBQVFkZ0NhaUVKUVFBaEFnTkFJQWtnQWtFQ2RDSUxhaWdDQUNFQkFrQWdBQ2dDbkFORkJFQWdBQ2dDcEFNTkFTQUFRUUVnQVNnQ0ZDSUJJQVlnQVVFQ2RHb1Fqd01NQVFzZ0FFRUFJQUVvQWhnaUFTQUdJQUZCQW5ScUlnRVFqd01nQkNBQktBSUFOZ0pBQ3lBSUlBdHFRUUEyQWdBZ0FrRUJhaUlDSUFBb0F0UUNTQTBBQ3dzZ0JFRUFOZ0lVREFFTEFrQUNRQ0FDRFFBZ0FDZ0NwQU1OQUNBQUtBS29BdzBBSUFBb0F0d0JSU0FBS0FLZ0F5SUJRVDlLY1EwQklBRWdBQ2dDdEFOR0RRRUxJQUFvQWdBaUFVSDlBRFlDRkNBQVFYOGdBU2dDQkJFQ0FBc2dCRUhQQVVIUUFTQUFLQUswQTBFL1JoczJBZ1FnQUNnQzFBSkJBRW9FUUNBRVFSaHFJUXdnQkVIVUFHb2hDaUFFUWNRQWFpRUdJQUJCMkFKcUlRaEJBQ0VDQTBBZ0FFRUJJQWdnQWtFQ2RDSUphaWdDQUNJTEtBSVVJZ0VnQmlBQlFRSjBhaENQQXlBQUtBSzBBd1JBSUFCQkFDQUxLQUlZSWdFZ0NpQUJRUUowYWhDUEF3c2dDU0FNYWtFQU5nSUFJQUpCQVdvaUFpQUFLQUxVQWtnTkFBc0xJQUFvQXZBQ1FRQk1EUUFnQkVHMEFXb2hDaUFFUVl3QmFpRUdJQVJCMUFCcUlRZ2dCRUhrQUdvaENTQUVRY1FBYWlFTElBQkIyQUpxSVFJZ0FFSDBBbW9oQVFOQUlBa2dEVUVDZENJTWFpQUxJQUlnQVNBTWFpZ0NBRUVDZEdvb0FnQWlBeWdDRkVFQ2RHb29BZ0EyQWdBZ0JpQU1haUFJSUFNb0FoaEJBblJxS0FJQU5nSUFRUUFoQndKQUlBTW9BalJGRFFBZ0F5Z0NKQ0VGSUFNb0FpZ2hBMEVCSVFjQ1FBSkFBa0FDUUFKQUFrQUNRQ0FBS0FLMEF3NHhCd1lHQUFZR0JnWUJCZ1lHQmdZR0FnWUdCZ1lHQmdZR0F3WUdCZ1lHQmdZR0JnWUVCZ1lHQmdZR0JnWUdCZ1lHQlFZTFFRRWdBMEVCYXlBRFFRTnJRWDVKRzBFRGRFRUJJQVZCQVdzZ0JVRURhMEYrU1J0QkFuUnFRZkNKQTJvb0FnQkJBV29oQnd3R0MwRUNJQU5CQVdzZ0EwRUVhMEY5U1J0QkRHeEJBaUFGUVFGcklBVkJCR3RCZlVrYlFRSjBha0dBaWdOcUtBSUFRUUZxSVFjTUJRdEJBeUFEUVFGcklBTkJCV3RCZkVrYlFRUjBRUU1nQlVFQmF5QUZRUVZyUVh4SkcwRUNkR3BCc0lvRGFpZ0NBRUVCYWlFSERBUUxRUVFnQTBFQmF5QURRUVpyUVh0SkcwRVViRUVFSUFWQkFXc2dCVUVHYTBGN1NSdEJBblJxUWZDS0Eyb29BZ0JCQVdvaEJ3d0RDMEVGSUFOQkFXc2dBMEVIYTBGNlNSdEJHR3hCQlNBRlFRRnJJQVZCQjJ0QmVra2JRUUowYWtIZ2l3TnFLQUlBUVFGcUlRY01BZ3RCQmlBRFFRRnJJQU5CQ0d0QmVVa2JRUnhzUVFZZ0JVRUJheUFGUVFoclFYbEpHMEVDZEdwQjhJd0RhaWdDQUVFQmFpRUhEQUVMUVFjZ0EwRUJheUFEUVFsclFYaEpHMEVGZEVFSElBVkJBV3NnQlVFSmEwRjRTUnRCQW5ScVFjQ09BMm9vQWdCQkFXb2hCd3NnQ2lBTWFpQUhOZ0lBSUExQkFXb2lEU0FBS0FMd0FrZ05BQXNMSUFSQkFEWUNLQ0FFUWdBM0Fnd2dCQ0FBS0FLWUFqWUNMQXNxQVFGL0lBQW9BdEFESWdFZ0FTZ0NHQ0FBS0FMVUF5SUFLQUlRUVFodGFqWUNHQ0FBUVFBMkFoQUw3QW9CR0g4Z0FDZ0MxQU1oQmlBQUtBS1lBZ1JBSUFZZ0JpZ0NPQ0lGQkg4Z0JRVWdBQkRKQWlBR0tBSTRDMEVCYXpZQ09Bc0NRQUpBSUFZb0FoUkJmMFlOQUNBQUtBTHdBa0VBVEEwQUlBQW9BckFESVJBZ0FFR0lBbW9oRVNBR1Fid0JhaUVTSUFaQi9BQnFJUk1nQmtFWWFpRU9JQUJCK0FGcUlSUWdBRUhvQVdvaEZTQUdRU2hxSVJZZ0JrRThhaUVYSUFCQjJBSnFJUmdnQUVIMEFtb2hHUU5BSUFFZ0MwRUNkQ0lDYWlnQ0FDRVBBa0FnQUNBWElCZ2dBaUFaYWlnQ0FFRUNkQ0lNYWlnQ0FDSU5LQUlVSWdkQkFuUnFJZ0lvQWdBZ0RDQVdhaUlFS0FJQWFpSURFRTlGQkVBZ0JFRUFOZ0lBSUF3Z0Rtb29BZ0FoQlF3QkMwRUJJUWhCQUNFSkFuOUJBQ0FBSUFNZ0FDQURRUUZxRUU4aUNtcEJBbW9pQXhCUFJRMEFHaUFBSUFJb0FnQWlBa0VVYWlJREVFOUZCRUJCQVF3QkMwRUFJUWhCQWlBQUlBSkJGV29pQXhCUFJRMEFHa0VFSUFBZ0FrRVdhaUlERUU5RkRRQWFRUWdnQUNBQ1FSZHFJZ01RVDBVTkFCcEJFQ0FBSUFKQkdHb2lBeEJQUlEwQUdrRWdJQUFnQWtFWmFpSURFRTlGRFFBYVFjQUFJQUFnQWtFYWFpSURFRTlGRFFBYVFZQUJJQUFnQWtFYmFpSURFRTlGRFFBYVFZQUNJQUFnQWtFY2FpSURFRTlGRFFBYVFZQUVJQUFnQWtFZGFpSURFRTlGRFFBYVFZQUlJQUFnQWtFZWFpSURFRTlGRFFBYVFZQVFJQUFnQWtFZmFpSURFRTlGRFFBYVFZQWdJQUFnQWtFZ2FpSURFRTlGRFFBYVFZREFBQ0FBSUFKQklXb2lBeEJQUlEwQUdpQUFJQUpCSW1vaUF4QlBEUVJCZ0lBQkN5RUZBa0FnQlVFQklBY2dGV290QUFCMFFRRjFTQTBBSUFwQkFuUWhBa0VCSUFjZ0ZHb3RBQUIwUVFGMUlBVklCRUFnQWtFTWFpRUpEQUVMSUFKQkJHb2hDUXNnQkNBSk5nSUFBa0FnQ0FSQUlBVWhBd3dCQ3lBRFFRNXFJUWNnQlNFREEwQWdCVUVCZGlJQ1FRQWdBQ0FIRUU4YklBTnlJUU1nQlVFRFN5QUNJUVVOQUFzTElBd2dEbW9pQWlBQ0tBSUFJQU5CZjNNZ0EwRUJhaUFLRzJvaUJUWUNBQXNnRHlBRk93RUFBa0FnQUNnQ3RBTkZEUUFnRVNBTktBSVlJZ0pxSVFrZ0V5QUNRUUowYWlFSVFRQWhCUU5BSUFBZ0NDZ0NBQ0FGSWdKQkEyeHFJZ01RVHcwQkEwQUNRQ0FDUVFGcUlRVWdBQ0FEUVFGcUVFOE5BQ0FEUVFOcUlRTWdCU0lDSUFBb0FyUURTQTBCREFZTEN5QUFJQklRVHlFS0FrQWdBQ0FEUVFKcUlnTVFUMFVFUUVFQUlRSU1BUXNnQUNBREVFOUZCRUJCQVNFQ0RBRUxBbjlCQWlBQUlBZ29BZ0JCdlFGQjJRRWdBaUFKTFFBQVNCdHFJZ0lRVDBVTkFCb2dBQ0FDUVFGcUlnUVFUMFVFUUNBRUlRSkJCQXdCQ3lBQUlBSkJBbW9pQkJCUFJRUkFJQVFoQWtFSURBRUxJQUFnQWtFRGFpSUVFRTlGQkVBZ0JDRUNRUkFNQVFzZ0FDQUNRUVJxSWdRUVQwVUVRQ0FFSVFKQklBd0JDeUFBSUFKQkJXb2lCQkJQUlFSQUlBUWhBa0hBQUF3QkN5QUFJQUpCQm1vaUJCQlBSUVJBSUFRaEFrR0FBUXdCQ3lBQUlBSkJCMm9pQkJCUFJRUkFJQVFoQWtHQUFnd0JDeUFBSUFKQkNHb2lCQkJQUlFSQUlBUWhBa0dBQkF3QkN5QUFJQUpCQ1dvaUJCQlBSUVJBSUFRaEFrR0FDQXdCQ3lBQUlBSkJDbW9pQkJCUFJRUkFJQVFoQWtHQUVBd0JDeUFBSUFKQkMyb2lCQkJQUlFSQUlBUWhBa0dBSUF3QkN5QUFJQUpCREdvaUJCQlBSUVJBSUFRaEFrR0F3QUFNQVFzZ0FDQUNRUTFxSWdJUVR3MEdRWUNBQVFzaEF5QUNRUTVxSVEwZ0F5RUNBMEFnQTBFQmRpSUVRUUFnQUNBTkVFOGJJQUp5SVFJZ0EwRURTeUFFSVFNTkFBc0xJQThnRUNBRlFRSjBhaWdDQUVFQmRHb2dBa0YvY3lBQ1FRRnFJQW9iT3dFQUlBVWdBQ2dDdEFOSURRQUxDeUFMUVFGcUlnc2dBQ2dDOEFKSURRQUxDMEVCRHdzZ0FDZ0NBQ0lCUWZVQU5nSVVJQUJCZnlBQktBSUVFUUlBSUFaQmZ6WUNGRUVCQzQ4REFRcC9JQUFvQXRRRElRTWdBQ2dDbUFJRVFDQURJQU1vQWpnaUFnUi9JQUlGSUFBUXlRSWdBeWdDT0F0QkFXczJBamdMQWtBZ0F5Z0NGRUYvUmcwQVFYOGdBQ2dDcUFNaUFuUWhCVUVCSUFKMElRWWdBQ2dDb0FNaEJDQUJLQUlBSVFjZ0FDZ0NzQU1oQ0NBQUtBTFlBaWdDR0NFQ0FrQURRQ0FISUFnZ0JFRUNkR29vQWdCQkFYUnFMd0VBRFFFZ0JFRUJheUlFRFFBTFFRQWhCQXNnQTBHOEFXb2hDaUFBS0FLY0EwRUJheUVCSUFNZ0FrRUNkR29oQ3dOQUlBc29BbndnQVVFRGJHb2hBaUFCSUFST0JFQWdBQ0FDRUU4TkFnc0NRQUovQWtBRFFDQUhJQWdnQVVFQmFpSUJRUUowYWlnQ0FFRUJkR29pQ1M4QkFBUkFJQUFnQWtFQ2FoQlBSUTBFSUFrdUFRQWlBa0VBVGcwQ0lBSWdCV29NQXdzZ0FDQUNRUUZxRUU4RVFDQUZJQVlnQUNBS0VFOGJEQU1MSUFKQkEyb2hBaUFCSUFBb0FxQURTQTBBQ3lBQUtBSUFJZ0ZCOVFBMkFoUWdBRUYvSUFFb0FnUVJBZ0FnQTBGL05nSVVRUUVQQ3lBQ0lBWnFDeUVDSUFrZ0Fqc0JBQXNnQVNBQUtBS2dBMGdOQUFzTFFRRUxqUUVCQkg4Z0FDZ0MxQU1oQWlBQUtBS1lBZ1JBSUFJZ0FpZ0NPQ0lEQkg4Z0F3VWdBQkRKQWlBQ0tBSTRDMEVCYXpZQ09Bc2dBQ2dDOEFKQkFFb0VRQ0FDUWJ3QmFpRURRUUVnQUNnQ3FBTjBJUVJCQUNFQ0EwQWdBQ0FERUU4RVFDQUJJQUpCQW5ScUtBSUFJZ1VnQlM4QkFDQUVjanNCQUFzZ0FrRUJhaUlDSUFBb0F2QUNTQTBBQ3d0QkFRdlJCUUVNZnlBQUtBTFVBeUVFSUFBb0FwZ0NCRUFnQkNBRUtBSTRJZ1VFZnlBRkJTQUFFTWtDSUFRb0FqZ0xRUUZyTmdJNEN3SkFBa0FnQkNnQ0ZFRi9SZzBBSUFSQnZBRnFJUWNnQUNnQ25BTkJBV3NoQlNBQUlBQW9BdGdDS0FJWUlnSnFJUWdnQkNBQ1FRSjBhaUVHSUFFb0FnQWhDU0FBS0FLd0F5RUtBMEFnQUNBR0tBSjhJQVVpQWtFRGJHb2lBUkJQRFFFRFFBSkFJQUpCQVdvaEJTQUFJQUZCQVdvUVR3MEFJQUZCQTJvaEFTQUZJZ0lnQUNnQ29BTklEUUVNQkFzTElBQWdCeEJQSVFzQ1FDQUFJQUZCQW1vaUFSQlBSUVJBUVFBaEFnd0JDeUFBSUFFUVQwVUVRRUVCSVFJTUFRc0NmMEVDSUFBZ0JpZ0NmRUc5QVVIWkFTQUNJQWd0QUlnQ1NCdHFJZ0lRVDBVTkFCb2dBQ0FDUVFGcUlnTVFUMFVFUUNBRElRSkJCQXdCQ3lBQUlBSkJBbW9pQXhCUFJRUkFJQU1oQWtFSURBRUxJQUFnQWtFRGFpSURFRTlGQkVBZ0F5RUNRUkFNQVFzZ0FDQUNRUVJxSWdNUVQwVUVRQ0FESVFKQklBd0JDeUFBSUFKQkJXb2lBeEJQUlFSQUlBTWhBa0hBQUF3QkN5QUFJQUpCQm1vaUF4QlBSUVJBSUFNaEFrR0FBUXdCQ3lBQUlBSkJCMm9pQXhCUFJRUkFJQU1oQWtHQUFnd0JDeUFBSUFKQkNHb2lBeEJQUlFSQUlBTWhBa0dBQkF3QkN5QUFJQUpCQ1dvaUF4QlBSUVJBSUFNaEFrR0FDQXdCQ3lBQUlBSkJDbW9pQXhCUFJRUkFJQU1oQWtHQUVBd0JDeUFBSUFKQkMyb2lBeEJQUlFSQUlBTWhBa0dBSUF3QkN5QUFJQUpCREdvaUF4QlBSUVJBSUFNaEFrR0F3QUFNQVFzZ0FDQUNRUTFxSWdJUVR3MEVRWUNBQVFzaEFTQUNRUTVxSVF3Z0FTRUNBMEFnQVVFQmRpSURRUUFnQUNBTUVFOGJJQUp5SVFJZ0FVRURTeUFESVFFTkFBc0xJQWtnQ2lBRlFRSjBhaWdDQUVFQmRHb2dBa0YvY3lBQ1FRRnFJQXNiSUFBb0FxZ0RkRHNCQUNBRklBQW9BcUFEU0EwQUN3dEJBUThMSUFBb0FnQWlBVUgxQURZQ0ZDQUFRWDhnQVNnQ0JCRUNBQ0FFUVg4MkFoUkJBUXVEQmdFU2Z5QUFLQUxVQXlFRUlBQW9BcGdDQkVBZ0JDQUVLQUk0SWdJRWZ5QUNCU0FBRU1rQ0lBUW9BamdMUVFGck5nSTRDd0pBQWtBZ0JDZ0NGRUYvUmcwQUlBQW9BdkFDUVFCTURRQWdCRUVZYWlFS0lBQkIrQUZxSVEwZ0FFSG9BV29oRGlBRVFTaHFJUThnQkVFOGFpRVFJQUJCMkFKcUlSRWdBRUgwQW1vaEVnTkFJQUVnQ0VFQ2RDSUNhaWdDQUFKQUlBQWdFQ0FSSUFJZ0Vtb29BZ0JCQW5RaUNXb29BZ0FvQWhRaUIwRUNkR29pQWlnQ0FDQUpJQTlxSWdzb0FnQnFJZ01RVDBVRVFDQUxRUUEyQWdBZ0NTQUthaWdDQUNFQ0RBRUxRUUVoQmtFQUlRVUNmMEVBSUFBZ0F5QUFJQU5CQVdvUVR5SU1ha0VDYWlJREVFOUZEUUFhSUFBZ0FpZ0NBQ0lDUVJScUlnTVFUMFVFUUVFQkRBRUxRUUFoQmtFQ0lBQWdBa0VWYWlJREVFOUZEUUFhUVFRZ0FDQUNRUlpxSWdNUVQwVU5BQnBCQ0NBQUlBSkJGMm9pQXhCUFJRMEFHa0VRSUFBZ0FrRVlhaUlERUU5RkRRQWFRU0FnQUNBQ1FSbHFJZ01RVDBVTkFCcEJ3QUFnQUNBQ1FScHFJZ01RVDBVTkFCcEJnQUVnQUNBQ1FSdHFJZ01RVDBVTkFCcEJnQUlnQUNBQ1FSeHFJZ01RVDBVTkFCcEJnQVFnQUNBQ1FSMXFJZ01RVDBVTkFCcEJnQWdnQUNBQ1FSNXFJZ01RVDBVTkFCcEJnQkFnQUNBQ1FSOXFJZ01RVDBVTkFCcEJnQ0FnQUNBQ1FTQnFJZ01RVDBVTkFCcEJnTUFBSUFBZ0FrRWhhaUlERUU5RkRRQWFJQUFnQWtFaWFpSURFRThOQkVHQWdBRUxJUUlDUUNBQ1FRRWdCeUFPYWkwQUFIUkJBWFZJRFFBZ0RFRUNkQ0VGUVFFZ0J5QU5haTBBQUhSQkFYVWdBa2dFUUNBRlFReHFJUVVNQVFzZ0JVRUVhaUVGQ3lBTElBVTJBZ0FDUUNBR0JFQWdBaUVEREFFTElBTkJEbW9oQlNBQ0lRTURRQ0FDUVFGMklnWkJBQ0FBSUFVUVR4c2dBM0loQXlBQ1FRTkxJQVloQWcwQUN3c2dDU0FLYWlJQ0lBSW9BZ0FnQTBGL2N5QURRUUZxSUF3YmFpSUNOZ0lBQ3lBQ0lBQW9BcWdEZERzQkFDQUlRUUZxSWdnZ0FDZ0M4QUpJRFFBTEMwRUJEd3NnQUNnQ0FDSUJRZlVBTmdJVUlBQkJmeUFCS0FJRUVRSUFJQVJCZnpZQ0ZFRUJDN2dJQVF0L0lBQW9BcHdESVFFZ0FDZ0MxQU1oQXdKQUlBQW9BdUFCQkVBZ0FDZ0NvQU1oQWdKQUFrQUNRQ0FCUlFSQUlBSkZEUUVNQWdzZ0FTQUNTZzBCSUFJZ0FDZ0N0QU5LRFFFZ0FDZ0MxQUpCQVVjTkFRc0NRQ0FBS0FLa0F5SUNSUVJBSUFBb0FxZ0RJUVFNQVFzZ0FrRUJheUlFSUFBb0FxZ0RSdzBCQ3lBRVFRNUlEUUVMSUFBb0FnQWlBaUFCTmdJWUlBSkJFVFlDRkNBQUtBSUFJQUFvQXFBRE5nSWNJQUFvQWdBZ0FDZ0NwQU0yQWlBZ0FDZ0NBQ0FBS0FLb0F6WUNKQ0FBSUFBb0FnQW9BZ0FSQVFBTElBQW9BdFFDSWdGQkFFb0VRQ0FBUWRnQ2FpRUlBMEFnQUNnQ29BRWdDQ0FGUVFKMGFpZ0NBQ2dDQkNJR1FRaDBhaUVIQW45QkFDQUFLQUtjQXlJQ1JRMEFHaUFDSUFjb0FnQkJBRTROQUJvZ0FDZ0NBQ0lDSUFZMkFoZ2dBa0gyQURZQ0ZDQUFLQUlBUVFBMkFod2dBRUYvSUFBb0FnQW9BZ1FSQWdBZ0FDZ0NuQU1MSWdFZ0FDZ0NvQU5NQkVBRFFDQUFLQUtrQXlBSElBRkJBblJxSWdrb0FnQWlBa0VBSUFKQkFFb2JSd1JBSUFBb0FnQWlBaUFHTmdJWUlBSkI5Z0EyQWhRZ0FDZ0NBQ0FCTmdJY0lBQkJmeUFBS0FJQUtBSUVFUUlBQ3lBSklBQW9BcWdETmdJQUlBRWdBQ2dDb0FOSUlBRkJBV29oQVEwQUN3c2dCVUVCYWlJRklBQW9BdFFDSWdGSURRQUxDeUFBS0FLY0F5RUNJQUFvQXFRRFJRUkFJQUpGQkVBZ0EwSEVBVFlDQkF3REN5QURRY1VCTmdJRURBSUxJQUpGQkVBZ0EwSEdBVFlDQkF3Q0N5QURRY2NCTmdJRURBRUxBa0FDUUNBQkRRQWdBQ2dDcEFNTkFDQUFLQUtvQXcwQUlBQW9BcUFESWdKQlAwb05BU0FDSUFBb0FyUURSZzBCQ3lBQUtBSUFJZ0pCL1FBMkFoUWdBRUYvSUFJb0FnUVJBZ0FMSUFOQnlBRTJBZ1FnQUNnQzFBSWhBUXNnQVVFQVNnUkFJQU5CL0FCcUlRVWdBMEVvYWlFR0lBTkJHR29oQnlBRFFUeHFJUWdnQUVIWUFtb2hDVUVBSVFRRFFDQUpJQVJCQW5RaUNtb29BZ0FoQ3dKQUFrQWdBQ2dDNEFFRVFDQUFLQUtjQXcwQklBQW9BcVFERFFJTElBc29BaFFpQVVFUVR3UkFJQUFvQWdBaUFpQUJOZ0lZSUFKQk1qWUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBZ2dBVUVDZEdvaUFpZ0NBQ0lCUlFSQUlBSWdBRUVCUWNBQUlBQW9BZ1FvQWdBUkJBQWlBVFlDQUFzZ0FVSUFOd0FBSUFGQ0FEY0FPQ0FCUWdBM0FEQWdBVUlBTndBb0lBRkNBRGNBSUNBQlFnQTNBQmdnQVVJQU53QVFJQUZDQURjQUNDQUhJQXBxUVFBMkFnQWdCaUFLYWtFQU5nSUFJQUFvQXVBQlJRUkFJQUFvQXJRRERRRU1BZ3NnQUNnQ25BTkZEUUVMSUFzb0FoZ2lBVUVRVHdSQUlBQW9BZ0FpQWlBQk5nSVlJQUpCTWpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFVZ0FVRUNkR29pQWlnQ0FDSUJSUVJBSUFJZ0FFRUJRWUFDSUFBb0FnUW9BZ0FSQkFBaUFUWUNBQXNnQVVFQVFZQUNFRkFhQ3lBRVFRRnFJZ1FnQUNnQzFBSklEUUFMQ3lBRFFYQTJBaFFnQTBJQU53SU1JQU1nQUNnQ21BSTJBamdMMWcwQ0MzOEJmQ0FBS0FJa1FRQktCRUFnQUNnQzJBTWlBVUVzYWlFS0lBRkJCR29oQ3lBQUtBTFlBU0VJUVFBaEFRTkFJQU1oQkNBQklRWUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdDQ2dDS0NBSUtBSWtJZ1ZCQ0hScUlnSkJneEJNQkVBZ0FrR0JDRXdFUUFKQUlBSkJnUVJyRGdRWEF5SWVBQXRCb0FFaEEwRUFJUUVDUUNBQ1FZRUNhdzRDSmg4QUN5QUNRWU1HYXc0RUF5RWhIQ0VMSUFKQmdneE1CRUFDUUNBQ1FZSUlhdzRIRmlJRklpSWlIQUFMSUFKQmhRcHJEZ1lGSVNFaElSb2hDd0pBSUFKQmd3eHJEZ29VSVNFR0lTRWhJU0VaQUFzZ0FrR0hEbXNPQ0FZZ0lDQWdJQ0FYSUFzZ0FrR0ZHRXdFUUNBQ1FZUVVUQVJBSUFKQmhCQnJEZzBUSVNFaEh5RWhJU0VoSVNFWElBc2dBa0dGRkdzT0JoRWdJQ0FnQndnTElBSkJoaHhNQkVBZ0FrR0dHR3NPQnhBZ0lDQWdJQWtLQ3dKQUlBSkJoeHhyRGdnUElDQWdJQ0FnQ3dBTElBSkJpQ0JyRGdrTkh4OGZIeDhmSHd3TEMwR2hBU0VEUVFBaEFRd2lDMEdpQVNFRERDRUxRYU1CSVFOQkFDRUJEQ0FMUWFRQklRTkJBQ0VCREI4TFFhVUJJUU5CQUNFQkRCNExRYVlCSVFOQkFDRUJEQjBMUWFjQklRTkJBQ0VCREJ3TElBSkJpeFpIRFJkQnFBRWhBMEVBSVFFTUd3dEJxUUVoQTBFQUlRRU1HZ3NnQWtHTkdrY05GVUdxQVNFRFFRQWhBUXdaQzBHckFTRURRUUFoQVF3WUN5QUNRWThlUncwVFFhd0JJUU5CQUNFQkRCY0xRYTBCSVFOQkFDRUJEQllMUWE0QklRTkJBQ0VCREJVTFFhOEJJUU5CQUNFQkRCUUxRYkFCSVFOQkFDRUJEQk1MUWJFQklRTkJBQ0VCREJJTFFiSUJJUU5CQUNFQkRCRUxRYk1CSVFOQkFDRUJEQkFMUWJRQklRTkJBQ0VCREE4TFFiVUJJUU5CQUNFQkRBNExRYllCSVFOQkFDRUJEQTBMUWJjQklRTkJBQ0VCREF3TFFiZ0JJUU5CQUNFQkRBc0xRYmtCSVFOQkFDRUJEQW9MUWJvQklRTkJBQ0VCREFrTFFic0JJUU1NQ0F0QnZBRWhBMEVBSVFFTUJ3dEJ2UUVoQXd3R0N5QUFLQUpJSWdGQkEwa05BaUFBS0FJQUlnRkJNVFlDRkNBQUlBRW9BZ0FSQVFBTUF3c2dBa0dKRWtZTkF3c2dBQ2dDQUNJQklBVTJBaGdnQVVFSE5nSVVJQUFvQWdBZ0NDZ0NLRFlDSENBQUlBQW9BZ0FvQWdBUkFRQU1BUXNnQVVFQ2RFSGdpUU5xS0FJQUlRTU1BZ3NnQkNFRElBWWhBUXdCQzBHK0FTRURRUUFoQVFzZ0N5QUpRUUowSWdScUlBTTJBZ0FDUUNBSUtBSTBSUTBBSUFRZ0Ntb2lCQ2dDQUNBQlJnMEFJQWdvQWxBaUJrVU5BQ0FFSUFFMkFnQWdDQ2dDVkNFQ1FRQWhCVUVBSVFRQ1FBSkFBa0FnQVVFQmF3NENBUUlBQzBFQUlBRWlCR3RCQTNFaUJ3UkFBMEFnQWlBRVFRSjBhaUFHSUFSQkFYUnFMd0VBTmdJQUlBUkJBV29oQkNBRlFRRnFJZ1VnQjBjTkFBc0xJQUZCUFd0QkEwa05BZ05BSUFJZ0JFRUNkR29nQmlBRVFRRjBhaThCQURZQ0FDQUNJQVJCQVdvaUJVRUNkR29nQmlBRlFRRjBhaThCQURZQ0FDQUNJQVJCQW1vaUJVRUNkR29nQmlBRlFRRjBhaThCQURZQ0FDQUNJQVJCQTJvaUJVRUNkR29nQmlBRlFRRjBhaThCQURZQ0FDQUVRUVJxSWdSQndBQkhEUUFMREFJTEEwQWdBaUFGUVFKMGFpQUZRUUYwSWdSQm9JZ0RhaTRCQUNBRUlBWnFMd0VBYkVHQUVHcEJESFUyQWdBZ0FpQUZRUUZ5SWdSQkFuUnFJQVJCQVhRaUJFR2dpQU5xTGdFQUlBUWdCbW92QVFCc1FZQVFha0VNZFRZQ0FDQUZRUUpxSWdWQndBQkhEUUFMREFFTEEwQWdBaUFFUVFKMGFpQUZRUU4wUWFDSkEyb3JBd0FpRENBR0lBUkJBWFJxTHdFQXVLSkVBQUFBQUFBQXdEK2l0amdDQUNBQ0lBUkJBWElpQjBFQ2RHb2dEQ0FHSUFkQkFYUnFMd0VBdUtKRTcyRklzVkF4OWoraVJBQUFBQUFBQU1BL29yWTRBZ0FnQWlBRVFRSnlJZ2RCQW5ScUlBd2dCaUFIUVFGMGFpOEJBTGlpUk1wdlRaR3U1L1Evb2tRQUFBQUFBQURBUDZLMk9BSUFJQUlnQkVFRGNpSUhRUUowYWlBTUlBWWdCMEVCZEdvdkFRQzRva1NxRVd6dll0RHlQNkpFQUFBQUFBQUF3RCtpdGpnQ0FDQUNJQVJCQkhJaUIwRUNkR29nRENBR0lBZEJBWFJxTHdFQXVLSkVBQUFBQUFBQXdEK2l0amdDQUNBQ0lBUkJCWElpQjBFQ2RHb2dEQ0FHSUFkQkFYUnFMd0VBdUtKRU83K253R2trNlQraVJBQUFBQUFBQU1BL29yWTRBZ0FnQWlBRVFRWnlJZ2RCQW5ScUlBd2dCaUFIUVFGMGFpOEJBTGlpUkxzZ3gzdDZVZUUvb2tRQUFBQUFBQURBUDZLMk9BSUFJQUlnQkVFSGNpSUhRUUowYWlBTUlBWWdCMEVCZEdvdkFRQzRva1JkcTNMZVZhalJQNkpFQUFBQUFBQUF3RCtpdGpnQ0FDQUVRUWhxSVFRZ0JVRUJhaUlGUVFoSERRQUxDeUFJUWRnQWFpRUlJQWxCQVdvaUNTQUFLQUlrU0EwQUN3c0xvQUlCQ1g4Z0JFRUFTZ1JBSUFBb0FuQWlDVUY4Y1NFTElBbEJBM0VoQ2lBQUtBSWtJZ1pCQUV3aERDQUpRUVJKSVEwRFFFRUFJUWdnREVVRVFBTkFBa0FnQ1VVTkFDQUJJQWhCQW5ScUtBSUFJQUpCQW5ScUtBSUFJUUFnQXlnQ0FDQUlhaUVGUVFBaEJ5QU5SUVJBQTBBZ0JTQUFMUUFBT2dBQUlBVWdCbW9pQlNBQUxRQUJPZ0FBSUFVZ0Jtb2lCU0FBTFFBQ09nQUFJQVVnQm1vaUJTQUFMUUFET2dBQUlBQkJCR29oQUNBRklBWnFJUVVnQjBFRWFpSUhJQXRIRFFBTEMwRUFJUWNnQ2tVTkFBTkFJQVVnQUMwQUFEb0FBQ0FGSUFacUlRVWdBRUVCYWlFQUlBZEJBV29pQnlBS1J3MEFDd3NnQ0VFQmFpSUlJQVpIRFFBTEN5QURRUVJxSVFNZ0FrRUJhaUVDSUFSQkFVb2dCRUVCYXlFRURRQUxDd3ZBQWdFT2Z5QUVRUUJLQkVBZ0FDZ0MwQUloQlNBQUtBSndJUWNnQUNnQzRBTWlBQ2dDRkNFS0lBQW9BaEFoQ3lBQUtBSU1JUXdnQUNnQ0NDRU5BMEFnQkNFSUlBY0VRQ0FDUVFKMElnQWdBU2dDREdvb0FnQWhEaUFCS0FJSUlBQnFLQUlBSVE4Z0FTZ0NCQ0FBYWlnQ0FDRVFJQUVvQWdBZ0FHb29BZ0FoRVNBREtBSUFJUVJCQUNFQUEwQWdBQ0FRYWkwQUFDRUdJQVFnQlNBQUlCRnFMUUFBUWY4QmN5SUpJQTBnQUNBUGFpMEFBRUVDZENJU2FpZ0NBR3RxTFFBQU9nQUFJQVFnQlNBSklBc2dFbW9vQWdBZ0NpQUdRUUowSWdacUtBSUFha0VRZFd0cUxRQUFPZ0FCSUFRZ0JTQUpJQVlnREdvb0FnQnJhaTBBQURvQUFpQUVJQUFnRG1vdEFBQTZBQU1nQkVFRWFpRUVJQUJCQVdvaUFDQUhSdzBBQ3dzZ0EwRUVhaUVESUFKQkFXb2hBaUFJUVFGcklRUWdDRUVDVGcwQUN3c0w4UUlCQzM4Z0JFRUFTZ1JBSUFBb0FuQWlDRUYrY1NFT0lBaEJBWEVoRHdOQUlBUWhEQUpBSUFoRkRRQWdBa0VDZENJQUlBRW9BZ2hxS0FJQUlRWWdBU2dDQkNBQWFpZ0NBQ0VKSUFFb0FnQWdBR29vQWdBaEJ5QURLQUlBSVFSQkFDRUFRUUFoRFNBSVFRRkhCRUFEUUNBQUlBZHFMUUFBSVFvZ0FDQUdhaTBBQUNFTElBUWdBQ0FKYWkwQUFDSUZPZ0FCSUFRZ0JTQUxha0dBQVhNNkFBSWdCQ0FGSUFwcVFZQUJjem9BQUNBSElBQkJBWElpQldvdEFBQWhDaUFGSUFacUxRQUFJUXNnQkNBRklBbHFMUUFBSWdVNkFBUWdCQ0FGSUF0cVFZQUJjem9BQlNBRUlBVWdDbXBCZ0FGek9nQURJQUJCQW1vaEFDQUVRUVpxSVFRZ0RVRUNhaUlOSUE1SERRQUxDeUFQUlEwQUlBQWdCMm90QUFBaEJ5QUFJQVpxTFFBQUlRWWdCQ0FBSUFscUxRQUFJZ0E2QUFFZ0JDQUFJQVpxUVlBQmN6b0FBaUFFSUFBZ0IycEJnQUZ6T2dBQUN5QURRUVJxSVFNZ0FrRUJhaUVDSUF4QkFXc2hCQ0FNUVFKT0RRQUxDd3VwQWdFSmZ5QUVRUUJLQkVBZ0FDZ0NjQ0lGUVg1eElRd2dCVUVCY1NFTkEwQWdCQ0VKQWtBZ0JVVU5BQ0FDUVFKMElnQWdBU2dDQ0dvb0FnQWhCaUFCS0FJRUlBQnFLQUlBSVFjZ0FTZ0NBQ0FBYWlnQ0FDRUlJQU1vQWdBaEJFRUFJUUJCQUNFS0lBVkJBVWNFUUFOQUlBUWdBQ0FJYWkwQUFEb0FBQ0FFSUFBZ0Iyb3RBQUE2QUFFZ0JDQUFJQVpxTFFBQU9nQUNJQVFnQ0NBQVFRRnlJZ3RxTFFBQU9nQURJQVFnQnlBTGFpMEFBRG9BQkNBRUlBWWdDMm90QUFBNkFBVWdBRUVDYWlFQUlBUkJCbW9oQkNBS1FRSnFJZ29nREVjTkFBc0xJQTFGRFFBZ0JDQUFJQWhxTFFBQU9nQUFJQVFnQUNBSGFpMEFBRG9BQVNBRUlBQWdCbW90QUFBNkFBSUxJQU5CQkdvaEF5QUNRUUZxSVFJZ0NVRUJheUVFSUFsQkFrNE5BQXNMQzZJQ0FRMS9JQVJCQUVvRVFDQUFLQUxRQWlFRklBQW9BbkFoQnlBQUtBTGdBeUlBS0FJVUlRb2dBQ2dDRUNFTElBQW9BZ3doRENBQUtBSUlJUTBEUUNBRUlRZ2dCd1JBSUFKQkFuUWlBQ0FCS0FJSWFpZ0NBQ0VPSUFFb0FnUWdBR29vQWdBaER5QUJLQUlBSUFCcUtBSUFJUkFnQXlnQ0FDRUVRUUFoQUFOQUlBQWdEMm90QUFBaEJpQUVJQUFnRUdvdEFBQWlDU0FGSUEwZ0FDQU9haTBBQUVFQ2RDSVJhaWdDQUdwcUxRQUFPZ0FBSUFRZ0NTQUZJQXNnRVdvb0FnQWdDaUFHUVFKMElnWnFLQUlBYWtFUWRXcHFMUUFBT2dBQklBUWdDU0FGSUFZZ0RHb29BZ0JxYWkwQUFEb0FBaUFFUVFOcUlRUWdBRUVCYWlJQUlBZEhEUUFMQ3lBRFFRUnFJUU1nQWtFQmFpRUNJQWhCQVdzaEJDQUlRUUpPRFFBTEN3dStBZ0VKZnlBRVFRQktCRUFnQUNnQ2NDSUhRWHh4SVEwZ0IwRURjU0VJQTBBZ0JDRUpBa0FnQjBVTkFDQUJLQUlBSUFKQkFuUnFLQUlBSVFvZ0F5Z0NBQ0VFUVFBaEMwRUFJUUJCQUNFTUlBZEJCRThFUUFOQUlBUWdBQ0FLYWlJRkxRQUFJZ1k2QUFFZ0JDQUdPZ0FDSUFRZ0Jqb0FBQ0FFSUFVdEFBRWlCam9BQkNBRUlBWTZBQVVnQkNBR09nQURJQVFnQlMwQUFpSUdPZ0FISUFRZ0Jqb0FDQ0FFSUFZNkFBWWdCQ0FGTFFBRElnVTZBQW9nQkNBRk9nQUxJQVFnQlRvQUNTQUFRUVJxSVFBZ0JFRU1haUVFSUF4QkJHb2lEQ0FOUncwQUN3c2dDRVVOQUFOQUlBUWdBQ0FLYWkwQUFDSUZPZ0FCSUFRZ0JUb0FBaUFFSUFVNkFBQWdBRUVCYWlFQUlBUkJBMm9oQkNBTFFRRnFJZ3NnQ0VjTkFBc0xJQU5CQkdvaEF5QUNRUUZxSVFJZ0NVRUJheUVFSUFsQkFrNE5BQXNMQyt3QkFRZC9JQVJCQUVvRVFDQUFLQUp3SVFZZ0FDZ0M0QU1vQWhnaEJRTkFJQVFoQUNBR0JFQWdBa0VDZENJRUlBRW9BZ2hxS0FJQUlRZ2dBU2dDQkNBRWFpZ0NBQ0VKSUFFb0FnQWdCR29vQWdBaENpQURLQUlBSVF0QkFDRUVBMEFnQkNBTGFpQUZJQVFnQ1dvdEFBQWlCMEVDZEdwQmdBaHFLQUlBSUFVZ0J5QUVJQXBxTFFBQWFrR0FBWE5CL3dGeFFRSjBhaWdDQUdvZ0JTQUVJQWhxTFFBQUlBZHFRWUFCYzBIL0FYRkJBblJxUVlBUWFpZ0NBR3BCRUhZNkFBQWdCRUVCYWlJRUlBWkhEUUFMQ3lBRFFRUnFJUU1nQWtFQmFpRUNJQUJCQVdzaEJDQUFRUUpPRFFBTEN3dlVBUUVHZnlBRVFRQktCRUFnQUNnQ2NDRUdJQUFvQXVBREtBSVlJUVVEUUNBRUlRQWdCZ1JBSUFKQkFuUWlCQ0FCS0FJSWFpZ0NBQ0VISUFFb0FnUWdCR29vQWdBaENDQUJLQUlBSUFScUtBSUFJUWtnQXlnQ0FDRUtRUUFoQkFOQUlBUWdDbW9nQlNBRUlBZHFMUUFBUVFKMGFrR0FFR29vQWdBZ0JTQUVJQWhxTFFBQVFRSjBha0dBQ0dvb0FnQWdCU0FFSUFscUxRQUFRUUowYWlnQ0FHcHFRUkIyT2dBQUlBUkJBV29pQkNBR1J3MEFDd3NnQTBFRWFpRURJQUpCQVdvaEFpQUFRUUZySVFRZ0FFRUNUZzBBQ3dzTEZ3QWdBU2dDQUNBQ0lBTkJBQ0FFSUFBb0FuQVFqUU1MbUFvQkRYOGpBRUVRYXlJQ0pBQUNRQ0FBS0FJWUlnWW9BZ1FpQkVVRVFDQUFJQVlvQWd3UkFBQkZCRUJCQUNFRURBSUxJQVlvQWdRaEJBc2dCaWdDQUNJQkxRQUFJUVVnQkVFQmF5SUVCSDhnQVVFQmFnVWdBQ0FHS0FJTUVRQUFSUVJBUVFBaEJBd0NDeUFHS0FJRUlRUWdCaWdDQUFzaUFVRUJhaUVJSUFSQkFXc2hCRUVPSUFFdEFBQWdCVUVJZEhJaUFVRUNheUlGUVFBZ0FTQUZUeHNnQVVFUFN4c2lBUVJBQTBBZ0JFVUVRQ0FBSUFZb0Fnd1JBQUJGQkVCQkFDRUVEQVFMSUFZb0FnQWhDQ0FHS0FJRUlRUUxJQUpCQW1vZ0Eyb2dDQzBBQURvQUFDQUlRUUZxSVFnZ0JFRUJheUVFSUFOQkFXb2lBeUFCUncwQUN3c2dCU0FCYXlFTUFrQUNRQUpBSUFBb0FyZ0RJZ05CNEFGcklnY0VRQ0FIUVE1R0JFQU1BZ1VNQXdzQUN5QUJJQXhxSVFVQ1FBSkFBa0FDUUNBQlFRNVBCRUFnQWkwQUFrSEtBRWNOQWlBQ0xRQURRY1lBUncwQklBSXRBQVJCeVFCSERRRWdBaTBBQlVIR0FFY05BU0FDTFFBR0RRRWdBRUVCTmdLY0FpQUFJQUl0QUFjaUFUb0FvQUlnQUNBQ0xRQUlJZ2M2QUtFQ0lBQWdBaTBBQ1NJSk9nQ2lBaUFBSUFJdkFBb2lBMEVJZENBRFFRaDJjaUlLT3dHa0FpQUFJQUl2QUF3aUEwRUlkQ0FEUVFoMmNpSUxPd0dtQWlBQlFRRnJRZjhCY1VFQ1R3UkFJQUFvQWdBaUF5QUJOZ0lZSUFOQitnQTJBaFFnQUNnQ0FDQUFMUUNoQWpZQ0hDQUFRWDhnQUNnQ0FDZ0NCQkVDQUNBQUxRQ2lBaUVKSUFBdkFhWUNJUXNnQUM4QnBBSWhDaUFBTFFDaEFpRUhJQUF0QUtBQ0lRRUxJQUFvQWdBaUF5QUpOZ0lvSUFNZ0MwSC8vd054TmdJa0lBTWdDa0gvL3dOeE5nSWdJQU1nQnpZQ0hDQURJQUUyQWhnZ0EwSFpBRFlDRkNBQVFRRWdBeWdDQkJFQ0FDQUNMUUFQSWdNZ0FpMEFEaUlCY2dSQUlBQW9BZ0FpQVVIY0FEWUNGQ0FCSUFJdEFBNDJBaGdnQUNnQ0FDQUNMUUFQTmdJY0lBQkJBU0FBS0FJQUtBSUVFUUlBSUFJdEFBOGhBeUFDTFFBT0lRRUxJQVZCRG1zaUJTQUJJQU5zUVFOc1JnMEVJQUFvQWdBaUFTQUZOZ0lZSUFGQjJnQTJBaFFNQXdzZ0FVRUdTUTBCSUFJdEFBSkJ5Z0JIRFFFTElBSXRBQU5CeGdCSERRQWdBaTBBQkVIWUFFY05BQ0FDTFFBRlFkZ0FSdzBBSUFJdEFBWU5BQ0FBS0FJQUlRRUNRQUpBQWtBQ1FDQUNMUUFIUVJCckRnUUFBUU1DQXdzZ0FTQUZOZ0lZSUFGQjdnQTJBaFFNQkFzZ0FTQUZOZ0lZSUFGQjd3QTJBaFFNQXdzZ0FTQUZOZ0lZSUFGQjhBQTJBaFFNQWdzZ0FVSGJBRFlDRkNBQklBSXRBQWMyQWhnZ0FDZ0NBQ0FGTmdJY0RBRUxJQUFvQWdBaUFTQUZOZ0lZSUFGQnp3QTJBaFFMSUFCQkFTQUFLQUlBS0FJRUVRSUFDd3dDQ3dKQUlBRkJERWtOQUNBQ0xRQUNRY0VBUncwQUlBSXRBQU5CNUFCSERRQWdBaTBBQkVIdkFFY05BQ0FDTFFBRlFlSUFSdzBBSUFJdEFBWkI1UUJIRFFBZ0FpMEFDQ0VGSUFJdEFBY2hBeUFDTFFBS0lRY2dBaTBBQ1NFSklBSXRBQXdoQ2lBQ0xRQUxJUXNnQUNnQ0FDSUJJQUl0QUEwaURUWUNKQ0FCUWM0QU5nSVVJQUVnQ2lBTFFRaDBjallDSUNBQklBY2dDVUVJZEhJMkFod2dBU0FGSUFOQkNIUnlOZ0lZSUFCQkFTQUJLQUlFRVFJQUlBQWdEVG9BckFJZ0FFRUJOZ0tvQWd3Q0N5QUFLQUlBSWdFZ0JUWUNHQ0FCUWRBQU5nSVVJQUJCQVNBQUtBSUFLQUlFRVFJQURBRUxJQUFvQWdBaUFTQUROZ0lZSUFGQnhnQTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUdJQVEyQWdRZ0JpQUlOZ0lBUVFFaEJDQU1RUUJNRFFBZ0FDQU1JQUFvQWhnb0FoQVJBZ0FMSUFKQkVHb2tBQ0FFQ3pZQUlBQkJBRFlDMkFFZ0FFRUFOZ0s0QXlBQVFRQTJBcEFCSUFBb0F0QURJZ0JCQURZQ3BBRWdBRUVBTmdJWUlBQkNBRGNDREF2Yk9RRVJmeU1BUWFBQ2F5SUpKQUFnQUVHSUFtb2hDaUFBUWZnQmFpRU1JQUJCNkFGcUlRc2dBRUcwQVdvaER5QUFRY1FCYWlFUUlBQkJwQUZxSVJFZ0FDZ0N1QU1oQVFOQUFrQUNRQUpBSUFFTkFDQUFLQUxRQXlnQ0RFVUVRQ0FBS0FJWUlnSW9BZ1FpQVVVRVFDQUFJQUlvQWd3UkFBQkZCRUJCQUNFQkRBUUxJQUlvQWdRaEFRc2dBaWdDQUNJRkxRQUFJUU1nQVVFQmF5SUVCSDhnQlVFQmFnVWdBQ0FDS0FJTUVRQUFSUVJBUVFBaEFRd0VDeUFDS0FJRUlRUWdBaWdDQUFzaUFVRUJhaUVGSUFOQi93RkdJQUV0QUFBaUFVSFlBVVp4UlFSQUlBQW9BZ0FpQmlBRE5nSVlJQVpCTnpZQ0ZDQUFLQUlBSUFFMkFod2dBQ0FBS0FJQUtBSUFFUUVBQ3lBQUlBRTJBcmdESUFJZ0JFRUJhellDQkNBQ0lBVTJBZ0FNQVFzZ0FCRHhBMFVFUUVFQUlRRU1BZ3NnQUNnQ3VBTWhBUXNDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRkJBV3NPL2dFUEVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSSUJBZ1VKQlFVRkJRTUVCUWdGQlFVUER3OFBEdzhQRHdBSEJnb1FDeEVSRFEwTkRRME5EUTBORFEwTkRRME5EUkVSRVJFUkVSRVJEQkVSRVJFUkRoRUxJQUFvQWdBaUFrSG9BRFlDRkNBQVFRRWdBaWdDQkJFQ0FDQUFLQUxRQXlJQktBSU1CRUFnQUNnQ0FDSUNRY0FBTmdJVUlBQWdBaWdDQUJFQkFDQUFLQUxRQXlFQkN5QUxRZ0EzQUFBZ0MwSUFOd0FJSUF4Q2dZS0VpSkNnd0lBQk53QUlJQXhDZ1lLRWlKQ2d3SUFCTndBQUlBcENoWXFVcU5DZ3dZSUZOd0FJSUFwQ2hZcVVxTkNnd1lJRk53QUFJQUJDQURjRHNBSWdBRUVBTmdJb0lBQkNBRGNEbUFJZ0FFRUFPZ0NzQWlBQVFvR0FCRGNDcEFJZ0FFRUFPZ0NpQWlBQVFZRUNPd0dnQWlBQlFRRTJBZ3dNRkF0QkFDRUJJQUJCQUVFQVFRQVF5Z0lORXd3U0MwRUFJUUVnQUVFQVFRRkJBQkRLQWcwU0RCRUxRUUFoQVNBQVFRQkJBRUVCRU1vQ0RSRU1FQXRCQUNFQklBQkJBRUVCUVFFUXlnSU5FQXdQQ3lBQUtBSUFJZ0lnQVRZQ0dDQUNRVDgyQWhRZ0FDQUFLQUlBS0FJQUVRRUFEQThMSUFBb0FoZ2lCU2dDQkNFQklBVW9BZ0FoQXlBQUtBTFFBeWdDRUVVRVFDQUFLQUlBSWdKQlBEWUNGQ0FDUVJocVFmaUdBMEhRQUJCckdpQUFJQUFvQWdBb0FnQVJBUUFMSUFGRkJFQWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd1BDeUFGS0FJQUlRTWdCU2dDQkNFQkN5QURMUUFBSVFZZ0FVRUJheUlDQkg4Z0EwRUJhZ1VnQUNBRktBSU1FUUFBUlFSQVFRQWhBUXdQQ3lBRktBSUVJUUlnQlNnQ0FBc2lCQzBBQUNFQklBSkJBV3NpQXdSL0lBUkJBV29GSUFBZ0JTZ0NEQkVBQUVVRVFFRUFJUUVNRHdzZ0JTZ0NCQ0VESUFVb0FnQUxJUVFnQUNnQ0FDSUNJQVF0QUFBaUNqWUNHQ0FDUWVrQU5nSVVRUUVoQWlBQVFRRWdBQ2dDQUNnQ0JCRUNBQUpBQWtBQ1FDQUtRUUYwUVFacUlBWkJDSFFnQVhKSElBcEJCRXR5RFFBZ0NnUkFJQUFnQ2pZQzFBSWdCRUVCYWlFSUlBTkJBV3NoQkF3Q0N5QUFLQUxnQVVVTkFDQUFJQW8yQXRRQ0lBUkJBV29oQ0NBRFFRRnJJUVFNQWdzZ0FDZ0NBQ0lCUVF3MkFoUWdBQ0FCS0FJQUVRRUFJQUFnQ2pZQzFBSWdCRUVCYWlFSUlBTkJBV3NoQkNBS1JRMEJDeUFBUWRnQ2FpRU1RUUFoQmdOQUlBUkZCRUFnQUNBRktBSU1FUUFBUlFSQVFRQWhBUXdSQ3lBRktBSUFJUWdnQlNnQ0JDRUVDeUFJTFFBQUlRTUNRQ0FHUlEwQUlBWkJBbXNoQWlBR1FRRnJJUXRCQUNFQkEwQWdBeUFNSUFGQkFuUnFLQUlBS0FJQVJ3UkFJQVlnQVVFQmFpSUJSdzBCREFJTEN5QU1LQUlBS0FJQUlRRUNRQ0FHUVFGR0RRQkJBU0VESUFKQkEwOEVRQ0FMUVh4eElRMUJBQ0VIQTBBZ0RDQURRUUowYWlJQ0tBSU1LQUlBSWc0Z0FpZ0NDQ2dDQUNJUElBSW9BZ1FvQWdBaUVDQUNLQUlBS0FJQUlnSWdBU0FCSUFKSUd5SUNJQUlnRUVnYklnSWdBaUFQU0JzaUFpQUNJQTVJR3lFQklBTkJCR29oQXlBSFFRUnFJZ2NnRFVjTkFBc0xRUUFoQWlBTFFRTnhJZ2RGRFFBRFFDQU1JQU5CQW5ScUtBSUFLQUlBSWdzZ0FTQUJJQXRJR3lFQklBTkJBV29oQXlBQ1FRRnFJZ0lnQjBjTkFBc0xJQUZCQVdvaEF3c2dCRUVCYXlFSElBQW9BdGdCSVFFQ1FDQUFLQUlrSWd0QkFFb0VRQ0FCSUF0QjJBQnNha0VBSVFJRFFDQURJQUVvQWdCR0RRSWdBVUhZQUdvaEFTQUNRUUZxSWdJZ0MwY05BQXNoQVFzZ0FDZ0NBQ0lDSUFNMkFoZ2dBa0VFTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnRENBR1FRSjBhaUFCTmdJQUlBY0VmeUFJUVFGcUJTQUFJQVVvQWd3UkFBQkZCRUJCQUNFQkRCRUxJQVVvQWdRaEJ5QUZLQUlBQ3lFRUlBRWdCQzBBQUNJQ1FROXhOZ0lZSUFFZ0FrRUVkallDRkNBQUtBSUFJZ0lnQVNnQ0FEWUNHQ0FDSUFFb0FoUTJBaHdnQVNnQ0dDRUJJQUpCNmdBMkFoUWdBaUFCTmdJZ0lBQkJBU0FDS0FJRUVRSUFJQVJCQVdvaENDQUhRUUZySVFRZ0JrRUJhaUlHSUFwSERRQUxRUUFoQWdzZ0JFVUVRQ0FBSUFVb0Fnd1JBQUJGQkVCQkFDRUJEQThMSUFVb0FnQWhDQ0FGS0FJRUlRUUxJQUFnQ0MwQUFEWUNuQU1nQUNBRVFRRnJJZ01FZnlBSVFRRnFCU0FBSUFVb0Fnd1JBQUJGQkVCQkFDRUJEQThMSUFVb0FnUWhBeUFGS0FJQUN5SUVMUUFBTmdLZ0F5QUFJQU5CQVdzaUJnUi9JQVJCQVdvRklBQWdCU2dDREJFQUFFVUVRRUVBSVFFTUR3c2dCU2dDQkNFR0lBVW9BZ0FMSWdNdEFBQWlCRUVQY1RZQ3FBTWdBQ0FFUVFSMk5nS2tBeUFBS0FJQUlnUWdBQ2dDbkFNMkFoZ2dCQ0FBS0FLZ0F6WUNIQ0FFSUFBb0FxUUROZ0lnSUFRZ0FDZ0NxQU0yQWlRZ0JFSHJBRFlDRkVFQklRRWdBRUVCSUFRb0FnUVJBZ0FnQUNnQzBBTkJBRFlDRkNBQ1JRUkFJQUFnQUNnQ2tBRkJBV28yQXBBQkN5QUZJQVpCQVdzMkFnUWdCU0FEUVFGcU5nSUFJQUJCQURZQ3VBTU1EUXNnQUNnQ0FDSUNRZGNBTmdJVUlBQkJBU0FDS0FJRUVRSUFJQUJCQURZQ3VBTkJBaUVCREF3TElBQW9BaGdpQlNnQ0JDSUJSUVJBSUFBZ0JTZ0NEQkVBQUVVRVFFRUFJUUVNRFFzZ0JTZ0NCQ0VCQ3lBRktBSUFJZ0l0QUFBaEJDQUJRUUZySWdNRWZ5QUNRUUZxQlNBQUlBVW9BZ3dSQUFCRkJFQkJBQ0VCREEwTElBVW9BZ1FoQXlBRktBSUFDeUlCUVFGcUlRSWdBMEVCYXlFRElBRXRBQUFnQkVFSWRISWlCRUVDYXlFQklBUkJBMDhFUUFOQUlBRWhCQ0FEUlFSQUlBQWdCU2dDREJFQUFFVUVRRUVBSVFFTUR3c2dCU2dDQkNFRElBVW9BZ0FoQWdzZ0FpMEFBQ0VCSUFOQkFXc2lCd1IvSUFKQkFXb0ZJQUFnQlNnQ0RCRUFBRVVFUUVFQUlRRU1Ed3NnQlNnQ0JDRUhJQVVvQWdBTElnTXRBQUFoQWlBQUtBSUFJZ1lnQVRZQ0dDQUdRZEVBTmdJVUlBQW9BZ0FnQWpZQ0hDQUFRUUVnQUNnQ0FDZ0NCQkVDQUFKQUFrQUNRQ0FCUVNCUEJFQWdBQ2dDQUNJR0lBRTJBaGdnQmtFZE5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUF3QkN5QUJRUkJKRFFFTElBRWdDbXBCRUdzZ0Fqb0FBQXdCQ3lBQklBdHFJQUpCRDNFaUJqb0FBQ0FCSUF4cUlBSkJCSFlpQVRvQUFDQUJJQVpQRFFBZ0FDZ0NBQ0lCSUFJMkFoZ2dBVUVlTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQTBFQmFpRUNJQWRCQVdzaEF5QUVRUUpySVFFZ0JFRUNTdzBBQ3dzZ0FRUkFJQUFvQWdBaUJFRU1OZ0lVSUFBZ0JDZ0NBQkVCQUFzZ0JTQUROZ0lFSUFVZ0FqWUNBQXdNQ3lBQUtBSVlJZ1VvQWdRaUFVVUVRQ0FBSUFVb0Fnd1JBQUJGRFFvZ0JTZ0NCQ0VCQ3lBRktBSUFJZ0l0QUFBaEJDQUJRUUZySWdFRWZ5QUNRUUZxQlNBQUlBVW9BZ3dSQUFCRkRRb2dCU2dDQkNFQklBVW9BZ0FMSWdKQkFXb2hBeUFCUVFGcklRRWdBaTBBQUNBRVFRaDBjaUlDUVFKcklRZ2dBa0VUVHdSQUEwQWdBVVVFUUNBQUlBVW9BZ3dSQUFCRkRRd2dCU2dDQUNFRElBVW9BZ1FoQVFzZ0FDZ0NBQ0lDSUFNdEFBQWlCellDR0NBQ1FkSUFOZ0lVUVFFaEFpQUFRUUVnQUNnQ0FDZ0NCQkVDQUVFQUlRUWdDVUVBT2dDQUFpQURRUUZxSVFNZ0FVRUJheUVCQTBBZ0FVVUVRQ0FBSUFVb0Fnd1JBQUJGRFEwZ0JTZ0NBQ0VESUFVb0FnUWhBUXNnQ1VHQUFtb2dBbW9nQXkwQUFDSUdPZ0FBSUFOQkFXb2hBeUFCUVFGcklRRWdCQ0FHYWlFRUlBSkJBV29pQWtFUlJ3MEFDeUFBS0FJQUlnSWdDUzBBZ1FJMkFoZ2dBaUFKTFFDQ0FqWUNIQ0FDSUFrdEFJTUNOZ0lnSUFJZ0NTMEFoQUkyQWlRZ0FpQUpMUUNGQWpZQ0tDQUNJQWt0QUlZQ05nSXNJQUlnQ1MwQWh3STJBakFnQ1MwQWlBSWhCaUFDUWRnQU5nSVVJQUlnQmpZQ05DQUFRUUlnQWlnQ0JCRUNBQ0FBS0FJQUlnSWdDUzBBaVFJMkFoZ2dBaUFKTFFDS0FqWUNIQ0FDSUFrdEFJc0NOZ0lnSUFJZ0NTMEFqQUkyQWlRZ0FpQUpMUUNOQWpZQ0tDQUNJQWt0QUk0Q05nSXNJQUlnQ1MwQWp3STJBakFnQ1MwQWtBSWhCaUFDUWRnQU5nSVVJQUlnQmpZQ05DQUFRUUlnQWlnQ0JCRUNBQ0FFUVlBQ1RTQUlRUkZySWdnZ0JFNXhSUVJBSUFBb0FnQWlBa0VKTmdJVUlBQWdBaWdDQUJFQkFBdEJBQ0VDSUFsQkFFR0FBaEJRSVFZZ0JBUkFBMEFnQVVVRVFDQUFJQVVvQWd3UkFBQkZEUTRnQlNnQ0FDRURJQVVvQWdRaEFRc2dBaUFHYWlBRExRQUFPZ0FBSUFOQkFXb2hBeUFCUVFGcklRRWdBa0VCYWlJQ0lBUkhEUUFMQ3lBUUlBZEJFR3NpQWtFQ2RHb2dEeUFIUVFKMGFpQUhRUkJ4SWc0YklRMGdBaUFISUE0YklnSkJCRTRFUUNBQUtBSUFJZ2NnQWpZQ0dDQUhRUjgyQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFJSUFScklRZ2dEU2dDQUNJQ1JRUkFJQUJCQUVHWUFpQUFLQUlFS0FJQUVRUUFJZ0pCQURZQ2xBSWdEU0FDTmdJQUN5QUNJQVlwQTRBQ053SUFJQUlnQmlrRGlBSTNBZ2dnQWlBR0xRQ1FBam9BRUNBTktBSUFRUkZxSUFaQmdBSVFheG9nQ0VFUVNnMEFDd3NnQ0FSQUlBQW9BZ0FpQWtFTU5nSVVJQUFnQWlnQ0FCRUJBQXNnQlNBQk5nSUVJQVVnQXpZQ0FBd0xDeUFBS0FJWUlnVW9BZ1FpQVVVRVFDQUFJQVVvQWd3UkFBQkZCRUJCQUNFQkRBc0xJQVVvQWdRaEFRc2dCU2dDQUNJRUxRQUFJUVlnQVVFQmF5SUNCSDhnQkVFQmFnVWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFGS0FJRUlRSWdCU2dDQUFzaUJFRUJhaUVESUFKQkFXc2hBaUFFTFFBQUlBWkJDSFJ5SWdGQkFtc2hCQ0FCUVFOUEJFQURRQ0FDUlFSQUlBQWdCU2dDREJFQUFFVUVRRUVBSVFFTURRc2dCU2dDQUNFRElBVW9BZ1FoQWdzZ0F5MEFBQ0VCSUFBb0FnQWlCa0hUQURZQ0ZDQUdJQUZCRDNFaUJqWUNHQ0FBS0FJQUlBRkJCSFkyQWh3Z0FFRUJJQUFvQWdBb0FnUVJBZ0FnQmtFRVR3UkFJQUFvQWdBaUJ5QUdOZ0lZSUFkQklEWUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTElCRWdCa0VDZEdvaUJ5Z0NBQ0lHUlFSQUlBQkJBRUdFQVNBQUtBSUVLQUlBRVFRQUlnWkJBRFlDZ0FFZ0J5QUdOZ0lBQ3lBRVFRRnJJUTBDUUFKQUFrQUNRQUovSUFGQkVFa2lEa1VFUUVFQUlRRWdCRUdBQVVzRVFFSEFsd01oQjBIQUFDRUlEQU1MQTBBZ0JpQUJRUUYwYWlJRVFvR0FoSUNRZ01BQU53RUFJQVJDZ1lDRWdKQ0F3QUEzQVFnZ0FVRUlhaUlCUWNBQVJ3MEFDeUFOUVFGMkRBRUxRY0FBSVFoQkFDRUJJQVJCd0FCTEJFQkJ3SmNESVFjTUFnc0RRQ0FHSUFGQkFYUnFJZ1JDZ1lDRWdKQ0F3QUEzQVFBZ0JFS0JnSVNBa0lEQUFEY0JDQ0FCUVFocUlnRkJ3QUJIRFFBTElBMExJUWhCZ0tFRElRY0NRQUpBQWtBQ1FBSkFJQWhCQkdzT0xnVUdCZ1lHQUFZR0JnWUdCZ0VHQmdZR0JnWUdCZ0lHQmdZR0JnWUdCZ1lHQXdZR0JnWUdCZ1lHQmdZR0JnUUdDMEdRb0FNaEJ3d0VDMEdRbndNaEJ3d0RDMEhnblFNaEJ3d0NDMEdRbkFNaEJ3d0JDMEdBbWdNaEJ3c2dBMEVCYWlFRElBSkJBV3NoQWd3QkN5QURRUUZxSVFNZ0FrRUJheUVDUWNDWEF5RUhJQWhCQUV3TkFRdEJBQ0VCQTBBQ2Z5QU9SUVJBSUFKRkJFQWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd1JDeUFGS0FJQUlRTWdCU2dDQkNFQ0N5QURMUUFBSVFRZ0FrRUJheUlDQkg4Z0EwRUJhZ1VnQUNBRktBSU1FUUFBUlFSQVFRQWhBUXdSQ3lBRktBSUVJUUlnQlNnQ0FBc2lBeTBBQUNBRVFRaDBjZ3dCQ3lBQ1JRUkFJQUFnQlNnQ0RCRUFBRVVFUUVFQUlRRU1FQXNnQlNnQ0FDRURJQVVvQWdRaEFnc2dBeTBBQUFzaEJDQUdJQWNnQVVFQ2RHb29BZ0JCQVhScUlBUTdBUUFnQTBFQmFpRURJQUpCQVdzaEFpQUJRUUZxSWdFZ0NFY05BQXNMUVFBaEJ5QUFLQUlBS0FKb1FRSk9CRUFEUUNBQUtBSUFJZ1FnQmlBSFFRRjBhaUlCTHdFQU5nSVlJQVFnQVM4QkFqWUNIQ0FFSUFFdkFRUTJBaUFnQkNBQkx3RUdOZ0lrSUFRZ0FTOEJDRFlDS0NBRUlBRXZBUW8yQWl3Z0JDQUJMd0VNTmdJd0lBRXZBUTRoQVNBRVFkOEFOZ0lVSUFRZ0FUWUNOQ0FBUVFJZ0JDZ0NCQkVDQUNBSFFUaEpJQWRCQ0dvaEJ3MEFDd3NnRFNBSVFRQWdDQ0FPRzJwcklnUkJBRW9OQUFzTElBUUVRQ0FBS0FJQUlnUkJERFlDRkNBQUlBUW9BZ0FSQVFBTElBVWdBallDQkNBRklBTTJBZ0FNQ2dzZ0FDZ0NHQ0lFS0FJRUlnTkZCRUFnQUNBRUtBSU1FUUFBUlFSQVFRQWhBUXdLQ3lBRUtBSUVJUU1MSUFRb0FnQWlBUzBBQUNFRklBTkJBV3NpQWdSL0lBRkJBV29GSUFBZ0JDZ0NEQkVBQUVVRVFFRUFJUUVNQ2dzZ0JDZ0NCQ0VDSUFRb0FnQUxJZ0V0QUFBZ0JVRUlkSEpCQkVjRVFDQUFLQUlBSWdOQkREWUNGQ0FBSUFNb0FnQVJBUUFMSUFKQkFXc2lBZ1IvSUFGQkFXb0ZJQUFnQkNnQ0RCRUFBRVVFUUVFQUlRRU1DZ3NnQkNnQ0JDRUNJQVFvQWdBTElnRXRBQUFoQXlBQ1FRRnJJZ0lFZnlBQlFRRnFCU0FBSUFRb0Fnd1JBQUJGQkVCQkFDRUJEQW9MSUFRb0FnUWhBaUFFS0FJQUN5SUJMUUFBSVFVZ0FDZ0NBQ0lHUWRRQU5nSVVJQVlnQlNBRFFRaDBjaUlETmdJWUlBQkJBU0FBS0FJQUtBSUVFUUlBSUFBZ0F6WUNtQUlnQkNBQ1FRRnJOZ0lFSUFRZ0FVRUJhallDQUF3SkN5QUFLQUlZSWdFb0FnUWhBeUFCS0FJQUlRSWdBQ2dDMEFNb0FoQkZCRUFnQUNnQ0FDSUVRVHcyQWhRZ0JFRVlha0hJaHdOQjBBQVFheG9nQUNBQUtBSUFLQUlBRVFFQUN3SkFBa0FnQUNnQ0pFRURTQTBBSUFORkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUNFQ0N5QUNMUUFBSVFVZ0EwRUJheUlFQkg4Z0FrRUJhZ1VnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUVFnQVNnQ0FBc2lBeTBBQUNBRlFRaDBja0VZUndSQUlBQW9BZ0FpQWtFTU5nSVVJQUFnQWlnQ0FCRUJBQXNnQkVFQmF5SUNCSDhnQTBFQmFnVWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRSWdBU2dDQUFzaUJDMEFBRUVOUndSQUlBQW9BZ0FpQTBIR0FEWUNGQ0FESUFBb0FyZ0ROZ0lZSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBa0VCYXlJQ0JIOGdCRUVCYWdVZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFJZ0FTZ0NBQXNpQkMwQUFDRUZJQUpCQVdzaUJnUi9JQVJCQVdvRklBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFR0lBRW9BZ0FMSWdSQkFXb2hBaUFHUVFGcklRTWdCQzBBQUNBRlFRaDBja0gvQVVjTkFDQURSUVJBSUFBZ0FTZ0NEQkVBQUVVRVFFRUFJUUVNQ3dzZ0FTZ0NCQ0VESUFFb0FnQWhBZ3NnQWtFQmFpRUVJQU5CQVdzaEF5QUNMUUFBUVFOSEJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUVDeUFFUVFGcUlRSWdBMEVCYXlFRElBQW9BdGdCSWdZb0FsZ2dCQzBBQUVjTkFDQURSUVJBSUFBZ0FTZ0NEQkVBQUVVRVFFRUFJUUVNQ3dzZ0FDZ0MyQUVoQmlBQktBSUVJUU1nQVNnQ0FDRUNDeUFDUVFGcUlRUWdBMEVCYXlFRElBWW9BZ0FnQWkwQUFFY0VRQ0FFSVFJTUFRc2dBMFVFUUNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBQW9BdGdCSVFZZ0FTZ0NCQ0VESUFFb0FnQWhCQXNnQkVFQmFpRUNJQU5CQVdzaEF5QUdLQUt3QVNBRUxRQUFSdzBBSUFORkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUNFQ0N5QUNRUUZxSVFRZ0EwRUJheUVESUFJdEFBQkJnQUZIQkVBZ0JDRUNEQUVMSUFORkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUNFRUN5QUVMUUFBSVFVZ0EwRUJheUlEQkg4Z0JFRUJhZ1VnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FBc2lCRUVCYWlFQ0lBTkJBV3NoQXlBRUxRQUFJQVZCQ0hSeURRQWdBMFVFUUNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFJUUlMSUFJdEFBQWhCQ0FEUVFGcklnTUVmeUFDUVFGcUJTQUFJQUVvQWd3UkFBQkZCRUJCQUNFQkRBc0xJQUVvQWdRaEF5QUJLQUlBQ3lJRlFRRnFJUUlnQTBFQmF5RURJQVV0QUFBZ0JFRUlkSElOQUNBRFJRUkFJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBaEFnc2dBa0VCYWlFRUlBTkJBV3NoQXlBQ0xRQUFCRUFnQkNFQ0RBRUxJQU5GQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQ0VFQ3lBRUxRQUFJUVVnQTBFQmF5SURCSDhnQkVFQmFnVWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUFzaUJFRUJhaUVDSUFOQkFXc2hBeUFFTFFBQUlBVkJDSFJ5UVFGSERRQWdBMFVFUUNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFJUUlMSUFJdEFBQWhCQ0FEUVFGcklnTUVmeUFDUVFGcUJTQUFJQUVvQWd3UkFBQkZCRUJCQUNFQkRBc0xJQUVvQWdRaEF5QUJLQUlBQ3lJRlFRRnFJUUlnQTBFQmF5RURJQVV0QUFBZ0JFRUlkSElOQUNBRFJRUkFJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBaEFnc2dBa0VCYWlFRUlBTkJBV3NoQXlBQ0xRQUFCRUFnQkNFQ0RBRUxJQU5GQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQ0VFQ3lBRUxRQUFJUVVnQTBFQmF5SURCSDhnQkVFQmFnVWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUFzaUJFRUJhaUVDSUFOQkFXc2hBeUFFTFFBQUlBVkJDSFJ5UVFGSERRQWdBMFVFUUNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFJUUlMSUFJdEFBQWhCQ0FEUVFGcklnTUVmeUFDUVFGcUJTQUFJQUVvQWd3UkFBQkZCRUJCQUNFQkRBc0xJQUVvQWdRaEF5QUJLQUlBQ3lJRlFRRnFJUUlnQTBFQmF5RURJQVV0QUFBZ0JFRUlkSEpGRFFFTElBQW9BZ0FpQkVFY05nSVVJQUFnQkNnQ0FCRUJBQXNnQUVFQk5nS3dBaUFCSUFNMkFnUWdBU0FDTmdJQURBZ0xJQUFnQUNnQzBBTWdBVUVDZEdwQjRBWnJLQUlBRVFBQURRZEJBQ0VCREFZTElBQWdBQ2dDMEFNb0Fod1JBQUFOQmtFQUlRRU1CUXNnQUNnQ0FDSUNJQUUyQWhnZ0FrSGVBRFlDRkNBQVFRRWdBQ2dDQUNnQ0JCRUNBQXdGQ3lBQUtBSVlJZ1FvQWdRaUEwVUVRQ0FBSUFRb0Fnd1JBQUJGQkVCQkFDRUJEQVVMSUFRb0FnUWhBd3NnQkNnQ0FDSUJMUUFBSVFVZ0EwRUJheUlDQkg4Z0FVRUJhZ1VnQUNBRUtBSU1FUUFBUlFSQVFRQWhBUXdGQ3lBRUtBSUVJUUlnQkNnQ0FBc2lBUzBBQUNFRElBQW9BZ0FpQmtIZEFEWUNGQ0FHSUFBb0FyZ0ROZ0lZSUFBb0FnQWdBeUFGUVFoMGNpSURRUUpySWdVMkFod2dBRUVCSUFBb0FnQW9BZ1FSQWdBZ0JDQUNRUUZyTmdJRUlBUWdBVUVCYWpZQ0FDQURRUU5KRFFRZ0FDQUZJQUFvQWhnb0FoQVJBZ0FNQkFzZ0FDZ0NBQ0lDSUFFMkFoZ2dBa0hHQURZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFNQXd0QkFDRUJJQUJCQVVFQVFRQVF5Z0lOQWd3QkMwRUFJUUVMSUFsQm9BSnFKQUFnQVE4TFFRQWhBU0FBUVFBMkFyZ0REQUFMQUF1U0FRRUNmd0pBQWtBZ0FDZ0N1QU1pQVFSL0lBRUZJQUFROFFORkRRRWdBQ2dDdUFNTElBQW9BdEFES0FJVUlnRkIwQUZxUmdSQUlBQW9BZ0FpQWlBQk5nSVlJQUpCNUFBMkFoUWdBRUVESUFBb0FnQW9BZ1FSQWdBZ0FFRUFOZ0s0QXd3Q0N5QUFJQUVnQUNnQ0dDZ0NGQkVEQUEwQkMwRUFEd3NnQUNnQzBBTWlBQ0FBS0FJVVFRRnFRUWR4TmdJVVFRRUwxd0VCQm44Z0FDZ0NHQ0lCS0FJRUlnSkZCRUFnQUNBQktBSU1FUUFBUlFSQVFRQVBDeUFCS0FJRUlRSUxJQUVvQWdBaUF5MEFBQ0VFSUFKQkFXc2lCUVIvSUFOQkFXb0ZJQUFnQVNnQ0RCRUFBRVVFUUVFQUR3c2dBU2dDQkNFRklBRW9BZ0FMSWdJdEFBQWhBeUFBS0FJQUlnWkIzUUEyQWhRZ0JpQUFLQUs0QXpZQ0dDQUFLQUlBSUFNZ0JFRUlkSElpQTBFQ2F5SUVOZ0ljSUFCQkFTQUFLQUlBS0FJRUVRSUFJQUVnQlVFQmF6WUNCQ0FCSUFKQkFXbzJBZ0FnQTBFRFR3UkFJQUFnQkNBQUtBSVlLQUlRRVFJQUMwRUJDODhDQVFWL0lBQW9BZ0FpQXlBQUtBSzRBeUlDTmdJWUlBTkIvQUEyQWhRZ0FDZ0NBQ0FCTmdJY0lBQkJmeUFBS0FJQUtBSUVFUUlBSUFGQkJtcEJCM0ZCMEFGeUlRTWdBVUVCYTBFSGNVSFFBWEloQkNBQlFRSnFRUWR4UWRBQmNpRUZJQUZCQVdwQkIzRkIwQUZ5SVFFRFFBSkFBa0FnQWtIQUFVZ05BQ0FCSUFKR0lBSkIyQUZyUVhoSmNpQUNJQVZHY2cwQklBSWdCRVlnQWlBRFJuSU5BQ0FBS0FJQUlnRWdBallDR0NBQlFlTUFOZ0lVSUFBb0FnQkJBVFlDSENBQVFRUWdBQ2dDQUNnQ0JCRUNBQ0FBUVFBMkFyZ0RRUUVQQ3lBQUtBSUFJZ1lnQWpZQ0dDQUdRZU1BTmdJVUlBQW9BZ0JCQWpZQ0hDQUFRUVFnQUNnQ0FDZ0NCQkVDQUNBQUVQRURCRUFnQUNnQ3VBTWhBZ3dDQlVFQUR3c0FDd3NnQUNnQ0FDSUJJQUkyQWhnZ0FVSGpBRFlDRkNBQUtBSUFRUU0yQWh3Z0FFRUVJQUFvQWdBb0FnUVJBZ0JCQVF1d0RRRUlmMEVDSVFFQ1FDQUFLQUxNQXlJRUtBSVVEUUFEUUFKQUlBQUNmd0pBQWtBZ0FDQUFLQUxRQXlnQ0JCRUFBQ0lCUVFGSEJFQWdBVUVDUncwR0lBUkJBVFlDRkNBRUtBSVlSUTBCUVFJaEFTQUFLQUxRQXlnQ0VFVU5CaUFBS0FJQUlnRkJQallDRkNBQUlBRW9BZ0FSQVFCQkFnOExBa0FDUUFKQUlBUW9BaGdPQWdJQkFBc2dBQ2dDMUFJaEFRd0ZDd0pBSUFBb0FpQkIzUDhEVEFSQUlBQW9BaHhCM2Y4RFNBMEJDeUFBS0FJQVFxcUFnSURBK3o4M0FoUWdBQ0FBS0FJQUtBSUFFUUVBQ3lBQUtBTFVBU0lCUVExclFYcE5CRUFnQUNnQ0FDSUNJQUUyQWhnZ0FrRVFOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ2dDSkNJQ1FRdE9CRUFnQUNnQ0FDSUJJQUkyQWhnZ0FVRWJOZ0lVSUFBb0FnQkJDallDSENBQUlBQW9BZ0FvQWdBUkFRQWdBQ2dDSkNFQ0N5QUFRb0dBZ0lBUU53SzhBaUFDUVFCS0JFQWdBQ2dDMkFFaEFVRUFJUWhCQVNFRlFRRWhBd05BQWtBZ0FTZ0NDQ0lHUVFWclFYeFBCRUFnQVNnQ0RDSUhRUVZyUVh0TERRRUxJQUFvQWdBaUFrRVROZ0lVSUFBZ0FpZ0NBQkVCQUNBQUtBSWtJUUlnQVNnQ0RDRUhJQUFvQXNBQ0lRVWdBU2dDQ0NFR0lBQW9BcndDSVFNTElBQWdCU0FISUFVZ0Iwb2JJZ1UyQXNBQ0lBQWdBeUFHSUFNZ0Jrb2JJZ00yQXJ3Q0lBRkIyQUJxSVFFZ0NFRUJhaUlJSUFKSURRQUxDeUFBS0FMY0FRMENJQUFvQXVBQkJFQWdBQ2dDMUFJTkF3c0NRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUFvQXFBRElnRkI5d0JNQkVBZ0FRNWtBUTRPQWc0T0RnNEREZzRPRGc0T0JBNE9EZzRPRGc0T0JRNE9EZzRPRGc0T0RnNEdEZzRPRGc0T0RnNE9EZzRPQnc0T0RnNE9EZzRPRGc0T0RnNE9FUTRPRGc0T0RnNE9EZzRPRGc0T0RnNElEZzRPRGc0T0RnNE9EZzRPRGc0T0RnNE9DUTRMSUFGQndnRk1CRUFnQVVINEFFWU5DaUFCUVk4QlJnMExJQUZCcUFGSERRNGdBRUUvTmdLMEF5QUFRY0NYQXpZQ3NBTWdBRUVOTmdLc0EwRU5EQklMSUFGQnd3RkdEUXNnQVVIZ0FVWU5EQ0FCUWY4QlJ3ME5JQUJCUHpZQ3RBTWdBRUhBbHdNMkFyQURJQUJCRURZQ3JBTkJFQXdSQ3lBQVFRQTJBclFESUFCQndKY0ROZ0t3QXlBQVFRRTJBcXdEUVFFTUVBc2dBRUVETmdLMEF5QUFRWUNoQXpZQ3NBTWdBRUVDTmdLc0EwRUNEQThMSUFCQkNEWUN0QU1nQUVHUW9BTTJBckFESUFCQkF6WUNyQU5CQXd3T0N5QUFRUTgyQXJRRElBQkJrSjhETmdLd0F5QUFRUVEyQXF3RFFRUU1EUXNnQUVFWU5nSzBBeUFBUWVDZEF6WUNzQU1nQUVFRk5nS3NBMEVGREF3TElBQkJJellDdEFNZ0FFR1FuQU0yQXJBRElBQkJCallDckFOQkJnd0xDeUFBUVRBMkFyUURJQUJCZ0pvRE5nS3dBeUFBUVFjMkFxd0RRUWNNQ2dzZ0FFRS9OZ0swQXlBQVFjQ1hBellDc0FNZ0FFRUpOZ0tzQTBFSkRBa0xJQUJCUHpZQ3RBTWdBRUhBbHdNMkFyQURJQUJCQ2pZQ3JBTkJDZ3dJQ3lBQVFUODJBclFESUFCQndKY0ROZ0t3QXlBQVFRczJBcXdEUVFzTUJ3c2dBRUUvTmdLMEF5QUFRY0NYQXpZQ3NBTWdBRUVNTmdLc0EwRU1EQVlMSUFCQlB6WUN0QU1nQUVIQWx3TTJBckFESUFCQkRqWUNyQU5CRGd3RkN5QUFRVDgyQXJRRElBQkJ3SmNETmdLd0F5QUFRUTgyQXF3RFFROE1CQXNnQUNnQ0FDSUJRUkUyQWhRZ0FTQUFLQUtjQXpZQ0dDQUFLQUlBSUFBb0FxQUROZ0ljSUFBb0FnQWdBQ2dDcEFNMkFpQWdBQ2dDQUNBQUtBS29BellDSkNBQUlBQW9BZ0FvQWdBUkFRQWdBQ2dDSkNFQ0lBQW9BcXdEREFNTElBUW9BaEJGQkVBZ0FDZ0NBQ0lCUVNRMkFoUWdBQ0FCS0FJQUVRRUFDeUFBS0FMVUFrVU5CQ0FBRU5rRlFRRVBDMEVDSVFFZ0FDZ0NrQUVpQWlBQUtBS1lBVTROQkNBQUlBSTJBcGdCREFRTElBQkJQellDdEFNZ0FFSEFsd00yQXJBRElBQkJDRFlDckFOQkNBc2lBVFlDeUFJZ0FDQUJOZ0xFQWlBQ1FRQktCRUFnQUNnQzJBRWhBVUVBSVFNRFFDQUJJQUFvQXF3RElnSTJBaWdnQVNBQ05nSWtJQUVnQVNnQ0NDQUFLQUljYkNBQ0lBQW9BcndDYkJCZU5nSWNJQUVnQVNnQ0RDQUFLQUlnYkNBQUtBS3NBeUFBS0FMQUFtd1FYallDSUNBQklBRW9BZ2dnQUNnQ0hHd2dBQ2dDdkFJUVhqWUNMQ0FCS0FJTUlBQW9BaUJzSUFBb0FzQUNFRjRoQWlBQlFRQTJBbEFnQVVFQk5nSTBJQUVnQWpZQ01DQUJRZGdBYWlFQklBTkJBV29pQXlBQUtBSWtTQTBBQ3lBQUtBS3NBeUVCQ3lBQUlBQW9BaUFnQVNBQUtBTEFBbXdRWGpZQ3pBSkJBU0VGSUFBb0Fzd0RJQUFvQXRRQ0lnRWdBQ2dDSkU0RWZ5QUFLQUxnQVVFQVJ3VkJBUXMyQWhBTElBRkZCRUFnQkVFQ05nSVlEQUVMQ3lBRVFRQTJBaGhCQVE4TElBRUxRd0VCZnlBQUtBTE1BeUlCUVFFMkFoZ2dBVUlBTndJUUlBRkJqd0UyQWdBZ0FDQUFLQUlBS0FJUUVRRUFJQUFnQUNnQzBBTW9BZ0FSQVFBZ0FFRUFOZ0tnQVFzY0FDQUFJQUFvQXRRREtBSUlFUUVBSUFBb0Fzd0RRWThCTmdJQUN3d0FJQUFvQWhoQkFUWUNKQXVMQVFFQ2Z5QUFLQUlZSWdFb0FpQkJBVUdBSUNBQktBSWNFRzBpQWtVRVFDQUJLQUlrQkVBZ0FDZ0NBQ0lDUVNzMkFoUWdBQ0FDS0FJQUVRRUFDeUFBS0FJQUlnSkIrd0EyQWhRZ0FFRi9JQUlvQWdRUkFnQWdBU2dDSUVIL0FUb0FBQ0FCS0FJZ1Fka0JPZ0FCUVFJaEFnc2dBVUVBTmdJa0lBRWdBallDQkNBQklBRW9BaUEyQWdCQkFRdFVBUUovSUFGQkFFb0VRQ0FBS0FJWUlnSW9BZ1FpQXlBQlNBUkFBMEFnQUNBQ0tBSU1FUUFBR2lBQklBTnJJZ0VnQWlnQ0JDSURTZzBBQ3dzZ0FpQURJQUZyTmdJRUlBSWdBaWdDQUNBQmFqWUNBQXNMZXdFQmZ5QUFLQUlZSWdKRkJFQWdBQ0FBUVFCQktDQUFLQUlFS0FJQUVRUUFJZ0kyQWhnZ0FpQUFRUUJCZ0NBZ0FDZ0NCQ2dDQUJFRUFEWUNJQ0FBS0FJWUlRSUxJQUlnQVRZQ0hDQUNRWWNCTmdJWUlBSkJpQUUyQWhRZ0FrR0pBVFlDRUNBQ1FZb0JOZ0lNSUFKQml3RTJBZ2dnQWtJQU53SUFDODBCQVFSL0l3QkJFR3NpQkNRQUlBQW9BaFFpQTBITkFVY0VRQ0FBS0FJQUlnVWdBellDR0NBRlFSVTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN3SkFJQUFvQW93QklnVWdBQ2dDZENJR1R3UkFJQUFvQWdBaUFVSCtBRFlDRkNBQVFYOGdBU2dDQkJFQ0FFRUFJUUlNQVFzZ0FDZ0NDQ0lEQkVBZ0F5QUdOZ0lJSUFNZ0JUWUNCQ0FBSUFNb0FnQVJBUUFMSUFSQkFEWUNEQ0FBSUFFZ0JFRU1haUFDSUFBb0FzQURLQUlFRVFjQUlBQWdCQ2dDRENJQ0lBQW9Bb3dCYWpZQ2pBRUxJQVJCRUdva0FDQUNDNXRFQVJWL0FrQUNRQUpBQWtBQ1FDQUFLQUlVSWdGQnlnRnJEZ01BQVFNQ0N5QUFJQUJCQVVFY0lBQW9BZ1FvQWdBUkJBQWlEVFlDdkFNZ0RVRUFOZ0lJSUExQjNBRTJBZ1FnRFVIZEFUWUNBQ0FBS0FMVUFTSUJRUWhIQkVBZ0FDZ0NBQ0lDSUFFMkFoZ2dBa0VRTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQUNnQ0ZDSUJRY29CUndSQUlBQW9BZ0FpQWlBQk5nSVlJQUpCRlRZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMQWtBZ0FDZ0NyQU1pQWlBQUtBSXdiQ0lESUFBb0FqUWlCRTBFUUNBQUlBQW9BaHdnQWhCZU5nSndJQUFvQWlBZ0FDZ0NyQU1RWGlFQklBQkNnWUNBZ0JBM0FzUUNJQUFnQVRZQ2RFRUJJUUVNQVFzZ0JFRUJkQ0FEVHdSQUlBQWdBQ2dDSEVFQmRDQUNFRjQyQW5BZ0FDZ0NJRUVCZENBQUtBS3NBeEJlSVFFZ0FFS0NnSUNBSURjQ3hBSWdBQ0FCTmdKMFFRSWhBUXdCQzBFRElRRWdCRUVEYkNBRFR3UkFJQUFnQUNnQ0hFRURiQ0FDRUY0MkFuQWdBQ2dDSUVFRGJDQUFLQUtzQXhCZUlRSWdBRUtEZ0lDQU1EY0N4QUlnQUNBQ05nSjBEQUVMSUFSQkFuUWdBMDhFUUNBQUlBQW9BaHhCQW5RZ0FoQmVOZ0p3SUFBb0FpQkJBblFnQUNnQ3JBTVFYaUVCSUFCQ2hJQ0FnTUFBTndMRUFpQUFJQUUyQW5SQkJDRUJEQUVMUVFVaEFTQUVRUVZzSUFOUEJFQWdBQ0FBS0FJY1FRVnNJQUlRWGpZQ2NDQUFLQUlnUVFWc0lBQW9BcXdERUY0aEFpQUFRb1dBZ0lEUUFEY0N4QUlnQUNBQ05nSjBEQUVMUVFZaEFTQUVRUVpzSUFOUEJFQWdBQ0FBS0FJY1FRWnNJQUlRWGpZQ2NDQUFLQUlnUVFac0lBQW9BcXdERUY0aEFpQUFRb2FBZ0lEZ0FEY0N4QUlnQUNBQ05nSjBEQUVMUVFjaEFTQUVRUWRzSUFOUEJFQWdBQ0FBS0FJY1FRZHNJQUlRWGpZQ2NDQUFLQUlnUVFkc0lBQW9BcXdERUY0aEFpQUFRb2VBZ0lEd0FEY0N4QUlnQUNBQ05nSjBEQUVMSUFSQkEzUWdBMDhFUUNBQUlBQW9BaHhCQTNRZ0FoQmVOZ0p3SUFBb0FpQkJBM1FnQUNnQ3JBTVFYaUVCSUFCQ2lJQ0FnSUFCTndMRUFpQUFJQUUyQW5SQkNDRUJEQUVMUVFraEFTQUVRUWxzSUFOUEJFQWdBQ0FBS0FJY1FRbHNJQUlRWGpZQ2NDQUFLQUlnUVFsc0lBQW9BcXdERUY0aEFpQUFRb21BZ0lDUUFUY0N4QUlnQUNBQ05nSjBEQUVMUVFvaEFTQUVRUXBzSUFOUEJFQWdBQ0FBS0FJY1FRcHNJQUlRWGpZQ2NDQUFLQUlnUVFwc0lBQW9BcXdERUY0aEFpQUFRb3FBZ0lDZ0FUY0N4QUlnQUNBQ05nSjBEQUVMUVFzaEFTQUVRUXRzSUFOUEJFQWdBQ0FBS0FJY1FRdHNJQUlRWGpZQ2NDQUFLQUlnUVF0c0lBQW9BcXdERUY0aEFpQUFRb3VBZ0lDd0FUY0N4QUlnQUNBQ05nSjBEQUVMUVF3aEFTQUVRUXhzSUFOUEJFQWdBQ0FBS0FJY1FReHNJQUlRWGpZQ2NDQUFLQUlnUVF4c0lBQW9BcXdERUY0aEFpQUFRb3lBZ0lEQUFUY0N4QUlnQUNBQ05nSjBEQUVMUVEwaEFTQUVRUTFzSUFOUEJFQWdBQ0FBS0FJY1FRMXNJQUlRWGpZQ2NDQUFLQUlnUVExc0lBQW9BcXdERUY0aEFpQUFRbzJBZ0lEUUFUY0N4QUlnQUNBQ05nSjBEQUVMUVE0aEFTQUVRUTVzSUFOUEJFQWdBQ0FBS0FJY1FRNXNJQUlRWGpZQ2NDQUFLQUlnUVE1c0lBQW9BcXdERUY0aEFpQUFRbzZBZ0lEZ0FUY0N4QUlnQUNBQ05nSjBEQUVMUVE4aEFTQUFLQUljSVFZZ0JFRVBiQ0FEVHdSQUlBQWdCa0VQYkNBQ0VGNDJBbkFnQUNnQ0lFRVBiQ0FBS0FLc0F4QmVJUUlnQUVLUGdJQ0E4QUUzQXNRQ0lBQWdBallDZEF3QkN5QUFJQVpCQkhRZ0FoQmVOZ0p3SUFBb0FpQkJCSFFnQUNnQ3JBTVFYaUVCSUFCQ2tJQ0FnSUFDTndMRUFpQUFJQUUyQW5SQkVDRUJDd0pBSUFBb0FpUWlCRUVBVEEwQUlBQW9BdGdCSVFJZ0JFRUlUd1JBSUFSQitQLy8vd2R4SVFaQkFDRURBMEFnQWlBQk5nS1FCU0FDSUFFMkFvd0ZJQUlnQVRZQ3VBUWdBaUFCTmdLMEJDQUNJQUUyQXVBRElBSWdBVFlDM0FNZ0FpQUJOZ0tJQXlBQ0lBRTJBb1FESUFJZ0FUWUNzQUlnQWlBQk5nS3NBaUFDSUFFMkF0Z0JJQUlnQVRZQzFBRWdBaUFCTmdLQUFTQUNJQUUyQW53Z0FpQUJOZ0lvSUFJZ0FUWUNKQ0FDUWNBRmFpRUNJQU5CQ0dvaUF5QUdSdzBBQ3dzZ0JFRUhjU0lFUlEwQVFRQWhBd05BSUFJZ0FUWUNLQ0FDSUFFMkFpUWdBa0hZQUdvaEFpQURRUUZxSWdNZ0JFY05BQXNMSUFBb0FpUWlDa0VBU2dSQVFRaEJCQ0FBS0FKTUd5RUpJQUFvQXNnQ0lRTWdBQ2dDeEFJaEJDQUFLQUxZQVNJSElRZ0RRQUpBSUFrZ0JDSUJTQTBBUVFFaEJpQUlLQUlJUVFGMElRSWdBQ2dDdkFJaERBTkFJQXdnQWlBR2JHOUZCRUFnQ1NBRUlBWkJBWFFpQm13aUFVNE5BUXdDQ3dzZ0JDQUdiQ0VCQ3lBSUlBRTJBaVFDUUNBSklBTWlBa2dOQUVFQklRWWdDQ2dDREVFQmRDRU1JQUFvQXNBQ0lRNERRQ0FPSUFZZ0RHeHZSUVJBSUFrZ0F5QUdRUUYwSWdac0lnSk9EUUVNQWdzTElBTWdCbXdoQWdzZ0NDQUNOZ0lvQWtBZ0FrRUJkQ0lHSUFGSUJFQWdDQ0FHTmdJa0RBRUxJQUlnQVVFQmRDSUJUQTBBSUFnZ0FUWUNLQXNnQ0VIWUFHb2hDQ0FMUVFGcUlnc2dDa2NOQUF0QkFDRUdBMEFnQnlBSEtBSWtJQWNvQWdnZ0FDZ0NIR3hzSUFBb0Fxd0RJQUFvQXJ3Q2JCQmVOZ0lzSUFjZ0J5Z0NLQ0FIS0FJTUlBQW9BaUJzYkNBQUtBS3NBeUFBS0FMQUFtd1FYallDTUNBSFFkZ0FhaUVISUFaQkFXb2lCaUFBS0FJa0lncElEUUFMQ3lBQUtBSXNRUUZySWdGQkJrMEVRQ0FCUVFKMFFZQ1JBMm9vQWdBaENnc2dBQ0FLTmdKNElBQkJBU0FLSUFBb0FsUWJOZ0o4SUFBZ0FCRFRCUVIvSUFBb0FzQUNCVUVCQ3pZQ2dBRWdBQ0FBUVFGQmdBb2dBQ2dDQkNnQ0FCRUVBRUVBUVlBRUVGQWlBa0dBQkdvaUFUWUMwQUlEUUNBQklBVnFJQVU2QUFBZ0FTQUZRUUZ5SWdOcUlBTTZBQUFnQVNBRlFRSnlJZ05xSUFNNkFBQWdBU0FGUVFOeUlnTnFJQU02QUFBZ0FTQUZRUVJ5SWdOcUlBTTZBQUFnQVNBRlFRVnlJZ05xSUFNNkFBQWdBU0FGUVFaeUlnTnFJQU02QUFBZ0FTQUZRUWR5SWdOcUlBTTZBQUFnQlVFSWFpSUZRWUFDUncwQUN5QUNRWUFHYWtIL0FVR0FCQkJRR2dKQUFrQWdBQ2dDZEVVTkFDQUFLQUp3UlEwQUlBQW9BbmhCQUVvTkFRc2dBQ2dDQUNJQlFTRTJBaFFnQUNBQktBSUFFUUVBQ3lBTlFRQTJBZ3dnQUJEVEJTRUJJQTFDQURjQ0ZDQU5JQUUyQWhBQ1FDQUFLQUpVUlFSQUlBQkJBRFlDYkNBQVFnQTNBbVFNQVFzZ0FDZ0NRRVVFUUNBQVFRQTJBbXdnQUVJQU53SmtDeUFBS0FKRUJFQWdBQ2dDQUNJQlFUQTJBaFFnQUNBQktBSUFFUUVBQ3dKQUlBQW9BbmhCQTBjRVFDQUFRUUEyQW9nQklBQkJBRFlDYkNBQVFnRTNBbVFNQVFzZ0FDZ0NpQUVFUUNBQVFRRTJBbWdNQVFzZ0FDZ0NYQVJBSUFCQkFUWUNiQXdCQ3lBQVFRRTJBbVFMSUFBb0FtUUVRQ0FBSUFCQkFVSFlBQ0FBS0FJRUtBSUFFUVFBSWdFMkF1UURJQUZCQURZQ1JDQUJRZjRCTmdJTUlBRkIvd0UyQWdnZ0FVR0FBallDQUNBQlFRQTJBalFnQUNnQ2VFRUZUZ1JBSUFBb0FnQkN1WUNBZ01BQU53SVVJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0FDZ0NZQ0lKUVlFQ1RnUkFJQUFvQWdCQ3U0Q0FnSUFnTndJVUlBQWdBQ2dDQUNnQ0FCRUJBQ0FBS0FKZ0lRa0xJQUFvQW5naUJrRUJheUlCUVhoeElRZ2dBVUVIY1NFQ0lBQW9BdVFESVFjZ0JrRUNTQ0VLSUFaQkFtdEJCMGtoQzBFQklRRURRQ0FCSWdSQkFXb2lBU0VEQWtBZ0NnMEFJQXRGQkVBZ0F5QURiQ0lGSUFWc0lnVWdCV3doREVFQUlRVURRQ0FESUF4c0lRTWdCVUVJYWlJRklBaEhEUUFMQzBFQUlRVWdBa1VOQUFOQUlBRWdBMndoQXlBRlFRRnFJZ1VnQWtjTkFBc0xJQU1nQ1V3TkFBdEJBU0VDSUFSQkFVMEVRQ0FBS0FJQUlnRWdBellDR0NBQlFUbzJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUhRU0JxSVFnQ1FDQUdRUUJNRFFBZ0JrRURjU0VMUVFBaEFRSkFJQVpCQkVrRVFFRUFJUU1NQVFzZ0JrSDgvLy8vQjNFaERDQUVJQVJzSWdJZ0Ftd2hEa0VBSVFOQkFTRUNRUUFoQ2dOQUlBZ2dBMEVDZEdvaUJTQUVOZ0lBSUFVZ0JEWUNCQ0FGSUFRMkFnZ2dCU0FFTmdJTUlBTkJCR29oQXlBQ0lBNXNJUUlnQ2tFRWFpSUtJQXhIRFFBTEN5QUxCRUFEUUNBSUlBTkJBblJxSUFRMkFnQWdBMEVCYWlFRElBSWdCR3doQWlBQlFRRnFJZ0VnQzBjTkFBc0xJQUlnQ0NBQUtBSXNRUUpHUVFKMGFpSURLQUlBSWdGdElBRkJBV29pQld3aUFTQUpTZzBBQTBBZ0F5QUZOZ0lBUVFFaEF5QUJJUUlDUUNBR1FRRkdEUUFEUUNBQ0lBZ2dBQ2dDTEVFQ1JnUi9JQU5CQW5SQnNKY0RhaWdDQUFVZ0F3dEJBblJxSWdRb0FnQWlBVzBnQVVFQmFpSUZiQ0lCSUFsS0RRRWdCQ0FGTmdJQUlBRWhBaUFEUVFGcUlnTWdCa2NOQUFzTElBSWdDQ0FBS0FJc1FRSkdRUUowYWlJREtBSUFJZ0Z0SUFGQkFXb2lCV3dpQVNBSlRBMEFDd3NnQUNnQ2VDRURJQUFvQWdBaUFTQUNOZ0lZQW44Z0EwRURSZ1JBSUFFZ0J5Z0NJRFlDSENBQklBY29BaVEyQWlBZ0FTQUhLQUlvTmdJa1FlQUFJUVVnQVF3QkMwSGhBQ0VGSUFBb0FnQUxJUU1nQVNBRk5nSVVJQUJCQVNBREtBSUVFUUlBSUFCQkFTQUNJQUFvQW5nZ0FDZ0NCQ2dDQ0JFSUFDRU9JQUFvQW5naUEwRUFTZ1JBUVFBaENpQUNJUUVEUUNBQklBZ2dDa0VDZENJRmFpZ0NBQ0lNYlNFRUlBeEJBRW9FUUNBRVFmei8vLzhIY1NFU0lBUkJBM0VoRHlBRklBNXFJUVlnREVFQmF5SVRRUUYySVJSQkFDRUxJQVJCQkVraEZRTkFJQUlnQkNBTGJDSUZTZ1JBSUF0Qi93RnNJQlJxSUJOdElRa0RRQUpBSUFSQkFFd05BRUVBSVJCQkFDRURRUUFoRVNBVlJRUkFBMEFnQmlnQ0FDQUZhaUFEYWlBSk9nQUFJQVlvQWdBZ0JXb2dBMm9nQ1RvQUFTQUdLQUlBSUFWcUlBTnFJQWs2QUFJZ0JpZ0NBQ0FGYWlBRGFpQUpPZ0FESUFOQkJHb2hBeUFSUVFScUloRWdFa2NOQUFzTElBOUZEUUFEUUNBR0tBSUFJQVZxSUFOcUlBazZBQUFnQTBFQmFpRURJQkJCQVdvaUVDQVBSdzBBQ3dzZ0FTQUZhaUlGSUFKSURRQUxDeUFMUVFGcUlnc2dERWNOQUFzZ0FDZ0NlQ0VEQ3lBRUlRRWdDa0VCYWlJS0lBTklEUUFMQ3lBSElBSTJBaFFnQnlBT05nSVFJQUFReWdVQ1FDQUFLQUpZUVFKSERRQWdBQ2dDZUVFQVRBMEFJQUFvQW5CQkFYUkJCR29oQVNBQUtBTGtBMEhFQUdvaEFrRUFJUU1EUUNBQ0lBTkJBblJxSUFCQkFTQUJJQUFvQWdRb0FnUVJCQUEyQWdBZ0EwRUJhaUlESUFBb0FuaElEUUFMQ3lBTklBQW9BdVFETmdJVUN5QUFLQUpzUlFSQUlBQW9BbWhGRFFFTFFRQWhBaUFBSUFCQkFVRXNJQUFvQWdRb0FnQVJCQUFpQVRZQzVBTWdBVUVBTmdJb0lBRkJBRFlDSUNBQlFZWUNOZ0lNSUFGQmh3STJBZ0FnQUNnQ2VFRURSd1JBSUFBb0FnQWlBMEV3TmdJVUlBQWdBeWdDQUJFQkFBc2dBU0FBUVFGQmdBRWdBQ2dDQkNnQ0FCRUVBRFlDR0FOQUlBQkJBVUdBSUNBQUtBSUVLQUlFRVFRQUlRTWdBa0VDZENJRUlBRW9BaGhxSUFNMkFnQWdBRUVCUVlBZ0lBQW9BZ1FvQWdRUkJBQWhBeUFCS0FJWUlBUnFJQU0yQWdRZ0FrRUNhaUlDUVNCSERRQUxJQUZCQVRZQ0hBSkFJQUFvQW13RVFFRUlJUU1DUUNBQUtBSmdJZ0pCQ0VnRWYwRTZCU0FDUVlFQ1NRMEJRWUFDSVFOQk93c2hCQ0FBS0FJQUlnVWdBellDR0NBRklBUTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUFRUUVnQWtFRElBQW9BZ1FvQWdnUkNBQWhBeUFCSUFJMkFoUWdBU0FETmdJUURBRUxJQUZCQURZQ0VBc2dBQ2dDV0FSQUlBQkJBallDV0NBQklBQkJBU0FBS0FKd1FRWnNRUXhxSUFBb0FnUW9BZ1FSQkFBMkFpQWdBQkRKQlFzZ0RTQUFLQUxrQXpZQ0dBc2dBQ2dDUkVVRVFBSkFJQTBvQWhBRVFFRUFJUUlnQUNBQVFRRkJNQ0FBS0FJRUtBSUFFUVFBSWdFMkF0d0RJQUZCQURZQ0NDQUJRZDRCTmdJQUlBRWdBQ2dDZUNBQUtBSndiQ0lETmdJb0FrQWdBQ2dDd0FKQkFrWUVRQ0FCUWQ4Qk5nSU1JQUZCNEFFMkFnUWdBRUVCSUFNZ0FDZ0NCQ2dDQkJFRUFDRUNEQUVMSUFGQjRRRTJBZ3dnQVVIaUFUWUNCQXNnQVNBQ05nSWdJQUFvQWlnaEF5QUFLQUxjQXlJQklBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQU5nSVFJQUVnQUVFQlFZQUlJQUFvQWdRb0FnQVJCQUEyQWhRZ0FTQUFRUUZCZ0FnZ0FDZ0NCQ2dDQUJFRUFEWUNHQ0FCSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBSWdRMkFod2dBU2dDR0NFRklBRW9BaFFoQmlBQktBSVFJUWRCQUNFQ1FZQi9JUUVDUUNBRFFRZEdCRUFEUUNBSElBSkJBblFpQTJvZ0FVSFRtd3RzUVlDQUFtcEJFSFUyQWdBZ0F5QUdhaUFCUWNTV0RteEJnSUFDYWtFUWRUWUNBQ0FESUFWcUlBRkIzYVI2YkRZQ0FDQURJQVJxSUFGQnpaOTliRUdBZ0FKcU5nSUFJQUZCQVdvaEFTQUNRUUZxSWdKQmdBSkhEUUFNQWdzQUN3TkFJQWNnQWtFQ2RDSURhaUFCUWVuTkJXeEJnSUFDYWtFUWRUWUNBQ0FESUFacUlBRkJvb3NIYkVHQWdBSnFRUkIxTmdJQUlBTWdCV29nQVVHdWtuMXNOZ0lBSUFNZ0JHb2dBVUhuejM1c1FZQ0FBbW8yQWdBZ0FVRUJhaUVCSUFKQkFXb2lBa0dBQWtjTkFBc0xEQUVMSUFBZ0FFRUJRUndnQUNnQ0JDZ0NBQkVFQUNJQk5nTGdBeUFCUVpVQk5nSUFBa0FDUUFKQUlBQW9BaWdpQWtFSFN3MEFBa0JCQVNBQ2RDSURRY3dCY1VVRVFDQURRVEJ4RFFFZ0FrRUJSdzBDSUFBb0FpUkJBVWNOQXd3RUN5QUFLQUlrUVFOSERRSU1Bd3NnQUNnQ0pFRUVSdzBCREFJTElBQW9BaVJCQUVvTkFRc2dBQ2dDQUNJQ1FRczJBaFFnQUNBQ0tBSUFFUUVBQ3dKQUlBQW9BckFDUlEwQUFrQWdBQ2dDS0VFQ2F3NEZBUUFBQUFFQUN5QUFLQUlBSWdKQkhEWUNGQ0FBSUFJb0FnQVJBUUFMQWtBQ1FBSkFBa0FDUUFKQUlBQW9BaXdpQWtFQmF3NEdBQUVFQXdRQ0JBc2dBRUVCTmdKNEFrQUNRQUpBSUFBb0FpaEJBV3NPQndBQkFBSUNBZ0FDQ3lBQlFaWUJOZ0lFSUFBb0FpUWlBVUVDU0EwR0lBRkJBV3NpQlVFSGNTRURJQUFvQXRnQklRUkJBU0VDSUFGQkFtdEJCMDhFUUNBRlFYaHhJUVpCQUNFRkEwQWdCQ0FDUWRnQWJHb2lBVUVBTmdJMElBRkJBRFlDakFFZ0FVRUFOZ0xrQVNBQlFRQTJBcndDSUFGQkFEWUNsQU1nQVVFQU5nTHNBeUFCUVFBMkFzUUVJQUZCQURZQ25BVWdBa0VJYWlFQ0lBVkJDR29pQlNBR1J3MEFDd3NnQTBVTkJrRUFJUUVEUUNBRUlBSkIyQUJzYWtFQU5nSTBJQUpCQVdvaEFpQUJRUUZxSWdFZ0EwY05BQXNNQmdzQ1FBSkFBa0FDUUNBQUtBS3dBZzRDQUFFQ0N5QUJRWmNCTmdJRURBSUxJQUZCbUFFMkFnUU1BUXNnQUNnQ0FDSUJRUncyQWhRZ0FDQUJLQUlBRVFFQUN5QUFLQUxnQXlBQVFRRkJnQmdnQUNnQ0JDZ0NBQkVFQUNJQ05nSVlRUUFoQVFOQUlBSWdBVUVDZENJRWFpSURJQUZCaTVrQmJEWUNBQ0FEUVlBSWFpQUJRY2FzQW13MkFnQWdBMEdBRUdvZ0FVR3ZPbXhCZ0lBQ2FqWUNBQ0FDSUFGQkFYSWlBMEVDZEdvZ0EwR0xtUUZzTmdJQUlBSWdCRUdFQ0hKcUlBTkJ4cXdDYkRZQ0FDQUNJQVJCaEJCeWFpQURRYTg2YkVHQWdBSnFOZ0lBSUFGQkFtb2lBVUdBQWtjTkFBc01CUXNnQUNnQ0FDSUJRUncyQWhRZ0FDQUJLQUlBRVFFQURBUUxJQUJCQXpZQ2VBSkFBa0FDUUFKQUFrQWdBQ2dDS0VFQmF3NEhBQU1CQkFRRUFnUUxJQUZCbVFFMkFnUU1Cd3NnQVVHYUFUWUNCQ0FBRU5ZRkRBWUxJQUZCbWdFMkFnUWdBQ2dDNEFNaUFTQUFRUUZCZ0FnZ0FDZ0NCQ2dDQUJFRUFEWUNDQ0FCSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBTmdJTUlBRWdBRUVCUVlBSUlBQW9BZ1FvQWdBUkJBQTJBaEFnQVNBQVFRRkJnQWdnQUNnQ0JDZ0NBQkVFQUNJRU5nSVVJQUVvQWhBaEJTQUJLQUlNSVFZZ0FTZ0NDQ0VIUVFBaEFrR0FmeUVCQTBBZ0J5QUNRUUowSWdOcUlBRkIwNXNMYkVHQWdBSnFRUkIxTmdJQUlBTWdCbW9nQVVIRWxnNXNRWUNBQW1wQkVIVTJBZ0FnQXlBRmFpQUJRZDJrZW13MkFnQWdBeUFFYWlBQlFjMmZmV3hCZ0lBQ2FqWUNBQ0FCUVFGcUlRRWdBa0VCYWlJQ1FZQUNSdzBBQ3d3RkN3SkFBa0FDUUNBQUtBS3dBZzRDQUFFQ0N5QUJRWnNCTmdJRURBWUxJQUZCbkFFMkFnUU1CUXNnQUNnQ0FDSUJRUncyQWhRZ0FDQUJLQUlBRVFFQURBUUxJQUFvQWdBaUFVRWNOZ0lVSUFBZ0FTZ0NBQkVCQUF3REN5QUFRUU0yQW5nZ0FDZ0NLRUVHUmdSQUFrQUNRQUpBSUFBb0FyQUNEZ0lBQVFJTElBRkJtd0UyQWdRTUJRc2dBVUdjQVRZQ0JBd0VDeUFBS0FJQUlnRkJIRFlDRkNBQUlBRW9BZ0FSQVFBTUF3c2dBQ2dDQUNJQlFSdzJBaFFnQUNBQktBSUFFUUVBREFJTElBQkJCRFlDZUFKQUFrQUNRQ0FBS0FJb1FRUnJEZ0lCQUFJTElBRkJuUUUyQWdRZ0FCRFdCUXdEQ3lBQlFaNEJOZ0lFREFJTElBQW9BZ0FpQVVFY05nSVVJQUFnQVNnQ0FCRUJBQXdCQ3lBQUtBSW9JQUpHQkVBZ0FDQUFLQUlrTmdKNElBRkJuZ0UyQWdRTUFRc2dBQ2dDQUNJQlFSdzJBaFFnQUNBQktBSUFFUUVBQ3lBQUlBQW9BbFFFZjBFQkJTQUFLQUo0Q3pZQ2ZFRUFJUUlnQUNBQVFRRkJvQUVnQUNnQ0JDZ0NBQkVFQUNJQk5nTGNBeUFCUVFBMkFnZ2dBVUhuQVRZQ0JDQUJRZWdCTmdJQUlBQW9BclFDQkVBZ0FDZ0NBQ0lEUVJvMkFoUWdBQ0FES0FJQUVRRUFDeUFBS0FJa1FRQktCRUFnQVVFTWFpRUtJQUZCbGdGcUlRa2dBVUdNQVdvaEN5QUJRVFJxSVFNZ0FVSGtBR29oRENBQUtBTFlBU0VCQTBBZ0FDZ0N3QUloQkNBQUtBSzhBaUVHSUFBb0FzUUNJUWdnQVNnQ0pDQUJLQUlJSUF3Z0FrRUNkQ0lIYWlBQktBSW9JQUVvQWd4c0lBQW9Bc2dDYlNJRk5nSUFiQ0FJYlNFSUFuOGdBU2dDTkVVRVFFSHBBU0VFSUFNTUFRc2dCaUFJUnlBRUlBVkhja1VFUUVIcUFTRUVJQU1NQVFzQ1FDQUlRUUYwSUFaSElnNGdCQ0FGUjNKRkJFQWdBeUFIYWtIckFUWUNBQXdCQ3lBT0lBVkJBWFFnQkVkeVJRUkFJQU1nQjJwQjdBRTJBZ0FNQVFzQ1FDQUdJQVlnQ0cwaUJpQUliR3NOQUNBRUlBUWdCVzBpQkNBRmJHc05BQ0FESUFkcVFlMEJOZ0lBSUFJZ0Myb2dCam9BQUNBQ0lBbHFJQVE2QUFBTUFRc2dBQ2dDQUNJRVFTYzJBaFFnQUNBRUtBSUFFUUVBQ3lBQUtBSUVLQUlJSVFRZ0FFRUJJQUFvQW5BZ0FDZ0N2QUlRamdNZ0FDZ0N3QUlnQkJFSUFDRUVJQW9MSUFkcUlBUTJBZ0FnQVVIWUFHb2hBU0FDUVFGcUlnSWdBQ2dDSkVnTkFBc0xDeUFBS0FKc0lRVWdBQ0FBUVFGQkhDQUFLQUlFS0FJQUVRUUFJZ0UyQXNnRElBRkNBRGNDQ0NBQlFlTUJOZ0lBSUFBb0FsUUVRQUpBSUFFZ0FDZ0N3QUlpQWpZQ0VDQUFLQUo0SUFBb0FuQnNJUU1nQUNnQ0JDRUVJQVVFUUNBRUtBSVFJUVFnQVNBQVFRRkJBQ0FESUFBb0FuUWdBaENPQXlBQktBSVFJQVFSQ1FBMkFnZ01BUXNnQVNBQVFRRWdBeUFDSUFRb0FnZ1JDQUEyQWd3TEN3dEJBQ0VCSUFBZ0FFRUJRZFFBSUFBb0FnUW9BZ0FSQkFBaUFqWUMyQU1nQWtHZkFUWUNBQ0FBS0FJa1FRQktCRUFnQWtFc2FpRURJQUFvQXRnQklRSURRQ0FDSUFCQkFVR0FBaUFBS0FJRUtBSUFFUVFBSWdRMkFsUWdCRUVBUVlBQ0VGQWFJQU1nQVVFQ2RHcEJmellDQUNBQ1FkZ0FhaUVDSUFGQkFXb2lBU0FBS0FJa1NBMEFDd3NDUUNBQUtBTGtBUVJBUVFBaEFpQUFJQUJCQVVIQUFTQUFLQUlFS0FJQUVRUUFJZ0UyQXRRRElBRkJ3Z0UyQWdnZ0FVSERBVFlDQUNBQlFUeHFRUUJCZ0FFUVVCb2dBVUh4QURvQXZBRUNRQ0FBS0FMZ0FVVU5BQ0FBSUFCQkFTQUFLQUlrUVFoMElBQW9BZ1FvQWdBUkJBQWlBVFlDb0FFZ0FDZ0NKRUVBVEEwQUEwQWdBVUgvQVVHQUFoQlFRWUFDYWlFQklBSkJBV29pQWlBQUtBSWtTQTBBQ3dzTUFRdEJBQ0VDSUFBZ0FFRUJRZHdCSUFBb0FnUW9BZ0FSQkFBaUFUWUMxQU1nQVVISkFUWUNDQ0FCUWNvQk5nSUFBa0FnQUNnQzRBRkZCRUFnQVVJQU53SkVJQUZDQURjQ1hDQUJRZ0EzQWxRZ0FVSUFOd0pNREFFTElBQWdBRUVCSUFBb0FpUkJDSFFnQUNnQ0JDZ0NBQkVFQUNJRE5nS2dBU0FBS0FJa1FRQktCRUFEUUNBRFFmOEJRWUFDRUZCQmdBSnFJUU1nQWtFQmFpSUNJQUFvQWlSSURRQUxDeUFCUWdBM0FqQWdBVUlBTndJNEN3c2dBQ2dDekFNb0FoQUVmMEVCQlNBQUtBSkFRUUJIQ3lFQ1FRQWhBeUFBSUFCQkFVSDBBQ0FBS0FJRUtBSUFFUVFBSWdFMkFzUURJQUZCQURZQ2NDQUJRZEVCTmdJSUlBRkIwZ0UyQWdBQ1FDQUNCRUFnQUNnQ0pFRUFTZ1JBSUFGQnlBQnFJUVVnQUNnQzJBRWhBZ05BSUFJb0Fnd2hCQ0FBS0FMZ0FTRUdJQUFvQWdRb0FoUWhCeUFGSUFOQkFuUnFJQUJCQVVFQklBSW9BaHdnQWlnQ0NCQ09BeUFDS0FJZ0lBSW9BZ3dRamdNZ0JFRURiQ0FFSUFZYklBY1JDUUEyQWdBZ0FrSFlBR29oQWlBRFFRRnFJZ01nQUNnQ0pFZ05BQXNMSUFGQjB3RTJBZ3dnQVVIVUFUWUNCQ0FCSUFGQnlBQnFOZ0lRREFFTElBRWdBRUVCUVlBS0lBQW9BZ1FvQWdRUkJBQWlBallDSUNBQklBSkJnQWxxTmdKRUlBRWdBa0dBQ0dvMkFrQWdBU0FDUVlBSGFqWUNQQ0FCSUFKQmdBWnFOZ0k0SUFFZ0FrR0FCV28yQWpRZ0FTQUNRWUFFYWpZQ01DQUJJQUpCZ0FOcU5nSXNJQUVnQWtHQUFtbzJBaWdnQVNBQ1FZQUJhallDSkNBQUtBSzBBMFVFUUNBQ1FRQkJnQW9RVUJvTElBRkIxUUUyQWd3Z0FVSFdBVFlDQkNBQlFRQTJBaEFMSUFBb0FrUkZCRUJCQUNFQ0lBQWdBRUVCUWRBQUlBQW9BZ1FvQWdBUkJBQWlCVFlDd0FNZ0JVSFlBVFlDQUNBQUtBTElBaUVEQWtBZ0FDZ0MzQU1vQWdnRVFDQURRUUZNQkVBZ0FDZ0NBQ0lCUVRBMkFoUWdBQ0FCS0FJQUVRRUFJQUFvQXNnQ0lRTUxJQUFvQXNBRElnWWdBRUVCSUFBb0FpUkJBM1FnQUNnQ0JDZ0NBQkVFQUNJQk5nSThJQVlnQVNBQUtBSWtJZ1JCQW5ScU5nSkFJQVJCQUVvRVFDQURRUVJxSVFNZ0FDZ0MyQUVoQVFOQUlBQkJBU0FCS0FJb0lBRW9BZ3hzSUFBb0FzZ0NiU0lFSUFOc0lnZEJBM1FnQUNnQ0JDZ0NBQkVFQUNFSUlBSkJBblFpQ2lBR0tBSThhaUFJSUFSQkFuUnFJZ1EyQWdBZ0JpZ0NRQ0FLYWlBRUlBZEJBblJxTmdJQUlBRkIyQUJxSVFFZ0FrRUJhaUlDSUFBb0FpUWlCRWdOQUFzTElBQW9Bc2dDUVFKcUlRTU1BUXNnQlNBRE5nSTBJQUFvQWlRaEJBc2dCRUVBU2dSQUlBVkJDR29oQkNBQUtBTFlBU0VCUVFBaEFnTkFJQVFnQWtFQ2RHb2dBRUVCSUFFb0FpUWdBU2dDSEd3Z0FTZ0NLQ0FCS0FJTWJDQUFLQUxJQW0wZ0Eyd2dBQ2dDQkNnQ0NCRUlBRFlDQUNBQlFkZ0FhaUVCSUFKQkFXb2lBaUFBS0FJa1NBMEFDd3NMSUFBZ0FDZ0NCQ2dDR0JFQkFDQUFJQUFvQXN3REtBSUlFUUVBQWtBZ0FDZ0NDQ0lCUlEwQUlBQW9Ba0FOQUNBQUtBTE1BeWdDRUVVTkFDQUFLQUxnQVNFRElBQW9BaVFoQWlBQlFRQTJBZ1FnQUNnQ3pBSWhCQ0FCUVFBMkFnd2dBU0FFSUFKQkEyeEJBbW9nQWlBREcydzJBZ2dnQVVFRFFRSWdBQ2dDYkJzMkFoQWdEU0FOS0FJTVFRRnFOZ0lNQ3lBQUtBSkFCRUFnQUVIUEFUWUNGRUVCRHdzZ0FFSExBVFlDRkFzQ1FDQUFLQUxNQXlnQ0VFVU5BQ0FBS0FJSUlRVURRQ0FGQkVBZ0FDQUZLQUlBRVFFQUN3SkFJQUFnQUNnQ3pBTW9BZ0FSQUFBaUFRNERCUUFDQUFzZ0FDZ0NDQ0lGUlNBQlFYMXhRUUZIY2cwQUlBVWdCU2dDQkVFQmFpSUJOZ0lFSUFFZ0JTZ0NDQ0lDU0EwQUlBVWdBQ2dDekFJZ0FtbzJBZ2dNQUFzQUN5QUFJQUFvQXBBQk5nS1lBUXdCQ3lBQUtBSUFJZ0lnQVRZQ0dDQUNRUlUyQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFBS0FJVVFjd0JSd1JBSUFBZ0FDZ0N2QU1vQWdBUkFRQWdBRUhNQVRZQ0ZDQUFRUUEyQW93QkN3SkFJQUFvQXJ3REtBSUlCRUFnQUVHTUFXb2hBaUFBS0FLTUFTRUZBMEFnQUNnQ2RDSURJQVZMQkVBZ0FDZ0NDQ0lCQkVBZ0FTQUROZ0lJSUFFZ0JUWUNCQ0FBSUFFb0FnQVJBUUFnQUNnQ2pBRWhCUXRCQUNFQklBQkJBQ0FDUVFBZ0FDZ0N3QU1vQWdRUkJ3QWdCU0FBS0FLTUFTSUZSdzBCREFNTElBQWdBQ2dDdkFNb0FnUVJBUUFnQUNBQUtBSzhBeWdDQUJFQkFFRUFJUVVnQUVFQU5nS01BU0FBS0FLOEF5Z0NDQTBBQ3dzZ0FFSE9BVUhOQVNBQUtBSkVHellDRkVFQklRRUxDeUFCQzlJQkFRSi9Ba0FDUUNBQUtBSVVJZ0ZCelFGclFRRkxEUUFnQUNnQ1FBMEFJQUFvQW93QklBQW9BblJKQkVBZ0FDZ0NBQ0lCUWNVQU5nSVVJQUFnQVNnQ0FCRUJBQXNnQUNBQUtBSzhBeWdDQkJFQkFDQUFRZElCTmdJVURBRUxBa0FDUUNBQlFjOEJhdzRFQUFFQkFnRUxJQUJCMGdFMkFoUU1BUXNnQUNnQ0FDSUNJQUUyQWhnZ0FrRVZOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc0NRQU5BSUFBb0Fzd0RJZ0VvQWhRTkFTQUFJQUVvQWdBUkFBQU5BQXRCQUE4TElBQWdBQ2dDR0NnQ0dCRUJBQ0FBRU53RlFRRUxrQVlCQm44Z0FDZ0NGQ0lDUVg1eFFjZ0JSd1JBSUFBb0FnQWlBeUFDTmdJWUlBTkJGVFlDRkNBQUlBQW9BZ0FvQWdBUkFRQUxBbjlCQVNFQ0FrQUNRQUpBQWtBQ1FDQUFLQUlVSWdOQnlBRnJEZ3NBQVFRQ0FnSUNBZ0lEQWdNTElBQWdBQ2dDekFNb0FnUVJBUUFnQUNBQUtBSVlLQUlJRVFFQUlBQkJ5UUUyQWhRTElBQWdBQ2dDekFNb0FnQVJBQUFpQWtFQlJ3MENJQUFvQWlRaUFpRUdBa0FDUUFKQUFrQWdBa0VCYXc0RUF3SUFBUUlMSUFBb0F0Z0JJZ1FvQXJBQklRTkJBaUVHUVFNaEFpQUVLQUlBSWdkQkFVY2lCU0FFS0FKWUlnUkJBa2R5UlNBRFFRTkdjUTBDSUFVZ0JFRWlSM0lnQTBFalIzSkZCRUJCQnlFQ0RBTUxJQWRCMGdCSElBUkJ4d0JIY2lBRFFjSUFSM0pGQkVCQkFpRUNEQU1MSUFkQjhnQkhJQVJCNXdCSGNpQURRZUlBUjNKRkJFQkJCaUVDREFNTElBQW9BcHdDRFFJZ0FDZ0NxQUlFUUVFQ0lRSUNRQUpBSUFBdEFLd0NJZ01PQWdVQUFRdEJBeUVDREFRTElBQW9BZ0FpQWlBRE5nSVlJQUpCOUFBMkFoUWdBRUYvSUFBb0FnQW9BZ1FSQWdCQkF5RUNEQU1MSUFBb0FnQWlCU0FETmdJZ0lBVWdCRFlDSENBRklBYzJBaGdnQlVIeEFEWUNGQ0FBUVFFZ0JTZ0NCQkVDQUF3Q0MwRUVJUVlnQUNnQ3FBSkZCRUJCQkNFQ0RBSUxRUVFoQWdKQUFrQWdBQzBBckFJaUF3NERBd0VBQVF0QkJTRUNEQUlMSUFBb0FnQWlBaUFETmdJWUlBSkI5QUEyQWhRZ0FFRi9JQUFvQWdBb0FnUVJBZ0JCQlNFQ0RBRUxRUUFoQWtFQUlRWUxJQUFnQmpZQ0xDQUFJQUkyQWlnZ0FFRUFOZ0tJQVNBQVFZQUNOZ0pnSUFCQ2dvQ0FnQkEzQTFnZ0FFSUJOd05RSUFCQ2dJQ0FnQkEzQTBnZ0FFSUFOd05BSUFCQ2dJQ0FnSUNBZ1BnL053TTRJQUJCQURZQ2JDQUFRZ0EzQW1RZ0FFSEtBVFlDRkNBQUlBQW9BcXdESWdJMkFqUWdBQ0FDTmdJd1FRRU1Bd3NnQUNBQUtBTE1BeWdDQUJFQUFBd0NDeUFBS0FJQUlnSWdBellDR0NBQ1FSVTJBaFFnQUNBQUtBSUFLQUlBRVFFQVFRQWhBZ3NnQWdzaUFrRUNSZ1JBSUFFRVFDQUFLQUlBSWdGQk5UWUNGQ0FBSUFFb0FnQVJBUUFMSUFBUTNBVUxJQUlMQndBZ0FCRGJCUXVVQndFQmZ5QUFRUUEyQWdRZ0FVSGFBRWNFUUNBQUtBSUFRbzJBZ0lDZ0N6Y0NGQ0FBS0FJQUlBRTJBaHdnQUNBQUtBSUFLQUlBRVFFQUN5QUNRZWdEUndSQUlBQW9BZ0JDbG9DQWdJQTlOd0lVSUFBb0FnQWdBallDSENBQUlBQW9BZ0FvQWdBUkFRQUxJQUFvQWdBaEFTQUFLQUlNSVFJZ0FFRUVha0VBUWVRREVGQWFJQUJCQVRZQ0VDQUFJQUkyQWd3Z0FDQUJOZ0lBSXdCQkVHc2lBaVFBSUFCQkFEWUNCQ0FDUVFBMkFneEIxQUFRVFNJQlJRUkFJQUFvQWdCQ09EY0NGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBRkJnSlRyM0FNMkFqQWdBVUh6QVRZQ0tDQUJRZlFCTmdJa0lBRkI5UUUyQWlBZ0FVSDJBVFlDSENBQlFmY0JOZ0lZSUFGQitBRTJBaFFnQVVINUFUWUNFQ0FCUWZvQk5nSU1JQUZCK3dFMkFnZ2dBVUg4QVRZQ0JDQUJRZjBCTmdJQUlBRkNBRGNDTkNBQlFRQTJBaXdnQVVIVUFEWUNUQ0FCUWdBM0Fqd2dBVUlBTndKRUlBQWdBVFlDQkFKQVFjcjFBUkNIQXlJRFJRMEFJQUpCK0FBNkFBc2dBaUFDUVF4cU5nSUFJQUlnQWtFTGFqWUNCQ0FEUWNId0FTQUNFT0FCUVFCTURRQWdBU0FDS0FJTUlnRkI2QWRzSUFFZ0FpMEFDMEhmQVhGQnpRQkdHMEhvQjJ3MkFpd0xJQUpCRUdva0FDQUFRUUEyQXJnQ0lBQkJBRFlDR0NBQVFRQTJBZ2dnQUVJQU53S2tBU0FBUWdBM0Fxd0JJQUJDQURjQ3RBRWdBRUlBTndLOEFTQUFRZ0EzQXNRQklBQkNBRGNDekFFZ0FDQUFRUUJCckFFZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0xRQXlBQlFnQTNBbUFnQVVHUUFUWUNIQ0FCUVpFQk5nSUlJQUZCa2dFMkFnUWdBVUdUQVRZQ0FDQUJRUUEyQW1nZ0FVR1FBVFlDSkNBQlFaQUJOZ0lvSUFGQ0FEY0NiQ0FCUVpBQk5nSXNJQUZCa0FFMkFqQWdBVUlBTndKMElBRkJrQUUyQWpRZ0FVR1FBVFlDT0NBQlFnQTNBbndnQVVHUUFUWUNQQ0FCUVFBMkFvUUJJQUZCa0FFMkFrQWdBVUlBTndLSUFTQUJRWkFCTmdKRUlBRkJrQUUyQWtnZ0FVR1FBVFlDVENBQlFaQUJOZ0pRSUFGQ0FEY0NrQUVnQVVHUUFUWUNWQ0FCUWdBM0FwZ0JJQUZCQURZQ29BRWdBVUdRQVRZQ1hDQUJRWlFCTmdJZ0lBRkJsQUUyQWxnZ0FFRUFOZ0xZQVNBQVFRQTJBcmdESUFCQkFEWUNrQUVnQUNnQzBBTWlBVUVBTmdLa0FTQUJRUUEyQWhnZ0FVSUFOd0lNSUFBZ0FFRUFRUndnQUNnQ0JDZ0NBQkVFQUNJQk5nTE1BeUFCUVFFMkFoZ2dBVUlBTndJUUlBRkJqQUUyQWd3Z0FVR05BVFlDQ0NBQlFZNEJOZ0lFSUFGQmp3RTJBZ0FnQUVISUFUWUNGQXNrQVFGL1FjRGxCQ2dDQUNJQUJFQURRQ0FBS0FJQUVRc0FJQUFvQWdRaUFBMEFDd3NMQ2dBZ0FDZ0NCQkRmQndzcEFRRi9Jd0JCRUdzaUFpUUFJQUlnQURZQ0RDQUNJQUUyQWdnZ0FpZ0NDQkJJSUFKQkVHb2tBQXMyQVFGL0l3QkJFR3NpQXlRQUlBTWdBRFlDRENBRElBRTJBZ2dnQXlBQ05nSUVJQU1vQWdnZ0F5Z0NCR3dRVFNBRFFSQnFKQUFML2dJQ0RYOEJmU01BUVJCcklnSWtBQ0FDUVFBMkFnd0NRQ0FBUlFSQVFRQkJBMEd1andKQkFCQk9EQUVMQWtBZ0FDZ0NpQUVpQkNnQ0FDSUZCRUFnQkNnQ0JDSUlEUUVMUVFCQkEwSHJpd0pCQUJCT0RBRUxRUUJCQVVIV2pnSkJBQkJPSUFVRVFDQUNJQVVvQWpRMkFnd2dBaUFGS0FJNE5nSUlDeUFFUVF4cUlRa0RRQ0FBRU44RlFRQk9CRUFnQlNBSUVPVUhRUUFoQVNBRVFRQTJBa0FnQWlnQ0NDSURRUUFnQTBFQVNoc2hDaUFDS0FJTUlRdEJBQ0VEQTBBZ0F5QUtSd1JBQWtBZ0N5QURRY1FBYkdvaUJpZ0NQQTBBSUFFRVFDQU9JQVlxQWpSZVJRMEJDeUFFUVFFMkFrQWdCQ0FHS0FJd05nSThRUUFoQndOQVFRQWhBU0FIUVFOSEJFQURRQ0FCUVFSSEJFQWdBVUVDZENJTUlBa2dCMEVFZENJTmFtb2dCaUFOYWlBTWFpb0NBRGdDQUNBQlFRRnFJUUVNQVFzTElBZEJBV29oQnd3QkN3c2dCaW9DTkNFT1FRRWhBUXNnQTBFQmFpRUREQUVMQ3lBQUVONEZEQUVMQzBFQVFRRkI3bzRDUVFBUVRnc2dBa0VRYWlRQVFRQUxOd0VCZnlBQklBQW9BZ1FpQTBFQmRXb2hBU0FBS0FJQUlRQWdBU0FDSUFOQkFYRUVmeUFCS0FJQUlBQnFLQUlBQlNBQUN4RURBQXMxQVFGL0lBRWdBQ2dDQkNJQ1FRRjFhaUVCSUFBb0FnQWhBQ0FCSUFKQkFYRUVmeUFCS0FJQUlBQnFLQUlBQlNBQUN4RVpBQXMzQVFGL0lBRWdBQ2dDQkNJRFFRRjFhaUVCSUFBb0FnQWhBQ0FCSUFJZ0EwRUJjUVIvSUFFb0FnQWdBR29vQWdBRklBQUxFUlFBQzlJQkFRVi9Jd0JCRUdzaUJpUUFJQUFvQWdBaEF5QUdRUVJxSWdVZ0FTQUFLQUlFSWdCQkFYVnFJZ0VnQWlBQVFRRnhCSDhnQVNnQ0FDQURhaWdDQUFVZ0F3c1JCUUJCREJCbUlnRkJBRFlDQ0NBQlFnQTNBZ0FnQlNnQ0FDRURJQVVvQWdRaEJ5TUFRUkJySWdJa0FDQUNJQUUyQWdnZ0J5QURheUlBUVFKMUlnUUVRQ0FCSUFRUW1BWWdBU2dDQkNFRUlBTWdCMGNFUUNBRUlBTWdBUHdLQUFBTElBRWdBQ0FFYWpZQ0JBc2dBa0VCT2dBTUlBSkJDR29RMGdJZ0FrRVFhaVFBSUFVUVZob2dCa0VRYWlRQUlBRUxiQUVDZnlNQVFTQnJJZ1VrQUNBQklBQW9BZ1FpQkVFQmRXb2hBU0FBS0FJQUlRQWdCRUVCY1FSQUlBRW9BZ0FnQUdvb0FnQWhBQXNnQlVFVWFpSUVJQUlRbndJZ0JVRUlhaUlDSUFNUW53SWdBU0FFSUFJZ0FCRUVBQ0FDRUV3YUlBUVFUQm9nQlVFZ2FpUUFDM2tCQW44akFFRVFheUlGSkFBZ0FTQUFLQUlFSWdaQkFYVnFJUUVnQUNnQ0FDRUFJQVpCQVhFRVFDQUJLQUlBSUFCcUtBSUFJUUFMSUFVZ0FqWUNEQ0FGSXdNaUFqWUNDQ0FGSUFNMkFnUWdCU0FDTmdJQUlBRWdCVUVJYWlJQklBVWdCQ0FBRVFnQUlBVVFrUUVnQVJDUkFTQUZRUkJxSkFBTFZnRURmeU1BUVJCcklnSWtBQ0FCSUFBb0FnUWlCRUVCZFdvaEFTQUFLQUlBSVFBZ0FrRUlhaUlESUFFZ0JFRUJjUVIvSUFFb0FnQWdBR29vQWdBRklBQUxFUUlBSUFNUTVnRWdBeENSQVNBQ1FSQnFKQUFMT3dFQmZ5QUJJQUFvQWdRaUJVRUJkV29oQVNBQUtBSUFJUUFnQVNBQ0lBTWdCQ0FGUVFGeEJIOGdBU2dDQUNBQWFpZ0NBQVVnQUFzUkNBQUxXUUVDZnlNQVFSQnJJZ1FrQUNBQklBQW9BZ1FpQTBFQmRXb2hBU0FBS0FJQUlRQWdBMEVCY1FSQUlBRW9BZ0FnQUdvb0FnQWhBQXNnQkVFRWFpSURJQUlRbndJZ0FTQURJQUFSQXdBZ0F4Qk1HaUFFUVJCcUpBQUxUZ0VDZnlNQVFSQnJJZ01rQUNBQklBQW9BZ1FpQkVFQmRXb2hBU0FBS0FJQUlRQWdBeUFCSUFJZ0JFRUJjUVIvSUFFb0FnQWdBR29vQWdBRklBQUxFUVVBSUFNUTRBVWdBMEVRYWlRQUMxZ0JBMzhqQUVFUWF5SURKQUFnQVNBQUtBSUVJZ1ZCQVhWcUlRRWdBQ2dDQUNFQUlBTkJDR29pQkNBQklBSWdCVUVCY1FSL0lBRW9BZ0FnQUdvb0FnQUZJQUFMRVFVQUlBUVE1Z0VnQkJDUkFTQURRUkJxSkFBTEVBQWdBU0FDSUFNZ0FDZ0NBQkVFQUF2QUFRRUJmeU1BUVRCcklnTWtBQ0FEUVJ4cUlBRWdBaUFBS0FJQUVRVUFJQU1nQXlnQ0xEWUNHQ0FESUFNcEFpUTNBeEFnQXlBREtRSWNOd01JSXdCQkVHc2lBQ1FBQW44Z0EwRUlhaUlCTFFBUVFRRkdCRUFqQUVFUWF5SUNKQUFnQWlBQkVPQUZOZ0lJSUFCQkNHb2lBVUdjcEFJZ0FrRUlhaEFGTmdJRUlBRWpBellDQUNBQ1FSQnFKQUFnQVJEbUFRd0JDeUFBUVFJMkFnd2dBQ01ETmdJSUlBQkJDR29pQVJEbUFRc2dBUkNSQVNBQVFSQnFKQUFnQTBFd2FpUUFDemtCQVg4Z0FTQUFLQUlFSWdSQkFYVnFJUUVnQUNnQ0FDRUFJQUVnQWlBRElBUkJBWEVFZnlBQktBSUFJQUJxS0FJQUJTQUFDeEVGQUFzcUFRRjhRWDhnQUNzREFDQUJLd01Bb1NJQ1JBQUFBQUFBQUFBQVpDQUNSQUFBQUFBQUFBQUFZeHNMTUFFQmZ5TUFRUkJySWdRa0FDQUFLQUlBSVFBZ0JDQUROZ0lNSUFFZ0FpQUVRUXhxSUFBUkJBQWdCRUVRYWlRQUMzc0JBWDhqQUVFUWF5SURKQUFnQTBFSWFpQUJJQUlnQUNnQ0FCRUZBQ0FESUFNcEFnZzNBd0FqQUVFUWF5SUFKQUFDZnlBRExRQUVRUUZHQkVBZ0FFRUlhaUFERVBjRElnRVE1Z0VNQVFzZ0FFRUNOZ0lNSUFBakF6WUNDQ0FBUVFocUlnRVE1Z0VMSUFFUWtRRWdBRUVRYWlRQUlBTkJFR29rQUF0VUFRSi9Jd0JCRUdzaUJDUUFJQUVnQUNnQ0JDSUZRUUYxYWlFQklBQW9BZ0FoQUNBRlFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QUVJQU0yQWd3Z0FTQUNJQVJCREdvZ0FCRUZBQ0FFUVJCcUpBQUxVZ0VDZnlNQVFSQnJJZ01rQUNBQklBQW9BZ1FpQkVFQmRXb2hBU0FBS0FJQUlRQWdCRUVCY1FSQUlBRW9BZ0FnQUdvb0FnQWhBQXNnQXlBQ05nSU1JQUVnQTBFTWFpQUFFUUlBSUFOQkVHb2tBQXMzQVFKL0l3QkJFR3NpQkNRQUlBQW9BZ0FoQUNBRVFRUnFJZ1VnQXhDZkFpQUJJQUlnQlNBQUVRUUFJQVVRVEJvZ0JFRVFhaVFBQzk0QkFRTi9Jd0JCRUdzaUF5UUFJQU1nQVNBQ0lBQW9BZ0FSQlFBakFFRVFheUlBSkFBQ2Z5QURMUUFNUVFGR0JFQWpBRUVRYXlJQ0pBQWdBeWdDQkNBRExBQUxJZ0VnQVVFQVNDSUZHeUlCUVFScUVFMGlCQ0FCTmdJQUlBUkJCR29nQXlnQ0FDQURJQVViSUFIOENnQUFJQUlnQkRZQ0NDQUFRUWhxSWdGQnBKZ0NJQUpCQ0dvUUJUWUNCQ0FCSXdNMkFnQWdBa0VRYWlRQUlBRVE1Z0VNQVFzZ0FFRUNOZ0lNSUFBakF6WUNDQ0FBUVFocUlnRVE1Z0VMSUFFUWtRRWdBRUVRYWlRQUlBTXRBQXhCQVVZRVFDQURFRXdhQ3lBRFFSQnFKQUFMV3dFQ2Z5TUFRUkJySWdVa0FDQUJJQUFvQWdRaUJFRUJkV29oQVNBQUtBSUFJUUFnQkVFQmNRUkFJQUVvQWdBZ0FHb29BZ0FoQUFzZ0JVRUVhaUlFSUFNUW53SWdBU0FDSUFRZ0FCRUZBQ0FFRUV3YUlBVkJFR29rQUF0WkFRSi9Jd0JCRUdzaUJDUUFJQUVnQUNnQ0JDSURRUUYxYWlFQklBQW9BZ0FoQUNBRFFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QUVRUVJxSWdNZ0FoQ2ZBaUFCSUFNZ0FCRUNBQ0FERUV3YUlBUkJFR29rQUFzUEFDQUJJQUFvQWdCcUlBSTJBZ0FMRFFBZ0FTQUFLQUlBYWlnQ0FBc1lBUUYvUVJBUVppSUFRZ0EzQXdBZ0FFSUFOd01JSUFBTEl3QWdBQ2dDQUNBQlFRUjBhaUlBSUFJcEFnQTNBZ0FnQUNBQ0tRSUlOd0lJUVFFTFNRQWdBQUovSUFFb0FnUWdBU2dDQUNJQmEwRUVkU0FDU3dSQUlBQWdBU0FDUVFSMGFpSUJLUUlBTndJQUlBQWdBU2tDQ0RjQ0NFRUJEQUVMSUFCQkFEb0FBRUVBQ3pvQUVBc1FBQ0FBS0FJRUlBQW9BZ0JyUVFSMUM1a0NBUU4vSUFBb0FnUWdBQ2dDQUNJRWEwRUVkU0lESUFGSkJFQWpBRUVnYXlJRkpBQUNRQ0FCSUFOcklnTWdBQ2dDQ0NBQUtBSUVJZ0ZyUVFSMVRRUkFJQUFvQWdRaUFTQURRUVIwYWlFREEwQWdBU0FEUmdSQUlBQWdBellDQkFVZ0FTQUNLUUlBTndJQUlBRWdBaWtDQ0RjQ0NDQUJRUkJxSVFFTUFRc0xEQUVMSUFWQkRHb2dBQ0FCSUFBb0FnQnJRUVIxSUFOcUVPVUZJQUFvQWdRZ0FDZ0NBR3RCQkhVZ0FFRUlhaERrQlNJRUtBSUlJZ0VnQTBFRWRHb2hBd05BSUFFZ0EwY0VRQ0FCSUFJcEFnQTNBZ0FnQVNBQ0tRSUlOd0lJSUFGQkVHb2hBUXdCQ3dzZ0JDQUROZ0lJSUFBZ0JCRGpCU0FFRU9JRkN5QUZRU0JxSkFBUEN5QUJJQU5KQkVBZ0FDQUVJQUZCQkhScU5nSUVDd3NHQUVIVXBBSUxGd0FnQUNnQ0FDQUJRUUowYWlBQ0tBSUFOZ0lBUVFFTFBRQWdBQUovSUFFb0FnUWdBU2dDQUNJQmEwRUNkU0FDU3dSQUlBQWdBU0FDUVFKMGFpZ0NBRFlDQUVFQkRBRUxJQUJCQURvQUFFRUFDem9BQkFzR0FFSDBuZ0lMendJQkEzOENRQ0FBS0FJQUlBRkJER3hxSWdBZ0FrY0VmeUFDTEFBTElRRWdBQ3dBQzBFQVRnUkFJQUZCQUU0RVFDQUFJQUlwQWdBM0FnQWdBQ0FDS0FJSU5nSUlEQU1MSUFJb0FnQWhBeUFDS0FJRUlRRWpBRUVRYXlJQ0pBQWdBQkQxQVNFRUFrQWdBVUVLVFFSQUlBQWdBUkNiQVNBQUlBTWdBUkMyQVNBQ1FRQTZBQThnQUNBQmFpQUNRUTlxRUpRQkRBRUxJQUJCQ2lBQlFRcHJJQVJCQUNBRUlBRWdBeENqQXdzZ0FrRVFhaVFBREFJTElBSW9BZ0FnQWlBQlFRQklJZ01iSVFRZ0FpZ0NCQ0FCSUFNYklRRWpBRUVRYXlJQ0pBQWdBQkRPQVNFRElBQW9BZ1FoQlFKQUlBRWdBMGtFUUNBQUtBSUFJUU1nQUNBQkVJc0JJQU1nQkNBQkVMWUJJQUpCQURvQUR5QUJJQU5xSUFKQkQyb1FsQUVNQVFzZ0FDQURRUUZySUFFZ0EydEJBV29nQlVFQUlBVWdBU0FFRUtNREN5QUNRUkJxSkFCQkFBVWdBQXNhQzBFQkN6a0FJQUVvQWdRZ0FTZ0NBQ0lCYTBFTWJTQUNTd1JBSUFBZ0FTQUNRUXhzYWhEWUFVRUJPZ0FNRHdzZ0FFRUFPZ0FNSUFCQkFEb0FBQXY3QVFFRGZ5QUFLQUlFSUFBb0FnQWlCR3RCREcwaUF5QUJTUVJBSXdCQklHc2lCQ1FBQWtBZ0FTQURheUlCSUFBb0FnZ2dBQ2dDQkNJRGEwRU1iVTBFUUNBQUtBSUVJZ01nQVVFTWJHb2hBUU5BSUFFZ0EwWUVRQ0FBSUFFMkFnUUZJQU1nQWhEWUFVRU1haUVEREFFTEN3d0JDeUFFUVF4cUlBQWdBeUFBS0FJQWEwRU1iU0FCYWhEcUJTQUFLQUlFSUFBb0FnQnJRUXh0SUFCQkNHb1FzZ0lpQlNnQ0NDSURJQUZCREd4cUlRRURRQ0FCSUFOSEJFQWdBeUFDRU5nQlFReHFJUU1NQVFzTElBVWdBVFlDQ0NBQUlBVVE2UVVnQlJEb0JRc2dCRUVnYWlRQUR3c2dBU0FEU1FSQUlBQWdCQ0FCUVF4c2FoRHJCUXNMbndFQkFuOGdBQUovSUFBb0FnUWlBaUFBS0FJSVNRUkFJQUFnQUNnQ0JDQUJFTmdCUVF4cU5nSUVJQUpCREdvTUFRc2pBRUVnYXlJREpBQWdBMEVNYWlBQUlBQW9BZ1FnQUNnQ0FHdEJERzFCQVdvUTZnVWdBQ2dDQkNBQUtBSUFhMEVNYlNBQVFRaHFFTElDSWdJb0FnZ2dBUkRZQVJvZ0FpQUNLQUlJUVF4cU5nSUlJQUFnQWhEcEJTQUFLQUlFSUFJUTZBVWdBMEVnYWlRQUN6WUNCQXROQVFOL0lBQUVRQ01BUVJCcklnRWtBQ0FCSUFBMkFnd2dBU2dDRENJQ0tBSUFCRUFnQWlBQ0tBSUFFT3NGSUFFb0Fnd2lBaWdDQUNBQ0tBSUlHaEJJQ3lBQlFSQnFKQUFMSUFBUVNBc0dBRUdFbVFJTHZ3RUJBMzlCbUFRUVppRUFJd0JCRUdzaUFTUUFJQUJCQURZQ0FDQUFRY0FCYWtFQVFTVDhDd0FnQUVJQU53UElBaUFBUXY3Ly8vOFBOd1B3QVNBQVFnQTNBK2dCSUFCQkpUWUM1QUVnQUVJQU53UFFBaUFBUVFJMkFwQUVJQUJCQURZQ2lBTWdBRUtBZ0lDQWdJRFF4OEFBTndPQUF5QUFRcTJHOGRpdTNJMk5QemNEK0FJZ0FFRUFOZ0wwQWlBQVFnQTNBdXdDSUFCQmdJQ0EvQU0yQXRnQ0lBRkJCR3BCdjRjQ0VGTWlBaERvQVNBQ0VFd2FJQUZCRUdva0FDQUFDMWNCQVg4Z0FBUkFJQUFRK3dVYUlBQkI3QUpxRUZZYUlBQkJ5QUpxRUljR0lBQW9BdUFCSVFFZ0FFRUFOZ0xnQVNBQkJFQWdBU0FBS0FMa0FSRUJBQXNnQUVITUFXb1ExUUVnQUVIRUFXb1ExUUVMSUFBUVNBc0dBRUhBcGdJTG15Y0NESHdNZnlNQVFSQnJJaGNrQUVHMDVRUkJ0T1VFS0FJQUloQkJBV28yQWdBZ0FDQUNOZ0xVQVNBQUlBRTJBdEFCSUFBZ0VEWUNBQ0FBSUFFZ0FteEJBblFpQVRZQ3lBRWdBUkJtSVFFZ0YwRUFOZ0lFSUFCQnhBRnFJQUVRK1FNZ0YwRUVhaUliRU5VQklBQW9Bc2dCUVFSdEVHWWhBU0FYUVFBMkFnUWdBRUhNQVdvZ0FSRDVBeUFiRU5VQkl3QkJNR3NpRkNRQUlCUWdBellDTEFKQUFrQUNRRUhzNUFRZ0ZFRXNhaUlDRUlnRVJRMEFJQUJCQ0dvaUFTQUNFUFVGUWJnQi9Bb0FBQ0FBS0FJTUlRSUNRQ0FBS0FJSUlnTWdBQ2dDMEFGR0JFQWdBaUFBS0FMVUFVWU5BUXNnRkNBQ05nSVVJQlFnQXpZQ0VFRUFRUUpCbTVBQ0lCUkJFR29RVGlBQUtBTFFBU0VDSUFFb0FnQWhFQ0FCS0FJRUlSRWdBU0FBS0FMVUFTSVNOZ0lFSUFFZ0FqWUNBQ0FCUWNnQWFpRVZJQUZCS0dvaEV5QUJRUWhxSVFNZ0VyY2dFYmVqSVFRZ0FyY2dFTGVqSVFWQkFDRVJBMEFnRVVFRVJ3UkFJQU1nRVVFRGRDSUNhaUFGSUFJZ0Eyb3JBd0NpT1FNQUlBSWdFMm9pRUNBRUlCQXJBd0NpT1FNQUlBSWdGV29pQWlBQ0t3TUFPUU1BSUJGQkFXb2hFUXdCQ3dzQ1FBSi9Ba0FDUUFKQUFrQWdBU2dDc0FFaUFrRUJhdzRFQXdJQkFBVUxJQUVnQVNzRGFEa0RhQ0FCSUFFckEzQTVBM0FnQVNBQkt3TjRPUU40SUFFZ0FTc0RnQUU1QTRBQklBRWdCU0FCS3dPSUFhSTVBNGdCSUFFZ0JDQUJLd09RQWFJNUE1QUJJQUVnQlNBQkt3T1lBYUk1QTVnQklBRWdCQ0FCS3dPZ0FhSTVBNkFCSUFFckE2Z0JJUVJCcUFFTUF3c2dBU0FGSUFFckEyaWlPUU5vSUFFZ0JDQUJLd053b2prRGNDQUJJQUVyQTNnNUEzZ2dBU0FCS3dPQUFUa0RnQUVnQVNBQkt3T0lBU0FGSUFTaW96a0RpQUVnQVNzRGtBRWdCQ0FGSUFXaUlBU2lvcU1oQkVHUUFRd0NDeUFCSUFVZ0FTc0RhS0k1QTJnZ0FTQUVJQUVyQTNDaU9RTndJQUVnQVNzRGVEa0RlQ0FCSUFFckE0QUJJQVVnQktLak9RT0FBU0FCS3dPSUFTQUVJQVVnQmFJZ0JLS2lveUVFUVlnQkRBRUxJQUVnQlNBQkt3Tm9vamtEYUNBQklBUWdBU3NEY0tJNUEzQWdBU0FCS3dONE9RTjRJQUVyQTRBQklBVWdCS0tqSVFSQmdBRUxJQUZxSUFRNUF3QWdBU0FDTmdLd0FRc0xRUUJCQVVHQmtBSkJBQkJPUVFBaEF5TUFRZkFCYXlJQ0pBQkJwb29CRU40RElBSWdBU2tEQURjRDRBRWpBRUVRYXlJUUpBQWdFQ0FDUWVBQmFpSVJOZ0lNUWFES0JFSE5GQ0FSRU5ZRElCQkJFR29rQUFKQUFrQUNRQUpBQWtBQ1FDQUJLQUt3QVVFQmF3NEVBd0lCQUFRTElBRXJBMmdoQkNBQkt3TndJUVVnQVNzRGVDRUhJQUlnQVNzRGdBRTVBMWdnQWlBSE9RTlFJQUlnQlRrRFNDQUNJQVE1QTBCQnJoa2dBa0ZBYXhDZEFpQUJLd09JQVNFRUlBRXJBNUFCSVFVZ0FTc0RtQUVoQnlBQkt3T2dBU0VHSUFJZ0FTc0RxQUU1QXpBZ0FpQUdPUU1vSUFJZ0J6a0RJQ0FDSUFVNUF4Z2dBaUFFT1FNUVFjb2RJQUpCRUdvUW5RSU1CQXNnQVNzRGFDRUVJQUVyQTNBaEJTQUJLd040SVFjZ0FTc0RnQUVoQmlBQkt3T0lBU0VJSUFJZ0FTc0RrQUU1QTRnQklBSWdDRGtEZ0FFZ0FpQUdPUU40SUFJZ0J6a0RjQ0FDSUFVNUEyZ2dBaUFFT1FOZ1FhSWlJQUpCNEFCcUVKMENEQU1MSUFFckEyZ2hCQ0FCS3dOd0lRVWdBU3NEZUNFSElBRXJBNEFCSVFZZ0FpQUJLd09JQVRrRHNBRWdBaUFHT1FPb0FTQUNJQWM1QTZBQklBSWdCVGtEbUFFZ0FpQUVPUU9RQVVIRUtDQUNRWkFCYWhDZEFnd0NDeUFCS3dOb0lRUWdBU3NEY0NFRklBRXJBM2doQnlBQ0lBRXJBNEFCT1FQWUFTQUNJQWM1QTlBQklBSWdCVGtEeUFFZ0FpQUVPUVBBQVVIQ0xpQUNRY0FCYWhDZEFnd0JDMEg0aVFFUTNnTUxJQUZCQ0dvaEVRTkFRUUFoRUNBRFFRTkhCRUFEUUNBUVFRUkhCRUFnQWlBUklBTkJCWFJxSUJCQkEzUnFLd01BT1FNQVFibzZJQUlRblFJZ0VFRUJhaUVRREFFTEN3SkFBa0JCN01vRUtBSUFJaEJCQUU0RVFDQVFSUTBCSXdNb0FoZ2dFRUgvLy8vL0EzRkhEUUVMQWtCQjhNb0VLQUlBUVFwR0RRQkJ0TW9FS0FJQUloQkJzTW9FS0FJQVJnMEFRYlRLQkNBUVFRRnFOZ0lBSUJCQkNqb0FBQXdDQzBHZ3lnUkJDaENMQXhvTUFRdEJBRUVBUWYvLy8vOEQva2dDN01vRUJFQkJvTW9FRUlVQkdnc0NRQUpBUWZES0JDZ0NBRUVLUmcwQVFiVEtCQ2dDQUNJUVFiREtCQ2dDQUVZTkFFRzB5Z1FnRUVFQmFqWUNBQ0FRUVFvNkFBQU1BUXRCb01vRVFRb1Fpd01hQzBFQVFRRCtRUUxzeWdSQmdJQ0FnQVJ4QkVCQjdNb0VRUUVRL3dFTEN5QURRUUZxSVFNTUFRc0xRYWFLQVJEZUF5QUNRZkFCYWlRQUlBQVErQU1nQUNnQ3dBRUVRQ0FBRVBnREN5QUFBbjlCQUNFVkl3QkJJR3NpRUNRQVFkQUJFRTBpRVFSQUFrQWdFU0FCUWJnQi9Bb0FBQ0FSSUFFb0FnQkJIbW9pQWpZQ3dBRWdBU2dDQkNFRElCRkJEellDekFFZ0VVRVBOZ0xJQVNBUklBTkJIbW9pRXpZQ3hBRWdFU0FDSUJOc1FRTjBJaElRVFNJRE5nSzRBU0FEUlEwQUlCRWdFaEJOSWhJMkFyd0JJQkpGRFFBZ0UwRUFJQk5CQUVvYklSa2dBa0VBSUFKQkFFb2JJUllnQVVIb0FHb2hBaUFCS0FLd0FTRVlBMEFnRlNBWlJ3UkFJQlZCRDJ1eXV5RUhRUUFoRXdOQUlCTWdGa2NFUUNBVFFROXJzcnNpQ2lFRUFrQWdFQUo4QWtBQ1FBSkFBa0FnR0VFQmF3NEVBd0lCQUFVTElCQWdBaXNER0NJSUlBUWdBaXNETUNJTG9TQUNLd05BSWdXaUlBSXJBeUFpREtNaUJDQUVvQ0FFb2lBRUlBU2lJQWNnQWlzRE9DSU5vU0FGb2lBQ0t3TW9JZzZqSWdVZ0JhS2dJZ2Fnb2lBRUlBSXJBd2dnQnFJZ0JxSWdBaXNEQUNBR29rUUFBQUFBQUFEd1A2Q2dJZytpSUFVZ0Fpc0RFQ0lKSUFtZ0lBU2lvcUNnSUF5aUlBdWdPUU1JSUEwZ0RpQUlJQWlnSUFTaUlBV2lJQVVnRDZJZ0NTQUZJQVdnSUFXaUlBYWdvcUNnb3FBTUF3c2dBaXNERUNJSUlBY2dBaXNEQ0tHaUlRVWdCQ0FDS3dNQUlnYWhJQWlpSWdSRUFBQUFBQUFBQUFCaUlBVkVBQUFBQUFBQUFBQmlja1VFUUNBUUlBWTVBd2dnQWlzRENBd0RDeUFRSUFRZ0Fpc0RJRVFBQUFBQWhOZVh3YU1nQkNBRW9pQUZJQVdpb0NJRW9rUUFBQUFBQUFEd1A2QWdBaXNES0VRQUFBQUFoTmVYd2FORUFBQUFBQUJxK0VDaklBU2lJQVNpb0NJRW9pQUNLd01Zb2lBR29Ea0RDQ0FGSUFTaUlBSXJBd2lnREFJTElBSXJBeEFpQ0NBSElBSXJBd2lob2lFRklBUWdBaXNEQUNJR29TQUlvaUlFUkFBQUFBQUFBQUFBWWlBRlJBQUFBQUFBQUFBQVluSkZCRUFnRUNBR09RTUlJQUlyQXdnTUFnc2dFQ0FFSUFJckF4aEVBQUFBQUlUWGw4R2pJQVFnQktJZ0JTQUZvcUFpQktKRUFBQUFBQUFBOEQrZ0lBSXJBeUJFQUFBQUFJVFhsOEdqUkFBQUFBQUFhdmhBb3lBRW9pQUVvcUFpQktJZ0JxQTVBd2dnQlNBRW9pQUNLd01Jb0F3QkN5QUNLd01RSWdnZ0J5QUNLd01Jb2FJaEJTQUVJQUlyQXdBaUJxRWdDS0lpQkVRQUFBQUFBQUFBQUdJZ0JVUUFBQUFBQUFBQUFHSnlSUVJBSUJBZ0Jqa0RDQ0FDS3dNSURBRUxJQkFnQkNBQ0t3TVlSQUFBQUFDRTE1ZkJveUFFSUFTaUlBVWdCYUtnb2tRQUFBQUFBQUR3UDZBaUJLSWdCcUE1QXdnZ0JTQUVvaUFDS3dNSW9BczVBd0FMSUFNZ0VDc0RDTFk0QWdBZ0F5QVFLd01BdGpnQ0JDQUNJQW9nQnlBUVFSaHFJQkJCRUdvZ0dCQ1JCaUFTSUJBckF4aTJPQUlBSUJJZ0VDc0RFTFk0QWdRZ0UwRUJhaUVUSUJKQkNHb2hFaUFEUVFocUlRTU1BUXNMSUJWQkFXb2hGUXdCQ3dzZ0VFRWdhaVFBSUJFTUFnc0xEQUlMSWdJMkFzQUJJQUpGQkVBZ0ZFRWdha0c3aFFJUVV5SUJJQlFvQWl3US9RVWdBUkJNR2d3QkN5QVVJQUlwQXdBM0F3QkJBRUVCUWZlS0FpQVVFRTRnQUFKL0lBQW9Bc0FCSVFOQm9JZXZBeEJOSWdJRVFBSkFJQUpCQURZQ2lJZXZBeUFDUVFBMkF1U0dwd0lnQWtLQWdJQ0FjRGNEQUNBQ1FRTTJBcGlIcndNZ0FrS0FnSUNBZ0lDQThEODNBNUNIcndNZ0FrS0FnSUNBSURjREdDQUNRdVFBTndNUUlBSkNnSUNBZ0JBM0F3Z2dBaUFETmdJZ0lBSWdBeWdDQUNJUU5nSWtJQU1vQWdRaEF5QUNRUUEyQXVpR3B3SWdBa0VBTmdLd2VDQUNRUUEyQWl3Z0FpQUROZ0lvSUFKQkFEWUMrSXFtQWlBQ0lBTWdFR3hCQVhRUVRTSUROZ0xnaHFjQ0lBTkZEUUFnQWtFQU5nTHdocThESUFKQkFCRHNCU0FDUVg4MkF2U0dyd01nQWtFQUVOUUZHaUFDUWdjM0EvaUdyd01nQWd3Q0N3c01BZ3NpQWpZQzJBRWdBa1VFUUNBVVFTQnFRZU9FQWhCVElnRVFwUUVnQVJCTUdnd0JDeUFBS0FLUUJDRURJd0JCRUdzaUVDUUFBa0FnQWtVTkFDQURJQUlvQWdSR0RRQUNRQUpBQWtBQ1FBSkFJQU5CRGswRVFFRUJJQU4wUWQ4ZmNRMEJJQUlnQXpZQ0JDQUNJQU1RdFFRMkFnZ2dBaWdDR0E0RUFnWUdBd1lMSUJBZ0F6WUNBRUVBUVFOQjB6c2dFQkJPREFVTElBSWdBellDQkNBQ0lBTVF0UVEyQWdnZ0FpZ0NHRUVCYXc0RUFnUUVBd1FMSUFKQkFUWUNHQXdEQ3lBQ1FRUTJBaGdNQWdzZ0FrRUVOZ0lZREFFTElBSkJBellDR0FzZ0VFRVFhaVFBSUFBQ2YwRUVFRTBpQWdSQUlBSWdBVUVJYWhEMUF5SUJOZ0lBSUFFRWZ5QUNCU0FDRUVoQkFBc01BUXNNQWdzaUFUWUMzQUVnQVVVRVFDQVVRU0JxUVozZ0FSQlRJZ0VRcFFFZ0FSQk1HZ3dCQ3lBQUtBTEFBU0VDSUFBckEvZ0NJUVVnQUNzRGdBTWhCQ0FBUVpBRGFpRVZRUUFoQTBFQUlSRWpBRUdRQTJzaUFTUUFJQUlvQWdRaEdDQUNLQUlBSVJrZ0FVR3dBbW9oRUNNQVFlQUFheUVTQWtBZ0FrRUlhaUlUS3dOWVJBQUFBQUFBQUFBQVprVUVRQU5BUVFBaEFpQURRUU5HRFFJRFFDQUNRUVJIQkVBZ0FrRURkQ0lXSUJJZ0EwRUZkQ0lhYW1vZ0V5QWFhaUFXYWlzREFKbzVBd0FnQWtFQmFpRUNEQUVMQ3lBRFFRRnFJUU1NQUFzQUN3TkFRUUFoQWlBRFFRTkdEUUVEUUNBQ1FRUkhCRUFnQWtFRGRDSVdJQklnQTBFRmRDSWFhbW9nRXlBYWFpQVdhaXNEQURrREFDQUNRUUZxSVFJTUFRc0xJQU5CQVdvaEF3d0FDd0FMUVFBaEF3SkFBMzlCQUNFQ0lBTkJBMFlFZnlBUUlCSXJBMUFpQnlBSG9pQVNLd05BSWdZZ0JxSWdFaXNEU0NJSUlBaWlvS0NmSWdrNUExQWdBU0FHSUFtaklnWTVBNUFDSUFFZ0NDQVFLd05Rb3lJSU9RT1lBaUFCSUFjZ0VDc0RVS01pQnprRG9BSWdBU0FTS3dOWUlCQXJBMUNqT1FPb0FpQVFJQWNnRWlzRE1DSUpvaUFHSUJJckF5QWlDcUlnQ0NBU0t3TW9JZ3Vpb0tBaUJ6a0RNQ0FRSUFrZ0J5QUJLd09nQXFLaElnWWdCcUlnQ2lBSElBRXJBNUFDb3FFaUNDQUlvaUFMSUFjZ0FTc0RtQUtpb1NJSElBZWlvS0NmSWdrNUF5Z2dBU0FJSUFtak9RUHdBU0FCSUFjZ0VDc0RLS001QS9nQklBRWdCaUFRS3dNb296a0RnQUlnRUNBQkt3T2dBaUFTS3dNUUlnaWlJQUVyQTVBQ0lCSXJBd0FpQ2FJZ0FTc0RtQUlnRWlzRENDSUtvcUNnSWdjNUF4QWdFQ0FJSUFFckE0QUNvaUFKSUFFckEvQUJvaUFLSUFFckEvZ0JvcUNnSWdZNUF3Z2dFQ0FJSUFZZ0FTc0RnQUtpb1NBSElBRXJBNkFDb3FFaUNDQUlvaUFKSUFZZ0FTc0Q4QUdpb1NBSElBRXJBNUFDb3FFaUNTQUpvaUFLSUFZZ0FTc0QrQUdpb1NBSElBRXJBNWdDb3FFaUJ5QUhvcUNnbnlJR09RTUFJQUVnQ1NBR296a0QwQUVnQVNBSElCQXJBd0NqT1FQWUFTQUJJQWdnRUNzREFLTTVBK0FCSUFFZ0Vpc0RPQ0FRS3dNd0lBRXJBNmdDSWdlaW9TQVFLd01vb3lJR09RT0lBaUFCSUJJckF4Z2dFQ3NEQ0NBR29xRWdCeUFRS3dNUW9xRWdFQ3NEQUtNNUErZ0JRUUFoQXdOL1FRQWhBaUFEUVFOR0JIOUJBQVVEUUNBQ1FRTkhCRUFnRUNBRFFRVjBhaUFDUVFOMGFpSVNJQklyQXdBZ0VDc0RVS001QXdBZ0FrRUJhaUVDREFFTEN5QURRUUZxSVFNTUFRc0xCUU5BSUFKQkJFY0VRQ0FRSUFOQkJYUnFJQUpCQTNScVFnQTNBd0FnQWtFQmFpRUNEQUVMQ3lBRFFRRnFJUU1NQVFzTFFRQk9CRUFnR0VFQmE3Y2hCeUFCUWRBQ2FpRUNJQUZCOEFKcUlRTURRQ0FSUVFSR0JFQkJBQ0VDSUFFckE0QURJUVlEUUVFQUlSRWdBa0VEUndSQUEwQWdFVUVEUndSQUlCRkJBM1FpQXlBQlFZQUJhaUFDUVJoc2Ftb2dBVUd3QW1vZ0FrRUZkR29nQTJvckF3QWdCcU01QXdBZ0VVRUJhaUVSREFFTEN5QUNRUUZxSVFJTUFRc0xJQUZDQURjRElDQUJRVUJyUWdBM0F3QWdBVUlBTndOSUlBRkNBRGNEYUNBQlFnQTNBeGdnQVVJQU53TTRJQUZDQURjRFlDQUJJQUVyQTZBQlJBQUFBQUFBQUFEQW9pQUhvemtES0NBQklBVWdCS0FnQlNBRW9TSUlvemtEVUNBQklBRXJBNEFCSWdZZ0JxQWdHVUVCYTdjaUJxTTVBd0FnQVNBQkt3T0lBU0lKSUFtZ0lBYWpPUU1JSUFFZ0JTQUVJQVNnb2lBSW96a0RXQ0FCSUFFckE2Z0JJZ1FnQktBZ0I2TkVBQUFBQUFBQThMK2dtamtETUNBQklBRXJBNUFCSWdRZ0JLQWdCcU5FQUFBQUFBQUE4TCtnbWprREVDQUJRZ0EzQTNnZ0FVS0FnSUNBZ0lDQStMOS9Od053SUFGQmtBSnFJUklnQVVId0FXb2hFMEVBSVFJZ0FTc0RxQUloQmlBQkt3T0lBaUVJSUFFckErZ0JJUWtEUUNBQ1FRUkdEUVFnQVNBQ1FRVjBhaUlES3dNUUlRUWdBeXNEQ0NFRklBTXJBd0FoQjBFQUlSRURRQ0FSUVFOSEJFQWdGU0FSUVFWMElBSkJBM1J5YWlBRUlCSWdFVUVEZENJUWFpc0RBS0lnQnlBQlFkQUJhaUFRYWlzREFLSWdCU0FRSUJOcUt3TUFvcUNnT1FNQUlCRkJBV29oRVF3QkN3c2dGU0FDUVFOMGFpQUVJQWFpSUFjZ0NhSWdCU0FJb3FDZ0lBTXJBeGlnT1FOZ0lBSkJBV29oQWd3QUN3QUZJQUlnRVVFRGRDSVFhaUlTSUFjZ0F5QVFhaXNEQUtJZ0Vpc0RBS0U1QXdBZ0VVRUJhaUVSREFFTEFBc0FDMEVBUVFOQjNneEJBQkJPQ3lBQlFaQURhaVFBQ3lBVVFUQnFKQUFNQVF0QkFFRURRZlVOUVFBUVRrRUJFQUlBQ3lBYlFaM3VBUkJUSWdFZ0FDZ0N5QUVRdVFFZ0FSQk1HaUFBS0FJQUlCZEJFR29rQUFzK0FRSi9Jd0JCRUdzaUFTUUFJQUFvQXRnQklnQUVmeUFCSUFBb0FoUTJBZ3hCQUFWQmZ3c2hBQ0FCS0FJTUlRSWdBVUVRYWlRQVFYOGdBaUFBR3d0TkFRRi9Jd0JCRUdzaUFpUUFJQUFvQXRnQklnQkZJQUZCQVV0eUJIOUJmd1VnQUNBQk5nSVVRUUFMUlFSQUlBSkJCR3BCbjRVQ0VGTWlBQ0FCRUxrQklBQVFUQm9MSUFKQkVHb2tBQXMrQVFKL0l3QkJFR3NpQVNRQUlBQW9BdGdCSWdCRklBRkJER29pQWtWeUJIOUJmd1VnQWlBQUtBSUFOZ0lBUVFBTEdpQUJLQUlNSUFGQkVHb2tBQXNPQUNBQUtBTFlBU2dDNUlhbkFndEVBUUYvSXdCQkVHc2lBaVFBSUFBb0F0Z0JJQUZCQUVjUTdBVWdBa0VFYWtIUzBnRVFVeUlBUVkrRUFrR1RoQUlnQVJzUW1BTWdBQkJNR2lBQ1FSQnFKQUFnQVF0TEFRSi9Jd0JCRUdzaUFTUUFJQUFvQXRnQklnQkZJQUZCREdvaUFrVnlCSDlCZndVZ0FpQUFLQUwwaHE4RE5nSUFRUUFMSVFBZ0FTZ0NEQ0VDSUFGQkVHb2tBRUYvSUFJZ0FCc0xPZ0VCZnlNQVFSQnJJZ0lrQUNBQUtBTFlBU0FCRU5RRlJRUkFJQUpCQkdwQnUrd0JFRk1pQUNBQkVMa0JJQUFRVEJvTElBSkJFR29rQUF0SUFRSi9Jd0JCRUdzaUFTUUFJQUFvQXRnQklnQkZJQUZCREdvaUFrVnlCSDlCZndVZ0FpQUFLQUlRTmdJQVFRQUxJUUFnQVNnQ0RDRUNJQUZCRUdva0FFRi9JQUlnQUJzTFZRRUNmeU1BUVJCcklnSWtBQUpBSUFGQi93RkxJZ01OQUNBRElBQW9BdGdCSWdCRmNnUi9RWDhGSUFBZ0FUWUNFRUVBQ3cwQUlBSkJCR3BCMU93QkVGTWlBQ0FCRUxrQklBQVFUQm9MSUFKQkVHb2tBQXNJQUNBQUt3T0FBd3NLQUNBQUlBRTVBNEFEQ3dnQUlBQXJBL2dDQ3dvQUlBQWdBVGtEK0FJTENRQkJxTWdFS0FJQUN3c0FRYWpJQkNBQk5nSUFDeEFBSUFBb0FnUWdBQ2dDQUd0QkRHMEx4RVlDSlg4Q2ZTTUFRVEJySWd3a0FBSi9JQUVvQXVBQklpUWlBMFVFUUVFQVFRTkJzWTBDUVFBUVRrRUFEQUVMUVFCQnhBQVFUU0lFUlEwQUdpQUVJQU0yQWdBZ0JDQURCSDhnQXlnQ0RBVkJBQXNnQXdSL0lBTW9BaEFGUVFBTGJDSUROZ0lJSUFNUVRTRURJQVJCQURZQ1FDQUVJQU0yQWdSQkFDQUVRWU1CRU5vRkN5SURSUVJBUVg4UUFnQUxJQUVnQXpZQzdBRWdERUVBTmdJc0FrQUNRQUpBSUFJb0FnUWlDaUFDS0FJQUlnOXJRUXh0UVJSSkJFQWdERUVBTmdJb0lBeENBRGNDSUNBQlFld0NhaUVsSUFGQjNBSnFJU1lnQVVINEFXb2hKd0pBQTBBQ1FDQU1JQkkyQWh3Z0VpQUtJQTlyUVF4dFR3MEFJQXhCRUdvaUVVR2YyZ0VRVXlJRElBSW9BZ1FnQWlnQ0FHdEJERzBRdVFFZ0F4Qk1HaUFSUWF5SUFoQlRJZ01nQWlnQ0FDQU1LQUljUVF4c2FpSUVLQUlBSUFRZ0JDd0FDMEVBU0JzUW1BTWdBeEJNR2lBQ0tBSUFJQXdvQWh3aURrRU1iR29pQ0N3QUN5RUdJQWdvQWdBaEJDQU1RU0JxSUF4QkhHb1FoQVFnRVVHQ2d3SVFVeUlESUFRZ0NDQUdRUUJJR3lJYUVKZ0RJQU1RVEJvQ1FBSkFBbjlCQUNFU0l3QkJFR3NpQ0NRQUlBaEJpSXNCTFFBQU9nQU9JQWhCaG9zQkx3QUFPd0VNQWtBQ2Z3SkFBa0FnR2tFQUlBeEJER29iUlFSQVFRQkJBMEdQMWdCQkFCQk9EQUVMQW44Z0NFRU1haUVESXdCQkVHc2lCaVFBQWtBQ1FDQWFSUVJBUVFBaEV3d0JDeUFhRUlNQlFZMkRBaENEQVdwQkFtb1FUU0lFUlEwQklBWkJqWU1DTmdJRUlBWWdHallDQUNBRVFlc09JQVlRK3dFZ0JDQURFTThCSVJNZ0JCQklDeUFHUVJCcUpBQWdFd3dCQ3d3TkN5SUhSUVJBSUFnZ0dqWUNBQ0FJUVkyREFqWUNDQ0FJUWJISEFEWUNCRUVBUVFOQjY5a0FJQWdRVGd3QkMwRVFFSUlGSWhCRkRRTUNRQ0FRUVFScVFRUkJBU0FIRUcxQkFVY05BQ0FRS0FJRUlnUkJBRXdOQUNBUUlBUkJoQUZzRUUwaUV6WUNBQ0FUUlEwRUEwQWdCQ0FTU2dSQUlCTWdFa0dFQVd3aUEycEJDRUVCSUFjUWJVRUJSdzBDSUJBb0FnQWlFeUFEYWlJRFFRaHFRUWhCQVNBSEVHMUJBVWNOQWlBRFFSQnFRZXdBUVFFZ0J4QnRRUUZIRFFJZ0EwSDhBR3BCQkVFQklBY1FiVUVCUncwQ0lCSkJBV29oRWlBRFFZQUJha0VFUVFFZ0J4QnRRUUZHRFFFTUFnc0xJQkJCREdwQkJFRUJJQWNRYlVFQlJ3MEFRUUFoRWlBUUtBSU1JZ1pCQUV3RVFDQVFRUUEyQWdnTUFRc2dFQ0FHUVF4c0VFMGlFellDQ0NBVFJRMEVBMEFnQmlBU1RBMERJQk1nRWtFTWJDSURha0VJYWtFRVFRRWdCeEJ0UVFGSERRRWdFQ2dDQ0NJVElBTnFJZ05CQkdwQkJFRUJJQWNRYlVFQlJ3MEJJQU1nQXlnQ0JDSUVRUXhzRUUwaUF6WUNBQ0FEUlEwRklCSkJBV29oRWlBRFFRd2dCQ0FIRUcwZ0JFWU5BQXNMUVFCQkEwRzIzQUJCQUJCT0lCQW9BZ2dRU0NBUUtBSUFFRWdnRUJCSUlBY1FsZ0VMUVg4TUFRc2dEQ0FRTmdJTUlBY1FsZ0ZCQUFzZ0NFRVFhaVFBREFFTERBY0xRUUJJQkVBZ0VVSGRnZ0lRVXlJQklCb1ErZ01NQVFzZ0RFRVFhaUlJUWZDRkFoQlRJZ01nRGhDNUFTQURFRXdhUVFBaER3SkFJQXdvQWd3aUVRUkFJQkVvQWdRaUEwRUFJQU5CQUVvYklRWURRQ0FHSUE5R0JFQkJBQ0VTSUJFb0Fnd2lBMEVBSUFOQkFFb2JJUVpCQUNFUEEwQWdCaUFQUmcwRUlCRW9BZ2dnRDBFTWJHb2lCQ2dDQ0NJRFFYOUhJQU5CQUVoeFJRUkFJQVFnRGpZQ0NBc2dEMEVCYWlFUERBQUxBQVVnRVNnQ0FDQVBRWVFCYkdvaUJDZ0NmQ0lEUVg5SElBTkJBRWh4UlFSQUlBUWdEallDZkFzZ0QwRUJhaUVQREFFTEFBc0FDMEVBUVFOQnR0OEFRUUFRVGtGL0lSSUxJQkpCQUVnRVFDQUlRZGZNQVJCVElnRVFwUUVNQVFzQ2YwRUFJUW9nREVFc2FrRUFJQXhCREdvaUJSdEZCRUJCQUVFRFFmczJRUUFRVGtGL0RBRUxBa0FnRENnQ0xDSVBSUVJBSUF4QkVCQk5JZzgyQWl3Z0QwVU5BU0FQUWdBM0FnQWdEMElBTndJSUN3SkFJQVVvQWdBaURrVU5BQ0FPS0FJRUlnWWdEeWdDQkNJSGFpSUlRWVFCYkJCTkloRUVRQ0FIUVFBZ0IwRUFTaHNoQkFOQUlBUWdDa1lFUUVFQUlRb2dCa0VBSUFaQkFFb2JJUVlnRVNBSFFZUUJiR29oQkFOQUlBWWdDa2NFUUNBRUlBcEJoQUZzSWdOcUlBNG9BZ0FnQTJwQmhBSDhDZ0FBSUFwQkFXb2hDZ3dCQ3dzZ0R5Z0NBQkJJSUF3b0Fpd2dFVFlDQUNBTUtBSXNJZ1lnQ0RZQ0JFRUFJUk1nQmlnQ0RDSWhRUUFnSVVFQVNoc2hGaUFGS0FJQUloSW9BZ3dpQkVFQUlBUkJBRW9iSVF0QkFDRVBBMEJCQUNFS0lBc2dEMGNFUUFKQUEwQWdDaUFXUmcwQklBcEJER3doQXlBS1FRRnFJUW9nRWlnQ0NDQVBRUXhzYWlnQ0NDQURJQVlvQWdocUtBSUlSdzBBQ3lBVFFRRnFJUk1MSUE5QkFXb2hEd3dCQ3dzZ0JDQWhhaUFUYXlJUlFReHNFRTBpSEFSQVFRQWhIZ05BSUJZZ0hrWUVRRUVBSVE5QkFDRVRBa0FDUUFOQUFrQkJBQ0VLSUFzZ0QwWUVRQ0FNS0FJc0loSW9BZ2hGRFFNRFFDQVNLQUlJSVFNZ0NpQVNLQUlNVGcwQ0lBTWdDa0VNYkdvb0FnQVFTQ0FLUVFGcUlRb2dEQ2dDTENFU0RBQUxBQXNDUUFKQUEwQWdDaUFXUmcwQklBcEJER3doQXlBS1FRRnFJUW9nRWlnQ0NDQVBRUXhzYWlnQ0NDQURJQXdvQWl3b0FnaHFLQUlJUncwQUN5QVRRUUZxSVJNTUFRc2dIQ0FQSUNGcUlCTnJRUXhzYWlJSElBOUJER3dpQ0NBU0tBSUlhaUlES0FJSU5nSUlJQWNnQXlnQ0JDSVFRUXhzRUUwaURqWUNBQ0FPUlEwRVFRQWhDaUFRUVFBZ0VFRUFTaHNoQmdOQUlBWWdDa2NFUUNBT0lBcEJER3dpQTJvaUJDQVNLQUlJSUFocUtBSUFJQU5xSWdNcEFnQTNBZ0FnQkNBREtBSUlOZ0lJSUFwQkFXb2hDZ3dCQ3dzZ0J5QVFOZ0lFQ3lBUFFRRnFJUThNQVFzTElBTVFTQ0FNS0FJc0lSSUxJQklnSERZQ0NDQU1LQUlzSUJFMkFnd2dCUkN2QlF3SEN3d0hDeUFjSUI1QkRHd2lGR29pQnlBTUtBSXNLQUlJSUJScUlnTW9BZ2dpQkRZQ0NFRUFJUW9nQXlnQ0JDSVFJUk1EUUNBS0lBdEhCRUFnQkNBU0tBSUlJQXBCREd4cUlnTW9BZ2hHQkVBZ0F5Z0NCQ0FUYWlFVEN5QUtRUUZxSVFvTUFRc0xJQWNnRTBFTWJCQk5JZ2cyQWdBZ0NBUkFRUUFoQ2lBUVFRQWdFRUVBU2hzaEJnTkFJQVlnQ2tZRVFFRUFJUW9EUUFKQUlBb2dDMFlOQUNBU0tBSUlJZzhnQ2tFTWJDSU9haWdDQ0NBTUtBSXNLQUlJSUJScUtBSUlSZ1JBSUFnZ0VFRU1iR29oQ0VFQUlRb0RRQ0FLSUE0Z0Qyb2lCaWdDQkU0TkFpQUlJQXBCREd3aUEyb2lCQ0FHS0FJQUlBTnFJZ01wQWdBM0FnQWdCQ0FES0FJSU5nSUlJQXBCQVdvaENpQUZLQUlBSWhJb0FnZ2hEd3dBQ3dBRklBcEJBV29oQ2d3Q0N3QUxDeUFISUJNMkFnUWdIa0VCYWlFZURBTUZJQWdnQ2tFTWJDSURhaUlFSUF3b0Fpd29BZ2dnRkdvb0FnQWdBMm9pQXlrQ0FEY0NBQ0FFSUFNb0FnZzJBZ2dnQ2tFQmFpRUtEQUVMQUFzQUN3c01CUXNNQkFVZ0VTQUtRWVFCYkNJRGFpQVBLQUlBSUFOcVFZUUIvQW9BQUNBS1FRRnFJUW9NQVFzQUN3QUxEQUVMUVFBTUFRc01Cd3RCQUVnRVFDQU1RUkJxUWZyTUFSQlRJZ0VRcFFFTUFRc2dERUVRYWlJZVFiYUVBaEJUSWdNUTZBRWdBeEJNR2lBZVFjZkxBUkJUSWdNZ0doQ1lBeUFERUV3YUFuOUJBQ0VFUVFBaEdFRUFJUjBqQUVIUUIyc2lDU1FBQWtBQ1FBSkFBbjhDUUVIU3l3RXRBQUFFUUVIU3l3RkJzQWdRdHdJTkFRc2dDVUhRQldvZ0drSC9BUkNiQWtFQU9nRC9BVUVCREFFTElBa2dHallDc0FFZ0NVSFN5d0UyQXJRQklBbEJ3QUZxSWdOQjZ3NGdDVUd3QVdvUSt3RWdBMEdkRnhEUEFTSVlSUVJBSUFrZ0dqWUNvQUZCQUVFRFFiQWRJQWxCb0FGcUVFNGdDUkJaS0FJQUVQVUNOZ0tVQVNBSlFmc3FOZ0tRQVVFQVFRTkJuQ0lnQ1VHUUFXb1FUZ3dDQzBFQUN5RUtBa0FDUUVIMENCQk5JaDBFUUVFQklTSUNRQ0FLRFFBZ0NVSEFBV29pQXlBWUVNZ0NSUTBDSUFrZ0NVSE1CV28yQW9BQklBTkJtak1nQ1VHQUFXb1E0QUZCQVVjTkFpQUpLQUxNQlNJaVFRQktEUUFNQWdzZ0hVRUFOZ0tZQVNBZElDSTJBZ1FnSFNBaVFmQUFiQkJOSWhrMkFnQWdHUVJBQWtBRFFDQUpJQVEyQXN3RklBUWdJazROQVNBSklBUkJBV28yQW5CQkFFRUJRWnc4SUFsQjhBQnFFRTRnQ2tVRVFDQUpRY0FCYWlJRElCZ1F5QUpGRFFJZ0NTQUpRZEFGYWlJSU5nSmdJQU5CMVR3Z0NVSGdBR29RNEFGQkFVY05Ba0VBSVFOQmZ5RUVBMEFDUUFKQUlBTWdDR290QUFBaUJrRXVSd1JBSUFZTkFTQUVRWDlIQkVBZ0JDQUlha0VBT2dBQUN3d0NDeUFESVFRTElBTkJBV29oQXd3QkN3c0xRUUJCQVVHSHhBQkJBQkJPQW45QkFDRU5Jd0JCNEFCckloVWtBQ0FWUVlTTEFTOEFBRHNCV0NBVlFZQ0xBU2dBQURZQ1ZBSkFBa0FDUUFKQUFrQUNRQ0FKUWRBRmFpSWhJaHdRZ3dGQkJtb1FUU0lFQkVBZ0ZTQWNOZ0pBSUJVZ0ZVSFVBR29pQXpZQ1JDQUVRZVlPSUJWQlFHc1Erd0VnQkVINkZ4RFBBU0VYSUFRUVNDQVhSUVJBSUJVZ0hEWUNBQ0FWSUFNMkFnUkJBQ0VEUVFCQkEwR1hIeUFWRUU0TUJndEJDQkJOSWhFRVFBSkFJQkZCQkdwQkJFRUJJQmNRYlVFQlJnUkFJQkVvQWdRaUQwRUFTZzBCQzBFQVFRTkJoeU5CQUJCT0RBUUxJQlVnRHpZQ01FRUFRUUZCeVNrZ0ZVRXdhaEJPSUJFZ0QwRUNkQ0lPRUUwaUd6WUNBQ0FiQkVBZ0cwRVFFRTBpQXpZQ0FDQURCRUFDZjBFVUVFMGlGZ1JBSXdCQnNBWnJJZ3NrQUNBTFFjQUNha0VBUWVnRC9Bc0FJd29pQTBFQU5nSUFJQXRCSUdvUTBBVWhCaUFES0FJQUlRUWdBMEVBTmdJQUl3c2hBMEYvSVFVQ1FBSkFBa0FDUUNBRVJRMEFJQU1vQWdBaUIwVU5BQ0FFSUF0QnJBWnFFS1FCSWdWRkRRRWdCeVFIQ3lNSElRUWdCVUVCUndSQUlBdEJCRFlDSUNBTElBWTJBc0FDSUF0QkFUWUNxQUVnQ3lBTFFhd0dhallDcEFGQkFDRUVDd05BSUFRRVFDTUtJZ05CQURZQ0FFRUZJQXRCd0FKcUVBY2dBeWdDQUNFRUlBTkJBRFlDQUNNTElRTkJmeUVGQWtBZ0JFVU5BQ0FES0FJQUlnZEZEUUFnQkNBTFFhd0dhaENrQVNJRlJRMERJQWNrQndzakJ5RUVJQVZCQVVZTkFTTUtJZ05CQURZQ0FFRUdRUUJCQTBHTU1FRUFFQW9nQXlnQ0FDRUVJQU5CQURZQ0FDTUxJUU5CZnlFRkFrQWdCRVVOQUNBREtBSUFJZ2RGRFFBZ0JDQUxRYXdHYWhDa0FTSUZSUTBESUFja0J3c2pCeUVFSUFWQkFVWU5BUXdEQ3lNS0lnTkJBRFlDQUVFSElBdEJ3QUpxUWRvQVFlZ0RFQ2NnQXlnQ0FDRUVJQU5CQURZQ0FDTUxJUU5CZnlFRkFrQWdCRVVOQUNBREtBSUFJZ2RGRFFBZ0JDQUxRYXdHYWhDa0FTSUZSUTBDSUFja0J3c2pCeUVFSUFWQkFVWU5BQ01LSWdOQkFEWUNBRUVJSUF0QndBSnFJQmNRSENBREtBSUFJUVFnQTBFQU5nSUFJd3NoQTBGL0lRVUNRQ0FFUlEwQUlBTW9BZ0FpQjBVTkFDQUVJQXRCckFacUVLUUJJZ1ZGRFFJZ0J5UUhDeU1ISVFRZ0JVRUJSZzBBSXdvaUEwRUFOZ0lBUVFrZ0MwSEFBbXBCQVJBYUlBTW9BZ0FoQkNBRFFRQTJBZ0FqQ3lFRFFYOGhCUUpBSUFSRkRRQWdBeWdDQUNJSFJRMEFJQVFnQzBHc0Jtb1FwQUVpQlVVTkFpQUhKQWNMSXdjaEJDQUZRUUZHRFFCQkFVY0VRQ01LSWdOQkFEWUNBRUVHUVFCQkEwR0tOa0VBRUFvZ0F5Z0NBQ0VFSUFOQkFEWUNBQ01MSVFOQmZ5RUZBa0FnQkVVTkFDQURLQUlBSWdkRkRRQWdCQ0FMUWF3R2FoQ2tBU0lGUlEwRElBY2tCd3NqQnlFRUlBVkJBVVlOQVNNS0lnTkJBRFlDQUVFRklBdEJ3QUpxRUFjZ0F5Z0NBQ0VFSUFOQkFEWUNBQ01MSVFOQmZ5RUZBa0FnQkVVTkFDQURLQUlBSWdkRkRRQWdCQ0FMUWF3R2FoQ2tBU0lGUlEwRElBY2tCd3NqQnlFRUlBVkJBVVlOQVF3REN5TUtJZ05CQURZQ0FFRUtJQXRCd0FKcUVCWWFJQU1vQWdBaEJDQURRUUEyQWdBakN5RURRWDhoQlFKQUlBUkZEUUFnQXlnQ0FDSUhSUTBBSUFRZ0MwR3NCbW9RcEFFaUJVVU5BaUFISkFjTEl3Y2hCQ0FGUVFGR0RRQWdDeWdDM0FJZ0N5Z0M1QUpzSWdnZ0N5Z0M0QUpzRUUwaUZBUkFRUUFoQlFKQUFrQURRQUpBUVFBaEJDQUxLQUxNQXlBTEtBSzBBMDhFUUNNS0lnTkJBRFlDQUVFTElBdEJ3QUpxRUJZYUlBTW9BZ0FoQkNBRFFRQTJBZ0FqQ3lFRFFYOGhCUUpBSUFSRkRRQWdBeWdDQUNJSFJRMEFJQVFnQzBHc0Jtb1FwQUVpQlVVTkNDQUhKQWNMSXdjaEJDQUZRUUZHRFFZakNpSURRUUEyQWdCQkJTQUxRY0FDYWhBSElBTW9BZ0FoQkNBRFFRQTJBZ0FqQ3lFRFFYOGhCUUpBSUFSRkRRQWdBeWdDQUNJSFJRMEFJQVFnQzBHc0Jtb1FwQUVpQlVVTkNDQUhKQWNMSXdjaEJDQUZRUUZHRFFZZ0ZpQUxLQUxjQWpZQ0NDQVdJQXNvQXVBQ05nSU1JQllnQ3lnQzVBSTJBZ1FnQ3k4QjVnUWhCQ0FMTHdIa0JDRUdJQXN0QU9JRUlnTkJBV3NPQWdFREJBc0RRQ0FFUVFWSEJFQWdDeUFFUVFKMGFpQVVJQVFnQldvZ0NHeHFOZ0lBSUFSQkFXb2hCQXdCQ3dzakNpSURRUUEyQWdCQkRDQUxRY0FDYWlBTFFRVVFHU0VHSUFNb0FnQWhCQ0FEUVFBMkFnQWpDeUVEUVg4aEVBSkFJQVJGRFFBZ0F5Z0NBQ0lIUlEwQUlBUWdDMEdzQm1vUXBBRWlFRVVOQnlBSEpBY0xJd2NoQkNBUVFRRkdEUVVnQlNBR2FpRUZEQUVMQ3lBRUlBWkhEUUVnRmlBR3N6Z0NFQXdHQ3lBRUlBWkhEUUFnRmlBR3MwTmNqeUpBbERnQ0VBd0ZDeUFFSUFOQkEwa2dCbkp5UlFSQUlCWWdBN000QWhBTUJRc2dGa0VBTmdJUURBUUxJd29pQTBFQU5nSUFRUVpCQUVFRFFmVU5RUUFRQ2lBREtBSUFJUVFnQTBFQU5nSUFJd3NoQTBGL0lRVUNRQ0FFUlEwQUlBTW9BZ0FpQjBVTkFDQUVJQXRCckFacUVLUUJJZ1ZGRFFJZ0J5UUhDeU1ISVFRZ0JVRUJSZzBBSXdvaUEwRUFOZ0lBUVFVZ0MwSEFBbW9RQnlBREtBSUFJUVFnQTBFQU5nSUFJd3NoQTBGL0lRVUNRQ0FFUlEwQUlBTW9BZ0FpQjBVTkFDQUVJQXRCckFacUVLUUJJZ1ZGRFFJZ0J5UUhDeU1ISVFRZ0JVRUJSZzBBQ3d3QkN5QUVJQWNRL2dRQUMwRUFJUlFMSUF0QnNBWnFKQUFnRmlBVU5nSUFJQlFFZnlBV0JTQVdFRWhCQUFzTUFRc01DZ3NpQkFSQUlBUW9BZ1JCQVVZTkJTQVZJQncyQWlBZ0ZTQVZRZFFBYWpZQ0pFRUFJUU5CQUVFQ1FhOHZJQlZCSUdvUVRpQWJLQUlBRUVnZ0d4QklJQkVRU0NBRUVFZ2dGeENXQVF3SkN5QVZJQncyQWhBZ0ZTQVZRZFFBYWpZQ0ZFRUFRUUpCcnk4Z0ZVRVFhaEJPSUJzb0FnQVFTQ0FiRUVnZ0VSQklJQmNRbVFWQkNCQk5JZ01FUUFKQUlBTkJCR3BCQkVFQklCY1FiVUVCUmdSQUlBTW9BZ1FpQ0VFQVNnMEJDMEVBUVFOQmh5TkJBQkJPREFnTElBTWdDRUVDZEJCTklnNDJBZ0FnRGdSQVFRRWhCd05BSUFnZ0RVWUVRRUVBSVEwRFFDQUlJQTFHRFF3Q1FBSkFJQTRnRFVFQ2RHb2lCaWdDQUVFRWFrRUVRUUVnRnhCdFFRRkhCRUJCQUNFRUEwQWdCQ0FOUmdSQVFRQWhEUU5BSUFnZ0RVWU5CQ0FPSUExQkFuUnFLQUlBRUVnZ0RVRUJhaUVOREFBTEFBVWdEaUFFUVFKMGFpZ0NBQ2dDQUJCSUlBUkJBV29oQkF3QkN3QUxBQXNnQmlnQ0FFRUlha0VFUVFFZ0Z4QnRRUUZIQkVCQkFDRUVBMEFnQkNBTlJnUkFRUUFoRFFOQUlBZ2dEVVlOQkNBT0lBMUJBblJxS0FJQUVFZ2dEVUVCYWlFTkRBQUxBQVVnRGlBRVFRSjBhaWdDQUNnQ0FCQklJQVJCQVdvaEJBd0JDd0FMQUFzZ0JpZ0NBRUVNYWtFRVFRRWdGeEJ0UVFGSEJFQkJBQ0VFQTBBZ0JDQU5SZ1JBUVFBaERRTkFJQWdnRFVZTkJDQU9JQTFCQW5ScUtBSUFFRWdnRFVFQmFpRU5EQUFMQUFVZ0RpQUVRUUowYWlnQ0FDZ0NBQkJJSUFSQkFXb2hCQXdCQ3dBTEFBc2dCaWdDQUNJRUlBUW9BZ2dnQkNnQ0JHd1FUU0lFTmdJQUlBUUVRQ0FHS0FJQUlnUW9BZ0JCQVNBRUtBSUlJQVFvQWdSc0lCY1FiU0FHS0FJQUlnUW9BZ2dnQkNnQ0JHeEdEUUpCQUNFTkEwQWdCeUFOUmdSQVFRQWhEUU5BSUFnZ0RVWU5CQ0FPSUExQkFuUnFLQUlBRUVnZ0RVRUJhaUVOREFBTEFBVWdEaUFOUVFKMGFpZ0NBQ2dDQUJCSUlBMUJBV29oRFF3QkN3QUxBQXNNRUFzZ0RoQklEQXdMSUFkQkFXb2hCeUFOUVFGcUlRME1BQXNBQ3lBT0lBMUJBblJxUVJBUVRTSUVOZ0lBSUExQkFXb2hEU0FFRFFBTERBc0xEQW9MREFrTERBZ0xEQWNMREFZTERBVUxJQnNvQWdBaUF5QUVLQUlJTmdJRUlBTWdCQ2dDRERZQ0NDQURJQVFxQWhBNEFnd2dBeUFFS0FJQU5nSUFJQVFRU0NBWFFRUWdEbXRCQWhDSkEwRUJJUTBDUUFOQUlBMGdEMGNFUUNBVlFkd0Fha0VFUVFFZ0Z4QnRRUUZIQkVCQkFDRURBMEFnQXlBTlJnMEVJQnNnQTBFQ2RHb2lCQ2dDQUNnQ0FCQklJQVFvQWdBUVNDQURRUUZxSVFNTUFBc0FCU0FiSUExQkFuUnFBbjhnRlNvQ1hDRXBJQnNvQWdBaUh5Z0NCQ0VFSUI4cUFnd2hLQ0FmS0FJSUlRTkJFQkJOSVNBZ0tTQURzcFFnS0pVUW5nSWhCaUFwSUFTeWxDQW9sUkNlQWlFRUlDQUVRQUpBSUNBZ0tUZ0NEQ0FnSUFZMkFnZ2dJQ0FFTmdJRUlDQWdCQ0FHYkJCTklpTTJBZ0FnSTBVTkFFRUFJUU1nQmtFQUlBWkJBRW9iSVJZZ0JFRUFJQVJCQUVvYklSd0RRQ0FESUJaSEJFQWdIeWdDQ0NFSUlCOHFBZ3dpS0NBRFFRRnFJZ2F6bENBcGxSQ2VBaUVFSUNnZ0E3T1VJQ21WRUo0Q0lnNGdCQ0FJSUFRZ0NFZ2JJZ01nQXlBT1NCc2hGRUVBSVFNRFFDQURJQnhHQkVBZ0JpRUREQU1GSUI4b0FnUWhFaUFmS2dJTUlpZ2dBMEVCYWlJRXM1UWdLWlVRbmdJaENDQW9JQU96bENBcGxSQ2VBaUlUSUFnZ0VpQUlJQkpJR3lJRElBTWdFMGdiSUJOcklSQkJBQ0VESUE0aEIwRUFJUVVEUUNBSElCUkhCRUFnQXlBUWFpRUlJQjhvQWdBZ0J5QVNiR29nRTJvaEN3TkFJQU1nQ0VjRVFDQURRUUZxSVFNZ0JTQUxMUUFBYWlFRklBdEJBV29oQ3d3QkN3c2dCMEVCYWlFSElBZ2hBd3dCQ3dzZ0l5QUZJQU50T2dBQUlDTkJBV29oSXlBRUlRTU1BUXNBQ3dBTEN5QWdEQUlMQ3d3SkN6WUNBQ0FOUVFGcUlRME1BZ3NBQ3dzZ0Z4Q1dBU0FSSVFNTUJBc2dHeEJJQ3lBUkVFZ2dGeENXQVVFQUlRTU1BZ3NnQXhCSVFRQWhBd3NnRnhDV0FRc2dGVUhnQUdva0FDQUREQUVMREJJTElRTWdHU0FKS0FMTUJVSHdBR3hxSUFNMkFnQWdBMFVFUUNBSklDRTJBZ0JCQUVFRFFkL0tBQ0FKRUU0Z0dSQklJQjBRU0NBWVJRMEdJQmdRbGdFTUJndEJBRUVCUWRiUEFFRUFFRTVCQUVFQlFmelJBRUVBRUU0Q2YwRUFJUVZCQUNFSEl3QkJvQVJySWhFa0FDQVJJQWxCMEFWcUlnWWlCRFlDRUNBUlFiQUlOZ0lVSUJGQklHb2lBMEc3Q0NBUlFSQnFFUHNCQWtBQ1FDQURRZVlURU04QkloUkZCRUFnRVNBRU5nSUFRUUJCQTBHWkdTQVJFRTRNQVFzQ1FBSkFRUWdRVFNJRkJFQWdCVUVFYWtFRVFRRWdGQkJ0UVFGSEJFQkJBRUVEUWI4a1FRQVFUZ3dDQ3lBRklBVW9BZ1FpQTBFVWJCQk5JZzQyQWdBZ0RnUkFJQU5CQUNBRFFRQktHeUVFQTBBZ0JDQUhSZzBFQWtBQ1FDQU9JQWRCRkd4cUloQkJDR3BCQkVFQklCUVFiVUVCUncwQUlCQkJER3BCQkVFQklCUVFiVUVCUncwQUlCQkJFR3BCQkVFQklCUVFiVUVCUncwQUlCQkJCR3BCQkVFQklCUVFiVUVCUncwQUlCQWdFQ2dDQkVFVWJCQk5JZ00yQWdBZ0EwVU5DRUVBSVFnRFFDQUlJQkFvQWdST0RRSWdDRUVVYkNJRElCQW9BZ0JxUVFSQkFTQVVFRzFCQVVjTkFTQVFLQUlBSUFOcVFRUnFRUVJCQVNBVUVHMUJBVWNOQVNBUUtBSUFJQU5xUVFocVFRUkJBU0FVRUcxQkFVY05BU0FRS0FJQUlBTnFRUXhxUVFSQkFTQVVFRzFCQVVjTkFTQUlRUUZxSVFnZ0VDZ0NBQ0FEYWtFUWFrRUVRUUVnRkJCdFFRRkdEUUFMQzBFQUlRUkJBRUVEUWI4a1FRQVFUZ05BSUFRZ0IwY0VRQ0FPSUFSQkZHeHFLQUlBRUVnZ0JFRUJhaUVFREFFTEN5QU9FRWdNQkFzZ0IwRUJhaUVIREFBTEFBc01CQXNNQXdzZ0JSQklRUUFoQlFzZ0ZCQ1dBUXNnRVVHZ0JHb2tBQ0FGREFFTFFRQkJBMEhISDBFQUVFNE1Fd3NoQXlBWklBa29Bc3dGUWZBQWJHb2dBellDQkNBRFJRUkFJQWtnQmpZQ0VFRUFRUU5CN3RZQUlBbEJFR29RVGtFQUlRUUNRQ0FaSUFrb0Fzd0ZRZkFBYkdvaUNFVU5BQ0FJS0FJQUlnVkZEUUFEUUNBRktBSUFJUVlnQlNnQ0JDQUVTZ1JBSUFZZ0JFRUNkQ0lEYWlnQ0FDZ0NBQkJJSUFnb0FnQW9BZ0FnQTJvb0FnQVFTQ0FFUVFGcUlRUWdDQ2dDQUNFRkRBRUxDeUFHRUVnZ0NDZ0NBQkJJSUFoQkFEWUNBQXNnR1JCSUlCMFFTQ0FZUlEwR0lCZ1FsZ0VNQmd0QkFFRUJRZGJQQUVFQUVFNGdHU0FKS0FMTUJVSHdBR3hxUVFBMkFnZ0NRQUpBSUFvRVFFRUFJUU1nQ1NnQ3pBVWhCUU5BUVFBaEJDQURRUU5HRFFJRFFDQUVRUVJIQkVBZ0dTQUZRZkFBYkdvZ0EwRUVkR29nQkVFQ2RHcERBQUNBUDBNQUFBQUFJQU1nQkVZYk9BSU1JQVJCQVdvaEJBd0JDd3NnQTBFQmFpRUREQUFMQUFzZ0NVSEFBV29pQkNBWUVNZ0NSUTBESUFrZ0dTQUpLQUxNQlVId0FHeHFJZ05CREdvMkFrQWdDU0FEUVJCcU5nSkVJQWtnQTBFVWFqWUNTQ0FKSUFOQkdHbzJBa3dnQkVIODRBQWdDVUZBYXhEZ0FVRUVSdzBKSUFRZ0dCRElBa1VOQXlBSklCa2dDU2dDekFWQjhBQnNhaUlEUVJ4cU5nSXdJQWtnQTBFZ2FqWUNOQ0FKSUFOQkpHbzJBamdnQ1NBRFFTaHFOZ0k4SUFSQi9PQUFJQWxCTUdvUTRBRkJCRWNOQ1NBRUlCZ1F5QUpGRFFNZ0NTQVpJQWtvQXN3RlFmQUFiR29pQTBFc2FqWUNJQ0FKSUFOQk1HbzJBaVFnQ1NBRFFUUnFOZ0lvSUFrZ0EwRTRhallDTENBRVFmemdBQ0FKUVNCcUVPQUJRUVJIRFFFZ0NTZ0N6QVVoQlFzZ0dTQUZRZkFBYkdvaUEwRU1haUVJSUFOQlBHb2hEa0VBSVFOQkJFRUVFTmNDSWhFb0FnQWhCd05BSUFOQkEwY0VRQ0FEUVFKMElRWkJBQ0VFQTBBZ0JFRUVSd1JBSUFjZ0JDQUdja0VEZEdvZ0NDQURRUVIwYWlBRVFRSjBhaW9DQUxzNUF3QWdCRUVCYWlFRURBRUxDeUFEUVFGcUlRTU1BUXNMSUFkQ0FEY0RZQ0FIUW9DQWdJQ0FnSUQ0UHpjRGVDQUhRZ0EzQTNBZ0IwSUFOd05vSUJFUWdnUWFJQkVvQWdBaENFRUFJUU1EUUNBRFFRTkhCRUFnQTBFQ2RDRUdRUUFoQkFOQUlBUkJCRWNFUUNBT0lBTkJCSFJxSUFSQkFuUnFJQWdnQkNBR2NrRURkR29yQXdDMk9BSUFJQVJCQVdvaEJBd0JDd3NnQTBFQmFpRUREQUVMQ3lBUkVHVWdDVUhRQldvaERrRUFJUU5CQUNFRUFrQUNRQUpBQTBBQ1FBSkFJQU1nRG1vaUNDMEFBQ0lHUVM1SEJFQWdCZzBCUWNUbEFCQ0RBU0VHSUFRTkFpQURJQVpxUVFKcVFZQUNUQTBFREFZTElBTWhCQXNnQTBFQmFpRUREQUVMQ3lBRUlBWnFRUUpxUVlBQ1NnMENEQUVMSUFoQkxqb0FBQ0FESVFRTElBUWdEbXBCQURvQUFVSEU1UUFoQkFKQUlBNFFnd0VnRG1vaUEwSEU1UUJ6UVFOeEJFQkJ4T1VBTFFBQUlRVU1BUXRCZ0lLRUNFSEU1UUFvQWdBaUJXc2dCWEpCZ0lHQ2hIaHhRWUNCZ29SNFJ3MEFBMEFnQXlBRk5nSUFJQU5CQkdvaEF5QUVLQUlFSVFVZ0JFRUVhaUVFSUFWQmdJS0VDQ0FGYTNKQmdJR0NoSGh4UVlDQmdvUjRSZzBBQ3dzZ0F5QUZPZ0FBSUFWQi93RnhCRUFEUUNBRElBUXRBQUVpQmpvQUFTQURRUUZxSVFNZ0JFRUJhaUVFSUFZTkFBc0xDMEdBQWhCTklRUWdHU0FKS0FMTUJTSURRZkFBYkdvZ0JEWUNiQ0FFUlEwSklBUWdEa0dBQWhDYkFob2dBMEVCYWlFRURBRUxDd3dHQ3lBWUJFQWdHQkNXQVFzZ0lpQUpLQUxNQlV3TkJFRUFFQUlBQ3d3RkN3d0VDeUFZRUpZQklCMFFTQXRCQUNFZEN5QUpRZEFIYWlRQUlCME1BZ3RCQUVFRFFkYmtBRUVBRUU0Z0dCQ1dBVUVBRUFJQUMwRUFRUU5CbWpGQkFCQk9EQWtMSVFNZ0p5QU1LQUljUVFKMGFpQUROZ0lBSUFNTkFTQWVRYWZMQVJCVElnRWdHaEQ2QXdzZ0FSQk1HaUFBUVFBMkFnZ2dBRUlBTndJQURBTUxJQU1vQWdBb0FnQWlBeWdDQkNFRUlBRWdBeWdDQUNnQ0FDSURLQUlFTmdMZ0FpQUJJQU1vQWdnMkF1UUNJQUVDZnlBREtnSU1JaWlMUXdBQUFFOWRCRUFnS0tnTUFRdEJnSUNBZ0hnTE5nTG9BaUFNUVJCcUlnWkIzdGtCRUZNaUF5QUVFTGtCSUFNUVRCb2dCa0dLMmdFUVV5SURJQUVvQXVBQ0VMa0JJQU1RVEJvZ0JrSEkyUUVRVXlJRElBRW9BdVFDRUxrQklBTVFUQm9nQmtIMzJRRVFVeUlESUFFb0F1Z0NFTGtCSUFNUVRCb2dBU0FNS0FJY05nTGNBaUFsSUNZUTh3VWdCa0cyaEFJUVV5SURFT2dCSUFNUVRCb2dEQ2dDSEVFQmFpRVNJQUlvQWdBaER5QUNLQUlFSVFvTUFRc0xJQ1FnRENnQ0xCRG5CMEVBU0FSQUlBeEJFR3BCdjh3QkVGTWlBUkNsQVNBQkVFd2FJQUJCQURZQ0NDQUFRZ0EzQWdBTUFRc2dERUVzYWhDdkJTQU1RUkJxUVppRUFoQlRJZ0lRNkFFZ0FoQk1HaUFCSUFFb0F2UUJJQXdvQWlRaUFpQU1LQUlnSWdGclFRSjFhallDOUFFZ0FDQUNOZ0lFSUFBZ0FUWUNBQ0FBSUF3b0FpZzJBZ2dnREVFQU5nSW9JQXhDQURjQ0lBc2dERUVnYWhCV0dpQU1RVEJxSkFBUEN5QU1RU0JxUWFPREFoQlRJZ0FRcFFFZ0FCQk1Ha0YvRUFJQUMwRUFRUU5Cemh0QkFCQk9EQUVMUVFCQkEwSDFEVUVBRUU0TFFRRVFBZ0FMaFhjQkNIOGdBU2dDQUNBQklBRXNBQXRCQUVnYklRTWdBaWdDQUNBQ0lBSXNBQXRCQUVnYklRb2pBRUZBYWlJQUpBQkJnSUNBQWhCTklRWUNRQUpBQWtBQ2Z5TUFRUkJySWdFa0FBSkFJQU1FUUNBREVJTUJRYnpLQVJDREFXcEJBbW9RVFNJQ1JRMEJJQUZCdk1vQk5nSUVJQUVnQXpZQ0FDQUNRY3pTQVNBQkVQc0JJQUpCaC9FQkVNOEJJUVFnQWhCSUN5QUJRUkJxSkFBZ0JBd0JDMEVBUVFOQnlwQUNRUUFRVGd3REN5SUJCRUFnQVVFQVFRSVFpUU1nQVJDNEJTRUNJQUZCQUVFQUVJa0RJQUlRVFNJSVJRMEJJQWhCQVNBQ0lBRVFiUm9nQVJDV0FVR2NmeUFEUWJ6S0FSQ1FBeUlCUVFBUUpTSURRV0ZHQkg4Z0FSQWtCU0FEQ3hDVUJSb2dBUkJJSUFCQkFEWUNNQ0FBUWdBM0FpZ2dBQ0FDTmdJTUlBQkJnSUNBQWpZQ0dDQUFJQWcyQWdnZ0FDQUdOZ0lVSXdCQkVHc2lCU1FBSUFVZ0FFRUlhaUlKTmdJTUlBVkJuSU1DTmdJSUlBVkJPRFlDQkNBRktBSU1JUUlnQlNnQ0NDRURJQVVvQWdRaEJDTUFRU0JySWdFa0FDQUJJQUkyQWhnZ0FVRVBOZ0lVSUFFZ0F6WUNFQ0FCSUFRMkFnd0NRQUpBQWtBZ0FTZ0NFRVVOQUNBQktBSVFMUUFBUVp5REFpMEFBRWNOQUNBQktBSU1RVGhHRFFFTElBRkJlallDSEF3QkN5QUJLQUlZUlFSQUlBRkJmallDSEF3QkN5QUJLQUlZUVFBMkFoZ2dBU2dDR0NnQ0lFVUVRQ0FCS0FJWVFZUUJOZ0lnSUFFb0FoaEJBRFlDS0FzZ0FTZ0NHQ2dDSkVVRVFDQUJLQUlZUVlVQk5nSWtDeUFCSUFFb0FoZ29BaWhCQVVIUU55QUJLQUlZS0FJZ0VRUUFOZ0lFSUFFb0FnUkZCRUFnQVVGOE5nSWNEQUVMSUFFb0FoZ2dBU2dDQkRZQ0hDQUJLQUlFSUFFb0FoZzJBZ0FnQVNnQ0JFRUFOZ0k0SUFFb0FnUkJ0UDRBTmdJRUlBRW9BaGdoQXlBQktBSVVJUVFqQUVFZ2F5SUNKQUFnQWlBRE5nSVlJQUlnQkRZQ0ZBSkFJQUlvQWhnUXl3SUVRQ0FDUVg0MkFod01BUXNnQWlBQ0tBSVlLQUljTmdJTUFrQWdBaWdDRkVFQVNBUkFJQUpCQURZQ0VDQUNRUUFnQWlnQ0ZHczJBaFFNQVFzZ0FpQUNLQUlVUVFSMVFRVnFOZ0lRSUFJb0FoUkJNRWdFUUNBQ0lBSW9BaFJCRDNFMkFoUUxDd0pBSUFJb0FoUkZEUUFnQWlnQ0ZFRUlUZ1JBSUFJb0FoUkJEMHdOQVFzZ0FrRitOZ0ljREFFTEFrQWdBaWdDRENnQ09DSURSUTBBSUFJb0Fnd29BaWdnQWlnQ0ZFWU5BQ0FDS0FJWUtBSW9JQU1nQWlnQ0dDZ0NKQkVDQUNBQ0tBSU1RUUEyQWpnTElBSW9BZ3dnQWlnQ0VEWUNEQ0FDS0FJTUlBSW9BaFEyQWlnZ0FpZ0NHQ0VESXdCQkVHc2lCQ1FBSUFRZ0F6WUNDQUpBSUFRb0FnZ1F5d0lFUUNBRVFYNDJBZ3dNQVFzZ0JDQUVLQUlJS0FJY05nSUVJQVFvQWdSQkFEWUNMQ0FFS0FJRVFRQTJBakFnQkNnQ0JFRUFOZ0kwSUFRb0FnZ2hCeU1BUVJCcklnTWtBQ0FESUFjMkFnZ0NRQ0FES0FJSUVNc0NCRUFnQTBGK05nSU1EQUVMSUFNZ0F5Z0NDQ2dDSERZQ0JDQURLQUlFUVFBMkFpQWdBeWdDQ0VFQU5nSVVJQU1vQWdoQkFEWUNDQ0FES0FJSVFRQTJBaGdnQXlnQ0JDZ0NEQ0lIQkVBZ0F5Z0NDQ0FIUVFGeE5nSXdDeUFES0FJRVFiVCtBRFlDQkNBREtBSUVRUUEyQWdnZ0F5Z0NCRUVBTmdJUUlBTW9BZ1JCZ0lBQ05nSVlJQU1vQWdSQkFEWUNKQ0FES0FJRVFRQTJBandnQXlnQ0JFRUFOZ0pBSUFNb0FnUWdBeWdDQkVHMENtb2lCellDY0NBREtBSUVJQWMyQWxRZ0F5Z0NCQ0FITmdKUUlBTW9BZ1JCQVRZQ3hEY2dBeWdDQkVGL05nTElOeUFEUVFBMkFnd0xJQU1vQWd3aEJ5QURRUkJxSkFBZ0JDQUhOZ0lNQ3lBRUtBSU1JUU1nQkVFUWFpUUFJQUlnQXpZQ0hBc2dBaWdDSENFRElBSkJJR29rQUNBQklBTTJBZ2dnQVNnQ0NBUkFJQUVvQWhnb0FpZ2dBU2dDQkNBQktBSVlLQUlrRVFJQUlBRW9BaGhCQURZQ0hBc2dBU0FCS0FJSU5nSWNDeUFCS0FJY0dpQUJRU0JxSkFBZ0JVRVFhaVFBSXdCQjBBQnJJZ0VrQUNBQklBazJBa2dnQVVFQU5nSkVBa0FDUUFKQUlBRW9Ba2dReXdJTkFDQUJLQUpJS0FJTVJRMEFJQUVvQWtnb0FnQU5BU0FCS0FKSUtBSUVSUTBCQ3lBQlFYNDJBa3dNQVFzZ0FTQUJLQUpJS0FJY05nSkFJQUVvQWtBb0FnUkJ2LzRBUmdSQUlBRW9Ba0JCd1A0QU5nSUVDeUFCSUFFb0FrZ29BZ3cyQWpnZ0FTQUJLQUpJS0FJUU5nSXdJQUVnQVNnQ1NDZ0NBRFlDUENBQklBRW9Ba2dvQWdRMkFqUWdBU0FCS0FKQUtBSThOZ0lzSUFFZ0FTZ0NRQ2dDUURZQ0tDQUJJQUVvQWpRMkFpUWdBU0FCS0FJd05nSWdJQUZCQURZQ0NBTkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFFb0FrQW9BZ1JCdFA0QWF3NGZBQUVDQXdRRkJnY0lDUW9MREEwT0R4QVJFaE1VRlJZWEdCa2FHeHdkSGg4TElBRW9Ba0FvQWd4RkJFQWdBU2dDUUVIQS9nQTJBZ1FNSVFzRFFDQUJLQUlvUVJCSkJFQWdBU2dDTkVVTklTQUJJQUVvQWpSQkFXczJBalFnQVNBQktBSThJZ0pCQVdvMkFqd2dBU0FCS0FJc0lBSXRBQUFnQVNnQ0tIUnFOZ0lzSUFFZ0FTZ0NLRUVJYWpZQ0tBd0JDd3NDUUNBQktBSkFLQUlNUVFKeFJRMEFJQUVvQWl4Qm41WUNSdzBBSUFFb0FrQW9BaWhGQkVBZ0FTZ0NRRUVQTmdJb0MwRUFRUUJCQUJDNEFTRUNJQUVvQWtBZ0FqWUNIQ0FCSUFFb0FpdzZBQVFnQVNBQktBSXNRUWgyT2dBRklBRW9Ba0FvQWh3Z0FVRUVha0VDRUxnQklRSWdBU2dDUUNBQ05nSWNJQUZCQURZQ0xDQUJRUUEyQWlnZ0FTZ0NRRUcxL2dBMkFnUU1JUXNnQVNnQ1FFRUFOZ0lVSUFFb0FrQW9BaVFpQWdSQUlBSkJmellDTUFzQ1FDQUJLQUpBS0FJTVFRRnhCRUFnQVNnQ0xFSC9BWEZCQ0hRZ0FTZ0NMRUVJZG1wQkgzQkZEUUVMSUFFb0FraEIxZGdCTmdJWUlBRW9Ba0JCMGY0QU5nSUVEQ0VMSUFFb0FpeEJEM0ZCQ0VjRVFDQUJLQUpJUWFMa0FUWUNHQ0FCS0FKQVFkSCtBRFlDQkF3aEN5QUJJQUVvQWl4QkJIWTJBaXdnQVNBQktBSW9RUVJyTmdJb0lBRWdBU2dDTEVFUGNVRUlhallDRENBQktBSkFLQUlvUlFSQUlBRW9Ba0FnQVNnQ0REWUNLQXNDUUNBQktBSU1RUTlOQkVBZ0FTZ0NEQ0FCS0FKQUtBSW9UUTBCQ3lBQktBSklRZW5jQVRZQ0dDQUJLQUpBUWRIK0FEWUNCQXdoQ3lBQktBSkFRUUVnQVNnQ0RIUTJBaGhCQUVFQVFRQVFrUU1oQWlBQktBSkFJQUkyQWh3Z0FTZ0NTQ0FDTmdJd0lBRW9Ba0JCdmY0QVFiLytBQ0FCS0FJc1FZQUVjUnMyQWdRZ0FVRUFOZ0lzSUFGQkFEWUNLQXdnQ3dOQUlBRW9BaWhCRUVrRVFDQUJLQUkwUlEwZ0lBRWdBU2dDTkVFQmF6WUNOQ0FCSUFFb0Fqd2lBa0VCYWpZQ1BDQUJJQUVvQWl3Z0FpMEFBQ0FCS0FJb2RHbzJBaXdnQVNBQktBSW9RUWhxTmdJb0RBRUxDeUFCS0FKQUlBRW9BaXcyQWhRZ0FTZ0NRQ2dDRkVIL0FYRkJDRWNFUUNBQktBSklRYUxrQVRZQ0dDQUJLQUpBUWRIK0FEWUNCQXdnQ3lBQktBSkFLQUlVUVlEQUEzRUVRQ0FCS0FKSVFZek1BVFlDR0NBQktBSkFRZEgrQURZQ0JBd2dDeUFCS0FKQUtBSWtJZ0lFUUNBQ0lBRW9BaXhCQ0haQkFYRTJBZ0FMQWtBZ0FTZ0NRQ2dDRkVHQUJIRkZEUUFnQVNnQ1FDZ0NERUVFY1VVTkFDQUJJQUVvQWl3NkFBUWdBU0FCS0FJc1FRaDJPZ0FGSUFFb0FrQW9BaHdnQVVFRWFrRUNFTGdCSVFJZ0FTZ0NRQ0FDTmdJY0N5QUJRUUEyQWl3Z0FVRUFOZ0lvSUFFb0FrQkJ0djRBTmdJRUN3TkFJQUVvQWloQklFa0VRQ0FCS0FJMFJRMGZJQUVnQVNnQ05FRUJhellDTkNBQklBRW9BandpQWtFQmFqWUNQQ0FCSUFFb0Fpd2dBaTBBQUNBQktBSW9kR28yQWl3Z0FTQUJLQUlvUVFocU5nSW9EQUVMQ3lBQktBSkFLQUlrSWdJRVFDQUNJQUVvQWl3MkFnUUxBa0FnQVNnQ1FDZ0NGRUdBQkhGRkRRQWdBU2dDUUNnQ0RFRUVjVVVOQUNBQklBRW9BaXc2QUFRZ0FTQUJLQUlzUVFoMk9nQUZJQUVnQVNnQ0xFRVFkam9BQmlBQklBRW9BaXhCR0hZNkFBY2dBU2dDUUNnQ0hDQUJRUVJxUVFRUXVBRWhBaUFCS0FKQUlBSTJBaHdMSUFGQkFEWUNMQ0FCUVFBMkFpZ2dBU2dDUUVHMy9nQTJBZ1FMQTBBZ0FTZ0NLRUVRU1FSQUlBRW9BalJGRFI0Z0FTQUJLQUkwUVFGck5nSTBJQUVnQVNnQ1BDSUNRUUZxTmdJOElBRWdBU2dDTENBQ0xRQUFJQUVvQWloMGFqWUNMQ0FCSUFFb0FpaEJDR28yQWlnTUFRc0xJQUVvQWtBb0FpUWlBZ1JBSUFJZ0FTZ0NMRUgvQVhFMkFnZ2dBU2dDUUNnQ0pDQUJLQUlzUVFoMk5nSU1Dd0pBSUFFb0FrQW9BaFJCZ0FSeFJRMEFJQUVvQWtBb0FneEJCSEZGRFFBZ0FTQUJLQUlzT2dBRUlBRWdBU2dDTEVFSWRqb0FCU0FCS0FKQUtBSWNJQUZCQkdwQkFoQzRBU0VDSUFFb0FrQWdBallDSEFzZ0FVRUFOZ0lzSUFGQkFEWUNLQ0FCS0FKQVFiaitBRFlDQkFzQ1FDQUJLQUpBS0FJVVFZQUljUVJBQTBBZ0FTZ0NLRUVRU1FSQUlBRW9BalJGRFI4Z0FTQUJLQUkwUVFGck5nSTBJQUVnQVNnQ1BDSUNRUUZxTmdJOElBRWdBU2dDTENBQ0xRQUFJQUVvQWloMGFqWUNMQ0FCSUFFb0FpaEJDR28yQWlnTUFRc0xJQUVvQWtBZ0FTZ0NMRFlDUkNBQktBSkFLQUlrSWdJRVFDQUNJQUVvQWl3MkFoUUxBa0FnQVNnQ1FDZ0NGRUdBQkhGRkRRQWdBU2dDUUNnQ0RFRUVjVVVOQUNBQklBRW9BaXc2QUFRZ0FTQUJLQUlzUVFoMk9nQUZJQUVvQWtBb0Fod2dBVUVFYWtFQ0VMZ0JJUUlnQVNnQ1FDQUNOZ0ljQ3lBQlFRQTJBaXdnQVVFQU5nSW9EQUVMSUFFb0FrQW9BaVFpQWdSQUlBSkJBRFlDRUFzTElBRW9Ba0JCdWY0QU5nSUVDeUFCS0FKQUtBSVVRWUFJY1FSQUlBRWdBU2dDUUNnQ1JEWUNIQ0FCS0FJY0lBRW9BalJMQkVBZ0FTQUJLQUkwTmdJY0N5QUJLQUljQkVBQ1FDQUJLQUpBS0FJa0lnSkZEUUFnQWlnQ0VFVU5BQ0FCSUFJb0FoUWdBU2dDUUNnQ1JHczJBZ3dnQVNnQ1FDZ0NKQ2dDRUNBQktBSU1haUFCS0FJOEFuOGdBU2dDUUNnQ0pDZ0NHQ0lDSUFFb0Fnd2dBU2dDSEdwSkJFQWdBaUFCS0FJTWF3d0JDeUFCS0FJY0N4QnJHZ3NDUUNBQktBSkFLQUlVUVlBRWNVVU5BQ0FCS0FKQUtBSU1RUVJ4UlEwQUlBRW9Ba0FvQWh3Z0FTZ0NQQ0FCS0FJY0VMZ0JJUUlnQVNnQ1FDQUNOZ0ljQ3lBQklBRW9BalFnQVNnQ0hHczJBalFnQVNBQktBSWNJQUVvQWp4cU5nSThJQUVvQWtBaUFpQUNLQUpFSUFFb0FoeHJOZ0pFQ3lBQktBSkFLQUpFRFJzTElBRW9Ba0JCQURZQ1JDQUJLQUpBUWJyK0FEWUNCQXNDUUNBQktBSkFLQUlVUVlBUWNRUkFJQUVvQWpSRkRSc2dBVUVBTmdJY0EwQWdBU2dDUENFQ0lBRWdBU2dDSENJRFFRRnFOZ0ljSUFFZ0FpQURhaTBBQURZQ0RBSkFJQUVvQWtBb0FpUWlBa1VOQUNBQ0tBSWNJZ05GRFFBZ0FTZ0NRQ2dDUkNBQ0tBSWdUdzBBSUFFb0Fnd2hCQ0FCS0FKQUlnVW9Ba1FoQWlBRklBSkJBV28yQWtRZ0FpQURhaUFFT2dBQUN5QUJLQUlNQkg4Z0FTZ0NIQ0FCS0FJMFNRVkJBQXRCQVhFTkFBc0NRQ0FCS0FKQUtBSVVRWUFFY1VVTkFDQUJLQUpBS0FJTVFRUnhSUTBBSUFFb0FrQW9BaHdnQVNnQ1BDQUJLQUljRUxnQklRSWdBU2dDUUNBQ05nSWNDeUFCSUFFb0FqUWdBU2dDSEdzMkFqUWdBU0FCS0FJY0lBRW9BanhxTmdJOElBRW9BZ3dOR3d3QkN5QUJLQUpBS0FJa0lnSUVRQ0FDUVFBMkFod0xDeUFCS0FKQVFRQTJBa1FnQVNnQ1FFRzcvZ0EyQWdRTEFrQWdBU2dDUUNnQ0ZFR0FJSEVFUUNBQktBSTBSUTBhSUFGQkFEWUNIQU5BSUFFb0Fqd2hBaUFCSUFFb0Fod2lBMEVCYWpZQ0hDQUJJQUlnQTJvdEFBQTJBZ3dDUUNBQktBSkFLQUlrSWdKRkRRQWdBaWdDSkNJRFJRMEFJQUVvQWtBb0FrUWdBaWdDS0U4TkFDQUJLQUlNSVFRZ0FTZ0NRQ0lGS0FKRUlRSWdCU0FDUVFGcU5nSkVJQUlnQTJvZ0JEb0FBQXNnQVNnQ0RBUi9JQUVvQWh3Z0FTZ0NORWtGUVFBTFFRRnhEUUFMQWtBZ0FTZ0NRQ2dDRkVHQUJIRkZEUUFnQVNnQ1FDZ0NERUVFY1VVTkFDQUJLQUpBS0FJY0lBRW9BandnQVNnQ0hCQzRBU0VDSUFFb0FrQWdBallDSEFzZ0FTQUJLQUkwSUFFb0FoeHJOZ0kwSUFFZ0FTZ0NIQ0FCS0FJOGFqWUNQQ0FCS0FJTURSb01BUXNnQVNnQ1FDZ0NKQ0lDQkVBZ0FrRUFOZ0lrQ3dzZ0FTZ0NRRUc4L2dBMkFnUUxJQUVvQWtBb0FoUkJnQVJ4QkVBRFFDQUJLQUlvUVJCSkJFQWdBU2dDTkVVTkdpQUJJQUVvQWpSQkFXczJBalFnQVNBQktBSThJZ0pCQVdvMkFqd2dBU0FCS0FJc0lBSXRBQUFnQVNnQ0tIUnFOZ0lzSUFFZ0FTZ0NLRUVJYWpZQ0tBd0JDd3NDUUNBQktBSkFLQUlNUVFSeFJRMEFJQUVvQWl3Z0FTZ0NRQ2dDSEVILy93TnhSZzBBSUFFb0FraEI3ZG9CTmdJWUlBRW9Ba0JCMGY0QU5nSUVEQm9MSUFGQkFEWUNMQ0FCUVFBMkFpZ0xJQUVvQWtBb0FpUWlBZ1JBSUFJZ0FTZ0NRQ2dDRkVFSmRVRUJjVFlDTENBQktBSkFLQUlrUVFFMkFqQUxRUUJCQUVFQUVMZ0JJUUlnQVNnQ1FDQUNOZ0ljSUFFb0FrZ2dBallDTUNBQktBSkFRYi8rQURZQ0JBd1lDd05BSUFFb0FpaEJJRWtFUUNBQktBSTBSUTBZSUFFZ0FTZ0NORUVCYXpZQ05DQUJJQUVvQWp3aUFrRUJhallDUENBQklBRW9BaXdnQWkwQUFDQUJLQUlvZEdvMkFpd2dBU0FCS0FJb1FRaHFOZ0lvREFFTEN5QUJLQUpBSUFFb0FpeEJDSFpCZ1A0RGNTQUJLQUlzUVJoMmFpQUJLQUlzUVlEK0EzRkJDSFJxSUFFb0FpeEIvd0Z4UVJoMGFpSUNOZ0ljSUFFb0FrZ2dBallDTUNBQlFRQTJBaXdnQVVFQU5nSW9JQUVvQWtCQnZ2NEFOZ0lFQ3lBQktBSkFLQUlRUlFSQUlBRW9Ba2dnQVNnQ09EWUNEQ0FCS0FKSUlBRW9BakEyQWhBZ0FTZ0NTQ0FCS0FJOE5nSUFJQUVvQWtnZ0FTZ0NORFlDQkNBQktBSkFJQUVvQWl3MkFqd2dBU2dDUUNBQktBSW9OZ0pBSUFGQkFqWUNUQXdZQzBFQVFRQkJBQkNSQXlFQ0lBRW9Ba0FnQWpZQ0hDQUJLQUpJSUFJMkFqQWdBU2dDUUVHLy9nQTJBZ1FMSUFFb0FrUkJCVVlORkNBQktBSkVRUVpHRFJRTElBRW9Ba0FvQWdnRVFDQUJJQUVvQWl3Z0FTZ0NLRUVIY1hZMkFpd2dBU0FCS0FJb0lBRW9BaWhCQjNGck5nSW9JQUVvQWtCQnp2NEFOZ0lFREJVTEEwQWdBU2dDS0VFRFNRUkFJQUVvQWpSRkRSVWdBU0FCS0FJMFFRRnJOZ0kwSUFFZ0FTZ0NQQ0lDUVFGcU5nSThJQUVnQVNnQ0xDQUNMUUFBSUFFb0FpaDBhallDTENBQklBRW9BaWhCQ0dvMkFpZ01BUXNMSUFFb0FrQWdBU2dDTEVFQmNUWUNDQ0FCSUFFb0FpeEJBWFkyQWl3Z0FTQUJLQUlvUVFGck5nSW9Ba0FDUUFKQUFrQUNRQ0FCS0FJc1FRTnhEZ1FBQVFJREJBc2dBU2dDUUVIQi9nQTJBZ1FNQXdzakFFRVFheUlDSUFFb0FrQTJBZ3dnQWlnQ0RFSFE3QUkyQWxBZ0FpZ0NERUVKTmdKWUlBSW9BZ3hCMFB3Q05nSlVJQUlvQWd4QkJUWUNYQ0FCS0FKQVFjZitBRFlDQkNBQktBSkVRUVpHQkVBZ0FTQUJLQUlzUVFKMk5nSXNJQUVnQVNnQ0tFRUNhellDS0F3WEN3d0NDeUFCS0FKQVFjVCtBRFlDQkF3QkN5QUJLQUpJUWRYZEFUWUNHQ0FCS0FKQVFkSCtBRFlDQkFzZ0FTQUJLQUlzUVFKMk5nSXNJQUVnQVNnQ0tFRUNhellDS0F3VUN5QUJJQUVvQWl3Z0FTZ0NLRUVIY1hZMkFpd2dBU0FCS0FJb0lBRW9BaWhCQjNGck5nSW9BMEFnQVNnQ0tFRWdTUVJBSUFFb0FqUkZEUlFnQVNBQktBSTBRUUZyTmdJMElBRWdBU2dDUENJQ1FRRnFOZ0k4SUFFZ0FTZ0NMQ0FDTFFBQUlBRW9BaWgwYWpZQ0xDQUJJQUVvQWloQkNHbzJBaWdNQVFzTElBRW9BaXhCLy84RGNTQUJLQUlzUVJCMlFmLy9BM05IQkVBZ0FTZ0NTRUhhMFFFMkFoZ2dBU2dDUUVIUi9nQTJBZ1FNRkFzZ0FTZ0NRQ0FCS0FJc1FmLy9BM0UyQWtRZ0FVRUFOZ0lzSUFGQkFEWUNLQ0FCS0FKQVFjTCtBRFlDQkNBQktBSkVRUVpHRFJJTElBRW9Ba0JCdy80QU5nSUVDeUFCSUFFb0FrQW9Ba1EyQWh3Z0FTZ0NIQVJBSUFFb0Fod2dBU2dDTkVzRVFDQUJJQUVvQWpRMkFod0xJQUVvQWh3Z0FTZ0NNRXNFUUNBQklBRW9BakEyQWh3TElBRW9BaHhGRFJFZ0FTZ0NPQ0FCS0FJOElBRW9BaHdRYXhvZ0FTQUJLQUkwSUFFb0FoeHJOZ0kwSUFFZ0FTZ0NIQ0FCS0FJOGFqWUNQQ0FCSUFFb0FqQWdBU2dDSEdzMkFqQWdBU0FCS0FJY0lBRW9BamhxTmdJNElBRW9Ba0FpQWlBQ0tBSkVJQUVvQWh4ck5nSkVEQklMSUFFb0FrQkJ2LzRBTmdJRURCRUxBMEFnQVNnQ0tFRU9TUVJBSUFFb0FqUkZEUkVnQVNBQktBSTBRUUZyTmdJMElBRWdBU2dDUENJQ1FRRnFOZ0k4SUFFZ0FTZ0NMQ0FDTFFBQUlBRW9BaWgwYWpZQ0xDQUJJQUVvQWloQkNHbzJBaWdNQVFzTElBRW9Ba0FnQVNnQ0xFRWZjVUdCQW1vMkFtUWdBU0FCS0FJc1FRVjJOZ0lzSUFFZ0FTZ0NLRUVGYXpZQ0tDQUJLQUpBSUFFb0FpeEJIM0ZCQVdvMkFtZ2dBU0FCS0FJc1FRVjJOZ0lzSUFFZ0FTZ0NLRUVGYXpZQ0tDQUJLQUpBSUFFb0FpeEJEM0ZCQkdvMkFtQWdBU0FCS0FJc1FRUjJOZ0lzSUFFZ0FTZ0NLRUVFYXpZQ0tBSkFJQUVvQWtBb0FtUkJuZ0pOQkVBZ0FTZ0NRQ2dDYUVFZVRRMEJDeUFCS0FKSVFZZlJBVFlDR0NBQktBSkFRZEgrQURZQ0JBd1JDeUFCS0FKQVFRQTJBbXdnQVNnQ1FFSEYvZ0EyQWdRTEEwQWdBU2dDUUNnQ2JDQUJLQUpBS0FKZ1NRUkFBMEFnQVNnQ0tFRURTUVJBSUFFb0FqUkZEUklnQVNBQktBSTBRUUZyTmdJMElBRWdBU2dDUENJQ1FRRnFOZ0k4SUFFZ0FTZ0NMQ0FDTFFBQUlBRW9BaWgwYWpZQ0xDQUJJQUVvQWloQkNHbzJBaWdNQVFzTElBRW9BaXhCQjNFaEF5QUJLQUpBUWZRQWFpRUVJQUVvQWtBaUJTZ0NiQ0VDSUFVZ0FrRUJhallDYkNBQ1FRRjBRYURzQW1vdkFRQkJBWFFnQkdvZ0F6c0JBQ0FCSUFFb0FpeEJBM1kyQWl3Z0FTQUJLQUlvUVFOck5nSW9EQUVMQ3dOQUlBRW9Ba0FvQW14QkUwa0VRQ0FCS0FKQVFmUUFhaUVESUFFb0FrQWlCQ2dDYkNFQ0lBUWdBa0VCYWpZQ2JDQUNRUUYwUWFEc0Ftb3ZBUUJCQVhRZ0EycEJBRHNCQUF3QkN3c2dBU2dDUUNBQktBSkFRYlFLYWpZQ2NDQUJLQUpBSUFFb0FrQW9BbkEyQWxBZ0FTZ0NRRUVITmdKWUlBRkJBQ0FCS0FKQVFmUUFha0VUSUFFb0FrQkI4QUJxSUFFb0FrQkIyQUJxSUFFb0FrQkI5QVZxRVBJRE5nSUlJQUVvQWdnRVFDQUJLQUpJUWZQTEFUWUNHQ0FCS0FKQVFkSCtBRFlDQkF3UUN5QUJLQUpBUVFBMkFtd2dBU2dDUUVIRy9nQTJBZ1FMQTBBQ1FDQUJLQUpBS0FKc0lBRW9Ba0FvQW1RZ0FTZ0NRQ2dDYUdwUERRQURRQUpBSUFFZ0FTZ0NRQ2dDVUNBQktBSXNRUUVnQVNnQ1FDZ0NXSFJCQVd0eFFRSjBhaWdCQURZQ0ZDQUJMUUFWSUFFb0FpaE5EUUFnQVNnQ05FVU5FU0FCSUFFb0FqUkJBV3MyQWpRZ0FTQUJLQUk4SWdKQkFXbzJBandnQVNBQktBSXNJQUl0QUFBZ0FTZ0NLSFJxTmdJc0lBRWdBU2dDS0VFSWFqWUNLQXdCQ3dzQ1FDQUJMd0VXUVJCSkJFQWdBU0FCS0FJc0lBRXRBQlYyTmdJc0lBRWdBU2dDS0NBQkxRQVZhellDS0NBQkx3RVdJUU1nQVNnQ1FFSDBBR29oQkNBQktBSkFJZ1VvQW13aEFpQUZJQUpCQVdvMkFtd2dBa0VCZENBRWFpQURPd0VBREFFTEFrQWdBUzhCRmtFUVJnUkFBMEFnQVNnQ0tDQUJMUUFWUVFKcVNRUkFJQUVvQWpSRkRSUWdBU0FCS0FJMFFRRnJOZ0kwSUFFZ0FTZ0NQQ0lDUVFGcU5nSThJQUVnQVNnQ0xDQUNMUUFBSUFFb0FpaDBhallDTENBQklBRW9BaWhCQ0dvMkFpZ01BUXNMSUFFZ0FTZ0NMQ0FCTFFBVmRqWUNMQ0FCSUFFb0FpZ2dBUzBBRldzMkFpZ2dBU2dDUUNnQ2JFVUVRQ0FCS0FKSVFaN05BVFlDR0NBQktBSkFRZEgrQURZQ0JBd0VDeUFCSUFFb0FrQWdBU2dDUUNnQ2JFRUJkR292QVhJMkFnd2dBU0FCS0FJc1FRTnhRUU5xTmdJY0lBRWdBU2dDTEVFQ2RqWUNMQ0FCSUFFb0FpaEJBbXMyQWlnTUFRc0NRQ0FCTHdFV1FSRkdCRUFEUUNBQktBSW9JQUV0QUJWQkEycEpCRUFnQVNnQ05FVU5GU0FCSUFFb0FqUkJBV3MyQWpRZ0FTQUJLQUk4SWdKQkFXbzJBandnQVNBQktBSXNJQUl0QUFBZ0FTZ0NLSFJxTmdJc0lBRWdBU2dDS0VFSWFqWUNLQXdCQ3dzZ0FTQUJLQUlzSUFFdEFCVjJOZ0lzSUFFZ0FTZ0NLQ0FCTFFBVmF6WUNLQ0FCUVFBMkFnd2dBU0FCS0FJc1FRZHhRUU5xTmdJY0lBRWdBU2dDTEVFRGRqWUNMQ0FCSUFFb0FpaEJBMnMyQWlnTUFRc0RRQ0FCS0FJb0lBRXRBQlZCQjJwSkJFQWdBU2dDTkVVTkZDQUJJQUVvQWpSQkFXczJBalFnQVNBQktBSThJZ0pCQVdvMkFqd2dBU0FCS0FJc0lBSXRBQUFnQVNnQ0tIUnFOZ0lzSUFFZ0FTZ0NLRUVJYWpZQ0tBd0JDd3NnQVNBQktBSXNJQUV0QUJWMk5nSXNJQUVnQVNnQ0tDQUJMUUFWYXpZQ0tDQUJRUUEyQWd3Z0FTQUJLQUlzUWY4QWNVRUxhallDSENBQklBRW9BaXhCQjNZMkFpd2dBU0FCS0FJb1FRZHJOZ0lvQ3dzZ0FTZ0NRQ2dDYkNBQktBSWNhaUFCS0FKQUtBSmtJQUVvQWtBb0FtaHFTd1JBSUFFb0FraEJuczBCTmdJWUlBRW9Ba0JCMGY0QU5nSUVEQUlMQTBBZ0FTQUJLQUljSWdKQkFXczJBaHdnQWdSQUlBRW9BZ3doQXlBQktBSkFRZlFBYWlFRUlBRW9Ba0FpQlNnQ2JDRUNJQVVnQWtFQmFqWUNiQ0FDUVFGMElBUnFJQU03QVFBTUFRc0xDd3dCQ3dzZ0FTZ0NRQ2dDQkVIUi9nQkdEUTRnQVNnQ1FDOEI5QVJGQkVBZ0FTZ0NTRUd3MkFFMkFoZ2dBU2dDUUVIUi9nQTJBZ1FNRHdzZ0FTZ0NRQ0FCS0FKQVFiUUthallDY0NBQktBSkFJQUVvQWtBb0FuQTJBbEFnQVNnQ1FFRUpOZ0pZSUFGQkFTQUJLQUpBUWZRQWFpQUJLQUpBS0FKa0lBRW9Ba0JCOEFCcUlBRW9Ba0JCMkFCcUlBRW9Ba0JCOUFWcUVQSUROZ0lJSUFFb0FnZ0VRQ0FCS0FKSVFkZkxBVFlDR0NBQktBSkFRZEgrQURZQ0JBd1BDeUFCS0FKQUlBRW9Ba0FvQW5BMkFsUWdBU2dDUUVFR05nSmNJQUZCQWlBQktBSkFRZlFBYWlBQktBSkFLQUprUVFGMGFpQUJLQUpBS0FKb0lBRW9Ba0JCOEFCcUlBRW9Ba0JCM0FCcUlBRW9Ba0JCOUFWcUVQSUROZ0lJSUFFb0FnZ0VRQ0FCS0FKSVFhWE1BVFlDR0NBQktBSkFRZEgrQURZQ0JBd1BDeUFCS0FKQVFjZitBRFlDQkNBQktBSkVRUVpHRFEwTElBRW9Ba0JCeVA0QU5nSUVDd0pBSUFFb0FqUkJCa2tOQUNBQktBSXdRWUlDU1EwQUlBRW9Ba2dnQVNnQ09EWUNEQ0FCS0FKSUlBRW9BakEyQWhBZ0FTZ0NTQ0FCS0FJOE5nSUFJQUVvQWtnZ0FTZ0NORFlDQkNBQktBSkFJQUVvQWl3MkFqd2dBU2dDUUNBQktBSW9OZ0pBSUFFb0FpQWhBeU1BUWVBQWF5SUNJQUVvQWtnMkFsd2dBaUFETmdKWUlBSWdBaWdDWENnQ0hEWUNWQ0FDSUFJb0Fsd29BZ0EyQWxBZ0FpQUNLQUpRSUFJb0Fsd29BZ1JCQld0cU5nSk1JQUlnQWlnQ1hDZ0NERFlDU0NBQ0lBSW9Ba2dnQWlnQ1dDQUNLQUpjS0FJUWEyczJBa1FnQWlBQ0tBSklJQUlvQWx3b0FoQkJnUUpyYWpZQ1FDQUNJQUlvQWxRb0FpdzJBandnQWlBQ0tBSlVLQUl3TmdJNElBSWdBaWdDVkNnQ05EWUNOQ0FDSUFJb0FsUW9BamcyQWpBZ0FpQUNLQUpVS0FJOE5nSXNJQUlnQWlnQ1ZDZ0NRRFlDS0NBQ0lBSW9BbFFvQWxBMkFpUWdBaUFDS0FKVUtBSlVOZ0lnSUFKQkFTQUNLQUpVS0FKWWRFRUJhellDSENBQ1FRRWdBaWdDVkNnQ1hIUkJBV3MyQWhnRFFDQUNLQUlvUVE5SkJFQWdBaUFDS0FKUUlnTkJBV28yQWxBZ0FpQUNLQUlzSUFNdEFBQWdBaWdDS0hScU5nSXNJQUlnQWlnQ0tFRUlhallDS0NBQ0lBSW9BbEFpQTBFQmFqWUNVQ0FDSUFJb0Fpd2dBeTBBQUNBQ0tBSW9kR28yQWl3Z0FpQUNLQUlvUVFocU5nSW9DeUFDSUFJb0FpUWdBaWdDTENBQ0tBSWNjVUVDZEdvb0FRQTJBaFFDUUFKQUEwQWdBaUFDTFFBVk5nSVFJQUlnQWlnQ0xDQUNLQUlRZGpZQ0xDQUNJQUlvQWlnZ0FpZ0NFR3MyQWlnZ0FpQUNMUUFVTmdJUUlBSW9BaEJGQkVBZ0FpOEJGaUVESUFJZ0FpZ0NTQ0lFUVFGcU5nSklJQVFnQXpvQUFBd0NDeUFDS0FJUVFSQnhCRUFnQWlBQ0x3RVdOZ0lNSUFJZ0FpZ0NFRUVQY1RZQ0VDQUNLQUlRQkVBZ0FpZ0NLQ0FDS0FJUVNRUkFJQUlnQWlnQ1VDSURRUUZxTmdKUUlBSWdBaWdDTENBRExRQUFJQUlvQWloMGFqWUNMQ0FDSUFJb0FpaEJDR28yQWlnTElBSWdBaWdDRENBQ0tBSXNRUUVnQWlnQ0VIUkJBV3R4YWpZQ0RDQUNJQUlvQWl3Z0FpZ0NFSFkyQWl3Z0FpQUNLQUlvSUFJb0FoQnJOZ0lvQ3lBQ0tBSW9RUTlKQkVBZ0FpQUNLQUpRSWdOQkFXbzJBbEFnQWlBQ0tBSXNJQU10QUFBZ0FpZ0NLSFJxTmdJc0lBSWdBaWdDS0VFSWFqWUNLQ0FDSUFJb0FsQWlBMEVCYWpZQ1VDQUNJQUlvQWl3Z0F5MEFBQ0FDS0FJb2RHbzJBaXdnQWlBQ0tBSW9RUWhxTmdJb0N5QUNJQUlvQWlBZ0FpZ0NMQ0FDS0FJWWNVRUNkR29vQVFBMkFoUUNRQU5BSUFJZ0FpMEFGVFlDRUNBQ0lBSW9BaXdnQWlnQ0VIWTJBaXdnQWlBQ0tBSW9JQUlvQWhCck5nSW9JQUlnQWkwQUZEWUNFQ0FDS0FJUVFSQnhCRUFnQWlBQ0x3RVdOZ0lJSUFJZ0FpZ0NFRUVQY1RZQ0VDQUNLQUlvSUFJb0FoQkpCRUFnQWlBQ0tBSlFJZ05CQVdvMkFsQWdBaUFDS0FJc0lBTXRBQUFnQWlnQ0tIUnFOZ0lzSUFJZ0FpZ0NLRUVJYWpZQ0tDQUNLQUlvSUFJb0FoQkpCRUFnQWlBQ0tBSlFJZ05CQVdvMkFsQWdBaUFDS0FJc0lBTXRBQUFnQWlnQ0tIUnFOZ0lzSUFJZ0FpZ0NLRUVJYWpZQ0tBc0xJQUlnQWlnQ0NDQUNLQUlzUVFFZ0FpZ0NFSFJCQVd0eGFqWUNDQ0FDSUFJb0Fpd2dBaWdDRUhZMkFpd2dBaUFDS0FJb0lBSW9BaEJyTmdJb0lBSWdBaWdDU0NBQ0tBSkVhellDRUFKQUlBSW9BZ2dnQWlnQ0VFc0VRQ0FDSUFJb0FnZ2dBaWdDRUdzMkFoQWdBaWdDRUNBQ0tBSTRTd1JBSUFJb0FsUW9Bc1EzQkVBZ0FpZ0NYRUdpMlFFMkFoZ2dBaWdDVkVIUi9nQTJBZ1FNQ2dzTElBSWdBaWdDTURZQ0JBSkFJQUlvQWpSRkJFQWdBaUFDS0FJRUlBSW9BandnQWlnQ0VHdHFOZ0lFSUFJb0FoQWdBaWdDREVrRVFDQUNJQUlvQWd3Z0FpZ0NFR3MyQWd3RFFDQUNJQUlvQWdRaUEwRUJhallDQkNBRExRQUFJUU1nQWlBQ0tBSklJZ1JCQVdvMkFrZ2dCQ0FET2dBQUlBSWdBaWdDRUVFQmF5SUROZ0lRSUFNTkFBc2dBaUFDS0FKSUlBSW9BZ2hyTmdJRUN3d0JDd0pBSUFJb0FqUWdBaWdDRUVrRVFDQUNJQUlvQWdRZ0FpZ0NQQ0FDS0FJMGFpQUNLQUlRYTJvMkFnUWdBaUFDS0FJUUlBSW9BalJyTmdJUUlBSW9BaEFnQWlnQ0RFa0VRQ0FDSUFJb0Fnd2dBaWdDRUdzMkFnd0RRQ0FDSUFJb0FnUWlBMEVCYWpZQ0JDQURMUUFBSVFNZ0FpQUNLQUpJSWdSQkFXbzJBa2dnQkNBRE9nQUFJQUlnQWlnQ0VFRUJheUlETmdJUUlBTU5BQXNnQWlBQ0tBSXdOZ0lFSUFJb0FqUWdBaWdDREVrRVFDQUNJQUlvQWpRMkFoQWdBaUFDS0FJTUlBSW9BaEJyTmdJTUEwQWdBaUFDS0FJRUlnTkJBV28yQWdRZ0F5MEFBQ0VESUFJZ0FpZ0NTQ0lFUVFGcU5nSklJQVFnQXpvQUFDQUNJQUlvQWhCQkFXc2lBellDRUNBRERRQUxJQUlnQWlnQ1NDQUNLQUlJYXpZQ0JBc0xEQUVMSUFJZ0FpZ0NCQ0FDS0FJMElBSW9BaEJyYWpZQ0JDQUNLQUlRSUFJb0FneEpCRUFnQWlBQ0tBSU1JQUlvQWhCck5nSU1BMEFnQWlBQ0tBSUVJZ05CQVdvMkFnUWdBeTBBQUNFRElBSWdBaWdDU0NJRVFRRnFOZ0pJSUFRZ0F6b0FBQ0FDSUFJb0FoQkJBV3NpQXpZQ0VDQUREUUFMSUFJZ0FpZ0NTQ0FDS0FJSWF6WUNCQXNMQ3dOQUlBSW9BZ3hCQWtzRVFDQUNJQUlvQWdRaUEwRUJhallDQkNBRExRQUFJUU1nQWlBQ0tBSklJZ1JCQVdvMkFrZ2dCQ0FET2dBQUlBSWdBaWdDQkNJRFFRRnFOZ0lFSUFNdEFBQWhBeUFDSUFJb0FrZ2lCRUVCYWpZQ1NDQUVJQU02QUFBZ0FpQUNLQUlFSWdOQkFXbzJBZ1FnQXkwQUFDRURJQUlnQWlnQ1NDSUVRUUZxTmdKSUlBUWdBem9BQUNBQ0lBSW9BZ3hCQTJzMkFnd01BUXNMREFFTElBSWdBaWdDU0NBQ0tBSUlhellDQkFOQUlBSWdBaWdDQkNJRFFRRnFOZ0lFSUFNdEFBQWhBeUFDSUFJb0FrZ2lCRUVCYWpZQ1NDQUVJQU02QUFBZ0FpQUNLQUlFSWdOQkFXbzJBZ1FnQXkwQUFDRURJQUlnQWlnQ1NDSUVRUUZxTmdKSUlBUWdBem9BQUNBQ0lBSW9BZ1FpQTBFQmFqWUNCQ0FETFFBQUlRTWdBaUFDS0FKSUlnUkJBV28yQWtnZ0JDQURPZ0FBSUFJZ0FpZ0NERUVEYXpZQ0RDQUNLQUlNUVFKTERRQUxDeUFDS0FJTUJFQWdBaUFDS0FJRUlnTkJBV28yQWdRZ0F5MEFBQ0VESUFJZ0FpZ0NTQ0lFUVFGcU5nSklJQVFnQXpvQUFDQUNLQUlNUVFGTEJFQWdBaUFDS0FJRUlnTkJBV28yQWdRZ0F5MEFBQ0VESUFJZ0FpZ0NTQ0lFUVFGcU5nSklJQVFnQXpvQUFBc0xEQUlMSUFJb0FoQkJ3QUJ4UlFSQUlBSWdBaWdDSUNBQ0x3RVdJQUlvQWl4QkFTQUNLQUlRZEVFQmEzRnFRUUowYWlnQkFEWUNGQXdCQ3dzZ0FpZ0NYRUhhNGdFMkFoZ2dBaWdDVkVIUi9nQTJBZ1FNQkFzTUFnc2dBaWdDRUVIQUFIRkZCRUFnQWlBQ0tBSWtJQUl2QVJZZ0FpZ0NMRUVCSUFJb0FoQjBRUUZyY1dwQkFuUnFLQUVBTmdJVURBRUxDeUFDS0FJUVFTQnhCRUFnQWlnQ1ZFRy8vZ0EyQWdRTUFnc2dBaWdDWEVHKzRnRTJBaGdnQWlnQ1ZFSFIvZ0EyQWdRTUFRc2dBaWdDVUNBQ0tBSk1TUVIvSUFJb0FrZ2dBaWdDUUVrRlFRQUxRUUZ4RFFFTEN5QUNJQUlvQWloQkEzWTJBZ3dnQWlBQ0tBSlFJQUlvQWd4ck5nSlFJQUlnQWlnQ0tDQUNLQUlNUVFOMGF6WUNLQ0FDSUFJb0FpeEJBU0FDS0FJb2RFRUJhM0UyQWl3Z0FpZ0NYQ0FDS0FKUU5nSUFJQUlvQWx3Z0FpZ0NTRFlDRENBQ0tBSmNBbjhnQWlnQ1VDQUNLQUpNU1FSQUlBSW9Ba3dnQWlnQ1VHdEJCV29NQVF0QkJTQUNLQUpRSUFJb0FreHJhd3MyQWdRZ0FpZ0NYQUovSUFJb0FrZ2dBaWdDUUVrRVFDQUNLQUpBSUFJb0FraHJRWUVDYWd3QkMwR0JBaUFDS0FKSUlBSW9Ba0JyYXdzMkFoQWdBaWdDVkNBQ0tBSXNOZ0k4SUFJb0FsUWdBaWdDS0RZQ1FDQUJJQUVvQWtnb0FndzJBamdnQVNBQktBSklLQUlRTmdJd0lBRWdBU2dDU0NnQ0FEWUNQQ0FCSUFFb0FrZ29BZ1EyQWpRZ0FTQUJLQUpBS0FJOE5nSXNJQUVnQVNnQ1FDZ0NRRFlDS0NBQktBSkFLQUlFUWIvK0FFWUVRQ0FCS0FKQVFYODJBc2czQ3d3TkN5QUJLQUpBUVFBMkFzZzNBMEFDUUNBQklBRW9Ba0FvQWxBZ0FTZ0NMRUVCSUFFb0FrQW9BbGgwUVFGcmNVRUNkR29vQVFBMkFoUWdBUzBBRlNBQktBSW9UUTBBSUFFb0FqUkZEUTBnQVNBQktBSTBRUUZyTmdJMElBRWdBU2dDUENJQ1FRRnFOZ0k4SUFFZ0FTZ0NMQ0FDTFFBQUlBRW9BaWgwYWpZQ0xDQUJJQUVvQWloQkNHbzJBaWdNQVFzTElBRXRBQlFpQWtVZ0FrSHdBWEZ5UlFSQUlBRWdBU2dDRkRZQ0VBTkFBa0FnQVNBQktBSkFLQUpRSUFFdkFSSWdBU2dDTEVFQklBRXRBQkVpQWlBQkxRQVFhblJCQVd0eElBSjJha0VDZEdvb0FRQTJBaFFnQVNnQ0tDQUJMUUFSSUFFdEFCVnFUdzBBSUFFb0FqUkZEUTRnQVNBQktBSTBRUUZyTmdJMElBRWdBU2dDUENJQ1FRRnFOZ0k4SUFFZ0FTZ0NMQ0FDTFFBQUlBRW9BaWgwYWpZQ0xDQUJJQUVvQWloQkNHbzJBaWdNQVFzTElBRWdBU2dDTENBQkxRQVJkallDTENBQklBRW9BaWdnQVMwQUVXczJBaWdnQVNnQ1FDSUNJQUV0QUJFZ0FpZ0N5RGRxTmdMSU53c2dBU0FCS0FJc0lBRXRBQlYyTmdJc0lBRWdBU2dDS0NBQkxRQVZhellDS0NBQktBSkFJZ0lnQVMwQUZTQUNLQUxJTjJvMkFzZzNJQUVvQWtBZ0FTOEJGallDUkNBQkxRQVVSUVJBSUFFb0FrQkJ6ZjRBTmdJRURBMExJQUV0QUJSQklIRUVRQ0FCS0FKQVFYODJBc2czSUFFb0FrQkJ2LzRBTmdJRURBMExJQUV0QUJSQndBQnhCRUFnQVNnQ1NFRys0Z0UyQWhnZ0FTZ0NRRUhSL2dBMkFnUU1EUXNnQVNnQ1FDQUJMUUFVUVE5eE5nSk1JQUVvQWtCQnlmNEFOZ0lFQ3lBQktBSkFLQUpNQkVBRFFDQUJLQUlvSUFFb0FrQW9Ba3hKQkVBZ0FTZ0NORVVORFNBQklBRW9BalJCQVdzMkFqUWdBU0FCS0FJOElnSkJBV28yQWp3Z0FTQUJLQUlzSUFJdEFBQWdBU2dDS0hScU5nSXNJQUVnQVNnQ0tFRUlhallDS0F3QkN3c2dBU2dDUUNJQ0lBSW9Ba1FnQVNnQ0xFRUJJQUVvQWtBb0FreDBRUUZyY1dvMkFrUWdBU0FCS0FJc0lBRW9Ba0FvQWt4Mk5nSXNJQUVnQVNnQ0tDQUJLQUpBS0FKTWF6WUNLQ0FCS0FKQUlnSWdBU2dDUUNnQ1RDQUNLQUxJTjJvMkFzZzNDeUFCS0FKQUlBRW9Ba0FvQWtRMkFzdzNJQUVvQWtCQnl2NEFOZ0lFQ3dOQUFrQWdBU0FCS0FKQUtBSlVJQUVvQWl4QkFTQUJLQUpBS0FKY2RFRUJhM0ZCQW5ScUtBRUFOZ0lVSUFFdEFCVWdBU2dDS0UwTkFDQUJLQUkwUlEwTElBRWdBU2dDTkVFQmF6WUNOQ0FCSUFFb0Fqd2lBa0VCYWpZQ1BDQUJJQUVvQWl3Z0FpMEFBQ0FCS0FJb2RHbzJBaXdnQVNBQktBSW9RUWhxTmdJb0RBRUxDeUFCTFFBVVFmQUJjVVVFUUNBQklBRW9BaFEyQWhBRFFBSkFJQUVnQVNnQ1FDZ0NWQ0FCTHdFU0lBRW9BaXhCQVNBQkxRQVJJZ0lnQVMwQUVHcDBRUUZyY1NBQ2RtcEJBblJxS0FFQU5nSVVJQUVvQWlnZ0FTMEFFU0FCTFFBVmFrOE5BQ0FCS0FJMFJRME1JQUVnQVNnQ05FRUJhellDTkNBQklBRW9BandpQWtFQmFqWUNQQ0FCSUFFb0Fpd2dBaTBBQUNBQktBSW9kR28yQWl3Z0FTQUJLQUlvUVFocU5nSW9EQUVMQ3lBQklBRW9BaXdnQVMwQUVYWTJBaXdnQVNBQktBSW9JQUV0QUJGck5nSW9JQUVvQWtBaUFpQUJMUUFSSUFJb0FzZzNhallDeURjTElBRWdBU2dDTENBQkxRQVZkallDTENBQklBRW9BaWdnQVMwQUZXczJBaWdnQVNnQ1FDSUNJQUV0QUJVZ0FpZ0N5RGRxTmdMSU55QUJMUUFVUWNBQWNRUkFJQUVvQWtoQjJ1SUJOZ0lZSUFFb0FrQkIwZjRBTmdJRURBc0xJQUVvQWtBZ0FTOEJGallDU0NBQktBSkFJQUV0QUJSQkQzRTJBa3dnQVNnQ1FFSEwvZ0EyQWdRTElBRW9Ba0FvQWt3RVFBTkFJQUVvQWlnZ0FTZ0NRQ2dDVEVrRVFDQUJLQUkwUlEwTElBRWdBU2dDTkVFQmF6WUNOQ0FCSUFFb0Fqd2lBa0VCYWpZQ1BDQUJJQUVvQWl3Z0FpMEFBQ0FCS0FJb2RHbzJBaXdnQVNBQktBSW9RUWhxTmdJb0RBRUxDeUFCS0FKQUlnSWdBaWdDU0NBQktBSXNRUUVnQVNnQ1FDZ0NUSFJCQVd0eGFqWUNTQ0FCSUFFb0Fpd2dBU2dDUUNnQ1RIWTJBaXdnQVNBQktBSW9JQUVvQWtBb0FreHJOZ0lvSUFFb0FrQWlBaUFCS0FKQUtBSk1JQUlvQXNnM2FqWUN5RGNMSUFFb0FrQkJ6UDRBTmdJRUN5QUJLQUl3UlEwSElBRWdBU2dDSUNBQktBSXdhellDSEFKQUlBRW9Ba0FvQWtnaUFpQUJLQUljU3dSQUlBRWdBaUFCS0FJY2F6WUNIQ0FCS0FJY0lBRW9Ba0FvQWpCTEJFQWdBU2dDUUNnQ3hEY0VRQ0FCS0FKSVFhTFpBVFlDR0NBQktBSkFRZEgrQURZQ0JBd01Dd3NDUUNBQktBSkFLQUkwSWdJZ0FTZ0NIRWtFUUNBQklBRW9BaHdnQW1zMkFod2dBU0FCS0FKQUtBSTRJQUVvQWtBb0Fpd2dBU2dDSEd0cU5nSVlEQUVMSUFFZ0FTZ0NRQ2dDT0NBQktBSkFLQUkwSUFFb0FoeHJhallDR0FzZ0FTZ0NRQ2dDUkNJQ0lBRW9BaHhKQkVBZ0FTQUNOZ0ljQ3d3QkN5QUJJQUVvQWpnZ0FTZ0NRQ2dDU0dzMkFoZ2dBU0FCS0FKQUtBSkVOZ0ljQ3lBQktBSWNJQUVvQWpCTEJFQWdBU0FCS0FJd05nSWNDeUFCSUFFb0FqQWdBU2dDSEdzMkFqQWdBU2dDUUNJQ0lBSW9Ba1FnQVNnQ0hHczJBa1FEUUNBQklBRW9BaGdpQWtFQmFqWUNHQ0FDTFFBQUlRSWdBU0FCS0FJNElnTkJBV28yQWpnZ0F5QUNPZ0FBSUFFZ0FTZ0NIRUVCYXlJQ05nSWNJQUlOQUFzZ0FTZ0NRQ2dDUkVVRVFDQUJLQUpBUWNqK0FEWUNCQXNNQ0FzZ0FTZ0NNRVVOQmlBQktBSkFLQUpFSVFJZ0FTQUJLQUk0SWdOQkFXbzJBamdnQXlBQ09nQUFJQUVnQVNnQ01FRUJhellDTUNBQktBSkFRY2orQURZQ0JBd0hDeUFCS0FKQUtBSU1CRUFEUUNBQktBSW9RU0JKQkVBZ0FTZ0NORVVOQ0NBQklBRW9BalJCQVdzMkFqUWdBU0FCS0FJOElnSkJBV28yQWp3Z0FTQUJLQUlzSUFJdEFBQWdBU2dDS0hScU5nSXNJQUVnQVNnQ0tFRUlhallDS0F3QkN3c2dBU0FCS0FJZ0lBRW9BakJyTmdJZ0lBRW9Ba2dpQWlBQktBSWdJQUlvQWhScU5nSVVJQUVvQWtBaUFpQUJLQUlnSUFJb0FpQnFOZ0lnQWtBZ0FTZ0NRQ2dDREVFRWNVVU5BQ0FCS0FJZ1JRMEFBbjhnQVNnQ1FDZ0NGQVJBSUFFb0FrQW9BaHdnQVNnQ09DQUJLQUlnYXlBQktBSWdFTGdCREFFTElBRW9Ba0FvQWh3Z0FTZ0NPQ0FCS0FJZ2F5QUJLQUlnRUpFREN5RUNJQUVvQWtBZ0FqWUNIQ0FCS0FKSUlBSTJBakFMSUFFZ0FTZ0NNRFlDSUFKQUlBRW9Ba0FvQWd4QkJIRkZEUUFDZnlBQktBSkFLQUlVQkVBZ0FTZ0NMQXdCQ3lBQktBSXNRUWgyUVlEK0EzRWdBU2dDTEVFWWRtb2dBU2dDTEVHQS9nTnhRUWgwYWlBQktBSXNRZjhCY1VFWWRHb0xJQUVvQWtBb0FoeEdEUUFnQVNnQ1NFR0QyUUUyQWhnZ0FTZ0NRRUhSL2dBMkFnUU1DQXNnQVVFQU5nSXNJQUZCQURZQ0tBc2dBU2dDUUVIUC9nQTJBZ1FMQWtBZ0FTZ0NRQ2dDREVVTkFDQUJLQUpBS0FJVVJRMEFBMEFnQVNnQ0tFRWdTUVJBSUFFb0FqUkZEUWNnQVNBQktBSTBRUUZyTmdJMElBRWdBU2dDUENJQ1FRRnFOZ0k4SUFFZ0FTZ0NMQ0FDTFFBQUlBRW9BaWgwYWpZQ0xDQUJJQUVvQWloQkNHbzJBaWdNQVFzTElBRW9BaXdnQVNnQ1FDZ0NJRWNFUUNBQktBSklRZXpZQVRZQ0dDQUJLQUpBUWRIK0FEWUNCQXdIQ3lBQlFRQTJBaXdnQVVFQU5nSW9DeUFCS0FKQVFkRCtBRFlDQkFzZ0FVRUJOZ0lJREFNTElBRkJmVFlDQ0F3Q0N5QUJRWHcyQWt3TUF3c2dBVUYrTmdKTURBSUxDeUFCS0FKSUlBRW9BamcyQWd3Z0FTZ0NTQ0FCS0FJd05nSVFJQUVvQWtnZ0FTZ0NQRFlDQUNBQktBSklJQUVvQWpRMkFnUWdBU2dDUUNBQktBSXNOZ0k4SUFFb0FrQWdBU2dDS0RZQ1FBSkFBa0FnQVNnQ1FDZ0NMQTBBSUFFb0FpQWdBU2dDU0NnQ0VFWU5BU0FCS0FKQUtBSUVJZ0pCMGY0QVR3MEJJQUpCenY0QVNRMEFJQUVvQWtSQkJFWU5BUXNnQVNnQ1NDRURJQUVvQWtnb0Fnd2hCQ0FCS0FJZ0lBRW9Ba2dvQWhCcklRVWpBRUVnYXlJQ0pBQWdBaUFETmdJWUlBSWdCRFlDRkNBQ0lBVTJBaEFnQWlBQ0tBSVlLQUljTmdJTUFrQWdBaWdDRENnQ09FVUVRQ0FDS0FJWUtBSW9RUUVnQWlnQ0RDZ0NLSFJCQVNBQ0tBSVlLQUlnRVFRQUlRTWdBaWdDRENBRE5nSTRJQUlvQWd3b0FqaEZCRUFnQWtFQk5nSWNEQUlMQ3lBQ0tBSU1LQUlzUlFSQUlBSW9BZ3hCQVNBQ0tBSU1LQUlvZERZQ0xDQUNLQUlNUVFBMkFqUWdBaWdDREVFQU5nSXdDd0pBSUFJb0Fnd29BaXdpQXlBQ0tBSVFUUVJBSUFJb0Fnd29BamdnQWlnQ0ZDQURheUFERUdzYUlBSW9BZ3hCQURZQ05DQUNLQUlNSUFJb0Fnd29BaXcyQWpBTUFRc2dBaUFDS0FJTUtBSXNJQUlvQWd3b0FqUnJOZ0lJSUFJb0FnZ2dBaWdDRUVzRVFDQUNJQUlvQWhBMkFnZ0xJQUlvQWd3b0FqZ2dBaWdDRENnQ05Hb2dBaWdDRkNBQ0tBSVFheUFDS0FJSUVHc2FJQUlnQWlnQ0VDQUNLQUlJYXpZQ0VBSkFJQUlvQWhBRVFDQUNLQUlNS0FJNElBSW9BaFFnQWlnQ0VHc2dBaWdDRUJCckdpQUNLQUlNSUFJb0FoQTJBalFnQWlnQ0RDQUNLQUlNS0FJc05nSXdEQUVMSUFJb0Fnd2lBeUFDS0FJSUlBTW9BalJxTmdJMElBSW9BZ3dvQWpRZ0FpZ0NEQ2dDTEVZRVFDQUNLQUlNUVFBMkFqUUxJQUlvQWd3b0FqQWdBaWdDRENnQ0xFa0VRQ0FDS0FJTUlnTWdBaWdDQ0NBREtBSXdhallDTUFzTEN5QUNRUUEyQWh3TElBSW9BaHdnQWtFZ2FpUUFCRUFnQVNnQ1FFSFMvZ0EyQWdRZ0FVRjhOZ0pNREFJTEN5QUJJQUVvQWlRZ0FTZ0NTQ2dDQkdzMkFpUWdBU0FCS0FJZ0lBRW9Ba2dvQWhCck5nSWdJQUVvQWtnaUFpQUJLQUlrSUFJb0FnaHFOZ0lJSUFFb0FrZ2lBaUFCS0FJZ0lBSW9BaFJxTmdJVUlBRW9Ba0FpQWlBQktBSWdJQUlvQWlCcU5nSWdBa0FnQVNnQ1FDZ0NERUVFY1VVTkFDQUJLQUlnUlEwQUFuOGdBU2dDUUNnQ0ZBUkFJQUVvQWtBb0Fod2dBU2dDU0NnQ0RDQUJLQUlnYXlBQktBSWdFTGdCREFFTElBRW9Ba0FvQWh3Z0FTZ0NTQ2dDRENBQktBSWdheUFCS0FJZ0VKRURDeUVDSUFFb0FrQWdBallDSENBQktBSklJQUkyQWpBTElBRW9Ba2dnQVNnQ1FDZ0NRRUhBQUVFQUlBRW9Ba0FvQWdnYmFrR0FBVUVBSUFFb0FrQW9BZ1FpQWtHLy9nQkdHMnBCZ0FKQkFDQUNRY0wrQUVZZ0FrSEgvZ0JHY2h0cU5nSXNBa0FDUUNBQktBSWtSUVJBSUFFb0FpQkZEUUVMSUFFb0FrUkJCRWNOQVFzZ0FTZ0NDQTBBSUFGQmV6WUNDQXNnQVNBQktBSUlOZ0pNQ3lBQktBSk1HaUFCUWRBQWFpUUFJd0JCRUdzaUFTUUFJQUVnQ1RZQ0NBSkFJQUVvQWdnUXl3SUVRQ0FCUVg0MkFnd01BUXNnQVNBQktBSUlLQUljTmdJRUlBRW9BZ1FvQWpnaUFnUkFJQUVvQWdnb0FpZ2dBaUFCS0FJSUtBSWtFUUlBQ3lBQktBSUlLQUlvSUFFb0FnZ29BaHdnQVNnQ0NDZ0NKQkVDQUNBQktBSUlRUUEyQWh3Z0FVRUFOZ0lNQ3lBQktBSU1HaUFCUVJCcUpBQWdDQkJJSXdCQkVHc2lBaVFBQWtBQ1FBSkFBa0FnQmtHT2lRSVEyZ01pQVFSQUlBWkJtWWtDRU5vRElnTkZEUUVnQmtIWHZnRVEyZ01pQlVVTkFpQUJJQVpySWdSQkNXc2hBU0FFUVFsTURRTWdBUkJOSUFaQkNXb2dBUkNiQWlJSUlBRkJBU0FLUWFITEFSQ1FBeUlCUWM3REFSRFBBU0lKRUxjQkdpQUpFSllCSUFFUVNDQUlFRWdnQXlBR2F5QUVRUXBxSWdScklnRVFUU0FFSUFacUlBRVFtd0lpQkNBQlFRRWdDa0hSeXdFUWtBTWlBVUhPd3dFUXp3RWlDQkMzQVJvZ0NCQ1dBU0FCRUVnZ0JCQklJQVVnQTJ0QkMyc2lBUkJOSUFOQkMyb2dBUkNiQWlJRElBRkJBU0FLUVl5REFoQ1FBeUlCUWM3REFSRFBBU0lFRUxjQkdpQUVFSllCSUFFUVNDQURFRWdnQWtFUWFpUUFEQVFMUVFCQkEwR3FqQUpCQUJCT0RBY0xRUUJCQTBIU2pBSkJBQkJPREFZTFFRQkJBMEdpamdKQkFCQk9EQVVMSUFJZ0FUWUNBRUVBUVFOQjBZb0NJQUlRVGd3RUN5QUdFRWdnQUVGQWF5UUFEQUlMUVFCQkEwR2ppZ0pCQUJCT0RBSUxJQUFnQWpZQ0FFRUFRUU5CL1lrQ0lBQVFUZ3dCQzBFQkR3dEJBUkFDQUF1ckFRRUVmeUFBRVBrRlFaQURJUVFEUUNBRVFaQUVSd1JBSXdCQkVHc2lBaVFBSUFJZ0FTQUVhaXNEQURrRENDQUNRUUEyQWdRQ1FDTUJMUUFZUVFGeEJFQWpBVUVVYWlFRERBRUxJd0VoQTBFQ1FZeXFBa0VBRUF3aEJTQURRUUU2QUJnZ0EwRVVhaUlESUFVMkFnQUxJQU1vQWdBZ0FCQ1FBVUhvMmdFZ0FrRUVhaUFDUVFocUVBMGFJQUlnQWlnQ0JEWUNBQ0FDRUpJRElBSkJFR29rQUNBRVFRaHFJUVFNQVFzTEM2QUdBZ3AvQVh3akFFSFFBV3NpQUNRQVFYOGhDQ0FCS0FJQUlBRWdBU3dBQzBFQVNCc2hCU01BUWFBQ2F5SUNKQUJCZnlFREFrQWdBRUVZYWlJSlJTQUZSWElOQUNBRlFaY2hFTThCSWdSRkJFQVFXU0lFS0FJQUlRWWdBaUFGTmdJVUlBSWdCallDRUVFQVFRTkJsU29nQWtFUWFoQk9JQUlnQkNnQ0FCRDFBallDQkNBQ1FkY2ZOZ0lBUVFCQkEwR1RHU0FDRUU0TUFRdEJBQ0VESUFSQkFFRUNFSWtEQW44Q1FDQUVLQUpNUVFCSUJFQWdCQ2dDQUNFRkRBRUxJQVFRaFFFZ0JDZ0NBQ0VGUlEwQUlBUVFoQUVMQWtBZ0JVRUZka0VCY1FSQUlBSVFXU0lES0FJQU5nSlFRUUJCQTBIWExDQUNRZEFBYWhCT0lBSWdBeWdDQUJEMUFqWUNSQ0FDUWRjZk5nSkFRUUJCQTBHVEdTQUNRVUJyRUU0TUFRc2dCQkM0QlNFR0lBUVFtUVVDUUFOQUlBTWlCVUVFUmcwQklBVkJBV29oQXlBR0lBVkJBM1JCMUlvQmFpZ0NBQ0lIYncwQUN5QUNRZUFBYWlBSFFRRWdCQkJ0UVFGSEJFQWdBaEJaSWdNb0FnQTJBakJCQUVFRFFlczRJQUpCTUdvUVRpQUNJQU1vQWdBUTlRSTJBaVFnQWtIWEh6WUNJRUVBUVFOQmt4a2dBa0VnYWhCT0RBSUxJQUlnQXpZQ2tBSWdBa0hnQUdvUWl3WWdCVVVFUUNBQ0t3UGdBU0VNSUFJZ0Fpc0QyQUU1QStBQklBSWdERGtEMkFFTElBa2dBa0hnQUdwQnVBSDhDZ0FBSUFKQkFEWUNuQUpCQVNFR0EwQkJBQ0FHUVFGR0RRTWFJQUlnQWlnQ25BSWlCMEVFYWpZQ25BSWdCeWdDQUNJSElBa29BckFCSWdvMkFyQUJJQUpCNEFCcUlnc2dDa0VEZEVITWlnRnFLQUlBUVFFZ0JCQnRRUUZIRFFJZ0FpQUROZ0tRQWlBTEVJc0dJQVZGQkVBZ0Fpc0Q0QUVoRENBQ0lBSXJBOWdCT1FQZ0FTQUNJQXc1QTlnQkN5QUhJQUpCNEFCcVFiZ0IvQW9BQUNBR1FRRnFJUVlNQUFzQUMwRUFRUU5CcXpaQkFCQk9DMEYvQ3lFRElBUVFsZ0VMSUFKQm9BSnFKQUFDUUNBRFFRQklCRUFnQUVFTWFrR0doZ0lRVXlJRElBRW9BZ0FnQVNBQkxBQUxRUUJJR3hENkF5QURFRXdhREFFTFFiRGxCRUd3NVFRb0FnQWlBVUVCYWpZQ0FDQUFJQUUyQWd3Z0FFRU1haEQxQlNBQVFSaHFRYmdCL0FvQUFDQUFLQUlNSVFnTElBQkIwQUZxSkFBZ0NBdFdBQ0FCS0FMd0FpQUJLQUxzQWlJQmEwRUVkU0FDVFFSQVFRZ1FoQUpCd05NQkVNWUdJZ0JCNE1jRU5nSUFJQUJCZ01nRVFRNFFCQUFMSUFBZ0FTQUNRUVIwYWlJQktRSUFOd0lBSUFBZ0FTa0NDRGNDQ0F2S0RRRVFmeU1BUVJCcklna2tBRUYvSVFRZ0FDZ0NrQVFoQlFKQUFuOGdBQ2dDd0FFaUFpZ0NBQ0VCSUFJb0FnUWhDaU1BUVJCcklnWWtBRUdrNndBUVRTSURCRUFDUUNBRFFwcXo1dmlEZ0lDQXdBQTNBaWdnQTBLTGdJQ0FvQUUzQWlBZ0EwS1pnSUNBc0FFM0FoZ2dBeUFLTmdJSUlBTWdBVFlDQkNBRElBVTJBaFFnQTBFSVFRRVExUVVpQlNBRlFRRk1HeUlGSUFWQkNFNGJJZ1UyQXVCbklBWWdCVFlDQUVFQVFRRkJ0eFFnQmhCT0lBTkJoT3NBYWlFSElBTkI1T2NBYWlFSUlBRWdDbXdoQ2tFQUlRRURRQ0FCSUFWSUJFQWdDQ0FCUVRSc2FpSUZJQW9RVFNJTE5nSVFJQXRGRFFJZ0JVRUFOZ0lVSUFjZ0FVRUNkR29nQVNBRlFRSVEyZ1UyQWdBZ0FVRUJhaUVCSUFNb0F1Qm5JUVVNQVFzTElBWkJFR29rQUNBRERBSUxDd3dCQ3lJRElBSTJBZ3dnQTBFQk5nSUFJQU1nQWtFSWFoRDFBeUlCTmdJUUlBRkVBQUFBQUFBQUFBQVF6QUlDUUNBRFJRUkFJQWxCQkdwQmg0VUNFRk1pQUJDbEFTQUFFRXdhREFFTElBQWdBellDNkFFQ2Z4RFZCVUVCVEFSQUlBbEJCR3BCa1ljQ0VGTWlBeERvQVNBREVFd2FRUVlNQVFzZ0NVRUVha0hlaGdJUVV5SURFT2dCSUFNUVRCcEJEQXNoQXlBQUtBTG9BU0lCQkVBZ0FVTUFBS0JBT0FJc0N5QUFLQUxvQVNJQkJFQWdBVU1BQUFBL09BSW9DeUFBS0FMb0FTSUJCRUFnQVVFUU5nSWtDeUFBS0FMb0FTSUJCRUFnQVNBRE5nSVlDeUFBS0FMb0FTSURCRUFnQTBFR05nSWNDeUFBS0FMb0FTSURCRUFnQTBFR05nSWdDeUFBS0FMQUFTRURJd0JCRUdzaURDUUFJQU1vQWdBaER5QURLQUlFSVJCQnZDQVFnZ1VpQmtVRVFBd0NDMEVFRUdZaURVRUFOZ0lBUVJnUVppSUtRZ0EzQWdBZ0NrSUFOd0lJSUFwQ2dJQ0FnSUNBZ01BL053SVFRY2dHRUdZaUJFSUFOd0pBSUFSQkFEWUNGQ0FFUWdBM0Fnd2dCRUdBZ0lEOEF6WUNXQ0FFUWdBM0FrZ2dCRUlBTndKUUlBUkIzQUJxSWdGQ0FEY0NCQ0FCUWRTekFUWUNBQ0FCUVFBMkFod2dBVUlBTndJVUlBRkNBRGNDRENBQlFTQnFRUUJCSlB3TEFDQUVRYUFCYWlJQlFnQTNBaUFnQVVFQk9nQWNJQUZCQURZQ0dDQUJRZ0EzQWhBZ0FVS0tnSUNBb0FFM0FnZ2dBVUlBTndJQUlBRkNBRGNDUENBQlFZQ0FnSWtFTmdJNElBRkJnSURBaUFRMkFsZ2dBVUlBTndJb0lBRkNBRGNDTUNBQlFnQTNBa1FnQVVJQU53Sk1JQUZCM0FCcUlnSkNBRGNDQUNBQ1FReHFRUUJCS1B3TEFDQUJRUUEyQXBnQklBRkNBRGNDa0FFZ0FVR0lKeERPQkNBQlFaQUJha0VrRVBJQklBUkJ2QUpxSWdKQnNMa0JRVEQ4Q2dBQUlBSkJNR3BCNExrQlFURDhDZ0FBSUFKQjRBQnFRWkM2QVVFdy9Bb0FBQ0FDUVpBQmFrSEF1Z0ZCTVB3S0FBQWdBa0hBQVdwQjhMb0JRVEQ4Q2dBQUlBSkI4QUZxUWFDN0FVRXcvQW9BQUNBQ1FzMlpzL2lEZ0lEd3dBQTNBcmdDSUFKQ3pabXo5clBtelBrK053S3dBaUFDUW9DQWdQVGp6Sm5UUGpjQ3FBSWdBa0xObWJQdXMrYk1tVDQzQXFBQ0lBUkNnSUNBZ0xEbXpKay9Od0tFQlNBRVFnQTNBdndFSUFSQmpBVnFJZ0pDQURjQ0FDQUNRUUU2QUJBZ0FrSUFOd0lJSUFKQkZHcEJBRUhZQVB3TEFDQUNRZ0EzQW5BZ0FrR0FnSUQ4QXpZQ2JDQUNRZ0EzQW5nZ0FrSUFOd0tBQVNBRVFaUUdhaUlGUVFCQkpQd0xBQ0FGUVlESUFCRHlBUUpBSUFWQkdHb2lBaWdDQkNBQ0tBSUFJZ2hyUVFOMUlnZEJnQWhKQkVBakFFRWdheUlPSkFBQ1FFR0FDQ0FIYXlJSUlBSW9BZ2dnQWlnQ0JDSUhhMEVEZFUwRVFDQUNJQWdRb2dZTUFRc2dEa0VNYWlBQ0lBY2dBaWdDQUd0QkEzVWdDR29Rb1FZZ0FpZ0NCQ0FDS0FJQWEwRURkU0FDUVFocUVLa0RJZ3NvQWdnaUJ5QUlRUU4wYWlFSUEwQWdCeUFJUndSQUlBZENBRGNDQUNBSFFRaHFJUWNNQVFzTElBc2dDRFlDQ0NBQ0lBc1FxQU1nQ3hDbkF3c2dEa0VnYWlRQURBRUxJQWRCZ0FoTEJFQWdBaUFJUVlCQWF6WUNCQXNMSUFWQk1qWUNNQ0FGUWFnSU5nSXNJQVZCZ0FnMkFpZ2dCVU1LMXlNOE9BSWtJQVJDZ0lDQWdvU0FnTURBQURjQzFBRWdBVUgwQXhET0JDQUVRUUU2QUFnZ0JFS0lnSUNBZ0lDQW9NQUFOd0lBSUFvZ0JCQ3ZCaUFOSUFvUXNRWWdCa0tCZ0lDQWNEY0NGQ0FHSUJBMkFoQWdCaUFQTmdJTUlBWkJBVFlDQ0NBR0lBTTJBZ1FnQmlBTk5nSUFJQWtnQmlJREJIOUJKZ1VnREVFRWFrRy9nd0lRVXlJQkVLVUJJQUVRVEJwQkp3czJBZ2dnQ1NBRE5nSUVJQXhCRUdva0FDQUFLQUxnQVNFRElBQWdDU2dDQkNJQk5nTGdBU0FEQkVBZ0F5QUFLQUxrQVJFQkFDQUFLQUxnQVNFQkN5QUFJQWtvQWdnMkF1UUJRUUFoQkNBQkRRQWdDVUVFYWtHRDRBRVFVeUlBRUtVQklBQVFUQnBCZnlFRUN5QUpRUkJxSkFBZ0JBOExRUUJCQTBIMURVRUFFRTVCQVJBQ0FBdkZKZ0liZndaOUl3QkJvQUZySWdZa0FDQUdJQUkyQXB3QklBWVFSVFlDbUFFZ0JpTUROZ0tVQVNBR1FZd0JhaEQ1QlFKQUlBSWdBU2dDOUFGT0JFQWdBRUc4eUFRUTl3TWFEQUVMQWtBQ1FDQUJLQUxzQVNJQ0JFQUNRQUpBQWtBZ0FTZ0M4QUZCQW1vT0FnQUJBZ3NDUUNBQ1FRQWdBU2dDekFFaUF4dEZCRUJCQUVFRFFhK0xBa0VBRUU0TUFRc2dBaWdDaUFFaUJFVUVRRUVBUVFOQis0d0NRUUFRVGd3QkN5QUVLQUlFSUFNZ0JDZ0NDUHdLQUFBZ0FoRFlCUXNnQVVGL05nTHdBU0FCS0FMc0FTRUNDd0ovSUFKRklBWkJJR29pQjBWeVFRRWdCa0dJQVdvYkJFQkJBRUVEUWQyTkFrRUFFRTVCZnd3QkN5QUNRUkJxSWdRUWNCb2dBaWdDQ0NFRElBUVFiQnBCQUNBRFJRMEFHaUFDRU5jRlFYOGhBd0pBSUFJb0FvZ0JJZ1JGRFFBZ0JDZ0NRRVVOQUNBRVFReHFJUVZCQUNFREEwQkJBQ0VDSUFOQkEwY0VRQU5BSUFKQkJFY0VRQ0FDUVFKMElna2dCeUFEUVFSMElncHFhaUFGSUFwcUlBbHFLZ0lBT0FJQUlBSkJBV29oQWd3QkN3c2dBMEVCYWlFRERBRUxDeUFHSUFRb0FqdzJBb2dCUVFFaEF3c2dBd3NpQWtFQlJnUkFJQVpCMEFCcUlnSkIyNUFDRUZNaUJFRUJFTGtCSUFRUVRCb0NRQ0FHS0FLSUFTSUVRUUJJRFFBZ0JDQUJLQUwwQVU0TkFDQUNRWVNQQWhCVElnSWdCaWdDaUFFUXVRRWdBaEJNR2lBQklBWW9Bb2dCSWdRMkF2QUJRUUFoQWlBQklBUkJBblJxS0FMNEFTSUVCRUFnQkVFQk5nS1lBU0FFUVFocUlRVURRRUVBSVFNZ0FrRURSd1JBQTBBZ0EwRUVSd1JBSUFOQkFuUWlDU0FGSUFKQkJIUWlDbXBxSUFjZ0Ntb2dDV29xQWdBNEFnQWdBMEVCYWlFRERBRUxDeUFDUVFGcUlRSU1BUXNMSUFSQmZ6WUNxQUVMREFJTElBWkIwQUJxUVplUEFoQlRJZ0lnQmlnQ2lBRVEvUVVnQWhCTUdpQUJRWDQyQXZBQkRBRUxJQUpCQUU0TkFDQUdRZEFBYWtIRGpnSVFVeUlDRU9nQklBSVFUQm9nQVVGK05nTHdBUXNnQVNnQzhBRWlBa0VBU0EwQ0lBSWdBU2dDOUFGT0RRSWdBU2dDNkFFaEF5QUJJQUpCQW5ScUtBTDRBU0VLSUFFb0FzUUJJUmhCQUNFQ1FRQWhCQ01BUWRBQWF5SUhKQUJCZnlFRkFrQWdBMFVnQ2tWeUlCaEZJQVpCSUdvaURrVnljaUFHUVdSR2NnMEFJQW9vQXBnQlFRQk1CRUJCZmlFRkRBRUxJQVpCQURZQ0hDQURRZkFIYWlFSUlBcEI2QUJxSVJrZ0EwR1FCR29oRUNBS1FUaHFJUllnQTBFd2FpRUxJQXBCQ0dvaEZBTkFJQW9vQWdRaUJTQUNTZ1JBSUJRZ0FrSHdBR3dpQlNBS0tBSUFha0VNYWlBTElBSkJNR3dpQ1dvUXlBTUNRQ0FLS0FLWUFVRUNTQTBBSUJZZ0NpZ0NBQ0FGYWtFTWFpQUpJQkJxRU1nRElBb29BcGdCUVFOSURRQWdHU0FLS0FJQUlBVnFRUXhxSUFnZ0NXb1F5QU1MSUFKQkFXb2hBZ3dCQ3dzQ1FBSkFJQU1vQWdCQkFVWUVRQ0FEUWNnNmFpRU1JQU5COEJScUlSTWdBeWdDRENJUUtBSUVzaUVpSUJBb0FnQ3lJU01EUUVFQUlRa2dCQ0FGVGcwQ0EwQkJBQ0VDSUFsQkEwWUVRQ0FFUWZBQWJDSVJJQW9vQWdCcUtBSUVJUVZCQUNFSkEwQWdCU2dDQkNBSlNnUkFRUUFoQWdOQUlBbEJGR3dpQ0NBRktBSUFhaUlTS0FJRUlBSktCRUFDUUFKQUlCQWdCMEVnYWlBQ1FSUnNJaFVnRWlnQ0FHb2lCU29DQ0NBRktnSU1JQWRCSEdvZ0IwRVlhaEM4QlVFQVRnUkFJQWNxQWh3aUhrTUFBQUFBWFVVTkFRc2dDaWdDQUNFRkRBRUxJQW9vQWdBaEJTQWVJQ05nRFFBZ0J5b0NHQ0llUXdBQUFBQmRJQjRnSW1CeURRQWdCeW9DVENBSEtnSkFJQVVnRVdvb0FnUW9BZ0FnQ0dvb0FnQWdGV29pRWlvQ0NDSWVsQ0FTS2dJTUloOGdCeW9DUkpTU2tpSWdJQ0FnSUpRZ0J5b0NMQ0FIS2dJZ0lCNlVJQWNxQWlRZ0g1U1NraUlnSUNDVUlBY3FBandnQnlvQ01DQWVsQ0FmSUFjcUFqU1VrcElpSHlBZmxKS1NrU0lobFNBSEtnSklsQ0FnSUNHVklBY3FBaWlVSUFjcUFqZ2dIeUFobFpTU2trUE56TXk5WGcwQUlBY2dIamdDRUNBSElCSXFBZ3c0QWhRZ0VDQUhRU0JxSUFkQkVHb2dCMEVJYWhEU0JRSkFJQWNxQWd3aUhpQUtLQUlBSWdVZ0VXb29BZ1FvQWdBZ0NHb2lDQ29DRENJZlgwVU5BQ0FlSUFncUFoQmdSUTBBSUE5QnlBRkdCRUJCQUVFRFFhc01RUUFRVGlBRFFYODJBcnc2REF3TElCTWdEMEVZYkdvaUNDQUNOZ0lJSUFnZ0NUWUNCQ0FJSUFRMkFnQWdDQ0FIS2dJY09BSVFJQWNxQWhnaEhpQUlRUUEyQWd3Z0NDQWVPQUlVSUE5QkFXb2hEd3dCQ3lBZUlCOGdINUpmUlEwQUlCNGdDQ29DRUVNQUFBQS9sR0JGRFFBZ0RVSElBVVlFUUNBRFFYODJBcFJnUWNnQklRME1BUXNnRENBTlFSaHNhaUlJSUFJMkFnZ2dDQ0FKTmdJRUlBZ2dCRFlDQUNBSUlBY3FBaHc0QWhBZ0J5b0NHQ0VlSUFoQkFEWUNEQ0FJSUI0NEFoUWdEVUVCYWlFTkN5QUNRUUZxSVFJZ0JTQVJhaWdDQkNFRkRBRUxDeUFKUVFGcUlRa01BUXNMSUFSQkFXb2hCQ0FLS0FJRUlRVU1BZ1VEUUNBQ1FRUkhCRUFnQWtFQ2RDSUZJQWxCQkhRaUNDQUhRU0JxYW1vZ0N5QUVRVEJzYWlBSWFpQUZhaW9DQURnQ0FDQUNRUUZxSVFJTUFRc0xJQWxCQVdvaENRd0JDd0FMQUFzQUN5QURRY2c2YWlFUklBTkI4QlJxSVF3Z0F5Z0NDTEloSUNBREtBSUVzaUVoQTBBQ1FFRUFJUWtnQkNBRlRnMEFBMEJCQUNFQ0lBbEJBMFlFUUNBRVFmQUFiQ0lRSUFvb0FnQnFLQUlFSVFWQkFDRUpBMEFnQlNnQ0JDQUpTZ1JBUVFBaEFnTkFJQWxCRkd3aUNDQUZLQUlBYWlJVEtBSUVJQUpLQkVBQ1FBSkFRUUFnQjBFZ2FpQUNRUlJzSWhJZ0V5Z0NBR29pQlNvQ0NDQUZLZ0lNSUFkQkhHb2dCMEVZYWhDOEJVRUFUZ1JBSUFjcUFod2lIa01BQUFBQVhVVU5BUXNnQ2lnQ0FDRUZEQUVMSUFvb0FnQWhCU0FlSUNGZ0RRQWdCeW9DR0NJZVF3QUFBQUJkSUI0Z0lHQnlEUUFnQnlBRklCQnFLQUlFS0FJQUlBaHFLQUlBSUJKcUlnVXFBZ2c0QWhBZ0J5QUZLZ0lNT0FJVVFRQWdCMEVnYWlBSFFSQnFJQWRCQ0dvUTBnVUNRQ0FIS2dJTUloNGdDaWdDQUNJRklCQnFLQUlFS0FJQUlBaHFJZ2dxQWd3aUgxOUZEUUFnSGlBSUtnSVFZRVVOQUNBTlFjZ0JSZ1JBUVFCQkEwR3JERUVBRUU0Z0EwRi9OZ0s4T2d3TUN5QU1JQTFCR0d4cUlnZ2dBallDQ0NBSUlBazJBZ1FnQ0NBRU5nSUFJQWdnQnlvQ0hEZ0NFQ0FIS2dJWUlSNGdDRUVBTmdJTUlBZ2dIamdDRkNBTlFRRnFJUTBNQVFzZ0hpQWZJQitTWDBVTkFDQWVJQWdxQWhCREFBQUFQNVJnUlEwQUlBOUJ5QUZHQkVBZ0EwRi9OZ0tVWUVISUFTRVBEQUVMSUJFZ0QwRVliR29pQ0NBQ05nSUlJQWdnQ1RZQ0JDQUlJQVEyQWdBZ0NDQUhLZ0ljT0FJUUlBY3FBaGdoSGlBSVFRQTJBZ3dnQ0NBZU9BSVVJQTlCQVdvaER3c2dBa0VCYWlFQ0lBVWdFR29vQWdRaEJRd0JDd3NnQ1VFQmFpRUpEQUVMQ3lBRVFRRnFJUVFnQ2lnQ0JDRUZEQU1GQTBBZ0FrRUVSd1JBSUFKQkFuUWlCU0FKUVFSMElnZ2dCMEVnYW1wcUlBc2dCRUV3YkdvZ0NHb2dCV29xQWdBNEFnQWdBa0VCYWlFQ0RBRUxDeUFKUVFGcUlRa01BUXNBQ3dBTEN5QU1JQTFCR0d4cVFYODJBZ3dnRVNBUFFSaHNha0YvTmdJTURBRUxJQk1nRDBFWWJHcEJmellDRENBTUlBMUJHR3hxUVg4MkFnd0xJQU5Cb09BQWFpRVRJQU5Ca0JGcUlRZ2dBMEhRRG1vaERTQURRWVRyQUdvaEVpQURRZVRuQUdvaEZTQURRZEFMYWlFUUlBcEJuQUZxSVJFZ0EwSElPbW9oR2tId0ZDRVBRUUFoQkVFQUlRa0RRQUpBSUFRaEFrRUFJUVVnQ1NBREtBSWtUZzBBQTBBQ1FDQUZJQU1vQXVCblRnMEFJQWtnQXlnQ0pFWU5BQ0FESUE5cUlCRWdBaUFRSUFNb0FnUWdBeWdDQ0JEUkJTSUxRUUJJQkVBZ0QwSHdGRWNOQVVISU9pRVBJQm9nRVNBQ0lCQWdBeWdDQkNBREtBSUlFTkVGSWd0QkFFZ05BUXNnQlVFQ2RDSVhJQWRCSUdwcUlBTWdEMm9nQzBFWWJHb2lDellDQUNBUUlBSkJBM1JxSWd3Z0N5b0NFRGdDQUNBTUlBc3FBaFE0QWdRZ0ZTQUZRVFJzYWlJTUlCZzJBZ3dnRENBTE5nSUlJQXdnQ2pZQ0JDQU1JQU0yQWdBZ0VpQVhhaWdDQUJEWUJTQUVJQUpCQVdvaUFpQUNRUVZHR3lFQ0lBVkJBV29oQlNBSlFRRnFJUWtNQVFzTFFRQWhBaUFGUlEwQUEwQWdBaUFGUmcwQ0lCSWdBa0VDZENJWGFpZ0NBQkRYQlFKQUlCVWdBa0UwYkdvaUN5Z0NNQTBBSUFzcUFoZ2dBeW9DS0Y1RkRRQUNRQ0FES0FJQVFRRkdCRUFnQXlnQ0RDSU1RZWdBYWlBTEtnSWN1eUFMS2dJZ3V5QUhRUkJxSUFkQkNHb2dEQ2dDc0FFUWtRWWdEU0FFUVFOMGFpSU1JQWNyQXhDMk9BSUFJQXdnQnlzRENMWTRBZ1FNQVFzZ0RTQUVRUU4wYWlJTUlBc3FBaHc0QWdBZ0RDQUxLZ0lnT0FJRUN5QUlJQVJCREd4cUlnd2dDeW9DSkRnQ0FDQU1JQXNxQWlnNEFnUWdEQ0FMS2dJc09BSUlJQkFnQkVFRGRHb2lEQ0FIUVNCcUlCZHFLQUlBSWdzcUFoQTRBZ0FnRENBTEtnSVVPQUlFSUJNZ0JFRVliR29pRENBTEtBSUFOZ0lBSUF3Z0N5Z0NCRFlDQkNBTEtBSUlJUXNnREVFQU5nSU1JQXdnQ3pZQ0NDQUVRUUZxSVFRTElBSkJBV29oQWd3QUN3QUxDMEVBSVFJZ0JFRUFJQVJCQUVvYklROERRQ0FDSUE5SEJFQWdFU0FDUVJoc0lnbHFJZ1VnQ1NBVGFpSUpLUUlBTndJQUlBVWdDU2tDRURjQ0VDQUZJQWtwQWdnM0FnZ2dBa0VCYWlFQ0RBRUxDeUFLSUFSQkdHeHFRWDgyQXFnQkFuOENRQUpBQWtBZ0F5Z0NBRUVCUmdSQUlBUkJBMGdOQXlBR0lBTW9BaEFnRkNBTklBZ2dCQ0FPUVFBUXh3SWlIamdDSENBZUlBTXFBaXhlUlEwQklBTW9BaEJFQUFBQW9KbVo2VDhRekFJZ0JpQURLQUlRSUE0Z0RTQUlJQVFnRGtFQkVNY0NJaDQ0QWh3Z0hpQURLZ0lzWGtVTkFTQURLQUlRUkFBQUFFQXpNK00vRU13Q0lBWWdBeWdDRUNBT0lBMGdDQ0FFSUE1QkFSREhBaUllT0FJY0lCNGdBeW9DTEY1RkRRRWdBeWdDRUVRQUFBQ2dtWm5aUHhETUFpQUdJQU1vQWhBZ0RpQU5JQWdnQkNBT1FRRVF4d0lpSGpnQ0hDQWVJQU1xQWl4ZVJRMEJJQU1vQWhCRUFBQUFBQUFBQUFBUXpBSWdCaUFES0FJUUlBNGdEU0FJSUFRZ0RrRUJFTWNDSWg0NEFod2dIaUFES2dJc1hrVU5BUXdDQ3lBRVFRTklEUUlnQmlBVUlBMGdDQ0FFSUE1QkFFTUFBSUEvRU1ZQ0loNDRBaHdnSGlBREtnSXNYa1VOQUNBR0lBNGdEU0FJSUFRZ0RrRUJRODNNVEQ4UXhnSWlIamdDSENBZUlBTXFBaXhlUlEwQUlBWWdEaUFOSUFnZ0JDQU9RUUZEbXBrWlB4REdBaUllT0FJY0lCNGdBeW9DTEY1RkRRQWdCaUFPSUEwZ0NDQUVJQTVCQVVQTnpNdytFTVlDSWg0NEFod2dIaUFES2dJc1hrVU5BQ0FHSUE0Z0RTQUlJQVFnRGtFQlF3QUFBQUFReGdJaUhqZ0NIQ0FlSUFNcUFpeGVEUUVMSUFvZ0NpZ0NtQUZCQVdvMkFwZ0JRUUFoQkVFQUlRTURRRUVBSVFJZ0EwRURSZ1JBQTBCQkFDRUNJQVJCQTBZRVFBTkFRUUFoQlNBQ1FRTkdEUWdEUUNBRlFRUkhCRUFnQlVFQ2RDSUVJQlFnQWtFRWRDSURhbW9nQXlBT2FpQUVhaW9DQURnQ0FDQUZRUUZxSVFVTUFRc0xJQUpCQVdvaEFnd0FDd0FGQTBBZ0FrRUVSd1JBSUFKQkFuUWlBeUFXSUFSQkJIUWlCV3BxSUFVZ0ZHb2dBMm9xQWdBNEFnQWdBa0VCYWlFQ0RBRUxDeUFFUVFGcUlRUU1BUXNBQ3dBRkEwQWdBa0VFUndSQUlBSkJBblFpQlNBWklBTkJCSFFpQ1dwcUlBa2dGbW9nQldvcUFnQTRBZ0FnQWtFQmFpRUNEQUVMQ3lBRFFRRnFJUU1NQVFzQUN3QUxRWHdNQVF0QmZRc2hCU0FLUVFBMkFwZ0JDeUFIUWRBQWFpUUFJQVZCQUVnRVFDQUdRZEFBYWtHZml3SVFVeUlDRU9nQkRBSUxJQUVvQXZRQklRSWdCaUFCS0FMd0FUWUNBQ0FHSUFKQkFXczJBZ1JCQUVFQlFlYVBBaUFHRUU0Z0FTZ0M4QUVoQWd3Q0N5QUdRZEFBYWtHOGlnSVFVeUlDRUtVQkN5QUNFRXdhUVg0aEFpQUJRWDQyQXZBQkMwRUFJUVFDUUFKQUlBSkJBRWdOQUNBQ0lBRW9BdlFCVGcwQUEwQkJBQ0VCSUFSQkEwWUVRQ0FHUVpRQmFpSUVRZm5rQVNBR1Fad0JhaEROQWlNQVFSQnJJZ0VrQUNBRUVKQUJJQUZCQ0dwQjU5TUJFSmNESWdNUWtBRWpBRUVRYXlJQ0pBQWdBaUFHS2dJY09BSUlJQUZCek1NRUlBSkJDR29RQlRZQ0JDQUJJd00yQWdBZ0FrRVFhaVFBSUFFUWtBRVFEeUFCRUpFQklBTVFrUUVnQVVFUWFpUUFJQVpCQVRZQ0ZDQUVRYjNrQVNBR1FSUnFFTTBDUVFBaEFnTkFRUUFoQVNBQ1FRTkdCRUFnQmtHVUFXb2dCa0dNQVdvUTl3VU1CUVVEUUNBQlFRUkhCRUFqQUVFUWF5SUVKQUFnQkNBR1FkQUFhaUFDUVFSMGFpQUJRUUowYWlvQ0FEZ0NDQ0FFUVFBMkFnUUNRQ01CTFFBUVFRRnhCRUFqQVVFTWFpRUREQUVMSXdFaEEwRUNRZHlwQWtFQUVBd2hCeUFEUVFFNkFCQWdBMEVNYWlJRElBYzJBZ0FMSUFNb0FnQWdCa0dNQVdvUWtBRkI2Tm9CSUFSQkJHb2dCRUVJYWhBTkdpQUVJQVFvQWdRMkFnQWdCQkNTQXlBRVFSQnFKQUFnQVVFQmFpRUJEQUVMQ3lBQ1FRRnFJUUlNQVFzQUN3QUZBMEFnQVVFRVJ3UkFJQUZCQW5RaUFpQUVRUVIwSWdNZ0JrSFFBR3BxYWlBR1FTQnFJQU5xSUFKcUtnSUFPQUlBSUFGQkFXb2hBUXdCQ3dzZ0JFRUJhaUVFREFFTEFBc0FDeUFHUVpRQmFpSUNRZm5rQVNBR1Fad0JhaEROQWlBR1FYODJBbEFnQWtIbjB3RWdCa0hRQUdvaUFSRE5BaUFHUVFBMkFsQWdBa0c5NUFFZ0FSRE5BaUFHUVlEbEJEWUNHQ0FHUVF3MkFoUWdBaU1BUVJCcklnSWtBQ0FDSUFZcEFoUTNBd2dnQVVHRXFnSWdBa0VJYWhBRk5nSUVJQUVqQXpZQ0FDQUNRUkJxSkFBZ0FSRDNCU0FCRUpFQkN5QUFJQVlvQXBRQk5nSUFJQUFnQmlnQ21BRTJBZ1FnQmtFQU5nS1lBUXNnQmtHTUFXb1FrUUVnQmtHVUFXb1FrUUVnQmtHZ0FXb2tBQXZ5QkFFSGZ5TUFRVEJySWdRa0FDQUVRU1JxSUFFUStnVWdCRUVZYWlBQ0VQb0ZBa0FDUUFKQUlBTkZEUUFnQUNnQzBBRWhBaUFBS0FMVUFTRUdJd0JCRUdzaUJTUUFRUlFRWmlJQlFRRTZBQXdnQVNBQ0lBWnNJZ2MyQWdnZ0FTQUdOZ0lFSUFFZ0FqWUNBRUVBSVFJZ0FVRUFOZ0lRSUFjUVppSUdRUUFnQi93TEFDQUZRUUEyQWdRZ0FVRVFhaUlISUFZUStRTWdCVUVFYWhEVkFRSkFJQUVvQWhBRVFDQUJJUUlNQVFzZ0JVRUVha0dNRnhCVElnWVFwUUVnQmhCTUdpQUhFTlVCSUFFUVNBc2dCVUVRYWlRQUlBUWdBaUlCTmdJVUlBRkZCRUFnQkVFSWFrSG9nd0lRVXlJQUVLVUJJQUFRVEJwQmZ5RUJEQU1MSUFRb0FpUWhDRUVBSVFKQkFDRUZJQUVvQWhBaENTQUJLQUlJSVFvakFFRVFheUlHSkFBZ0JrRUVha0hWR0JCVEVFd2FBMEFnQWlBS1J3UkFJQUlnQ1dvZ0JTQUlhaUlITFFBQlFaWUJiQ0FITFFBQVFjMEFiR29nQnkwQUFrRWRiR3BCQ0hZNkFBQWdBa0VCYWlFQ0lBVkJCR29oQlF3QkN3c2dCa0VRYWlRQUlBRW9BaEFpQVVVTkFTQUFLQUxNQVVVTkFDQUVRUWhxUWQ2SkFoQlRFRXdhSUFBb0F0UUJJQUFvQXRBQmJDSUNCRUFnQUNnQ3pBRWdBU0FDL0FvQUFBc2dCRUVVYWhEOEJRc0NRQ0FBS0FMRUFTSUNSUTBBSUFRb0FpZ2lCU0FFS0FJa0lnRkdEUUFnQWlBQklBVWdBV3Y4Q2dBQUMwRUFJUUVnQXcwQklBQW9Bc3dCUlEwQklBUkJDR3BCdzRrQ0VGTVFUQm9nQkNnQ0hDSURJQVFvQWhnaUFrWU5BU0FBS0FMTUFTQUNJQU1nQW12OENnQUFEQUVMSUFSQkNHcEJ3SVlDRUZNaUFCQ2xBU0FBRUV3YUlBUkJGR29RL0FWQmZ5RUJDeUFFUVJocUVGWWFJQVJCSkdvUVZob2dCRUV3YWlRQUlBRUxLUUVCZjBIMDVBUW9BZ0FoQUFOQUlBQUVRQ0FBS0FJQUlBQVFTQ0VBREFFTEMwSHM1QVFRblFNTEZBQWdBRUVNYWtFQUlBRW9BZ1JCN0wwQlJoc0xDUUFnQUNnQ0RCQklDeFFBSUFCQkRHcEJBQ0FCS0FJRVFjUzhBVVliQzdRR0FBSkFBa0FDUUVING5nVkJBRUVCL2tnQ0FBNENBQUVDQzBHQUNDUUJRWUFJUVFCQkxQd0xBRUd3Q0VFQVFjditBdndJQUFCQis0WURRUUJCelFEOEN3QkJ5SWNEUVFCQkEvd0lBUUJCeTRjRFFRQkIxZ0Q4Q3dCQm9ZZ0RRUUJCeDhjQS9BZ0NBRUhvendOQkFFRXcvQXNBUVpqUUEwRUFRZk1GL0FnREFFR0wxZ05CQUVFZi9Bc0FRYXJXQTBFQVFmZ0EvQWdFQUVHaTF3TkJBRUhrQVB3TEFFR0cyQU5CQUVHY0Fmd0lCUUJCb3RrRFFRQkJHZndMQUVHNzJRTkJBRUVoL0FnR0FFSGMyUU5CQUVFWi9Bc0FRZlhaQTBFQVFTSDhDQWNBUVpiYUEwRUFRUm44Q3dCQnI5b0RRUUJCS3Z3SUNBQkIyZG9EUVFCQkdmd0xBRUh5MmdOQkFFRU8vQWdKQUVHQTJ3TkJBRUVqL0FzQVFhUGJBMEVBUVNIOENBb0FRY1RiQTBFQVFSbjhDd0JCM2RzRFFRQkJNL3dJQ3dCQmtOd0RRUUJCSlB3TEFFRzAzQU5CQUVFQy9BZ01BRUcyM0FOQkFFRW0vQXNBUWR6Y0EwRUFRUWo4Q0EwQVFlVGNBMEVBUVR6OEN3QkJvTjBEUVFCQjh3NzhDQTRBUVpQc0EwRUFRUzM4Q3dCQndPd0RRUUJCQXZ3SUR3QkJ3dXdEUVFCQkd2d0xBRUhjN0FOQkFFSGVBL3dJRUFCQnV2QURRUUJCaWdUOEN3QkJ4UFFEUVFCQitRUDhDQkVBUWIzNEEwRUFRWU1FL0FzQVFjRDhBMEVBUVFQOENCSUFRY1A4QTBFQVFaRUUvQXNBUWRTQUJFRUFRZmtEL0FnVEFFSE5oQVJCQUVHREJQd0xBRUhRaUFSQkFFRzlCdndJRkFCQmpZOEVRUUJCaHdUOEN3QkJsSk1FUVFCQmtEWDhDQlVBUWFqSUJFRUFRUmo4Q0JZQVFjRElCRUVBUVRUOEN3QkI5TWdFUVFCQjZBRDhDQmNBUWR6SkJFRUFRVHo4Q3dCQm1Nb0VRUUJCMlFEOENCZ0FRZkhLQkVFQVFULzhDd0JCc01zRVFRQkJPdndJR1FCQjZzc0VRUUJCR3Z3TEFFR0V6QVJCQUVFRS9BZ2FBRUdJekFSQkFFSEFBUHdMQUVISXpBUkJBRUVjL0FnYkFFSEE1QVJCQUVHNE92d0xBRUg0bmdWQkF2NFhBZ0JCK0o0RlFYLytBQUlBR2d3QkMwSDRuZ1ZCQVVKLy9nRUNBQm9ML0FrQS9Ba0IvQWtDL0FrRC9Ba0UvQWtGL0FrRy9Ba0gvQWtJL0FrSi9Ba0svQWtML0FrTS9Ba04vQWtPL0FrUC9Ba1EvQWtSL0FrUy9Ba1QvQWtVL0FrVi9Ba1cvQWtYL0FrWS9Ba1ovQWthL0FrYkN4UUFJQUJCREdwQkFDQUJLQUlFUWZ5MUFVWWJDd29BSUFBb0Fnd1Ftd1lMYUFFRGZ5TUFRUkJySWdBa0FDQUFRZHprQkRZQ0RDQUFLQUlNSWdFb0FnQUVRQ0FCS0FJQUlRTWdBU2dDQkNFQ0EwQWdBaUFEUndSQUlBSkJDR3NRd1FFaEFnd0JDd3NnQVNBRE5nSUVJQUFvQWd3aUFTZ0NBQ0FCS0FJSUdoQklDeUFBUVJCcUpBQUxGUUFnQUNnQ0JDQUFRUVJxSUFBc0FBOUJBRWdiQ3drQUlBQVF2d1lRU0FzbEFDQUJJQUlnQXlBRUlBVWdCcTBnQjYxQ0lJYUVJQWl0SUFtdFFpQ0doQ0FBRVI0QUN5TUFJQUVnQWlBRElBUWdCYTBnQnExQ0lJYUVJQWV0SUFpdFFpQ0doQ0FBRVIwQUN4a0FJQUVnQWlBRElBUWdCYTBnQnExQ0lJYUVJQUFSRlFBTEdRQWdBU0FDSUFPdElBU3RRaUNHaENBRklBWWdBQkVyQUFzaUFRRitJQUVnQXEwZ0E2MUNJSWFFSUFRZ0FCRVRBQ0lGUWlDSXB5UUhJQVduQ3dRQUl3QUxFQUFqQUNBQWEwRndjU0lBSkFBZ0FBc0dBQ0FBSkFBTElRQWdBQ0FCSUFJZ0F4REJCU0FDUlNBRVJYSkZCRUJCL01nRUlBUTJBZ0FMQ3drQUlBQVFsZ1FRU0FzR0FFRzUyZ0VMQmdCQnJ2QUJDd1lBUVlqV0FRc2JBQ0FBSUFFb0FnZ2dCUkI5QkVBZ0FTQUNJQU1nQkJDTUJBc0xPQUFnQUNBQktBSUlJQVVRZlFSQUlBRWdBaUFESUFRUWpBUVBDeUFBS0FJSUlnQWdBU0FDSUFNZ0JDQUZJQUFvQWdBb0FoUVJEQUFMa2dJQkJuOGdBQ0FCS0FJSUlBVVFmUVJBSUFFZ0FpQURJQVFRakFRUEN5QUJMUUExSUFBb0Fnd2hCaUFCUVFBNkFEVWdBUzBBTkNBQlFRQTZBRFFnQUVFUWFpSUpJQUVnQWlBRElBUWdCUkNLQkNBQkxRQTBJZ3B5SVFnZ0FTMEFOU0lMY2lFSEFrQWdCa0VDU1EwQUlBa2dCa0VEZEdvaENTQUFRUmhxSVFZRFFDQUJMUUEyRFFFQ1FDQUtRUUZ4QkVBZ0FTZ0NHRUVCUmcwRElBQXRBQWhCQW5FTkFRd0RDeUFMUVFGeFJRMEFJQUF0QUFoQkFYRkZEUUlMSUFGQkFEc0JOQ0FHSUFFZ0FpQURJQVFnQlJDS0JDQUJMUUExSWdzZ0IzSkJBWEVoQnlBQkxRQTBJZ29nQ0hKQkFYRWhDQ0FHUVFocUlnWWdDVWtOQUFzTElBRWdCMEVCY1RvQU5TQUJJQWhCQVhFNkFEUUxrZ0VBSUFBZ0FTZ0NDQ0FFRUgwRVFDQUJJQUlnQXhDTEJBOExBa0FnQUNBQktBSUFJQVFRZlVVTkFBSkFJQUVvQWhBZ0FrY0VRQ0FDSUFFb0FoUkhEUUVMSUFOQkFVY05BU0FCUVFFMkFpQVBDeUFCSUFJMkFoUWdBU0FETmdJZ0lBRWdBU2dDS0VFQmFqWUNLQUpBSUFFb0FpUkJBVWNOQUNBQktBSVlRUUpIRFFBZ0FVRUJPZ0EyQ3lBQlFRUTJBaXdMQy9ZQkFDQUFJQUVvQWdnZ0JCQjlCRUFnQVNBQ0lBTVFpd1FQQ3dKQUlBQWdBU2dDQUNBRUVIMEVRQUpBSUFFb0FoQWdBa2NFUUNBQ0lBRW9BaFJIRFFFTElBTkJBVWNOQWlBQlFRRTJBaUFQQ3lBQklBTTJBaUFDUUNBQktBSXNRUVJHRFFBZ0FVRUFPd0UwSUFBb0FnZ2lBQ0FCSUFJZ0FrRUJJQVFnQUNnQ0FDZ0NGQkVNQUNBQkxRQTFRUUZHQkVBZ0FVRUROZ0lzSUFFdEFEUkZEUUVNQXdzZ0FVRUVOZ0lzQ3lBQklBSTJBaFFnQVNBQktBSW9RUUZxTmdJb0lBRW9BaVJCQVVjTkFTQUJLQUlZUVFKSERRRWdBVUVCT2dBMkR3c2dBQ2dDQ0NJQUlBRWdBaUFESUFRZ0FDZ0NBQ2dDR0JFR0FBc0xyd1FCQTM4Z0FDQUJLQUlJSUFRUWZRUkFJQUVnQWlBREVJc0VEd3NDUUFKQUlBQWdBU2dDQUNBRUVIMEVRQUpBSUFFb0FoQWdBa2NFUUNBQ0lBRW9BaFJIRFFFTElBTkJBVWNOQXlBQlFRRTJBaUFQQ3lBQklBTTJBaUFnQVNnQ0xFRUVSZzBCSUFCQkVHb2lCU0FBS0FJTVFRTjBhaUVIUVFBaEF3TkFBa0FDUUNBQkFuOENRQ0FGSUFkUERRQWdBVUVBT3dFMElBVWdBU0FDSUFKQkFTQUVFSW9FSUFFdEFEWU5BQ0FCTFFBMVFRRkhEUU1nQVMwQU5FRUJSZ1JBSUFFb0FoaEJBVVlOQTBFQklRTkJBU0VHSUFBdEFBaEJBbkZGRFFNTUJBdEJBU0VESUFBdEFBaEJBWEVOQTBFRERBRUxRUU5CQkNBREd3czJBaXdnQmcwRkRBUUxJQUZCQXpZQ0xBd0VDeUFGUVFocUlRVU1BQXNBQ3lBQUtBSU1JUVVnQUVFUWFpSUdJQUVnQWlBRElBUVFvUU1nQlVFQ1NRMEJJQVlnQlVFRGRHb2hCaUFBUVJocUlRVUNRQ0FBS0FJSUlnQkJBbkZGQkVBZ0FTZ0NKRUVCUncwQkN3TkFJQUV0QURZTkF5QUZJQUVnQWlBRElBUVFvUU1nQlVFSWFpSUZJQVpKRFFBTERBSUxJQUJCQVhGRkJFQURRQ0FCTFFBMkRRTWdBU2dDSkVFQlJnMERJQVVnQVNBQ0lBTWdCQkNoQXlBRlFRaHFJZ1VnQmtrTkFBd0RDd0FMQTBBZ0FTMEFOZzBDSUFFb0FpUkJBVVlFUUNBQktBSVlRUUZHRFFNTElBVWdBU0FDSUFNZ0JCQ2hBeUFGUVFocUlnVWdCa2tOQUFzTUFRc2dBU0FDTmdJVUlBRWdBU2dDS0VFQmFqWUNLQ0FCS0FJa1FRRkhEUUFnQVNnQ0dFRUNSdzBBSUFGQkFUb0FOZ3NMd0FVQkJIOGpBRUZBYWlJRUpBQUNRQ0FCUWJEQ0JFRUFFSDBFUUNBQ1FRQTJBZ0JCQVNFRkRBRUxBa0FnQUNBQklBQXRBQWhCR0hFRWYwRUJCU0FCUlEwQklBRkJ4TDhFUWFUQUJCQ3JBU0lEUlEwQklBTXRBQWhCR0hGQkFFY0xFSDBoQmdzZ0JnUkFRUUVoQlNBQ0tBSUFJZ0JGRFFFZ0FpQUFLQUlBTmdJQURBRUxBa0FnQVVVTkFDQUJRY1MvQkVIVXdBUVFxd0VpQmtVTkFTQUNLQUlBSWdFRVFDQUNJQUVvQWdBMkFnQUxJQVlvQWdnaUF5QUFLQUlJSWdGQmYzTnhRUWR4SUFOQmYzTWdBWEZCNEFCeGNnMEJRUUVoQlNBQUtBSU1JQVlvQWd4QkFCQjlEUUVnQUNnQ0RFR2t3Z1JCQUJCOUJFQWdCaWdDRENJQVJRMENJQUJCeEw4RVFZakJCQkNyQVVVaEJRd0NDeUFBS0FJTUlnTkZEUUJCQUNFRklBTkJ4TDhFUWRUQUJCQ3JBU0lCQkVBZ0FDMEFDRUVCY1VVTkFnSi9JQVlvQWd3aEFFRUFJUUlDUUFOQVFRQWdBRVVOQWhvZ0FFSEV2d1JCMU1BRUVLc0JJZ05GRFFFZ0F5Z0NDQ0FCS0FJSVFYOXpjUTBCUVFFZ0FTZ0NEQ0FES0FJTVFRQVFmUTBDR2lBQkxRQUlRUUZ4UlEwQklBRW9BZ3dpQUVVTkFTQUFRY1MvQkVIVXdBUVFxd0VpQVFSQUlBTW9BZ3doQUF3QkN3c2dBRUhFdndSQnhNRUVFS3NCSWdCRkRRQWdBQ0FES0FJTUVMMEdJUUlMSUFJTElRVU1BZ3NnQTBIRXZ3UkJ4TUVFRUtzQklnRUVRQ0FBTFFBSVFRRnhSUTBDSUFFZ0JpZ0NEQkM5QmlFRkRBSUxJQU5CeEw4RVFmUy9CQkNyQVNJQlJRMEJJQVlvQWd3aUFFVU5BU0FBUWNTL0JFSDB2d1FRcXdFaUFFVU5BU0FDS0FJQUlRTWdCRUVJYWtFQVFUajhDd0FnQkNBRFFRQkhPZ0E3SUFSQmZ6WUNFQ0FFSUFFMkFnd2dCQ0FBTmdJRUlBUkJBVFlDTkNBQUlBUkJCR29nQTBFQklBQW9BZ0FvQWh3UkJ3QWdCQ2dDSENJQVFRRkdCRUFnQWlBRUtBSVVRUUFnQXhzMkFnQUxJQUJCQVVZaEJRd0JDMEVBSVFVTElBUkJRR3NrQUNBRkMyOEJBbjhnQUNBQktBSUlRUUFRZlFSQUlBRWdBaUFERUk0RUR3c2dBQ2dDRENFRUlBQkJFR29pQlNBQklBSWdBeEMrQmdKQUlBUkJBa2tOQUNBRklBUkJBM1JxSVFRZ0FFRVlhaUVBQTBBZ0FDQUJJQUlnQXhDK0JpQUJMUUEyRFFFZ0FFRUlhaUlBSUFSSkRRQUxDd3N5QUNBQUlBRW9BZ2hCQUJCOUJFQWdBU0FDSUFNUWpnUVBDeUFBS0FJSUlnQWdBU0FDSUFNZ0FDZ0NBQ2dDSEJFSEFBc1pBQ0FBSUFFb0FnaEJBQkI5QkVBZ0FTQUNJQU1RamdRTEM2VUJBUUYvSXdCQlFHb2lBeVFBQW45QkFTQUFJQUZCQUJCOURRQWFRUUFnQVVVTkFCcEJBQ0FCUWNTL0JFSDB2d1FRcXdFaUFVVU5BQm9nQTBFSWFrRUFRVGo4Q3dBZ0EwRUJPZ0E3SUFOQmZ6WUNFQ0FESUFBMkFnd2dBeUFCTmdJRUlBTkJBVFlDTkNBQklBTkJCR29nQWlnQ0FFRUJJQUVvQWdBb0Fod1JCd0FnQXlnQ0hDSUFRUUZHQkVBZ0FpQURLQUlVTmdJQUN5QUFRUUZHQ3lBRFFVQnJKQUFMQ2dBZ0FDQUJRUUFRZlFzREFBQUxCd0FnQUNnQ0JBc0pBQ0FBRUpjRUVFZ0xDUUJCNUpNRkVISWFDeE1BSUFCQjVKTUZRZkNUQlVIWWxRUVFvQU1MQ1FCQjFKTUZFRXdhQ3pBQUFrQkI0Sk1GL2hJQUFFRUJjUTBBUWVDVEJSQi9SUTBBUWRTVEJVSHIxUUVRcmdKQjRKTUZFSDRMUWRTVEJRc0pBRUhFa3dVUWNob0xFd0FnQUVIRWt3VkIwSk1GUVlTVkJCQ2dBd3NKQUVHMGt3VVFUQm9MTUFBQ1FFSEFrd1grRWdBQVFRRnhEUUJCd0pNRkVIOUZEUUJCdEpNRlFkN3hBUkN1QWtIQWt3VVFmZ3RCdEpNRkN3a0FRYVNUQlJCeUdnc1RBQ0FBUWFTVEJVR3drd1ZCNEpRRUVLQURDd2tBUWRqTUJCQk1HZ3NsQUFKQVFhQ1RCZjRTQUFCQkFYRU5BRUdna3dVUWYwVU5BRUdna3dVUWZndEIyTXdFQ3drQVFaQ1RCUkJ5R2dzVEFDQUFRWkNUQlVHY2t3VkJ2SlFFRUtBREN3a0FRY3pNQkJCTUdnc2xBQUpBUVl5VEJmNFNBQUJCQVhFTkFFR01rd1VRZjBVTkFFR01rd1VRZmd0QnpNd0VDeHNBUWZpYkJTRUFBMEFnQUVFTWF4QnlJZ0JCNEpzRlJ3MEFDd3RtQUFKQVFZaVRCZjRTQUFCQkFYRU5BRUdJa3dVUWYwVU5BQUpBUWZpYkJmNFNBQUJCQVhFTkFFSDRtd1VRZjBVTkFFSDRtd1VRZmd0QjRKc0ZRZEM5QkJCalFleWJCVUhjdlFRUVkwR0Vrd1ZCNEpzRk5nSUFRWWlUQlJCK0MwR0Vrd1VvQWdBTEd3QkIySnNGSVFBRFFDQUFRUXhyRUV3aUFFSEFtd1ZIRFFBTEMyWUFBa0JCZ0pNRi9oSUFBRUVCY1EwQVFZQ1RCUkIvUlEwQUFrQkIySnNGL2hJQUFFRUJjUTBBUWRpYkJSQi9SUTBBUWRpYkJSQitDMEhBbXdWQjB2VUJFR1JCekpzRlFjZjFBUkJrUWZ5U0JVSEFtd1UyQWdCQmdKTUZFSDRMUWZ5U0JTZ0NBQXNiQUVHd213VWhBQU5BSUFCQkRHc1FjaUlBUVpDWkJVY05BQXNMd2dJQUFrQkIrSklGL2hJQUFFRUJjUTBBUWZpU0JSQi9SUTBBQWtCQnNKc0YvaElBQUVFQmNRMEFRYkNiQlJCL1JRMEFRYkNiQlJCK0MwR1FtUVZCeUxrRUVHTkJuSmtGUWVpNUJCQmpRYWlaQlVHTXVnUVFZMEcwbVFWQnBMb0VFR05Cd0prRlFieTZCQkJqUWN5WkJVSE11Z1FRWTBIWW1RVkI0TG9FRUdOQjVKa0ZRZlM2QkJCalFmQ1pCVUdRdXdRUVkwSDhtUVZCdUxzRUVHTkJpSm9GUWRpN0JCQmpRWlNhQlVIOHV3UVFZMEdnbWdWQm9Md0VFR05CckpvRlFiQzhCQkJqUWJpYUJVSEF2QVFRWTBIRW1nVkIwTHdFRUdOQjBKb0ZRYnk2QkJCalFkeWFCVUhndkFRUVkwSG9tZ1ZCOEx3RUVHTkI5Sm9GUVlDOUJCQmpRWUNiQlVHUXZRUVFZMEdNbXdWQm9MMEVFR05CbUpzRlFiQzlCQkJqUWFTYkJVSEF2UVFRWTBIMGtnVkJrSmtGTmdJQVFmaVNCUkIrQzBIMGtnVW9BZ0FMR3dCQmdKa0ZJUUFEUUNBQVFReHJFRXdpQUVIZ2xnVkhEUUFMQzhJQ0FBSkFRZkNTQmY0U0FBQkJBWEVOQUVId2tnVVFmMFVOQUFKQVFZQ1pCZjRTQUFCQkFYRU5BRUdBbVFVUWYwVU5BRUdBbVFVUWZndEI0SllGUVkyL0FSQmtRZXlXQlVHRXZ3RVFaRUg0bGdWQmdkc0JFR1JCaEpjRlFaTFlBUkJrUVpDWEJVSFR2d0VRWkVHY2x3VkI2TjBCRUdSQnFKY0ZRWlcvQVJCa1FiU1hCVUg5eUFFUVpFSEFsd1ZCMWRRQkVHUkJ6SmNGUWNUVUFSQmtRZGlYQlVITTFBRVFaRUhrbHdWQjM5UUJFR1JCOEpjRlFkclhBUkJrUWZ5WEJVR0s4UUVRWkVHSW1BVkJodFVCRUdSQmxKZ0ZRYnpUQVJCa1FhQ1lCVUhUdndFUVpFR3NtQVZCaE5ZQkVHUkJ1SmdGUWQ3WEFSQmtRY1NZQlVISjJ3RVFaRUhRbUFWQjU5VUJFR1JCM0pnRlFaVE5BUkJrUWVpWUJVSFF3d0VRWkVIMG1BVkJ2ZkFCRUdSQjdKSUZRZUNXQlRZQ0FFSHdrZ1VRZmd0QjdKSUZLQUlBQ3hzQVFkaVdCU0VBQTBBZ0FFRU1heEJ5SWdCQnNKVUZSdzBBQ3d2ZUFRQUNRRUhva2dYK0VnQUFRUUZ4RFFCQjZKSUZFSDlGRFFBQ1FFSFlsZ1grRWdBQVFRRnhEUUJCMkpZRkVIOUZEUUJCMkpZRkVINExRYkNWQlVIMHRnUVFZMEc4bFFWQmtMY0VFR05CeUpVRlFheTNCQkJqUWRTVkJVSE10d1FRWTBIZ2xRVkI5TGNFRUdOQjdKVUZRWmk0QkJCalFmaVZCVUcwdUFRUVkwR0VsZ1ZCMkxnRUVHTkJrSllGUWVpNEJCQmpRWnlXQlVINHVBUVFZMEdvbGdWQmlMa0VFR05CdEpZRlFaaTVCQkJqUWNDV0JVR291UVFRWTBITWxnVkJ1TGtFRUdOQjVKSUZRYkNWQlRZQ0FFSG9rZ1VRZmd0QjVKSUZLQUlBQ3hzQVFhaVZCU0VBQTBBZ0FFRU1heEJNSWdCQmdKUUZSdzBBQ3d2ZUFRQUNRRUhna2dYK0VnQUFRUUZ4RFFCQjRKSUZFSDlGRFFBQ1FFR29sUVgrRWdBQVFRRnhEUUJCcUpVRkVIOUZEUUJCcUpVRkVINExRWUNVQlVHK3Z3RVFaRUdNbEFWQnhiOEJFR1JCbUpRRlFhTy9BUkJrUWFTVUJVR3J2d0VRWkVHd2xBVkJtcjhCRUdSQnZKUUZRY3kvQVJCa1FjaVVCVUcxdndFUVpFSFVsQVZCZ05ZQkVHUkI0SlFGUVlIWEFSQmtRZXlVQlVHQzNRRVFaRUg0bEFWQm9PY0JFR1JCaEpVRlFkVERBUkJrUVpDVkJVSEEyUUVRWkVHY2xRVkJ1TTBCRUdSQjNKSUZRWUNVQlRZQ0FFSGdrZ1VRZmd0QjNKSUZLQUlBQ3dzQUlBQkJwSlFFRUpnRUN3c0FJQUJCaTkwQkVLNENDd3NBSUFCQmtKUUVFSmdFQ3dzQUlBQkIvZHdCRUs0Q0N3MEFJQUFnQVVFUWFoRFlBUm9MRFFBZ0FDQUJRUXhxRU5nQkdnc0hBQ0FBTEFBSkN3Y0FJQUFzQUFnTENRQWdBQkRjQmhCSUN3a0FJQUFRM1FZUVNBc1ZBQ0FBS0FJSUlnQkZCRUJCQVE4TElBQVE1UVlMamdFQkJuOERRQUpBSUFJZ0EwWWdCQ0FJVFhJTkFFRUJJUWNnQUNnQ0NDRUZJd0JCRUdzaUJpUUFJQVlnQlRZQ0RDQUdRUWhxSUFaQkRHb1F2QUZCQUNBQ0lBTWdBbXNnQVVHd2p3VWdBUnNRdGdJaEJSQzdBU0FHUVJCcUpBQUNRQUpBSUFWQkFtb09Bd0lDQVFBTElBVWhCd3NnQ0VFQmFpRUlJQWNnQ1dvaENTQUNJQWRxSVFJTUFRc0xJQWtMV3dFRGZ5QUFLQUlJSVFJakFFRVFheUlCSkFBZ0FTQUNOZ0lNSUFGQkNHb2dBVUVNYWhDOEFVRUFRUUJCQkJEU0JDRURFTHNCSUFGQkVHb2tBQ0FEQkVCQmZ3OExJQUFvQWdnaUFFVUVRRUVCRHdzZ0FCRGxCa0VCUmd1SkFRRUNmeU1BUVJCcklnWWtBQ0FFSUFJMkFnQUNmMEVDSUFaQkRHb2lCVUVBSUFBb0FnZ1FtUVFpQUVFQmFrRUNTUTBBR2tFQklBQkJBV3NpQWlBRElBUW9BZ0JyU3cwQUdnTi9JQUlFZnlBRkxRQUFJUUFnQkNBRUtBSUFJZ0ZCQVdvMkFnQWdBU0FBT2dBQUlBSkJBV3NoQWlBRlFRRnFJUVVNQVFWQkFBc0xDeUFHUVJCcUpBQUx5QVlCRFg4akFFRVFheUlSSkFBZ0FpRUlBMEFDUUNBRElBaEdCRUFnQXlFSURBRUxJQWd0QUFCRkRRQWdDRUVCYWlFSURBRUxDeUFISUFVMkFnQWdCQ0FDTmdJQUEwQUNRQUovQWtBZ0FpQURSaUFGSUFaR2NnMEFJQkVnQVNrQ0FEY0RDQ0FBS0FJSUlRa2pBRUVRYXlJUUpBQWdFQ0FKTmdJTUlCQkJDR29nRUVFTWFoQzhBU0FJSUFKcklRNUJBQ0VLSXdCQmtBaHJJZ3drQUNBTUlBUW9BZ0FpQ1RZQ0RDQUZJQXhCRUdvZ0JSc2hEd0pBQWtBQ1FDQUpSU0FHSUFWclFRSjFRWUFDSUFVYklnMUZja1VFUUFOQUlBNUJnd0ZMSUE1QkFuWWlDeUFOVDNKRkJFQWdDU0VMREFRTElBOGdERUVNYWlBTElBMGdDeUFOU1JzZ0FSQzVCQ0VTSUF3b0Fnd2hDeUFTUVg5R0JFQkJBQ0VOUVg4aENnd0RDeUFOSUJKQkFDQVBJQXhCRUdwSEd5SVVheUVOSUE4Z0ZFRUNkR29oRHlBSklBNXFJQXRyUVFBZ0N4c2hEaUFLSUJKcUlRb2dDMFVOQWlBTElRa2dEUTBBREFJTEFBc2dDU0VMQ3lBTFJRMEJDeUFOUlNBT1JYSU5BQ0FLSVFrRFFBSkFBa0FnRHlBTElBNGdBUkMyQWlJS1FRSnFRUUpOQkVBQ1FBSkFJQXBCQVdvT0FnWUFBUXNnREVFQU5nSU1EQUlMSUFGQkFEWUNBQXdCQ3lBTUlBd29BZ3dnQ21vaUN6WUNEQ0FKUVFGcUlRa2dEVUVCYXlJTkRRRUxJQWtoQ2d3Q0N5QVBRUVJxSVE4Z0RpQUtheUVPSUFraENpQU9EUUFMQ3lBRkJFQWdCQ0FNS0FJTU5nSUFDeUFNUVpBSWFpUUFFTHNCSUJCQkVHb2tBQUpBQWtBQ1FBSkFJQXBCZjBZRVFBTkFJQWNnQlRZQ0FDQUNJQVFvQWdCR0RRWkJBU0VHQWtBQ1FBSkFJQVVnQWlBSUlBSnJJQkZCQ0dvZ0FDZ0NDQkRtQmlJQlFRSnFEZ01IQUFJQkN5QUVJQUkyQWdBTUJBc2dBU0VHQ3lBQ0lBWnFJUUlnQnlnQ0FFRUVhaUVGREFBTEFBc2dCeUFIS0FJQUlBcEJBblJxSWdVMkFnQWdCU0FHUmcwRElBUW9BZ0FoQWlBRElBaEdCRUFnQXlFSURBZ0xJQVVnQWtFQklBRWdBQ2dDQ0JEbUJrVU5BUXRCQWd3RUN5QUhJQWNvQWdCQkJHbzJBZ0FnQkNBRUtBSUFRUUZxSWdJMkFnQWdBaUVJQTBBZ0F5QUlSZ1JBSUFNaENBd0dDeUFJTFFBQVJRMEZJQWhCQVdvaENBd0FDd0FMSUFRZ0FqWUNBRUVCREFJTElBUW9BZ0FoQWdzZ0FpQURSd3NnRVVFUWFpUUFEd3NnQnlnQ0FDRUZEQUFMQUF1bUJRRU1meU1BUVJCcklnOGtBQ0FDSVFnRFFBSkFJQU1nQ0VZRVFDQURJUWdNQVFzZ0NDZ0NBRVVOQUNBSVFRUnFJUWdNQVFzTElBY2dCVFlDQUNBRUlBSTJBZ0FDUUFOQUFrQUNRQ0FDSUFOR0lBVWdCa1p5Qkg4Z0FnVWdEeUFCS1FJQU53TUlRUUVoRUNBQUtBSUlJUWtqQUVFUWF5SU9KQUFnRGlBSk5nSU1JQTVCQ0dvZ0RrRU1haEM4QVNBRklRa2dCaUFGYXlFS1FRQWhEQ01BUVJCckloRWtBQUpBSUFRb0FnQWlDMFVnQ0NBQ2EwRUNkU0lTUlhJTkFDQUtRUUFnQlJzaENnTkFJQkZCREdvZ0NTQUtRUVJKR3lBTEtBSUFFUFFDSWcxQmYwWUVRRUYvSVF3TUFnc2dDUVIvSUFwQkEwMEVRQ0FLSUExSkRRTWdDU0FSUVF4cUlBMFFheG9MSUFvZ0RXc2hDaUFKSUExcUJVRUFDeUVKSUFzb0FnQkZCRUJCQUNFTERBSUxJQXdnRFdvaERDQUxRUVJxSVFzZ0VrRUJheUlTRFFBTEN5QUpCRUFnQkNBTE5nSUFDeUFSUVJCcUpBQVF1d0VnRGtFUWFpUUFBa0FDUUFKQUFrQWdERUVCYWc0Q0FBZ0JDeUFISUFVMkFnQURRQ0FDSUFRb0FnQkdEUUlnQlNBQ0tBSUFJQUFvQWdnUW1RUWlBVUYvUmcwQ0lBY2dCeWdDQUNBQmFpSUZOZ0lBSUFKQkJHb2hBZ3dBQ3dBTElBY2dCeWdDQUNBTWFpSUZOZ0lBSUFVZ0JrWU5BU0FESUFoR0JFQWdCQ2dDQUNFQ0lBTWhDQXdHQ3lBUFFRUnFJZ0pCQUNBQUtBSUlFSmtFSWdoQmYwWU5CQ0FHSUFjb0FnQnJJQWhKRFFZRFFDQUlCRUFnQWkwQUFDRUZJQWNnQnlnQ0FDSUpRUUZxTmdJQUlBa2dCVG9BQUNBSVFRRnJJUWdnQWtFQmFpRUNEQUVMQ3lBRUlBUW9BZ0JCQkdvaUFqWUNBQ0FDSVFnRFFDQURJQWhHQkVBZ0F5RUlEQVVMSUFnb0FnQkZEUVFnQ0VFRWFpRUlEQUFMQUFzZ0JDQUNOZ0lBREFNTElBUW9BZ0FMSUFOSElSQU1Bd3NnQnlnQ0FDRUZEQUVMQzBFQ0lSQUxJQTlCRUdva0FDQVFDd2tBSUFBUTh3WVFTQXN6QUNNQVFSQnJJZ0FrQUNBQUlBUTJBZ3dnQUNBRElBSnJOZ0lJSUFCQkRHb2dBRUVJYWhEaEJDZ0NBQ0FBUVJCcUpBQUxOQUFEUUNBQklBSkdSUVJBSUFRZ0F5QUJMQUFBSWdBZ0FFRUFTQnM2QUFBZ0JFRUJhaUVFSUFGQkFXb2hBUXdCQ3dzZ0FRc01BQ0FDSUFFZ0FVRUFTQnNMS2dBRFFDQUJJQUpHUlFSQUlBTWdBUzBBQURvQUFDQURRUUZxSVFNZ0FVRUJhaUVCREFFTEN5QUJDdzhBSUFBZ0FTQUNRY0Q4QXhDMEJnc2VBQ0FCUVFCT0JIOUJ3UHdES0FJQUlBRkJBblJxS0FJQUJTQUJDOEFMRHdBZ0FDQUJJQUpCdVBBREVMUUdDeDRBSUFGQkFFNEVmMEc0OEFNb0FnQWdBVUVDZEdvb0FnQUZJQUVMd0FzSkFDQUFFT2dHRUVnTE5RQURRQ0FCSUFKR1JRUkFJQVFnQVNnQ0FDSUFJQU1nQUVHQUFVa2JPZ0FBSUFSQkFXb2hCQ0FCUVFScUlRRU1BUXNMSUFFTERnQWdBU0FDSUFGQmdBRkpHOEFMS2dBRFFDQUJJQUpHUlFSQUlBTWdBU3dBQURZQ0FDQURRUVJxSVFNZ0FVRUJhaUVCREFFTEN5QUJDdzhBSUFBZ0FTQUNRY0Q4QXhDMUJnc2VBQ0FCUWY4QVRRUi9RY0Q4QXlnQ0FDQUJRUUowYWlnQ0FBVWdBUXNMRHdBZ0FDQUJJQUpCdVBBREVMVUdDeDRBSUFGQi93Qk5CSDlCdVBBREtBSUFJQUZCQW5ScUtBSUFCU0FCQ3dzNkFBTkFBa0FnQWlBRFJnMEFJQUlvQWdBaUFFSC9BRXNOQUNBQVFRSjBRWkNMQkdvb0FnQWdBWEZGRFFBZ0FrRUVhaUVDREFFTEN5QUNDem9BQTBBQ1FDQUNJQU5HRFFBZ0FpZ0NBQ0lBUWY4QVRRUkFJQUJCQW5SQmtJc0VhaWdDQUNBQmNRMEJDeUFDUVFScUlRSU1BUXNMSUFJTFNRRUJmd05BSUFFZ0FrWkZCRUJCQUNFQUlBTWdBU2dDQUNJRVFmOEFUUVIvSUFSQkFuUkJrSXNFYWlnQ0FBVkJBQXMyQWdBZ0EwRUVhaUVESUFGQkJHb2hBUXdCQ3dzZ0FRc2xBRUVBSVFBZ0FrSC9BRTBFZnlBQ1FRSjBRWkNMQkdvb0FnQWdBWEZCQUVjRlFRQUxDdzhBSUFBZ0FDZ0NBQ2dDQkJFQkFBc0pBQ0FBRU80R0VFZ0x4QUVBSXdCQkVHc2lBeVFBQWtBZ0JSQ01BVVVFUUNBQUlBVW9BZ2cyQWdnZ0FDQUZLUUlBTndJQUlBQVE5UUVhREFFTElBVW9BZ0FoQWlBRktBSUVJUVVqQUVFUWF5SUVKQUFDUUFKQUFrQWdCUkNsQXdSQUlBQWlBU0FGRUpzQkRBRUxJQVZCOS8vLy93TkxEUUVnQkVFSWFpQUZFS01DUVFGcUVLSUNJQVFvQWd3YUlBQWdCQ2dDQ0NJQkVMRUJJQUFnQkNnQ0RCQ3dBU0FBSUFVUWl3RUxJQUVnQWlBRlFRRnFFTVVCSUFSQkVHb2tBQXdCQ3hDVEFRQUxDeUFEUVJCcUpBQUxDZ0FnQUNBRkVOZ0JHZ3VHQXdFSWZ5TUFRZUFEYXlJQUpBQWdBRUhjQTJvaUJpQURFRndnQmhDY0FTRUtJQVVRU3dSQUlBVkJBQkRhQWlnQ0FDQUtRUzBRbndGR0lRc0xJQUlnQ3lBQVFkd0RhaUFBUWRnRGFpQUFRZFFEYWlBQVFkQURhaUFBUWNRRGFoQmFJZ3dnQUVHNEEyb1FXaUlHSUFCQnJBTnFFRm9pQnlBQVFhZ0RhaEQ0QmlBQVFld0NOZ0lRSUFCQkNHcEJBQ0FBUVJCcUlnSVFkQ0VJQWtBQ2Z5QUZFRXNnQUNnQ3FBTktCRUFnQlJCTElRa2dBQ2dDcUFNaERTQUhFRXNnQ1NBTmEwRUJkR29nQmhCTGFpQUFLQUtvQTJwQkFXb01BUXNnQnhCTElBWVFTMm9nQUNnQ3FBTnFRUUpxQ3lJSlFlVUFTUTBBSUFnZ0NVRUNkQkJORUh3Z0NDZ0NBQ0lDRFFBUWRRQUxJQUlnQUVFRWFpQUFJQU1vQWdRZ0JSQlZJQVVRVlNBRkVFdEJBblJxSUFvZ0N5QUFRZGdEYWlBQUtBTFVBeUFBS0FMUUF5QU1JQVlnQnlBQUtBS29BeEQzQmlBQklBSWdBQ2dDQkNBQUtBSUFJQU1nQkJEdkFTQUlFSE1nQnhCeUdpQUdFSElhSUF3UVRCb2dBRUhjQTJvUVZDQUFRZUFEYWlRQUM4WUVBUXQvSXdCQm9BaHJJZ0FrQUNBQUlBVTNBeEFnQUNBR053TVlJQUFnQUVHd0Iyb2lCellDckFjZ0IwSGtBRUhZM0FFZ0FFRVFhaERpQVNFSElBQkI3QUkyQXBBRUlBQkJpQVJxUVFBZ0FFR1FCR29pQ1JCMElRNGdBRUhzQWpZQ2tBUWdBRUdBQkdwQkFDQUpFSFFoQ2dKQUlBZEI1QUJQQkVBUWFTRUhJQUFnQlRjREFDQUFJQVkzQXdnZ0FFR3NCMm9nQjBIWTNBRWdBQkRDQVNJSFFYOUdEUUVnRGlBQUtBS3NCeEI4SUFvZ0IwRUNkQkJORUh3Z0NoRHBBZzBCSUFvb0FnQWhDUXNnQUVIOEEyb2lDQ0FERUZ3Z0NCQ2NBU0lSSUFBb0Fxd0hJZ2dnQnlBSWFpQUpFTTBCSUFkQkFFb0VRQ0FBS0FLc0J5MEFBRUV0UmlFUEN5QUNJQThnQUVIOEEyb2dBRUg0QTJvZ0FFSDBBMm9nQUVId0Eyb2dBRUhrQTJvUVdpSVFJQUJCMkFOcUVGb2lDQ0FBUWN3RGFoQmFJZ3NnQUVISUEyb1ErQVlnQUVIc0FqWUNNQ0FBUVNocVFRQWdBRUV3YWlJQ0VIUWhEQUovSUFBb0FzZ0RJZzBnQjBnRVFDQUxFRXNnQnlBTmEwRUJkR29nQ0JCTGFpQUFLQUxJQTJwQkFXb01BUXNnQ3hCTElBZ1FTMm9nQUNnQ3lBTnFRUUpxQ3lJTlFlVUFUd1JBSUF3Z0RVRUNkQkJORUh3Z0RDZ0NBQ0lDUlEwQkN5QUNJQUJCSkdvZ0FFRWdhaUFES0FJRUlBa2dDU0FIUVFKMGFpQVJJQThnQUVINEEyb2dBQ2dDOUFNZ0FDZ0M4QU1nRUNBSUlBc2dBQ2dDeUFNUTl3WWdBU0FDSUFBb0FpUWdBQ2dDSUNBRElBUVE3d0VnREJCeklBc1FjaG9nQ0JCeUdpQVFFRXdhSUFCQi9BTnFFRlFnQ2hCeklBNFFjeUFBUWFBSWFpUUFEd3NRZFFBTC9nSUJDSDhqQUVHd0FXc2lBQ1FBSUFCQnJBRnFJZ1lnQXhCY0lBWVFsUUVoQ2lBRkVFc0VRQ0FGUVFBUVVTMEFBQ0FLUVMwUWdnRkIvd0Z4UmlFTEN5QUNJQXNnQUVHc0FXb2dBRUdvQVdvZ0FFR25BV29nQUVHbUFXb2dBRUdZQVdvUVdpSU1JQUJCakFGcUVGb2lCaUFBUVlBQmFoQmFJZ2NnQUVIOEFHb1Erd1lnQUVIc0FqWUNFQ0FBUVFocVFRQWdBRUVRYWlJQ0VIUWhDQUpBQW44Z0JSQkxJQUFvQW54S0JFQWdCUkJMSVFrZ0FDZ0NmQ0VOSUFjUVN5QUpJQTFyUVFGMGFpQUdFRXRxSUFBb0FueHFRUUZxREFFTElBY1FTeUFHRUV0cUlBQW9BbnhxUVFKcUN5SUpRZVVBU1EwQUlBZ2dDUkJORUh3Z0NDZ0NBQ0lDRFFBUWRRQUxJQUlnQUVFRWFpQUFJQU1vQWdRZ0JSQlZJQVVRVlNBRkVFdHFJQW9nQ3lBQVFhZ0JhaUFBTEFDbkFTQUFMQUNtQVNBTUlBWWdCeUFBS0FKOEVQb0dJQUVnQWlBQUtBSUVJQUFvQWdBZ0F5QUVFUEVCSUFnUWN5QUhFRXdhSUFZUVRCb2dEQkJNR2lBQVFhd0JhaEJVSUFCQnNBRnFKQUFMdlFRQkMzOGpBRUhBQTJzaUFDUUFJQUFnQlRjREVDQUFJQVkzQXhnZ0FDQUFRZEFDYWlJSE5nTE1BaUFIUWVRQVFkamNBU0FBUVJCcUVPSUJJUWNnQUVIc0FqWUM0QUVnQUVIWUFXcEJBQ0FBUWVBQmFpSUpFSFFoRGlBQVFld0NOZ0xnQVNBQVFkQUJha0VBSUFrUWRDRUtBa0FnQjBIa0FFOEVRQkJwSVFjZ0FDQUZOd01BSUFBZ0JqY0RDQ0FBUWN3Q2FpQUhRZGpjQVNBQUVNSUJJZ2RCZjBZTkFTQU9JQUFvQXN3Q0VId2dDaUFIRUUwUWZDQUtFT2tDRFFFZ0NpZ0NBQ0VKQ3lBQVFjd0JhaUlJSUFNUVhDQUlFSlVCSWhFZ0FDZ0N6QUlpQ0NBSElBaHFJQWtRM2dFZ0IwRUFTZ1JBSUFBb0Fzd0NMUUFBUVMxR0lROExJQUlnRHlBQVFjd0JhaUFBUWNnQmFpQUFRY2NCYWlBQVFjWUJhaUFBUWJnQmFoQmFJaEFnQUVHc0FXb1FXaUlJSUFCQm9BRnFFRm9pQ3lBQVFad0JhaEQ3QmlBQVFld0NOZ0l3SUFCQktHcEJBQ0FBUVRCcUlnSVFkQ0VNQW44Z0FDZ0NuQUVpRFNBSFNBUkFJQXNRU3lBSElBMXJRUUYwYWlBSUVFdHFJQUFvQXB3QmFrRUJhZ3dCQ3lBTEVFc2dDQkJMYWlBQUtBS2NBV3BCQW1vTElnMUI1UUJQQkVBZ0RDQU5FRTBRZkNBTUtBSUFJZ0pGRFFFTElBSWdBRUVrYWlBQVFTQnFJQU1vQWdRZ0NTQUhJQWxxSUJFZ0R5QUFRY2dCYWlBQUxBREhBU0FBTEFER0FTQVFJQWdnQ3lBQUtBS2NBUkQ2QmlBQklBSWdBQ2dDSkNBQUtBSWdJQU1nQkJEeEFTQU1FSE1nQ3hCTUdpQUlFRXdhSUJBUVRCb2dBRUhNQVdvUVZDQUtFSE1nRGhCeklBQkJ3QU5xSkFBUEN4QjFBQXU2QlFFRWZ5TUFRY0FEYXlJQUpBQWdBQ0FDTmdLNEF5QUFJQUUyQXJ3RElBQkI3UUkyQWhRZ0FFRVlhaUFBUVNCcUlBQkJGR29pQnhCMElRb2dBRUVRYWlJQklBUVFYQ0FCRUp3QklRZ2dBRUVBT2dBUElBQkJ2QU5xSUFJZ0F5QUJJQVFvQWdRZ0JTQUFRUTlxSUFnZ0NpQUhJQUJCc0FOcUVJSUhCRUFqQUVFUWF5SUJKQUFnQmhCTEdnSkFJQVlRakFFRVFDQUdLQUlBSUFGQkFEWUNEQ0FCUVF4cUVLZ0JJQVpCQUJDTEFRd0JDeUFCUVFBMkFnZ2dCaUFCUVFocUVLZ0JJQVpCQUJDYkFRc2dBVUVRYWlRQUlBQXRBQTlCQVVZRVFDQUdJQWhCTFJDZkFSQ1BCQXNnQ0VFd0VKOEJJUUVnQ2lnQ0FDRUNJQUFvQWhRaUEwRUVheUVFQTBBQ1FDQUNJQVJQRFFBZ0FpZ0NBQ0FCUncwQUlBSkJCR29oQWd3QkN3c2pBRUVRYXlJSUpBQWdCaEJMSVFFZ0JoQ2VCQ0VFQWtBZ0FpQURFTk1ESWdkRkRRQWdCaEJWSUFZUVZTQUdFRXRCQW5ScVFRUnFJQUlRMXdaRkJFQWdCeUFFSUFGclN3UkFJQVlnQkNBQklBUnJJQWRxSUFFZ0FSRC9CZ3NnQmhCVklBRkJBblJxSVFRRFFDQUNJQU5IQkVBZ0JDQUNFS2dCSUFKQkJHb2hBaUFFUVFScUlRUU1BUXNMSUFoQkFEWUNCQ0FFSUFoQkJHb1FxQUVnQmlBQklBZHFFSWNDREFFTEl3QkJFR3NpQkNRQUlBaEJCR29pQVNBQ0lBTVF0Z1FnQkVFUWFpUUFJQUVRVlNFSElBRVFTeUVDSXdCQkVHc2lCQ1FBQWtBZ0FpQUdFSjRFSWdrZ0JoQkxJZ05yVFFSQUlBSkZEUUVnQmhCVklna2dBMEVDZEdvZ0J5QUNFTVVCSUFZZ0FpQURhaUlDRUljQ0lBUkJBRFlDRENBSklBSkJBblJxSUFSQkRHb1FxQUVNQVFzZ0JpQUpJQUlnQ1dzZ0Eyb2dBeUFEUVFBZ0FpQUhFTU1HQ3lBRVFSQnFKQUFnQVJCeUdnc2dDRUVRYWlRQUN5QUFRYndEYWlBQVFiZ0RhaEJnQkVBZ0JTQUZLQUlBUVFKeU5nSUFDeUFBS0FLOEF5QUFRUkJxRUZRZ0NoQnpJQUJCd0FOcUpBQUwyUU1CQTM4akFFSHdCR3NpQUNRQUlBQWdBallDNkFRZ0FDQUJOZ0xzQkNBQVFlMENOZ0lRSUFCQnlBRnFJQUJCMEFGcUlBQkJFR29pQVJCMElRY2dBRUhBQVdvaUNDQUVFRndnQ0JDY0FTRUpJQUJCQURvQXZ3RUNRQ0FBUWV3RWFpQUNJQU1nQ0NBRUtBSUVJQVVnQUVHL0FXb2dDU0FISUFCQnhBRnFJQUJCNEFScUVJSUhSUTBBSUFCQndZSUNLQUFBTmdDM0FTQUFRYnFDQWlrQUFEY0RzQUVnQ1NBQVFiQUJhaUFBUWJvQmFpQUFRWUFCYWhETkFTQUFRZXdDTmdJUUlBQkJDR3BCQUNBQkVIUWhBeUFCSVFRQ1FDQUFLQUxFQVNBSEtBSUFheUlCUVlrRFRnUkFJQU1nQVVFQ2RVRUNhaEJORUh3Z0F5Z0NBRVVOQVNBREtBSUFJUVFMSUFBdEFMOEJRUUZHQkVBZ0JFRXRPZ0FBSUFSQkFXb2hCQXNnQnlnQ0FDRUNBMEFnQUNnQ3hBRWdBazBFUUFKQUlBUkJBRG9BQUNBQUlBWTJBZ0FnQUVFUWFrSGUzQUVnQUJEZ0FVRUJSdzBBSUFNUWN3d0VDd1VnQkNBQVFiQUJhaUFBUVlBQmFpSUJJQUZCS0dvZ0FoQzNBeUFCYTBFQ2RXb3RBQUE2QUFBZ0JFRUJhaUVFSUFKQkJHb2hBZ3dCQ3dzUWRRQUxFSFVBQ3lBQVFld0VhaUFBUWVnRWFoQmdCRUFnQlNBRktBSUFRUUp5TmdJQUN5QUFLQUxzQkNBQVFjQUJhaEJVSUFjUWN5QUFRZkFFYWlRQUM2MEZBUVIvSXdCQmtBRnJJZ0FrQUNBQUlBSTJBb2dCSUFBZ0FUWUNqQUVnQUVIdEFqWUNGQ0FBUVJocUlBQkJJR29nQUVFVWFpSUhFSFFoQ1NBQVFSQnFJZ0VnQkJCY0lBRVFsUUVoQ0NBQVFRQTZBQThnQUVHTUFXb2dBaUFESUFFZ0JDZ0NCQ0FGSUFCQkQyb2dDQ0FKSUFjZ0FFR0VBV29RaUFjRVFDTUFRUkJySWdFa0FDQUdFRXNhQWtBZ0JoQ01BUVJBSUFZb0FnQWdBVUVBT2dBUElBRkJEMm9RbEFFZ0JrRUFFSXNCREFFTElBRkJBRG9BRGlBR0lBRkJEbW9RbEFFZ0JrRUFFSnNCQ3lBQlFSQnFKQUFnQUMwQUQwRUJSZ1JBSUFZZ0NFRXRFSUlCRUpBRUN5QUlRVEFRZ2dFZ0NTZ0NBQ0VDSUFBb0FoUWlDRUVCYXlFRFFmOEJjU0VCQTBBQ1FDQUNJQU5QRFFBZ0FpMEFBQ0FCUncwQUlBSkJBV29oQWd3QkN3c2pBRUVRYXlJQkpBQWdCaEJMSVFNZ0JoQmZJUVFDUUNBQ0lBZ1EyQVFpQjBVTkFDQUdFRlVnQmhCVklBWVFTMnBCQVdvZ0FoRFhCa1VFUUNBSElBUWdBMnRMQkVBZ0JpQUVJQU1nQkdzZ0Iyb2dBeUFERUtBRUN5QUdFRlVnQTJvaEJBTkFJQUlnQ0VjRVFDQUVJQUlRbEFFZ0FrRUJhaUVDSUFSQkFXb2hCQXdCQ3dzZ0FVRUFPZ0FQSUFRZ0FVRVBhaENVQVNBR0lBTWdCMm9RaHdJTUFRc2pBRUVRYXlJREpBQWdBU0FDSUFnUTR3UWdBMEVRYWlRQUlBRWlDaEJWSVFnZ0FSQkxJUUlqQUVFUWF5SUVKQUFDUUNBQ0lBWVFYeUlISUFZUVN5SURhMDBFUUNBQ1JRMEJJQVlRVlNJSElBTnFJQWdnQWhDMkFTQUdJQUlnQTJvaUFoQ0hBaUFFUVFBNkFBOGdBaUFIYWlBRVFROXFFSlFCREFFTElBWWdCeUFDSUFkcklBTnFJQU1nQTBFQUlBSWdDQkNqQXdzZ0JFRVFhaVFBSUFvUVRCb0xJQUZCRUdva0FBc2dBRUdNQVdvZ0FFR0lBV29RWVFSQUlBVWdCU2dDQUVFQ2NqWUNBQXNnQUNnQ2pBRWdBRUVRYWhCVUlBa1FjeUFBUVpBQmFpUUFDODhEQVFOL0l3QkJrQUpySWdBa0FDQUFJQUkyQW9nQ0lBQWdBVFlDakFJZ0FFSHRBallDRUNBQVFaZ0JhaUFBUWFBQmFpQUFRUkJxSWdFUWRDRUhJQUJCa0FGcUlnZ2dCQkJjSUFnUWxRRWhDU0FBUVFBNkFJOEJBa0FnQUVHTUFtb2dBaUFESUFnZ0JDZ0NCQ0FGSUFCQmp3RnFJQWtnQnlBQVFaUUJhaUFBUVlRQ2FoQ0lCMFVOQUNBQVFjR0NBaWdBQURZQWh3RWdBRUc2Z2dJcEFBQTNBNEFCSUFrZ0FFR0FBV29nQUVHS0FXb2dBRUgyQUdvUTNnRWdBRUhzQWpZQ0VDQUFRUWhxUVFBZ0FSQjBJUU1nQVNFRUFrQWdBQ2dDbEFFZ0J5Z0NBR3NpQVVIakFFNEVRQ0FESUFGQkFtb1FUUkI4SUFNb0FnQkZEUUVnQXlnQ0FDRUVDeUFBTFFDUEFVRUJSZ1JBSUFSQkxUb0FBQ0FFUVFGcUlRUUxJQWNvQWdBaEFnTkFJQUFvQXBRQklBSk5CRUFDUUNBRVFRQTZBQUFnQUNBR05nSUFJQUJCRUdwQjN0d0JJQUFRNEFGQkFVY05BQ0FERUhNTUJBc0ZJQVFnQUVIMkFHb2lBU0FCUVFwcUlBSVF2QU1nQUdzZ0FHb3RBQW82QUFBZ0JFRUJhaUVFSUFKQkFXb2hBZ3dCQ3dzUWRRQUxFSFVBQ3lBQVFZd0NhaUFBUVlnQ2FoQmhCRUFnQlNBRktBSUFRUUp5TmdJQUN5QUFLQUtNQWlBQVFaQUJhaEJVSUFjUWN5QUFRWkFDYWlRQUM1VURBUVIvSXdCQm9BTnJJZ2drQUNBSUlBaEJvQU5xSWdNMkFnd2pBRUdRQVdzaUJ5UUFJQWNnQjBHRUFXbzJBaHdnQUVFSWFpQUhRU0JxSWdJZ0IwRWNhaUFFSUFVZ0JoQ01CeUFIUWdBM0F4QWdCeUFDTmdJTUlBaEJFR29pQWlBSUtBSU1FUGdFSVFVZ0FDZ0NDQ0VBSXdCQkVHc2lCQ1FBSUFRZ0FEWUNEQ0FFUVFocUlBUkJER29RdkFFZ0FpQUhRUXhxSUFVZ0IwRVFhaEM1QkNFQUVMc0JJQVJCRUdva0FDQUFRWDlHQkVBUWRRQUxJQWdnQWlBQVFRSjBhallDRENBSFFaQUJhaVFBSUFnb0Fnd2hCQ01BUVJCcklnWWtBQ0FHUVFocUl3QkJJR3NpQUNRQUlBQkJHR29nQWlBRUVPVUNJQUJCREdvZ0FFRVFhaUFBS0FJWUlRVWdBQ2dDSENFS0l3QkJFR3NpQkNRQUlBUWdCVFlDQ0NBRUlBRTJBZ3dEUUNBRklBcEhCRUFnQkVFTWFpQUZLQUlBRU9RRUlBUWdCVUVFYWlJRk5nSUlEQUVMQ3lBRVFRaHFJQVJCREdvUXNnRWdCRUVRYWlRQUlBQWdBaUFBS0FJUUVPUUNOZ0lNSUFBZ0FDZ0NGRFlDQ0NBQVFRaHFFTElCSUFCQklHb2tBQ0FHS0FJTUlBWkJFR29rQUNBREpBQUxnZ0lCQkg4akFFR0FBV3NpQWlRQUlBSWdBa0gwQUdvMkFnd2dBRUVJYWlBQ1FSQnFJZ01nQWtFTWFpQUVJQVVnQmhDTUJ5QUNLQUlNSVFRakFFRVFheUlHSkFBZ0JrRUlhaU1BUVNCcklnQWtBQ0FBUVJocUlBTWdCQkRsQWlBQVFReHFJQUJCRUdvZ0FDZ0NHQ0VGSUFBb0Fod2hDaU1BUVJCcklnUWtBQ0FFSUFVMkFnZ2dCQ0FCTmdJTUEwQWdCU0FLUndSQUlBUkJER29nQlN3QUFCRE5BeUFFSUFWQkFXb2lCVFlDQ0F3QkN3c2dCRUVJYWlBRVFReHFFTElCSUFSQkVHb2tBQ0FBSUFNZ0FDZ0NFQkRrQWpZQ0RDQUFJQUFvQWhRMkFnZ2dBRUVJYWhDeUFTQUFRU0JxSkFBZ0JpZ0NEQ0FHUVJCcUpBQWdBa0dBQVdva0FBdnhEQUVCZnlNQVFUQnJJZ2NrQUNBSElBRTJBaXdnQkVFQU5nSUFJQWNnQXhCY0lBY1FuQUVoQ0NBSEVGUUNmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdCa0hCQUdzT09RQUJGd1FYQlJjR0J4Y1hGd29YRnhjWERnOFFGeGNYRXhVWEZ4Y1hGeGNYQUFFQ0F3TVhGd0VYQ0JjWENRc1hEQmNORndzWEZ4RVNGQllMSUFBZ0JVRVlhaUFIUVN4cUlBSWdCQ0FJRUpBSERCZ0xJQUFnQlVFUWFpQUhRU3hxSUFJZ0JDQUlFSThIREJjTElBQkJDR29nQUNnQ0NDZ0NEQkVBQUNFQklBY2dBQ0FIS0FJc0lBSWdBeUFFSUFVZ0FSQlZJQUVRVlNBQkVFdEJBblJxRU5rQk5nSXNEQllMSUFkQkxHb2dBaUFFSUFoQkFoRExBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkJBV3RCSGt0eVJRUkFJQVVnQURZQ0RBd0JDeUFFSUFGQkJISTJBZ0FMREJVTElBZEJxSWtFS1FNQU53TVlJQWRCb0lrRUtRTUFOd01RSUFkQm1Ja0VLUU1BTndNSUlBZEJrSWtFS1FNQU53TUFJQWNnQUNBQklBSWdBeUFFSUFVZ0J5QUhRU0JxRU5rQk5nSXNEQlFMSUFkQnlJa0VLUU1BTndNWUlBZEJ3SWtFS1FNQU53TVFJQWRCdUlrRUtRTUFOd01JSUFkQnNJa0VLUU1BTndNQUlBY2dBQ0FCSUFJZ0F5QUVJQVVnQnlBSFFTQnFFTmtCTmdJc0RCTUxJQWRCTEdvZ0FpQUVJQWhCQWhETEFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQkYwcHlSUVJBSUFVZ0FEWUNDQXdCQ3lBRUlBRkJCSEkyQWdBTERCSUxJQWRCTEdvZ0FpQUVJQWhCQWhETEFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQkFXdEJDMHR5UlFSQUlBVWdBRFlDQ0F3QkN5QUVJQUZCQkhJMkFnQUxEQkVMSUFkQkxHb2dBaUFFSUFoQkF4RExBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkI3UUpLY2tVRVFDQUZJQUEyQWh3TUFRc2dCQ0FCUVFSeU5nSUFDd3dRQ3lBSFFTeHFJQUlnQkNBSVFRSVF5d0VoQUFKQUlBUW9BZ0FpQVVFRWNTQUFRUUZySWdCQkMwdHlSUVJBSUFVZ0FEWUNFQXdCQ3lBRUlBRkJCSEkyQWdBTERBOExJQWRCTEdvZ0FpQUVJQWhCQWhETEFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQk8wcHlSUVJBSUFVZ0FEWUNCQXdCQ3lBRUlBRkJCSEkyQWdBTERBNExJQWRCTEdvaEFDTUFRUkJySWdFa0FDQUJJQUkyQWd3RFFBSkFJQUFnQVVFTWFoQmdEUUFnQ0VFQklBQVFlUkN6QVVVTkFDQUFFSUFCR2d3QkN3c2dBQ0FCUVF4cUVHQUVRQ0FFSUFRb0FnQkJBbkkyQWdBTElBRkJFR29rQUF3TkN5QUhRU3hxSVFFQ1FDQUFRUWhxSUFBb0FnZ29BZ2dSQUFBaUFCQkxRUUFnQUVFTWFoQkxhMFlFUUNBRUlBUW9BZ0JCQkhJMkFnQU1BUXNnQVNBQ0lBQWdBRUVZYWlBSUlBUkJBQkRiQWlJQ0lBQkhJQVVvQWdnaUFVRU1SM0pGQkVBZ0JVRUFOZ0lJREFFTElBSWdBR3RCREVjZ0FVRUxTbkpGQkVBZ0JTQUJRUXhxTmdJSUN3c01EQXNnQjBIUWlRUkJMUHdLQUFBZ0J5QUFJQUVnQWlBRElBUWdCU0FISUFkQkxHb1EyUUUyQWl3TUN3c2dCMEdRaWdRb0FnQTJBaEFnQjBHSWlnUXBBd0EzQXdnZ0IwR0FpZ1FwQXdBM0F3QWdCeUFBSUFFZ0FpQURJQVFnQlNBSElBZEJGR29RMlFFMkFpd01DZ3NnQjBFc2FpQUNJQVFnQ0VFQ0VNc0JJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRThTbkpGQkVBZ0JTQUFOZ0lBREFFTElBUWdBVUVFY2pZQ0FBc01DUXNnQjBHNGlnUXBBd0EzQXhnZ0IwR3dpZ1FwQXdBM0F4QWdCMEdvaWdRcEF3QTNBd2dnQjBHZ2lnUXBBd0EzQXdBZ0J5QUFJQUVnQWlBRElBUWdCU0FISUFkQklHb1EyUUUyQWl3TUNBc2dCMEVzYWlBQ0lBUWdDRUVCRU1zQklRQUNRQ0FFS0FJQUlnRkJCSEVnQUVFR1NuSkZCRUFnQlNBQU5nSVlEQUVMSUFRZ0FVRUVjallDQUFzTUJ3c2dBQ0FCSUFJZ0F5QUVJQVVnQUNnQ0FDZ0NGQkVKQUF3SEN5QUFRUWhxSUFBb0FnZ29BaGdSQUFBaEFTQUhJQUFnQnlnQ0xDQUNJQU1nQkNBRklBRVFWU0FCRUZVZ0FSQkxRUUowYWhEWkFUWUNMQXdGQ3lBRlFSUnFJQWRCTEdvZ0FpQUVJQWdRamdjTUJBc2dCMEVzYWlBQ0lBUWdDRUVFRU1zQklRQWdCQzBBQUVFRWNVVUVRQ0FGSUFCQjdBNXJOZ0lVQ3d3REN5QUdRU1ZHRFFFTElBUWdCQ2dDQUVFRWNqWUNBQXdCQ3lNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dDUUNBRUFuOUJCaUFIUVN4cUlnRWdBRUVNYWlJQ0VHQU5BQnBCQkNBSUlBRVFlUkNtQWtFbFJ3MEFHaUFCRUlBQklBSVFZRVVOQVVFQ0N5QUVLQUlBY2pZQ0FBc2dBRUVRYWlRQUN5QUhLQUlzQ3lBSFFUQnFKQUFMU1FFQ2Z5TUFRUkJySWdZa0FDQUdJQUUyQWd3Z0JrRUlhaUlISUFNUVhDQUhFSndCSVFFZ0J4QlVJQVZCRkdvZ0JrRU1haUFDSUFRZ0FSQ09CeUFHS0FJTUlBWkJFR29rQUF0TEFRSi9Jd0JCRUdzaUJpUUFJQVlnQVRZQ0RDQUdRUWhxSWdjZ0F4QmNJQWNRbkFFaEFTQUhFRlFnQUNBRlFSQnFJQVpCREdvZ0FpQUVJQUVRandjZ0JpZ0NEQ0FHUVJCcUpBQUxTd0VDZnlNQVFSQnJJZ1lrQUNBR0lBRTJBZ3dnQmtFSWFpSUhJQU1RWENBSEVKd0JJUUVnQnhCVUlBQWdCVUVZYWlBR1FReHFJQUlnQkNBQkVKQUhJQVlvQWd3Z0JrRVFhaVFBQ3pFQUlBQWdBU0FDSUFNZ0JDQUZJQUJCQ0dvZ0FDZ0NDQ2dDRkJFQUFDSUFFRlVnQUJCVklBQVFTMEVDZEdvUTJRRUxXUUVCZnlNQVFTQnJJZ1lrQUNBR1FiaUtCQ2tEQURjREdDQUdRYkNLQkNrREFEY0RFQ0FHUWFpS0JDa0RBRGNEQ0NBR1FhQ0tCQ2tEQURjREFDQUFJQUVnQWlBRElBUWdCU0FHSUFaQklHb2lBUkRaQVNBQkpBQUxpd3dCQVg4akFFRVFheUlISkFBZ0J5QUJOZ0lNSUFSQkFEWUNBQ0FISUFNUVhDQUhFSlVCSVFnZ0J4QlVBbjhDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQVpCd1FCckRqa0FBUmNFRndVWEJnY1hGeGNLRnhjWEZ3NFBFQmNYRnhNVkZ4Y1hGeGNYRndBQkFnTURGeGNCRndnWEZ3a0xGd3dYRFJjTEZ4Y1JFaFFXQ3lBQUlBVkJHR29nQjBFTWFpQUNJQVFnQ0JDVEJ3d1lDeUFBSUFWQkVHb2dCMEVNYWlBQ0lBUWdDQkNTQnd3WEN5QUFRUWhxSUFBb0FnZ29BZ3dSQUFBaEFTQUhJQUFnQnlnQ0RDQUNJQU1nQkNBRklBRVFWU0FCRUZVZ0FSQkxhaERhQVRZQ0RBd1dDeUFIUVF4cUlBSWdCQ0FJUVFJUXpBRWhBQUpBSUFRb0FnQWlBVUVFY1NBQVFRRnJRUjVMY2tVRVFDQUZJQUEyQWd3TUFRc2dCQ0FCUVFSeU5nSUFDd3dWQ3lBSFFxWGF2YW5DN011UytRQTNBd0FnQnlBQUlBRWdBaUFESUFRZ0JTQUhJQWRCQ0dvUTJnRTJBZ3dNRkFzZ0IwS2xzcldwMHEzTGt1UUFOd01BSUFjZ0FDQUJJQUlnQXlBRUlBVWdCeUFIUVFocUVOb0JOZ0lNREJNTElBZEJER29nQWlBRUlBaEJBaERNQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCRjBweVJRUkFJQVVnQURZQ0NBd0JDeUFFSUFGQkJISTJBZ0FMREJJTElBZEJER29nQWlBRUlBaEJBaERNQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCQVd0QkMwdHlSUVJBSUFVZ0FEWUNDQXdCQ3lBRUlBRkJCSEkyQWdBTERCRUxJQWRCREdvZ0FpQUVJQWhCQXhETUFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQjdRSktja1VFUUNBRklBQTJBaHdNQVFzZ0JDQUJRUVJ5TmdJQUN3d1FDeUFIUVF4cUlBSWdCQ0FJUVFJUXpBRWhBQUpBSUFRb0FnQWlBVUVFY1NBQVFRRnJJZ0JCQzB0eVJRUkFJQVVnQURZQ0VBd0JDeUFFSUFGQkJISTJBZ0FMREE4TElBZEJER29nQWlBRUlBaEJBaERNQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCTzBweVJRUkFJQVVnQURZQ0JBd0JDeUFFSUFGQkJISTJBZ0FMREE0TElBZEJER29oQUNNQVFSQnJJZ0VrQUNBQklBSTJBZ3dEUUFKQUlBQWdBVUVNYWhCaERRQWdDRUVCSUFBUWVoQzBBVVVOQUNBQUVJRUJHZ3dCQ3dzZ0FDQUJRUXhxRUdFRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFGQkVHb2tBQXdOQ3lBSFFReHFJUUVDUUNBQVFRaHFJQUFvQWdnb0FnZ1JBQUFpQUJCTFFRQWdBRUVNYWhCTGEwWUVRQ0FFSUFRb0FnQkJCSEkyQWdBTUFRc2dBU0FDSUFBZ0FFRVlhaUFJSUFSQkFCRGVBaUlDSUFCSElBVW9BZ2dpQVVFTVIzSkZCRUFnQlVFQU5nSUlEQUVMSUFJZ0FHdEJERWNnQVVFTFNuSkZCRUFnQlNBQlFReHFOZ0lJQ3dzTURBc2dCMEg0aUFRb0FBQTJBQWNnQjBIeGlBUXBBQUEzQXdBZ0J5QUFJQUVnQWlBRElBUWdCU0FISUFkQkMyb1EyZ0UyQWd3TUN3c2dCMEdBaVFRdEFBQTZBQVFnQjBIOGlBUW9BQUEyQWdBZ0J5QUFJQUVnQWlBRElBUWdCU0FISUFkQkJXb1EyZ0UyQWd3TUNnc2dCMEVNYWlBQ0lBUWdDRUVDRU13QklRQUNRQ0FFS0FJQUlnRkJCSEVnQUVFOFNuSkZCRUFnQlNBQU5nSUFEQUVMSUFRZ0FVRUVjallDQUFzTUNRc2dCMEtsa09tcDBzbk9rdE1BTndNQUlBY2dBQ0FCSUFJZ0F5QUVJQVVnQnlBSFFRaHFFTm9CTmdJTURBZ0xJQWRCREdvZ0FpQUVJQWhCQVJETUFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQkJrcHlSUVJBSUFVZ0FEWUNHQXdCQ3lBRUlBRkJCSEkyQWdBTERBY0xJQUFnQVNBQ0lBTWdCQ0FGSUFBb0FnQW9BaFFSQ1FBTUJ3c2dBRUVJYWlBQUtBSUlLQUlZRVFBQUlRRWdCeUFBSUFjb0Fnd2dBaUFESUFRZ0JTQUJFRlVnQVJCVklBRVFTMm9RMmdFMkFnd01CUXNnQlVFVWFpQUhRUXhxSUFJZ0JDQUlFSkVIREFRTElBZEJER29nQWlBRUlBaEJCQkRNQVNFQUlBUXRBQUJCQkhGRkJFQWdCU0FBUWV3T2F6WUNGQXNNQXdzZ0JrRWxSZzBCQ3lBRUlBUW9BZ0JCQkhJMkFnQU1BUXNqQUVFUWF5SUFKQUFnQUNBQ05nSU1Ba0FnQkFKL1FRWWdCMEVNYWlJQklBQkJER29pQWhCaERRQWFRUVFnQ0NBQkVIb1Fwd0pCSlVjTkFCb2dBUkNCQVNBQ0VHRkZEUUZCQWdzZ0JDZ0NBSEkyQWdBTElBQkJFR29rQUFzZ0J5Z0NEQXNnQjBFUWFpUUFDMGtCQW44akFFRVFheUlHSkFBZ0JpQUJOZ0lNSUFaQkNHb2lCeUFERUZ3Z0J4Q1ZBU0VCSUFjUVZDQUZRUlJxSUFaQkRHb2dBaUFFSUFFUWtRY2dCaWdDRENBR1FSQnFKQUFMU3dFQ2Z5TUFRUkJySWdZa0FDQUdJQUUyQWd3Z0JrRUlhaUlISUFNUVhDQUhFSlVCSVFFZ0J4QlVJQUFnQlVFUWFpQUdRUXhxSUFJZ0JDQUJFSklISUFZb0Fnd2dCa0VRYWlRQUMwc0JBbjhqQUVFUWF5SUdKQUFnQmlBQk5nSU1JQVpCQ0dvaUJ5QURFRndnQnhDVkFTRUJJQWNRVkNBQUlBVkJHR29nQmtFTWFpQUNJQVFnQVJDVEJ5QUdLQUlNSUFaQkVHb2tBQXN1QUNBQUlBRWdBaUFESUFRZ0JTQUFRUWhxSUFBb0FnZ29BaFFSQUFBaUFCQlZJQUFRVlNBQUVFdHFFTm9CQ3p3QkFYOGpBRUVRYXlJR0pBQWdCa0tsa09tcDBzbk9rdE1BTndNSUlBQWdBU0FDSUFNZ0JDQUZJQVpCQ0dvZ0JrRVFhaUlCRU5vQklBRWtBQXVQQVFFRmZ5TUFRZEFCYXlJQUpBQVFhU0VHSUFBZ0JEWUNBQ0FBUWJBQmFpSUhJQWNnQjBFVUlBWkI5TlVCSUFBUW9RRWlDR29pQkNBQ0VNTUJJUVlnQUVFUWFpSUZJQUlRWENBRkVKd0JJQVVRVkNBSElBUWdCUkROQVNBQklBVWdDRUVDZENBRmFpSUJJQVlnQUd0QkFuUWdBR3BCc0FWcklBUWdCa1liSUFFZ0FpQURFTzhCSUFCQjBBRnFKQUFMZ3dRQkIzOENmeU1BUWFBRGF5SUdKQUFnQmtJbE53T1lBeUFHUVpnRGFpSUhRUUZ5UWJMMkFTQUNLQUlFRU5nQ0lRZ2dCaUFHUWZBQ2FpSUpOZ0xzQWhCcElRQUNmeUFJQkVBZ0FpZ0NDQ0VLSUFaQlFHc2dCVGNEQUNBR0lBUTNBemdnQmlBS05nSXdJQWxCSGlBQUlBY2dCa0V3YWhDaEFRd0JDeUFHSUFRM0ExQWdCaUFGTndOWUlBWkI4QUpxUVI0Z0FDQUdRWmdEYWlBR1FkQUFhaENoQVFzaEFDQUdRZXdDTmdLQUFTQUdRZVFDYWtFQUlBWkJnQUZxRUhRaENTQUdRZkFDYWlFSEFrQWdBRUVlVGdSQUVHa2hBQUovSUFnRVFDQUNLQUlJSVFjZ0JpQUZOd01RSUFZZ0JEY0RDQ0FHSUFjMkFnQWdCa0hzQW1vZ0FDQUdRWmdEYWlBR0VNSUJEQUVMSUFZZ0JEY0RJQ0FHSUFVM0F5Z2dCa0hzQW1vZ0FDQUdRWmdEYWlBR1FTQnFFTUlCQ3lJQVFYOUdEUUVnQ1NBR0tBTHNBaEI4SUFZb0F1d0NJUWNMSUFjZ0FDQUhhaUlMSUFJUXd3RWhEQ0FHUWV3Q05nS0FBU0FHUWZnQWFrRUFJQVpCZ0FGcUlnY1FkQ0VJQWtBZ0JpZ0M3QUlpQ2lBR1FmQUNha1lFUUNBSElRQU1BUXNnQUVFRGRCQk5JZ0JGRFFFZ0NDQUFFSHdnQmlnQzdBSWhDZ3NnQmtIc0FHb2lCeUFDRUZ3Z0NpQU1JQXNnQUNBR1FmUUFhaUFHUWZBQWFpQUhFSllISUFjUVZDQUJJQUFnQmlnQ2RDQUdLQUp3SUFJZ0F4RHZBU0FJRUhNZ0NSQnpJQVpCb0FOcUpBQU1BUXNRZFFBTEN3dUFxUVFjQWN2K0FtWnpaWFFBSlhNdkpYTUFKWE11SlhNQWRtVmpkRzl5QUdSbFluVm5BSGRpQUNWajRvUzU3N2lQVzNkbFltRnlhMmwwTFdsdVptODZYUUFsYlMwbFpDMGxXUzBsU0MwbFRTMGxVd0JOWVhKclpYSWdUMHN1QUN3QVFYTnpaWEowYVc5dUlHQjRJRDQ5SUcxTmFXNVlZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2QybGtkR2dnUGowZ05XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhkcFpIUm9JRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSEI1Y21GdGFXUXRQbk5wZW1Vb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnRVM1JoY25SVWFXMWxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvYzNKalgzZHBaSFJvSlRJcElEMDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiUzUzYVdSMGFDZ3BJRDA5SUdsdExuTjBaWEFvS1M5emFYcGxiMllvWm14dllYUXBZQ0JtWVdsc1pXUWdhVzRnQUNBSkNnMEFSWEp5YjNJNklHMWhiR3h2WXdvQVJYSnliM0lnTVRvZ2FXTndSMlYwU1c1cGRGaDNNbGhqQ2dBZ1BUMDlJRzFoZEhKcGVDQW9KV1FzSldRcElEMDlQUW9BSUQwOVBTQjJaV04wYjNJZ0tDVmtLU0E5UFQwS0FEOC9QeUF4Q2dCRmNuSnZjam9nYkdGaVpXeHBibWNnZDI5eWF5QnZkbVZ5Wm14dmR5NEtBQ01qSXlCR1pXRjBkWEpsSUdOaGJtUnBaR0YwWlhNZ1ptOXlJSFJ5WVdOcmFXNW5JR0Z5WlNCdmRtVnlabXh2ZHk0S0FHRnlaMnhEWVcxbGNtRkdjblZ6ZEhWdFVrZ29LVG9nWVhKUVlYSmhiVVJsWTI5dGNFMWhkQ2dwSUdsdVpHbGpZWFJsWkNCd1lYSmhiV1YwWlhJZ1pYSnliM0l1Q2dCcmNHMUVaV3hsZEdWU1pXWkVZWFJoVTJWMEtDazZJRTVWVEV3Z2NtVm1SR0YwWVZObGRGQjBjaTl5WldaSmJXRm5aUzRLQUZOMFlYSjBJSFJ5WVdOcmFXNW5YM1JvY21WaFpDQWpKV1F1Q2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUVSaGRHRWdiblZ0SUdWeWNtOXlJU0VLQUdOdmJHOXlPaUFqTmpZME5EQXdPeUJpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFqWm1abVpqazVPeUJpYjNKa1pYSXRjbUZrYVhWek9pQTBjSGc3SUhCaFpHUnBibWM2SURKd2VBQjNBQ1Z6SlhNQUpYTXVKWE1BZG1WamRHOXlBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMjl5YVdWdWRHRjBhVzl1WDJGemMybG5ibTFsYm5RdVkzQndBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZabkpoYldWM2IzSnJMM1JwYldWeWN5NWpjSEFBTDNOeVl5OWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTlrWlhSbFkzUnZjbk12Ukc5SFgzTmpZV3hsWDJsdWRtRnlhV0Z1ZEY5a1pYUmxZM1J2Y2k1amNIQUFMM055WXk5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOXRZWFJqYUdWeWN5OW9iM1ZuYUY5emFXMXBiR0Z5YVhSNVgzWnZkR2x1Wnk1amNIQUFMM055WXk5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOW1jbUZ0WlhkdmNtc3ZhVzFoWjJVdVkzQndBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMmRoZFhOemFXRnVYM05qWVd4bFgzTndZV05sWDNCNWNtRnRhV1F1WTNCd0FDOXpjbU12WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwzQjVjbUZ0YVdRdVkzQndBR2x1Wm04QVJYSnliM0k2SUdsamNFZGxkRXBmVlY5WVl3QjNZZ0J5WWdCQlVsOVFTVmhGVEY5R1QxSk5RVlJmVWtkQ0FGQmhkSFJsY200Z1pYaDBjbUZqZEdsdmJpQm1ZV2xzWldRdUFFRnpjMlZ5ZEdsdmJpQmdjSGx5WVcxcFpHQWdabUZwYkdWa0lHbHVJQUJVY21GamEybHVaeUIwYUhKbFlXUWdQU0FsWkFvQVUwbGFSU0E5SUNWa0xDQWxaQW9BUlhKeWIzSWdNam9nYVdOd1IyVjBTVzVwZEZoM01saGpDZ0EvUHo4Z01nb0FSWEp5YjNJNklIVnVjM1Z3Y0c5eWRHVmtJSEJwZUdWc0lHWnZjbTFoZEM0S0FGVnVhMjV2ZDI0Z2IzSWdkVzV6ZFhCd2IzSjBaV1FnYkdGaVpXeHBibWNnZEdoeVpYTm9iMnhrSUcxdlpHVWdjbVZ4ZFdWemRHVmtMaUJUWlhRZ2RHOGdiV0Z1ZFdGc0xnb0FhM0J0UkdWc1pYUmxVbVZtUkdGMFlWTmxkQ2dwT2lBd0lIaHphWHBsTDNsemFYcGxMMlJ3YVM0S0FFVnljbTl5SUNnbFpDazZJSFZ1WVdKc1pTQjBieUJ2Y0dWdUlHTmhiV1Z5WVNCd1lYSmhiV1YwWlhKeklHWnBiR1VnSWlWeklpQm1iM0lnZDNKcGRHbHVaeTRLQUVWeWNtOXlPaUJPVlV4TUlIQmhkSFJJWVc1a2JHVXVDZ0JGYm1RZ2RISmhZMnRwYm1kZmRHaHlaV0ZrSUNNbFpDNEtBRTkxZENCdlppQnRaVzF2Y25raElRb0FjZ0F2YzNKakwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMjFoZEdOb1pYSnpMMlp5WldGckxtZ0FkMkZ5Ym1sdVp3QWdKVEV3WndBbE5HUUFkMklBY21JQUpXUHduNXFwVzNkbFltRnlhMmwwTFdWeWNtOXlPbDBBUVZKZlVFbFlSVXhmUms5U1RVRlVYMEpIVWdCTlFVNVZRVXdBUjJWdVpYSnBZeUJsY25KdmNpQmtkWEpwYm1jZ2JXRjBZMmhwYm1jZ2NHaGhjMlV1QUZWemFXNW5JSGRsWW1GeWEybDBWbWxrWlc5TWRXMWhYMlJsWm1GMWJIUWdabTl5SUd4MWJXRWdZMjl1ZG1WeWMybHZiaUVoSVFBZ2JHbHVaU0FBSlhNbGN3b0FSbWxzWlNCdmNHVnVJR1Z5Y205eUxpQWxjd29BUkdsemRHOXlkR2x2YmlCbVlXTjBiM0k2SUdzeFBTVXhMakV3Wml3Z2F6STlKVEV1TVRCbUxDQndNVDBsTVM0eE1HWXNJSEF5UFNVeExqRXdaZ29BUlhKeWIzSTZJRzFoYkd4dll3b0FSWEp5YjNJZ016b2dhV053UjJWMFNXNXBkRmgzTWxoakNnQkZjbkp2Y2lCcFkzQkhaWFJLWDFWZlV3b0FQVDA5UFQwOUlDVnpJRDA5UFQwOVBUMDlDZ0EvUHo4Z013b0FSWEp5YjNJNklHTmhiaWQwSUd4dllXUWdjR0YwZEdWeWJpQm1jbTl0SUU1VlRFd2dZblZtWm1WeUxnb0FhM0J0VTJWMFVtVm1SR0YwWVZObGRDZ3BPaUJPVlV4TUlHdHdiVWhoYm1Sc1pTOW1hV3hsYm1GdFpTNEtBRVZ5Y205eUlITmhkbWx1WnlCbVpXRjBkWEpsSUcxaGNEb2daWEp5YjNJZ2QzSnBkR2x1WnlCa1lYUmhMZ29BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JqYjJ4dmNqb2dJMlptWm1abVpqc2dZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJMlptTURFd01Uc2dZbTl5WkdWeUxYSmhaR2wxY3pvZ05IQjRPeUJ3WVdSa2FXNW5PaUF5Y0hnQVNVUWdZV3h5WldGa2VTQmxlR2x6ZEhNQVpYSnliM0lBUm5KbFlXc2dabVZoZEhWeVpYTWdMU0FsWkFCeVlnQkJWVlJQWDAxRlJFbEJUZ0JCVWw5UVNWaEZURjlHVDFKTlFWUmZVa2RDUVFCSmJuTjFabVpwWTJsbGJuUWdZMjl1ZEhKaGMzUWdaSFZ5YVc1bklHMWhkR05vYVc1bkxnQWxOeTQxWmlBQUlHeHBibVVnQUVWeWNtOXlJRzl3Wlc1cGJtY2dabWxzWlNBbkpYTW5PaUFBSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5nOUpXWXNJR1o1UFNWbUxDQjRNRDBsWml3Z2VUQTlKV1lzSUhNOUpXWUtBRVZ5Y205eUlEUTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FSWEp5YjNJZ2FXTndSMlYwVlY5bWNtOXRYMWhmWW5sZlRXRjBXREpWQ2dCRmNuSnZjaUJoYkd4dlkyRjBhVzVuSUcxbGJXOXllUzRLQUVWeWNtOXlPaUJ2ZFhRZ2IyWWdiV1Z0YjNKNUxnb0FSWEp5YjNJNklGVnVZV0pzWlNCMGJ5QnZjR1Z1SUdacGJHVWdKeVZ6SnlCbWIzSWdkM0pwZEdsdVp5NEtBRVZ5Y205eU9pQjFibUZpYkdVZ2RHOGdiM0JsYmlCbWFXeGxJQ2NsY3lWekp5Qm1iM0lnY21WaFpHbHVaeTRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVTNSbGNDQnphWHBsSUcxMWMzUWdZbVVnWlhGMVlXd2dkRzhnZDJsa2RHZ2dabTl5SUc1dmR3QWxjd0JYYVdSMGFDQmpZVzV1YjNRZ1ltVWdlbVZ5YndCVGIzVnlZMlVnZDJsa2RHZ2diWFZ6ZENCaVpTQmxkbVZ1QUVsdFlXZGxJR2x6SUhSdmJ5QnpiV0ZzYkFCNElHOTFkQ0J2WmlCeVlXNW5aUUJDZFdsc1pDQlFlWEpoYldsa0FFTnNiMk5ySUdoaGN5QnViM1FnWW1WbGJpQnpkR0Z5ZEdWa0FGQjVjbUZ0YVdRZ2FYTWdibTkwSUdGc2JHOWpZWFJsWkFCeVlnQWxZK0thb08rNGoxdDNaV0poY210cGRDMTNZWEp1T2wwQVFWVlVUMTlQVkZOVkFFRlNYMUJKV0VWTVgwWlBVazFCVkY5Q1IxSkJBRUpoY21OdlpHVWdiV0YwWTJocGJtY2dZMjkxYkdRZ2JtOTBJR1pwYm1RZ1kyOXljbVZqZENCaVlYSmpiMlJsSUd4dlkyRjBiM0lnY0dGMGRHVnliaTRBV3lWelhTQUFPaUFBSlhNbGN3b0FSR2x6ZEc5eWRHbHZiaUJtWVdOMGIzSWdQU0FsWmlBbFppQWxaaUFsWmlBbFppQWxaZ29BUlhKeWIzSWdOVG9nYVdOd1IyVjBTVzVwZEZoM01saGpDZ0JGY25KdmNpQnBZM0JIWlhSWVkxOW1jbTl0WDFoM1gySjVYMDFoZEZoM01saGpDZ0JGY25KdmNpQnlaV0ZrYVc1bklHbHRZV2RsVTJWMExnb0FSWEp5YjNJZ2QyaHBiR1VnWVdSa2FXNW5JSEpsWm1WeVpXNWpaU0JrWVhSaElITmxkRG9nYTNCdFIyVnVVbVZtUkdGMFlWTmxkQ2dwSUdaaGFXeGxaQzRLQUVWeWNtOXlJRzl3Wlc1cGJtY2dKeVZ6Snk0S0FFTmhiaWQwSUc5d1pXNGdTbEJGUnlCbWFXeGxJQ2NsY3ljS0FFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVVHRjBkR1Z5YmlCRVlYUmhJSEpsWVdRZ1pYSnliM0loSVFvQVVtVmhaQ0JsY25KdmNpRWhDZ0JqYjJ4dmNqb2dJemMzTkRRd01Ec2dZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJMlptWm1ZNU9Uc2dZbTl5WkdWeUxYSmhaR2wxY3pvZ05IQjRPeUJ3WVdSa2FXNW5PaUF5Y0hnQUpXWUFkMklBUVZKZlVFbFlSVXhmUms5U1RVRlVYMEZDUjFJQVVIbHlZVzFwWkNCcGN5Qk9WVXhNQUVGVlZFOWZRVVJCVUZSSlZrVUFRbUZ5WTI5a1pTQnRZWFJqYUdsdVp5Qmxjbkp2Y2lCa1pYUmxZM1JwYjI0dlkyOXljbVZqZEdsdmJpQm1iM1Z1WkNCMWJuSmxZMjkyWlhKaFlteGxJR1Z5Y205eUxnQkZjbkp2Y2lCamNtVmhkR2x1WnlCbWRXeHNJR1pwYkdVZ2NHRjBhQ0JtY205dElDY2xjeWNnWVc1a0lDY2xjeWNBUVhOelpYSjBhVzl1SUdCNElEd2diVTFoZUZoZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JvWldsbmFIUWdQajBnTldBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR2hsYVdkb2RDQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnRTVzFoWjJWekxuTnBlbVVvS1NBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNElENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnRVM1J2Y0ZScGJXVWdQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR1J6ZENBaFBTQXdZQ0JtWVdsc1pXUWdhVzRnQUNWekpYTUtBRVJwYzNSdmNuUnBiMjRnWm1GamRHOXlJRDBnSldZZ0pXWWdKV1lnSldZZ0pXWUtBRVZ5Y205eUlEMGdKV1lLQUVWeWNtOXlJRFk2SUdsamNFZGxkRWx1YVhSWWR6SllZd29BSUNBZ0lDQWdJQ0FnU1cxaFoyVlRhWHBsSUQwZ0pUZGtXM0JwZUdWc1hRb0FQVDA5UFQwOVBUMDlJQ1ZrSUQwOVBUMDlQVDA5UFQwOUNnQkpiV0ZuWlhObGRDQmpiMjUwWVdsdWN5QWxaQ0JwYldGblpYTXVDZ0JGY25KdmNqb2dWVzVoWW14bElIUnZJRzl3Wlc0Z1ptbHNaU0FuSlhNbklHWnZjaUJ5WldGa2FXNW5MZ29BUlhKeWIzSWdLQ1ZrS1RvZ2RXNWhZbXhsSUhSdklHOXdaVzRnWTJGdFpYSmhJSEJoY21GdFpYUmxjbk1nWm1sc1pTQWlKWE1pSUdadmNpQnlaV0ZrYVc1bkxnb0FSWEp5YjNJZ2NtVmhaR2x1WnlCd1lYUjBaWEp1SUdacGJHVWdKeVZ6Snk0S0FFVjRkSEpoWTNRZ1JtVmhkSFZ5WlhNQVNHVnBaMmgwSUdOaGJtNXZkQ0JpWlNCNlpYSnZBQ1ZtSUNWbUlDVm1JQ1ZtQUhnZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCTVlYQnNZV05wWVc0Z2NIbHlZVzFwWkNCb1lYTWdibTkwSUdKbFpXNGdZV3hzYjJOaGRHVmtBRU5zYjJOcklHaGhjeUJ1YjNRZ1ltVmxiaUJ6ZEc5d2NHVmtBQ1ZqOEorUW5sdDNaV0poY210cGRDMWtaV0oxWnpwZEFFRlNYMUJKV0VWTVgwWlBVazFCVkY5TlQwNVBBRVJsYzNScGJtRjBhVzl1SUdseklFNVZURXdBUVZWVVQxOUNVa0ZEUzBWVVNVNUhBRVZ5Y205eUlDZ2xaQ2s2SUhWdVlXSnNaU0IwYnlCa1pYUmxjbTFwYm1VZ1ptbHNaU0JzWlc1bmRHZ3VBRTFoZEdOb2FXNW5JR052Ym1acFpHVnVZMlVnWTNWMGIyWm1JSFpoYkhWbElHNXZkQ0J5WldGamFHVmtMZ0JCYzNObGNuUnBiMjRnWUhrZ1BqMGdiVTFwYmxsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JwYldGblpTNTBlWEJsS0NrZ1BUMGdTVTFCUjBWZlZVbE9WRGhnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnpkRzl5WlM1emFYcGxLQ2tnUFQwZ2NHOXBiblJ6TG5OcGVtVW9LV0FnWm1GcGJHVmtJR2x1SUFBbGN5VnpDZ0JFYVhOMGIzSjBhVzl1SUdaaFkzUnZjaUE5SUNWbUlDVm1JQ1ZtSUNWbUNnQkZjbkp2Y2lBM09pQnBZM0JIWlhSSmJtbDBXSGN5V0dNS0FFVjRkSEpoWTNSbFpDQm1aV0YwZFhKbGN5QTlJQ1UzWkZ0d2FYaGxiRjBLQUVWeWNtOXlJR2xqY0RKSFpYUlVVd29BUm1Gc2JHbHVaeUJpWVdOcklIUnZJSEpsWVdScGJtY2dKeVZ6SlhNbklHbHVJRUZTVkc5dmJFdHBkQ0IyTkM1NElHWnZjbTFoZEM0S0FFVnljbTl5SUdsdUlHOXdaVzVwYm1jZ0p5VnpKeUJwYmlCNmFYQm1hV3hsTGdvQVJYSnliM0lnY21WaFpHbHVaeUJLVUVWSElHWnBiR1V1Q2dCRmNuSnZjaUIzYUdsc1pTQmhaR1JwYm1jZ2NtVm1aWEpsYm1ObElHUmhkR0VnYzJWME9pQnJjRzFOWlhKblpWSmxaa1JoZEdGVFpYUW9LU0JtWVdsc1pXUXVDZ0JGY25KdmNpQnpZWFpwYm1jZ1ptVmhkSFZ5WlNCelpYUTZJR1Z5Y205eUlIZHlhWFJwYm1jZ1pHRjBZUzRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BQUFBQUFBQXBEQUFBV2c0QUFMTVFBQURFRWdBQVJ4WUFBR052Ykc5eU9pQWpNREF3TURBd095QmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpabVpqWXpBd095QmliM0prWlhJdGNtRmthWFZ6T2lBMGNIZzdJSEJoWkdScGJtYzZJREp3ZUFCYkpYTmRJRnNsYzEwZ1d5VnpYU0E2SUNWek9pQWxaaUJ0Y3dCYkpYTmRJRnNsYzEwZ1d5VnpYU0E2SUVadmRXNWtJQ1ZrSUdabFlYUjFjbVZ6QUVsdFlXZGxJRzExYzNRZ1ltVWdaM0poZVhOallXeGxBSGtnYjNWMElHOW1JSEpoYm1kbEFFWmxZWFIxY21VZ2MzUnZjbVVnYUdGeklHNXZkQ0JpWldWdUlHRnNiRzlqWVhSbFpBQWxaQUIzWWdCQlVsOVFTVmhGVEY5R1QxSk5RVlJmUVZKSFFnQk5ZWGhwYlhWdElHRnNiRzkzWVdKc1pTQndiM05sSUdWeWNtOXlJR1Y0WTJWbFpHVmtMZ0JCYzNObGNuUnBiMjRnWUhOMFpYQWdQajBnZDJsa2RHaGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCd2VYSmhiV2xrTFQ1dWRXMVBZM1JoZG1WektDa2dQaUF3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjM0pqSUNFOUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNElEd2diVWR5WVdScFpXNTBjMXR2WTNSaGRtVXFiVTUxYlZOallXeGxjMUJsY2s5amRHRjJaU3R6WTJGc1pWMHVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUJGY25KdmNpQnBiaUJ2Y0dWdWFXNW5JQ2NsY3ljZ1ptOXlJSEpsWVdScGJtY0tBQ0JHYVd4MFpYSmxaQ0JtWldGMGRYSmxjeUE5SUNVM1pGdHdhWGhsYkYwS0FFeGhZbVZzYVc1bklIUm9jbVZ6YUc5c1pDQnRiMlJsSUhObGRDQjBieUFsY3k0S0FFVnljbTl5SUhKbFlXUnBibWNnU2xCRlJ5Qm1hV3hsSUdobFlXUmxjaTRLQUVWeWNtOXlPaUJ6ZFhCd2JHbGxaQ0JtYVd4bElHUnZaWE1nYm05MElHRndjR1ZoY2lCMGJ5QmlaU0JoYmlCQlVsUnZiMnhMYVhRZ1kyRnRaWEpoSUhCaGNtRnRaWFJsY2lCbWFXeGxMZ29BYTNCdFJHVnNaWFJsVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUhKbFprUmhkR0ZUWlhSUWRISXhMM0psWmtSaGRHRlRaWFJRZEhJeUxnb0FRMkZ1SjNRZ2NtVmhaQ0JLVUVWSElHWnBiR1VnSnlWekp3b0FRVkpmVUVsWVJVeGZSazlTVFVGVVh6SjJkWGtBVUhseVlXMXBaQ0JrYjJWeklHNXZkQ0JqYjI1MFlXbHVJR0Z1ZVNCc1pYWmxiSE1BVTNSbGNDQnRkWE4wSUdKbElHZHlaV0YwWlhJZ2RHaGhiaUJ2Y2lCbGNYVmhiQ0IwYUdVZ2QybGtkR2dBZUNCdGRYTjBJR0psSUd4bGMzTWdkR2hoYmlCMGFHVWdhVzFoWjJVZ2QybGtkR2dBVTI5MWNtTmxJR2x6SUU1VlRFd0FSWEp5YjNJZ0tDVmtLVG9nZFc1aFlteGxJSFJ2SUhKbFlXUWdabkp2YlNCbWFXeGxMZ0JOZFd4MGFTMXRZWEpyWlhJZ2NHOXpaU0JsY25KdmNpQjJZV3gxWlNCbGVHTmxaV1JsWkM0QVFYTnpaWEowYVc5dUlHQjVJRHdnYlUxaGVGbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCcGJXRm5aUzVqYUdGdWJtVnNjeWdwSUQwOUlERmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdWRXMWZjRzlwYm5SeklEMDlJSEJ2YVc1MGN5NXphWHBsS0NsZ0lHWmhhV3hsWkNCcGJpQUFKVGN1TldZZ0FDQkpUa1pQSUNBQWEzQnRVMlYwVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUd0d2JVaGhibVJzWlM5eVpXWkVZWFJoVTJWMExnb0FhM0J0UkdWc1pYUmxVbVZtUkdGMFlWTmxkQ2dwT2lCT1ZVeE1JSEpsWmtSaGRHRlRaWFJRZEhJdUNnQkZjbkp2Y2pvZ2RXNWhZbXhsSUhSdklHOXdaVzRnWm1sc1pTQW5KWE1uSUdadmNpQjNjbWwwYVc1bkxnb0FSWEp5YjNJNklGVnVjM1Z3Y0c5eWRHVmtJSEJwZUdWc0lHWnZjbTFoZENBb0pXUXBJSEpsY1hWbGMzUmxaQzRLQUVWeWNtOXlJR2x1SUhKbFlXUnBibWNnSnlWekp5NEtBQW9qSXlNZ1UzVnlabUZqWlNCT2J5NGxaQ0FqSXlNS0FFSjFhV3hrSUVsdVpHVjRBRUZTWDFCSldFVk1YMFpQVWsxQlZGOTVkWFp6QUNWekFFbHRZV2RsSUcxMWMzUWdhR0YyWlNBeElHTm9ZVzV1Wld3QVUyaHZkV3hrSUdKbElITmhiV1VnYzJsNlpRQlNaV3BsWTNSbFpDQm1jbVZ4ZFdWdWRHeDVJRzFwYzNKbFkyOW5ibWx6WldRZ2JXRjBjbWw0SUcxaGNtdGxjaTRBUVhOelpYSjBhVzl1SUdCaGJtZHNaU0ErSUMxUVNXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdOb1lXNXVaV3h6SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhOeVkxOTNhV1IwYUNBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNUlENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmtlVzVoYldsalgyTmhjM1E4WTI5dWMzUWdRbWx1YjIxcFlXeFFlWEpoYldsa016Sm1LajRvY0hseVlXMXBaQ2xnSUdaaGFXeGxaQ0JwYmlBQVRXRjRJR1psWVhSMWNtVWdQU0FsWkFvQWEzQnRVMkYyWlZKbFprUmhkR0ZUWlhRb0tUb2dUbFZNVENCbWFXeGxibUZ0WlM5eVpXWkVZWFJoVTJWMExnb0FhM0J0VTJWMFVtVm1SR0YwWVZObGRDZ3BPaUJ5WldaRVlYUmhVMlYwTGdvQVJYSnliM0k2SUhOMWNIQnNhV1ZrSUdKMVptWmxjaUJrYjJWeklHNXZkQ0JoY0hCbFlYSWdkRzhnWW1VZ1FWSlViMjlzUzJsMElHTmhiV1Z5WVNCd1lYSmhiV1YwWlhKekxnb0FSWEp5YjNJZ2FXNGdkM0pwZEdsdVp5QW5KWE1uSUdsdUlIUm9aU0I2YVhCbWFXeGxMZ29BUlhKeWIzSWdjMkYyYVc1bklHbHRZV2RsSUhObGREb2daWEp5YjNJZ2QzSnBkR2x1WnlCa1lYUmhMZ29BVG5WdFltVnlJRzltSUdOb1lXNXVaV3h6SUdOaGJtNXZkQ0JpWlNCNlpYSnZBSGtnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJYYVdSMGFDQnRkWE4wSUdKbElIQnZjMmwwYVhabEFHRnVaMnhsSUc5MWRDQnZaaUJ5WVc1blpRQlBibXg1SUdKcGJtOXRhV0ZzSUhCNWNtRnRhV1FnYVhNZ2MzVndjRzl5ZEdWa0FFRlNYMUJKV0VWTVgwWlBVazFCVkY5U1IwSmZOVFkxQUVGemMyVnlkR2x2YmlCZ2JWQjVjbUZ0YVdRdWMybDZaU2dwSUQwOUlHMU9kVzFQWTNSaGRtVnpLbTFPZFcxVFkyRnNaWE5RWlhKUFkzUmhkbVZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQndlWEpoYldsa1lDQm1ZV2xzWldRZ2FXNGdBRVpwWld4a0xXOW1MWFpwWlhjZ2RtVnlkR2xqWVd3Z1BTQWxMakZtTENCb2IzSnBlbTl1ZEdGc0lEMGdKUzR4WmlCa1pXZHlaV1Z6TENCaGMzQmxZM1FnY21GMGFXOGdQU0FsTGpObUNnQWxNMlE2SUNnbE0yUXNKVE5rS1NBNklDVm1JRzFwYmowbFppQnRZWGc5SldZc0lITmtQU1ZtQ2dBZ0lGSmxZV1FnU1cxaFoyVlRaWFF1Q2dCRmNuSnZjaUJ6WVhacGJtY2dTMUJOSUdSaGRHRTZJSFZ1WVdKc1pTQjBieUJ2Y0dWdUlHWnBiR1VnSnlWekpYTWxjeWNnWm05eUlIZHlhWFJwYm1jdUNnQkZjbkp2Y2lBb0pXUXBPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQmxlSFJsY201aGJDQndZWEpoYldWMFpYSnpJR1pwYkdVZ0lpVnpJaUJtYjNJZ2QzSnBkR2x1Wnk0S0FFVnljbTl5SUdsdUlHTnNiM05wYm1jZ0pYTWdhVzRnZEdobElIcHBjR1pwYkdVdUNnQkJkWFJ2SUhSb2NtVnphRzlzWkNBb1luSmhZMnRsZENrZ2JXRnlhMlZ5SUdOdmRXNTBjeUF0V3lVelpEb2dKVE5rWFNCYkpUTmtPaUFsTTJSZElGc2xNMlE2SUNVelpGMHJMZ29BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JRZVhKaGJXbGtJR2hoY3lCdWIzUWdZbVZsYmlCaGJHeHZZMkYwWldRZ2VXVjBBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZiV0YwWTJobGNuTXZkbWx6ZFdGc1gyUmhkR0ZpWVhObExtZ0FRVkpmVUVsWVJVeGZSazlTVFVGVVgxSkhRa0ZmTlRVMU1RQXVBRUZ6YzJWeWRHbHZiaUJnWVc1bmJHVWdQRDBnVUVsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JrTG5SNWNHVW9LU0E5UFNCSlRVRkhSVjlHTXpKZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J6Y21OZmFHVnBaMmgwSUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUc5amRHRjJaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZVNBOElHMUhjbUZrYVdWdWRITmJiMk4wWVhabEttMU9kVzFUWTJGc1pYTlFaWEpQWTNSaGRtVXJjMk5oYkdWZExtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYlVSaGRHRXVaMlYwS0NsZ0lHWmhhV3hsWkNCcGJpQUFjR0ZuWlNBbFpDd2dhVzFoWjJVZ2JuVnRJQ1ZrTENCd2IybHVkSE1nTFNBbFpBb0FSWEp5YjNJZ0tDVmtLVG9nZFc1aFlteGxJSFJ2SUc5d1pXNGdaWGgwWlhKdVlXd2djR0Z5WVcxbGRHVnljeUJtYVd4bElDSWxjeUlnWm05eUlISmxZV1JwYm1jdUNnQkJkWFJ2SUhSb2NtVnphRzlzWkNBb1luSmhZMnRsZENrZ1lXUnFkWE4wWldRZ2RHaHlaWE5vYjJ4a0lIUnZJQ1ZrTGdvQVJYSnliM0lnYjNCbGJtbHVaeUJtYVd4bElDY2xjeTVwYzJWMEp5NEtBRVZ5Y205eUlHbHVJR05zYjNOcGJtY2dKeVZ6Snk0S0FDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExRb0FlU0J0ZFhOMElHSmxJR3hsYzNNZ2RHaGhiaUIwYUdVZ2FXMWhaMlVnYUdWcFoyaDBBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMmRoZFhOemFXRnVYM05qWVd4bFgzTndZV05sWDNCNWNtRnRhV1F1YUFCSVpXbG5hSFFnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJQYm14NUlFWXpNaUJwYldGblpYTWdjM1Z3Y0c5eWRHVmtBRVJoZEdFZ2NHOXBiblJsY2lCcGN5Qk9WVXhNQUVGU1gxQkpXRVZNWDBaUFVrMUJWRjlTUjBKQlh6UTBORFFBUVhOelpYSjBhVzl1SUdCelkyRnNaU0ErUFNCdFRXbHVVMk5oYkdWZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JwYldGblpTNTNhV1IwYUNncElEMDlJRzFRZVhKaGJXbGtXekJkTG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQUlHeHBibVVnQUNVelpDd2dKVE5rT2lCdFlYaGZjMmx0SUQwZ0pXWUtBRnNsSUM0elppQWxJQzR6WmlBbElDNHpabDBnV3lVZ05pNHhabDBLQUVWeWNtOXlJQ2dsWkNrNklIVnVZV0pzWlNCMGJ5QnZjR1Z1SUc5d2RHbGpZV3dnY0dGeVlXMWxkR1Z5Y3lCbWFXeGxJQ0lsY3lJZ1ptOXlJSGR5YVhScGJtY3VDZ0JyY0cxVFpYUlNaV1pFWVhSaFUyVjBSbWxzWlNncE9pQk9WVXhNSUd0d2JVaGhibVJzWlM5bWFXeGxibUZ0WlM0S0FDQWdJQ0JsYm1RdUNnQkJkWFJ2SUhSb2NtVnphRzlzWkNBb0pYTXBJR0ZrYW5WemRHVmtJSFJvY21WemFHOXNaQ0IwYnlBbFpDNEtBRUZTWDFCSldFVk1YMFpQVWsxQlZGODBNakIyQUcxbFpHbGhiZ0JQWTNSaGRtVWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQnpZMkZzWlNCdmRYUWdiMllnY21GdVoyVUFTVzFoWjJVZ2IyWWdkM0p2Ym1jZ2MybDZaU0JtYjNJZ2NIbHlZVzFwWkFCQmMzTmxjblJwYjI0Z1lHbHRNUzUwZVhCbEtDa2dQVDBnU1UxQlIwVmZSak15WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdaeTVqYUdGdWJtVnNjeWdwSUQwOUlESmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCemNtTmZjM1JsY0NBK0lEQmdJR1poYVd4bFpDQnBiaUFBSlRjdU5HWWdBRG9nQUNBZ1VtVmhaQ0JHWldGMGRYSmxVMlYwTGdvQVEyRnVibTkwSUdacGJtUWdkR2hsSUhCaFoyVWdabTl5SUhOcmFYQndhVzVuTGdvQVJYSnliM0lnS0NWa0tUb2dkVzVoWW14bElIUnZJRzl3Wlc0Z2IzQjBhV05oYkNCd1lYSmhiV1YwWlhKeklHWnBiR1VnSWlWeklpQm1iM0lnY21WaFpHbHVaeTRLQUVWeWNtOXlJSE5oZG1sdVp5QkxVRTBnWkdGMFlUb2daWEp5YjNJZ2QzSnBkR2x1WnlCa1lYUmhMZ29BVDNSemRRQkJVbDlRU1ZoRlRGOUdUMUpOUVZSZk5ESXdaZ0JUZEdWd0lHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVNXNTJZV3hwWkNCcGJXRm5aU0IwZVhCbEFGQjVjbUZ0YVdRZ2FYTWdUbFZNVEFCT2RXMWlaWElnYjJZZ1kyaGhibTVsYkhNZ2MyaHZkV3hrSUdKbElESUFRWE56WlhKMGFXOXVJR0J2WTNSaGRtVWdQQ0J0VG5WdFQyTjBZWFpsYzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSE5qWVd4bElEd2diVTFoZUZOallXeGxZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FXMHlMblI1Y0dVb0tTQTlQU0JKVFVGSFJWOUdNekpnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiV0ZuWlM1b1pXbG5hSFFvS1NBOVBTQnRVSGx5WVcxcFpGc3dYUzVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFBbE0yUXNJQ1V6WkRvZ2JXRjRYM05wYlNBOUlDVm1MQ0FvYldGNExHMXBiaWtnUFNBbFppd2dKV1lzSUhOa0lEMGdKV1lLQUd0d2JVeHZZV1JTWldaRVlYUmhVMlYwS0NrNklFNVZURXdnWm1sc1pXNWhiV1V2Y21WbVJHRjBZVk5sZEZCMGNpNEtBR3R3YlUxaGRHTm9hVzVuS0NrNklFNVZURXdnYTNCdFNHRnVaR3hsTDJsdVNXMWhaMlZNZFcxaExnb0FSWEp5YjNJZ2IzQmxibWx1WnlCbWFXeGxJQ2NsY3k1bWMyVjBKeTRLQUU5amRHRjJaU0J0ZFhOMElHSmxJR3hsYzNNZ2RHaGhiaUJ1ZFcxaVpYSWdiMllnYjJOMFlYWmxjd0JCVWw5UVNWaEZURjlHVDFKTlFWUmZUbFl5TVFCQmMzTmxjblJwYjI0Z1lHUmxkR1ZqZEc5eVlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWkhOMExuUjVjR1VvS1NBOVBTQkpUVUZIUlY5R016SmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCa0xtTm9ZVzV1Wld4ektDa2dQVDBnTVdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZRzFoZUY5b1pXbG5hSFFnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWkhOMFgzZHBaSFJvSUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhOcGVtVWdQaUF3WUNCbVlXbHNaV1FnYVc0Z0FGQmhaMlZiSldSZElDQndjbVU2SlROa0xDQmhablE2SlROa0xDQmxjbkp2Y2lBOUlDVm1DZ0FnSUZKbFlXUWdUV0Z5YTJWeVUyVjBMZ29BUlhKeWIzSWdiRzloWkdsdVp5QkxVRTBnWkdGMFlUb2dkVzVoWW14bElIUnZJRzl3Wlc0Z1ptbHNaU0FuSlhNbGN5VnpKeUJtYjNJZ2NtVmhaR2x1Wnk0S0FFUmxjM1JwYm1GMGFXOXVJR2x0WVdkbElITm9iM1ZzWkNCaVpTQmhJR1pzYjJGMEFHMXlhd0J6YVhwbElHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVRXRjRhVzExYlNCaWFXNGdjMmh2ZFd4a0lHSmxJSEJ2YzJsMGFYWmxBRTl1YkhrZ2MybHVaMnhsSUdOb1lXNXVaV3dnYVcxaFoyVnpJSE4xY0hCdmNuUmxaQUJFWlhSbFkzUnZjaUJwY3lCT1ZVeE1BRUZ6YzJWeWRHbHZiaUJnWkhOMFgzTjBaWEFnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYzJOaGJHVWdQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQktVRVZISUdacGJHVWdhR0Z6SUhWdWMzVndjRzl5ZEdWa0lDVmtMV052YlhCdmJtVnVkQ0J3YVhobGJITUtBRVZ5Y205eUlHeHZZV1JwYm1jZ1MxQk5JR1JoZEdFNklHVnljbTl5SUhKbFlXUnBibWNnWkdGMFlTNEtBR0Z5VlhScGJFZGxkRkJwZUdWc1JtOXliV0YwVG1GdFpUb2dSWEp5YjNJc0lIVnVjbVZqYjJkdWFYTmxaQ0J3YVhobGJDQm1iM0p0WVhRZ0tDVmtLUzRLQUZOallXeGxJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFWVzVyYm05M2JpQnBiV0ZuWlNCMGVYQmxBRUZ6YzJWeWRHbHZiaUJnYUdsemRDQWhQU0JPVlV4TVlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0hOeVkxOTNhV1IwYUNVeUtTQTlQU0F4WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdhVzB4TG1Ob1lXNXVaV3h6S0NrZ1BUMGdNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHMVNaV1pKYldGblpWZHBaSFJvSUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG1sdFlXZGxjeWdwTG5OcGVtVW9LU0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFUM1YwSUc5bUlHMWxiVzl5ZVM0S0FHdHdiVU5vWVc1blpWQmhaMlZPYjA5bVVtVm1SR0YwWVZObGRDZ3BPaUJPVlV4TUlISmxaa1JoZEdGVFpYUXVDZ0JGY25KdmNpQnZjR1Z1YVc1bklHWnBiR1VnSnlWekxtMXlheWN1Q2dCUWVYSmhiV2xrSUdseklHVnRjSFI1QUNVbEpUQXllQUIyWldOMGIzSUFMM055WXk5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOWtaWFJsWTNSdmNuTXZiM0pwWlc1MFlYUnBiMjVmWVhOemFXZHViV1Z1ZEM1b0FDVm1JQ1ZtSUNWbUlDVm1BSGRwWkhSb0lHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVZXNXpkWEJ3YjNKMFpXUWdhVzFoWjJVZ2RIbHdaUUJUYjNWeVkyVWdkMmxrZEdnZ2JYVnpkQ0JpWlNCdlpHUUFRWE56WlhKMGFXOXVJR0J6WTJGc1pTQThJRzFPZFcxVFkyRnNaWE5RWlhKUFkzUmhkbVZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiVEl1WTJoaGJtNWxiSE1vS1NBOVBTQXhZQ0JtWVdsc1pXUWdhVzRnQUM5d2NtOWpMM05sYkdZdlpYaGxBRk5qWVd4bElHMTFjM1FnWW1VZ2JHVnpjeUIwYUdGdUlHNTFiV0psY2lCdlppQnpZMkZzWlNCd1pYSWdiMk4wWVhabEFFaHBjM1J2WjNKaGJTQndiMmx1ZEdWeUlHbHpJRTVWVEV3QVFYTnpaWEowYVc5dUlHQW9ZMmgxYm10ZmMybDZaU1V5S1QwOU1HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUcxU1pXWkpiV0ZuWlVobGFXZG9kQ0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J3ZVhKaGJXbGtMVDVwYldGblpYTW9LVnN3WFM1M2FXUjBhQ2dwSUQwOUlHUmxkR1ZqZEc5eUxUNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWkM1M2FXUjBhQ2dwSUQwOUlHbHRNaTUzYVdSMGFDZ3BZQ0JtWVdsc1pXUWdhVzRnQUZSeVlXNXpabTl5YldGMGFXOXVJRzFoZEhKcGVDQnlaV0ZrSUdWeWNtOXlJU0VLQUhabFkzUnZjZ0JKYldGblpYTWdiWFZ6ZENCb1lYWmxJSFJvWlNCellXMWxJSGRwWkhSb0FGQjVjbUZ0YVdRZ1lXNWtJR1JsZEdWamRHOXlJSE5wZW1VZ2JXbHpiV0YwWTJnQWFuQm5BRlZ1ZEdWemRHVmtJR0psYUdGMmFXOXlJR1p2Y2lCdlpHUWdZMmgxYm1zZ2MybDZaUUJvWldsbmFIUWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQlBZM1JoZG1VZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnS0daaWFXNHJNQzQxWmlrZ1BpQXdJQ1ltSUNobVltbHVMVEF1TldZcElEd2diblZ0WDJKcGJuTmdJR1poYVd4bFpDQnBiaUFBSlhNbGN3b0FWMmxrZEdnZ2FYTWdlbVZ5YndBdmMzSmpMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDIxaGRHTm9aWEp6TDJodmRXZG9YM05wYldsc1lYSnBkSGxmZG05MGFXNW5MbWdBUkdWamFXMWhiQ0JpYVc0Z2NHOXphWFJwYjI0Z2FXNWtaWGdnYjNWMElHOW1JSEpoYm1kbEFGTmpZV3hsSUc5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZSEI1Y21GdGFXUXRQbWx0WVdkbGN5Z3BXekJkTG1obGFXZG9kQ2dwSUQwOUlHUmxkR1ZqZEc5eUxUNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdRdWFHVnBaMmgwS0NrZ1BUMGdhVzB5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFbHRZV2RsY3lCdGRYTjBJR2hoZG1VZ2RHaGxJSE5oYldVZ2FHVnBaMmgwQUM4dUxpOXphR0Z5WlM4bGN3QklaV2xuYUhRZ2FYTWdlbVZ5YndCQmMzTmxjblJwYjI0Z1lDaHBiblFwYzNSa09qcG1iRzl2Y2loNEtTQTlQU0FvYVc1MEtYaGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaGMzTnBaMjV0Wlc1MExuTnBlbVVvS1NBOVBTQnVkVzFmYVc1a2FXTmxjMkFnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHVaR1Y0SUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdFlXZHVhWFIxWkdVZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCVGRHVndJR2x6SUhwbGNtOEFMM055WXk5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOXRZWFJqYUdWeWN5OWlhVzVoY25sZmFHbGxjbUZ5WTJocFkyRnNYMk5zZFhOMFpYSnBibWN1YUFBdmMzSmpMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJSbGRHVmpkRzl5Y3k5cGJuUmxjbkJ2YkdGMFpTNW9BRTFoWjI1cGRIVmtaU0JqWVc1dWIzUWdZbVVnYm1WbllYUnBkbVVBYVc1a1pYZ2diM1YwSUc5bUlISmhibWRsQUVoUFRVVUFRWE56WlhKMGFXOXVJR0JwYlRFdWQybGtkR2dvS1NBOVBTQnBiVEl1ZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTnBaMjV0Wlc1MElITnBlbVVnZDNKdmJtY0FMM0J5YjJNdmMyVnNaaTlqYldSc2FXNWxBR1pzYjI5eUtDa2dZVzVrSUdOaGMzUWdibTkwSUhSb1pTQnpZVzFsQUVGemMyVnlkR2x2YmlCZ2JuVnRYMkpwYm5NZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHSnBibGdnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNocFBqNHhLU0E4SUhOMFpEbzZZMlZwYkNnb2MzSmpYMmhsYVdkb2RDMHhLUzh5TG1ZcFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYVcweExtaGxhV2RvZENncElEMDlJR2x0TWk1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQkpibVJsZUNCcGN5QnZkWFFnYjJZZ1ltOTFibVJ6QUU1MWJXSmxjaUJpYVc1eklHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVltbHVXQ0J2ZFhRZ2IyWWdjbUZ1WjJVQVJHOUhJRkI1Y21GdGFXUUFjbUlBUVhOelpYSjBhVzl1SUdBb2FXNTBLWE4wWkRvNlpteHZiM0lvZVNrZ1BUMGdLR2x1ZENsNVlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWVhOemFXZHViV1Z1ZEZ0cFhTQWhQU0F0TVdBZ1ptRnBiR1ZrSUdsdUlBQk9iMjR0YldGNElITjFjSEJ5WlhOemFXOXVBRUZ6YzJsbmJtMWxiblFnYVhNZ2FXNTJZV3hwWkFCQmMzTmxjblJwYjI0Z1lIbHdJRDQ5SURBZ0ppWWdlWEFnUENCb1pXbG5hSFJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmlhVzVZSUR3Z2JVNTFiVmhDYVc1ellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYVcxaFoyVXVkSGx3WlNncElEMDlJRWxOUVVkRlgxVkpUbFE0WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdkekVnUGowZ01HQWdabUZwYkdWa0lHbHVJQUFsY3pvZ0pYTUtBSGx3SUc5MWRDQnZaaUJpYjNWdVpITUFVM1ZpY0dsNFpXd0FkekVnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJWYm1GaWJHVWdkRzhnWkdWMFpYSnRhVzVsSUhCeWIyTmxjM01nYm1GdFpRQlBibXg1SUdkeVlYa2djMk5oYkdVZ2FXMWhaMlZ6SUdGeVpTQnpkWEJ3YjNKMFpXUUFRWE56WlhKMGFXOXVJR0JoYzNOcFoyNXRaVzUwVzJsZElEd2diblZ0WDJsdVpHbGpaWE5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmlhVzVaSUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBY0hKMWJtVkdaV0YwZFhKbGN3QWxjeVZ6QUVGemMybG5ibTFsYm5RZ2IzVjBJRzltSUhKaGJtZGxBR0pwYmxrZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnZVhCZmNHeDFjMTh4SUQ0OUlEQWdKaVlnZVhCZmNHeDFjMTh4SUR3Z2FHVnBaMmgwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiMk4wWVhabElEd2diVTUxYlU5amRHRjJaWE5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjNNaUErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRVpwYm1RZ1QzSnBaVzUwWVhScGIyNXpBSGx3WDNCc2RYTmZNU0J2ZFhRZ2IyWWdZbTkxYm1SekFDOXpjbU12WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwyZGhkWE56YVdGdVgzTmpZV3hsWDNOd1lXTmxYM0I1Y21GdGFXUXVhQUIzTWlCdGRYTjBJR0psSUhCdmMybDBhWFpsQUM5MllYSXZZMkZqYUdVQVFYTnpaWEowYVc5dUlHQmlhVzVaSUR3Z2JVNTFiVmxDYVc1ellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYVc1a2FXTmxjMXRoYzNOcFoyNXRaVzUwVzJsZFhTQThJRzUxYlY5bVpXRjBkWEpsYzJBZ1ptRnBiR1ZrSUdsdUlBQXZMbU5oWTJobEFFOWpkR0YyWlNCdmRYUWdiMllnY21GdVoyVUFRWE56WlhKMGFXOXVJR0JpTVNBK1BTQXdJQ1ltSUdJeElEd2diblZ0WDJKcGJuTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNGNDQStQU0F3SUNZbUlIaHdJRHdnZDJsa2RHaGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaWFXNUJibWRzWlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FYUXRQbk5sWTI5dVpDNXphWHBsS0NrZ0lUMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHRNQzVvWldsbmFIUW9LU0E5UFNCcGJURXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBU0dWcFoyaDBJR2x6SUdsdVkyOXVjMmx6ZEdWdWRBQjRjQ0J2ZFhRZ2IyWWdZbTkxYm1SekFDVnpMeVZ6QUVOc2RYTjBaWElnYlhWemRDQm9ZWFpsSUdGMGJHVmhjMlYwSURFZ1ptVmhkSFZ5WlFCaU1TQmlhVzRnYVc1a1pYZ2diM1YwSUc5bUlISmhibWRsQUdKcGJrRnVaMnhsSUc5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZSE5qWVd4bElEd2diVTUxYlZOallXeGxjMUJsY2s5amRHRjJaV0FnWm1GcGJHVmtJR2x1SUFCVFkyRnNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQUwzWmhjaTlzYVdJQVFYTnpaWEowYVc5dUlHQmlNaUErUFNBd0lDWW1JR0l5SUR3Z2JuVnRYMkpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JpYVc1QmJtZHNaU0E4SUcxT2RXMUJibWRzWlVKcGJuTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNGNGOXdiSFZ6WHpFZ1BqMGdNQ0FtSmlCNGNGOXdiSFZ6WHpFZ1BDQjNhV1IwYUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR2x0TUM1b1pXbG5hSFFvS1NBOVBTQnBiVEl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnRTeUE5UFNCdFEyVnVkR1Z5Y3k1emFYcGxLQ2xnSUdaaGFXeGxaQ0JwYmlBQWVIQmZjR3gxYzE4eElHOTFkQ0J2WmlCaWIzVnVaSE1BTDNOeVl5OWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTl0WVhSamFHVnljeTlyYldWa2IybGtjeTVvQUM4dVkyOXVabWxuQUdJeUlHSnBiaUJwYm1SbGVDQnZkWFFnYjJZZ2NtRnVaMlVBUVhOelpYSjBhVzl1SUdCaWFXNVRZMkZzWlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ0tHbHRNUzVvWldsbmFIUW9LVDQrTVNrZ1BUMGdhVzB5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FHc2djMmh2ZFd4a0lHMWhkR05vSUhSb1pTQnVkVzFpWlhJZ2IyWWdZMngxYzNSbGNpQmpaVzUwWlhKekFIWmxZM1J2Y2dCaWFXNVRZMkZzWlNCdmRYUWdiMllnY21GdVoyVUFWRTFRUkVsU0FFRnpjMlZ5ZEdsdmJpQmdkekFnUGowZ01DQW1KaUIzTUNBOFBTQXhMakF3TURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvYVcwd0xtaGxhV2RvZENncFBqNHhLU0E5UFNCcGJURXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBZG1WamRHOXlBQzkwYlhBQVQzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnWW1sdVUyTmhiR1VnUENCdFRuVnRVMk5oYkdWQ2FXNXpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2JuVnRYMlpsWVhSMWNtVnpJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2hwYlRBdWFHVnBaMmgwS0NrK1BqRXBJRDA5SUdsdE1pNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJGY25KdmNpQnNiMjlyYVc1bklHWnZjaUJ5WlhOdmRYSmpaWE1nWkdseVpXTjBiM0o1SUhCaGRHZ0FUblZ0WW1WeUlHOW1JR1psWVhSMWNtVnpJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFRWE56WlhKMGFXOXVJR0J5YjNjZ1BDQnRTR1ZwWjJoMFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYlVKMVkydGxkSE11YzJsNlpTZ3BJRDA5SUcxT2RXMUNkV05yWlhSeldHQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhjeElENDlJREFnSmlZZ2R6RWdQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FXNWtaWGdnUEQwZ0tHSnBibGdnS3lCaWFXNVpLbTFPZFcxWVFtbHVjeUFySUdKcGJrRnVaMnhsS20xT2RXMVlRbWx1Y3lwdFRuVnRXVUpwYm5NZ0t5QmlhVzVUWTJGc1pTcHRUblZ0V0VKcGJuTXFiVTUxYlZsQ2FXNXpLbTFPZFcxQmJtZHNaVUpwYm5NcFlDQm1ZV2xzWldRZ2FXNGdBRVZ5Y205eUlHTnlaV0YwYVc1bklISmxjMjkxY21ObGN5QmthWEpsWTNSdmNua2djR0YwYUFBdmMzSmpMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJaeVlXMWxkMjl5YXk5cGJXRm5aUzVvQUVKMVkydGxkSE1nWVhKbElHNXZkQ0JoYkd4dlkyRjBaV1FBUVhOelpYSjBhVzl1SUdCdWRXMWZhVzVrYVdObGN5QThQU0J1ZFcxZlptVmhkSFZ5WlhOZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTWlBK1BTQXdJQ1ltSUhjeUlEdzlJREV1TURBd01XQWdabUZwYkdWa0lHbHVJQUJOYjNKbElHbHVaR2xqWlhNZ2RHaGhiaUJtWldGMGRYSmxjd0J5YjNjZ2IzVjBJRzltSUdKdmRXNWtjd0IyWldOMGIzSUFRWE56WlhKMGFXOXVJR0J0UW5WamEyVjBjMXN3WFM1emFYcGxLQ2tnUFQwZ2JVNTFiVUoxWTJ0bGRITlpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2R6TWdQajBnTUNBbUppQjNNeUE4UFNBeExqQXdNREZnSUdaaGFXeGxaQ0JwYmlBQVJYSnliM0k2SUZWdVlXSnNaU0IwYnlCamFHRnVaMlVnZDI5eWEybHVaeUJrYVhKbFkzUnZjbmtnZEc4Z0p5VnpKeTRLQUVGemMyVnlkR2x2YmlCZ2JVWmxZWFIxY21WUWIybHVkSE11YzJsNlpTZ3BJRHc5SUcxTllYaE9kVzFHWldGMGRYSmxVRzlwYm5SellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYm5WdFgybHVaR2xqWlhNZ1BqMGdiVXRnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9kekFyZHpFcmR6SXJkek1wSUR3OUlERXVNREF3TVdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZRzRnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRnNsSUM0elppQWxJQzR6WmlBbElDNHpabDBnV3lVZ05pNHhabDBLQUFBQUFBTUFBQUFEQUFBQUJBQUFBQVFBQUFBRUFBQUFBUUFBQUFRQUFBQUNBQUFBQWdBQUFBSUFBQUFDQUFBQUFnQUFBQUVBQUFBQkFBQUFBUUFBQUVScGMzUnZjblJwYjI0Z1ptRmpkRzl5SUQwZ1NVNVdRVXhKUkNCdmNpQlZUa3RPVDFkT0lHWnZjbTFoZEFBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExRQUFBQUFFQUFBQWlBQUFBQVVBQUFDUUFBQUFCZ0FBQUpnQUFBQUpBQUFBc0FBQUFFZ0VBQURLQ1FBQTVRc0FBRDBPQUFBdWFYTmxkQUJ5WWdCT05uWnBjMmx2YmpJMVIyRjFjM05wWVc1VFkyRnNaVk53WVdObFVIbHlZVzFwWkVVQUFBRG9JUUVBaVVVQUFGUnZieUJ0WVc1NUlHWmxZWFIxY21VZ2NHOXBiblJ6QUU1dmRDQmxibTkxWjJnZ1ptVmhkSFZ5WlhNQUwzTnlZeTlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5MWRHbHNjeTl3WVhKMGFXRnNYM052Y25RdWFBQkJjM05sY25ScGIyNGdZSEJ2Y3lBOVBTQTJOalpnSUdaaGFXeGxaQ0JwYmlBQVFYTnphV2R1YldWdWRDQnphWHBsSUdseklHbHVZMjl5Y21WamRBQnVJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFVRzl6YVhScGIyNGdhWE1nYm05MElIZHBkR2hwYmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUd0d0xuTmpZV3hsSUR3Z2JVeGhjR3hoWTJsaGJsQjVjbUZ0YVdRdWJuVnRVMk5oYkdWUVpYSlBZM1JoZG1Vb0tXQWdabUZwYkdWa0lHbHVJQUJHWldGMGRYSmxJSEJ2YVc1MElITmpZV3hsSUdseklHOTFkQ0J2WmlCaWIzVnVaSE1BUVhOelpYSjBhVzl1SUdCdWRXMWZZMlZ1ZEdWeWN5QStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnJJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQlVhR1Z5WlNCdGRYTjBJR0psSUdGMElHeGxZWE4wSURFZ1kyVnVkR1Z5QUdzZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCQmMzTmxjblJwYjI0Z1lHdHdMbk5qYjNKbElEMDlJR3hoY0RFdVoyVjBQR1pzYjJGMFBpaDVLVnQ0WFdBZ1ptRnBiR1ZrSUdsdUlBQmJKWE5kSUZzbGMxMGdXeVZ6WFNBNklFWnZkVzVrSUNWa0lHWmxZWFIxY21WeklHbHVJSEYxWlhKNUFGTmpiM0psSUdseklHNXZkQ0JqYjI1emFYTjBaVzUwSUhkcGRHZ2dkR2hsSUVSdlJ5QnBiV0ZuWlFCR2FXNWtJRTFoZEdOb1pYTWdLREVwQUVGemMyVnlkR2x2YmlCZ1luVmphMlYwV3pCZExtWnBjbk4wSUQ0OUlHSjFZMnRsZEZ0dVhTNW1hWEp6ZEdBZ1ptRnBiR1ZrSUdsdUlBQnVkR2hmWld4bGJXVnVkQ0JtWVdsc1pXUUFTRzkxWjJnZ1ZtOTBhVzVuSUNneEtRQkdhVzVrSUVodmRXZG9JRTFoZEdOb1pYTWdLREVwQUVGemMyVnlkR2x2YmlCZ2IyTjBZWFpsSUR3Z2JVNTFiVTlqZEdGMlpYTmdJR1poYVd4bFpDQnBiaUFBTDNOeVl5OWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTlrWlhSbFkzUnZjbk12WjJGMWMzTnBZVzVmYzJOaGJHVmZjM0JoWTJWZmNIbHlZVzFwWkM1b0FFVnpkR2x0WVhSbElFaHZiVzluY21Gd2FIa2dLREVwQUU5amRHRjJaU0J2ZFhRZ2IyWWdjbUZ1WjJVQVJtbHVaQ0JKYm14cFpYSnpJQ2d4S1FCR2FXNWtJRTFoZEdOb1pYTWdLRElwQUVGemMyVnlkR2x2YmlCZ2MyTmhiR1VnUENCdFRuVnRVMk5oYkdWelVHVnlUMk4wWVhabFlDQm1ZV2xzWldRZ2FXNGdBRk5qWVd4bElHOTFkQ0J2WmlCeVlXNW5aUUJJYjNWbmFDQldiM1JwYm1jZ0tESXBBRVpwYm1RZ1NHOTFaMmdnVFdGMFkyaGxjeUFvTWlrQVFYTnpaWEowYVc5dUlHQnBibVJsZUNBOElHMUpiV0ZuWlhNdWMybDZaU2dwWUNCbVlXbHNaV1FnYVc0Z0FDOXpjbU12WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwwUnZSMTl6WTJGc1pWOXBiblpoY21saGJuUmZaR1YwWldOMGIzSXVhQUJGYzNScGJXRjBaU0JJYjIxdlozSmhjR2g1SUNneUtRQkpibVJsZUNCcGN5QnZkWFFnYjJZZ2NtRnVaMlVBUm1sdVpDQkpibXhwWlhKeklDZ3lLUUJCYzNObGNuUnBiMjRnWUhOallXeGxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JpWlhOMFgybHVaR1Y0SUNFOUlITjBaRG82Ym5WdFpYSnBZMTlzYVcxcGRITThjMmw2WlY5MFBqbzZiV0Y0S0NsZ0lHWmhhV3hsWkNCcGJpQUFMM055WXk5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOXRZWFJqYUdWeWN5OW1aV0YwZFhKbFgyMWhkR05vWlhJdGFXNXNhVzVsTG1nQVUyTmhiR1VnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJUWTJGc1pTQnRkWE4wSUdKbElHeGxjM01nZEdoaGJpQnVkVzFpWlhJZ2IyWWdjMk5oYkdVZ2NHVnlJRzlqZEdGMlpRQlRiMjFsZEdocGJtY2djM1J5WVc1blpRQkJjM05sY25ScGIyNGdZR3hoY0RBdWFHVnBaMmgwS0NrZ1BUMGdiR0Z3TVM1b1pXbG5hSFFvS1NBOVBTQnNZWEF5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiVTFoZEdOb1pYTXVjMmw2WlNncElEdzlJR1psWVhSMWNtVnpNUzArYzJsNlpTZ3BZQ0JtWVdsc1pXUWdhVzRnQUZkcFpIUm9MMmhsYVdkb2RDQmhjbVVnYm05MElHTnZibk5wYzNSbGJuUUFUblZ0WW1WeUlHOW1JRzFoZEdOb1pYTWdjMmh2ZFd4a0lHSmxJR3h2ZDJWeUFFRnpjMlZ5ZEdsdmJpQmdLR3hoY0RBdWFHVnBaMmgwS0NrZ1BUMGdiR0Z3TVM1b1pXbG5hSFFvS1NrZ0ppWWdLQ2hzWVhBeExtaGxhV2RvZENncFBqNHhLU0E5UFNCc1lYQXlMbWhsYVdkb2RDZ3BLV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHMVNiMjkwTG1kbGRDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2JXbHVhU0FoUFNBdE1XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWURCZ0lHWmhhV3hsWkNCcGJpQUFTVzFoWjJVZ2MybDZaWE1nWVhKbElHbHVZMjl1YzJsemRHVnVkQUJOYVc1cGJYVnRJR2x1WkdWNElHNXZkQ0J6WlhRQVFYTnpaWEowYVc5dUlHQW9lQzB4S1NBK1BTQXdJQ1ltSUNoNEt6RXBJRHdnYkdGd01TNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYmlBOFBTQnBibDl0WVhSamFHVnpMbk5wZW1Vb0tXQWdabUZwYkdWa0lHbHVJQUI0SUc5MWRDQnZaaUJpYjNWdVpITUFVMmh2ZFd4a0lHSmxJSFJvWlNCellXMWxBRUZ6YzJWeWRHbHZiaUJnWW1sdVdDQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLSGt0TVNrZ1BqMGdNQ0FtSmlBb2VTc3hLU0E4SUd4aGNERXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBZVNCdmRYUWdiMllnWW05MWJtUnpBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZiV0YwWTJobGNuTXZhRzkxWjJoZmMybHRhV3hoY21sMGVWOTJiM1JwYm1jdWFBQmlhVzVZSUc5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZR3hoY0RBdWQybGtkR2dvS1NBOVBTQnNZWEF4TG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQVNXMWhaMlVnWkdsdFpXNXphVzl1Y3lCcGJtTnZibk5wYzNSbGJuUUFRWE56WlhKMGFXOXVJR0JpYVc1WUlEd2diVTUxYlZoQ2FXNXpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ltbHVXU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYkdGd01DNTNhV1IwYUNncElEMDlJR3hoY0RJdWQybGtkR2dvS1dBZ1ptRnBiR1ZrSUdsdUlBQmlhVzVaSUc5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZR3hoY0RBdWFHVnBaMmgwS0NrZ1BUMGdiR0Z3TVM1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR0pwYmxrZ1BDQnRUblZ0V1VKcGJuTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCc1lYQXdMbWhsYVdkb2RDZ3BJRDA5SUd4aGNESXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaWFXNUJibWRzWlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ0tIZ3RNU2tnUGowZ01DQW1KaUFvZUNzeEtTQThJR2x0TG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQVltbHVRVzVuYkdVZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnS0hrdE1Ta2dQajBnTUNBbUppQW9lU3N4S1NBOElHbHRMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ltbHVRVzVuYkdVZ1BDQnRUblZ0UVc1bmJHVkNhVzV6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR3hoY0RBdWQybGtkR2dvS1Q0K01Ta2dQVDBnYkdGd01pNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWW1sdVUyTmhiR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoc1lYQXdMbWhsYVdkb2RDZ3BQajR4S1NBOVBTQnNZWEF5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FHSnBibE5qWVd4bElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUhoZlpHbDJYekl0TUM0MVppQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FIaGZaR2wyWHpJZ2IzVjBJRzltSUdKdmRXNWtjeUJ2ZFhRZ2IyWWdZbTkxYm1SeklHWnZjaUJwYm5SbGNuQnZiR0YwYVc5dUFFRnpjMlZ5ZEdsdmJpQmdZbWx1VTJOaGJHVWdQQ0J0VG5WdFUyTmhiR1ZDYVc1ellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZVY5a2FYWmZNaTB3TGpWbUlENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmthWE4wUW1sdVFXNW5iR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUI1WDJScGRsOHlJRzkxZENCdlppQmliM1Z1WkhNZ2IzVjBJRzltSUdKdmRXNWtjeUJtYjNJZ2FXNTBaWEp3YjJ4aGRHbHZiZ0JrYVhOMFFtbHVRVzVuYkdVZ2JYVnpkQ0J1YjNRZ1ltVWdibVZuWVhScGRtVUFRWE56WlhKMGFXOXVJR0JvZVhBdWMybDZaU2dwSUQ0OUlEa3FiV0Y0WDI1MWJWOW9lWEJ2ZEdobGMyVnpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2VGOWthWFpmTWlzd0xqVm1JRHdnYkdGd01pNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBQzl6Y21NdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZhRzl0YjJkeVlYQm9lVjlsYzNScGJXRjBhVzl1TDNKdlluVnpkRjlvYjIxdlozSmhjR2g1TG1nQVFYTnpaWEowYVc5dUlHQjVYMlJwZGw4eUt6QXVOV1lnUENCc1lYQXlMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUdoNWNDQjJaV04wYjNJZ2MyaHZkV3hrSUdKbElHOW1JSE5wZW1VZ09TcHRZWGhmYm5WdFgyaDVjRzkwYUdWelpYTUFRWE56WlhKMGFXOXVJR0FvYkdGd01DNTNhV1IwYUNncFBqNHhLU0E5UFNCc1lYQXhMbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCMGJYQmZhUzV6YVhwbEtDa2dQajBnYm5WdFgzQnZhVzUwYzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2hzWVhBd0xtaGxhV2RvZENncFBqNHhLU0E5UFNCc1lYQXhMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUhabFkzUnZjZ0JCYzNObGNuUnBiMjRnWUdoNWNGOWpiM04wY3k1emFYcGxLQ2tnUGowZ2JXRjRYMjUxYlY5b2VYQnZkR2hsYzJWellDQm1ZV2xzWldRZ2FXNGdBR2g1Y0Y5amIzTjBjeUIyWldOMGIzSWdjMmh2ZFd4a0lHSmxJRzltSUhOcGVtVWdiV0Y0WDI1MWJWOW9lWEJ2ZEdobGMyVnpBRUZ6YzJWeWRHbHZiaUJnY205M0lEd2diVWhsYVdkb2RHQWdabUZwYkdWa0lHbHVJQUF2YzNKakwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlp5WVcxbGQyOXlheTlwYldGblpTNW9BRUZ6YzJWeWRHbHZiaUJnYmlBK0lEQmdJR1poYVd4bFpDQnBiaUFBY205M0lHOTFkQ0J2WmlCaWIzVnVaSE1BTDNOeVl5OWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTkxZEdsc2N5OXdZWEowYVdGc1gzTnZjblF1YUFCdUlHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVFYTnpaWEowYVc5dUlHQW9hVzUwS1hOMFpEbzZabXh2YjNJb2VDa2dQVDBnS0dsdWRDbDRZQ0JtWVdsc1pXUWdhVzRnQUM5emNtTXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2WkdWMFpXTjBiM0p6TDJsdWRHVnljRzlzWVhSbExtZ0FRWE56WlhKMGFXOXVJR0JySUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJySUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBWm14dmIzSW9LU0JoYm1RZ1kyRnpkQ0J1YjNRZ2RHaGxJSE5oYldVQVFYTnpaWEowYVc5dUlHQW9hVzUwS1hOMFpEbzZabXh2YjNJb2VTa2dQVDBnS0dsdWRDbDVZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ01HQWdabUZwYkdWa0lHbHVJQUJHWVdsc1pXUWdkRzhnWTI5dGNIVjBaU0J0WVhSeWFYZ2dhVzUyWlhKelpRQkJjM05sY25ScGIyNGdZSGx3SUQ0OUlEQWdKaVlnZVhBZ1BDQm9aV2xuYUhSZ0lHWmhhV3hsWkNCcGJpQUFlWEFnYjNWMElHOW1JR0p2ZFc1a2N3QkJjM05sY25ScGIyNGdZSGx3WDNCc2RYTmZNU0ErUFNBd0lDWW1JSGx3WDNCc2RYTmZNU0E4SUdobGFXZG9kR0FnWm1GcGJHVmtJR2x1SUFCNWNGOXdiSFZ6WHpFZ2IzVjBJRzltSUdKdmRXNWtjd0JCYzNObGNuUnBiMjRnWUhod0lENDlJREFnSmlZZ2VIQWdQQ0IzYVdSMGFHQWdabUZwYkdWa0lHbHVJQUI0Y0NCdmRYUWdiMllnWW05MWJtUnpBRUZ6YzJWeWRHbHZiaUJnZUhCZmNHeDFjMTh4SUQ0OUlEQWdKaVlnZUhCZmNHeDFjMTh4SUR3Z2QybGtkR2hnSUdaaGFXeGxaQ0JwYmlBQWVIQmZjR3gxYzE4eElHOTFkQ0J2WmlCaWIzVnVaSE1BUVhOelpYSjBhVzl1SUdCM01DQStQU0F3SUNZbUlIY3dJRHc5SURFdU1EQXdNV0FnWm1GcGJHVmtJR2x1SUFCUGRYUWdiMllnY21GdVoyVUFRWE56WlhKMGFXOXVJR0IzTVNBK1BTQXdJQ1ltSUhjeElEdzlJREV1TURBd01XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhjeUlENDlJREFnSmlZZ2R6SWdQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2R6TWdQajBnTUNBbUppQjNNeUE4UFNBeExqQXdNREZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9kekFyZHpFcmR6SXJkek1wSUR3OUlERXVNREF3TVdBZ1ptRnBiR1ZrSUdsdUlBQUFBQUFBQUFDd1JRQUFFZ0FBQUJNQUFBQUFBQUFBSEZvQUFCUUFBQUFWQUFBQVRqWjJhWE5wYjI0NVJYaGpaWEIwYVc5dVJRQVFJZ0VBM0ZrQUFDZ2pBUUJPTm5acGMybHZiakU0UW1sdWIyMXBZV3hRZVhKaGJXbGtNekptUlFBQUFCQWlBUUQ4V1FBQXNFVUFBQUFBQUFEd1dRQUFFQUFBQUJZQUFBQVhBQUFBdVZLTVBvNWE1ejY1VW93K0FBQUFBQUFBQUFEd1dnQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUJPVTNRelgxOHlNakJmWDNOb1lYSmxaRjl3ZEhKZmNHOXBiblJsY2tsUVRqWjJhWE5wYjI0NFMyVjVabkpoYldWSlRHazVOa1ZGUlU1VFh6RXdjMmhoY21Wa1gzQjBja2xUTTE5Rk1qZGZYM05vWVhKbFpGOXdkSEpmWkdWbVlYVnNkRjlrWld4bGRHVkpVek5mVXpOZlJVVk9VMTg1WVd4c2IyTmhkRzl5U1ZNelgwVkZSVVVBRUNJQkFHaGFBQUNJSHdFQVRsTjBNMTlmTWpFd2MyaGhjbVZrWDNCMGNrbE9OblpwYzJsdmJqaExaWGxtY21GdFpVbE1hVGsyUlVWRlJUSTNYMTl6YUdGeVpXUmZjSFJ5WDJSbFptRjFiSFJmWkdWc1pYUmxTVk16WDFNelgwVkZBR0p2YjJ3Z2RtbHphVzl1T2pwV2FYTjFZV3hFWVhSaFltRnpaVHgyYVhOcGIyNDZPa1pTUlVGTFJYaDBjbUZqZEc5eUxDQjJhWE5wYjI0Nk9rSnBibUZ5ZVVabFlYUjFjbVZUZEc5eVpTd2dkbWx6YVc5dU9qcENhVzVoY25sR1pXRjBkWEpsVFdGMFkyaGxjanc1Tmo0K09qcHhkV1Z5ZVNoamIyNXpkQ0JIWVhWemMybGhibE5qWVd4bFUzQmhZMlZRZVhKaGJXbGtJQ29wSUZ0R1JVRlVWVkpGWDBWWVZGSkJRMVJQVWlBOUlIWnBjMmx2YmpvNlJsSkZRVXRGZUhSeVlXTjBiM0lzSUZOVVQxSkZJRDBnZG1semFXOXVPanBDYVc1aGNubEdaV0YwZFhKbFUzUnZjbVVzSUUxQlZFTklSVklnUFNCMmFYTnBiMjQ2T2tKcGJtRnllVVpsWVhSMWNtVk5ZWFJqYUdWeVBEazJQbDBBVW05dmRDQmpZVzV1YjNRZ1ltVWdUbFZNVEFCMGJYQmZhU0IyWldOMGIzSWdjMmh2ZFd4a0lHSmxJRzltSUhOcGVtVWdiblZ0WDNCdmFXNTBjd0FBQUFBQUFBQUFBQUFBQUFDeXZyaytFdHlndnBDK09UNFMzS0Mra0w0NXZnQUFBSUN5dnJtK0V0eWdQcEMrT2I0UzNLQStrTDQ1UHRKeUdMOEFBQUFBMG5LWXZqb0dCTC9TY3BnK09nWUV2OUp5R0Q4QUFBQ0EwbktZUGpvR0JEL1NjcGkrT2dZRVB3QUFBSUJXdUQyL1prMGtQMWE0dmI1bVRTUS9Wcmk5UGdBQUFBQld1RDAvWmswa3YxYTR2VDVtVFNTL1ZyaTl2Z3pwV0Q4QUFBQ0FET25ZUHBuWk96OE02ZGkrbWRrN1B3enBXTDhBQUFBQURPbll2cG5aTzc4TTZkZyttZGs3dndBQUFBRDhVMjQvOFdWT3Z3MVU3ajd4WlU2L0RWVHV2Z0FBQUlEOFUyNi84V1ZPUHcxVTdyN3haVTQvRFZUdVBnQUFnTDhBQUFBQUFBQUF2OUN6WGI4QUFBQS8wTE5kdndBQWdEOEFBQUNBQUFBQVA5Q3pYVDhBQUFDLzBMTmRQd0FBQUFBNFhnQUFHQUFBQUIwQUFBQWVBQUFBSHdBQUFDQUFBQUJPVTNRelgxOHlNakJmWDNOb1lYSmxaRjl3ZEhKZmNHOXBiblJsY2tsUWFERTJUblZzYkVGeWNtRjVSR1ZzWlhSbGNrbG9SVTVUWHpsaGJHeHZZMkYwYjNKSmFFVkZSVVVBQUFBQUVDSUJBT3hkQUFDSUh3RUFNVFpPZFd4c1FYSnlZWGxFWld4bGRHVnlTV2hGQUFBQUFBQUFBT0JlQUFBWUFBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFFNVRkRE5mWHpJeU1GOWZjMmhoY21Wa1gzQjBjbDl3YjJsdWRHVnlTVkJvVGxOZk1UQnphR0Z5WldSZmNIUnlTV2hGTWpkZlgzTm9ZWEpsWkY5d2RISmZaR1ZtWVhWc2RGOWtaV3hsZEdWSmFHaEZSVTVUWHpsaGJHeHZZMkYwYjNKSmFFVkZSVVVBRUNJQkFIaGVBQUNJSHdFQVRsTjBNMTlmTWpFd2MyaGhjbVZrWDNCMGNrbG9SVEkzWDE5emFHRnlaV1JmY0hSeVgyUmxabUYxYkhSZlpHVnNaWFJsU1dob1JVVUFkbWx6YVc5dU9qcFRZMjl3WldSVWFXMWxjam82ZmxOamIzQmxaRlJwYldWeUtDa0FjSEJ3QUhCd2NIQUFjSEJ3YVFBaWZRQnBibVpwYm1sMGVRQk5hWE56YVc1bklFaDFabVp0WVc0Z1kyOWtaU0IwWVdKc1pTQmxiblJ5ZVFCR1pXSnlkV0Z5ZVFCS1lXNTFZWEo1QUVwMWJIa0FWR2gxY25Oa1lYa0FWSFZsYzJSaGVRQlhaV1J1WlhOa1lYa0FVMkYwZFhKa1lYa0FVM1Z1WkdGNUFFMXZibVJoZVFCR2NtbGtZWGtBVFdGNUFDVnRMeVZrTHlWNUFFMUJXRjlCVEV4UFExOURTRlZPU3lCcGN5QjNjbTl1Wnl3Z2NHeGxZWE5sSUdacGVBQkJURWxIVGw5VVdWQkZJR2x6SUhkeWIyNW5MQ0J3YkdWaGMyVWdabWw0QUNWeklHWmhhV3hsWkNCMGJ5QnlaV3hsWVhObElHMTFkR1Y0QUNWeklHWmhhV3hsWkNCMGJ5QmhZM0YxYVhKbElHMTFkR1Y0QUU1dmRDQmhJRXBRUlVjZ1ptbHNaVG9nYzNSaGNuUnpJSGRwZEdnZ01IZ2xNREo0SURCNEpUQXllQUJEYjNKeWRYQjBJRXBRUlVjZ1pHRjBZVG9nSlhVZ1pYaDBjbUZ1Wlc5MWN5QmllWFJsY3lCaVpXWnZjbVVnYldGeWEyVnlJREI0SlRBeWVBQlZibVY0Y0dWamRHVmtJRzFoY210bGNpQXdlQ1V3TW5nQVZXNXpkWEJ3YjNKMFpXUWdiV0Z5YTJWeUlIUjVjR1VnTUhnbE1ESjRBRlZ1YzNWd2NHOXlkR1ZrSUVwUVJVY2djSEp2WTJWemN6b2dVMDlHSUhSNWNHVWdNSGdsTURKNEFFUmxabWx1WlNCSWRXWm1iV0Z1SUZSaFlteGxJREI0SlRBeWVBQkVaV1pwYm1VZ1FYSnBkR2h0WlhScFl5QlVZV0pzWlNBd2VDVXdNbmc2SURCNEpUQXllQUF0S3lBZ0lEQllNSGdBTFRCWUt6QllJREJZTFRCNEt6QjRJREI0QUVKdlozVnpJRVJCUXlCMllXeDFaU0F3ZUNWNEFGOWZibVY0ZEY5d2NtbHRaU0J2ZG1WeVpteHZkd0JJZFdabWJXRnVJR052WkdVZ2MybDZaU0IwWVdKc1pTQnZkbVZ5Wm14dmR3Qk9iM1lBVkdoMUFDQWdJQ0FnSUNBZ0pUUjFJQ1UwZFNBbE5IVWdKVFIxSUNVMGRTQWxOSFVnSlRSMUlDVTBkUUJLVUVWSElIQmhjbUZ0WlhSbGNpQnpkSEoxWTNRZ2JXbHpiV0YwWTJnNklHeHBZbkpoY25rZ2RHaHBibXR6SUhOcGVtVWdhWE1nSlhVc0lHTmhiR3hsY2lCbGVIQmxZM1J6SUNWMUFFUmxabWx1WlNCU1pYTjBZWEowSUVsdWRHVnlkbUZzSUNWMUFGZGhjbTVwYm1jNklIUm9kVzFpYm1GcGJDQnBiV0ZuWlNCemFYcGxJR1J2WlhNZ2JtOTBJRzFoZEdOb0lHUmhkR0VnYkdWdVozUm9JQ1YxQUUxcGMyTmxiR3hoYm1WdmRYTWdiV0Z5YTJWeUlEQjRKVEF5ZUN3Z2JHVnVaM1JvSUNWMUFFcEdTVVlnWlhoMFpXNXphVzl1SUcxaGNtdGxjam9nZEhsd1pTQXdlQ1V3TW5nc0lHeGxibWQwYUNBbGRRQktSa2xHSUdWNGRHVnVjMmx2YmlCdFlYSnJaWEk2SUhCaGJHVjBkR1VnZEdoMWJXSnVZV2xzSUdsdFlXZGxMQ0JzWlc1bmRHZ2dKWFVBU2taSlJpQmxlSFJsYm5OcGIyNGdiV0Z5YTJWeU9pQktVRVZITFdOdmJYQnlaWE56WldRZ2RHaDFiV0p1WVdsc0lHbHRZV2RsTENCc1pXNW5kR2dnSlhVQVNrWkpSaUJsZUhSbGJuTnBiMjRnYldGeWEyVnlPaUJTUjBJZ2RHaDFiV0p1WVdsc0lHbHRZV2RsTENCc1pXNW5kR2dnSlhVQVZXNXJibTkzYmlCQlVGQXhOQ0J0WVhKclpYSWdLRzV2ZENCQlpHOWlaU2tzSUd4bGJtZDBhQ0FsZFFCVmJtdHViM2R1SUVGUVVEQWdiV0Z5YTJWeUlDaHViM1FnU2taSlJpa3NJR3hsYm1kMGFDQWxkUUJQWW5SaGFXNWxaQ0JZVFZNZ2FHRnVaR3hsSUNWMUFFWnlaV1ZrSUZoTlV5Qm9ZVzVrYkdVZ0pYVUFUMkowWVdsdVpXUWdSVTFUSUdoaGJtUnNaU0FsZFFCR2NtVmxaQ0JGVFZNZ2FHRnVaR3hsSUNWMUFIVnVjM1Z3Y0c5eWRHVmtJR3h2WTJGc1pTQm1iM0lnYzNSaGJtUmhjbVFnYVc1d2RYUUFRWFZuZFhOMEFFbHVkRXhwYzNRQVUzUnlhVzVuVEdsemRBQkpiblpoYkdsa0lHTnliM0FnY21WeGRXVnpkQUJWYm5OMWNIQnZjblJsWkNCamIyeHZjaUJqYjI1MlpYSnphVzl1SUhKbGNYVmxjM1FBSlhNZ1ptRnBiR1ZrSUhSdklHSnliMkZrWTJGemRBQjFibk5wWjI1bFpDQnphRzl5ZEFCMWJuTnBaMjVsWkNCcGJuUUFRMjl5Y25Wd2RDQktVRVZISUdSaGRHRTZJSEJ5WlcxaGRIVnlaU0JsYm1RZ2IyWWdaR0YwWVNCelpXZHRaVzUwQUdobGFXZG9kQUI2Wm5RQVJuSmhZM1JwYjI1aGJDQnpZVzF3YkdsdVp5QnViM1FnYVcxd2JHVnRaVzUwWldRZ2VXVjBBRU5EU1ZJMk1ERWdjMkZ0Y0d4cGJtY2dibTkwSUdsdGNHeGxiV1Z1ZEdWa0lIbGxkQUJPYjNRZ2FXMXdiR1Z0Wlc1MFpXUWdlV1YwQUM1cGMyVjBBRVZ5Y205eUlISmxZV1JwYm1jZ1pHRjBZU0JtY205dElDVnpMbVp6WlhRQVVtVmhaR2x1WnlBbGN5NW1jMlYwQUdsdWRtRnNhV1FnYkdsMFpYSmhiQzlzWlc1bmRHaHpJSE5sZEFCcGJuWmhiR2xrSUdOdlpHVWdiR1Z1WjNSb2N5QnpaWFFBZFc1cmJtOTNiaUJvWldGa1pYSWdabXhoWjNNZ2MyVjBBR2x1ZG1Gc2FXUWdaR2x6ZEdGdVkyVnpJSE5sZEFCblpYUUFSWEp5YjNJNklHdHdiVk5sZEZKbFprUmhkR0ZUWlhRQVJYSnliM0k2SUd0d2JVTm9ZVzVuWlZCaFoyVk9iMDltVW1WbVJHRjBZVk5sZEFCRmNuSnZjam9nYTNCdFRXVnlaMlZTWldaRVlYUmhVMlYwQUU5amRBQm1iRzloZEFCcGJuWmhiR2xrSUdKcGRDQnNaVzVuZEdnZ2NtVndaV0YwQUZOaGRBQjFhVzUwTmpSZmRBQkRZVzV1YjNRZ2NYVmhiblJwZW1VZ2JXOXlaU0IwYUdGdUlDVmtJR052Ykc5eUlHTnZiWEJ2Ym1WdWRITUFVM1JoY25RZ1QyWWdVMk5oYmpvZ0pXUWdZMjl0Y0c5dVpXNTBjd0JDYjJkMWN5QjJhWEowZFdGc0lHRnljbUY1SUdGalkyVnpjd0JDYjJkMWN5QnpZVzF3YkdsdVp5Qm1ZV04wYjNKekFGRjFZVzUwYVhwcGJtY2dkRzhnSldRZ1BTQWxaQ29sWkNvbFpDQmpiMnh2Y25NQVVYVmhiblJwZW1sdVp5QjBieUFsWkNCamIyeHZjbk1BUTJGdWJtOTBJSEYxWVc1MGFYcGxJSFJ2SUdabGQyVnlJSFJvWVc0Z0pXUWdZMjlzYjNKekFFTmhibTV2ZENCeGRXRnVkR2w2WlNCMGJ5QnRiM0psSUhSb1lXNGdKV1FnWTI5c2IzSnpBRWx1ZG1Gc2FXUWdTbEJGUnlCbWFXeGxJSE4wY25WamRIVnlaVG9nZEhkdklGTlBTU0J0WVhKclpYSnpBRWx1ZG1Gc2FXUWdTbEJGUnlCbWFXeGxJSE4wY25WamRIVnlaVG9nZEhkdklGTlBSaUJ0WVhKclpYSnpBRzVtZEUxaGNtdGxjbk1BWDJGa1pFNUdWRTFoY210bGNuTUFVMjF2YjNSb2FXNW5JRzV2ZENCemRYQndiM0owWldRZ2QybDBhQ0J1YjI1emRHRnVaR0Z5WkNCellXMXdiR2x1WnlCeVlYUnBiM01BWjJWMFEyRnRaWEpoVEdWdWN3QjBiMjhnYldGdWVTQnNaVzVuZEdnZ2IzSWdaR2x6ZEdGdVkyVWdjM2x0WW05c2N3Qk5ZWGhwYlhWdElITjFjSEJ2Y25SbFpDQnBiV0ZuWlNCa2FXMWxibk5wYjI0Z2FYTWdKWFVnY0dsNFpXeHpBR2x1ZG1Gc2FXUWdjM1J2Y21Wa0lHSnNiMk5ySUd4bGJtZDBhSE1BUVhCd2JHbGpZWFJwYjI0Z2RISmhibk5tWlhKeVpXUWdkRzl2SUcxaGJua2djMk5oYm14cGJtVnpBRUZ3Y0d4cFkyRjBhVzl1SUhSeVlXNXpabVZ5Y21Wa0lIUnZieUJtWlhjZ2MyTmhibXhwYm1WekFDVnpMaVZ6QUVSbFluVm5JRzF2WkdVZ2MyVjBJSFJ2SUNWekFFWmhhV3hsWkNCMGJ5QmpjbVZoZEdVZ2RHVnRjRzl5WVhKNUlHWnBiR1VnSlhNQVEyeHZjMlZrSUhSbGJYQnZjbUZ5ZVNCbWFXeGxJQ1Z6QUU5d1pXNWxaQ0IwWlcxd2IzSmhjbmtnWm1sc1pTQWxjd0JCY0hJQWRtVmpkRzl5QUcxdmJtVjVYMmRsZENCbGNuSnZjZ0JKYm5CMWRDQm1hV3hsSUhKbFlXUWdaWEp5YjNJQVNXNTJZV3hwWkNCS1VFVkhJR1pwYkdVZ2MzUnlkV04wZFhKbE9pQnRhWE56YVc1bklGTlBVeUJ0WVhKclpYSUFibVowVFdGeWEyVnlBR2RsZEU1R1ZFMWhjbXRsY2dCa1pYUmxZM1JPUmxSTllYSnJaWElBVDJOMGIySmxjZ0JPYjNabGJXSmxjZ0JUWlhCMFpXMWlaWElBUkdWalpXMWlaWElBZFc1emFXZHVaV1FnWTJoaGNnQnBiM05mWW1GelpUbzZZMnhsWVhJQVRXRnlBRlZ1Y21WamIyZHVhWHBsWkNCamIyMXdiMjVsYm5RZ1NVUnpJQ1ZrSUNWa0lDVmtMQ0JoYzNOMWJXbHVaeUJaUTJKRGNnQnpaWFIxY0FCV2FYSjBkV0ZzSUdGeWNtRjVJR052Ym5SeWIyeHNaWElnYldWemMyVmtJSFZ3QUZObGNBQWxTVG9sVFRvbFV5QWxjQUIwWldGeVpHOTNiZ0JUZFc0QVNuVnVBSE4wWkRvNlpYaGpaWEIwYVc5dUFFSnZaM1Z6SUVoMVptWnRZVzRnZEdGaWJHVWdaR1ZtYVc1cGRHbHZiZ0JUWld4bFkzUmxaQ0FsWkNCamIyeHZjbk1nWm05eUlIRjFZVzUwYVhwaGRHbHZiZ0JKYldGblpTQjBiMjhnZDJsa1pTQm1iM0lnZEdocGN5QnBiWEJzWlcxbGJuUmhkR2x2YmdCTmIyNEFibUZ1QUVScFpHNG5kQ0JsZUhCbFkzUWdiVzl5WlNCMGFHRnVJRzl1WlNCelkyRnVBRk5oYlhCc2FXNW5JR1poWTNSdmNuTWdkRzl2SUd4aGNtZGxJR1p2Y2lCcGJuUmxjbXhsWVhabFpDQnpZMkZ1QUVwaGJnQktkV3dBWW05dmJBQkNkV1ptWlhJZ2NHRnpjMlZrSUhSdklFcFFSVWNnYkdsaWNtRnllU0JwY3lCMGIyOGdjMjFoYkd3QVFYQnlhV3dBYzJWMFRHOW5UR1YyWld3QVoyVjBURzluVEdWMlpXd0FhVzUyWVd4cFpDQmpiMlJsSUMwdElHMXBjM05wYm1jZ1pXNWtMVzltTFdKc2IyTnJBR2x1WTI5eWNtVmpkQ0JvWldGa1pYSWdZMmhsWTJzQWFXNWpiM0p5WldOMElHeGxibWQwYUNCamFHVmphd0JwYm1OdmNuSmxZM1FnWkdGMFlTQmphR1ZqYXdCd2RYTm9YMkpoWTJzQWFXNTJZV3hwWkNCa2FYTjBZVzVqWlNCMGIyOGdabUZ5SUdKaFkyc0FSbkpwQUdSd2FRQk9SbFFnYldGeWEyVnlJR2hsYVdkb2REb2dKV2tBVGtaVUlHNTFiUzRnYjJZZ1NXMWhaMlZUWlhRNklDVnBBRTVHVkNCdFlYSnJaWElnWkhCcE9pQWxhUUJPUmxRZ2JXRnlhMlZ5SUhkcFpIUm9PaUFsYVFCa1lYUmhjMlYwVUdGMGFHNWhiV1Z6SUhOcGVtVTZJQ1ZwQUdKaFpGOWhjbkpoZVY5dVpYZGZiR1Z1WjNSb0FFSnZaM1Z6SUcxaGNtdGxjaUJzWlc1bmRHZ0FkMmxrZEdnQWNIVnphQUJvWldGa1pYSWdZM0pqSUcxcGMyMWhkR05vQUUxaGNtTm9BQzlsYlhOa2F5OTFjSE4wY21WaGJTOWxiWE5qY21sd2RHVnVMMk5oWTJobEwzTjVjM0p2YjNRdmFXNWpiSFZrWlM5bGJYTmpjbWx3ZEdWdUwzWmhiQzVvQUVGMVp3QjFibk5wWjI1bFpDQnNiMjVuQUhOMFpEbzZkM04wY21sdVp3QmlZWE5wWTE5emRISnBibWNBYzNSa09qcHpkSEpwYm1jQWMzUmtPanAxTVRaemRISnBibWNBYzNSa09qcDFNekp6ZEhKcGJtY0FRMjl3ZVhKcFoyaDBJQ2hES1NBeU1ERTRMQ0JVYUc5dFlYTWdSeTRnVEdGdVpTd2dSM1ZwWkc4Z1ZtOXNiR0psWkdsdVp3QnBibVlBSlM0d1RHWUFKVXhtQUhKbGMybDZaUUJwYm5aaGJHbGtJSGRwYm1SdmR5QnphWHBsQUhSeWRXVUFWSFZsQUhCdmMyVUFabUZzYzJVQVgxOWplR0ZmWjNWaGNtUmZjbVZzWldGelpRQmZYMk40WVY5bmRXRnlaRjloWTNGMWFYSmxBRk4xYzNCbGJuTnBiMjRnYm05MElHRnNiRzkzWldRZ2FHVnlaUUJwYm5aaGJHbGtJR0pzYjJOcklIUjVjR1VBU25WdVpRQnpaWFJRY205cVpXTjBhVzl1VG1WaGNsQnNZVzVsQUdkbGRGQnliMnBsWTNScGIyNU9aV0Z5VUd4aGJtVUFjMlYwVUhKdmFtVmpkR2x2YmtaaGNsQnNZVzVsQUdkbGRGQnliMnBsWTNScGIyNUdZWEpRYkdGdVpRQlNaWEYxWlhOMFpXUWdabVZoZEhWeVpTQjNZWE1nYjIxcGRIUmxaQ0JoZENCamIyMXdhV3hsSUhScGJXVUFVMlZsYXlCbVlXbHNaV1FnYjI0Z2RHVnRjRzl5WVhKNUlHWnBiR1VBVW1WaFpDQm1ZV2xzWldRZ2IyNGdkR1Z0Y0c5eVlYSjVJR1pwYkdVQVJXMXdkSGtnYVc1d2RYUWdabWxzWlFCUWNtVnRZWFIxY21VZ1pXNWtJRzltSUdsdWNIVjBJR1pwYkdVQVVISmxiV0YwZFhKbElHVnVaQ0J2WmlCS1VFVkhJR1pwYkdVQVlYTmZhR0Z1Wkd4bEFFVnljbTl5SUdOeVpXRjBhVzVuSUV0UVRTQm9ZVzVrYkdVQWMyVjBRMkZ0WlhKaEtDazZJRVZ5Y205eUlHTnlaV0YwYVc1bklETkVJR2hoYm1Sc1pRQmtiM1ZpYkdVQVJFTlVJR052WldabWFXTnBaVzUwSUc5MWRDQnZaaUJ5WVc1blpRQkpiblpoYkdsa0lHTnZiRzl5SUhGMVlXNTBhWHBoZEdsdmJpQnRiMlJsSUdOb1lXNW5aUUJLVUVWSElHUmhkR0Z6ZEhKbFlXMGdZMjl1ZEdGcGJuTWdibThnYVcxaFoyVUFJQ0FnSUhkcGRHZ2dKV1FnZUNBbFpDQjBhSFZ0WW01aGFXd2dhVzFoWjJVQVoyVjBVSEp2WTJWemMybHVaMGx0WVdkbEFGTjBZWEowSUc5bUlFbHRZV2RsQUVWdVpDQlBaaUJKYldGblpRQkNiMmQxY3lCaWRXWm1aWElnWTI5dWRISnZiQ0J0YjJSbEFFTnZjbkoxY0hRZ1NsQkZSeUJrWVhSaE9pQmlZV1FnU0hWbVptMWhiaUJqYjJSbEFHbHVkbUZzYVdRZ2JHbDBaWEpoYkM5c1pXNW5kR2dnWTI5a1pRQnBiblpoYkdsa0lHUnBjM1JoYm1ObElHTnZaR1VBUTI5eWNuVndkQ0JLVUVWSElHUmhkR0U2SUdKaFpDQmhjbWwwYUcxbGRHbGpJR052WkdVQWMyVjBSR1ZpZFdkTmIyUmxBR2RsZEVSbFluVm5UVzlrWlFCelpYUlVhSEpsYzJodmJHUk5iMlJsQUdkbGRGUm9jbVZ6YUc5c1pFMXZaR1VBYzJWMFNXMWhaMlZRY205alRXOWtaUUJuWlhSSmJXRm5aVkJ5YjJOTmIyUmxBRUp2WjNWeklHbHVjSFYwSUdOdmJHOXljM0JoWTJVQVFtOW5kWE1nU2xCRlJ5QmpiMnh2Y25Od1lXTmxBSFZ1YTI1dmQyNGdZMjl0Y0hKbGMzTnBiMjRnYldWMGFHOWtBR1p2ZFc1a0FITmxkRlJvY21WemFHOXNaQUJuWlhSVWFISmxjMmh2YkdRQUpUQXFiR3hrQUNVcWJHeGtBQ3NsYkd4a0FDVXJMalJzWkFCMmIybGtBRUpoWTJ0cGJtY2djM1J2Y21VZ2JtOTBJSE4xY0hCdmNuUmxaQUJzYjJOaGJHVWdibTkwSUhOMWNIQnZjblJsWkFCRVExUWdjMk5oYkdWa0lHSnNiMk5ySUhOcGVtVWdKV1I0SldRZ2JtOTBJSE4xY0hCdmNuUmxaQUJSZFdGdWRHbDZZWFJwYjI0Z2RHRmliR1VnTUhnbE1ESjRJSGRoY3lCdWIzUWdaR1ZtYVc1bFpBQklkV1ptYldGdUlIUmhZbXhsSURCNEpUQXllQ0IzWVhNZ2JtOTBJR1JsWm1sdVpXUUFRWEpwZEdodFpYUnBZeUIwWVdKc1pTQXdlQ1V3TW5nZ2QyRnpJRzV2ZENCa1pXWnBibVZrQUZkeWFYUmxJSFJ2SUZoTlV5Qm1ZV2xzWldRQVVtVmhaQ0JtY205dElGaE5VeUJtWVdsc1pXUUFWM0pwZEdVZ2RHOGdSVTFUSUdaaGFXeGxaQUJTWldGa0lHWnliMjBnUlUxVElHWmhhV3hsWkFCWFpXUUFJQ0FnSUNBZ0lDQWxNMlFnSlROa0lDVXpaQ0FsTTJRZ0pUTmtJQ1V6WkNBbE0yUWdKVE5rQUZkaGNtNXBibWM2SUhWdWEyNXZkMjRnU2taSlJpQnlaWFpwYzJsdmJpQnVkVzFpWlhJZ0pXUXVKVEF5WkFCRGIzSnlkWEIwSUVwUVJVY2daR0YwWVRvZ1ptOTFibVFnYldGeWEyVnlJREI0SlRBeWVDQnBibk4wWldGa0lHOW1JRkpUVkNWa0FGTjBZWEowSUU5bUlFWnlZVzFsSURCNEpUQXllRG9nZDJsa2RHZzlKWFVzSUdobGFXZG9kRDBsZFN3Z1kyOXRjRzl1Wlc1MGN6MGxaQUFnSUNBZ1EyOXRjRzl1Wlc1MElDVmtPaUFsWkdoNEpXUjJJSEU5SldRQVNXNTJZV3hwWkNCd2NtOW5jbVZ6YzJsMlpTQndZWEpoYldWMFpYSnpJRk56UFNWa0lGTmxQU1ZrSUVGb1BTVmtJRUZzUFNWa0FDQWdVM005SldRc0lGTmxQU1ZrTENCQmFEMGxaQ3dnUVd3OUpXUUFJQ0FnSUVOdmJYQnZibVZ1ZENBbFpEb2daR005SldRZ1lXTTlKV1FBSlZrdEpXMHRKV1FBU1c1MllXeHBaQ0J3Y205bmNtVnpjMmwyWlNCd1lYSmhiV1YwWlhKeklHRjBJSE5qWVc0Z2MyTnlhWEIwSUdWdWRISjVJQ1ZrQUVsdWRtRnNhV1FnYzJOaGJpQnpZM0pwY0hRZ1lYUWdaVzUwY25rZ0pXUUFRbTluZFhNZ1JGRlVJR2x1WkdWNElDVmtBRUp2WjNWeklFUklWQ0JwYm1SbGVDQWxaQUJDYjJkMWN5QkVRVU1nYVc1a1pYZ2dKV1FBVkc5dklHMWhibmtnWTI5c2IzSWdZMjl0Y0c5dVpXNTBjem9nSldRc0lHMWhlQ0FsWkFCSmJtTnZibk5wYzNSbGJuUWdjSEp2WjNKbGMzTnBiMjRnYzJWeGRXVnVZMlVnWm05eUlHTnZiWEJ2Ym1WdWRDQWxaQ0JqYjJWbVptbGphV1Z1ZENBbFpBQlhjbTl1WnlCS1VFVkhJR3hwWW5KaGNua2dkbVZ5YzJsdmJqb2diR2xpY21GeWVTQnBjeUFsWkN3Z1kyRnNiR1Z5SUdWNGNHVmpkSE1nSldRQVZHaHlaWE5vYjJ4a0lHMXZaR1VnYzJWMElIUnZJQ1ZrQUZSb2NtVnphRzlzWkNCelpYUWdkRzhnSldRQVFYUWdiV0Z5YTJWeUlEQjRKVEF5ZUN3Z2NtVmpiM1psY25rZ1lXTjBhVzl1SUNWa0FGVnVjM1Z3Y0c5eWRHVmtJRXBRUlVjZ1pHRjBZU0J3Y21WamFYTnBiMjRnSldRQVJHVm1hVzVsSUZGMVlXNTBhWHBoZEdsdmJpQlVZV0pzWlNBbFpDQWdjSEpsWTJsemFXOXVJQ1ZrQUVGa2IySmxJRUZRVURFMElHMWhjbXRsY2pvZ2RtVnljMmx2YmlBbFpDd2dabXhoWjNNZ01IZ2xNRFI0SURCNEpUQTBlQ3dnZEhKaGJuTm1iM0p0SUNWa0FFRnNiRzlqWVhSbFpDQjJhV1JsYjBaeVlXMWxVMmw2WlNBbFpBQkpiWEJ5YjNCbGNpQmpZV3hzSUhSdklFcFFSVWNnYkdsaWNtRnllU0JwYmlCemRHRjBaU0FsWkFCRFlXNXViM1FnZEhKaGJuTmpiMlJsSUdSMVpTQjBieUJ0ZFd4MGFYQnNaU0IxYzJVZ2IyWWdjWFZoYm5ScGVtRjBhVzl1SUhSaFlteGxJQ1ZrQUZWdWEyNXZkMjRnUVdSdlltVWdZMjlzYjNJZ2RISmhibk5tYjNKdElHTnZaR1VnSldRQVNXNTJZV3hwWkNCdFpXMXZjbmtnY0c5dmJDQmpiMlJsSUNWa0FFSnZaM1Z6SUcxbGMzTmhaMlVnWTI5a1pTQWxaQUJLUmtsR0lFRlFVREFnYldGeWEyVnlPaUIyWlhKemFXOXVJQ1ZrTGlVd01tUXNJR1JsYm5OcGRIa2dKV1I0SldRZ0lDVmtBSE4wWkRvNlltRmtYMkZzYkc5akFFUmxZd0FsYkdRbFl3QkRiMjF3YjI1bGJuUWdhVzVrWlhnZ0pXUTZJRzFwYzIxaGRHTm9hVzVuSUhOaGJYQnNhVzVuSUhKaGRHbHZJQ1ZrT2lWa0xDQWxaRG9sWkN3Z0pXTUFjbUlBUm1WaUFISjNZUUJUWTJGdUlITmpjbWx3ZENCa2IyVnpJRzV2ZENCMGNtRnVjMjFwZENCaGJHd2daR0YwWVFCd1lYTnpWbWxrWlc5RVlYUmhBR2RsZEU1R1ZFUmhkR0VBWDJ4dllXUkRZVzFsY21FQUpXRWdKV0lnSldRZ0pVZzZKVTA2SlZNZ0pWa0FVRTlUU1ZnQVFWSmZURUZDUlV4SlRrZGZWRWhTUlZOSVgwMVBSRVZmUVZWVVQxOVBWRk5WQUVGU1gwMUJVa3RGVWw5SlRrWlBYME5WVkU5R1JsOVFTRUZUUlY5TlFWUkRTRjlEVDA1VVVrRlRWQUJCVWw5TlFWaGZURTlQVUY5RFQxVk9WQUJmWkdWamIyMXdjbVZ6YzFwR1ZBQkJVbFJ2YjJ4TGFYUk9SbFFBU1c1MllXeHBaQ0JqYjIxd2IyNWxiblFnU1VRZ0pXUWdhVzRnVTA5VEFFRlNYMDFCVWt0RlVsOUpUa1pQWDBOVlZFOUdSbDlRU0VGVFJWOUlSVlZTU1ZOVVNVTmZWRkpQVlVKTVJWTlBUVVZmVFVGVVVrbFlYME5QUkVWVEFFVlNVazlTWDAxQlVrdEZVbDlKVGtSRldGOVBWVlJmVDBaZlFrOVZUa1JUQUNWSU9pVk5PaVZUQUVGU1gweFBSMTlNUlZaRlRGOUZVbEpQVWdCQlVsOU5RVkpMUlZKZlNVNUdUMTlEVlZSUFJrWmZVRWhCVTBWZlVFOVRSVjlGVWxKUFVnQkJVbDlNVDBkZlRFVldSVXhmU1U1R1R3QkJVbDlNVDBkZlRFVldSVXhmVWtWTVgwbE9SazhBUVZKZlRFOUhYMHhGVmtWTVgxZEJVazRBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDFCQlZGUkZVazVmUlZoVVVrRkRWRWxQVGdCT1FVNEFRVkpmVEVGQ1JVeEpUa2RmVkVoU1JWTklYMDFQUkVWZlFWVlVUMTlOUlVSSlFVNEFVRTBBU2xCRlIwMUZUUUJCVFFBbFNEb2xUUUJNUTE5QlRFd0FRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMDFCVkVOSVgwSkJVa05QUkVWZlJVUkRYMFpCU1V3QVFWSmZURUZDUlV4SlRrZGZWRWhTUlZOSVgwMVBSRVZmVFVGT1ZVRk1BRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlRVDFORlgwVlNVazlTWDAxVlRGUkpBRUZUUTBsSkFFRlNYMHhQVDFCZlFsSkZRVXRmVkVoU1JWTklBRUZTWDBSRlJrRlZURlJmVEVGQ1JVeEpUa2RmVkVoU1JWTklBRUZTWDB4UFIxOU1SVlpGVEY5RVJVSlZSd0JNUVU1SEFFbHVkbUZzYVdRZ1UwOVRJSEJoY21GdFpYUmxjbk1nWm05eUlITmxjWFZsYm5ScFlXd2dTbEJGUndCRFlYVjBhVzl1T2lCeGRXRnVkR2w2WVhScGIyNGdkR0ZpYkdWeklHRnlaU0IwYjI4Z1kyOWhjbk5sSUdadmNpQmlZWE5sYkdsdVpTQktVRVZIQUVsdWRtRnNhV1FnU2xCRlJ5Qm1hV3hsSUhOMGNuVmpkSFZ5WlRvZ0pYTWdZbVZtYjNKbElGTlBSZ0JKVGtZQVFWSmZURUZDUlV4SlRrZGZWRWhTUlZOSVgwMVBSRVZmUVZWVVQxOUJSRUZRVkVsV1JRQkJVbDlOUVZKTFJWSmZTVTVHVDE5RFZWUlBSa1pmVUVoQlUwVmZUazlPUlFCQlVsOUVSVUpWUjE5RVNWTkJRa3hGQUVGU1gwUkZRbFZIWDBWT1FVSk1SUUJCVWw5SlRVRkhSVjlRVWs5RFgwWlNRVTFGWDBsTlFVZEZBRUZTWDBsTlFVZEZYMUJTVDBOZlJrbEZURVJmU1UxQlIwVUFRVkpmUkVWR1FWVk1WRjlFUlVKVlIxOU5UMFJGQUVGU1gwUkZSa0ZWVEZSZlNVMUJSMFZmVUZKUFExOU5UMFJGQUVGU1gwMUJVa3RGVWw5SlRrWlBYME5WVkU5R1JsOVFTRUZUUlY5TlFWUkRTRjlEVDA1R1NVUkZUa05GQUVGU1gwMUJVa3RGVWw5SlRrWlBYME5WVkU5R1JsOVFTRUZUUlY5TlFWUkRTRjlDUVZKRFQwUkZYMDVQVkY5R1QxVk9SQUJCVWw5TlFWSkxSVkpmU1U1R1QxOURWVlJQUmtaZlVFaEJVMFZmVFVGVVEwaGZSMFZPUlZKSlF3QmZYMk40WVY5bmRXRnlaRjloWTNGMWFYSmxJR1JsZEdWamRHVmtJSEpsWTNWeWMybDJaU0JwYm1sMGFXRnNhWHBoZEdsdmJqb2daRzhnZVc5MUlHaGhkbVVnWVNCbWRXNWpkR2x2Ymkxc2IyTmhiQ0J6ZEdGMGFXTWdkbUZ5YVdGaWJHVWdkMmh2YzJVZ2FXNXBkR2xoYkdsNllYUnBiMjRnWkdWd1pXNWtjeUJ2YmlCMGFHRjBJR1oxYm1OMGFXOXVQd0JQZFhSd2RYUWdabWxzWlNCM2NtbDBaU0JsY25KdmNpQXRMUzBnYjNWMElHOW1JR1JwYzJzZ2MzQmhZMlUvQUZkeWFYUmxJR1poYVd4bFpDQnZiaUIwWlcxd2IzSmhjbmtnWm1sc1pTQXRMUzBnYjNWMElHOW1JR1JwYzJzZ2MzQmhZMlUvQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSE5vYjNKMFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWJuTnBaMjVsWkNCemFHOXlkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhhVzUwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYm5OcFoyNWxaQ0JwYm5RK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdac2IyRjBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFhVzUwT0Y5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4cGJuUTRYM1ErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZwYm5ReE5sOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHBiblF4Tmw5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWFXNTBOalJmZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YVc1ME5qUmZkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhkV2x1ZERNeVgzUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHbHVkRE15WDNRK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdOb1lYSStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BIVnVjMmxuYm1Wa0lHTm9ZWEkrQUhOMFpEbzZZbUZ6YVdOZmMzUnlhVzVuUEhWdWMybG5ibVZrSUdOb1lYSStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BITnBaMjVsWkNCamFHRnlQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHNiMjVuUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYm5OcFoyNWxaQ0JzYjI1blBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4a2IzVmliR1UrQURBeE1qTTBOVFkzT0RrQU9XTWdJREUwTFVwaGJpMHlNREU0QUVNdVZWUkdMVGdBUlhKeWIzSWdjbVZoWkdsdVp5QkxVRTBnWkdGMFlTQm1jbTl0SUNWekxtWnpaWFF6QUZKbFlXUnBibWNnSlhNdVpuTmxkRE1BYzJWMGRYQkJVaklBTVM0eUxqRXhBRVZ5Y205eUlHVjRZMlZsWkNCdFlYaHBiWFZ0SUhCaFoyVnpMZ0JGY25KdmNqb2dhM0J0UTNKbFlYUmxTR0Z1Wkd4bElISmxkSFZ5Ym1Wa0lHNTFiR3h3ZEhJdUFFWmhhV3hsWkNCMGJ5QnBibWwwYVdGc2FYcGxJRmRsWWtGU1MybDBUSFZ0WVVsdVptOHVBRzl1TGdCdlptWXVBRXh2WVdScGJtY2diMllnVGtaVUlHUmhkR0VnWTI5dGNHeGxkR1V1QUVSdmJtVXVBRVZ5Y205eUlHUmxkR0ZqYUdsdVp5QndZWFIwWlhKdUlHWnliMjBnWVhKb1lXNWtiR1V1QUhObGRFTmhiV1Z5WVNncE9pQkZjbkp2Y2pvZ1lYSkRjbVZoZEdWSVlXNWtiR1V1QUVWeWNtOXlPaUJoY2pKRGNtVmhkR1ZJWVc1a2JHVXVBRWx0WVdkbElIQnliMk11SUcxdlpHVWdjMlYwSUhSdklDVmtMZ0J6WlhSRFlXMWxjbUVvS1RvZ1JYSnliM0k2SUdGeVVHRnlZVzFNVkVOeVpXRjBaU0JtYjNJZ1kyRnRaWEpoU1VRZ0pXUXVBRUZ6YzJsbmJtVmtJSEJoWjJVZ2JtOHVJQ1ZrTGdCc2IyRmtRMkZ0WlhKaEtDazZJRVZ5Y205eUlHeHZZV1JwYm1jZ2NHRnlZVzFsZEdWeUlHWnBiR1VnSlhNZ1ptOXlJR05oYldWeVlTNEFSbUZwYkdWa0lIUnZJSEJ5YjJObGMzTWdkbWxrWlc4Z2JIVnRZUzRBVlhOcGJtY2dUa1pVSUhSeVlXTnJhVzVuSUhObGRIUnBibWR6SUdadmNpQnRiM0psSUhSb1lXNGdiMjVsSUVOUVZTNEFWWE5wYm1jZ1RrWlVJSFJ5WVdOcmFXNW5JSE5sZEhScGJtZHpJR1p2Y2lCaElITnBibWRzWlNCRFVGVXVBR2x1YVhRZ1FWSlViMjlzUzJsMFRrWlVJR052Ym5OMGNuVmpkRzl5TGk0dUFDMEFLRzUxYkd3cEFFVnRjSFI1SUVwUVJVY2dhVzFoWjJVZ0tFUk9UQ0J1YjNRZ2MzVndjRzl5ZEdWa0tRQkpibk4xWm1acFkybGxiblFnYldWdGIzSjVJQ2hqWVhObElDVmtLUUJoWkdRZ1RrWlVJRzFoY210bGNpMCtJQ2NsY3ljQUpRQndkR2h5WldGa1gyVnhkV0ZzS0hSb2NtVmhaQ3dnY0hSb2NtVmhaRjl6Wld4bUtDa3BJQ1ltSUNKMllXd2dZV05qWlhOelpXUWdabkp2YlNCM2NtOXVaeUIwYUhKbFlXUWlBQ0lzSW1aelpYUWlPaUlBSWl3aVpuTmxkRE1pT2lJQVVIVnlaU0IyYVhKMGRXRnNJR1oxYm1OMGFXOXVJR05oYkd4bFpDRUFTVzV6YVdSbElIWnBaR1Z2VEhWdFlTQnVieUJ6YVcxa0lDRUFRMjl3ZVNCMmFXUmxiMHgxYldFZ2QybDBhQ0J6YVcxa0lDRUFKWE1LQUVWeWNtOXlJRzFoYkd4dlkybHVaeUFsYVNCaWVYUmxjeUJtYjNJZ2FXNW1iR0YwWlFvQVJYSnliM0lnYjNCbGJtbHVaeUF1ZW1aMElHWnBiR1VLQUVWeWNtOXlPaUIwYUhKbFlXUklZVzVrYkdVS0FFVnljbTl5T2lCSmJuWmhiR2xrSUdselpYUmZZMjl1ZEdWdWRGOXphWHBsT2lBbFpBb0FjMlYwUTJGdFpYSmhLQ2s2SUdGeVVHRnlZVzFNVkVOeVpXRjBaV1FLTGk0bFpDd2dKV1FLQUZSeVlXTnJhVzVuSUd4dmMzUXVDZ0IwY21GamEybHVaMGx1YVhSVGRHRnlkQ2dwT2lCRmNuSnZjam9nVGxWTVRDQjBhSEpsWVdSSVlXNWtiR1VnYjNJZ2FXMWhaMlZRZEhJdUNnQkZjbkp2Y2lCemRHRnlkR2x1WnlCMGNtRmphMmx1WnlCMGFISmxZV1E2SUdWdGNIUjVJR3R3YlVoaGJtUnNaUzlwYldGblpVeDFiV0ZRZEhJdUNnQkZjbkp2Y2pvZ0oyWnpaWFFuSUc1dmRDQm1iM1Z1WkNCcGJpQjBhR1VnYzNSeWFXNW5MZ29BUlhKeWIzSTZJQ2RtYzJWME15Y2dibTkwSUdadmRXNWtJR2x1SUhSb1pTQnpkSEpwYm1jdUNnQjBjbUZqYTJsdVowbHVhWFJUZEdGeWRDZ3BPaUJGY25KdmNqb2dUbFZNVENCMGNtRmphMmx1WjBsdWFYUklZVzVrYkdVdUNnQjBjbUZqYTJsdVowbHVhWFJKYm1sMEtDazZJRVZ5Y205eU9pQk9WVXhNSUV0d2JVaGhibVJzWlM0S0FIUnlZV05yYVc1blNXNXBkRWRsZEZKbGMzVnNkQ2dwT2lCRmNuSnZjam9nVGxWTVRDQjBhSEpsWVdSSVlXNWtiR1VnYjNJZ2RISmhibk1nYjNJZ2NHRm5aUzRLQUVWeWNtOXlPaUJsYm1RZ2IyWWdjM1J5YVc1bklHNXZkQ0JtYjNWdVpDNEtBRTV2SUhCaFoyVWdaR1YwWldOMFpXUXVDZ0JUZEdGeWRDQjBjbUZqYTJsdVp5QjBhSEpsWVdRdUNnQkZibVFnZEhKaFkydHBibWNnZEdoeVpXRmtMZ29BUkdWMFpXTjBaV1FnY0dGblpTQWxaQzRLQUVSbGRHVmpkR1ZrSUdKaFpDQndZV2RsSUNWa0xnb0FSWEp5YjNJZ2MzUmhjblJwYm1jZ2RISmhZMnRwYm1jZ2RHaHlaV0ZrT2lCbGJYQjBlU0JVU0ZKRlFVUmZTRUZPUkV4RlgxUXVDZ0JVY21GamEyVmtJSEJoWjJVZ0pXUWdLRzFoZUNBbFpDa3VDZ0FxS2lvZ1EyRnRaWEpoSUZCaGNtRnRaWFJsY2lBcUtpb0tBQ29xS2lCRFlXMWxjbUVnVUdGeVlXMWxkR1Z5SUhKbGMybDZaV1FnWm5KdmJTQWxaQ3dnSldRdUlDb3FLZ29BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0J3WVdkbElHUmxkR1ZqZEdWa0lISmxkRG9nSldRZ0NnQUpBRTVUZEROZlh6STRiM0IwYVc5dVlXeEpUbE5mTVRKaVlYTnBZMTl6ZEhKcGJtZEpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGVGxOZk9XRnNiRzlqWVhSdmNrbGpSVVZGUlVWRkFFNVRkRE5mWHpJeU4xOWZiM0IwYVc5dVlXeGZiVzkyWlY5aGMzTnBaMjVmWW1GelpVbE9VMTh4TW1KaGMybGpYM04wY21sdVowbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZPVTE4NVlXeHNiMk5oZEc5eVNXTkZSVVZGVEdJd1JVVkZBRTVUZEROZlh6SXlOMTlmYjNCMGFXOXVZV3hmWTI5d2VWOWhjM05wWjI1ZlltRnpaVWxPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRHSXdSVVZGQUU1VGRETmZYekl5TUY5ZmIzQjBhVzl1WVd4ZmJXOTJaVjlpWVhObFNVNVRYekV5WW1GemFXTmZjM1J5YVc1blNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVTVUWHpsaGJHeHZZMkYwYjNKSlkwVkZSVVZNWWpCRlJVVUFUbE4wTTE5Zk1qSXdYMTl2Y0hScGIyNWhiRjlqYjNCNVgySmhjMlZKVGxOZk1USmlZWE5wWTE5emRISnBibWRKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlRsTmZPV0ZzYkc5allYUnZja2xqUlVWRlJVeGlNRVZGUlFCT1UzUXpYMTh5TWpOZlgyOXdkR2x2Ym1Gc1gzTjBiM0poWjJWZlltRnpaVWxPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRHSXdSVVZGQUU1VGRETmZYekl5TkY5ZmIzQjBhVzl1WVd4ZlpHVnpkSEoxWTNSZlltRnpaVWxPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRHSXdSVVZGQUFBQTZDRUJBSytLQUFBUUlnRUFUWW9BQUJTTEFBQVFJZ0VBN29rQUFCeUxBQUFRSWdFQWo0a0FBQ2lMQUFBUUlnRUFLWWtBQURTTEFBQVFJZ0VBdzRnQUFFQ0xBQUJPVTNRelgxOHlNVGhmWDNObWFXNWhaVjlqZEc5eVgySmhjMlZKVEdJeFJVeGlNVVZGUlFBQTZDRUJBRmlMQUFCT1UzUXpYMTh5TWpCZlgzTm1hVzVoWlY5aGMzTnBaMjVmWW1GelpVbE1ZakZGVEdJeFJVVkZBQUFBQU9naEFRQ0lpd0FBYkNJQkFIV0lBQUFBQUFBQUF3QUFBRXlMQUFBQUFBQUFnSXNBQUFBQUFBQzBpd0FBQUFBQUFFNVRkRE5mWHpJeE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRkFBRG9JUUVBNUlzQUFFNVRkRE5mWHpJMmRtVmpkRzl5U1U1VFh6RXlZbUZ6YVdOZmMzUnlhVzVuU1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVNVRYemxoYkd4dlkyRjBiM0pKWTBWRlJVVk9VelJmU1ZNMlgwVkZSVVVBQUFEb0lRRUFMSXdBQUZCT1UzUXpYMTh5Tm5abFkzUnZja2xPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRsTTBYMGxUTmw5RlJVVkZBQURJSWdFQWpJd0FBQUFBQUFDRWpBQUFVRXRPVTNRelgxOHlOblpsWTNSdmNrbE9VMTh4TW1KaGMybGpYM04wY21sdVowbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZPVTE4NVlXeHNiMk5oZEc5eVNXTkZSVVZGVGxNMFgwbFRObDlGUlVWRkFNZ2lBUUQwakFBQUFRQUFBSVNNQUFCd2NBQjJBSFp3QU9TTUFBQWtJUUVBNUl3QUFDU01BQUIyY0hCd0FBQUFBQUFBQUFBa0lRRUE1SXdBQUtnaEFRQWtqQUFBZG5Cd2NIQUFBQUNvSVFFQVRJMEFBSEJ3Y0FDOGl3QUFoSXdBQUtnaEFRQndjSEJ3QUFBQUFBQUFBQUFBQUFBQVBDRUJBSVNNQUFDb0lRRUFKSXdBQUdsd2NIQndBRTVUZEROZlh6STRiM0IwYVc5dVlXeEphVVZGQUU1VGRETmZYekl5TjE5ZmIzQjBhVzl1WVd4ZmJXOTJaVjloYzNOcFoyNWZZbUZ6WlVscFRHSXhSVVZGQUU1VGRETmZYekl5TjE5ZmIzQjBhVzl1WVd4ZlkyOXdlVjloYzNOcFoyNWZZbUZ6WlVscFRHSXhSVVZGQUU1VGRETmZYekl5TUY5ZmIzQjBhVzl1WVd4ZmJXOTJaVjlpWVhObFNXbE1ZakZGUlVVQVRsTjBNMTlmTWpJd1gxOXZjSFJwYjI1aGJGOWpiM0I1WDJKaGMyVkphVXhpTVVWRlJRQk9VM1F6WDE4eU1qTmZYMjl3ZEdsdmJtRnNYM04wYjNKaFoyVmZZbUZ6WlVscFRHSXdSVVZGQUU1VGRETmZYekl5TkY5ZmIzQjBhVzl1WVd4ZlpHVnpkSEoxWTNSZlltRnpaVWxwVEdJeFJVVkZBT2doQVFDNmpnQUFFQ0lCQUpHT0FBRGtqZ0FBRUNJQkFHdU9BQURzamdBQUVDSUJBRVdPQUFENGpnQUFFQ0lCQUJpT0FBQUVqd0FBRUNJQkFPdU5BQUFRandBQWJDSUJBTmFOQUFBQUFBQUFBd0FBQUJ5UEFBQUFBQUFBZ0lzQUFBQUFBQUMwaXdBQUFBQUFBRTVUZEROZlh6STJkbVZqZEc5eVNXbE9VMTg1WVd4c2IyTmhkRzl5U1dsRlJVVkZBT2doQVFCUWp3QUFVRTVUZEROZlh6STJkbVZqZEc5eVNXbE9VMTg1WVd4c2IyTmhkRzl5U1dsRlJVVkZBQUFBQU1naUFRQjhqd0FBQUFBQUFIU1BBQUJRUzA1VGRETmZYekkyZG1WamRHOXlTV2xPVTE4NVlXeHNiMk5oZEc5eVNXbEZSVVZGQUFBQXlDSUJBTFNQQUFBQkFBQUFkSThBQUtTUEFBQWtJUUVBcEk4QUFJUWhBUUIyY0hCcEFBQUFBQUFBQUFBQUFBQUFBQUFBQUNRaEFRQ2tqd0FBcUNFQkFJUWhBUUIyY0hCd2FRQUFBS2doQVFEY2p3QUFLSThBQUhTUEFBQ29JUUVBQUFBQUFEd2hBUUIwandBQXFDRUJBSVFoQVFCcGNIQndhUUJPVTNRelgxOHlPRzl3ZEdsdmJtRnNTVGx1Wm5STllYSnJaWEpGUlFCT1UzUXpYMTh5TWpkZlgyOXdkR2x2Ym1Gc1gyMXZkbVZmWVhOemFXZHVYMkpoYzJWSk9XNW1kRTFoY210bGNreGlNVVZGUlFCT1UzUXpYMTh5TWpkZlgyOXdkR2x2Ym1Gc1gyTnZjSGxmWVhOemFXZHVYMkpoYzJWSk9XNW1kRTFoY210bGNreGlNVVZGUlFCT1UzUXpYMTh5TWpCZlgyOXdkR2x2Ym1Gc1gyMXZkbVZmWW1GelpVazVibVowVFdGeWEyVnlUR0l4UlVWRkFFNVRkRE5mWHpJeU1GOWZiM0IwYVc5dVlXeGZZMjl3ZVY5aVlYTmxTVGx1Wm5STllYSnJaWEpNWWpGRlJVVUFUbE4wTTE5Zk1qSXpYMTl2Y0hScGIyNWhiRjl6ZEc5eVlXZGxYMkpoYzJWSk9XNW1kRTFoY210bGNreGlNRVZGUlFCT1UzUXpYMTh5TWpSZlgyOXdkR2x2Ym1Gc1gyUmxjM1J5ZFdOMFgySmhjMlZKT1c1bWRFMWhjbXRsY2t4aU1VVkZSUUFBNkNFQkFIQ1JBQUFRSWdFQVBwRUFBS1NSQUFBUUlnRUFENUVBQUt5UkFBQVFJZ0VBNEpBQUFMaVJBQUFRSWdFQXFwQUFBTVNSQUFBUUlnRUFkSkFBQU5DUkFBQnNJZ0VBVnBBQUFBQUFBQUFEQUFBQTNKRUFBQUFBQUFDQWl3QUFBQUFBQUxTTEFBQUFBQUFBT1c1bWRFMWhjbXRsY2dBQTZDRUJBQkNTQUFCT1UzUXpYMTh5Tm5abFkzUnZja2s1Ym1aMFRXRnlhMlZ5VGxOZk9XRnNiRzlqWVhSdmNrbFRNVjlGUlVWRkFBRG9JUUVBSkpJQUFGQk9VM1F6WDE4eU5uWmxZM1J2Y2trNWJtWjBUV0Z5YTJWeVRsTmZPV0ZzYkc5allYUnZja2xUTVY5RlJVVkZBTWdpQVFCY2tnQUFBQUFBQUZTU0FBQlFTMDVUZEROZlh6STJkbVZqZEc5eVNUbHVablJOWVhKclpYSk9VMTg1WVd4c2IyTmhkRzl5U1ZNeFgwVkZSVVVBQUFBQXlDSUJBSnlTQUFBQkFBQUFWSklBQUl5U0FBQWtJUUVBakpJQUFCeVNBQUFrSVFFQWpKSUFBS2doQVFBY2tnQUFxQ0VCQU5DU0FBRG9rUUFBVkpJQUFLZ2hBUUFBQUFBQUFBQUFBQUFBQUFBOElRRUFWSklBQUtnaEFRQWNrZ0FBTVRKQlVsUnZiMnhMYVhST1JsUUFBT2doQVFBd2t3QUFVREV5UVZKVWIyOXNTMmwwVGtaVUFNZ2lBUUJJa3dBQUFBQUFBRUNUQUFCUVN6RXlRVkpVYjI5c1MybDBUa1pVQUFBQUFNZ2lBUUJva3dBQUFRQUFBRUNUQUFCWWt3QUFoQ0VCQUZpVEFBQnBjSEFBdkpNQUFGaVRBQUNFSVFFQVRqRXdaVzF6WTNKcGNIUmxiak4yWVd4RkFBRG9JUUVBcUpNQUFIQndjR2tBQUFBQUhKSUFBRmlUQUFDRUlRRUFoQ0VCQUZpVEFBQWtqQUFBYVhCd2NBQUFBQUFBQUFBQWhDRUJBRmlUQUFDRUlRRUFoQ0VCQUlRaEFRQnBjSEJwYVdrQUFMeVRBQUJZa3dBQWNIQndBQUFBQUFBQUFBQUFoQ0VCQUZpVEFBQzhrd0FBdkpNQUFEd2hBUUJwY0hCd2NHa0FBQUFBQUFDRUlRRUFXSk1BQUNTTUFBQWtqQUFBYVhCd2NIQUFBQUIwandBQVdKTUFBSVNNQUFCd2NIQndBQUFBQUNRaEFRQllrd0FBaENFQkFDUWhBUUJZa3dBQTJDRUJBSFp3Y0dRQUFBQUEyQ0VCQUZpVEFBQmtjSEFBaENFQkFGaVRBQUNFSVFFQWFYQndhUUJ3QUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1doRlJRQUFBT2doQVFDcmxBQUFKQ0VCQUx5VEFBQWtJUUVBekNFQkFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXWkZSUUFBNkNFQkFPU1VBQUFrSVFFQTJDRUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ1dNQWQzTEdFTzdycFJDWmtaeEcwSGovUnFjRFdsWSttamxXU2VNb2piRHFTNDNIa2U2ZFhnaU5uU2x5dE10Z205ZkxGK0J5MjQ1NUVkdjVCa0VMY2Q4aUN3YWtoeHVmUGVRYjZFZmRUYUd1dmszVzFSdGRUMHg0WFRnMWFZYkJQQXFHdGtldmxpL2V6SlpZcFBYQUVVMld3R1kyTTlEL3IxRFFpTnlDQnVPMTRRYVV6a1FXRFZjbkZub3RIa0F6eEgxQVJML1lVTjBtdTFDcVg2cUxVMWJKaXlRdGJKdTl0QStieXM0MnpZTW5WYzMwWFBEZGJjV1QzUnE2d3cyU1k2QU41UmdGSFh5QlpoMEwrMTlMUWhJOFN6VnBtVnVzOFBwYjI0bnJnQ0tBaUlCVit5MlF6R0pPa0xzWWQ4Ynk4UlRHaFlxeDFod1QwdFpyYVFRZHgyQm5IYkFid2cwcGdxRU5YdmlZV3hjUisxdGdhbDVMK2ZNOVM0NktMSkIzZzArUUFQanFnSmxoaVlEdUc3RFdwL0xUMXRDSmRzWkpFQlhHUG05RkZyYTJKaGJCellNR1dGVGdCaTh1MlZCbXg3cFFFYndmUUlnbGZFRC9YRzJiQmxVT20zRXVxNHZvdDhpTG44M3gzZFlra3QyaFh6Zk5PTVpVelUrMWhoc2szT1ViVTZkQUM4bytJd3U5UkJwZDlLMTVYWVBXM0UwYVQ3OU5iVGF1bHBRL3paYmpSR2lHZXQwTGhnMm5NdEJFVGxIUU16WDB3S3FzbDhEZDA4Y1FWUXFrRUNKeEFRQzc2R0lBekpKYlZvVjdPRmJ5QUoxR2E1bitSaHpnNzUzbDZZeWRrcElwalFzTFNvMThjWFBiTlpnUTIwTGp0Y3ZiZXRiTHJBSUlPNDdiYXp2NW9NNHJZRG10S3hkRGxIMWVxdmQ5S2RGU2JiQklNVzNITVNDMlBqaER0a2xENXFiUTJvV21wNkM4OE81SjMvQ1pNbnJnQUtzWjRIZlVTVEQvRFNvd2lIYVBJQkh2N0NCbWxkVjJMM3kyZGxnSEUyYkJubkJtdHVkaHZVL3VBcjA0bGFldG9RekVyZFoyL2Z1Zm41Nzc2T1E3NjNGOVdPc0dEb285YldmcFBSb2NUQzJEaFM4dDlQOFdlNzBXZFh2S2JkQnJVL1N6YXlTTm9yRGRoTUd3cXY5a29ETm1CNkJFSEQ3MkRmVmQ5bnFPK09iakY1dm1sR2pMTmh5eHFEWnJ5ZzBtOGxOdUpvVXBWM0RNd0RSd3U3dVJZQ0lpOG1CVlcrTzdyRktBdTlzcEphdENzRWFyTmNwLy9Yd2pIUDBMV0xudGtzSGE3ZVc3RENaSnNtOG1Qc25LTnFkUXFUYlFLcEJnbWNQellPNjRWbkIzSVRWd0FGZ2txL2xSUjZ1T0t1SzdGN09CdTJESnVPMHBJTnZ0WGx0Ky9jZkNIZjJ3dlUwdE9HUXVMVThmaXozV2h1ZzlvZnpSYStnVnNtdWZiaGQ3QnZkMGUzR09aYUNJaHdhZy8veWpzR1psd0xBUkgvbm1XUGFhNWkrTlAvYTJGRnoyd1dlT0lLb083U0RkZFVnd1JPd3JNRE9XRW1aNmYzRm1EUVRVZHBTZHQzYmo1S2F0R3UzRnJXMldZTDMwRHdPOWczVTY2OHFjV2V1OTUvejdKSDZmKzFNQnp5dmIyS3dycktNSk96VTZhanRDUUZOdEM2a3diWHpTbFgzbFMvWjlrakxucG1zN2hLWWNRQ0cyaGRsQ3R2S2plK0M3U2hqZ3pERzk4RldvM3ZBaTBBQUFBQVFURWJHWUppTmpMRFV5MHJCTVZzWkVYMGQzMkdwMXBXeDVaQlR3aUsyY2hKdThMUml1anYrc3ZaOU9NTVQ3V3NUWDZ1dFk0dGc1N1BISmlIVVJMQ1NoQWoyVlBUY1BSNGtrSHZZVlhYcmk0VTVyVTMxN1dZSEphRWd3VlptQnVDR0trQW05djZMYkNheXphcFhWMTM1aHhzYlAvZlAwSFVuZzVhemFJa2hKWGpGWitNSUVheXAyRjNxYjZtNGVqeDU5RHo2Q1NEM3NObHNzWGFxcTVkWGV1ZlJrUW96R3R2YWYxd2RxNXJNVG52V2lvZ0xBa0hDMjA0SEJMek5rYmZzZ2RkeG5GVWNPMHdaV3YwOS9NcXU3YkNNYUoxa1J5Sk5LQUhrUHU4bnhlNmpZUU9lZDZwSlRqdnNqei9lZk56dmtqb2FuMGJ4VUU4S3Q1WUJVOTU4RVIrWXVtSExVL0N4aHhVMndHS0ZaUkF1dzZOZytnanBzTFpPTDhOeGFBNFRQUzdJWStubGdyT2xvMFRDUURNWEVneDEwV0xZdnB1eWxQaGQxUmR1N29WYktDajFqK05pSmNPbHBGUW1OZmVFYW5NeDlMNjRleVR5L3IxWE5kaWNoM21lV3ZldFZSQW40UlBXVmdTRGhZWkl4VVAybkE0Skp0Qkl6Mm5hLzFsNWxybWZDVUp5MWRrT05CT282NlJBZUtmaWhnaHpLY3pZUDI4S3EvaEpLM3UwRCswTFlNU24yeXlDWWFySkVqSjZoVlQwQ2xHZnZ0b2QyWGk5bmsvTDdkSUpEWjBHd2tkTlNvU0JQSzhVMHV6alVoU2NONWxlVEh2Zm1EKzgrYm52OEw5L255UjBOVTlvTXZNK2phS2c3c0hrWnA0Vkx5eE9XV25xRXVZZ3pzS3FaZ2l5ZnExQ1lqTHJoQlBYZTlmRG16MFJzMC8yVzJNRHNKMFF4SmE4d0lqUWVyQmNHekJnRUYzMkVmWE5wY0c1aTJPeGJVQXBZU0VHN3dhaWtGeFc3dGFhSmpvZDBQWjJXeGFIazh0RlY5K05neWNMUnNuM1J3QVBoSUFtTGxUTVlPZ2tHS3VpOUZUdFpJV3hmVGRWL1R2eEpTbnd1L1ZsdG4yNmJ3SHJxaU5ITGRyM2pHY0t1OHFoZTE1YThxc1NIRFRieHRkK0M0cVJ1SGhOdDVtb0FmRmYyTlU2RlFpWmZOTjVmT3lBcVRDcVJ0bmtZUXdKcUNmS2JpdXhlVDVuOTc5T3N6ejFudjk2TSs4YTZtQS9WcXltVDRKbjdKL09JU3JzQ1FjTFBFVkJ6VXlSaW9lYzNjeEI3VGhjRWoxMEd0Uk5vTkdlbmV5WFdOTzEvckxEK2JoMHN5MXpQbU5oTmZnU2hLV3J3c2pqYmJJY0tDZGlVRzdoRVpkSXdNSGJEZ2F4RDhWTVlVT0RpaENtRTluQTZsVWZzRDZlVldCeTJKTUg4VTRnVjcwSTVpZHB3NnozSllWcWhzQVZPVmFNVS84bVdKaTE5aFRlYzRYVCtGSlZuNzZVSlV0MTN2VUhNeGlFNHFOTFZLN2xqU1I2THNmME5tZ0J1enpmbDZ0d21WSGJwRkliQytnVTNYb05oSTZxUWNKSTJwVUpBZ3JaVDhSNUhtbmxxVkl2STltRzVHa0p5cUt2ZUM4eS9LaGpkRHJZdDc5d0NQdjV0bTk0YndVL05DbkRUK0RpaVorc3BFL3VTVFFjUGdWeTJrN1J1WkNlbmY5VzdWclpkejBXbjdGTndsVDduWTRTUGV4cmdtNDhKOFNvVFBNUDRweS9TU1RBQUFBQURkcXdnRnUxSVFEV2I1R0F0eW9DUWZyd3NzR3NueU5CSVVXVHdXNFVSTU9qenZSRDlhRmx3M2g3MVVNWlBrYUNWT1QyQWdLTFo0S1BVZGNDM0NqSmh4SHllUWRIbmVpSHlrZFlCNnNDeThibTJIdEdzTGZxeGoxdFdrWnlQSTFFditZOXhPbUpyRVJrVXh6RUJSYVBCVWpNUDRVZW82NEZrM2tlaGZnUmswNDF5eVBPWTZTeVR1NStBczZQTzVFUHd1RWhqNVNPc0E4WlZBQ1BWZ1hYalp2Zlp3M05zUGFOUUdwR0RTRXYxY3hzOVdWTU9wcjB6TGRBUkV6a09WckpLZVBxU1grTWU4bnlWc3RKa3hOWWlON0o2QWlJcG5tSUJYekpDRW90SGdxSDk2NkswWmcvQ2x4Q2o0bzlCeHhMY04yc3l5YXlQVXVyYUkzTDhDTm1uRDM1MWh4cmxrZWM1a3ozSEljSlpOM0swOVJkbkx4RjNSRm05VjFlTnlKZmsrMlMzOFdDQTE5SVdMUGZLUjBnSG1USGtKNHlxQUVldjNLeG51d0xyeHNoMFIrYmQ3Nk9HL3BrUHB1YklhMWExdnNkMm9DVWpGb05UanphUWgvcjJJL0ZXMWpacXNyWVZIQjZXRFUxNlpsNDcxa1pMb0RJbWFOYWVCbklNdlhTQmVoRlVsT0gxTkxlWFdSU3Z4ajNrL0xDUnhPa3JkYVRLWGRtRTJZbXNSR3IvQUdSL1pPUUVYQkpJSkVSRExOUVhOWUQwQXE1a2xDSFl5TFExQm84VlJuQWpOVlByeDFWd25XdDFhTXdQaFR1Nm82VXVJVWZGRFZmcjVSNkRuaVd0OVRJRnVHN1daWnNZZWtXRFNSNjEwRCt5bGNXa1Z2WG0wdnJWK0FHelhodDNIMzRPN1BzZUxacFhQalhMTTg1bXZaL3VjeVo3amxCUTE2NURoS0p1OFBJT1R1VnA2aTdHSDBZTzNrNGkvbzA0anQ2WW8ycSt1OVhHbnE4TGdUL2NmUzBmeWViSmYrcVFaVi95d1FHdm9iZXRqN1FzU2UrWFd1WFBoSTZRRHpmNFBDOGlZOWhQQVJWMGJ4bEVFSjlLTXJ5L1g2bFkzM3pmOVA5bUJkZU5sWE43cllEb244MmpualB0dTg5WEhlaTUrejM5SWg5ZDNsU3pmYzJBeHIxKzltcWRhMjJPL1VnYkl0MVFTa1l0QXp6cURSYW5EbTAxMGFKTklRL2w3Rko1U2N4SDRxMnNaSlFCakh6RlpYd3ZzOGxjT2lndFBCbGVnUndLaXZUY3VmeFkvS3hudkp5UEVSQzhsMEIwVE1RMjJHelJyVHdNOHR1UUxPUUphdmtYZjhiWkF1UWl1U0dTanBrNXcrcHBhclZHU1g4dW9pbGNXQTRKVDR4N3lmejYxK25wWVRPSnloZWZxZEpHKzFtQk1GZDVsS3V6R2JmZEh6bWpBMWlZMEhYMHVNWHVFTmptbUx6NC9zbllDSzIvZENpNEpKQkltMUk4YUlpR1NhZzc4T1dJTG1zQjZBMGRyY2dWVE1rNFJqcGxHRk9oZ1hodzF5MVlhZzBPS3BsN29ncU00RVpxcjVicVNyZkhqcnJrc1NLYThTckcrdEpjYXRyQmlCOGFjdjZ6T21kbFYxcEVFL3Q2WEVLZmlnODBNNm9hcjlmS09kbDc2aTBIUEV0ZWNaQnJTK3AwQzJpYzJDdHd6YnpiSTdzUSt6WWc5SnNWVmxpN0JvSXRlN1gwZ1Z1Z2IyVTdneG5KRzV0SXJldklQZ0hMM2FYbHEvN1RTWXZnQUFBQUJsWjd5NGk4Z0pxdTZ2dFJKWGwyS1BNdkRlTjl4ZmF5VzVPTmVkN3lpMHhZcFBDSDFrNEwxdkFZY0IxN2kvMWtyZDJHcnlNM2ZmNEZZUVkxaWZWeGxRK2pDbDZCU2ZFUHB4K0t4Q3lNQjczNjJueDJkRENISjFKbS9PelhCL3JaVVZHQkV0Kzdla1A1N1FHSWNuNk04YVFvOXpvcXdneHJESlIzb0lQcTh5b0Z2SWpoaTFaenNLMEFDSHNtazRVQzhNWCt5WDR2QlpoWWVYNVQzUmg0Wmx0T0E2M1ZwUGo4OC9LRE4zaGhEazZ1TjNXRklOMk8xQWFMOVIrS0g0Sy9ERW41ZElLakFpV2s5WG51TDJiMGwva3dqMXgzMm5RTlVZd1B4dFR0Q2ZOU3UzSTQzRkdKYWZvSDhxSnhsSC9icDhJRUVDa28vMEVQZm9TS2c5V0JTYldEK29JN2FRSFRIVDk2R0phczkyRkErb3lxemhCMysraEdEREJ0SndvRjYzRnh6bVdiaXA5RHpmRlV5RjU4TFI0SUIrYVE0dnkzdHJTSGZEb2c4Tnk4ZG9zWE1weHdSaFRLQzQyZldZYjBTUS85UDhmbEJtN2hzMzJsWk5KN2tPS0VBRnRzYnZzS1NqaUF3Y0dyRGJnWC9YWnptUmVOSXI5Qjl1a3dQM0pqdG1rSnFEaUQ4dmtlMVlreWxVWUVTME1RZjRETitvVFI2NnovR203TitTL29tNExrWm5GNXRVQW5BbjdMdEk4SEhlTDB6Sk1JRDUyMVhuUldPY29EOXIrY2VEMHhkb05zRnlENHA1eXpkZDVLNVE0VnhBLzFST0paam85bk9JaTY0Vzd6Y1crRUNDQkowblByd2tIK2toUVhoVm1hL1g0SXZLc0Z3ek83Wlo3VjdSNVZXd2ZsQkgxUm5zLzJ3aE8ySUpSb2ZhNStreXlJS09qbkRVbnUwb3NmbFJrRjlXNUlJNk1WZzZnd21QcCtadU14OEl3WVlOYmFZNnRhVGhRTDNCaHZ3Rkx5bEpGMHBPOWEvemRpSXlsaEdlaW5pK0s1Z2QyWmNnUzhuMGVDNnVTTURBQWYzU3BXWkJhaHhlbHZkNU9TcFBsNWFmWGZMeEkrVUZHV3ROWUg3WDlZN1JZdWZydHQ1ZlVvNEp3amZwdFhyWlJnQm92Q0c4ME9veDM0aVBWbU13WWZuV0lnU2VhcHE5cHIwSDJNRUJ2elp1dEsxVENRZ1ZtazV5SGY4cHpxVVJobnUzZE9ISEQ4M1pFSktvdnF3cVJoRVpPQ04ycFlCMVpzYllFQUY2WVA2dXozS2J5WFBLSXZHa1YwZVdHTytwT2EzOXpGNFJSUWJ1VFhaamlmSE9qU1pFM09oQitHUlJlUy81TkI2VFFkcXhKbE8vMXBycjZjYjVzNHloUlF0aUR2QVpCMmxNb2I1Um16emJOaWVFTlptU2xsRCtMaTZadVZRbS9ON29uaEp4WFl4M0Z1RTB6aTQycWF0SmloRkY1ajhESUlHRHUzYVI0T01UOWx4Yi9WbnBTWmcrVmZFaEJvSnNSR0UrMUtyT2k4YlBxVGQrT0VGLzFsMG13MjZ6aVhaODF1N0t4Ry9XSFZrS3NhSGg1QjRVODRGNXFFdlhhY3NUc2c1M3ExeWh3cms1eG40QmdQNnBuT1daRlNRTE5xQTJibEVjanFjV1pvYkNjZG8rTE41dkxFbTUwNVR3Z1FRSmxlYTRzWHRKRGFNZUxyRWJTRDdTUXkxWmJ2dkQ5dHZwcHBGblVSK3BzTXg2emd4MGxHRzVadkVHQmQ0QUFBQUFkd2N3bHU0T1lTeVpDVkc2QjIzRUdYQnE5SS9wWTZVMW5tU1ZvdzdiaURKNTNMaWs0TlhwSHBmUzJZZ0p0a3dyZnJGOHZlZTRMUWVRdngyUkhiY1FaR3F3SVBMenVYRkloTDVCM2hyYTFIMXQzZVRyOU5TMVVZUFRoY2NUYkpoV1pHdW93UDFpK1hxS1pjbnNGQUZjVDJNR2JObjZEejFqalFnTjlUdHVJTWhNYVJCZTFXQkI1S0puY1hJOEErVFJTd1RVUjlJTmhmMmxDclZyTmJXbytrS3ltR3pidThuV3JMejVRRExZYk9ORjMxeDEzTllOejZ2UlBWa20yVENzVWQ0QU9zalhVWUMvMEdFV0liVDB0VmF6eENQUHVwV1p1TDJsRHlnQ3VKNWZCWWdJeGd6WnNyRUw2U1F2YjN5SFdHaE1FY0ZoSGF1MlppMDlkdHhCa0FIYmNRYVkwaUM4NzlVUUtuR3hoWWtHdHJVZm43L2twZWk0MURONEI4bWlEd0Q1TkpZSnFJN2hEcGdZZjJvTnV3aHRQUzJSWkd5WDVtTmNBV3RyVWZRY2JHRmloV1V3MlBKaUFFNXNCcFh0R3dHbGU0SUk5TUgxRDhSWFpiRFp4aEszNlZDTHZyanEvTG1JZkdMZEhkOFYyaTFKak5OODgvdlVUR1ZOc21GWU9yVlJ6cU84QUhUVXV6RGlTdCtsUVQzWWxkZWswY1J0MDliMCswTnA2V28wYnRuOHJXZUlSdHBndU5CRUJDMXpNd01kNWFvS1RGL2REWHpKVUFWeFBDY0NRYXErQ3hBUXlRd2dobGRvdFNVZ2I0V3p1V2JVQ2M1aDVKOWUzdmtPS2RuSm1MRFFtQ0xIMTZpMFdiTTlGeTYwRFlHM3ZWdzd3THBzcmUyNGd5Q2F2N08yQTdiaURIU3gwcHJxMVVjNW5kSjNyd1RiSmhWejNCYUQ0Mk1MRXBSa080UU5iV28rZW1wYXFPUU96d3VUQ2YrZENnQ3VKMzBIbnJId0Q1TkVod2lqMGg0QjhtaHBCc0wrOTJKWFhZQmxaOHNaYkRaeGJtc0c1LzdVRzNhSjB5dmdFTnA2V21mZFNzejV1ZDl2anI3ditSZTN2a05nc0k3VjF0YWo2S0hSazM0NDJNTEVUOS95VXRHN1ovR212RmRuUDdVRzNVaXlOa3ZZRFN2YXJ3b2JURFlEU3ZaQkJIcGczMkR2dzZobjMxVXhibzd2Um1tK2VjdGhzNHk4Wm9NYUpXL1NvRkpvNGpiTURIZVZ1d3RIQXlJQ0ZybFZCU1l2eGJvN3ZySzlDeWdydEZxU1hMTnFCTUxYLzZlMTBNOHhMTm1laTF2ZXJoMmJaTUt3N0dQeUpuVnFvNXdDYlpNS25Ba0dxZXNPTmo5eUIyZUZCUUJYRTVXL1NvTGl1SG9VZTdFcnJneTJHemlTMG82YjVkVytEWHpjNzdjTDI5OGhodFBTMVBIVTRrSm8zYlA0SDlxRGJvRytGczMydVNaYmI3QjM0UmkzUjNlSUNGcm0vdzlxY0dZR084b1JBUXRjajJXZS8vaGlybWxoYS8vVEZtelBSYUFLNG5qWERkTHVUZ1NEVkRrRHM4S25aeVpoMEdBVzkwbHBSMDArYm5mYnJ0RnFTdG5XV3R4QTN3dG1OOWc3OEttOHJsUGV1NTdGUjdMUGZ6QzEvK205dmZJY3lyckNpbE96a3pBa3RLT211dEEyQmMzWEJwTlUzbGNwSTlsbnY3Tm1laTdFWVVxNFhXZ2JBaXB2SzVTMEM3NDN3d3lPb1ZvRjN4c3RBdStOQUFBQUFCa2JNVUV5Tm1LQ0t5MVR3MlJzeFFSOWQvUkZWbHFuaGs5QmxzZkkyWW9JMGNLN1NmcnY2SXJqOU5uTHJMVlBETFd1ZmsyZWd5Mk9oNWdjejByQ0VsRlQyU01RZVBSdzAySHZRWkl1cnRkVk43WG1GQnlZdGRjRmc0U1dnaHVZV1pzQXFSaXdMZnJicVRiTG11WjNYVjMvYkd3YzFFRS8zODFhRHA2VmhDU2lqSjhWNDZleVJpQytxWGRoOGVqaHB1anowT2ZEM29NazJzV3laVjFkcnFwRVJwL3JiMnZNS0hady9XazVNV3V1SUNwYTd3c0hDU3dTSERodDMwWTI4OFpkQjdMdGNGUng5R3RsTUxzcTgvZWlNY0syaVJ5UmRaQUhvRFFYbjd6N0RvU051aVdwM25rOHN1ODRjL041LzJyb1NMNUJ4UnQ5V040cVBQQjVUd1hwWW41RXdrOHRoOXRVSE1hVUZZb0JqUTY3UUtZajZJTy9PTm5DT0tERkRTRzc5RXdLbHFlUEU0Mld6bHpNQUFsRjF6RklidnBpaTNmaFU4cTZ1MTFVbzZCc0ZZaU5QOWFSbGc2WDN0ZVlVTWZNcVJIczRmclM5ZnJMazNKaTExeHJlZVlkUUZTMTNsbFBoSjhXRGhKWUR4VWpHU1E0Y05vOUkwR2JaZjFycDN6bVd1Wlh5d2tsVHRBNFpBR1JycU1ZaXAvaU02Zk1JU3E4L1dDdEpPR3Z0RC9RN3A4U2d5MkdDYkpzeVVna3E5QlRGZXI3ZmtZcDRtVjNhQzgvZWZZMkpFaTNIUWtiZEFRU0tqVkxVN3p5VWtpTnMzbGwzbkJnZnU4eDUrYnovdjc5d3IvVjBKRjh6TXVnUFlPS052cWFrUWU3c2J4VWVLaW5aVGs3ZzVoTElwaXBDZ20xK3NrUXJzdUlYKzlkVDBiMGJBNXQyVC9OZE1JT2pQTmFFa1BxUVNNQ3dXeHd3ZGgzUVlDWE50ZEhqaTNtQnFVQXRjVzhHNFNFY1VHS0dtaGF1MXREZCtpWVdteloyUlV0VHg0TU5uNWZKeHN0bkQ0QUhOMjVtQUFTb0lNeFU0dXVZcENTdFZQUjNmVEZGc1R2OUZmdndxZVU5dG1XMWE0SHZPbTNISTJvbkRIZWE0VXE3eXJLYTNudDAzQklyUGhkRzIvaFJpb3VadDQyNFgvRkI2QlU2RlJqVGZObElnS3k4K1VicWNLa01JU1JaeW1mb0Nia3hhNjQvZDZmK2RienpEclA2UDE3Z0tscnZKbXlXdjJ5bndrK3E0UTRmeXdjSkxBMUJ4WHhIaXBHTWdjeGQzTkljT0cwVVd2UTlYcEdnelpqWGJKM3kvclhUdExoNWcvNXpMWE00TmVFamErV0VrcTJqU01MbmFCd3lJUzdRWWtESTExR0dqaHNCekVWUDhRb0RnNkZaMCtZUW41VXFRTlZlZnJBVEdMTGdZRTR4UitZSS9SZXN3Nm5uYW9WbHR6bFZBQWIvRTh4V3RkaVlwbk9lVlBZU2VGUEYxRDZmbFo3MXkyVllzd2MxQzJOaWhNMGxydFNIN3Zva1FhZzJkQmVmdlBzUjJYQ3JXeElrVzUxVTZBdk9oSTI2Q01KQjZrSUpGUnFFVDlsSzVhbmVlU1B2RWlscEpFYlpyMktLaWZ5eTd6ZzY5Q05vY0Q5M21MWjV1OGpGTHpodlEybjBQd21pb00vUDVHeWZuRFFKTGxweXhYNFF1WkdPMXY5ZDNyY1pXdTF4WDVhOU81VENUZjNTRGgydUFtdXNhRVNuL0NLUDh3emt5VDljZ0FBQUFBQndtbzNBNFRVYmdKR3Zsa0hDYWpjQnN2QzZ3U05mTElGVHhhRkRoTlJ1QS9STzQ4Tmw0WFdERlh2NFFrYStXUUkySk5UQ3A0dENndGNSejBjSnFOd0hlVEpSeCtpZHg0ZVlCMHBHeThMckJydFlac1lxOS9DR1dtMTlSSTE4c2dUOTVqL0ViRW1waEJ6VEpFVlBGb1VGUDR3SXhhNGpub1hldVJOT0UxRzREbVBMTmM3eVpLT09ndjR1VDlFN2p3K2hvUUxQTUE2VWowQ1VHVTJYaGRZTjV4OWJ6WGF3elkwR0trQk1WZS9oRENWMWJNeTAydnFNeEVCM1NScjVaQWxxWStuSis4eC9pWXRXOGtqWWsxTUlxQW5leURtbVNJaEpQTVZLbmkwS0N1NjNoOHAvR0JHS0Q0S2NTMXhIUFFzczNiREx2WEltaTgzb3Exd21vM0FjVmpuOTNNZVdhNXkzRE9aZDVNbEhIWlJUeXQwRi9GeWRkV2JSWDZKM0hoL1M3WlBmUTBJRm56UFlpRjVnSFNrZUVJZWszb0VvTXA3eHNyOWJMd3VzRzErUklkdk9QcmVidnFRNld1MWhteHFkK3hiYURGU0FtbnpPRFZpcjM4SVkyMFZQMkVycTJaZzZjRlJaYWJYMUdSa3ZlTm1JZ082WitCcGpValh5eUJKRmFFWFMxTWZUa3FSZFhsUDNtUDhUaHdKeTB4YXQ1Sk5tTjJsUnNTYW1FY0c4SzlGUUU3MlJJSWt3VUhOTWtSQUQxaHpRa25tS2tPTGpCMVU4V2hRVlRNQ1oxZDF2RDVXdDlZSlUvakFqRkk2cXJ0UWZCVGlVYjUrMVZyaU9laGJJRlBmV1didGhsaWtoN0ZkNjVFMFhDbjdBMTV2UlZwZnJTOXQ0VFViZ09EM2NiZmlzYy91NDNPbDJlWThzMXpuL3RscjViaG5NdVI2RFFYdkprbzQ3dVFnRCt5aW5sYnRZUFJoNkMvaTVPbnRpTlBycXphSzZtbGN2ZjBUdVBEODBkTEgvcGRzbnY5VkJxbjZHaEFzKzloNkcvbWV4RUw0WEs1MTh3RHBTUExDZzMvd2hEMG04VVpYRWZRSlFaVDF5eXVqOTQyVit2WlAvODNaZUYxZzJMbzNWOXI4aVE3YlB1TTUzbkgxdk4rem40dmQ5U0hTM0RkTDVkZHJETmpXcVdidjFPL1l0dFV0c29IUVlxUUUwYURPTTlQbWNHclNKQnBkeFY3K0VNU2NsQ2ZHMmlwK3h4aEFTY0pYVnN6RGxUejd3ZE9Db3NBUjZKWExUYStveW8vRm44akplOGJKQ3hIeHpFUUhkTTJHYlVQUHdOTWF6Z0s1TFpHdmxrQ1FiZngza2l0Q0xwUHBLQm1XcGo2Y2wyUlVxNVVpNnZLVTRJREZuN3pIK0o1K3JjK2NPQk9XbmZwNW9aaTFieVNaZHdVVG16RzdTcHJ6MFgyTmlUVXdqRXRmQjQ0TjRWNlB6NHRwaW9DZDdJdEM5OXVKQkVtQ2lNWWp0WU9hWklpQ1dBNi9nQjZ3NW9IYzJ0R0VrOHhVaFZHbVk0Y1hHRHFHMVhJTnFlTFFvS2dndXBlcVpnVE9xNlJ1K2E3cmVIeXZLUkpMclcrc0VxeXR4aVduOFlFWXBqUHJMNlIxVlhhbHR6OUJvUGdweEtFNlEvT2pmUDJxb3I2WG5iWEVjOUMwQmhubnRrQ252cmVDellteXpkc01zdyt4TzdGSkQyS3dpMlZWdTljaWFMb1ZTRis0VS9ZR3VaR2NNYnplaXJTOUhPQ0R2MXBlMnI2WU5PMEFBQUFBdUx4blphb0p5SXNTdGEvdWoyS1hWemZlOERJbGExL2NuZGM0dWNXMEtPOTlDRStLYjczZ1pOY0Jod0ZLMXIrNDhtclkzZURmZHpOWVl4QldVQmxYbitpbE1QcjZFSjhVUXF6NGNkOTd3TWhueDZldGRYSUlRODNPYnlhVnJYOXdMUkVZRlQra3QvdUhHTkNlR3Mvb0o2SnpqMEt3eGlDc0NIcEh5YUF5cno0WWpzaGJDanRudGJLSEFOQXZVRGhwbCt4ZkRJVlo4T0k5NVplSFpZYUgwZDA2NExUUGowOWFkek1vUCtya0VJWlNXSGZqUU8zWURmaFJ2Mmp3Sy9paFNKZWZ4Rm9pTUNyaW5sZFBmMGx2OXNmMUNKUFZRS2Q5YmZ6QUdEV2YwRTZOSTdjcm41WVl4U2NxZjZDNi9VY1pBa0VnZkJEMGo1S29TT2ozbXhSWVBTT29QMWd4SFpDMmlhSDMweFIyejJxc3lxZ1B2bjhINFFiRFlJUmVvSERTNWh3WHQvU3B1RmxNRmQ4ODBjTG5oV2wrZ09CN3l5OE93M2RJYThzTkQ2SnpzV2pIWVFUSEtkbTRvRXhFYjVqMS9OUC9rTzVtVUg1VzJqY2JEcmtuVGJZRlFDaWtzTy9HSEF5SW80SGJzQm81WjlkL0s5SjRrWk51SC9RN0p2Y0RnNXFRWnBFdlA0Z3BrMWp0dEVSZ1ZBejRCekVlVGFqZnB2SFB1djZTMyt4R0xyaUpWSnNYWit3bmNBSng4RWk3eVV3djN0djVnREJqUmVkVmF6K2duTk9EeC9uQk5tZ1hlWW9QY3VSZE44dGM0VkN1VGxUL1FQYm9tQ1d1aTRoekZqZnZGZ1NDUVBpOFBpZWRJZWtmSkpsVmVFR0w0TmV2TTF5d3l1MVp0anRWNWRGZVIxQitzUC9zR2RWaU95RnMyb2RHQ2NneTZlZHdqbzZDS08yZTFKQlIrYkdDNUZaZk9sZ3hPcWVQQ1lNZk0yN21EWWJCQ0xVNnBtMjlRT0drQmZ5R3dSZEpLUyt2OVU1S01pSjI4NHFlRVphWUs3NTRJSmZaSFhqMHlVdkFTSzR1MHYwQndHcEJacVgzbGw0Y1R5bzVlVjJmbHBmbEkvSHlUV3NaQmZYWGZtRG5ZdEdPWDk2MjY4SUpqbEo2dGVrM2FBQkcyZEM4SWJ5STN6SHFNR05XanlMVytXR2FhcDRFQjcybXZiOEJ3ZGl0dEc0MkZRZ0pVeDF5VHBxbHppbi90M3VHRVEvSDRYU1NFTm5OS3F5K3FEZ1pFVWFBcFhZajJNWm1kV0I2QVJCeXo2Nyt5blBKbTFlazhTTHZHSlpIL2EwNXFVVVJYc3gyVGU0R3p2R0pZOXhFSm8xaytFSG8rUzk1VVVHVEhqUlRKckhhNjVyV3Y3UDV4dWtMUmFHTUdmQU9ZcUZNYVFjOG0xRytoQ2MyMjVhU21UVXVMdjVRSmxTNW1aN28zdnlNWFhFU05PRVdkNmsyTHM0UmlrbXJBei9tUmJ1RGdTRGo0SkYyVzF6MkUwbnBXZjN4VlQ2WWJJSUdJZFErWVVUR2k4NnFmamVwejlaL1FUaHV3eVpkZkhhSnM4VEs3dFpaSGRadjRhR3hDdk1VSHVSTHFIbUJFOHRwMTZ0M0RySzV3cUZjQVg3R09aeXAvb0FrRlpubE5xQTJDNDRjVVc2R1poYW5QdHB4d2l4djNpeVUwN2xKQ1FTQjhMRzQ1cFdqRFVsN0c3RXVIa1BTUGtqN2Jsa3Q2ZHYydzFGbmthYk1zS2tmZEF6T2VtYTVZWlRlQlFieEF3QUVBQVVBQmdBSEFBZ0FDUUFLQUFzQURRQVBBQkVBRXdBWEFCc0FId0FqQUNzQU13QTdBRU1BVXdCakFITUFnd0NqQU1NQTR3QUNBUUFBQUFBQUFCQUFFQUFRQUJBQUVBQVFBQkFBRUFBUkFCRUFFUUFSQUJJQUVnQVNBQklBRXdBVEFCTUFFd0FVQUJRQUZBQVVBQlVBRlFBVkFCVUFFQUJOQU1vQUFBQUJBQUlBQXdBRUFBVUFCd0FKQUEwQUVRQVpBQ0VBTVFCQkFHRUFnUURCQUFFQmdRRUJBZ0VEQVFRQkJnRUlBUXdCRUFFWUFTQUJNQUZBQVdBQUFBQUFFQUFRQUJBQUVBQVJBQkVBRWdBU0FCTUFFd0FVQUJRQUZRQVZBQllBRmdBWEFCY0FHQUFZQUJrQUdRQWFBQm9BR3dBYkFCd0FIQUFkQUIwQVFBQkFBQkFBRVFBU0FBQUFDQUFIQUFrQUJnQUtBQVVBQ3dBRUFBd0FBd0FOQUFJQURnQUJBQThBQUFBQUFBQUFBQUFBQUdBSEFBQUFDRkFBQUFnUUFCUUljd0FTQng4QUFBaHdBQUFJTUFBQUNjQUFFQWNLQUFBSVlBQUFDQ0FBQUFtZ0FBQUlBQUFBQ0lBQUFBaEFBQUFKNEFBUUJ3WUFBQWhZQUFBSUdBQUFDWkFBRXdjN0FBQUllQUFBQ0RnQUFBblFBQkVIRVFBQUNHZ0FBQWdvQUFBSnNBQUFDQWdBQUFpSUFBQUlTQUFBQ2ZBQUVBY0VBQUFJVkFBQUNCUUFGUWpqQUJNSEt3QUFDSFFBQUFnMEFBQUp5QUFSQncwQUFBaGtBQUFJSkFBQUNhZ0FBQWdFQUFBSWhBQUFDRVFBQUFub0FCQUhDQUFBQ0Z3QUFBZ2NBQUFKbUFBVUIxTUFBQWg4QUFBSVBBQUFDZGdBRWdjWEFBQUliQUFBQ0N3QUFBbTRBQUFJREFBQUNJd0FBQWhNQUFBSitBQVFCd01BQUFoU0FBQUlFZ0FWQ0tNQUV3Y2pBQUFJY2dBQUNESUFBQW5FQUJFSEN3QUFDR0lBQUFnaUFBQUpwQUFBQ0FJQUFBaUNBQUFJUWdBQUNlUUFFQWNIQUFBSVdnQUFDQm9BQUFtVUFCUUhRd0FBQ0hvQUFBZzZBQUFKMUFBU0J4TUFBQWhxQUFBSUtnQUFDYlFBQUFnS0FBQUlpZ0FBQ0VvQUFBbjBBQkFIQlFBQUNGWUFBQWdXQUVBSUFBQVRCek1BQUFoMkFBQUlOZ0FBQ2N3QUVRY1BBQUFJWmdBQUNDWUFBQW1zQUFBSUJnQUFDSVlBQUFoR0FBQUo3QUFRQndrQUFBaGVBQUFJSGdBQUNad0FGQWRqQUFBSWZnQUFDRDRBQUFuY0FCSUhHd0FBQ0c0QUFBZ3VBQUFKdkFBQUNBNEFBQWlPQUFBSVRnQUFDZndBWUFjQUFBQUlVUUFBQ0JFQUZRaURBQklISHdBQUNIRUFBQWd4QUFBSndnQVFCd29BQUFoaEFBQUlJUUFBQ2FJQUFBZ0JBQUFJZ1FBQUNFRUFBQW5pQUJBSEJnQUFDRmtBQUFnWkFBQUprZ0FUQnpzQUFBaDVBQUFJT1FBQUNkSUFFUWNSQUFBSWFRQUFDQ2tBQUFteUFBQUlDUUFBQ0lrQUFBaEpBQUFKOGdBUUJ3UUFBQWhWQUFBSUZRQVFDQUlCRXdjckFBQUlkUUFBQ0RVQUFBbktBQkVIRFFBQUNHVUFBQWdsQUFBSnFnQUFDQVVBQUFpRkFBQUlSUUFBQ2VvQUVBY0lBQUFJWFFBQUNCMEFBQW1hQUJRSFV3QUFDSDBBQUFnOUFBQUoyZ0FTQnhjQUFBaHRBQUFJTFFBQUNib0FBQWdOQUFBSWpRQUFDRTBBQUFuNkFCQUhBd0FBQ0ZNQUFBZ1RBQlVJd3dBVEJ5TUFBQWh6QUFBSU13QUFDY1lBRVFjTEFBQUlZd0FBQ0NNQUFBbW1BQUFJQXdBQUNJTUFBQWhEQUFBSjVnQVFCd2NBQUFoYkFBQUlHd0FBQ1pZQUZBZERBQUFJZXdBQUNEc0FBQW5XQUJJSEV3QUFDR3NBQUFnckFBQUp0Z0FBQ0FzQUFBaUxBQUFJU3dBQUNmWUFFQWNGQUFBSVZ3QUFDQmNBUUFnQUFCTUhNd0FBQ0hjQUFBZzNBQUFKemdBUkJ3OEFBQWhuQUFBSUp3QUFDYTRBQUFnSEFBQUlod0FBQ0VjQUFBbnVBQkFIQ1FBQUNGOEFBQWdmQUFBSm5nQVVCMk1BQUFoL0FBQUlQd0FBQ2Q0QUVnY2JBQUFJYndBQUNDOEFBQW0rQUFBSUR3QUFDSThBQUFoUEFBQUovZ0JnQndBQUFBaFFBQUFJRUFBVUNITUFFZ2NmQUFBSWNBQUFDREFBQUFuQkFCQUhDZ0FBQ0dBQUFBZ2dBQUFKb1FBQUNBQUFBQWlBQUFBSVFBQUFDZUVBRUFjR0FBQUlXQUFBQ0JnQUFBbVJBQk1IT3dBQUNIZ0FBQWc0QUFBSjBRQVJCeEVBQUFob0FBQUlLQUFBQ2JFQUFBZ0lBQUFJaUFBQUNFZ0FBQW54QUJBSEJBQUFDRlFBQUFnVUFCVUk0d0FUQnlzQUFBaDBBQUFJTkFBQUNja0FFUWNOQUFBSVpBQUFDQ1FBQUFtcEFBQUlCQUFBQ0lRQUFBaEVBQUFKNlFBUUJ3Z0FBQWhjQUFBSUhBQUFDWmtBRkFkVEFBQUlmQUFBQ0R3QUFBblpBQklIRndBQUNHd0FBQWdzQUFBSnVRQUFDQXdBQUFpTUFBQUlUQUFBQ2ZrQUVBY0RBQUFJVWdBQUNCSUFGUWlqQUJNSEl3QUFDSElBQUFneUFBQUp4UUFSQndzQUFBaGlBQUFJSWdBQUNhVUFBQWdDQUFBSWdnQUFDRUlBQUFubEFCQUhCd0FBQ0ZvQUFBZ2FBQUFKbFFBVUIwTUFBQWg2QUFBSU9nQUFDZFVBRWdjVEFBQUlhZ0FBQ0NvQUFBbTFBQUFJQ2dBQUNJb0FBQWhLQUFBSjlRQVFCd1VBQUFoV0FBQUlGZ0JBQ0FBQUV3Y3pBQUFJZGdBQUNEWUFBQW5OQUJFSER3QUFDR1lBQUFnbUFBQUpyUUFBQ0FZQUFBaUdBQUFJUmdBQUNlMEFFQWNKQUFBSVhnQUFDQjRBQUFtZEFCUUhZd0FBQ0g0QUFBZytBQUFKM1FBU0J4c0FBQWh1QUFBSUxnQUFDYjBBQUFnT0FBQUlqZ0FBQ0U0QUFBbjlBR0FIQUFBQUNGRUFBQWdSQUJVSWd3QVNCeDhBQUFoeEFBQUlNUUFBQ2NNQUVBY0tBQUFJWVFBQUNDRUFBQW1qQUFBSUFRQUFDSUVBQUFoQkFBQUo0d0FRQndZQUFBaFpBQUFJR1FBQUNaTUFFd2M3QUFBSWVRQUFDRGtBQUFuVEFCRUhFUUFBQ0drQUFBZ3BBQUFKc3dBQUNBa0FBQWlKQUFBSVNRQUFDZk1BRUFjRUFBQUlWUUFBQ0JVQUVBZ0NBUk1IS3dBQUNIVUFBQWcxQUFBSnl3QVJCdzBBQUFobEFBQUlKUUFBQ2FzQUFBZ0ZBQUFJaFFBQUNFVUFBQW5yQUJBSENBQUFDRjBBQUFnZEFBQUptd0FVQjFNQUFBaDlBQUFJUFFBQUNkc0FFZ2NYQUFBSWJRQUFDQzBBQUFtN0FBQUlEUUFBQ0kwQUFBaE5BQUFKK3dBUUJ3TUFBQWhUQUFBSUV3QVZDTU1BRXdjakFBQUljd0FBQ0RNQUFBbkhBQkVIQ3dBQUNHTUFBQWdqQUFBSnB3QUFDQU1BQUFpREFBQUlRd0FBQ2VjQUVBY0hBQUFJV3dBQUNCc0FBQW1YQUJRSFF3QUFDSHNBQUFnN0FBQUoxd0FTQnhNQUFBaHJBQUFJS3dBQUNiY0FBQWdMQUFBSWl3QUFDRXNBQUFuM0FCQUhCUUFBQ0ZjQUFBZ1hBRUFJQUFBVEJ6TUFBQWgzQUFBSU53QUFDYzhBRVFjUEFBQUlad0FBQ0NjQUFBbXZBQUFJQndBQUNJY0FBQWhIQUFBSjd3QVFCd2tBQUFoZkFBQUlId0FBQ1o4QUZBZGpBQUFJZndBQUNEOEFBQW5mQUJJSEd3QUFDRzhBQUFndkFBQUp2d0FBQ0E4QUFBaVBBQUFJVHdBQUNmOEFFQVVCQUJjRkFRRVRCUkVBR3dVQkVCRUZCUUFaQlFFRUZRVkJBQjBGQVVBUUJRTUFHQVVCQWhRRklRQWNCUUVnRWdVSkFCb0ZBUWdXQllFQVFBVUFBQkFGQWdBWEJZRUJFd1VaQUJzRkFSZ1JCUWNBR1FVQkJoVUZZUUFkQlFGZ0VBVUVBQmdGQVFNVUJURUFIQVVCTUJJRkRRQWFCUUVNRmdYQkFFQUZBQUJPVTNRelgxOHlNVEppWVhOcFkxOXpkSEpwYm1kSmFFNVRYekV4WTJoaGNsOTBjbUZwZEhOSmFFVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsb1JVVkZSUUFBNkNFQkFOQytBQUJPVTNRelgxOHlNVEppWVhOcFkxOXpkSEpwYm1kSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsM1JVVkZSUUFBNkNFQkFCaS9BQUJPVTNRelgxOHlNVEppWVhOcFkxOXpkSEpwYm1kSlJITk9VMTh4TVdOb1lYSmZkSEpoYVhSelNVUnpSVVZPVTE4NVlXeHNiMk5oZEc5eVNVUnpSVVZGUlFBQUFPZ2hBUUJndndBQVRsTjBNMTlmTWpFeVltRnphV05mYzNSeWFXNW5TVVJwVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxFYVVWRlRsTmZPV0ZzYkc5allYUnZja2xFYVVWRlJVVUFBQURvSVFFQXJMOEFBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV05GUlFBQTZDRUJBUGkvQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsaFJVVUFBT2doQVFBZ3dBQUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpjMFZGQUFEb0lRRUFTTUFBQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1hSRlJRQUE2Q0VCQUhEQUFBQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHBSVVVBQU9naEFRQ1l3QUFBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYWtWRkFBRG9JUUVBd01BQUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXeEZSUUFBNkNFQkFPakFBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGx0UlVVQUFPZ2hBUUFRd1FBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmVFVkZBQURvSVFFQU9NRUFBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTWGxGUlFBQTZDRUJBR0RCQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsa1JVVUFBT2doQVFDSXdRQUFnUUVkV2c0Q2hpVVFBeFFSRWdRTENCUUYyQU1YQnRvQkdRZmxBQndJYndBZUNUWUFJUW9hQUNNTERRQUpEQVlBQ2cwREFBd05BUUNQRDM5YUpCQWxQeVlSOGl3bkVud2dLQk81RnlvVWdoRXJGZThNTFJhaENTNFhMd2N3R0Z3Rk1Sa0dCRE1hQXdNMEcwQUNOaHl4QVRnZFJBRTVIdlVBT3grM0FEd2dpZ0ErSVdnQVB5Sk9BQ0FqT3dBaENTd0FwU1hoV2tBbVRFaEJKdzA2UXlqeExrUXBIeVpGS2pNZlJpdW9HVWdzR0JWSkxYY1JTaTUwRGtzdit3dE5NUGdKVGpGaENFOHlCZ2N3TTgwRk1qVGVCREkxRHdRek5tTURORGZVQWpVNFhBSTJPZmdCTnpxa0FUZzdZQUU1UENVQk9qMzJBRHMreXdBOVA2c0FQU0NQQU1GQkVsdFFRZ1JOVVVNc1FWSkUyRGRUUmVndlZFWThLVlpIZVNOWFNOOGVWMG1wR2toS1RoZElTeVFVU2t5Y0VVcE5hdzlMVGxFTlRVKzJDMDB3UUFyUVVUSllXRkljVFZsVGprTmFWTjA3VzFYdU5GeFdyaTVkVjVvcFZrY1dKZGhaY0ZWZldxbE1ZRnZaUkdGY0lqNWpYU1E0WTE2ME1sMVdGeTdmWUtoV1pXRkdUMlppNVVkblk4OUJhR1E5UEdOZFhqZHBaakZTYW1jUFRHdG9PVVpuWTE1QjZXb25WbXhyNTFCdFo0VkxibTJYVlc5clQxRHVieEJhY0cwaVZmQnY2MWx4Y1IxYVUwOVRBUU5NVTBVQngwZEF4VmlmVTBKTEFFQkpNcU1pcUJIRldDRjcvSE5pYU1WWXYwVUxNSDRZbjFQOGMwRnRWR0tmVTdOQlFTMFNGMEpMWW1oVVluNVlRa3NoTzdvb3d4UUFRTVZZbjFOQ1N3QkFTVEtqSXFnUlNUSy9SYk5CSVR0Sk1vSW5OeHZnRGFNaUN6QkJMYm9vb3lJM0c3OFNqZ21vRVg0WUVoZkRGS2dSNEEyT0NkOEVBQUFBQUFBQThEL3ZZVWl4VURIMlA4cHZUWkd1NS9RL3FoRnM3MkxROGo4QUFBQUFBQUR3UHp1L3A4QnBKT2svdXlESGUzcFI0VDlkcTNMZVZhalJQNzhBQUFEQUFBQUF3UUFBQUFBQUFBQUFBQUFBQVFBQUFBSUFBQUFEQUFBQUFBQUFBQUVBQUFBRkFBQUFBZ0FBQUFRQUFBQUdBQUFBQXdBQUFBY0FBQUFJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUZBQUFBQmdBQUFBSUFBQUFFQUFBQUJ3QUFBQXdBQUFBREFBQUFDQUFBQUFzQUFBQU5BQUFBQ1FBQUFBb0FBQUFPQUFBQUR3QUFBQUFBQUFBQkFBQUFCUUFBQUFZQUFBQU9BQUFBQWdBQUFBUUFBQUFIQUFBQURRQUFBQThBQUFBREFBQUFDQUFBQUF3QUFBQVFBQUFBRlFBQUFBa0FBQUFMQUFBQUVRQUFBQlFBQUFBV0FBQUFDZ0FBQUJJQUFBQVRBQUFBRndBQUFCZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFVQUFBQUdBQUFBRGdBQUFBOEFBQUFDQUFBQUJBQUFBQWNBQUFBTkFBQUFFQUFBQUJrQUFBQURBQUFBQ0FBQUFBd0FBQUFSQUFBQUdBQUFBQm9BQUFBSkFBQUFDd0FBQUJJQUFBQVhBQUFBR3dBQUFDQUFBQUFLQUFBQUV3QUFBQllBQUFBY0FBQUFId0FBQUNFQUFBQVVBQUFBRlFBQUFCMEFBQUFlQUFBQUlnQUFBQ01BQUFBQUFBQUFBUUFBQUFVQUFBQUdBQUFBRGdBQUFBOEFBQUFiQUFBQUFnQUFBQVFBQUFBSEFBQUFEUUFBQUJBQUFBQWFBQUFBSEFBQUFBTUFBQUFJQUFBQURBQUFBQkVBQUFBWkFBQUFIUUFBQUNZQUFBQUpBQUFBQ3dBQUFCSUFBQUFZQUFBQUhnQUFBQ1VBQUFBbkFBQUFDZ0FBQUJNQUFBQVhBQUFBSHdBQUFDUUFBQUFvQUFBQUxRQUFBQlFBQUFBV0FBQUFJQUFBQUNNQUFBQXBBQUFBTEFBQUFDNEFBQUFWQUFBQUlRQUFBQ0lBQUFBcUFBQUFLd0FBQUM4QUFBQXdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBRkFBQUFCZ0FBQUE0QUFBQVBBQUFBR3dBQUFCd0FBQUFDQUFBQUJBQUFBQWNBQUFBTkFBQUFFQUFBQUJvQUFBQWRBQUFBS2dBQUFBTUFBQUFJQUFBQURBQUFBQkVBQUFBWkFBQUFIZ0FBQUNrQUFBQXJBQUFBQ1FBQUFBc0FBQUFTQUFBQUdBQUFBQjhBQUFBb0FBQUFMQUFBQURVQUFBQUtBQUFBRXdBQUFCY0FBQUFnQUFBQUp3QUFBQzBBQUFBMEFBQUFOZ0FBQUJRQUFBQVdBQUFBSVFBQUFDWUFBQUF1QUFBQU13QUFBRGNBQUFBOEFBQUFGUUFBQUNJQUFBQWxBQUFBTHdBQUFESUFBQUE0QUFBQU93QUFBRDBBQUFBakFBQUFKQUFBQURBQUFBQXhBQUFBT1FBQUFEb0FBQUErQUFBQVB3QUFBQUFBQUFBQkFBQUFBd0FBQUFjQUFBQVBBQUFBSHdBQUFEOEFBQUIvQUFBQS93QUFBUDhCQUFEL0F3QUEvd2NBQVA4UEFBRC9Id0FBL3o4QUFQOS9BQUFCQUFBQUF3QUFBQU1BQUFBRUFBQUFCQUFBQUFNQUFBQURBQUFBQUFBQUFPTjNBQUFGWUFBQTRGOEFBQUJ4QUFCMGVRQUFsMlFBQUVwd0FBQ3RjZ0FBUjNnQUFCZHJBQUQxY1FBQURISUFBRTV0QUFEK2RRQUFxbXNBQU1kM0FBQ05kZ0FBaTNRQUFBWjFBQUFyWndBQVBYVUFBRGwzQUFBQVlnQUFFR2NBQU9kckFBQzViZ0FBYUdVQUFKWjFBQUNzWkFBQWczVUFBSVJoQUFCd2RRQUFYWFVBQU9tREFBQ0xjd0FBZDNNQUFJbHJBQURYYVFBQU1uNEFBRUJsQUFDdllRQUFZMThBQUt0b0FBQ3hid0FBd204QUFHTjNBQUNTZUFBQVozQUFBSTFsQUFCSGJ3QUFKbk1BQUh4eUFBQUJjd0FBam5BQUFOZHlBQUJiWUFBQURvUUFBTVZtQUFCOVp3QUFwV2NBQUJoOEFBRDVad0FBN1drQUFQcGdBQURNWndBQVoya0FBSk52QUFCMWJ3QUFZWDRBQUNKcEFBRGJZQUFBeEdvQUFGcHJBQUJpY3dBQVRuTUFBQjl1QUFCRmdRQUEybnNBQU50MkFBRFhZd0FBcTJNQUFFQmhBQUFrWVFBQXNIWUFBRTFpQUFCRFpBQUFMR1FBQVBOd0FBQ2tjd0FBK1hjQUFHaGlBQURMWWdBQXNIQUFBS1JpQUFEQ1lBQUEyR0VBQUVKbkFBQmxad0FBTm1zQUFHaDJBQUFzZEFBQVFHZ0FBREowQUFCc2RBQUE1SEFBQVBObUFBRGZkQUFBd25RQUFJcHBBQUNqYVFBQU0yTUFBUGxpQUFCMVl3QUFpbW9BQUJoa0FBQUJaQUFBb1hjQUFIQnhBQUM4ZFFBQWhtQUFBQVJsQUFBYWNRQUF6SE1BQU41dkFBRDZjd0FBcjNzQUFQZG9BQUFBQUFBQVFBWUFBSUErQUFBQUFBQUFpQk1BQUFEQU1QQU16RHo4QThNejh3L1BQLytBUUxCd2pFeThmSU5EczNPUFQ3OS9JT0FRMEN6c0hOd2o0eFBUTCs4ZjM2QmdrRkNzYkp4Y28yT1RVNjl2bjE4SXlEajRCTVEwOUF2TE8vc0h4emYzaUVpNGVJUkV0SFNMUzd0N2gwZTNkeWpvR05nazVCVFVLK3NiMnlmbkY5ZW9hSmhZcEdTVVZLdHJtMXVuWjVkWEFzSXk4ZzdPUHY0QndUSHhEYzA5L1lKQ3NuS09UcjUrZ1VHeGNZMU52WDBpNGhMU0x1NGUzaUhoRWRFdDdSM2RvbUtTVXE1dW5sNmhZWkZSclcyZFhRcktPdm9HeGpiMkNjazUrUVhGTmZXS1NycDZoa2EyZG9sSnVYbUZSYlYxS3VvYTJpYm1GdFlwNlJuWkplVVYxYXBxbWxxbVpwWldxV21aV2FWbGxWVUJBQUFBQUFBQUFBSUFBQUFBQUFBQUFBQUFBQUVBQUFBSUFBQUFFQUFBQUFrQUFBQUNBQUFBQXdBQUFBb0FBQUFSQUFBQUdBQUFBQ0FBQUFBWkFBQUFFZ0FBQUFzQUFBQUVBQUFBQlFBQUFBd0FBQUFUQUFBQUdnQUFBQ0VBQUFBb0FBQUFNQUFBQUNrQUFBQWlBQUFBR3dBQUFCUUFBQUFOQUFBQUJnQUFBQWNBQUFBT0FBQUFGUUFBQUJ3QUFBQWpBQUFBS2dBQUFERUFBQUE0QUFBQU9RQUFBRElBQUFBckFBQUFKQUFBQUIwQUFBQVdBQUFBRHdBQUFCY0FBQUFlQUFBQUpRQUFBQ3dBQUFBekFBQUFPZ0FBQURzQUFBQTBBQUFBTFFBQUFDWUFBQUFmQUFBQUp3QUFBQzRBQUFBMUFBQUFQQUFBQUQwQUFBQTJBQUFBTHdBQUFEY0FBQUErQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUFBQUFBQUFRQUFBQWdBQUFBUUFBQUFDUUFBQUFJQUFBQURBQUFBQ2dBQUFCRUFBQUFZQUFBQUlBQUFBQmtBQUFBU0FBQUFDd0FBQUFRQUFBQUZBQUFBREFBQUFCTUFBQUFhQUFBQUlRQUFBQ2dBQUFBd0FBQUFLUUFBQUNJQUFBQWJBQUFBRkFBQUFBMEFBQUFHQUFBQURnQUFBQlVBQUFBY0FBQUFJd0FBQUNvQUFBQXhBQUFBTWdBQUFDc0FBQUFrQUFBQUhRQUFBQllBQUFBZUFBQUFKUUFBQUN3QUFBQXpBQUFBTkFBQUFDMEFBQUFtQUFBQUxnQUFBRFVBQUFBMkFBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFBQ0FBQUFCQUFBQUFKQUFBQUFnQUFBQU1BQUFBS0FBQUFFUUFBQUJnQUFBQWdBQUFBR1FBQUFCSUFBQUFMQUFBQUJBQUFBQVVBQUFBTUFBQUFFd0FBQUJvQUFBQWhBQUFBS0FBQUFDa0FBQUFpQUFBQUd3QUFBQlFBQUFBTkFBQUFGUUFBQUJ3QUFBQWpBQUFBS2dBQUFDc0FBQUFrQUFBQUhRQUFBQ1VBQUFBc0FBQUFMUUFBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBQUFBQUFBUUFBQUFnQUFBQVFBQUFBQ1FBQUFBSUFBQUFEQUFBQUNnQUFBQkVBQUFBWUFBQUFJQUFBQUJrQUFBQVNBQUFBQ3dBQUFBUUFBQUFNQUFBQUV3QUFBQm9BQUFBaEFBQUFJZ0FBQUJzQUFBQVVBQUFBSEFBQUFDTUFBQUFrQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkFBQUFDQUFBQUJBQUFBQUpBQUFBQWdBQUFBTUFBQUFLQUFBQUVRQUFBQmdBQUFBWkFBQUFFZ0FBQUFzQUFBQVRBQUFBR2dBQUFCc0FBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBQUFBQUFBRUFBQUFJQUFBQUVBQUFBQWtBQUFBQ0FBQUFDZ0FBQUJFQUFBQVNBQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFBQUNBQUFBQWtBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQTJ3OUpQOXNQU2Iva3l4WkE1TXNXd0FBQUFBQUFBQUNBMnc5SlFOc1BTY0E0WSswKzJnOUpQMTZZZXovYUQ4ay9hVGVzTVdnaElqTzBEeFF6YUNHaU13TUFBQUFFQUFBQUJBQUFBQVlBQUFDRCthSUFSRTV1QVB3cEZRRFJWeWNBM1RUMUFHTGJ3QUE4bVpVQVFaQkRBR05SL2dDNzNxc0F0MkhGQURwdUpBRFNUVUlBU1FiZ0FBbnFMZ0Fja3RFQTZ4MytBQ214SEFEb1BxY0E5VFdDQUVTN0xnQ2M2WVFBdENad0FFRitYd0RXa1RrQVU0TTVBSnowT1FDTFg0UUFLUG05QVBnZk93RGUvNWNBRDVnRkFCRXY3d0FLV29zQWJSOXRBTTkrTmdBSnl5Y0FSayszQUo1bVB3QXQ2bDhBdWlkMUFPWHJ4d0E5ZS9FQTl6a0hBSkpTaWdEN2Erb0FIN0ZmQUFoZGpRQXdBMVlBZS94R0FQQ3Jhd0Fndk04QU52U2FBT09wSFFCZVlaRUFDQnZtQUlXWlpRQ2dGRjhBalVCb0FJRFkvd0FuYzAwQUJnWXhBTXBXRlFESnFITUFlK0pnQUd1TXdBQVp4RWNBeldmREFBbm8zQUJaZ3lvQWkzYkVBS1ljbGdCRXI5MEFHVmZSQUtVK0JRQUZCLzhBTTM0L0FNSXk2QUNZVDk0QXUzMHlBQ1k5d3dBZWErOEFuL2hlQURVZk9nQi84c29BOFljZEFIeVFJUUJxSkh3QTFXNzZBREF0ZHdBVk8wTUF0UlRHQU1NWm5RQ3R4TUlBTEUxQkFBd0FYUUNHZlVZQTQzRXRBSnZHbWdBellnQUF0Tko4QUxTbmx3QTNWZFVBMXo3MkFLTVFHQUJOZHZ3QVpKMHFBSERYcXdCamZQZ0FlckJYQUJjVjV3REFTVllBTzliWkFLZUVPQUFrSThzQTFvcDNBRnBVSXdBQUg3a0E4UW9iQUJuTzN3Q2ZNZjhBWmg1cUFKbFhZUUNzKzBjQWZuL1lBQ0psdHdBeTZJa0E1cjlnQU8vRXpRQnNOZ2tBWFQvVUFCYmUxd0JZTzk0QTNwdVNBTklpS0FBb2h1Z0E0bGhOQU1iS01nQUk0eFlBNEgzTEFCZkFVQUR6SGFjQUdPQmJBQzRUTkFDREVtSUFnMGdCQVBXT1d3Q3RzSDhBSHVueUFFaEtRd0FRWjlNQXF0M1lBSzVmUWdCcVljNEFDaWlrQU5PWnRBQUdwdklBWEhkL0FLUENnd0JoUElnQWluTjRBSytNV2dCdjE3MEFMYVpqQVBTL3l3Q05nZThBSnNGbkFGWEtSUURLMlRZQUtLalNBTUpoalFBU3lYY0FCQ1lVQUJKR213REVXY1FBeU1WRUFFMnlrUUFBRi9NQTFFT3RBQ2xKNVFEOTFSQUFBTDc4QUI2VXpBQnd6dTRBRXo3MUFPenhnQUN6NThNQXgvZ29BSk1GbEFEQmNUNEFMZ216QUF0Rjh3Q0lFcHdBcXlCN0FDNjFud0JIa3NJQWV6SXZBQXhWYlFCeXA1QUFhK2NmQURITGxnQjVGa29BUVhuaUFQVGZpUURvbEpjQTR1YUVBSmt4bHdDSTdXc0FYMTgyQUx2OURnQkltclFBWjZSc0FIRnlRZ0NOWFRJQW54VzRBTHpsQ1FDTk1TVUE5M1E1QURBRkhBQU5EQUVBU3dob0FDenVXQUJIcXBBQWRPY0NBTDNXSkFEM2ZhWUFia2h5QUo4Vzd3Q09sS1lBdEpIMkFORlRVUURQQ3ZJQUlKZ3pBUFZMZmdDeVkyZ0EzVDVmQUVCZEF3Q0ZpWDhBVlZJcEFEZGt3QUJ0MkJBQU1rZ3lBRnRNZFFCT2NkUUFSVlJ1QUFzSndRQXE5V2tBRkdiVkFDY0huUUJkQkZBQXREdmJBT3AyeFFDSCtSY0FTV3Q5QUIwbnVnQ1dhU2tBeHN5c0FLMFVWQUNRNG1vQWlObUpBQ3h5VUFBRXBMNEFkd2VVQVBNd2NBQUEvQ2NBNm5Hb0FHYkNTUUJrNEQwQWw5MkRBS00vbHdCRGxQMEFEWWFNQURGQjNnQ1NPWjBBM1hDTUFCZTM1d0FJM3pzQUZUY3JBRnlBb0FCYWdKTUFFQkdTQUEvbzJBQnNnSzhBMi85TEFEaVFEd0JaR0hZQVlxVVZBR0hMdXdESGlia0FFRUM5QU5MeUJBQkpkU2NBNjdiMkFOc2l1d0FLRktvQWlTWXZBR1NEZGdBSk96TUFEcFFhQUZFNnFnQWRvOElBcisydUFGd21FZ0J0d2swQUxYcWNBTUJXbHdBRFA0TUFDZkQyQUN0QWpBQnRNWmtBT2JRSEFBd2dGUURZdzFzQTlaTEVBTWF0U3dCT3lxVUFwemZOQU9hcE5nQ3JrcFFBM1VKb0FCbGozZ0Iyak84QWFJdFNBUHpiTndDdW9hc0EzeFV4QUFDdW9RQU0rOW9BWkUxbUFPMEZ0d0FwWlRBQVYxYS9BRWYvT2dCcStia0FkYjd6QUNpVDN3Q3JnREFBWm96MkFBVExGUUQ2SWdZQTJlUWRBRDJ6cEFCWEc0OEFOczBKQUU1QzZRQVR2cVFBTXlPMUFQQ3FHZ0JQWmFnQTBzR2xBQXMvRHdCYmVNMEFJL2wyQUh1TEJBQ0pGM0lBeHFaVEFHOXU0Z0R2NndBQW0wcFlBTVRhdHdDcVpyb0Fkcy9QQU5FQ0hRQ3g4UzBBakpuQkFNT3Rkd0NHU05vQTkxMmdBTWFBOUFDczhDOEEzZXlhQUQ5Y3ZBRFEzbTBBa01jZkFDcmJ0Z0NqSlRvQUFLK2FBSzFUa3dDMlZ3UUFLUzIwQUV1QWZnRGFCNmNBZHFvT0FIdFpvUUFXRWlvQTNMY3RBUHJsL1FDSjIvNEFpYjc5QU9SMmJBQUdxZndBUG9Cd0FJVnVGUUQ5aC84QUtENEhBR0ZuTXdBcUdJWUFUYjNxQUxQbnJ3Q1BiVzRBbFdjNUFERy9Xd0NFMTBnQU1OOFdBTWN0UXdBbFlUVUF5WERPQURETHVBQy9iUDBBcEFDaUFBVnM1QUJhM2FBQUlXOUhBR0lTMGdDNVhJUUFjR0ZKQUd0VzRBQ1pVZ0VBVUZVM0FCN1Z0d0F6OGNRQUUyNWZBRjB3NUFDRkxxa0FIYkxEQUtFeU5nQUl0NlFBNnJIVUFCYjNJUUNQYWVRQUovOTNBQXdEZ0FDTlFDMEFUODJnQUNDbG1RQ3pvdE1BTDEwS0FMVDVRZ0FSMnNzQWZiN1FBSnZid1FDckY3MEF5cUtCQUFocVhBQXVWUmNBSndCVkFIOFU4QURoQjRZQUZBdGtBSlpCalFDSHZ0NEEydjBxQUdzbHRnQjdpVFFBQmZQK0FMbS9uZ0JvYWs4QVNpcW9BRS9FV2dBdCtMd0ExMXFZQVBUSGxRQU5UWTBBSURxbUFLUlhYd0FVUDdFQWdEaVZBTXdnQVFCeDNZWUF5ZDYyQUw5ZzlRQk5aUkVBQVFkckFJeXdyQUN5d05BQVVWVklBQjc3RGdDVmNzTUFvd1k3QU1CQU5RQUczSHNBNEVYTUFFNHArZ0RXeXNnQTZQTkJBSHhrM2dDYlpOZ0EyYjR4QUtTWHd3QjNXTlFBYWVQRkFQRGFFd0M2T2p3QVJoaEdBRlYxWHdEU3ZmVUFicExHQUt3dVhRQU9STzBBSEQ1Q0FHSEVod0FwL2VrQTU5YnpBQ0o4eWdCdmtUVUFDT0RGQVAvWGpRQnVhdUlBc1AzR0FKTUl3UUI4WFhRQWE2MnlBTTF1blFBK2Nuc0F4aEZxQVBmUHFRQXBjOThBdGNtNkFMY0FVUURpc2cwQWRMb2tBT1Y5WUFCMDJJb0FEUlVzQUlFWURBQitacFFBQVNrV0FKOTZkZ0Q5L2I0QVZrWHZBTmwrTmdEczJSTUFpN3E1QU1TWC9BQXhxQ2NBOFc3REFKVEZOZ0RZcUZZQXRLaTFBTS9NRGdBU2lTMEFiMWMwQUN4V2lRQ1p6dU1BMWlDNUFHdGVxZ0ErS3B3QUVWL01BUDBMU2dEaDlQc0FqanR0QU9LR0xBRHAxSVFBL0xTcEFPL3UwUUF1TmNrQUx6bGhBRGdoUkFBYjJjZ0FnZndLQVB0S2FnQXZITmdBVTdTRUFFNlpqQUJVSXN3QUtsWGNBTURHMWdBTEdaWUFHbkM0QUdtVlpBQW1XbUFBUDFMdUFIOFJEd0QwdFJFQS9NdjFBRFM4TFFBMHZPNEE2RjNNQU4xZVlBQm5qcHNBa2pQdkFNa1h1QUJoV0pzQTRWZThBRkdEeGdEWVBoQUEzWEZJQUMwYzNRQ3ZHS0VBSVN4R0FGbnoxd0RaZXBnQW5sVEFBRStHK2dCV0J2d0E1WG11QUlraU5nQTRyU0lBWjVQY0FGWG9xZ0NDSmpnQXl1ZWJBRkVOcEFDWk03RUFxZGNPQUdrRlNBQmxzdkFBZjRpbkFJaE1sd0Q1MFRZQUlaS3pBSHVDU2dDWXp5RUFRSi9jQU54SFZRRGhkRG9BWit0Q0FQNmQzd0JlMUY4QWUyZWtBTHFzZWdCVjlxSUFLNGdqQUVHNlZRQlpiZ2dBSVNxR0FEbEhnd0NKNCtZQTVaN1VBRW43UUFEL1Z1a0FIQS9LQU1WWmlnQ1UraXNBMDhIRkFBL0Z6d0RiV3E0QVI4V0dBSVZEWWdBaGhqc0FMSG1VQUJCaGh3QXFUSHNBZ0N3YUFFTy9FZ0NJSnBBQWVEeUpBS2pFNUFEbDIzc0F4RHJDQUNiMDZnRDNaNG9BRFpLL0FHV2pLd0E5azdFQXZYd0xBS1JSM0FBbjNXTUFhZUhkQUpxVUdRQ29LWlVBYU00b0FBbnR0QUJFbnlBQVRwaktBSENDWXdCK2ZDTUFEN2t5QUtmMWpnQVVWdWNBSWZFSUFMV2RLZ0J2ZmswQXBSbFJBTFg1cXdDQzM5WUFsdDFoQUJZMkFnREVPcDhBZzZLaEFITHRiUUE1alhvQWdyaXBBR3N5WEFCR0oxc0FBRFR0QU5JQWR3RDg5RlVBQVZsTkFPQnhnQUFBQUFBQUFBQUFBQUFBQUVEN0lmay9BQUFBQUMxRWRENEFBQUNBbUViNFBBQUFBR0JSekhnN0FBQUFnSU1iOERrQUFBQkFJQ1Y2T0FBQUFJQWlndU0yQUFBQUFCM3phVFVBQUFBQUFBRHdQM1NGRmRPdzJlOC9ENG41YkZpMTd6OVJXeExRQVpQdlAzdFJmVHk0Y3U4L3FybG9NWWRVN3o4NFluVnVlamp2UCtIZUgvV2RIdTgvRmJjeEN2NEc3ei9McVRvM3AvSHVQeUkwRWt5bTN1NC9MWWxoWUFqTzdqOG5LamJWMnIvdVA0SlBuVllydE80L0tWUkkzUWVyN2orRlZUcXdmcVR1UDgwN2YyYWVvTzQvZEYvczZIV2Y3aitIQWV0ekZLSHVQeFBPVEptSnBlNC8yNkFxUXVXczdqL2x4YzJ3TjdmdVA1RHdvNEtSeE80L1hTVStzZ1BWN2ordDAxcVpuK2p1UDBkZSsvSjIvKzQvbkZLRjNac1o3ejlwa08vY0lEZnZQNGVrKzl3WVdPOC9YNXQ3TTVkODd6L2FrS1NpcjZUdlAwQkZibHQyME84L0FBQUFBQUFBNkVLVUk1RkwrR3FzUC9QRStsRE92ODQvMWxJTS8wSXU1ajhBQUFBQUFBQTRRLzZDSzJWSEZVZEFsQ09SUy9ocXZEN3p4UHBRenI4dVA5WlNEUDlDTHBZL3Z2UDRlZXhoOWovZXFveUE5M3ZWdnoySXIwcnRjZlUvMjIzQXAvQyswcit3RVBEd09aWDBQMmM2VVgrdUh0Qy9oUU80c0pYSjh6L3BKSUttMkRITHY2VmtpQXdaRGZNL1dIZkFDazlYeHIrZ2pndDdJbDd5UHdDQm5NY3Jxc0cvUHpRYVNrcTc4VDllRG96T2RrNjZ2N3JsaXZCWUkvRS96QnhoV2p5WHNiK25BSmxCUDVYd1B4NE00VGowVXFLL0FBQUFBQUFBOEQ4QUFBQUFBQUFBQUt4SG12Mk1ZTzQvaEZueVhhcWxxaitnYWdJZnM2VHNQN1F1TnFwVFhydy81dnhxVnpZZzZ6OEkyeUIzNVNiRlB5MnFvV1BSd3VrL2NFY2lEWWJDeXovdFFYZ0Q1b2JvUCtGK29NaUxCZEUvWWtoVDlkeG41ejhKN3JaWE1BVFVQKzg1K3Y1Q0x1WS9OSU80U0tNTzBMOXFDK0FMVzFmVlB5TkJDdkwrLzkrL3Z2UDRlZXhoOWo4Wk1KWmJ4djdldnoySXIwcnRjZlUvcFB6VU1tZ0wyNyt3RVBEd09aWDBQM3UzSHdxTFFkZS9oUU80c0pYSjh6OTd6MjBhNlozVHY2VmtpQXdaRGZNL01iYnk4NXNkMEwrZ2pndDdJbDd5UC9CNk94c2RmTW0vUHpRYVNrcTc4VCtmUEsrVDQvbkN2N3JsaXZCWUkvRS9YSTE0djh0Z3ViK25BSmxCUDVYd1A4NWZSN2FkYjZxL0FBQUFBQUFBOEQ4QUFBQUFBQUFBQUt4SG12Mk1ZTzQvUGZVa244bzRzeitnYWdJZnM2VHNQN3FST0ZTcGRzUS81dnhxVnpZZzZ6L1M1TVJLQzRUT1B5MnFvV1BSd3VrL0hHWEc4RVVHMUQvdFFYZ0Q1b2JvUC9pZkd5eWNqdGcvWWtoVDlkeG41ei9NZTdGT3BPRGNQd3R1U2NrV2R0SS9lc1oxb0drWjE3L2R1cWRzQ3NmZVA4ajJ2a2hIRmVlL0s3Z3FaVWNWOXorSUpBRUFJQ1VCQUU1dklHVnljbTl5SUdsdVptOXliV0YwYVc5dUFFbHNiR1ZuWVd3Z1lubDBaU0J6WlhGMVpXNWpaUUJFYjIxaGFXNGdaWEp5YjNJQVVtVnpkV3gwSUc1dmRDQnlaWEJ5WlhObGJuUmhZbXhsQUU1dmRDQmhJSFIwZVFCUVpYSnRhWE56YVc5dUlHUmxibWxsWkFCUGNHVnlZWFJwYjI0Z2JtOTBJSEJsY20xcGRIUmxaQUJPYnlCemRXTm9JR1pwYkdVZ2IzSWdaR2x5WldOMGIzSjVBRTV2SUhOMVkyZ2djSEp2WTJWemN3QkdhV3hsSUdWNGFYTjBjd0JXWVd4MVpTQjBiMjhnYkdGeVoyVWdabTl5SUdSaGRHRWdkSGx3WlFCT2J5QnpjR0ZqWlNCc1pXWjBJRzl1SUdSbGRtbGpaUUJQZFhRZ2IyWWdiV1Z0YjNKNUFGSmxjMjkxY21ObElHSjFjM2tBU1c1MFpYSnlkWEIwWldRZ2MzbHpkR1Z0SUdOaGJHd0FVbVZ6YjNWeVkyVWdkR1Z0Y0c5eVlYSnBiSGtnZFc1aGRtRnBiR0ZpYkdVQVNXNTJZV3hwWkNCelpXVnJBRU55YjNOekxXUmxkbWxqWlNCc2FXNXJBRkpsWVdRdGIyNXNlU0JtYVd4bElITjVjM1JsYlFCRWFYSmxZM1J2Y25rZ2JtOTBJR1Z0Y0hSNUFFTnZibTVsWTNScGIyNGdjbVZ6WlhRZ1lua2djR1ZsY2dCUGNHVnlZWFJwYjI0Z2RHbHRaV1FnYjNWMEFFTnZibTVsWTNScGIyNGdjbVZtZFhObFpBQkliM04wSUdseklHUnZkMjRBU0c5emRDQnBjeUIxYm5KbFlXTm9ZV0pzWlFCQlpHUnlaWE56SUdsdUlIVnpaUUJDY205clpXNGdjR2x3WlFCSkwwOGdaWEp5YjNJQVRtOGdjM1ZqYUNCa1pYWnBZMlVnYjNJZ1lXUmtjbVZ6Y3dCQ2JHOWpheUJrWlhacFkyVWdjbVZ4ZFdseVpXUUFUbThnYzNWamFDQmtaWFpwWTJVQVRtOTBJR0VnWkdseVpXTjBiM0o1QUVseklHRWdaR2x5WldOMGIzSjVBRlJsZUhRZ1ptbHNaU0JpZFhONUFFVjRaV01nWm05eWJXRjBJR1Z5Y205eUFFbHVkbUZzYVdRZ1lYSm5kVzFsYm5RQVFYSm5kVzFsYm5RZ2JHbHpkQ0IwYjI4Z2JHOXVad0JUZVcxaWIyeHBZeUJzYVc1cklHeHZiM0FBUm1sc1pXNWhiV1VnZEc5dklHeHZibWNBVkc5dklHMWhibmtnYjNCbGJpQm1hV3hsY3lCcGJpQnplWE4wWlcwQVRtOGdabWxzWlNCa1pYTmpjbWx3ZEc5eWN5QmhkbUZwYkdGaWJHVUFRbUZrSUdacGJHVWdaR1Z6WTNKcGNIUnZjZ0JPYnlCamFHbHNaQ0J3Y205alpYTnpBRUpoWkNCaFpHUnlaWE56QUVacGJHVWdkRzl2SUd4aGNtZGxBRlJ2YnlCdFlXNTVJR3hwYm10ekFFNXZJR3h2WTJ0eklHRjJZV2xzWVdKc1pRQlNaWE52ZFhKalpTQmtaV0ZrYkc5amF5QjNiM1ZzWkNCdlkyTjFjZ0JUZEdGMFpTQnViM1FnY21WamIzWmxjbUZpYkdVQVVISmxkbWx2ZFhNZ2IzZHVaWElnWkdsbFpBQlBjR1Z5WVhScGIyNGdZMkZ1WTJWc1pXUUFSblZ1WTNScGIyNGdibTkwSUdsdGNHeGxiV1Z1ZEdWa0FFNXZJRzFsYzNOaFoyVWdiMllnWkdWemFYSmxaQ0IwZVhCbEFFbGtaVzUwYVdacFpYSWdjbVZ0YjNabFpBQkVaWFpwWTJVZ2JtOTBJR0VnYzNSeVpXRnRBRTV2SUdSaGRHRWdZWFpoYVd4aFlteGxBRVJsZG1salpTQjBhVzFsYjNWMEFFOTFkQ0J2WmlCemRISmxZVzF6SUhKbGMyOTFjbU5sY3dCTWFXNXJJR2hoY3lCaVpXVnVJSE5sZG1WeVpXUUFVSEp2ZEc5amIyd2daWEp5YjNJQVFtRmtJRzFsYzNOaFoyVUFSbWxzWlNCa1pYTmpjbWx3ZEc5eUlHbHVJR0poWkNCemRHRjBaUUJPYjNRZ1lTQnpiMk5yWlhRQVJHVnpkR2x1WVhScGIyNGdZV1JrY21WemN5QnlaWEYxYVhKbFpBQk5aWE56WVdkbElIUnZieUJzWVhKblpRQlFjbTkwYjJOdmJDQjNjbTl1WnlCMGVYQmxJR1p2Y2lCemIyTnJaWFFBVUhKdmRHOWpiMndnYm05MElHRjJZV2xzWVdKc1pRQlFjbTkwYjJOdmJDQnViM1FnYzNWd2NHOXlkR1ZrQUZOdlkydGxkQ0IwZVhCbElHNXZkQ0J6ZFhCd2IzSjBaV1FBVG05MElITjFjSEJ2Y25SbFpBQlFjbTkwYjJOdmJDQm1ZVzFwYkhrZ2JtOTBJSE4xY0hCdmNuUmxaQUJCWkdSeVpYTnpJR1poYldsc2VTQnViM1FnYzNWd2NHOXlkR1ZrSUdKNUlIQnliM1J2WTI5c0FFRmtaSEpsYzNNZ2JtOTBJR0YyWVdsc1lXSnNaUUJPWlhSM2IzSnJJR2x6SUdSdmQyNEFUbVYwZDI5eWF5QjFibkpsWVdOb1lXSnNaUUJEYjI1dVpXTjBhVzl1SUhKbGMyVjBJR0o1SUc1bGRIZHZjbXNBUTI5dWJtVmpkR2x2YmlCaFltOXlkR1ZrQUU1dklHSjFabVpsY2lCemNHRmpaU0JoZG1GcGJHRmliR1VBVTI5amEyVjBJR2x6SUdOdmJtNWxZM1JsWkFCVGIyTnJaWFFnYm05MElHTnZibTVsWTNSbFpBQkRZVzV1YjNRZ2MyVnVaQ0JoWm5SbGNpQnpiMk5yWlhRZ2MyaDFkR1J2ZDI0QVQzQmxjbUYwYVc5dUlHRnNjbVZoWkhrZ2FXNGdjSEp2WjNKbGMzTUFUM0JsY21GMGFXOXVJR2x1SUhCeWIyZHlaWE56QUZOMFlXeGxJR1pwYkdVZ2FHRnVaR3hsQUZKbGJXOTBaU0JKTDA4Z1pYSnliM0lBVVhWdmRHRWdaWGhqWldWa1pXUUFUbThnYldWa2FYVnRJR1p2ZFc1a0FGZHliMjVuSUcxbFpHbDFiU0IwZVhCbEFFMTFiSFJwYUc5d0lHRjBkR1Z0Y0hSbFpBQlNaWEYxYVhKbFpDQnJaWGtnYm05MElHRjJZV2xzWVdKc1pRQkxaWGtnYUdGeklHVjRjR2x5WldRQVMyVjVJR2hoY3lCaVpXVnVJSEpsZG05clpXUUFTMlY1SUhkaGN5QnlaV3BsWTNSbFpDQmllU0J6WlhKMmFXTmxBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2xBbHNBOEFHMUJZd0ZKUUdEQmgwRGxBVC9BTWNETVFNTEJyd0Jqd0YvQThvRUt3RGFCcThBUWdOT0E5d0JEZ1FWQUtFR0RRR1VBZ3NDT0Faa0Fyd0Mvd0pkQStjRUN3ZlBBc3NGN3dYYkJlRUNIZ1pGQW9VQWdnSnNBMjhFOFFEekF4Z0YyUURhQTB3R1ZBSjdBWjBEdlFRQUFGRUFGUUs3QUxNRGJRRC9BWVVFTHdYNUJEZ0FaUUZHQVo4QXR3YW9BWE1DVXdFQjh3VWhCQUFBQUFBQUFBQUFMd0lBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURVRVJ3UldCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2dCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRVlGWUFWdUJXRUdBQURQQVFBQUFBQUFBQUFBeVFicEJ2a0dIZ2M1QjBrSFhnY0FBQUFBQUFBQUFBQUFBQUFBQUFBQWdONG9BSURJVFFBQXAzWUFBRFNlQUlBU3h3Q0FuKzRBQUg0WEFZQmNRQUdBNldjQkFNaVFBUUJWdUFFdUFBQUFBQUFBQUFBQUFBQUFBQUFBVTNWdUFFMXZiZ0JVZFdVQVYyVmtBRlJvZFFCR2Nta0FVMkYwQUZOMWJtUmhlUUJOYjI1a1lYa0FWSFZsYzJSaGVRQlhaV1J1WlhOa1lYa0FWR2gxY25Oa1lYa0FSbkpwWkdGNUFGTmhkSFZ5WkdGNUFFcGhiZ0JHWldJQVRXRnlBRUZ3Y2dCTllYa0FTblZ1QUVwMWJBQkJkV2NBVTJWd0FFOWpkQUJPYjNZQVJHVmpBRXBoYm5WaGNua0FSbVZpY25WaGNua0FUV0Z5WTJnQVFYQnlhV3dBVFdGNUFFcDFibVVBU25Wc2VRQkJkV2QxYzNRQVUyVndkR1Z0WW1WeUFFOWpkRzlpWlhJQVRtOTJaVzFpWlhJQVJHVmpaVzFpWlhJQVFVMEFVRTBBSldFZ0pXSWdKV1VnSlZRZ0pWa0FKVzB2SldRdkpYa0FKVWc2SlUwNkpWTUFKVWs2SlUwNkpWTWdKWEFBQUFBbGJTOGxaQzhsZVFBd01USXpORFUyTnpnNUFDVmhJQ1ZpSUNWbElDVlVJQ1ZaQUNWSU9pVk5PaVZUQUFBQUFBQmVXM2xaWFFCZVcyNU9YUUI1WlhNQWJtOEFBQUFBQUFBQUFBQUFBQUFBQUFML0FBUmtBQ0FBQUFULy94QUFBUUFCQUFFQS8vOEIvd0gvLy8vLy93SC9BZjhCL3dIL0FmOEIvd0gvQWYvLy8vLy9DdjhnQVAvL0EvOEIvd1QvSGdBQUFRWC8vLy8vLzJNQUFBaGpBT2dEQWdBQUFQLy8vLy8vQUFBQUFmOEIvLy8vLy8vLy8vLy8vLzhBQUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQWY4Qi8vLy8vLzhBQVNBQUJBQ0FBQUFJLy84Qi93SC8vLy8vLy8vL0FmOEcvd2YvQ1A4Si8vLy8vLys4QXJ3Q0FRRC8vd0VBQVFELy93QUEvLy8vLy8vLy8vOEFBQUFBQUFBQUFBQUFBQUFBQUFBQUZBRjQvLzhCQUFyLy8vLy8vLy8vLy84Qi93SC9BQUFBQUFBQUFmOEIvd0gvQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWY4QUFBQUFBQUFCL3dIL0FRQUFBQUVBQUFBQi8vLy8vLzhBQUFBQUFmLy8vd0FBQUFELy8vLy8vLy8vLy8vL0tBQUsvLy8vLy84QkFBci8vLy8vQVAvLy8vLy8vLy8vQVp3QkFmOEIvLy8vQVFELy8vLy8vLy8vLy8vLy8vLy8vd3IvLy8vLy93ei9EZjhBQUFBQUFBQUFBQUFBR1FBTEFCa1pHUUFBQUFBRkFBQUFBQUFBQ1FBQUFBQUxBQUFBQUFBQUFBQVpBQW9LR1JrWkF3b0hBQUVBQ1FzWUFBQUpCZ3NBQUFzQUJoa0FBQUFaR1JrQUFBQUFBQUFBQUFBQUFBQUFBQUFBRGdBQUFBQUFBQUFBR1FBTERSa1pHUUFOQUFBQ0FBa09BQUFBQ1FBT0FBQU9BU0VNQUFBQUFBQUFBQUFBQUFBVEFBQUFBQk1BQUFBQUNRd0FBQUFBQUF3QUFBd0JJUkFBQUFBQUFBQUFBQUFBQUE4QUFBQUVEd0FBQUFBSkVBQUFBQUFBRUFBQUVBRXFFZ0FBQUFBQUFBQUFBQUFBRVFBQUFBQVJBQUFBQUFrU0FBQUFBQUFTQUFBU0FBQWFBQUFBR2hvYUFRNGFBQUFBR2hvYUFBQUFBQUFBQ1FFaEZBQUFBQUFBQUFBQUFBQUFGd0FBQUFBWEFBQUFBQWtVQUFBQUFBQVVBQUFVQVRNV0FBQUFBQUFBQUFBQUFBQVZBQUFBQUJVQUFBQUFDUllBQUFBQUFCWUFBQllBQURBeE1qTTBOVFkzT0RsQlFrTkVSVVlCQWlNQkFRai8vLy8vLy8vLy93SHpEdEYwbmdCWG5iMHFnSEJTRC8vL1BpY0tBQUFBWkFBQUFPZ0RBQUFRSndBQW9JWUJBRUJDRHdDQWxwZ0FBT0gxQlJnQUFBQTFBQUFBY1FBQUFHdi8vLy9PKy8vL2tyLy8vd0FBQUFBQUFBQUEvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3dBQkFnTUVCUVlIQ0FuLy8vLy8vLy8vQ2dzTURRNFBFQkVTRXhRVkZoY1lHUm9iSEIwZUh5QWhJaVAvLy8vLy8vOEtDd3dORGc4UUVSSVRGQlVXRnhnWkdoc2NIUjRmSUNFaUkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy84QUFRSUVCd01HQlFBQUFBQUFBQUFDQUFEQUF3QUF3QVFBQU1BRkFBREFCZ0FBd0FjQUFNQUlBQURBQ1FBQXdBb0FBTUFMQUFEQURBQUF3QTBBQU1BT0FBREFEd0FBd0JBQUFNQVJBQURBRWdBQXdCTUFBTUFVQUFEQUZRQUF3QllBQU1BWEFBREFHQUFBd0JrQUFNQWFBQURBR3dBQXdCd0FBTUFkQUFEQUhnQUF3QjhBQU1BQUFBQ3pBUUFBd3dJQUFNTURBQUREQkFBQXd3VUFBTU1HQUFEREJ3QUF3d2dBQU1NSkFBRERDZ0FBd3dzQUFNTU1BQURERFFBQTB3NEFBTU1QQUFEREFBQU11d0VBRE1NQ0FBekRBd0FNd3dRQUROc0FBQUFBQUFBQUFBSUFBQUFEQUFBQUJRQUFBQWNBQUFBTEFBQUFEUUFBQUJFQUFBQVRBQUFBRndBQUFCMEFBQUFmQUFBQUpRQUFBQ2tBQUFBckFBQUFMd0FBQURVQUFBQTdBQUFBUFFBQUFFTUFBQUJIQUFBQVNRQUFBRThBQUFCVEFBQUFXUUFBQUdFQUFBQmxBQUFBWndBQUFHc0FBQUJ0QUFBQWNRQUFBSDhBQUFDREFBQUFpUUFBQUlzQUFBQ1ZBQUFBbHdBQUFKMEFBQUNqQUFBQXB3QUFBSzBBQUFDekFBQUF0UUFBQUw4QUFBREJBQUFBeFFBQUFNY0FBQURUQUFBQUFRQUFBQXNBQUFBTkFBQUFFUUFBQUJNQUFBQVhBQUFBSFFBQUFCOEFBQUFsQUFBQUtRQUFBQ3NBQUFBdkFBQUFOUUFBQURzQUFBQTlBQUFBUXdBQUFFY0FBQUJKQUFBQVR3QUFBRk1BQUFCWkFBQUFZUUFBQUdVQUFBQm5BQUFBYXdBQUFHMEFBQUJ4QUFBQWVRQUFBSDhBQUFDREFBQUFpUUFBQUlzQUFBQ1BBQUFBbFFBQUFKY0FBQUNkQUFBQW93QUFBS2NBQUFDcEFBQUFyUUFBQUxNQUFBQzFBQUFBdXdBQUFMOEFBQURCQUFBQXhRQUFBTWNBQUFEUkFBQUFBQUFBQUF6MEFBQWxBUUFBSmdFQUFDY0JBQUFvQVFBQUtRRUFBQ29CQUFBckFRQUFMQUVBQUMwQkFBQXVBUUFBTHdFQUFEQUJBQUF4QVFBQU1nRUFBQWdBQUFBQUFBQUFSUFFBQURNQkFBQTBBUUFBK1AvLy8vai8vLzlFOUFBQU5RRUFBRFlCQUFDYzhnQUFzUElBQUFRQUFBQUFBQUFBalBRQUFEY0JBQUE0QVFBQS9QLy8vL3ovLy8rTTlBQUFPUUVBQURvQkFBRE04Z0FBNFBJQUFBQUFBQUFnOVFBQU93RUFBRHdCQUFBOUFRQUFQZ0VBQUQ4QkFBQkFBUUFBUVFFQUFFSUJBQUJEQVFBQVJBRUFBRVVCQUFCR0FRQUFSd0VBQUVnQkFBQUlBQUFBQUFBQUFGajFBQUJKQVFBQVNnRUFBUGovLy8vNC8vLy9XUFVBQUVzQkFBQk1BUUFBUFBNQUFGRHpBQUFFQUFBQUFBQUFBS0QxQUFCTkFRQUFUZ0VBQVB6Ly8vLzgvLy8vb1BVQUFFOEJBQUJRQVFBQWJQTUFBSUR6QUFBQUFBQUF6UE1BQUZFQkFBQlNBUUFBVGxOME0xOWZNamxpWVhOcFkxOXBiM05KWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVUFBQUFRSWdFQW9QTUFBTnoxQUFCT1UzUXpYMTh5TVRWaVlYTnBZMTl6ZEhKbFlXMWlkV1pKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVUFBQUFBNkNFQkFOanpBQUJPVTNRelgxOHlNVE5pWVhOcFkxOXBjM1J5WldGdFNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGQUFCc0lnRUFGUFFBQUFBQUFBQUJBQUFBelBNQUFBUDAvLzlPVTNRelgxOHlNVE5pWVhOcFkxOXZjM1J5WldGdFNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGQUFCc0lnRUFYUFFBQUFBQUFBQUJBQUFBelBNQUFBUDAvLzhBQUFBQTRQUUFBRk1CQUFCVUFRQUFUbE4wTTE5Zk1qbGlZWE5wWTE5cGIzTkpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVVQUFBQVFJZ0VBdFBRQUFOejFBQUJPVTNRelgxOHlNVFZpWVhOcFkxOXpkSEpsWVcxaWRXWkpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVVQUFBQUE2Q0VCQU96MEFBQk9VM1F6WDE4eU1UTmlZWE5wWTE5cGMzUnlaV0Z0U1hkT1UxOHhNV05vWVhKZmRISmhhWFJ6U1hkRlJVVkZBQUJzSWdFQUtQVUFBQUFBQUFBQkFBQUE0UFFBQUFQMC8vOU9VM1F6WDE4eU1UTmlZWE5wWTE5dmMzUnlaV0Z0U1hkT1UxOHhNV05vWVhKZmRISmhhWFJ6U1hkRlJVVkZBQUJzSWdFQWNQVUFBQUFBQUFBQkFBQUE0UFFBQUFQMC8vOEFBQUFBM1BVQUFGVUJBQUJXQVFBQVRsTjBNMTlmTWpocGIzTmZZbUZ6WlVVQUFBRG9JUUVBeVBVQUFMZ2xBUUFBQUFBQUFBQUFBTjRTQkpVQUFBQUEvLy8vLy8vLy8vLy8vLy8vOFBVQUFCUUFBQUJETGxWVVJpMDRBUUlFOWdIZUE3RDJBQUFsQVFBQVdBRUFBRmtCQUFBb0FRQUFLUUVBQUNvQkFBQXJBUUFBTEFFQUFDMEJBQUJhQVFBQVd3RUFBRndCQUFBeEFRQUFNZ0VBQUU1VGRETmZYekl4TUY5ZmMzUmthVzVpZFdaSlkwVkZBQkFpQVFDWTlnQUFEUFFBQUFBQUFBQVk5d0FBSlFFQUFGMEJBQUJlQVFBQUtBRUFBQ2tCQUFBcUFRQUFYd0VBQUN3QkFBQXRBUUFBTGdFQUFDOEJBQUF3QVFBQVlBRUFBR0VCQUFCT1UzUXpYMTh5TVRGZlgzTjBaRzkxZEdKMVprbGpSVVVBQUFBQUVDSUJBUHoyQUFBTTlBQUFBQUFBQUh6M0FBQTdBUUFBWWdFQUFHTUJBQUErQVFBQVB3RUFBRUFCQUFCQkFRQUFRZ0VBQUVNQkFBQmtBUUFBWlFFQUFHWUJBQUJIQVFBQVNBRUFBRTVUZEROZlh6SXhNRjlmYzNSa2FXNWlkV1pKZDBWRkFCQWlBUUJrOXdBQUlQVUFBQUFBQUFEazl3QUFPd0VBQUdjQkFBQm9BUUFBUGdFQUFEOEJBQUJBQVFBQWFRRUFBRUlCQUFCREFRQUFSQUVBQUVVQkFBQkdBUUFBYWdFQUFHc0JBQUJPVTNRelgxOHlNVEZmWDNOMFpHOTFkR0oxWmtsM1JVVUFBQUFBRUNJQkFNajNBQUFnOVFBQVRFTmZRMVJaVUVVQUFBQUFURU5mVGxWTlJWSkpRd0FBVEVOZlZFbE5SUUFBQUFBQVRFTmZRMDlNVEVGVVJRQUFURU5mVFU5T1JWUkJVbGtBVEVOZlRVVlRVMEZIUlZNQVFQb0IrUU1CQUFBQUFnQUFBQU1BQUFBRUFBQUFCUUFBQUFZQUFBQUhBQUFBQ0FBQUFBa0FBQUFLQUFBQUN3QUFBQXdBQUFBTkFBQUFEZ0FBQUE4QUFBQVFBQUFBRVFBQUFCSUFBQUFUQUFBQUZBQUFBQlVBQUFBV0FBQUFGd0FBQUJnQUFBQVpBQUFBR2dBQUFCc0FBQUFjQUFBQUhRQUFBQjRBQUFBZkFBQUFJQUFBQUNFQUFBQWlBQUFBSXdBQUFDUUFBQUFsQUFBQUpnQUFBQ2NBQUFBb0FBQUFLUUFBQUNvQUFBQXJBQUFBTEFBQUFDMEFBQUF1QUFBQUx3QUFBREFBQUFBeEFBQUFNZ0FBQURNQUFBQTBBQUFBTlFBQUFEWUFBQUEzQUFBQU9BQUFBRGtBQUFBNkFBQUFPd0FBQUR3QUFBQTlBQUFBUGdBQUFEOEFBQUJBQUFBQVFRQUFBRUlBQUFCREFBQUFSQUFBQUVVQUFBQkdBQUFBUndBQUFFZ0FBQUJKQUFBQVNnQUFBRXNBQUFCTUFBQUFUUUFBQUU0QUFBQlBBQUFBVUFBQUFGRUFBQUJTQUFBQVV3QUFBRlFBQUFCVkFBQUFWZ0FBQUZjQUFBQllBQUFBV1FBQUFGb0FBQUJiQUFBQVhBQUFBRjBBQUFCZUFBQUFYd0FBQUdBQUFBQkJBQUFBUWdBQUFFTUFBQUJFQUFBQVJRQUFBRVlBQUFCSEFBQUFTQUFBQUVrQUFBQktBQUFBU3dBQUFFd0FBQUJOQUFBQVRnQUFBRThBQUFCUUFBQUFVUUFBQUZJQUFBQlRBQUFBVkFBQUFGVUFBQUJXQUFBQVZ3QUFBRmdBQUFCWkFBQUFXZ0FBQUhzQUFBQjhBQUFBZlFBQUFINEFBQUIvQVFOUUFBRUIrUU1CQUFBQUFnQUFBQU1BQUFBRUFBQUFCUUFBQUFZQUFBQUhBQUFBQ0FBQUFBa0FBQUFLQUFBQUN3QUFBQXdBQUFBTkFBQUFEZ0FBQUE4QUFBQVFBQUFBRVFBQUFCSUFBQUFUQUFBQUZBQUFBQlVBQUFBV0FBQUFGd0FBQUJnQUFBQVpBQUFBR2dBQUFCc0FBQUFjQUFBQUhRQUFBQjRBQUFBZkFBQUFJQUFBQUNFQUFBQWlBQUFBSXdBQUFDUUFBQUFsQUFBQUpnQUFBQ2NBQUFBb0FBQUFLUUFBQUNvQUFBQXJBQUFBTEFBQUFDMEFBQUF1QUFBQUx3QUFBREFBQUFBeEFBQUFNZ0FBQURNQUFBQTBBQUFBTlFBQUFEWUFBQUEzQUFBQU9BQUFBRGtBQUFBNkFBQUFPd0FBQUR3QUFBQTlBQUFBUGdBQUFEOEFBQUJBQUFBQVlRQUFBR0lBQUFCakFBQUFaQUFBQUdVQUFBQm1BQUFBWndBQUFHZ0FBQUJwQUFBQWFnQUFBR3NBQUFCc0FBQUFiUUFBQUc0QUFBQnZBQUFBY0FBQUFIRUFBQUJ5QUFBQWN3QUFBSFFBQUFCMUFBQUFkZ0FBQUhjQUFBQjRBQUFBZVFBQUFIb0FBQUJiQUFBQVhBQUFBRjBBQUFCZUFBQUFYd0FBQUdBQUFBQmhBQUFBWWdBQUFHTUFBQUJrQUFBQVpRQUFBR1lBQUFCbkFBQUFhQUFBQUdrQUFBQnFBQUFBYXdBQUFHd0FBQUJ0QUFBQWJnQUFBRzhBQUFCd0FBQUFjUUFBQUhJQUFBQnpBQUFBZEFBQUFIVUFBQUIyQUFBQWR3QUFBSGdBQUFCNUFBQUFlZ0FBQUhzQUFBQjhBQUFBZlFBQUFINEFBQUIvQWIwR01ERXlNelExTmpjNE9XRmlZMlJsWmtGQ1EwUkZSbmhZS3kxd1VHbEpiazRBSlVrNkpVMDZKVk1nSlhBbFNEb2xUUUFBQUFBQUFBQUFBQUFBQUFBQUFDVUFBQUJ0QUFBQUx3QUFBQ1VBQUFCa0FBQUFMd0FBQUNVQUFBQjVBQUFBSlFBQUFGa0FBQUF0QUFBQUpRQUFBRzBBQUFBdEFBQUFKUUFBQUdRQUFBQWxBQUFBU1FBQUFEb0FBQUFsQUFBQVRRQUFBRG9BQUFBbEFBQUFVd0FBQUNBQUFBQWxBQUFBY0FBQUFBQUFBQUFsQUFBQVNBQUFBRG9BQUFBbEFBQUFUUUFBQUFBQUFBQUFBQUFBQUFBQUFDVUFBQUJJQUFBQU9nQUFBQ1VBQUFCTkFBQUFPZ0FBQUNVQUFBQlRBQUFBQUFBQUFKUU9BUUNBQVFBQWdRRUFBSUlCQUFBQUFBQUE5QTRCQUlNQkFBQ0VBUUFBZ2dFQUFJVUJBQUNHQVFBQWh3RUFBSWdCQUFDSkFRQUFpZ0VBQUlzQkFBQ01BUUFBQUFBQUFBQUFBQUFFQUFBQUJBQUFBQVFBQUFBRUFBQUFCQUFBQUFRQUFBQUVBQUFBQkFBQUFBUUFBQUFGQWdBQUJRQUFBQVVBQUFBRkFBQUFCUUFBQUFRQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQUJBQUFBQVFBQUFBRUFBQUFCQUFBQUFRQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQUJBQUFBQVFBQUFBRUFBQUFCQUFBQUFNQ0FBQ0NBQUFBZ2dBQUFJSUFBQUNDQUFBQWdnQUFBSUlBQUFDQ0FBQUFnZ0FBQUlJQUFBQ0NBQUFBZ2dBQUFJSUFBQUNDQUFBQWdnQUFBSUlBQUFCQ0FRQUFRZ0VBQUVJQkFBQkNBUUFBUWdFQUFFSUJBQUJDQVFBQVFnRUFBRUlCQUFCQ0FRQUFnZ0FBQUlJQUFBQ0NBQUFBZ2dBQUFJSUFBQUNDQUFBQWdnQUFBQ29CQUFBcUFRQUFLZ0VBQUNvQkFBQXFBUUFBS2dFQUFDb0FBQUFxQUFBQUtnQUFBQ29BQUFBcUFBQUFLZ0FBQUNvQUFBQXFBQUFBS2dBQUFDb0FBQUFxQUFBQUtnQUFBQ29BQUFBcUFBQUFLZ0FBQUNvQUFBQXFBQUFBS2dBQUFDb0FBQUFxQUFBQWdnQUFBSUlBQUFDQ0FBQUFnZ0FBQUlJQUFBQ0NBQUFBTWdFQUFESUJBQUF5QVFBQU1nRUFBRElCQUFBeUFRQUFNZ0FBQURJQUFBQXlBQUFBTWdBQUFESUFBQUF5QUFBQU1nQUFBRElBQUFBeUFBQUFNZ0FBQURJQUFBQXlBQUFBTWdBQUFESUFBQUF5QUFBQU1nQUFBRElBQUFBeUFBQUFNZ0FBQURJQUFBQ0NBQUFBZ2dBQUFJSUFBQUNDQUFBQUJBR1FOVndPQVFDTkFRQUFqZ0VBQUlJQkFBQ1BBUUFBa0FFQUFKRUJBQUNTQVFBQWt3RUFBSlFCQUFDVkFRQUFBQUFBQUN3UEFRQ1dBUUFBbHdFQUFJSUJBQUNZQVFBQW1RRUFBSm9CQUFDYkFRQUFuQUVBQUFBQUFBQlFEd0VBblFFQUFKNEJBQUNDQVFBQW53RUFBS0FCQUFDaEFRQUFvZ0VBQUtNQkFBQjBBQUFBY2dBQUFIVUFBQUJsQUFBQUFBQUFBR1lBQUFCaEFBQUFiQUFBQUhNQUFBQmxBQUFBQUFBQUFDVUFBQUJ0QUFBQUx3QUFBQ1VBQUFCa0FBQUFMd0FBQUNVQUFBQjVBQUFBQUFBQUFDVUFBQUJJQUFBQU9nQUFBQ1VBQUFCTkFBQUFPZ0FBQUNVQUFBQlRBQUFBQUFBQUFDVUFBQUJoQUFBQUlBQUFBQ1VBQUFCaUFBQUFJQUFBQUNVQUFBQmtBQUFBSUFBQUFDVUFBQUJJQUFBQU9nQUFBQ1VBQUFCTkFBQUFPZ0FBQUNVQUFBQlRBQUFBSUFBQUFDVUFBQUJaQUFBQUFBQUFBQ1VBQUFCSkFBQUFPZ0FBQUNVQUFBQk5BQUFBT2dBQUFDVUFBQUJUQUFBQUlBQUFBQ1VBQUFCd0FBQUFBQUFBQUFBQUFBQTBDd0VBcEFFQUFLVUJBQUNDQVFBQVRsTjBNMTlmTWpac2IyTmhiR1UxWm1GalpYUkZBQUFBRUNJQkFCd0xBUUJnSHdFQUFBQUFBTFFMQVFDa0FRQUFwZ0VBQUlJQkFBQ25BUUFBcUFFQUFLa0JBQUNxQVFBQXF3RUFBS3dCQUFDdEFRQUFyZ0VBQUs4QkFBQ3dBUUFBc1FFQUFMSUJBQUJPVTNRelgxOHlOV04wZVhCbFNYZEZSUUJPVTNRelgxOHlNVEJqZEhsd1pWOWlZWE5sUlFBQTZDRUJBSllMQVFCc0lnRUFoQXNCQUFBQUFBQUNBQUFBTkFzQkFBSUFBQUNzQ3dFQUFnQUFBQUFBQUFCSURBRUFwQUVBQUxNQkFBQ0NBUUFBdEFFQUFMVUJBQUMyQVFBQXR3RUFBTGdCQUFDNUFRQUF1Z0VBQUU1VGRETmZYekkzWTI5a1pXTjJkRWxqWXpFeFgxOXRZbk4wWVhSbFgzUkZSUUJPVTNRelgxOHlNVEpqYjJSbFkzWjBYMkpoYzJWRkFBQUFBT2doQVFBbURBRUFiQ0lCQUFRTUFRQUFBQUFBQWdBQUFEUUxBUUFDQUFBQVFBd0JBQUlBQUFBQUFBQUF2QXdCQUtRQkFBQzdBUUFBZ2dFQUFMd0JBQUM5QVFBQXZnRUFBTDhCQUFEQUFRQUF3UUVBQU1JQkFBQk9VM1F6WDE4eU4yTnZaR1ZqZG5SSlJITmpNVEZmWDIxaWMzUmhkR1ZmZEVWRkFBQnNJZ0VBbUF3QkFBQUFBQUFDQUFBQU5Bc0JBQUlBQUFCQURBRUFBZ0FBQUFBQUFBQXdEUUVBcEFFQUFNTUJBQUNDQVFBQXhBRUFBTVVCQUFER0FRQUF4d0VBQU1nQkFBREpBUUFBeWdFQUFFNVRkRE5mWHpJM1kyOWtaV04yZEVsRWMwUjFNVEZmWDIxaWMzUmhkR1ZmZEVWRkFHd2lBUUFNRFFFQUFBQUFBQUlBQUFBMEN3RUFBZ0FBQUVBTUFRQUNBQUFBQUFBQUFLUU5BUUNrQVFBQXl3RUFBSUlCQUFETUFRQUF6UUVBQU00QkFBRFBBUUFBMEFFQUFORUJBQURTQVFBQVRsTjBNMTlmTWpkamIyUmxZM1owU1VScFl6RXhYMTl0WW5OMFlYUmxYM1JGUlFBQWJDSUJBSUFOQVFBQUFBQUFBZ0FBQURRTEFRQUNBQUFBUUF3QkFBSUFBQUFBQUFBQUdBNEJBS1FCQUFEVEFRQUFnZ0VBQU5RQkFBRFZBUUFBMWdFQUFOY0JBQURZQVFBQTJRRUFBTm9CQUFCT1UzUXpYMTh5TjJOdlpHVmpkblJKUkdsRWRURXhYMTl0WW5OMFlYUmxYM1JGUlFCc0lnRUE5QTBCQUFBQUFBQUNBQUFBTkFzQkFBSUFBQUJBREFFQUFnQUFBRTVUZEROZlh6STNZMjlrWldOMmRFbDNZekV4WDE5dFluTjBZWFJsWDNSRlJRQUFBR3dpQVFBNERnRUFBQUFBQUFJQUFBQTBDd0VBQWdBQUFFQU1BUUFDQUFBQVRsTjBNMTlmTWpac2IyTmhiR1UxWDE5cGJYQkZBQUFBRUNJQkFId09BUUEwQ3dFQVRsTjBNMTlmTWpkamIyeHNZWFJsU1dORlJRQVFJZ0VBb0E0QkFEUUxBUUJPVTNRelgxOHlOMk52Ykd4aGRHVkpkMFZGQUJBaUFRREFEZ0VBTkFzQkFFNVRkRE5mWHpJMVkzUjVjR1ZKWTBWRkFBQUFiQ0lCQU9BT0FRQUFBQUFBQWdBQUFEUUxBUUFDQUFBQXJBc0JBQUlBQUFCT1UzUXpYMTh5T0c1MWJYQjFibU4wU1dORlJRQUFBQUFRSWdFQUZBOEJBRFFMQVFCT1UzUXpYMTh5T0c1MWJYQjFibU4wU1hkRlJRQUFBQUFRSWdFQU9BOEJBRFFMQVFBQUFBQUF0QTRCQU5zQkFBRGNBUUFBZ2dFQUFOMEJBQURlQVFBQTN3RUFBQUFBQUFEVURnRUE0QUVBQU9FQkFBQ0NBUUFBNGdFQUFPTUJBQURrQVFBQUFBQUFBSEFRQVFDa0FRQUE1UUVBQUlJQkFBRG1BUUFBNXdFQUFPZ0JBQURwQVFBQTZnRUFBT3NCQUFEc0FRQUE3UUVBQU80QkFBRHZBUUFBOEFFQUFFNVRkRE5mWHpJM2JuVnRYMmRsZEVsalRsTmZNVGxwYzNSeVpXRnRZblZtWDJsMFpYSmhkRzl5U1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVVkZSVVVBVGxOME0xOWZNamxmWDI1MWJWOW5aWFJKWTBWRkFFNVRkRE5mWHpJeE5GOWZiblZ0WDJkbGRGOWlZWE5sUlFBQTZDRUJBRFlRQVFCc0lnRUFJQkFCQUFBQUFBQUJBQUFBVUJBQkFBQUFBQUJzSWdFQTNBOEJBQUFBQUFBQ0FBQUFOQXNCQUFJQUFBQllFQUVBQUFBQUFBQUFBQUJFRVFFQXBBRUFBUEVCQUFDQ0FRQUE4Z0VBQVBNQkFBRDBBUUFBOVFFQUFQWUJBQUQzQVFBQStBRUFBUGtCQUFENkFRQUErd0VBQVB3QkFBQk9VM1F6WDE4eU4yNTFiVjluWlhSSmQwNVRYekU1YVhOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsM1RsTmZNVEZqYUdGeVgzUnlZV2wwYzBsM1JVVkZSVVZGQUU1VGRETmZYekk1WDE5dWRXMWZaMlYwU1hkRlJRQUFBR3dpQVFBVUVRRUFBQUFBQUFFQUFBQlFFQUVBQUFBQUFHd2lBUURRRUFFQUFBQUFBQUlBQUFBMEN3RUFBZ0FBQUN3UkFRQUFBQUFBQUFBQUFDd1NBUUNrQVFBQS9RRUFBSUlCQUFEK0FRQUEvd0VBQUFBQ0FBQUJBZ0FBQWdJQUFBTUNBQUFFQWdBQUJRSUFBRTVUZEROZlh6STNiblZ0WDNCMWRFbGpUbE5mTVRsdmMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGUlVVQVRsTjBNMTlmTWpsZlgyNTFiVjl3ZFhSSlkwVkZBRTVUZEROZlh6SXhORjlmYm5WdFgzQjFkRjlpWVhObFJRQUE2Q0VCQVBJUkFRQnNJZ0VBM0JFQkFBQUFBQUFCQUFBQURCSUJBQUFBQUFCc0lnRUFtQkVCQUFBQUFBQUNBQUFBTkFzQkFBSUFBQUFVRWdFQUFBQUFBQUFBQUFEMEVnRUFwQUVBQUFZQ0FBQ0NBUUFBQndJQUFBZ0NBQUFKQWdBQUNnSUFBQXNDQUFBTUFnQUFEUUlBQUE0Q0FBQk9VM1F6WDE4eU4yNTFiVjl3ZFhSSmQwNVRYekU1YjNOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsM1RsTmZNVEZqYUdGeVgzUnlZV2wwYzBsM1JVVkZSVVZGQUU1VGRETmZYekk1WDE5dWRXMWZjSFYwU1hkRlJRQUFBR3dpQVFERUVnRUFBQUFBQUFFQUFBQU1FZ0VBQUFBQUFHd2lBUUNBRWdFQUFBQUFBQUlBQUFBMEN3RUFBZ0FBQU53U0FRQUFBQUFBQUFBQUFQUVRBUUFQQWdBQUVBSUFBSUlCQUFBUkFnQUFFZ0lBQUJNQ0FBQVVBZ0FBRlFJQUFCWUNBQUFYQWdBQStQLy8vL1FUQVFBWUFnQUFHUUlBQUJvQ0FBQWJBZ0FBSEFJQUFCMENBQUFlQWdBQVRsTjBNMTlmTWpoMGFXMWxYMmRsZEVsalRsTmZNVGxwYzNSeVpXRnRZblZtWDJsMFpYSmhkRzl5U1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVVkZSVVVBVGxOME0xOWZNamwwYVcxbFgySmhjMlZGQU9naEFRQ3RFd0VBVGxOME0xOWZNakl3WDE5MGFXMWxYMmRsZEY5algzTjBiM0poWjJWSlkwVkZBQUFBNkNFQkFNZ1RBUUJzSWdFQWFCTUJBQUFBQUFBREFBQUFOQXNCQUFJQUFBREFFd0VBQWdBQUFPd1RBUUFBQ0FBQUFBQUFBT0FVQVFBZkFnQUFJQUlBQUlJQkFBQWhBZ0FBSWdJQUFDTUNBQUFrQWdBQUpRSUFBQ1lDQUFBbkFnQUErUC8vLytBVUFRQW9BZ0FBS1FJQUFDb0NBQUFyQWdBQUxBSUFBQzBDQUFBdUFnQUFUbE4wTTE5Zk1qaDBhVzFsWDJkbGRFbDNUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVVZGUlVVQVRsTjBNMTlmTWpJd1gxOTBhVzFsWDJkbGRGOWpYM04wYjNKaFoyVkpkMFZGQUFEb0lRRUF0UlFCQUd3aUFRQndGQUVBQUFBQUFBTUFBQUEwQ3dFQUFnQUFBTUFUQVFBQ0FBQUEyQlFCQUFBSUFBQUFBQUFBaEJVQkFDOENBQUF3QWdBQWdnRUFBREVDQUFCT1UzUXpYMTh5T0hScGJXVmZjSFYwU1dOT1UxOHhPVzl6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVkZSUUJPVTNRelgxOHlNVEJmWDNScGJXVmZjSFYwUlFBQUFPZ2hBUUJsRlFFQWJDSUJBQ0FWQVFBQUFBQUFBZ0FBQURRTEFRQUNBQUFBZkJVQkFBQUlBQUFBQUFBQUJCWUJBRElDQUFBekFnQUFnZ0VBQURRQ0FBQk9VM1F6WDE4eU9IUnBiV1ZmY0hWMFNYZE9VMTh4T1c5emRISmxZVzFpZFdaZmFYUmxjbUYwYjNKSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZSVVZGUlFBQUFBQnNJZ0VBdkJVQkFBQUFBQUFDQUFBQU5Bc0JBQUlBQUFCOEZRRUFBQWdBQUFBQUFBQ1lGZ0VBcEFFQUFEVUNBQUNDQVFBQU5nSUFBRGNDQUFBNEFnQUFPUUlBQURvQ0FBQTdBZ0FBUEFJQUFEMENBQUErQWdBQVRsTjBNMTlmTWpFd2JXOXVaWGx3ZFc1amRFbGpUR0l3UlVWRkFFNVRkRE5mWHpJeE1HMXZibVY1WDJKaGMyVkZBQUFBQU9naEFRQjRGZ0VBYkNJQkFGd1dBUUFBQUFBQUFnQUFBRFFMQVFBQ0FBQUFrQllCQUFJQUFBQUFBQUFBREJjQkFLUUJBQUEvQWdBQWdnRUFBRUFDQUFCQkFnQUFRZ0lBQUVNQ0FBQkVBZ0FBUlFJQUFFWUNBQUJIQWdBQVNBSUFBRTVUZEROZlh6SXhNRzF2Ym1WNWNIVnVZM1JKWTB4aU1VVkZSUUJzSWdFQThCWUJBQUFBQUFBQ0FBQUFOQXNCQUFJQUFBQ1FGZ0VBQWdBQUFBQUFBQUNBRndFQXBBRUFBRWtDQUFDQ0FRQUFTZ0lBQUVzQ0FBQk1BZ0FBVFFJQUFFNENBQUJQQWdBQVVBSUFBRkVDQUFCU0FnQUFUbE4wTTE5Zk1qRXdiVzl1Wlhsd2RXNWpkRWwzVEdJd1JVVkZBR3dpQVFCa0Z3RUFBQUFBQUFJQUFBQTBDd0VBQWdBQUFKQVdBUUFDQUFBQUFBQUFBUFFYQVFDa0FRQUFVd0lBQUlJQkFBQlVBZ0FBVlFJQUFGWUNBQUJYQWdBQVdBSUFBRmtDQUFCYUFnQUFXd0lBQUZ3Q0FBQk9VM1F6WDE4eU1UQnRiMjVsZVhCMWJtTjBTWGRNWWpGRlJVVUFiQ0lCQU5nWEFRQUFBQUFBQWdBQUFEUUxBUUFDQUFBQWtCWUJBQUlBQUFBQUFBQUFtQmdCQUtRQkFBQmRBZ0FBZ2dFQUFGNENBQUJmQWdBQVRsTjBNMTlmTWpsdGIyNWxlVjluWlhSSlkwNVRYekU1YVhOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSVVZGQUU1VGRETmZYekl4TVY5ZmJXOXVaWGxmWjJWMFNXTkZSUUFBNkNFQkFIWVlBUUJzSWdFQU1CZ0JBQUFBQUFBQ0FBQUFOQXNCQUFJQUFBQ1FHQUVBQUFBQUFBQUFBQUE4R1FFQXBBRUFBR0FDQUFDQ0FRQUFZUUlBQUdJQ0FBQk9VM1F6WDE4eU9XMXZibVY1WDJkbGRFbDNUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVVZGUlVVQVRsTjBNMTlmTWpFeFgxOXRiMjVsZVY5blpYUkpkMFZGQUFEb0lRRUFHaGtCQUd3aUFRRFVHQUVBQUFBQUFBSUFBQUEwQ3dFQUFnQUFBRFFaQVFBQUFBQUFBQUFBQU9BWkFRQ2tBUUFBWXdJQUFJSUJBQUJrQWdBQVpRSUFBRTVUZEROZlh6STViVzl1WlhsZmNIVjBTV05PVTE4eE9XOXpkSEpsWVcxaWRXWmZhWFJsY21GMGIzSkpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGUlVWRlJRQk9VM1F6WDE4eU1URmZYMjF2Ym1WNVgzQjFkRWxqUlVVQUFPZ2hBUUMrR1FFQWJDSUJBSGdaQVFBQUFBQUFBZ0FBQURRTEFRQUNBQUFBMkJrQkFBQUFBQUFBQUFBQWhCb0JBS1FCQUFCbUFnQUFnZ0VBQUdjQ0FBQm9BZ0FBVGxOME0xOWZNamx0YjI1bGVWOXdkWFJKZDA1VFh6RTViM04wY21WaGJXSjFabDlwZEdWeVlYUnZja2wzVGxOZk1URmphR0Z5WDNSeVlXbDBjMGwzUlVWRlJVVkZBRTVUZEROZlh6SXhNVjlmYlc5dVpYbGZjSFYwU1hkRlJRQUE2Q0VCQUdJYUFRQnNJZ0VBSEJvQkFBQUFBQUFDQUFBQU5Bc0JBQUlBQUFCOEdnRUFBQUFBQUFBQUFBRDhHZ0VBcEFFQUFHa0NBQUNDQVFBQWFnSUFBR3NDQUFCc0FnQUFUbE4wTTE5Zk1qaHRaWE56WVdkbGMwbGpSVVVBVGxOME0xOWZNakV6YldWemMyRm5aWE5mWW1GelpVVUFBQUFBNkNFQkFOa2FBUUJzSWdFQXhCb0JBQUFBQUFBQ0FBQUFOQXNCQUFJQUFBRDBHZ0VBQWdBQUFBQUFBQUJVR3dFQXBBRUFBRzBDQUFDQ0FRQUFiZ0lBQUc4Q0FBQndBZ0FBVGxOME0xOWZNamh0WlhOellXZGxjMGwzUlVVQUFBQUFiQ0lCQUR3YkFRQUFBQUFBQWdBQUFEUUxBUUFDQUFBQTlCb0JBQUlBQUFCVEFBQUFkUUFBQUc0QUFBQmtBQUFBWVFBQUFIa0FBQUFBQUFBQVRRQUFBRzhBQUFCdUFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFGUUFBQUIxQUFBQVpRQUFBSE1BQUFCa0FBQUFZUUFBQUhrQUFBQUFBQUFBVndBQUFHVUFBQUJrQUFBQWJnQUFBR1VBQUFCekFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFGUUFBQUJvQUFBQWRRQUFBSElBQUFCekFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFFWUFBQUJ5QUFBQWFRQUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQlRBQUFBWVFBQUFIUUFBQUIxQUFBQWNnQUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQlRBQUFBZFFBQUFHNEFBQUFBQUFBQVRRQUFBRzhBQUFCdUFBQUFBQUFBQUZRQUFBQjFBQUFBWlFBQUFBQUFBQUJYQUFBQVpRQUFBR1FBQUFBQUFBQUFWQUFBQUdnQUFBQjFBQUFBQUFBQUFFWUFBQUJ5QUFBQWFRQUFBQUFBQUFCVEFBQUFZUUFBQUhRQUFBQUFBQUFBU2dBQUFHRUFBQUJ1QUFBQWRRQUFBR0VBQUFCeUFBQUFlUUFBQUFBQUFBQkdBQUFBWlFBQUFHSUFBQUJ5QUFBQWRRQUFBR0VBQUFCeUFBQUFlUUFBQUFBQUFBQk5BQUFBWVFBQUFISUFBQUJqQUFBQWFBQUFBQUFBQUFCQkFBQUFjQUFBQUhJQUFBQnBBQUFBYkFBQUFBQUFBQUJOQUFBQVlRQUFBSGtBQUFBQUFBQUFTZ0FBQUhVQUFBQnVBQUFBWlFBQUFBQUFBQUJLQUFBQWRRQUFBR3dBQUFCNUFBQUFBQUFBQUVFQUFBQjFBQUFBWndBQUFIVUFBQUJ6QUFBQWRBQUFBQUFBQUFCVEFBQUFaUUFBQUhBQUFBQjBBQUFBWlFBQUFHMEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFUd0FBQUdNQUFBQjBBQUFBYndBQUFHSUFBQUJsQUFBQWNnQUFBQUFBQUFCT0FBQUFid0FBQUhZQUFBQmxBQUFBYlFBQUFHSUFBQUJsQUFBQWNnQUFBQUFBQUFCRUFBQUFaUUFBQUdNQUFBQmxBQUFBYlFBQUFHSUFBQUJsQUFBQWNnQUFBQUFBQUFCS0FBQUFZUUFBQUc0QUFBQUFBQUFBUmdBQUFHVUFBQUJpQUFBQUFBQUFBRTBBQUFCaEFBQUFjZ0FBQUFBQUFBQkJBQUFBY0FBQUFISUFBQUFBQUFBQVNnQUFBSFVBQUFCdUFBQUFBQUFBQUVvQUFBQjFBQUFBYkFBQUFBQUFBQUJCQUFBQWRRQUFBR2NBQUFBQUFBQUFVd0FBQUdVQUFBQndBQUFBQUFBQUFFOEFBQUJqQUFBQWRBQUFBQUFBQUFCT0FBQUFid0FBQUhZQUFBQUFBQUFBUkFBQUFHVUFBQUJqQUFBQUFBQUFBRUVBQUFCTkFBQUFBQUFBQUZBQUFBQk5BQUFBQUFBQUFBQUFBQURzRXdFQUdBSUFBQmtDQUFBYUFnQUFHd0lBQUJ3Q0FBQWRBZ0FBSGdJQUFBQUFBQURZRkFFQUtBSUFBQ2tDQUFBcUFnQUFLd0lBQUN3Q0FBQXRBZ0FBTGdJQUFBQUFBQUJnSHdFQUdBQUFBSEVDQUFCeUFnQUFUbE4wTTE5Zk1qRTBYMTl6YUdGeVpXUmZZMjkxYm5SRkFBQUFBT2doQVFCRUh3RUFUbE4wTTE5Zk1qRTVYMTl6YUdGeVpXUmZkMlZoYTE5amIzVnVkRVVBQUFCc0lnRUFhQjhCQUFBQUFBQUJBQUFBWUI4QkFBQUFBQUJPTVRCZlgyTjRlR0ZpYVhZeE1UWmZYM05vYVcxZmRIbHdaVjlwYm1adlJRQUFBQUFRSWdFQW9COEJBQndrQVFCT01UQmZYMk40ZUdGaWFYWXhNVGRmWDJOc1lYTnpYM1I1Y0dWZmFXNW1iMFVBQUFBUUlnRUEwQjhCQU1RZkFRQk9NVEJmWDJONGVHRmlhWFl4TVRkZlgzQmlZWE5sWDNSNWNHVmZhVzVtYjBVQUFBQVFJZ0VBQUNBQkFNUWZBUUJPTVRCZlgyTjRlR0ZpYVhZeE1UbGZYM0J2YVc1MFpYSmZkSGx3WlY5cGJtWnZSUUFRSWdFQU1DQUJBQ1FnQVFCT01UQmZYMk40ZUdGaWFYWXhNakJmWDJaMWJtTjBhVzl1WDNSNWNHVmZhVzVtYjBVQUFBQUFFQ0lCQUdBZ0FRREVId0VBVGpFd1gxOWplSGhoWW1sMk1USTVYMTl3YjJsdWRHVnlYM1J2WDIxbGJXSmxjbDkwZVhCbFgybHVabTlGQUFBQUVDSUJBSlFnQVFBa0lBRUFBQUFBQUJRaEFRQnpBZ0FBZEFJQUFIVUNBQUIyQWdBQWR3SUFBRTR4TUY5ZlkzaDRZV0pwZGpFeU0xOWZablZ1WkdGdFpXNTBZV3hmZEhsd1pWOXBibVp2UlFBUUlnRUE3Q0FCQU1RZkFRQjJBQUFBMkNBQkFDQWhBUUJFYmdBQTJDQUJBQ3doQVFCaUFBQUEyQ0FCQURnaEFRQmpBQUFBMkNBQkFFUWhBUUJvQUFBQTJDQUJBRkFoQVFCaEFBQUEyQ0FCQUZ3aEFRQnpBQUFBMkNBQkFHZ2hBUUIwQUFBQTJDQUJBSFFoQVFCcEFBQUEyQ0FCQUlBaEFRQnFBQUFBMkNBQkFJd2hBUUJzQUFBQTJDQUJBSmdoQVFCdEFBQUEyQ0FCQUtRaEFRQjRBQUFBMkNBQkFMQWhBUUI1QUFBQTJDQUJBTHdoQVFCbUFBQUEyQ0FCQU1naEFRQmtBQUFBMkNBQkFOUWhBUUFBQUFBQTlCOEJBSE1DQUFCNEFnQUFkUUlBQUhZQ0FBQjVBZ0FBZWdJQUFIc0NBQUI4QWdBQUFBQUFBRmdpQVFCekFnQUFmUUlBQUhVQ0FBQjJBZ0FBZVFJQUFINENBQUIvQWdBQWdBSUFBRTR4TUY5ZlkzaDRZV0pwZGpFeU1GOWZjMmxmWTJ4aGMzTmZkSGx3WlY5cGJtWnZSUUFBQUFBUUlnRUFNQ0lCQVBRZkFRQUFBQUFBdENJQkFITUNBQUNCQWdBQWRRSUFBSFlDQUFCNUFnQUFnZ0lBQUlNQ0FBQ0VBZ0FBVGpFd1gxOWplSGhoWW1sMk1USXhYMTkyYldsZlkyeGhjM05mZEhsd1pWOXBibVp2UlFBQUFCQWlBUUNNSWdFQTlCOEJBQUFBQUFCVUlBRUFjd0lBQUlVQ0FBQjFBZ0FBZGdJQUFJWUNBQUFBQUFBQVFDTUJBQThBQUFDSEFnQUFpQUlBQUFBQUFBQm9Jd0VBRHdBQUFJa0NBQUNLQWdBQUFBQUFBQ2dqQVFBUEFBQUFpd0lBQUl3Q0FBQlRkRGxsZUdObGNIUnBiMjRBQUFBQTZDRUJBQmdqQVFCVGREbGlZV1JmWVd4c2IyTUFBQUFBRUNJQkFEQWpBUUFvSXdFQVUzUXlNR0poWkY5aGNuSmhlVjl1WlhkZmJHVnVaM1JvQUFBQUFCQWlBUUJNSXdFQVFDTUJBQUFBQUFDWUl3RUFEZ0FBQUkwQ0FBQ09BZ0FBVTNReE1XeHZaMmxqWDJWeWNtOXlBQkFpQVFDSUl3RUFLQ01CQUFBQUFBRE1Jd0VBRGdBQUFJOENBQUNPQWdBQVUzUXhNbXhsYm1kMGFGOWxjbkp2Y2dBQUFBQVFJZ0VBdUNNQkFKZ2pBUUFBQUFBQUFDUUJBQTRBQUFDUUFnQUFqZ0lBQUZOME1USnZkWFJmYjJaZmNtRnVaMlVBQUFBQUVDSUJBT3dqQVFDWUl3RUFVM1E1ZEhsd1pWOXBibVp2QUFBQUFPZ2hBUUFNSkFFQUFSZ0JBQUFBVVFRQUFCZ0hBQUQ5Q3dBQTN3MEFBUDMvLy84QmFFQWtBUUJBSkFFQUFBQUJBQUFnQUFBQUFnQUFCUUFBQUFBQUFBQUFBQUFBRUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEZ0VBQUEwQkFBRFlPQUVBQUFBQUFBQUFBQUFBQUFBQUFnQUFBQUFBQUFBQUFBQUFBQUFBQVAvLy8vLy8vLy8vQVZtSUpBRUFBQUFBQUFVQUFBQUFBQUFBQUFBQUFCOEJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE0QkFBQWdBUUFBNkRnQkFBQUVBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFBRC8vLy8vQ2dFNklDVUJBSUJQQWdBSkFBQUFBQUFBQUFBQUFBQVFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQThCQUFBQUFBQUFEUUVBQUJnL0FRQUFCQUVFLy8vLy93RWN1Q1VCQUNWdEx5VmtMeVY1QUFBQUNDVklPaVZOT2lWVEFBQUFDQT09XCI7cmV0dXJuIGZ9dmFyIHdhc21CaW5hcnlGaWxlO2Z1bmN0aW9uIGdldEJpbmFyeVN5bmMoZmlsZSl7aWYoZmlsZT09d2FzbUJpbmFyeUZpbGUmJndhc21CaW5hcnkpe3JldHVybiBuZXcgVWludDhBcnJheSh3YXNtQmluYXJ5KX12YXIgYmluYXJ5PXRyeVBhcnNlQXNEYXRhVVJJKGZpbGUpO2lmKGJpbmFyeSl7cmV0dXJuIGJpbmFyeX1pZihyZWFkQmluYXJ5KXtyZXR1cm4gcmVhZEJpbmFyeShmaWxlKX10aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIn1mdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKGJpbmFyeUZpbGUpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5nZXRCaW5hcnlTeW5jKGJpbmFyeUZpbGUpKX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKGJpbmFyeUZpbGUsaW1wb3J0cyxyZWNlaXZlcil7cmV0dXJuIGdldEJpbmFyeVByb21pc2UoYmluYXJ5RmlsZSkudGhlbihiaW5hcnk9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJpbmFyeSxpbXBvcnRzKSkudGhlbihyZWNlaXZlcixyZWFzb249PntlcnIoYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7cmVhc29ufWApO2Fib3J0KHJlYXNvbil9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKGJpbmFyeSxiaW5hcnlGaWxlLGltcG9ydHMsY2FsbGJhY2spe3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKGJpbmFyeUZpbGUsaW1wb3J0cyxjYWxsYmFjayl9ZnVuY3Rpb24gZ2V0V2FzbUltcG9ydHMoKXthc3NpZ25XYXNtSW1wb3J0cygpO3JldHVybnthOndhc21JbXBvcnRzfX1mdW5jdGlvbiBjcmVhdGVXYXNtKCl7dmFyIGluZm89Z2V0V2FzbUltcG9ydHMoKTtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXt3YXNtRXhwb3J0cz1pbnN0YW5jZS5leHBvcnRzO3JlZ2lzdGVyVExTSW5pdCh3YXNtRXhwb3J0c1tcInphXCJdKTt3YXNtVGFibGU9d2FzbUV4cG9ydHNbXCJ2YVwiXTthZGRPbkluaXQod2FzbUV4cG9ydHNbXCJzYVwiXSk7d2FzbU1vZHVsZT1tb2R1bGU7cmVtb3ZlUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIik7cmV0dXJuIHdhc21FeHBvcnRzfWFkZFJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpO2Z1bmN0aW9uIHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KHJlc3VsdCl7cmVjZWl2ZUluc3RhbmNlKHJlc3VsdFtcImluc3RhbmNlXCJdLHJlc3VsdFtcIm1vZHVsZVwiXSl9aWYoTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKXt0cnl7cmV0dXJuIE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXShpbmZvLHJlY2VpdmVJbnN0YW5jZSl9Y2F0Y2goZSl7ZXJyKGBNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAke2V9YCk7cmVhZHlQcm9taXNlUmVqZWN0KGUpfX13YXNtQmluYXJ5RmlsZT8/PWZpbmRXYXNtQmluYXJ5KCk7aW5zdGFudGlhdGVBc3luYyh3YXNtQmluYXJ5LHdhc21CaW5hcnlGaWxlLGluZm8scmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQpLmNhdGNoKHJlYWR5UHJvbWlzZVJlamVjdCk7cmV0dXJue319dmFyIHRlbXBEb3VibGU7dmFyIHRlbXBJNjQ7dmFyIEFTTV9DT05TVFM9ezc1MzY0OigkMCwkMSwkMik9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBpbmZvSGVhZD1VVEY4VG9TdHJpbmcoJDEpO3ZhciBzdHlsZT1VVEY4VG9TdHJpbmcoJDIpO2NvbnNvbGUubG9nKGluZm9IZWFkK21lc3NhZ2Usc3R5bGUpfSw3NTUwMzooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS5sb2coaW5mb0hlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw3NTY4MTooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS5sb2coaW5mb0hlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw3NTg1OTooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS5sb2coaW5mb0hlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw3NjAzNzooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS5sb2coaW5mb0hlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw3NjIxNTooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTtjb25zb2xlLmxvZyhpbmZvSGVhZCttZXNzYWdlLHN0eWxlLCQzKX0sNzYzNTg6KCQwLCQxLCQyKT0+e3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGVycm9ySGVhZD1VVEY4VG9TdHJpbmcoJDEpO3ZhciBzdHlsZT1VVEY4VG9TdHJpbmcoJDIpO2NvbnNvbGUuZXJyb3IoZXJyb3JIZWFkK21lc3NhZ2Usc3R5bGUpfSw3NjUwMTooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUuZXJyb3IoZXJyb3JIZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNzY2ODM6KCQwLCQxLCQyLCQzKT0+e3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGVycm9ySGVhZD1VVEY4VG9TdHJpbmcoJDEpO3ZhciBzdHlsZT1VVEY4VG9TdHJpbmcoJDIpO3ZhciBmb3JtYXQ9VVRGOFRvU3RyaW5nKCQzKTtjb25zb2xlLmVycm9yKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDc2ODY1OigkMCwkMSwkMiwkMyk9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS5lcnJvcihlcnJvckhlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw3NzA0NzooJDAsJDEsJDIsJDMpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUuZXJyb3IoZXJyb3JIZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNzcyMjk6KCQwLCQxLCQyLCQzKT0+e3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGVycm9ySGVhZD1VVEY4VG9TdHJpbmcoJDEpO3ZhciBzdHlsZT1VVEY4VG9TdHJpbmcoJDIpO2NvbnNvbGUuZXJyb3IoZXJyb3JIZWFkK21lc3NhZ2Usc3R5bGUsJDMpfSw3NzM3NjooJDAsJDEsJDIpPT57dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTtjb25zb2xlLndhcm4oaW5mb0hlYWQrbWVzc2FnZSxzdHlsZSl9LDc3NTE2OigkMCwkMSwkMiwkMyk9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS53YXJuKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDc3Njk3OigkMCwkMSwkMiwkMyk9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS53YXJuKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDc3ODc4OigkMCwkMSwkMiwkMyk9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS53YXJuKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDc4MDU5OigkMCwkMSwkMiwkMyk9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS53YXJuKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDc4MjQwOigkMCwkMSwkMiwkMyk9Pnt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTtjb25zb2xlLndhcm4oZXJyb3JIZWFkK21lc3NhZ2Usc3R5bGUsJDMpfX07ZnVuY3Rpb24gRXhpdFN0YXR1cyhzdGF0dXMpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9YFByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoJHtzdGF0dXN9KWA7dGhpcy5zdGF0dXM9c3RhdHVzfXZhciB0ZXJtaW5hdGVXb3JrZXI9d29ya2VyPT57d29ya2VyLnRlcm1pbmF0ZSgpO3dvcmtlci5vbm1lc3NhZ2U9ZT0+e319O3ZhciBjbGVhbnVwVGhyZWFkPXB0aHJlYWRfcHRyPT57dmFyIHdvcmtlcj1QVGhyZWFkLnB0aHJlYWRzW3B0aHJlYWRfcHRyXTtQVGhyZWFkLnJldHVybldvcmtlclRvUG9vbCh3b3JrZXIpfTt2YXIgc3Bhd25UaHJlYWQ9dGhyZWFkUGFyYW1zPT57dmFyIHdvcmtlcj1QVGhyZWFkLmdldE5ld1dvcmtlcigpO2lmKCF3b3JrZXIpe3JldHVybiA2fVBUaHJlYWQucnVubmluZ1dvcmtlcnMucHVzaCh3b3JrZXIpO1BUaHJlYWQucHRocmVhZHNbdGhyZWFkUGFyYW1zLnB0aHJlYWRfcHRyXT13b3JrZXI7d29ya2VyLnB0aHJlYWRfcHRyPXRocmVhZFBhcmFtcy5wdGhyZWFkX3B0cjt2YXIgbXNnPXtjbWQ6XCJydW5cIixzdGFydF9yb3V0aW5lOnRocmVhZFBhcmFtcy5zdGFydFJvdXRpbmUsYXJnOnRocmVhZFBhcmFtcy5hcmcscHRocmVhZF9wdHI6dGhyZWFkUGFyYW1zLnB0aHJlYWRfcHRyfTt3b3JrZXIucG9zdE1lc3NhZ2UobXNnLHRocmVhZFBhcmFtcy50cmFuc2Zlckxpc3QpO3JldHVybiAwfTt2YXIgcnVudGltZUtlZXBhbGl2ZUNvdW50ZXI9MDt2YXIga2VlcFJ1bnRpbWVBbGl2ZT0oKT0+bm9FeGl0UnVudGltZXx8cnVudGltZUtlZXBhbGl2ZUNvdW50ZXI+MDt2YXIgc3RhY2tTYXZlPSgpPT5fZW1zY3JpcHRlbl9zdGFja19nZXRfY3VycmVudCgpO3ZhciBzdGFja1Jlc3RvcmU9dmFsPT5fX2Vtc2NyaXB0ZW5fc3RhY2tfcmVzdG9yZSh2YWwpO3ZhciBzdGFja0FsbG9jPXN6PT5fX2Vtc2NyaXB0ZW5fc3RhY2tfYWxsb2Moc3opO3ZhciBjb252ZXJ0STMyUGFpclRvSTUzQ2hlY2tlZD0obG8saGkpPT5oaSsyMDk3MTUyPj4+MDw0MTk0MzA1LSEhbG8/KGxvPj4+MCkraGkqNDI5NDk2NzI5NjpOYU47dmFyIHByb3h5VG9NYWluVGhyZWFkPShmdW5jSW5kZXgsZW1Bc21BZGRyLHN5bmMsLi4uY2FsbEFyZ3MpPT57dmFyIHNlcmlhbGl6ZWROdW1DYWxsQXJncz1jYWxsQXJncy5sZW5ndGg7dmFyIHNwPXN0YWNrU2F2ZSgpO3ZhciBhcmdzPXN0YWNrQWxsb2Moc2VyaWFsaXplZE51bUNhbGxBcmdzKjgpO3ZhciBiPWFyZ3M+PjM7Zm9yKHZhciBpPTA7aTxjYWxsQXJncy5sZW5ndGg7aSsrKXt2YXIgYXJnPWNhbGxBcmdzW2ldO0hFQVBGNjRbYitpXT1hcmd9dmFyIHJ0bj1fX2Vtc2NyaXB0ZW5fcnVuX29uX21haW5fdGhyZWFkX2pzKGZ1bmNJbmRleCxlbUFzbUFkZHIsc2VyaWFsaXplZE51bUNhbGxBcmdzLGFyZ3Msc3luYyk7c3RhY2tSZXN0b3JlKHNwKTtyZXR1cm4gcnRufTtmdW5jdGlvbiBfcHJvY19leGl0KGNvZGUpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIHByb3h5VG9NYWluVGhyZWFkKDAsMCwxLGNvZGUpO0VYSVRTVEFUVVM9Y29kZTtpZigha2VlcFJ1bnRpbWVBbGl2ZSgpKXtQVGhyZWFkLnRlcm1pbmF0ZUFsbFRocmVhZHMoKTtNb2R1bGVbXCJvbkV4aXRcIl0/Lihjb2RlKTtBQk9SVD10cnVlfXF1aXRfKGNvZGUsbmV3IEV4aXRTdGF0dXMoY29kZSkpfXZhciBoYW5kbGVFeGNlcHRpb249ZT0+e2lmKGUgaW5zdGFuY2VvZiBFeGl0U3RhdHVzfHxlPT1cInVud2luZFwiKXtyZXR1cm4gRVhJVFNUQVRVU31xdWl0XygxLGUpfTtmdW5jdGlvbiBleGl0T25NYWluVGhyZWFkKHJldHVybkNvZGUpe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIHByb3h5VG9NYWluVGhyZWFkKDEsMCwwLHJldHVybkNvZGUpO19leGl0KHJldHVybkNvZGUpfXZhciBleGl0SlM9KHN0YXR1cyxpbXBsaWNpdCk9PntFWElUU1RBVFVTPXN0YXR1cztpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXtleGl0T25NYWluVGhyZWFkKHN0YXR1cyk7dGhyb3dcInVud2luZFwifV9wcm9jX2V4aXQoc3RhdHVzKX07dmFyIF9leGl0PWV4aXRKUzt2YXIgUFRocmVhZD17dW51c2VkV29ya2VyczpbXSxydW5uaW5nV29ya2VyczpbXSx0bHNJbml0RnVuY3Rpb25zOltdLHB0aHJlYWRzOnt9LGluaXQoKXtpZighRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7UFRocmVhZC5pbml0TWFpblRocmVhZCgpfX0saW5pdE1haW5UaHJlYWQoKXthZGRPblByZVJ1bigoKT0+e2FkZFJ1bkRlcGVuZGVuY3koXCJsb2FkaW5nLXdvcmtlcnNcIik7UFRocmVhZC5sb2FkV2FzbU1vZHVsZVRvQWxsV29ya2VycygoKT0+cmVtb3ZlUnVuRGVwZW5kZW5jeShcImxvYWRpbmctd29ya2Vyc1wiKSl9KX0sdGVybWluYXRlQWxsVGhyZWFkczooKT0+e2Zvcih2YXIgd29ya2VyIG9mIFBUaHJlYWQucnVubmluZ1dvcmtlcnMpe3Rlcm1pbmF0ZVdvcmtlcih3b3JrZXIpfWZvcih2YXIgd29ya2VyIG9mIFBUaHJlYWQudW51c2VkV29ya2Vycyl7dGVybWluYXRlV29ya2VyKHdvcmtlcil9UFRocmVhZC51bnVzZWRXb3JrZXJzPVtdO1BUaHJlYWQucnVubmluZ1dvcmtlcnM9W107UFRocmVhZC5wdGhyZWFkcz1bXX0scmV0dXJuV29ya2VyVG9Qb29sOndvcmtlcj0+e3ZhciBwdGhyZWFkX3B0cj13b3JrZXIucHRocmVhZF9wdHI7ZGVsZXRlIFBUaHJlYWQucHRocmVhZHNbcHRocmVhZF9wdHJdO1BUaHJlYWQudW51c2VkV29ya2Vycy5wdXNoKHdvcmtlcik7UFRocmVhZC5ydW5uaW5nV29ya2Vycy5zcGxpY2UoUFRocmVhZC5ydW5uaW5nV29ya2Vycy5pbmRleE9mKHdvcmtlciksMSk7d29ya2VyLnB0aHJlYWRfcHRyPTA7X19lbXNjcmlwdGVuX3RocmVhZF9mcmVlX2RhdGEocHRocmVhZF9wdHIpfSxyZWNlaXZlT2JqZWN0VHJhbnNmZXIoZGF0YSl7fSx0aHJlYWRJbml0VExTKCl7UFRocmVhZC50bHNJbml0RnVuY3Rpb25zLmZvckVhY2goZj0+ZigpKX0sbG9hZFdhc21Nb2R1bGVUb1dvcmtlcjp3b3JrZXI9Pm5ldyBQcm9taXNlKG9uRmluaXNoZWRMb2FkaW5nPT57d29ya2VyLm9ubWVzc2FnZT1lPT57dmFyIGQ9ZVtcImRhdGFcIl07dmFyIGNtZD1kLmNtZDtpZihkLnRhcmdldFRocmVhZCYmZC50YXJnZXRUaHJlYWQhPV9wdGhyZWFkX3NlbGYoKSl7dmFyIHRhcmdldFdvcmtlcj1QVGhyZWFkLnB0aHJlYWRzW2QudGFyZ2V0VGhyZWFkXTtpZih0YXJnZXRXb3JrZXIpe3RhcmdldFdvcmtlci5wb3N0TWVzc2FnZShkLGQudHJhbnNmZXJMaXN0KX1lbHNle2VycihgSW50ZXJuYWwgZXJyb3IhIFdvcmtlciBzZW50IGEgbWVzc2FnZSBcIiR7Y21kfVwiIHRvIHRhcmdldCBwdGhyZWFkICR7ZC50YXJnZXRUaHJlYWR9LCBidXQgdGhhdCB0aHJlYWQgbm8gbG9uZ2VyIGV4aXN0cyFgKX1yZXR1cm59aWYoY21kPT09XCJjaGVja01haWxib3hcIil7Y2hlY2tNYWlsYm94KCl9ZWxzZSBpZihjbWQ9PT1cInNwYXduVGhyZWFkXCIpe3NwYXduVGhyZWFkKGQpfWVsc2UgaWYoY21kPT09XCJjbGVhbnVwVGhyZWFkXCIpe2NsZWFudXBUaHJlYWQoZC50aHJlYWQpfWVsc2UgaWYoY21kPT09XCJsb2FkZWRcIil7d29ya2VyLmxvYWRlZD10cnVlO29uRmluaXNoZWRMb2FkaW5nKHdvcmtlcil9ZWxzZSBpZihjbWQ9PT1cImFsZXJ0XCIpe2FsZXJ0KGBUaHJlYWQgJHtkLnRocmVhZElkfTogJHtkLnRleHR9YCl9ZWxzZSBpZihkLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe3dvcmtlci5wb3N0TWVzc2FnZShkKX1lbHNlIGlmKGNtZD09PVwiY2FsbEhhbmRsZXJcIil7TW9kdWxlW2QuaGFuZGxlcl0oLi4uZC5hcmdzKX1lbHNlIGlmKGNtZCl7ZXJyKGB3b3JrZXIgc2VudCBhbiB1bmtub3duIGNvbW1hbmQgJHtjbWR9YCl9fTt3b3JrZXIub25lcnJvcj1lPT57dmFyIG1lc3NhZ2U9XCJ3b3JrZXIgc2VudCBhbiBlcnJvciFcIjtlcnIoYCR7bWVzc2FnZX0gJHtlLmZpbGVuYW1lfToke2UubGluZW5vfTogJHtlLm1lc3NhZ2V9YCk7dGhyb3cgZX07dmFyIGhhbmRsZXJzPVtdO3ZhciBrbm93bkhhbmRsZXJzPVtcIm9uRXhpdFwiLFwib25BYm9ydFwiLFwicHJpbnRcIixcInByaW50RXJyXCJdO2Zvcih2YXIgaGFuZGxlciBvZiBrbm93bkhhbmRsZXJzKXtpZihNb2R1bGUucHJvcGVydHlJc0VudW1lcmFibGUoaGFuZGxlcikpe2hhbmRsZXJzLnB1c2goaGFuZGxlcil9fXdvcmtlci5wb3N0TWVzc2FnZSh7Y21kOlwibG9hZFwiLGhhbmRsZXJzLHdhc21NZW1vcnksd2FzbU1vZHVsZX0pfSksbG9hZFdhc21Nb2R1bGVUb0FsbFdvcmtlcnMob25NYXliZVJlYWR5KXtvbk1heWJlUmVhZHkoKX0sYWxsb2NhdGVVbnVzZWRXb3JrZXIoKXt2YXIgd29ya2VyO3ZhciB3b3JrZXJPcHRpb25zPXt0eXBlOlwibW9kdWxlXCIsbmFtZTpcImVtLXB0aHJlYWRcIn07dmFyIHB0aHJlYWRNYWluSnM9X3NjcmlwdE5hbWU7aWYoTW9kdWxlW1wibWFpblNjcmlwdFVybE9yQmxvYlwiXSl7cHRocmVhZE1haW5Kcz1Nb2R1bGVbXCJtYWluU2NyaXB0VXJsT3JCbG9iXCJdO2lmKHR5cGVvZiBwdGhyZWFkTWFpbkpzIT1cInN0cmluZ1wiKXtwdGhyZWFkTWFpbkpzPVVSTC5jcmVhdGVPYmplY3RVUkwocHRocmVhZE1haW5Kcyl9fXdvcmtlcj1uZXcgV29ya2VyKHB0aHJlYWRNYWluSnMsd29ya2VyT3B0aW9ucyk7UFRocmVhZC51bnVzZWRXb3JrZXJzLnB1c2god29ya2VyKX0sZ2V0TmV3V29ya2VyKCl7aWYoUFRocmVhZC51bnVzZWRXb3JrZXJzLmxlbmd0aD09MCl7UFRocmVhZC5hbGxvY2F0ZVVudXNlZFdvcmtlcigpO1BUaHJlYWQubG9hZFdhc21Nb2R1bGVUb1dvcmtlcihQVGhyZWFkLnVudXNlZFdvcmtlcnNbMF0pfXJldHVybiBQVGhyZWFkLnVudXNlZFdvcmtlcnMucG9wKCl9fTt2YXIgY2FsbFJ1bnRpbWVDYWxsYmFja3M9Y2FsbGJhY2tzPT57Y2FsbGJhY2tzLmZvckVhY2goZj0+ZihNb2R1bGUpKX07dmFyIGVzdGFibGlzaFN0YWNrU3BhY2U9cHRocmVhZF9wdHI9Pnt2YXIgc3RhY2tIaWdoPUhFQVBVMzJbcHRocmVhZF9wdHIrNTI+PjJdO3ZhciBzdGFja1NpemU9SEVBUFUzMltwdGhyZWFkX3B0cis1Nj4+Ml07dmFyIHN0YWNrTG93PXN0YWNrSGlnaC1zdGFja1NpemU7X2Vtc2NyaXB0ZW5fc3RhY2tfc2V0X2xpbWl0cyhzdGFja0hpZ2gsc3RhY2tMb3cpO3N0YWNrUmVzdG9yZShzdGFja0hpZ2gpfTt2YXIgd2FzbVRhYmxlO3ZhciBnZXRXYXNtVGFibGVFbnRyeT1mdW5jUHRyPT53YXNtVGFibGUuZ2V0KGZ1bmNQdHIpO3ZhciBpbnZva2VFbnRyeVBvaW50PShwdHIsYXJnKT0+e3J1bnRpbWVLZWVwYWxpdmVDb3VudGVyPTA7bm9FeGl0UnVudGltZT0wO3ZhciByZXN1bHQ9Z2V0V2FzbVRhYmxlRW50cnkocHRyKShhcmcpO2Z1bmN0aW9uIGZpbmlzaChyZXN1bHQpe2lmKGtlZXBSdW50aW1lQWxpdmUoKSl7RVhJVFNUQVRVUz1yZXN1bHR9ZWxzZXtfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQocmVzdWx0KX19ZmluaXNoKHJlc3VsdCl9O3ZhciBub0V4aXRSdW50aW1lPU1vZHVsZVtcIm5vRXhpdFJ1bnRpbWVcIl18fHRydWU7dmFyIHJlZ2lzdGVyVExTSW5pdD10bHNJbml0RnVuYz0+UFRocmVhZC50bHNJbml0RnVuY3Rpb25zLnB1c2godGxzSW5pdEZ1bmMpO3ZhciBVVEY4RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPVwidW5kZWZpbmVkXCI/bmV3IFRleHREZWNvZGVyOnVuZGVmaW5lZDt2YXIgVVRGOEFycmF5VG9TdHJpbmc9KGhlYXBPckFycmF5LGlkeD0wLG1heEJ5dGVzVG9SZWFkPU5hTik9Pnt2YXIgZW5kSWR4PWlkeCttYXhCeXRlc1RvUmVhZDt2YXIgZW5kUHRyPWlkeDt3aGlsZShoZWFwT3JBcnJheVtlbmRQdHJdJiYhKGVuZFB0cj49ZW5kSWR4KSkrK2VuZFB0cjtpZihlbmRQdHItaWR4PjE2JiZoZWFwT3JBcnJheS5idWZmZXImJlVURjhEZWNvZGVyKXtyZXR1cm4gVVRGOERlY29kZXIuZGVjb2RlKGhlYXBPckFycmF5LnNsaWNlKGlkeCxlbmRQdHIpKX12YXIgc3RyPVwiXCI7d2hpbGUoaWR4PGVuZFB0cil7dmFyIHUwPWhlYXBPckFycmF5W2lkeCsrXTtpZighKHUwJjEyOCkpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7Y29udGludWV9dmFyIHUxPWhlYXBPckFycmF5W2lkeCsrXSY2MztpZigodTAmMjI0KT09MTkyKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoKHUwJjMxKTw8Nnx1MSk7Y29udGludWV9dmFyIHUyPWhlYXBPckFycmF5W2lkeCsrXSY2MztpZigodTAmMjQwKT09MjI0KXt1MD0odTAmMTUpPDwxMnx1MTw8Nnx1Mn1lbHNle3UwPSh1MCY3KTw8MTh8dTE8PDEyfHUyPDw2fGhlYXBPckFycmF5W2lkeCsrXSY2M31pZih1MDw2NTUzNil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKX1lbHNle3ZhciBjaD11MC02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfX1yZXR1cm4gc3RyfTt2YXIgVVRGOFRvU3RyaW5nPShwdHIsbWF4Qnl0ZXNUb1JlYWQpPT5wdHI/VVRGOEFycmF5VG9TdHJpbmcoSEVBUFU4LHB0cixtYXhCeXRlc1RvUmVhZCk6XCJcIjt2YXIgX19fYXNzZXJ0X2ZhaWw9KGNvbmRpdGlvbixmaWxlbmFtZSxsaW5lLGZ1bmMpPT57YWJvcnQoYEFzc2VydGlvbiBmYWlsZWQ6ICR7VVRGOFRvU3RyaW5nKGNvbmRpdGlvbil9LCBhdDogYCtbZmlsZW5hbWU/VVRGOFRvU3RyaW5nKGZpbGVuYW1lKTpcInVua25vd24gZmlsZW5hbWVcIixsaW5lLGZ1bmM/VVRGOFRvU3RyaW5nKGZ1bmMpOlwidW5rbm93biBmdW5jdGlvblwiXSl9O2NsYXNzIEV4Y2VwdGlvbkluZm97Y29uc3RydWN0b3IoZXhjUHRyKXt0aGlzLmV4Y1B0cj1leGNQdHI7dGhpcy5wdHI9ZXhjUHRyLTI0fXNldF90eXBlKHR5cGUpe0hFQVBVMzJbdGhpcy5wdHIrND4+Ml09dHlwZX1nZXRfdHlwZSgpe3JldHVybiBIRUFQVTMyW3RoaXMucHRyKzQ+PjJdfXNldF9kZXN0cnVjdG9yKGRlc3RydWN0b3Ipe0hFQVBVMzJbdGhpcy5wdHIrOD4+Ml09ZGVzdHJ1Y3Rvcn1nZXRfZGVzdHJ1Y3Rvcigpe3JldHVybiBIRUFQVTMyW3RoaXMucHRyKzg+PjJdfXNldF9jYXVnaHQoY2F1Z2h0KXtjYXVnaHQ9Y2F1Z2h0PzE6MDtIRUFQOFt0aGlzLnB0cisxMl09Y2F1Z2h0fWdldF9jYXVnaHQoKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrMTJdIT0wfXNldF9yZXRocm93bihyZXRocm93bil7cmV0aHJvd249cmV0aHJvd24/MTowO0hFQVA4W3RoaXMucHRyKzEzXT1yZXRocm93bn1nZXRfcmV0aHJvd24oKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrMTNdIT0wfWluaXQodHlwZSxkZXN0cnVjdG9yKXt0aGlzLnNldF9hZGp1c3RlZF9wdHIoMCk7dGhpcy5zZXRfdHlwZSh0eXBlKTt0aGlzLnNldF9kZXN0cnVjdG9yKGRlc3RydWN0b3IpfXNldF9hZGp1c3RlZF9wdHIoYWRqdXN0ZWRQdHIpe0hFQVBVMzJbdGhpcy5wdHIrMTY+PjJdPWFkanVzdGVkUHRyfWdldF9hZGp1c3RlZF9wdHIoKXtyZXR1cm4gSEVBUFUzMlt0aGlzLnB0cisxNj4+Ml19fXZhciBleGNlcHRpb25MYXN0PTA7dmFyIHVuY2F1Z2h0RXhjZXB0aW9uQ291bnQ9MDt2YXIgX19fY3hhX3Rocm93PShwdHIsdHlwZSxkZXN0cnVjdG9yKT0+e3ZhciBpbmZvPW5ldyBFeGNlcHRpb25JbmZvKHB0cik7aW5mby5pbml0KHR5cGUsZGVzdHJ1Y3Rvcik7ZXhjZXB0aW9uTGFzdD1wdHI7dW5jYXVnaHRFeGNlcHRpb25Db3VudCsrO3Rocm93IGV4Y2VwdGlvbkxhc3R9O2Z1bmN0aW9uIHB0aHJlYWRDcmVhdGVQcm94aWVkKHB0aHJlYWRfcHRyLGF0dHIsc3RhcnRSb3V0aW5lLGFyZyl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoMiwwLDEscHRocmVhZF9wdHIsYXR0cixzdGFydFJvdXRpbmUsYXJnKTtyZXR1cm4gX19fcHRocmVhZF9jcmVhdGVfanMocHRocmVhZF9wdHIsYXR0cixzdGFydFJvdXRpbmUsYXJnKX12YXIgX2Vtc2NyaXB0ZW5faGFzX3RocmVhZGluZ19zdXBwb3J0PSgpPT50eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIhPVwidW5kZWZpbmVkXCI7dmFyIF9fX3B0aHJlYWRfY3JlYXRlX2pzPShwdGhyZWFkX3B0cixhdHRyLHN0YXJ0Um91dGluZSxhcmcpPT57aWYoIV9lbXNjcmlwdGVuX2hhc190aHJlYWRpbmdfc3VwcG9ydCgpKXtyZXR1cm4gNn12YXIgdHJhbnNmZXJMaXN0PVtdO3ZhciBlcnJvcj0wO2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQmJih0cmFuc2Zlckxpc3QubGVuZ3RoPT09MHx8ZXJyb3IpKXtyZXR1cm4gcHRocmVhZENyZWF0ZVByb3hpZWQocHRocmVhZF9wdHIsYXR0cixzdGFydFJvdXRpbmUsYXJnKX1pZihlcnJvcilyZXR1cm4gZXJyb3I7dmFyIHRocmVhZFBhcmFtcz17c3RhcnRSb3V0aW5lLHB0aHJlYWRfcHRyLGFyZyx0cmFuc2Zlckxpc3R9O2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpe3RocmVhZFBhcmFtcy5jbWQ9XCJzcGF3blRocmVhZFwiO3Bvc3RNZXNzYWdlKHRocmVhZFBhcmFtcyx0cmFuc2Zlckxpc3QpO3JldHVybiAwfXJldHVybiBzcGF3blRocmVhZCh0aHJlYWRQYXJhbXMpfTtmdW5jdGlvbiBzeXNjYWxsR2V0VmFyYXJnSSgpe3ZhciByZXQ9SEVBUDMyWytTWVNDQUxMUy52YXJhcmdzPj4yXTtTWVNDQUxMUy52YXJhcmdzKz00O3JldHVybiByZXR9dmFyIHN5c2NhbGxHZXRWYXJhcmdQPXN5c2NhbGxHZXRWYXJhcmdJO3ZhciBQQVRIPXtpc0FiczpwYXRoPT5wYXRoLmNoYXJBdCgwKT09PVwiL1wiLHNwbGl0UGF0aDpmaWxlbmFtZT0+e3ZhciBzcGxpdFBhdGhSZT0vXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztyZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSl9LG5vcm1hbGl6ZUFycmF5OihwYXJ0cyxhbGxvd0Fib3ZlUm9vdCk9Pnt2YXIgdXA9MDtmb3IodmFyIGk9cGFydHMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBsYXN0PXBhcnRzW2ldO2lmKGxhc3Q9PT1cIi5cIil7cGFydHMuc3BsaWNlKGksMSl9ZWxzZSBpZihsYXN0PT09XCIuLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cCsrfWVsc2UgaWYodXApe3BhcnRzLnNwbGljZShpLDEpO3VwLS19fWlmKGFsbG93QWJvdmVSb290KXtmb3IoO3VwO3VwLS0pe3BhcnRzLnVuc2hpZnQoXCIuLlwiKX19cmV0dXJuIHBhcnRzfSxub3JtYWxpemU6cGF0aD0+e3ZhciBpc0Fic29sdXRlPVBBVEguaXNBYnMocGF0aCksdHJhaWxpbmdTbGFzaD1wYXRoLnN1YnN0cigtMSk9PT1cIi9cIjtwYXRoPVBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKHA9PiEhcCksIWlzQWJzb2x1dGUpLmpvaW4oXCIvXCIpO2lmKCFwYXRoJiYhaXNBYnNvbHV0ZSl7cGF0aD1cIi5cIn1pZihwYXRoJiZ0cmFpbGluZ1NsYXNoKXtwYXRoKz1cIi9cIn1yZXR1cm4oaXNBYnNvbHV0ZT9cIi9cIjpcIlwiKStwYXRofSxkaXJuYW1lOnBhdGg9Pnt2YXIgcmVzdWx0PVBBVEguc3BsaXRQYXRoKHBhdGgpLHJvb3Q9cmVzdWx0WzBdLGRpcj1yZXN1bHRbMV07aWYoIXJvb3QmJiFkaXIpe3JldHVyblwiLlwifWlmKGRpcil7ZGlyPWRpci5zdWJzdHIoMCxkaXIubGVuZ3RoLTEpfXJldHVybiByb290K2Rpcn0sYmFzZW5hbWU6cGF0aD0+e2lmKHBhdGg9PT1cIi9cIilyZXR1cm5cIi9cIjtwYXRoPVBBVEgubm9ybWFsaXplKHBhdGgpO3BhdGg9cGF0aC5yZXBsYWNlKC9cXC8kLyxcIlwiKTt2YXIgbGFzdFNsYXNoPXBhdGgubGFzdEluZGV4T2YoXCIvXCIpO2lmKGxhc3RTbGFzaD09PS0xKXJldHVybiBwYXRoO3JldHVybiBwYXRoLnN1YnN0cihsYXN0U2xhc2grMSl9LGpvaW46KC4uLnBhdGhzKT0+UEFUSC5ub3JtYWxpemUocGF0aHMuam9pbihcIi9cIikpLGpvaW4yOihsLHIpPT5QQVRILm5vcm1hbGl6ZShsK1wiL1wiK3IpfTt2YXIgaW5pdFJhbmRvbUZpbGw9KCk9PntpZih0eXBlb2YgY3J5cHRvPT1cIm9iamVjdFwiJiZ0eXBlb2YgY3J5cHRvW1wiZ2V0UmFuZG9tVmFsdWVzXCJdPT1cImZ1bmN0aW9uXCIpe3JldHVybiB2aWV3PT4odmlldy5zZXQoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSh2aWV3LmJ5dGVMZW5ndGgpKSksdmlldyl9ZWxzZSBhYm9ydChcImluaXRSYW5kb21EZXZpY2VcIil9O3ZhciByYW5kb21GaWxsPXZpZXc9PihyYW5kb21GaWxsPWluaXRSYW5kb21GaWxsKCkpKHZpZXcpO3ZhciBQQVRIX0ZTPXtyZXNvbHZlOiguLi5hcmdzKT0+e3ZhciByZXNvbHZlZFBhdGg9XCJcIixyZXNvbHZlZEFic29sdXRlPWZhbHNlO2Zvcih2YXIgaT1hcmdzLmxlbmd0aC0xO2k+PS0xJiYhcmVzb2x2ZWRBYnNvbHV0ZTtpLS0pe3ZhciBwYXRoPWk+PTA/YXJnc1tpXTpGUy5jd2QoKTtpZih0eXBlb2YgcGF0aCE9XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpfWVsc2UgaWYoIXBhdGgpe3JldHVyblwiXCJ9cmVzb2x2ZWRQYXRoPXBhdGgrXCIvXCIrcmVzb2x2ZWRQYXRoO3Jlc29sdmVkQWJzb2x1dGU9UEFUSC5pc0FicyhwYXRoKX1yZXNvbHZlZFBhdGg9UEFUSC5ub3JtYWxpemVBcnJheShyZXNvbHZlZFBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcihwPT4hIXApLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifSxyZWxhdGl2ZTooZnJvbSx0byk9Pntmcm9tPVBBVEhfRlMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7dG89UEFUSF9GUy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7ZnVuY3Rpb24gdHJpbShhcnIpe3ZhciBzdGFydD0wO2Zvcig7c3RhcnQ8YXJyLmxlbmd0aDtzdGFydCsrKXtpZihhcnJbc3RhcnRdIT09XCJcIilicmVha312YXIgZW5kPWFyci5sZW5ndGgtMTtmb3IoO2VuZD49MDtlbmQtLSl7aWYoYXJyW2VuZF0hPT1cIlwiKWJyZWFrfWlmKHN0YXJ0PmVuZClyZXR1cm5bXTtyZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LGVuZC1zdGFydCsxKX12YXIgZnJvbVBhcnRzPXRyaW0oZnJvbS5zcGxpdChcIi9cIikpO3ZhciB0b1BhcnRzPXRyaW0odG8uc3BsaXQoXCIvXCIpKTt2YXIgbGVuZ3RoPU1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsdG9QYXJ0cy5sZW5ndGgpO3ZhciBzYW1lUGFydHNMZW5ndGg9bGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7aWYoZnJvbVBhcnRzW2ldIT09dG9QYXJ0c1tpXSl7c2FtZVBhcnRzTGVuZ3RoPWk7YnJlYWt9fXZhciBvdXRwdXRQYXJ0cz1bXTtmb3IodmFyIGk9c2FtZVBhcnRzTGVuZ3RoO2k8ZnJvbVBhcnRzLmxlbmd0aDtpKyspe291dHB1dFBhcnRzLnB1c2goXCIuLlwiKX1vdXRwdXRQYXJ0cz1vdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtyZXR1cm4gb3V0cHV0UGFydHMuam9pbihcIi9cIil9fTt2YXIgRlNfc3RkaW5fZ2V0Q2hhcl9idWZmZXI9W107dmFyIGxlbmd0aEJ5dGVzVVRGOD1zdHI9Pnt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGM9c3RyLmNoYXJDb2RlQXQoaSk7aWYoYzw9MTI3KXtsZW4rK31lbHNlIGlmKGM8PTIwNDcpe2xlbis9Mn1lbHNlIGlmKGM+PTU1Mjk2JiZjPD01NzM0Myl7bGVuKz00OysraX1lbHNle2xlbis9M319cmV0dXJuIGxlbn07dmFyIHN0cmluZ1RvVVRGOEFycmF5PShzdHIsaGVhcCxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKT0+e2lmKCEobWF4Qnl0ZXNUb1dyaXRlPjApKXJldHVybiAwO3ZhciBzdGFydElkeD1vdXRJZHg7dmFyIGVuZElkeD1vdXRJZHgrbWF4Qnl0ZXNUb1dyaXRlLTE7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIHU9c3RyLmNoYXJDb2RlQXQoaSk7aWYodT49NTUyOTYmJnU8PTU3MzQzKXt2YXIgdTE9c3RyLmNoYXJDb2RlQXQoKytpKTt1PTY1NTM2KygodSYxMDIzKTw8MTApfHUxJjEwMjN9aWYodTw9MTI3KXtpZihvdXRJZHg+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT11fWVsc2UgaWYodTw9MjA0Nyl7aWYob3V0SWR4KzE+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0xOTJ8dT4+NjtoZWFwW291dElkeCsrXT0xMjh8dSY2M31lbHNlIGlmKHU8PTY1NTM1KXtpZihvdXRJZHgrMj49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTIyNHx1Pj4xMjtoZWFwW291dElkeCsrXT0xMjh8dT4+NiY2MztoZWFwW291dElkeCsrXT0xMjh8dSY2M31lbHNle2lmKG91dElkeCszPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MjQwfHU+PjE4O2hlYXBbb3V0SWR4KytdPTEyOHx1Pj4xMiY2MztoZWFwW291dElkeCsrXT0xMjh8dT4+NiY2MztoZWFwW291dElkeCsrXT0xMjh8dSY2M319aGVhcFtvdXRJZHhdPTA7cmV0dXJuIG91dElkeC1zdGFydElkeH07ZnVuY3Rpb24gaW50QXJyYXlGcm9tU3RyaW5nKHN0cmluZ3ksZG9udEFkZE51bGwsbGVuZ3RoKXt2YXIgbGVuPWxlbmd0aD4wP2xlbmd0aDpsZW5ndGhCeXRlc1VURjgoc3RyaW5neSkrMTt2YXIgdThhcnJheT1uZXcgQXJyYXkobGVuKTt2YXIgbnVtQnl0ZXNXcml0dGVuPXN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksdThhcnJheSwwLHU4YXJyYXkubGVuZ3RoKTtpZihkb250QWRkTnVsbCl1OGFycmF5Lmxlbmd0aD1udW1CeXRlc1dyaXR0ZW47cmV0dXJuIHU4YXJyYXl9dmFyIEZTX3N0ZGluX2dldENoYXI9KCk9PntpZighRlNfc3RkaW5fZ2V0Q2hhcl9idWZmZXIubGVuZ3RoKXt2YXIgcmVzdWx0PW51bGw7aWYodHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIiYmdHlwZW9mIHdpbmRvdy5wcm9tcHQ9PVwiZnVuY3Rpb25cIil7cmVzdWx0PXdpbmRvdy5wcm9tcHQoXCJJbnB1dDogXCIpO2lmKHJlc3VsdCE9PW51bGwpe3Jlc3VsdCs9XCJcXG5cIn19ZWxzZXt9aWYoIXJlc3VsdCl7cmV0dXJuIG51bGx9RlNfc3RkaW5fZ2V0Q2hhcl9idWZmZXI9aW50QXJyYXlGcm9tU3RyaW5nKHJlc3VsdCx0cnVlKX1yZXR1cm4gRlNfc3RkaW5fZ2V0Q2hhcl9idWZmZXIuc2hpZnQoKX07dmFyIFRUWT17dHR5czpbXSxpbml0KCl7fSxzaHV0ZG93bigpe30scmVnaXN0ZXIoZGV2LG9wcyl7VFRZLnR0eXNbZGV2XT17aW5wdXQ6W10sb3V0cHV0OltdLG9wc307RlMucmVnaXN0ZXJEZXZpY2UoZGV2LFRUWS5zdHJlYW1fb3BzKX0sc3RyZWFtX29wczp7b3BlbihzdHJlYW0pe3ZhciB0dHk9VFRZLnR0eXNbc3RyZWFtLm5vZGUucmRldl07aWYoIXR0eSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDMpfXN0cmVhbS50dHk9dHR5O3N0cmVhbS5zZWVrYWJsZT1mYWxzZX0sY2xvc2Uoc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mc3luYyhzdHJlYW0udHR5KX0sZnN5bmMoc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mc3luYyhzdHJlYW0udHR5KX0scmVhZChzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXtpZighc3RyZWFtLnR0eXx8IXN0cmVhbS50dHkub3BzLmdldF9jaGFyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2MCl9dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PXN0cmVhbS50dHkub3BzLmdldF9jaGFyKHN0cmVhbS50dHkpfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX1pZihyZXN1bHQ9PT11bmRlZmluZWQmJmJ5dGVzUmVhZD09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYpfWlmKHJlc3VsdD09PW51bGx8fHJlc3VsdD09PXVuZGVmaW5lZClicmVhaztieXRlc1JlYWQrKztidWZmZXJbb2Zmc2V0K2ldPXJlc3VsdH1pZihieXRlc1JlYWQpe3N0cmVhbS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpfXJldHVybiBieXRlc1JlYWR9LHdyaXRlKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe2lmKCFzdHJlYW0udHR5fHwhc3RyZWFtLnR0eS5vcHMucHV0X2NoYXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYwKX10cnl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtzdHJlYW0udHR5Lm9wcy5wdXRfY2hhcihzdHJlYW0udHR5LGJ1ZmZlcltvZmZzZXQraV0pfX1jYXRjaChlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOSl9aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX19LGRlZmF1bHRfdHR5X29wczp7Z2V0X2NoYXIodHR5KXtyZXR1cm4gRlNfc3RkaW5fZ2V0Q2hhcigpfSxwdXRfY2hhcih0dHksdmFsKXtpZih2YWw9PT1udWxsfHx2YWw9PT0xMCl7b3V0KFVURjhBcnJheVRvU3RyaW5nKHR0eS5vdXRwdXQpKTt0dHkub3V0cHV0PVtdfWVsc2V7aWYodmFsIT0wKXR0eS5vdXRwdXQucHVzaCh2YWwpfX0sZnN5bmModHR5KXtpZih0dHkub3V0cHV0JiZ0dHkub3V0cHV0Lmxlbmd0aD4wKXtvdXQoVVRGOEFycmF5VG9TdHJpbmcodHR5Lm91dHB1dCkpO3R0eS5vdXRwdXQ9W119fSxpb2N0bF90Y2dldHModHR5KXtyZXR1cm57Y19pZmxhZzoyNTg1NixjX29mbGFnOjUsY19jZmxhZzoxOTEsY19sZmxhZzozNTM4NyxjX2NjOlszLDI4LDEyNywyMSw0LDAsMSwwLDE3LDE5LDI2LDAsMTgsMTUsMjMsMjIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF19fSxpb2N0bF90Y3NldHModHR5LG9wdGlvbmFsX2FjdGlvbnMsZGF0YSl7cmV0dXJuIDB9LGlvY3RsX3Rpb2Nnd2luc3oodHR5KXtyZXR1cm5bMjQsODBdfX0sZGVmYXVsdF90dHkxX29wczp7cHV0X2NoYXIodHR5LHZhbCl7aWYodmFsPT09bnVsbHx8dmFsPT09MTApe2VycihVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0KSk7dHR5Lm91dHB1dD1bXX1lbHNle2lmKHZhbCE9MCl0dHkub3V0cHV0LnB1c2godmFsKX19LGZzeW5jKHR0eSl7aWYodHR5Lm91dHB1dCYmdHR5Lm91dHB1dC5sZW5ndGg+MCl7ZXJyKFVURjhBcnJheVRvU3RyaW5nKHR0eS5vdXRwdXQpKTt0dHkub3V0cHV0PVtdfX19fTt2YXIgbW1hcEFsbG9jPXNpemU9PnthYm9ydCgpfTt2YXIgTUVNRlM9e29wc190YWJsZTpudWxsLG1vdW50KG1vdW50KXtyZXR1cm4gTUVNRlMuY3JlYXRlTm9kZShudWxsLFwiL1wiLDE2Mzg0fDUxMSwwKX0sY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlLGRldil7aWYoRlMuaXNCbGtkZXYobW9kZSl8fEZTLmlzRklGTyhtb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfU1FTUZTLm9wc190YWJsZXx8PXtkaXI6e25vZGU6e2dldGF0dHI6TUVNRlMubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOk1FTUZTLm5vZGVfb3BzLnNldGF0dHIsbG9va3VwOk1FTUZTLm5vZGVfb3BzLmxvb2t1cCxta25vZDpNRU1GUy5ub2RlX29wcy5ta25vZCxyZW5hbWU6TUVNRlMubm9kZV9vcHMucmVuYW1lLHVubGluazpNRU1GUy5ub2RlX29wcy51bmxpbmsscm1kaXI6TUVNRlMubm9kZV9vcHMucm1kaXIscmVhZGRpcjpNRU1GUy5ub2RlX29wcy5yZWFkZGlyLHN5bWxpbms6TUVNRlMubm9kZV9vcHMuc3ltbGlua30sc3RyZWFtOntsbHNlZWs6TUVNRlMuc3RyZWFtX29wcy5sbHNlZWt9fSxmaWxlOntub2RlOntnZXRhdHRyOk1FTUZTLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpNRU1GUy5ub2RlX29wcy5zZXRhdHRyfSxzdHJlYW06e2xsc2VlazpNRU1GUy5zdHJlYW1fb3BzLmxsc2VlayxyZWFkOk1FTUZTLnN0cmVhbV9vcHMucmVhZCx3cml0ZTpNRU1GUy5zdHJlYW1fb3BzLndyaXRlLGFsbG9jYXRlOk1FTUZTLnN0cmVhbV9vcHMuYWxsb2NhdGUsbW1hcDpNRU1GUy5zdHJlYW1fb3BzLm1tYXAsbXN5bmM6TUVNRlMuc3RyZWFtX29wcy5tc3luY319LGxpbms6e25vZGU6e2dldGF0dHI6TUVNRlMubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOk1FTUZTLm5vZGVfb3BzLnNldGF0dHIscmVhZGxpbms6TUVNRlMubm9kZV9vcHMucmVhZGxpbmt9LHN0cmVhbTp7fX0sY2hyZGV2Ontub2RlOntnZXRhdHRyOk1FTUZTLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpNRU1GUy5ub2RlX29wcy5zZXRhdHRyfSxzdHJlYW06RlMuY2hyZGV2X3N0cmVhbV9vcHN9fTt2YXIgbm9kZT1GUy5jcmVhdGVOb2RlKHBhcmVudCxuYW1lLG1vZGUsZGV2KTtpZihGUy5pc0Rpcihub2RlLm1vZGUpKXtub2RlLm5vZGVfb3BzPU1FTUZTLm9wc190YWJsZS5kaXIubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmRpci5zdHJlYW07bm9kZS5jb250ZW50cz17fX1lbHNlIGlmKEZTLmlzRmlsZShub2RlLm1vZGUpKXtub2RlLm5vZGVfb3BzPU1FTUZTLm9wc190YWJsZS5maWxlLm5vZGU7bm9kZS5zdHJlYW1fb3BzPU1FTUZTLm9wc190YWJsZS5maWxlLnN0cmVhbTtub2RlLnVzZWRCeXRlcz0wO25vZGUuY29udGVudHM9bnVsbH1lbHNlIGlmKEZTLmlzTGluayhub2RlLm1vZGUpKXtub2RlLm5vZGVfb3BzPU1FTUZTLm9wc190YWJsZS5saW5rLm5vZGU7bm9kZS5zdHJlYW1fb3BzPU1FTUZTLm9wc190YWJsZS5saW5rLnN0cmVhbX1lbHNlIGlmKEZTLmlzQ2hyZGV2KG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmNocmRldi5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUuY2hyZGV2LnN0cmVhbX1ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpO2lmKHBhcmVudCl7cGFyZW50LmNvbnRlbnRzW25hbWVdPW5vZGU7cGFyZW50LnRpbWVzdGFtcD1ub2RlLnRpbWVzdGFtcH1yZXR1cm4gbm9kZX0sZ2V0RmlsZURhdGFBc1R5cGVkQXJyYXkobm9kZSl7aWYoIW5vZGUuY29udGVudHMpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO2lmKG5vZGUuY29udGVudHMuc3ViYXJyYXkpcmV0dXJuIG5vZGUuY29udGVudHMuc3ViYXJyYXkoMCxub2RlLnVzZWRCeXRlcyk7cmV0dXJuIG5ldyBVaW50OEFycmF5KG5vZGUuY29udGVudHMpfSxleHBhbmRGaWxlU3RvcmFnZShub2RlLG5ld0NhcGFjaXR5KXt2YXIgcHJldkNhcGFjaXR5PW5vZGUuY29udGVudHM/bm9kZS5jb250ZW50cy5sZW5ndGg6MDtpZihwcmV2Q2FwYWNpdHk+PW5ld0NhcGFjaXR5KXJldHVybjt2YXIgQ0FQQUNJVFlfRE9VQkxJTkdfTUFYPTEwMjQqMTAyNDtuZXdDYXBhY2l0eT1NYXRoLm1heChuZXdDYXBhY2l0eSxwcmV2Q2FwYWNpdHkqKHByZXZDYXBhY2l0eTxDQVBBQ0lUWV9ET1VCTElOR19NQVg/MjoxLjEyNSk+Pj4wKTtpZihwcmV2Q2FwYWNpdHkhPTApbmV3Q2FwYWNpdHk9TWF0aC5tYXgobmV3Q2FwYWNpdHksMjU2KTt2YXIgb2xkQ29udGVudHM9bm9kZS5jb250ZW50cztub2RlLmNvbnRlbnRzPW5ldyBVaW50OEFycmF5KG5ld0NhcGFjaXR5KTtpZihub2RlLnVzZWRCeXRlcz4wKW5vZGUuY29udGVudHMuc2V0KG9sZENvbnRlbnRzLnN1YmFycmF5KDAsbm9kZS51c2VkQnl0ZXMpLDApfSxyZXNpemVGaWxlU3RvcmFnZShub2RlLG5ld1NpemUpe2lmKG5vZGUudXNlZEJ5dGVzPT1uZXdTaXplKXJldHVybjtpZihuZXdTaXplPT0wKXtub2RlLmNvbnRlbnRzPW51bGw7bm9kZS51c2VkQnl0ZXM9MH1lbHNle3ZhciBvbGRDb250ZW50cz1ub2RlLmNvbnRlbnRzO25vZGUuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkobmV3U2l6ZSk7aWYob2xkQ29udGVudHMpe25vZGUuY29udGVudHMuc2V0KG9sZENvbnRlbnRzLnN1YmFycmF5KDAsTWF0aC5taW4obmV3U2l6ZSxub2RlLnVzZWRCeXRlcykpKX1ub2RlLnVzZWRCeXRlcz1uZXdTaXplfX0sbm9kZV9vcHM6e2dldGF0dHIobm9kZSl7dmFyIGF0dHI9e307YXR0ci5kZXY9RlMuaXNDaHJkZXYobm9kZS5tb2RlKT9ub2RlLmlkOjE7YXR0ci5pbm89bm9kZS5pZDthdHRyLm1vZGU9bm9kZS5tb2RlO2F0dHIubmxpbms9MTthdHRyLnVpZD0wO2F0dHIuZ2lkPTA7YXR0ci5yZGV2PW5vZGUucmRldjtpZihGUy5pc0Rpcihub2RlLm1vZGUpKXthdHRyLnNpemU9NDA5Nn1lbHNlIGlmKEZTLmlzRmlsZShub2RlLm1vZGUpKXthdHRyLnNpemU9bm9kZS51c2VkQnl0ZXN9ZWxzZSBpZihGUy5pc0xpbmsobm9kZS5tb2RlKSl7YXR0ci5zaXplPW5vZGUubGluay5sZW5ndGh9ZWxzZXthdHRyLnNpemU9MH1hdHRyLmF0aW1lPW5ldyBEYXRlKG5vZGUudGltZXN0YW1wKTthdHRyLm10aW1lPW5ldyBEYXRlKG5vZGUudGltZXN0YW1wKTthdHRyLmN0aW1lPW5ldyBEYXRlKG5vZGUudGltZXN0YW1wKTthdHRyLmJsa3NpemU9NDA5NjthdHRyLmJsb2Nrcz1NYXRoLmNlaWwoYXR0ci5zaXplL2F0dHIuYmxrc2l6ZSk7cmV0dXJuIGF0dHJ9LHNldGF0dHIobm9kZSxhdHRyKXtpZihhdHRyLm1vZGUhPT11bmRlZmluZWQpe25vZGUubW9kZT1hdHRyLm1vZGV9aWYoYXR0ci50aW1lc3RhbXAhPT11bmRlZmluZWQpe25vZGUudGltZXN0YW1wPWF0dHIudGltZXN0YW1wfWlmKGF0dHIuc2l6ZSE9PXVuZGVmaW5lZCl7TUVNRlMucmVzaXplRmlsZVN0b3JhZ2Uobm9kZSxhdHRyLnNpemUpfX0sbG9va3VwKHBhcmVudCxuYW1lKXt0aHJvdyBGUy5nZW5lcmljRXJyb3JzWzQ0XX0sbWtub2QocGFyZW50LG5hbWUsbW9kZSxkZXYpe3JldHVybiBNRU1GUy5jcmVhdGVOb2RlKHBhcmVudCxuYW1lLG1vZGUsZGV2KX0scmVuYW1lKG9sZF9ub2RlLG5ld19kaXIsbmV3X25hbWUpe2lmKEZTLmlzRGlyKG9sZF9ub2RlLm1vZGUpKXt2YXIgbmV3X25vZGU7dHJ5e25ld19ub2RlPUZTLmxvb2t1cE5vZGUobmV3X2RpcixuZXdfbmFtZSl9Y2F0Y2goZSl7fWlmKG5ld19ub2RlKXtmb3IodmFyIGkgaW4gbmV3X25vZGUuY29udGVudHMpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU1KX19fWRlbGV0ZSBvbGRfbm9kZS5wYXJlbnQuY29udGVudHNbb2xkX25vZGUubmFtZV07b2xkX25vZGUucGFyZW50LnRpbWVzdGFtcD1EYXRlLm5vdygpO29sZF9ub2RlLm5hbWU9bmV3X25hbWU7bmV3X2Rpci5jb250ZW50c1tuZXdfbmFtZV09b2xkX25vZGU7bmV3X2Rpci50aW1lc3RhbXA9b2xkX25vZGUucGFyZW50LnRpbWVzdGFtcH0sdW5saW5rKHBhcmVudCxuYW1lKXtkZWxldGUgcGFyZW50LmNvbnRlbnRzW25hbWVdO3BhcmVudC50aW1lc3RhbXA9RGF0ZS5ub3coKX0scm1kaXIocGFyZW50LG5hbWUpe3ZhciBub2RlPUZTLmxvb2t1cE5vZGUocGFyZW50LG5hbWUpO2Zvcih2YXIgaSBpbiBub2RlLmNvbnRlbnRzKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NSl9ZGVsZXRlIHBhcmVudC5jb250ZW50c1tuYW1lXTtwYXJlbnQudGltZXN0YW1wPURhdGUubm93KCl9LHJlYWRkaXIobm9kZSl7dmFyIGVudHJpZXM9W1wiLlwiLFwiLi5cIl07Zm9yKHZhciBrZXkgb2YgT2JqZWN0LmtleXMobm9kZS5jb250ZW50cykpe2VudHJpZXMucHVzaChrZXkpfXJldHVybiBlbnRyaWVzfSxzeW1saW5rKHBhcmVudCxuZXduYW1lLG9sZHBhdGgpe3ZhciBub2RlPU1FTUZTLmNyZWF0ZU5vZGUocGFyZW50LG5ld25hbWUsNTExfDQwOTYwLDApO25vZGUubGluaz1vbGRwYXRoO3JldHVybiBub2RlfSxyZWFkbGluayhub2RlKXtpZighRlMuaXNMaW5rKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gbm9kZS5saW5rfX0sc3RyZWFtX29wczp7cmVhZChzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe3ZhciBjb250ZW50cz1zdHJlYW0ubm9kZS5jb250ZW50cztpZihwb3NpdGlvbj49c3RyZWFtLm5vZGUudXNlZEJ5dGVzKXJldHVybiAwO3ZhciBzaXplPU1hdGgubWluKHN0cmVhbS5ub2RlLnVzZWRCeXRlcy1wb3NpdGlvbixsZW5ndGgpO2lmKHNpemU+OCYmY29udGVudHMuc3ViYXJyYXkpe2J1ZmZlci5zZXQoY29udGVudHMuc3ViYXJyYXkocG9zaXRpb24scG9zaXRpb24rc2l6ZSksb2Zmc2V0KX1lbHNle2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspYnVmZmVyW29mZnNldCtpXT1jb250ZW50c1twb3NpdGlvbitpXX1yZXR1cm4gc2l6ZX0sd3JpdGUoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bil7aWYoIWxlbmd0aClyZXR1cm4gMDt2YXIgbm9kZT1zdHJlYW0ubm9kZTtub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpO2lmKGJ1ZmZlci5zdWJhcnJheSYmKCFub2RlLmNvbnRlbnRzfHxub2RlLmNvbnRlbnRzLnN1YmFycmF5KSl7aWYoY2FuT3duKXtub2RlLmNvbnRlbnRzPWJ1ZmZlci5zdWJhcnJheShvZmZzZXQsb2Zmc2V0K2xlbmd0aCk7bm9kZS51c2VkQnl0ZXM9bGVuZ3RoO3JldHVybiBsZW5ndGh9ZWxzZSBpZihub2RlLnVzZWRCeXRlcz09PTAmJnBvc2l0aW9uPT09MCl7bm9kZS5jb250ZW50cz1idWZmZXIuc2xpY2Uob2Zmc2V0LG9mZnNldCtsZW5ndGgpO25vZGUudXNlZEJ5dGVzPWxlbmd0aDtyZXR1cm4gbGVuZ3RofWVsc2UgaWYocG9zaXRpb24rbGVuZ3RoPD1ub2RlLnVzZWRCeXRlcyl7bm9kZS5jb250ZW50cy5zZXQoYnVmZmVyLnN1YmFycmF5KG9mZnNldCxvZmZzZXQrbGVuZ3RoKSxwb3NpdGlvbik7cmV0dXJuIGxlbmd0aH19TUVNRlMuZXhwYW5kRmlsZVN0b3JhZ2Uobm9kZSxwb3NpdGlvbitsZW5ndGgpO2lmKG5vZGUuY29udGVudHMuc3ViYXJyYXkmJmJ1ZmZlci5zdWJhcnJheSl7bm9kZS5jb250ZW50cy5zZXQoYnVmZmVyLnN1YmFycmF5KG9mZnNldCxvZmZzZXQrbGVuZ3RoKSxwb3NpdGlvbil9ZWxzZXtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe25vZGUuY29udGVudHNbcG9zaXRpb24raV09YnVmZmVyW29mZnNldCtpXX19bm9kZS51c2VkQnl0ZXM9TWF0aC5tYXgobm9kZS51c2VkQnl0ZXMscG9zaXRpb24rbGVuZ3RoKTtyZXR1cm4gbGVuZ3RofSxsbHNlZWsoc3RyZWFtLG9mZnNldCx3aGVuY2Upe3ZhciBwb3NpdGlvbj1vZmZzZXQ7aWYod2hlbmNlPT09MSl7cG9zaXRpb24rPXN0cmVhbS5wb3NpdGlvbn1lbHNlIGlmKHdoZW5jZT09PTIpe2lmKEZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7cG9zaXRpb24rPXN0cmVhbS5ub2RlLnVzZWRCeXRlc319aWYocG9zaXRpb248MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXJldHVybiBwb3NpdGlvbn0sYWxsb2NhdGUoc3RyZWFtLG9mZnNldCxsZW5ndGgpe01FTUZTLmV4cGFuZEZpbGVTdG9yYWdlKHN0cmVhbS5ub2RlLG9mZnNldCtsZW5ndGgpO3N0cmVhbS5ub2RlLnVzZWRCeXRlcz1NYXRoLm1heChzdHJlYW0ubm9kZS51c2VkQnl0ZXMsb2Zmc2V0K2xlbmd0aCl9LG1tYXAoc3RyZWFtLGxlbmd0aCxwb3NpdGlvbixwcm90LGZsYWdzKXtpZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9dmFyIHB0cjt2YXIgYWxsb2NhdGVkO3ZhciBjb250ZW50cz1zdHJlYW0ubm9kZS5jb250ZW50cztpZighKGZsYWdzJjIpJiZjb250ZW50cyYmY29udGVudHMuYnVmZmVyPT09SEVBUDguYnVmZmVyKXthbGxvY2F0ZWQ9ZmFsc2U7cHRyPWNvbnRlbnRzLmJ5dGVPZmZzZXR9ZWxzZXthbGxvY2F0ZWQ9dHJ1ZTtwdHI9bW1hcEFsbG9jKGxlbmd0aCk7aWYoIXB0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDgpfWlmKGNvbnRlbnRzKXtpZihwb3NpdGlvbj4wfHxwb3NpdGlvbitsZW5ndGg8Y29udGVudHMubGVuZ3RoKXtpZihjb250ZW50cy5zdWJhcnJheSl7Y29udGVudHM9Y29udGVudHMuc3ViYXJyYXkocG9zaXRpb24scG9zaXRpb24rbGVuZ3RoKX1lbHNle2NvbnRlbnRzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNvbnRlbnRzLHBvc2l0aW9uLHBvc2l0aW9uK2xlbmd0aCl9fUhFQVA4LnNldChjb250ZW50cyxwdHIpfX1yZXR1cm57cHRyLGFsbG9jYXRlZH19LG1zeW5jKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxtbWFwRmxhZ3Mpe01FTUZTLnN0cmVhbV9vcHMud3JpdGUoc3RyZWFtLGJ1ZmZlciwwLGxlbmd0aCxvZmZzZXQsZmFsc2UpO3JldHVybiAwfX19O3ZhciBhc3luY0xvYWQ9KHVybCxvbmxvYWQsb25lcnJvcixub1J1bkRlcCk9Pnt2YXIgZGVwPSFub1J1bkRlcD9nZXRVbmlxdWVSdW5EZXBlbmRlbmN5KGBhbCAke3VybH1gKTpcIlwiO3JlYWRBc3luYyh1cmwpLnRoZW4oYXJyYXlCdWZmZXI9PntvbmxvYWQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtpZihkZXApcmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApfSxlcnI9PntpZihvbmVycm9yKXtvbmVycm9yKCl9ZWxzZXt0aHJvd2BMb2FkaW5nIGRhdGEgZmlsZSBcIiR7dXJsfVwiIGZhaWxlZC5gfX0pO2lmKGRlcClhZGRSdW5EZXBlbmRlbmN5KGRlcCl9O3ZhciBGU19jcmVhdGVEYXRhRmlsZT0ocGFyZW50LG5hbWUsZmlsZURhdGEsY2FuUmVhZCxjYW5Xcml0ZSxjYW5Pd24pPT57RlMuY3JlYXRlRGF0YUZpbGUocGFyZW50LG5hbWUsZmlsZURhdGEsY2FuUmVhZCxjYW5Xcml0ZSxjYW5Pd24pfTt2YXIgcHJlbG9hZFBsdWdpbnM9TW9kdWxlW1wicHJlbG9hZFBsdWdpbnNcIl18fFtdO3ZhciBGU19oYW5kbGVkQnlQcmVsb2FkUGx1Z2luPShieXRlQXJyYXksZnVsbG5hbWUsZmluaXNoLG9uZXJyb3IpPT57aWYodHlwZW9mIEJyb3dzZXIhPVwidW5kZWZpbmVkXCIpQnJvd3Nlci5pbml0KCk7dmFyIGhhbmRsZWQ9ZmFsc2U7cHJlbG9hZFBsdWdpbnMuZm9yRWFjaChwbHVnaW49PntpZihoYW5kbGVkKXJldHVybjtpZihwbHVnaW5bXCJjYW5IYW5kbGVcIl0oZnVsbG5hbWUpKXtwbHVnaW5bXCJoYW5kbGVcIl0oYnl0ZUFycmF5LGZ1bGxuYW1lLGZpbmlzaCxvbmVycm9yKTtoYW5kbGVkPXRydWV9fSk7cmV0dXJuIGhhbmRsZWR9O3ZhciBGU19jcmVhdGVQcmVsb2FkZWRGaWxlPShwYXJlbnQsbmFtZSx1cmwsY2FuUmVhZCxjYW5Xcml0ZSxvbmxvYWQsb25lcnJvcixkb250Q3JlYXRlRmlsZSxjYW5Pd24scHJlRmluaXNoKT0+e3ZhciBmdWxsbmFtZT1uYW1lP1BBVEhfRlMucmVzb2x2ZShQQVRILmpvaW4yKHBhcmVudCxuYW1lKSk6cGFyZW50O3ZhciBkZXA9Z2V0VW5pcXVlUnVuRGVwZW5kZW5jeShgY3AgJHtmdWxsbmFtZX1gKTtmdW5jdGlvbiBwcm9jZXNzRGF0YShieXRlQXJyYXkpe2Z1bmN0aW9uIGZpbmlzaChieXRlQXJyYXkpe3ByZUZpbmlzaD8uKCk7aWYoIWRvbnRDcmVhdGVGaWxlKXtGU19jcmVhdGVEYXRhRmlsZShwYXJlbnQsbmFtZSxieXRlQXJyYXksY2FuUmVhZCxjYW5Xcml0ZSxjYW5Pd24pfW9ubG9hZD8uKCk7cmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApfWlmKEZTX2hhbmRsZWRCeVByZWxvYWRQbHVnaW4oYnl0ZUFycmF5LGZ1bGxuYW1lLGZpbmlzaCwoKT0+e29uZXJyb3I/LigpO3JlbW92ZVJ1bkRlcGVuZGVuY3koZGVwKX0pKXtyZXR1cm59ZmluaXNoKGJ5dGVBcnJheSl9YWRkUnVuRGVwZW5kZW5jeShkZXApO2lmKHR5cGVvZiB1cmw9PVwic3RyaW5nXCIpe2FzeW5jTG9hZCh1cmwscHJvY2Vzc0RhdGEsb25lcnJvcil9ZWxzZXtwcm9jZXNzRGF0YSh1cmwpfX07dmFyIEZTX21vZGVTdHJpbmdUb0ZsYWdzPXN0cj0+e3ZhciBmbGFnTW9kZXM9e3I6MCxcInIrXCI6Mix3OjUxMnw2NHwxLFwidytcIjo1MTJ8NjR8MixhOjEwMjR8NjR8MSxcImErXCI6MTAyNHw2NHwyfTt2YXIgZmxhZ3M9ZmxhZ01vZGVzW3N0cl07aWYodHlwZW9mIGZsYWdzPT1cInVuZGVmaW5lZFwiKXt0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZmlsZSBvcGVuIG1vZGU6ICR7c3RyfWApfXJldHVybiBmbGFnc307dmFyIEZTX2dldE1vZGU9KGNhblJlYWQsY2FuV3JpdGUpPT57dmFyIG1vZGU9MDtpZihjYW5SZWFkKW1vZGV8PTI5Mnw3MztpZihjYW5Xcml0ZSltb2RlfD0xNDY7cmV0dXJuIG1vZGV9O3ZhciBGUz17cm9vdDpudWxsLG1vdW50czpbXSxkZXZpY2VzOnt9LHN0cmVhbXM6W10sbmV4dElub2RlOjEsbmFtZVRhYmxlOm51bGwsY3VycmVudFBhdGg6XCIvXCIsaW5pdGlhbGl6ZWQ6ZmFsc2UsaWdub3JlUGVybWlzc2lvbnM6dHJ1ZSxFcnJub0Vycm9yOmNsYXNze2NvbnN0cnVjdG9yKGVycm5vKXt0aGlzLm5hbWU9XCJFcnJub0Vycm9yXCI7dGhpcy5lcnJubz1lcnJub319LGdlbmVyaWNFcnJvcnM6e30sZmlsZXN5c3RlbXM6bnVsbCxzeW5jRlNSZXF1ZXN0czowLHJlYWRGaWxlczp7fSxGU1N0cmVhbTpjbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuc2hhcmVkPXt9fWdldCBvYmplY3QoKXtyZXR1cm4gdGhpcy5ub2RlfXNldCBvYmplY3QodmFsKXt0aGlzLm5vZGU9dmFsfWdldCBpc1JlYWQoKXtyZXR1cm4odGhpcy5mbGFncyYyMDk3MTU1KSE9PTF9Z2V0IGlzV3JpdGUoKXtyZXR1cm4odGhpcy5mbGFncyYyMDk3MTU1KSE9PTB9Z2V0IGlzQXBwZW5kKCl7cmV0dXJuIHRoaXMuZmxhZ3MmMTAyNH1nZXQgZmxhZ3MoKXtyZXR1cm4gdGhpcy5zaGFyZWQuZmxhZ3N9c2V0IGZsYWdzKHZhbCl7dGhpcy5zaGFyZWQuZmxhZ3M9dmFsfWdldCBwb3NpdGlvbigpe3JldHVybiB0aGlzLnNoYXJlZC5wb3NpdGlvbn1zZXQgcG9zaXRpb24odmFsKXt0aGlzLnNoYXJlZC5wb3NpdGlvbj12YWx9fSxGU05vZGU6Y2xhc3N7Y29uc3RydWN0b3IocGFyZW50LG5hbWUsbW9kZSxyZGV2KXtpZighcGFyZW50KXtwYXJlbnQ9dGhpc310aGlzLnBhcmVudD1wYXJlbnQ7dGhpcy5tb3VudD1wYXJlbnQubW91bnQ7dGhpcy5tb3VudGVkPW51bGw7dGhpcy5pZD1GUy5uZXh0SW5vZGUrKzt0aGlzLm5hbWU9bmFtZTt0aGlzLm1vZGU9bW9kZTt0aGlzLm5vZGVfb3BzPXt9O3RoaXMuc3RyZWFtX29wcz17fTt0aGlzLnJkZXY9cmRldjt0aGlzLnJlYWRNb2RlPTI5Mnw3Mzt0aGlzLndyaXRlTW9kZT0xNDZ9Z2V0IHJlYWQoKXtyZXR1cm4odGhpcy5tb2RlJnRoaXMucmVhZE1vZGUpPT09dGhpcy5yZWFkTW9kZX1zZXQgcmVhZCh2YWwpe3ZhbD90aGlzLm1vZGV8PXRoaXMucmVhZE1vZGU6dGhpcy5tb2RlJj1+dGhpcy5yZWFkTW9kZX1nZXQgd3JpdGUoKXtyZXR1cm4odGhpcy5tb2RlJnRoaXMud3JpdGVNb2RlKT09PXRoaXMud3JpdGVNb2RlfXNldCB3cml0ZSh2YWwpe3ZhbD90aGlzLm1vZGV8PXRoaXMud3JpdGVNb2RlOnRoaXMubW9kZSY9fnRoaXMud3JpdGVNb2RlfWdldCBpc0ZvbGRlcigpe3JldHVybiBGUy5pc0Rpcih0aGlzLm1vZGUpfWdldCBpc0RldmljZSgpe3JldHVybiBGUy5pc0NocmRldih0aGlzLm1vZGUpfX0sbG9va3VwUGF0aChwYXRoLG9wdHM9e30pe3BhdGg9UEFUSF9GUy5yZXNvbHZlKHBhdGgpO2lmKCFwYXRoKXJldHVybntwYXRoOlwiXCIsbm9kZTpudWxsfTt2YXIgZGVmYXVsdHM9e2ZvbGxvd19tb3VudDp0cnVlLHJlY3Vyc2VfY291bnQ6MH07b3B0cz1PYmplY3QuYXNzaWduKGRlZmF1bHRzLG9wdHMpO2lmKG9wdHMucmVjdXJzZV9jb3VudD44KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMil9dmFyIHBhcnRzPXBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcihwPT4hIXApO3ZhciBjdXJyZW50PUZTLnJvb3Q7dmFyIGN1cnJlbnRfcGF0aD1cIi9cIjtmb3IodmFyIGk9MDtpPHBhcnRzLmxlbmd0aDtpKyspe3ZhciBpc2xhc3Q9aT09PXBhcnRzLmxlbmd0aC0xO2lmKGlzbGFzdCYmb3B0cy5wYXJlbnQpe2JyZWFrfWN1cnJlbnQ9RlMubG9va3VwTm9kZShjdXJyZW50LHBhcnRzW2ldKTtjdXJyZW50X3BhdGg9UEFUSC5qb2luMihjdXJyZW50X3BhdGgscGFydHNbaV0pO2lmKEZTLmlzTW91bnRwb2ludChjdXJyZW50KSl7aWYoIWlzbGFzdHx8aXNsYXN0JiZvcHRzLmZvbGxvd19tb3VudCl7Y3VycmVudD1jdXJyZW50Lm1vdW50ZWQucm9vdH19aWYoIWlzbGFzdHx8b3B0cy5mb2xsb3cpe3ZhciBjb3VudD0wO3doaWxlKEZTLmlzTGluayhjdXJyZW50Lm1vZGUpKXt2YXIgbGluaz1GUy5yZWFkbGluayhjdXJyZW50X3BhdGgpO2N1cnJlbnRfcGF0aD1QQVRIX0ZTLnJlc29sdmUoUEFUSC5kaXJuYW1lKGN1cnJlbnRfcGF0aCksbGluayk7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKGN1cnJlbnRfcGF0aCx7cmVjdXJzZV9jb3VudDpvcHRzLnJlY3Vyc2VfY291bnQrMX0pO2N1cnJlbnQ9bG9va3VwLm5vZGU7aWYoY291bnQrKz40MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMzIpfX19fXJldHVybntwYXRoOmN1cnJlbnRfcGF0aCxub2RlOmN1cnJlbnR9fSxnZXRQYXRoKG5vZGUpe3ZhciBwYXRoO3doaWxlKHRydWUpe2lmKEZTLmlzUm9vdChub2RlKSl7dmFyIG1vdW50PW5vZGUubW91bnQubW91bnRwb2ludDtpZighcGF0aClyZXR1cm4gbW91bnQ7cmV0dXJuIG1vdW50W21vdW50Lmxlbmd0aC0xXSE9PVwiL1wiP2Ake21vdW50fS8ke3BhdGh9YDptb3VudCtwYXRofXBhdGg9cGF0aD9gJHtub2RlLm5hbWV9LyR7cGF0aH1gOm5vZGUubmFtZTtub2RlPW5vZGUucGFyZW50fX0saGFzaE5hbWUocGFyZW50aWQsbmFtZSl7dmFyIGhhc2g9MDtmb3IodmFyIGk9MDtpPG5hbWUubGVuZ3RoO2krKyl7aGFzaD0oaGFzaDw8NSktaGFzaCtuYW1lLmNoYXJDb2RlQXQoaSl8MH1yZXR1cm4ocGFyZW50aWQraGFzaD4+PjApJUZTLm5hbWVUYWJsZS5sZW5ndGh9LGhhc2hBZGROb2RlKG5vZGUpe3ZhciBoYXNoPUZTLmhhc2hOYW1lKG5vZGUucGFyZW50LmlkLG5vZGUubmFtZSk7bm9kZS5uYW1lX25leHQ9RlMubmFtZVRhYmxlW2hhc2hdO0ZTLm5hbWVUYWJsZVtoYXNoXT1ub2RlfSxoYXNoUmVtb3ZlTm9kZShub2RlKXt2YXIgaGFzaD1GUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCxub2RlLm5hbWUpO2lmKEZTLm5hbWVUYWJsZVtoYXNoXT09PW5vZGUpe0ZTLm5hbWVUYWJsZVtoYXNoXT1ub2RlLm5hbWVfbmV4dH1lbHNle3ZhciBjdXJyZW50PUZTLm5hbWVUYWJsZVtoYXNoXTt3aGlsZShjdXJyZW50KXtpZihjdXJyZW50Lm5hbWVfbmV4dD09PW5vZGUpe2N1cnJlbnQubmFtZV9uZXh0PW5vZGUubmFtZV9uZXh0O2JyZWFrfWN1cnJlbnQ9Y3VycmVudC5uYW1lX25leHR9fX0sbG9va3VwTm9kZShwYXJlbnQsbmFtZSl7dmFyIGVyckNvZGU9RlMubWF5TG9va3VwKHBhcmVudCk7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9dmFyIGhhc2g9RlMuaGFzaE5hbWUocGFyZW50LmlkLG5hbWUpO2Zvcih2YXIgbm9kZT1GUy5uYW1lVGFibGVbaGFzaF07bm9kZTtub2RlPW5vZGUubmFtZV9uZXh0KXt2YXIgbm9kZU5hbWU9bm9kZS5uYW1lO2lmKG5vZGUucGFyZW50LmlkPT09cGFyZW50LmlkJiZub2RlTmFtZT09PW5hbWUpe3JldHVybiBub2RlfX1yZXR1cm4gRlMubG9va3VwKHBhcmVudCxuYW1lKX0sY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlLHJkZXYpe3ZhciBub2RlPW5ldyBGUy5GU05vZGUocGFyZW50LG5hbWUsbW9kZSxyZGV2KTtGUy5oYXNoQWRkTm9kZShub2RlKTtyZXR1cm4gbm9kZX0sZGVzdHJveU5vZGUobm9kZSl7RlMuaGFzaFJlbW92ZU5vZGUobm9kZSl9LGlzUm9vdChub2RlKXtyZXR1cm4gbm9kZT09PW5vZGUucGFyZW50fSxpc01vdW50cG9pbnQobm9kZSl7cmV0dXJuISFub2RlLm1vdW50ZWR9LGlzRmlsZShtb2RlKXtyZXR1cm4obW9kZSY2MTQ0MCk9PT0zMjc2OH0saXNEaXIobW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09MTYzODR9LGlzTGluayhtb2RlKXtyZXR1cm4obW9kZSY2MTQ0MCk9PT00MDk2MH0saXNDaHJkZXYobW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09ODE5Mn0saXNCbGtkZXYobW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09MjQ1NzZ9LGlzRklGTyhtb2RlKXtyZXR1cm4obW9kZSY2MTQ0MCk9PT00MDk2fSxpc1NvY2tldChtb2RlKXtyZXR1cm4obW9kZSY0OTE1Mik9PT00OTE1Mn0sZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoZmxhZyl7dmFyIHBlcm1zPVtcInJcIixcIndcIixcInJ3XCJdW2ZsYWcmM107aWYoZmxhZyY1MTIpe3Blcm1zKz1cIndcIn1yZXR1cm4gcGVybXN9LG5vZGVQZXJtaXNzaW9ucyhub2RlLHBlcm1zKXtpZihGUy5pZ25vcmVQZXJtaXNzaW9ucyl7cmV0dXJuIDB9aWYocGVybXMuaW5jbHVkZXMoXCJyXCIpJiYhKG5vZGUubW9kZSYyOTIpKXtyZXR1cm4gMn1lbHNlIGlmKHBlcm1zLmluY2x1ZGVzKFwid1wiKSYmIShub2RlLm1vZGUmMTQ2KSl7cmV0dXJuIDJ9ZWxzZSBpZihwZXJtcy5pbmNsdWRlcyhcInhcIikmJiEobm9kZS5tb2RlJjczKSl7cmV0dXJuIDJ9cmV0dXJuIDB9LG1heUxvb2t1cChkaXIpe2lmKCFGUy5pc0RpcihkaXIubW9kZSkpcmV0dXJuIDU0O3ZhciBlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsXCJ4XCIpO2lmKGVyckNvZGUpcmV0dXJuIGVyckNvZGU7aWYoIWRpci5ub2RlX29wcy5sb29rdXApcmV0dXJuIDI7cmV0dXJuIDB9LG1heUNyZWF0ZShkaXIsbmFtZSl7dHJ5e3ZhciBub2RlPUZTLmxvb2t1cE5vZGUoZGlyLG5hbWUpO3JldHVybiAyMH1jYXRjaChlKXt9cmV0dXJuIEZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsXCJ3eFwiKX0sbWF5RGVsZXRlKGRpcixuYW1lLGlzZGlyKXt2YXIgbm9kZTt0cnl7bm9kZT1GUy5sb29rdXBOb2RlKGRpcixuYW1lKX1jYXRjaChlKXtyZXR1cm4gZS5lcnJub312YXIgZXJyQ29kZT1GUy5ub2RlUGVybWlzc2lvbnMoZGlyLFwid3hcIik7aWYoZXJyQ29kZSl7cmV0dXJuIGVyckNvZGV9aWYoaXNkaXIpe2lmKCFGUy5pc0Rpcihub2RlLm1vZGUpKXtyZXR1cm4gNTR9aWYoRlMuaXNSb290KG5vZGUpfHxGUy5nZXRQYXRoKG5vZGUpPT09RlMuY3dkKCkpe3JldHVybiAxMH19ZWxzZXtpZihGUy5pc0Rpcihub2RlLm1vZGUpKXtyZXR1cm4gMzF9fXJldHVybiAwfSxtYXlPcGVuKG5vZGUsZmxhZ3Mpe2lmKCFub2RlKXtyZXR1cm4gNDR9aWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe3JldHVybiAzMn1lbHNlIGlmKEZTLmlzRGlyKG5vZGUubW9kZSkpe2lmKEZTLmZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nKGZsYWdzKSE9PVwiclwifHxmbGFncyY1MTIpe3JldHVybiAzMX19cmV0dXJuIEZTLm5vZGVQZXJtaXNzaW9ucyhub2RlLEZTLmZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nKGZsYWdzKSl9LE1BWF9PUEVOX0ZEUzo0MDk2LG5leHRmZCgpe2Zvcih2YXIgZmQ9MDtmZDw9RlMuTUFYX09QRU5fRkRTO2ZkKyspe2lmKCFGUy5zdHJlYW1zW2ZkXSl7cmV0dXJuIGZkfX10aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMyl9LGdldFN0cmVhbUNoZWNrZWQoZmQpe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1yZXR1cm4gc3RyZWFtfSxnZXRTdHJlYW06ZmQ9PkZTLnN0cmVhbXNbZmRdLGNyZWF0ZVN0cmVhbShzdHJlYW0sZmQ9LTEpe3N0cmVhbT1PYmplY3QuYXNzaWduKG5ldyBGUy5GU1N0cmVhbSxzdHJlYW0pO2lmKGZkPT0tMSl7ZmQ9RlMubmV4dGZkKCl9c3RyZWFtLmZkPWZkO0ZTLnN0cmVhbXNbZmRdPXN0cmVhbTtyZXR1cm4gc3RyZWFtfSxjbG9zZVN0cmVhbShmZCl7RlMuc3RyZWFtc1tmZF09bnVsbH0sZHVwU3RyZWFtKG9yaWdTdHJlYW0sZmQ9LTEpe3ZhciBzdHJlYW09RlMuY3JlYXRlU3RyZWFtKG9yaWdTdHJlYW0sZmQpO3N0cmVhbS5zdHJlYW1fb3BzPy5kdXA/LihzdHJlYW0pO3JldHVybiBzdHJlYW19LGNocmRldl9zdHJlYW1fb3BzOntvcGVuKHN0cmVhbSl7dmFyIGRldmljZT1GUy5nZXREZXZpY2Uoc3RyZWFtLm5vZGUucmRldik7c3RyZWFtLnN0cmVhbV9vcHM9ZGV2aWNlLnN0cmVhbV9vcHM7c3RyZWFtLnN0cmVhbV9vcHMub3Blbj8uKHN0cmVhbSl9LGxsc2Vlaygpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDcwKX19LG1ham9yOmRldj0+ZGV2Pj44LG1pbm9yOmRldj0+ZGV2JjI1NSxtYWtlZGV2OihtYSxtaSk9Pm1hPDw4fG1pLHJlZ2lzdGVyRGV2aWNlKGRldixvcHMpe0ZTLmRldmljZXNbZGV2XT17c3RyZWFtX29wczpvcHN9fSxnZXREZXZpY2U6ZGV2PT5GUy5kZXZpY2VzW2Rldl0sZ2V0TW91bnRzKG1vdW50KXt2YXIgbW91bnRzPVtdO3ZhciBjaGVjaz1bbW91bnRdO3doaWxlKGNoZWNrLmxlbmd0aCl7dmFyIG09Y2hlY2sucG9wKCk7bW91bnRzLnB1c2gobSk7Y2hlY2sucHVzaCguLi5tLm1vdW50cyl9cmV0dXJuIG1vdW50c30sc3luY2ZzKHBvcHVsYXRlLGNhbGxiYWNrKXtpZih0eXBlb2YgcG9wdWxhdGU9PVwiZnVuY3Rpb25cIil7Y2FsbGJhY2s9cG9wdWxhdGU7cG9wdWxhdGU9ZmFsc2V9RlMuc3luY0ZTUmVxdWVzdHMrKztpZihGUy5zeW5jRlNSZXF1ZXN0cz4xKXtlcnIoYHdhcm5pbmc6ICR7RlMuc3luY0ZTUmVxdWVzdHN9IEZTLnN5bmNmcyBvcGVyYXRpb25zIGluIGZsaWdodCBhdCBvbmNlLCBwcm9iYWJseSBqdXN0IGRvaW5nIGV4dHJhIHdvcmtgKX12YXIgbW91bnRzPUZTLmdldE1vdW50cyhGUy5yb290Lm1vdW50KTt2YXIgY29tcGxldGVkPTA7ZnVuY3Rpb24gZG9DYWxsYmFjayhlcnJDb2RlKXtGUy5zeW5jRlNSZXF1ZXN0cy0tO3JldHVybiBjYWxsYmFjayhlcnJDb2RlKX1mdW5jdGlvbiBkb25lKGVyckNvZGUpe2lmKGVyckNvZGUpe2lmKCFkb25lLmVycm9yZWQpe2RvbmUuZXJyb3JlZD10cnVlO3JldHVybiBkb0NhbGxiYWNrKGVyckNvZGUpfXJldHVybn1pZigrK2NvbXBsZXRlZD49bW91bnRzLmxlbmd0aCl7ZG9DYWxsYmFjayhudWxsKX19bW91bnRzLmZvckVhY2gobW91bnQ9PntpZighbW91bnQudHlwZS5zeW5jZnMpe3JldHVybiBkb25lKG51bGwpfW1vdW50LnR5cGUuc3luY2ZzKG1vdW50LHBvcHVsYXRlLGRvbmUpfSl9LG1vdW50KHR5cGUsb3B0cyxtb3VudHBvaW50KXt2YXIgcm9vdD1tb3VudHBvaW50PT09XCIvXCI7dmFyIHBzZXVkbz0hbW91bnRwb2ludDt2YXIgbm9kZTtpZihyb290JiZGUy5yb290KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMCl9ZWxzZSBpZighcm9vdCYmIXBzZXVkbyl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG1vdW50cG9pbnQse2ZvbGxvd19tb3VudDpmYWxzZX0pO21vdW50cG9pbnQ9bG9va3VwLnBhdGg7bm9kZT1sb29rdXAubm9kZTtpZihGUy5pc01vdW50cG9pbnQobm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEwKX1pZighRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfX12YXIgbW91bnQ9e3R5cGUsb3B0cyxtb3VudHBvaW50LG1vdW50czpbXX07dmFyIG1vdW50Um9vdD10eXBlLm1vdW50KG1vdW50KTttb3VudFJvb3QubW91bnQ9bW91bnQ7bW91bnQucm9vdD1tb3VudFJvb3Q7aWYocm9vdCl7RlMucm9vdD1tb3VudFJvb3R9ZWxzZSBpZihub2RlKXtub2RlLm1vdW50ZWQ9bW91bnQ7aWYobm9kZS5tb3VudCl7bm9kZS5tb3VudC5tb3VudHMucHVzaChtb3VudCl9fXJldHVybiBtb3VudFJvb3R9LHVubW91bnQobW91bnRwb2ludCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG1vdW50cG9pbnQse2ZvbGxvd19tb3VudDpmYWxzZX0pO2lmKCFGUy5pc01vdW50cG9pbnQobG9va3VwLm5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIG5vZGU9bG9va3VwLm5vZGU7dmFyIG1vdW50PW5vZGUubW91bnRlZDt2YXIgbW91bnRzPUZTLmdldE1vdW50cyhtb3VudCk7T2JqZWN0LmtleXMoRlMubmFtZVRhYmxlKS5mb3JFYWNoKGhhc2g9Pnt2YXIgY3VycmVudD1GUy5uYW1lVGFibGVbaGFzaF07d2hpbGUoY3VycmVudCl7dmFyIG5leHQ9Y3VycmVudC5uYW1lX25leHQ7aWYobW91bnRzLmluY2x1ZGVzKGN1cnJlbnQubW91bnQpKXtGUy5kZXN0cm95Tm9kZShjdXJyZW50KX1jdXJyZW50PW5leHR9fSk7bm9kZS5tb3VudGVkPW51bGw7dmFyIGlkeD1ub2RlLm1vdW50Lm1vdW50cy5pbmRleE9mKG1vdW50KTtub2RlLm1vdW50Lm1vdW50cy5zcGxpY2UoaWR4LDEpfSxsb29rdXAocGFyZW50LG5hbWUpe3JldHVybiBwYXJlbnQubm9kZV9vcHMubG9va3VwKHBhcmVudCxuYW1lKX0sbWtub2QocGF0aCxtb2RlLGRldil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTt2YXIgbmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2lmKCFuYW1lfHxuYW1lPT09XCIuXCJ8fG5hbWU9PT1cIi4uXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgZXJyQ29kZT1GUy5tYXlDcmVhdGUocGFyZW50LG5hbWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMubWtub2Qpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1yZXR1cm4gcGFyZW50Lm5vZGVfb3BzLm1rbm9kKHBhcmVudCxuYW1lLG1vZGUsZGV2KX0sY3JlYXRlKHBhdGgsbW9kZSl7bW9kZT1tb2RlIT09dW5kZWZpbmVkP21vZGU6NDM4O21vZGUmPTQwOTU7bW9kZXw9MzI3Njg7cmV0dXJuIEZTLm1rbm9kKHBhdGgsbW9kZSwwKX0sbWtkaXIocGF0aCxtb2RlKXttb2RlPW1vZGUhPT11bmRlZmluZWQ/bW9kZTo1MTE7bW9kZSY9NTExfDUxMjttb2RlfD0xNjM4NDtyZXR1cm4gRlMubWtub2QocGF0aCxtb2RlLDApfSxta2RpclRyZWUocGF0aCxtb2RlKXt2YXIgZGlycz1wYXRoLnNwbGl0KFwiL1wiKTt2YXIgZD1cIlwiO2Zvcih2YXIgaT0wO2k8ZGlycy5sZW5ndGg7KytpKXtpZighZGlyc1tpXSljb250aW51ZTtkKz1cIi9cIitkaXJzW2ldO3RyeXtGUy5ta2RpcihkLG1vZGUpfWNhdGNoKGUpe2lmKGUuZXJybm8hPTIwKXRocm93IGV9fX0sbWtkZXYocGF0aCxtb2RlLGRldil7aWYodHlwZW9mIGRldj09XCJ1bmRlZmluZWRcIil7ZGV2PW1vZGU7bW9kZT00Mzh9bW9kZXw9ODE5MjtyZXR1cm4gRlMubWtub2QocGF0aCxtb2RlLGRldil9LHN5bWxpbmsob2xkcGF0aCxuZXdwYXRoKXtpZighUEFUSF9GUy5yZXNvbHZlKG9sZHBhdGgpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG5ld3BhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTtpZighcGFyZW50KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9dmFyIG5ld25hbWU9UEFUSC5iYXNlbmFtZShuZXdwYXRoKTt2YXIgZXJyQ29kZT1GUy5tYXlDcmVhdGUocGFyZW50LG5ld25hbWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMuc3ltbGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfXJldHVybiBwYXJlbnQubm9kZV9vcHMuc3ltbGluayhwYXJlbnQsbmV3bmFtZSxvbGRwYXRoKX0scmVuYW1lKG9sZF9wYXRoLG5ld19wYXRoKXt2YXIgb2xkX2Rpcm5hbWU9UEFUSC5kaXJuYW1lKG9sZF9wYXRoKTt2YXIgbmV3X2Rpcm5hbWU9UEFUSC5kaXJuYW1lKG5ld19wYXRoKTt2YXIgb2xkX25hbWU9UEFUSC5iYXNlbmFtZShvbGRfcGF0aCk7dmFyIG5ld19uYW1lPVBBVEguYmFzZW5hbWUobmV3X3BhdGgpO3ZhciBsb29rdXAsb2xkX2RpcixuZXdfZGlyO2xvb2t1cD1GUy5sb29rdXBQYXRoKG9sZF9wYXRoLHtwYXJlbnQ6dHJ1ZX0pO29sZF9kaXI9bG9va3VwLm5vZGU7bG9va3VwPUZTLmxvb2t1cFBhdGgobmV3X3BhdGgse3BhcmVudDp0cnVlfSk7bmV3X2Rpcj1sb29rdXAubm9kZTtpZighb2xkX2Rpcnx8IW5ld19kaXIpdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpO2lmKG9sZF9kaXIubW91bnQhPT1uZXdfZGlyLm1vdW50KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3NSl9dmFyIG9sZF9ub2RlPUZTLmxvb2t1cE5vZGUob2xkX2RpcixvbGRfbmFtZSk7dmFyIHJlbGF0aXZlPVBBVEhfRlMucmVsYXRpdmUob2xkX3BhdGgsbmV3X2Rpcm5hbWUpO2lmKHJlbGF0aXZlLmNoYXJBdCgwKSE9PVwiLlwiKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9cmVsYXRpdmU9UEFUSF9GUy5yZWxhdGl2ZShuZXdfcGF0aCxvbGRfZGlybmFtZSk7aWYocmVsYXRpdmUuY2hhckF0KDApIT09XCIuXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU1KX12YXIgbmV3X25vZGU7dHJ5e25ld19ub2RlPUZTLmxvb2t1cE5vZGUobmV3X2RpcixuZXdfbmFtZSl9Y2F0Y2goZSl7fWlmKG9sZF9ub2RlPT09bmV3X25vZGUpe3JldHVybn12YXIgaXNkaXI9RlMuaXNEaXIob2xkX25vZGUubW9kZSk7dmFyIGVyckNvZGU9RlMubWF5RGVsZXRlKG9sZF9kaXIsb2xkX25hbWUsaXNkaXIpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWVyckNvZGU9bmV3X25vZGU/RlMubWF5RGVsZXRlKG5ld19kaXIsbmV3X25hbWUsaXNkaXIpOkZTLm1heUNyZWF0ZShuZXdfZGlyLG5ld19uYW1lKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighb2xkX2Rpci5ub2RlX29wcy5yZW5hbWUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1pZihGUy5pc01vdW50cG9pbnQob2xkX25vZGUpfHxuZXdfbm9kZSYmRlMuaXNNb3VudHBvaW50KG5ld19ub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfWlmKG5ld19kaXIhPT1vbGRfZGlyKXtlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhvbGRfZGlyLFwid1wiKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX19RlMuaGFzaFJlbW92ZU5vZGUob2xkX25vZGUpO3RyeXtvbGRfZGlyLm5vZGVfb3BzLnJlbmFtZShvbGRfbm9kZSxuZXdfZGlyLG5ld19uYW1lKTtvbGRfbm9kZS5wYXJlbnQ9bmV3X2Rpcn1jYXRjaChlKXt0aHJvdyBlfWZpbmFsbHl7RlMuaGFzaEFkZE5vZGUob2xkX25vZGUpfX0scm1kaXIocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTt2YXIgbmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO3ZhciBub2RlPUZTLmxvb2t1cE5vZGUocGFyZW50LG5hbWUpO3ZhciBlcnJDb2RlPUZTLm1heURlbGV0ZShwYXJlbnQsbmFtZSx0cnVlKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLnJtZGlyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9aWYoRlMuaXNNb3VudHBvaW50KG5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMCl9cGFyZW50Lm5vZGVfb3BzLnJtZGlyKHBhcmVudCxuYW1lKTtGUy5kZXN0cm95Tm9kZShub2RlKX0scmVhZGRpcihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtpZighbm9kZS5ub2RlX29wcy5yZWFkZGlyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9cmV0dXJuIG5vZGUubm9kZV9vcHMucmVhZGRpcihub2RlKX0sdW5saW5rKHBhdGgpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3ZhciBwYXJlbnQ9bG9va3VwLm5vZGU7aWYoIXBhcmVudCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfXZhciBuYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7dmFyIGVyckNvZGU9RlMubWF5RGVsZXRlKHBhcmVudCxuYW1lLGZhbHNlKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLnVubGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfXBhcmVudC5ub2RlX29wcy51bmxpbmsocGFyZW50LG5hbWUpO0ZTLmRlc3Ryb3lOb2RlKG5vZGUpfSxyZWFkbGluayhwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCk7dmFyIGxpbms9bG9va3VwLm5vZGU7aWYoIWxpbmspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1pZighbGluay5ub2RlX29wcy5yZWFkbGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXJldHVybiBQQVRIX0ZTLnJlc29sdmUoRlMuZ2V0UGF0aChsaW5rLnBhcmVudCksbGluay5ub2RlX29wcy5yZWFkbGluayhsaW5rKSl9LHN0YXQocGF0aCxkb250Rm9sbG93KXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250Rm9sbG93fSk7dmFyIG5vZGU9bG9va3VwLm5vZGU7aWYoIW5vZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1pZighbm9kZS5ub2RlX29wcy5nZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9cmV0dXJuIG5vZGUubm9kZV9vcHMuZ2V0YXR0cihub2RlKX0sbHN0YXQocGF0aCl7cmV0dXJuIEZTLnN0YXQocGF0aCx0cnVlKX0sY2htb2QocGF0aCxtb2RlLGRvbnRGb2xsb3cpe3ZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT1cInN0cmluZ1wiKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250Rm9sbG93fSk7bm9kZT1sb29rdXAubm9kZX1lbHNle25vZGU9cGF0aH1pZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9bm9kZS5ub2RlX29wcy5zZXRhdHRyKG5vZGUse21vZGU6bW9kZSY0MDk1fG5vZGUubW9kZSZ+NDA5NSx0aW1lc3RhbXA6RGF0ZS5ub3coKX0pfSxsY2htb2QocGF0aCxtb2RlKXtGUy5jaG1vZChwYXRoLG1vZGUsdHJ1ZSl9LGZjaG1vZChmZCxtb2RlKXt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbUNoZWNrZWQoZmQpO0ZTLmNobW9kKHN0cmVhbS5ub2RlLG1vZGUpfSxjaG93bihwYXRoLHVpZCxnaWQsZG9udEZvbGxvdyl7dmFyIG5vZGU7aWYodHlwZW9mIHBhdGg9PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRGb2xsb3d9KTtub2RlPWxvb2t1cC5ub2RlfWVsc2V7bm9kZT1wYXRofWlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1ub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7dGltZXN0YW1wOkRhdGUubm93KCl9KX0sbGNob3duKHBhdGgsdWlkLGdpZCl7RlMuY2hvd24ocGF0aCx1aWQsZ2lkLHRydWUpfSxmY2hvd24oZmQsdWlkLGdpZCl7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW1DaGVja2VkKGZkKTtGUy5jaG93bihzdHJlYW0ubm9kZSx1aWQsZ2lkKX0sdHJ1bmNhdGUocGF0aCxsZW4pe2lmKGxlbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIG5vZGU7aWYodHlwZW9mIHBhdGg9PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6dHJ1ZX0pO25vZGU9bG9va3VwLm5vZGV9ZWxzZXtub2RlPXBhdGh9aWYoIW5vZGUubm9kZV9vcHMuc2V0YXR0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzRGlyKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMxKX1pZighRlMuaXNGaWxlKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgZXJyQ29kZT1GUy5ub2RlUGVybWlzc2lvbnMobm9kZSxcIndcIik7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9bm9kZS5ub2RlX29wcy5zZXRhdHRyKG5vZGUse3NpemU6bGVuLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGZ0cnVuY2F0ZShmZCxsZW4pe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtQ2hlY2tlZChmZCk7aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1GUy50cnVuY2F0ZShzdHJlYW0ubm9kZSxsZW4pfSx1dGltZShwYXRoLGF0aW1lLG10aW1lKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7dGltZXN0YW1wOk1hdGgubWF4KGF0aW1lLG10aW1lKX0pfSxvcGVuKHBhdGgsZmxhZ3MsbW9kZSl7aWYocGF0aD09PVwiXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1mbGFncz10eXBlb2YgZmxhZ3M9PVwic3RyaW5nXCI/RlNfbW9kZVN0cmluZ1RvRmxhZ3MoZmxhZ3MpOmZsYWdzO2lmKGZsYWdzJjY0KXttb2RlPXR5cGVvZiBtb2RlPT1cInVuZGVmaW5lZFwiPzQzODptb2RlO21vZGU9bW9kZSY0MDk1fDMyNzY4fWVsc2V7bW9kZT0wfXZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT1cIm9iamVjdFwiKXtub2RlPXBhdGh9ZWxzZXtwYXRoPVBBVEgubm9ybWFsaXplKHBhdGgpO3RyeXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiEoZmxhZ3MmMTMxMDcyKX0pO25vZGU9bG9va3VwLm5vZGV9Y2F0Y2goZSl7fX12YXIgY3JlYXRlZD1mYWxzZTtpZihmbGFncyY2NCl7aWYobm9kZSl7aWYoZmxhZ3MmMTI4KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyMCl9fWVsc2V7bm9kZT1GUy5ta25vZChwYXRoLG1vZGUsMCk7Y3JlYXRlZD10cnVlfX1pZighbm9kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfWlmKEZTLmlzQ2hyZGV2KG5vZGUubW9kZSkpe2ZsYWdzJj1+NTEyfWlmKGZsYWdzJjY1NTM2JiYhRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfWlmKCFjcmVhdGVkKXt2YXIgZXJyQ29kZT1GUy5tYXlPcGVuKG5vZGUsZmxhZ3MpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfX1pZihmbGFncyY1MTImJiFjcmVhdGVkKXtGUy50cnVuY2F0ZShub2RlLDApfWZsYWdzJj1+KDEyOHw1MTJ8MTMxMDcyKTt2YXIgc3RyZWFtPUZTLmNyZWF0ZVN0cmVhbSh7bm9kZSxwYXRoOkZTLmdldFBhdGgobm9kZSksZmxhZ3Msc2Vla2FibGU6dHJ1ZSxwb3NpdGlvbjowLHN0cmVhbV9vcHM6bm9kZS5zdHJlYW1fb3BzLHVuZ290dGVuOltdLGVycm9yOmZhbHNlfSk7aWYoc3RyZWFtLnN0cmVhbV9vcHMub3Blbil7c3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pfWlmKE1vZHVsZVtcImxvZ1JlYWRGaWxlc1wiXSYmIShmbGFncyYxKSl7aWYoIShwYXRoIGluIEZTLnJlYWRGaWxlcykpe0ZTLnJlYWRGaWxlc1twYXRoXT0xfX1yZXR1cm4gc3RyZWFtfSxjbG9zZShzdHJlYW0pe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKHN0cmVhbS5nZXRkZW50cylzdHJlYW0uZ2V0ZGVudHM9bnVsbDt0cnl7aWYoc3RyZWFtLnN0cmVhbV9vcHMuY2xvc2Upe3N0cmVhbS5zdHJlYW1fb3BzLmNsb3NlKHN0cmVhbSl9fWNhdGNoKGUpe3Rocm93IGV9ZmluYWxseXtGUy5jbG9zZVN0cmVhbShzdHJlYW0uZmQpfXN0cmVhbS5mZD1udWxsfSxpc0Nsb3NlZChzdHJlYW0pe3JldHVybiBzdHJlYW0uZmQ9PT1udWxsfSxsbHNlZWsoc3RyZWFtLG9mZnNldCx3aGVuY2Upe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKCFzdHJlYW0uc2Vla2FibGV8fCFzdHJlYW0uc3RyZWFtX29wcy5sbHNlZWspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDcwKX1pZih3aGVuY2UhPTAmJndoZW5jZSE9MSYmd2hlbmNlIT0yKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9c3RyZWFtLnBvc2l0aW9uPXN0cmVhbS5zdHJlYW1fb3BzLmxsc2VlayhzdHJlYW0sb2Zmc2V0LHdoZW5jZSk7c3RyZWFtLnVuZ290dGVuPVtdO3JldHVybiBzdHJlYW0ucG9zaXRpb259LHJlYWQoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXtpZihsZW5ndGg8MHx8cG9zaXRpb248MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfWlmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0xKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZihGUy5pc0RpcihzdHJlYW0ubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMzEpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5yZWFkKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIHNlZWtpbmc9dHlwZW9mIHBvc2l0aW9uIT1cInVuZGVmaW5lZFwiO2lmKCFzZWVraW5nKXtwb3NpdGlvbj1zdHJlYW0ucG9zaXRpb259ZWxzZSBpZighc3RyZWFtLnNlZWthYmxlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3MCl9dmFyIGJ5dGVzUmVhZD1zdHJlYW0uc3RyZWFtX29wcy5yZWFkKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbik7aWYoIXNlZWtpbmcpc3RyZWFtLnBvc2l0aW9uKz1ieXRlc1JlYWQ7cmV0dXJuIGJ5dGVzUmVhZH0sd3JpdGUoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bil7aWYobGVuZ3RoPDB8fHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZihGUy5pc0Nsb3NlZChzdHJlYW0pKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMxKX1pZighc3RyZWFtLnN0cmVhbV9vcHMud3JpdGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZihzdHJlYW0uc2Vla2FibGUmJnN0cmVhbS5mbGFncyYxMDI0KXtGUy5sbHNlZWsoc3RyZWFtLDAsMil9dmFyIHNlZWtpbmc9dHlwZW9mIHBvc2l0aW9uIT1cInVuZGVmaW5lZFwiO2lmKCFzZWVraW5nKXtwb3NpdGlvbj1zdHJlYW0ucG9zaXRpb259ZWxzZSBpZighc3RyZWFtLnNlZWthYmxlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3MCl9dmFyIGJ5dGVzV3JpdHRlbj1zdHJlYW0uc3RyZWFtX29wcy53cml0ZShzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24sY2FuT3duKTtpZighc2Vla2luZylzdHJlYW0ucG9zaXRpb24rPWJ5dGVzV3JpdHRlbjtyZXR1cm4gYnl0ZXNXcml0dGVufSxhbGxvY2F0ZShzdHJlYW0sb2Zmc2V0LGxlbmd0aCl7aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYob2Zmc2V0PDB8fGxlbmd0aDw9MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpJiYhRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQzKX1pZighc3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEzOCl9c3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUoc3RyZWFtLG9mZnNldCxsZW5ndGgpfSxtbWFwKHN0cmVhbSxsZW5ndGgscG9zaXRpb24scHJvdCxmbGFncyl7aWYoKHByb3QmMikhPT0wJiYoZmxhZ3MmMik9PT0wJiYoc3RyZWFtLmZsYWdzJjIwOTcxNTUpIT09Mil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMil9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTEpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDIpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5tbWFwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9aWYoIWxlbmd0aCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5tbWFwKHN0cmVhbSxsZW5ndGgscG9zaXRpb24scHJvdCxmbGFncyl9LG1zeW5jKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxtbWFwRmxhZ3Mpe2lmKCFzdHJlYW0uc3RyZWFtX29wcy5tc3luYyl7cmV0dXJuIDB9cmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLm1zeW5jKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxtbWFwRmxhZ3MpfSxpb2N0bChzdHJlYW0sY21kLGFyZyl7aWYoIXN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1OSl9cmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKHN0cmVhbSxjbWQsYXJnKX0scmVhZEZpbGUocGF0aCxvcHRzPXt9KXtvcHRzLmZsYWdzPW9wdHMuZmxhZ3N8fDA7b3B0cy5lbmNvZGluZz1vcHRzLmVuY29kaW5nfHxcImJpbmFyeVwiO2lmKG9wdHMuZW5jb2RpbmchPT1cInV0ZjhcIiYmb3B0cy5lbmNvZGluZyE9PVwiYmluYXJ5XCIpe3Rocm93IG5ldyBFcnJvcihgSW52YWxpZCBlbmNvZGluZyB0eXBlIFwiJHtvcHRzLmVuY29kaW5nfVwiYCl9dmFyIHJldDt2YXIgc3RyZWFtPUZTLm9wZW4ocGF0aCxvcHRzLmZsYWdzKTt2YXIgc3RhdD1GUy5zdGF0KHBhdGgpO3ZhciBsZW5ndGg9c3RhdC5zaXplO3ZhciBidWY9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtGUy5yZWFkKHN0cmVhbSxidWYsMCxsZW5ndGgsMCk7aWYob3B0cy5lbmNvZGluZz09PVwidXRmOFwiKXtyZXQ9VVRGOEFycmF5VG9TdHJpbmcoYnVmKX1lbHNlIGlmKG9wdHMuZW5jb2Rpbmc9PT1cImJpbmFyeVwiKXtyZXQ9YnVmfUZTLmNsb3NlKHN0cmVhbSk7cmV0dXJuIHJldH0sd3JpdGVGaWxlKHBhdGgsZGF0YSxvcHRzPXt9KXtvcHRzLmZsYWdzPW9wdHMuZmxhZ3N8fDU3Nzt2YXIgc3RyZWFtPUZTLm9wZW4ocGF0aCxvcHRzLmZsYWdzLG9wdHMubW9kZSk7aWYodHlwZW9mIGRhdGE9PVwic3RyaW5nXCIpe3ZhciBidWY9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoQnl0ZXNVVEY4KGRhdGEpKzEpO3ZhciBhY3R1YWxOdW1CeXRlcz1zdHJpbmdUb1VURjhBcnJheShkYXRhLGJ1ZiwwLGJ1Zi5sZW5ndGgpO0ZTLndyaXRlKHN0cmVhbSxidWYsMCxhY3R1YWxOdW1CeXRlcyx1bmRlZmluZWQsb3B0cy5jYW5Pd24pfWVsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKXtGUy53cml0ZShzdHJlYW0sZGF0YSwwLGRhdGEuYnl0ZUxlbmd0aCx1bmRlZmluZWQsb3B0cy5jYW5Pd24pfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlXCIpfUZTLmNsb3NlKHN0cmVhbSl9LGN3ZDooKT0+RlMuY3VycmVudFBhdGgsY2hkaXIocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7aWYobG9va3VwLm5vZGU9PT1udWxsKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoIUZTLmlzRGlyKGxvb2t1cC5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9dmFyIGVyckNvZGU9RlMubm9kZVBlcm1pc3Npb25zKGxvb2t1cC5ub2RlLFwieFwiKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1GUy5jdXJyZW50UGF0aD1sb29rdXAucGF0aH0sY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzKCl7RlMubWtkaXIoXCIvdG1wXCIpO0ZTLm1rZGlyKFwiL2hvbWVcIik7RlMubWtkaXIoXCIvaG9tZS93ZWJfdXNlclwiKX0sY3JlYXRlRGVmYXVsdERldmljZXMoKXtGUy5ta2RpcihcIi9kZXZcIik7RlMucmVnaXN0ZXJEZXZpY2UoRlMubWFrZWRldigxLDMpLHtyZWFkOigpPT4wLHdyaXRlOihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKT0+bGVuZ3RofSk7RlMubWtkZXYoXCIvZGV2L251bGxcIixGUy5tYWtlZGV2KDEsMykpO1RUWS5yZWdpc3RlcihGUy5tYWtlZGV2KDUsMCksVFRZLmRlZmF1bHRfdHR5X29wcyk7VFRZLnJlZ2lzdGVyKEZTLm1ha2VkZXYoNiwwKSxUVFkuZGVmYXVsdF90dHkxX29wcyk7RlMubWtkZXYoXCIvZGV2L3R0eVwiLEZTLm1ha2VkZXYoNSwwKSk7RlMubWtkZXYoXCIvZGV2L3R0eTFcIixGUy5tYWtlZGV2KDYsMCkpO3ZhciByYW5kb21CdWZmZXI9bmV3IFVpbnQ4QXJyYXkoMTAyNCkscmFuZG9tTGVmdD0wO3ZhciByYW5kb21CeXRlPSgpPT57aWYocmFuZG9tTGVmdD09PTApe3JhbmRvbUxlZnQ9cmFuZG9tRmlsbChyYW5kb21CdWZmZXIpLmJ5dGVMZW5ndGh9cmV0dXJuIHJhbmRvbUJ1ZmZlclstLXJhbmRvbUxlZnRdfTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJyYW5kb21cIixyYW5kb21CeXRlKTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJ1cmFuZG9tXCIscmFuZG9tQnl0ZSk7RlMubWtkaXIoXCIvZGV2L3NobVwiKTtGUy5ta2RpcihcIi9kZXYvc2htL3RtcFwiKX0sY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzKCl7RlMubWtkaXIoXCIvcHJvY1wiKTt2YXIgcHJvY19zZWxmPUZTLm1rZGlyKFwiL3Byb2Mvc2VsZlwiKTtGUy5ta2RpcihcIi9wcm9jL3NlbGYvZmRcIik7RlMubW91bnQoe21vdW50KCl7dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwcm9jX3NlbGYsXCJmZFwiLDE2Mzg0fDUxMSw3Myk7bm9kZS5ub2RlX29wcz17bG9va3VwKHBhcmVudCxuYW1lKXt2YXIgZmQ9K25hbWU7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW1DaGVja2VkKGZkKTt2YXIgcmV0PXtwYXJlbnQ6bnVsbCxtb3VudDp7bW91bnRwb2ludDpcImZha2VcIn0sbm9kZV9vcHM6e3JlYWRsaW5rOigpPT5zdHJlYW0ucGF0aH19O3JldC5wYXJlbnQ9cmV0O3JldHVybiByZXR9fTtyZXR1cm4gbm9kZX19LHt9LFwiL3Byb2Mvc2VsZi9mZFwiKX0sY3JlYXRlU3RhbmRhcmRTdHJlYW1zKGlucHV0LG91dHB1dCxlcnJvcil7aWYoaW5wdXQpe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZGluXCIsaW5wdXQpfWVsc2V7RlMuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZGluXCIpfWlmKG91dHB1dCl7RlMuY3JlYXRlRGV2aWNlKFwiL2RldlwiLFwic3Rkb3V0XCIsbnVsbCxvdXRwdXQpfWVsc2V7RlMuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZG91dFwiKX1pZihlcnJvcil7RlMuY3JlYXRlRGV2aWNlKFwiL2RldlwiLFwic3RkZXJyXCIsbnVsbCxlcnJvcil9ZWxzZXtGUy5zeW1saW5rKFwiL2Rldi90dHkxXCIsXCIvZGV2L3N0ZGVyclwiKX12YXIgc3RkaW49RlMub3BlbihcIi9kZXYvc3RkaW5cIiwwKTt2YXIgc3Rkb3V0PUZTLm9wZW4oXCIvZGV2L3N0ZG91dFwiLDEpO3ZhciBzdGRlcnI9RlMub3BlbihcIi9kZXYvc3RkZXJyXCIsMSl9LHN0YXRpY0luaXQoKXtbNDRdLmZvckVhY2goY29kZT0+e0ZTLmdlbmVyaWNFcnJvcnNbY29kZV09bmV3IEZTLkVycm5vRXJyb3IoY29kZSk7RlMuZ2VuZXJpY0Vycm9yc1tjb2RlXS5zdGFjaz1cIjxnZW5lcmljIGVycm9yLCBubyBzdGFjaz5cIn0pO0ZTLm5hbWVUYWJsZT1uZXcgQXJyYXkoNDA5Nik7RlMubW91bnQoTUVNRlMse30sXCIvXCIpO0ZTLmNyZWF0ZURlZmF1bHREaXJlY3RvcmllcygpO0ZTLmNyZWF0ZURlZmF1bHREZXZpY2VzKCk7RlMuY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzKCk7RlMuZmlsZXN5c3RlbXM9e01FTUZTfX0saW5pdChpbnB1dCxvdXRwdXQsZXJyb3Ipe0ZTLmluaXRpYWxpemVkPXRydWU7aW5wdXQ/Pz1Nb2R1bGVbXCJzdGRpblwiXTtvdXRwdXQ/Pz1Nb2R1bGVbXCJzdGRvdXRcIl07ZXJyb3I/Pz1Nb2R1bGVbXCJzdGRlcnJcIl07RlMuY3JlYXRlU3RhbmRhcmRTdHJlYW1zKGlucHV0LG91dHB1dCxlcnJvcil9LHF1aXQoKXtGUy5pbml0aWFsaXplZD1mYWxzZTtmb3IodmFyIGk9MDtpPEZTLnN0cmVhbXMubGVuZ3RoO2krKyl7dmFyIHN0cmVhbT1GUy5zdHJlYW1zW2ldO2lmKCFzdHJlYW0pe2NvbnRpbnVlfUZTLmNsb3NlKHN0cmVhbSl9fSxmaW5kT2JqZWN0KHBhdGgsZG9udFJlc29sdmVMYXN0TGluayl7dmFyIHJldD1GUy5hbmFseXplUGF0aChwYXRoLGRvbnRSZXNvbHZlTGFzdExpbmspO2lmKCFyZXQuZXhpc3RzKXtyZXR1cm4gbnVsbH1yZXR1cm4gcmV0Lm9iamVjdH0sYW5hbHl6ZVBhdGgocGF0aCxkb250UmVzb2x2ZUxhc3RMaW5rKXt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udFJlc29sdmVMYXN0TGlua30pO3BhdGg9bG9va3VwLnBhdGh9Y2F0Y2goZSl7fXZhciByZXQ9e2lzUm9vdDpmYWxzZSxleGlzdHM6ZmFsc2UsZXJyb3I6MCxuYW1lOm51bGwscGF0aDpudWxsLG9iamVjdDpudWxsLHBhcmVudEV4aXN0czpmYWxzZSxwYXJlbnRQYXRoOm51bGwscGFyZW50T2JqZWN0Om51bGx9O3RyeXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTtyZXQucGFyZW50RXhpc3RzPXRydWU7cmV0LnBhcmVudFBhdGg9bG9va3VwLnBhdGg7cmV0LnBhcmVudE9iamVjdD1sb29rdXAubm9kZTtyZXQubmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2xvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udFJlc29sdmVMYXN0TGlua30pO3JldC5leGlzdHM9dHJ1ZTtyZXQucGF0aD1sb29rdXAucGF0aDtyZXQub2JqZWN0PWxvb2t1cC5ub2RlO3JldC5uYW1lPWxvb2t1cC5ub2RlLm5hbWU7cmV0LmlzUm9vdD1sb29rdXAucGF0aD09PVwiL1wifWNhdGNoKGUpe3JldC5lcnJvcj1lLmVycm5vfXJldHVybiByZXR9LGNyZWF0ZVBhdGgocGFyZW50LHBhdGgsY2FuUmVhZCxjYW5Xcml0ZSl7cGFyZW50PXR5cGVvZiBwYXJlbnQ9PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KTt2YXIgcGFydHM9cGF0aC5zcGxpdChcIi9cIikucmV2ZXJzZSgpO3doaWxlKHBhcnRzLmxlbmd0aCl7dmFyIHBhcnQ9cGFydHMucG9wKCk7aWYoIXBhcnQpY29udGludWU7dmFyIGN1cnJlbnQ9UEFUSC5qb2luMihwYXJlbnQscGFydCk7dHJ5e0ZTLm1rZGlyKGN1cnJlbnQpfWNhdGNoKGUpe31wYXJlbnQ9Y3VycmVudH1yZXR1cm4gY3VycmVudH0sY3JlYXRlRmlsZShwYXJlbnQsbmFtZSxwcm9wZXJ0aWVzLGNhblJlYWQsY2FuV3JpdGUpe3ZhciBwYXRoPVBBVEguam9pbjIodHlwZW9mIHBhcmVudD09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpLG5hbWUpO3ZhciBtb2RlPUZTX2dldE1vZGUoY2FuUmVhZCxjYW5Xcml0ZSk7cmV0dXJuIEZTLmNyZWF0ZShwYXRoLG1vZGUpfSxjcmVhdGVEYXRhRmlsZShwYXJlbnQsbmFtZSxkYXRhLGNhblJlYWQsY2FuV3JpdGUsY2FuT3duKXt2YXIgcGF0aD1uYW1lO2lmKHBhcmVudCl7cGFyZW50PXR5cGVvZiBwYXJlbnQ9PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KTtwYXRoPW5hbWU/UEFUSC5qb2luMihwYXJlbnQsbmFtZSk6cGFyZW50fXZhciBtb2RlPUZTX2dldE1vZGUoY2FuUmVhZCxjYW5Xcml0ZSk7dmFyIG5vZGU9RlMuY3JlYXRlKHBhdGgsbW9kZSk7aWYoZGF0YSl7aWYodHlwZW9mIGRhdGE9PVwic3RyaW5nXCIpe3ZhciBhcnI9bmV3IEFycmF5KGRhdGEubGVuZ3RoKTtmb3IodmFyIGk9MCxsZW49ZGF0YS5sZW5ndGg7aTxsZW47KytpKWFycltpXT1kYXRhLmNoYXJDb2RlQXQoaSk7ZGF0YT1hcnJ9RlMuY2htb2Qobm9kZSxtb2RlfDE0Nik7dmFyIHN0cmVhbT1GUy5vcGVuKG5vZGUsNTc3KTtGUy53cml0ZShzdHJlYW0sZGF0YSwwLGRhdGEubGVuZ3RoLDAsY2FuT3duKTtGUy5jbG9zZShzdHJlYW0pO0ZTLmNobW9kKG5vZGUsbW9kZSl9fSxjcmVhdGVEZXZpY2UocGFyZW50LG5hbWUsaW5wdXQsb3V0cHV0KXt2YXIgcGF0aD1QQVRILmpvaW4yKHR5cGVvZiBwYXJlbnQ9PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTt2YXIgbW9kZT1GU19nZXRNb2RlKCEhaW5wdXQsISFvdXRwdXQpO0ZTLmNyZWF0ZURldmljZS5tYWpvcj8/PTY0O3ZhciBkZXY9RlMubWFrZWRldihGUy5jcmVhdGVEZXZpY2UubWFqb3IrKywwKTtGUy5yZWdpc3RlckRldmljZShkZXYse29wZW4oc3RyZWFtKXtzdHJlYW0uc2Vla2FibGU9ZmFsc2V9LGNsb3NlKHN0cmVhbSl7aWYob3V0cHV0Py5idWZmZXI/Lmxlbmd0aCl7b3V0cHV0KDEwKX19LHJlYWQoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PWlucHV0KCl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfWlmKHJlc3VsdD09PXVuZGVmaW5lZCYmYnl0ZXNSZWFkPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNil9aWYocmVzdWx0PT09bnVsbHx8cmVzdWx0PT09dW5kZWZpbmVkKWJyZWFrO2J5dGVzUmVhZCsrO2J1ZmZlcltvZmZzZXQraV09cmVzdWx0fWlmKGJ5dGVzUmVhZCl7c3RyZWFtLm5vZGUudGltZXN0YW1wPURhdGUubm93KCl9cmV0dXJuIGJ5dGVzUmVhZH0sd3JpdGUoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXt0cnl7b3V0cHV0KGJ1ZmZlcltvZmZzZXQraV0pfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX19aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX19KTtyZXR1cm4gRlMubWtkZXYocGF0aCxtb2RlLGRldil9LGZvcmNlTG9hZEZpbGUob2JqKXtpZihvYmouaXNEZXZpY2V8fG9iai5pc0ZvbGRlcnx8b2JqLmxpbmt8fG9iai5jb250ZW50cylyZXR1cm4gdHJ1ZTtpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QhPVwidW5kZWZpbmVkXCIpe3Rocm93IG5ldyBFcnJvcihcIkxhenkgbG9hZGluZyBzaG91bGQgaGF2ZSBiZWVuIHBlcmZvcm1lZCAoY29udGVudHMgc2V0KSBpbiBjcmVhdGVMYXp5RmlsZSwgYnV0IGl0IHdhcyBub3QuIExhenkgbG9hZGluZyBvbmx5IHdvcmtzIGluIHdlYiB3b3JrZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2Mgb24gdGhlIG1haW4gdGhyZWFkLlwiKX1lbHNle3RyeXtvYmouY29udGVudHM9cmVhZEJpbmFyeShvYmoudXJsKTtvYmoudXNlZEJ5dGVzPW9iai5jb250ZW50cy5sZW5ndGh9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfX19LGNyZWF0ZUxhenlGaWxlKHBhcmVudCxuYW1lLHVybCxjYW5SZWFkLGNhbldyaXRlKXtjbGFzcyBMYXp5VWludDhBcnJheXtjb25zdHJ1Y3Rvcigpe3RoaXMubGVuZ3RoS25vd249ZmFsc2U7dGhpcy5jaHVua3M9W119Z2V0KGlkeCl7aWYoaWR4PnRoaXMubGVuZ3RoLTF8fGlkeDwwKXtyZXR1cm4gdW5kZWZpbmVkfXZhciBjaHVua09mZnNldD1pZHgldGhpcy5jaHVua1NpemU7dmFyIGNodW5rTnVtPWlkeC90aGlzLmNodW5rU2l6ZXwwO3JldHVybiB0aGlzLmdldHRlcihjaHVua051bSlbY2h1bmtPZmZzZXRdfXNldERhdGFHZXR0ZXIoZ2V0dGVyKXt0aGlzLmdldHRlcj1nZXR0ZXJ9Y2FjaGVMZW5ndGgoKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkhFQURcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO2lmKCEoeGhyLnN0YXR1cz49MjAwJiZ4aHIuc3RhdHVzPDMwMHx8eGhyLnN0YXR1cz09PTMwNCkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgbG9hZCBcIit1cmwrXCIuIFN0YXR1czogXCIreGhyLnN0YXR1cyk7dmFyIGRhdGFsZW5ndGg9TnVtYmVyKHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtbGVuZ3RoXCIpKTt2YXIgaGVhZGVyO3ZhciBoYXNCeXRlU2VydmluZz0oaGVhZGVyPXhoci5nZXRSZXNwb25zZUhlYWRlcihcIkFjY2VwdC1SYW5nZXNcIikpJiZoZWFkZXI9PT1cImJ5dGVzXCI7dmFyIHVzZXNHemlwPShoZWFkZXI9eGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSkmJmhlYWRlcj09PVwiZ3ppcFwiO3ZhciBjaHVua1NpemU9MTAyNCoxMDI0O2lmKCFoYXNCeXRlU2VydmluZyljaHVua1NpemU9ZGF0YWxlbmd0aDt2YXIgZG9YSFI9KGZyb20sdG8pPT57aWYoZnJvbT50byl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJhbmdlIChcIitmcm9tK1wiLCBcIit0bytcIikgb3Igbm8gYnl0ZXMgcmVxdWVzdGVkIVwiKTtpZih0bz5kYXRhbGVuZ3RoLTEpdGhyb3cgbmV3IEVycm9yKFwib25seSBcIitkYXRhbGVuZ3RoK1wiIGJ5dGVzIGF2YWlsYWJsZSEgcHJvZ3JhbW1lciBlcnJvciFcIik7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO2lmKGRhdGFsZW5ndGghPT1jaHVua1NpemUpeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrZnJvbStcIi1cIit0byk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7aWYoeGhyLm92ZXJyaWRlTWltZVR5cGUpe3hoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKX14aHIuc2VuZChudWxsKTtpZighKHhoci5zdGF0dXM+PTIwMCYmeGhyLnN0YXR1czwzMDB8fHhoci5zdGF0dXM9PT0zMDQpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGxvYWQgXCIrdXJsK1wiLiBTdGF0dXM6IFwiK3hoci5zdGF0dXMpO2lmKHhoci5yZXNwb25zZSE9PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZXx8W10pfXJldHVybiBpbnRBcnJheUZyb21TdHJpbmcoeGhyLnJlc3BvbnNlVGV4dHx8XCJcIix0cnVlKX07dmFyIGxhenlBcnJheT10aGlzO2xhenlBcnJheS5zZXREYXRhR2V0dGVyKGNodW5rTnVtPT57dmFyIHN0YXJ0PWNodW5rTnVtKmNodW5rU2l6ZTt2YXIgZW5kPShjaHVua051bSsxKSpjaHVua1NpemUtMTtlbmQ9TWF0aC5taW4oZW5kLGRhdGFsZW5ndGgtMSk7aWYodHlwZW9mIGxhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dPT1cInVuZGVmaW5lZFwiKXtsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT1kb1hIUihzdGFydCxlbmQpfWlmKHR5cGVvZiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT09XCJ1bmRlZmluZWRcIil0aHJvdyBuZXcgRXJyb3IoXCJkb1hIUiBmYWlsZWQhXCIpO3JldHVybiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXX0pO2lmKHVzZXNHemlwfHwhZGF0YWxlbmd0aCl7Y2h1bmtTaXplPWRhdGFsZW5ndGg9MTtkYXRhbGVuZ3RoPXRoaXMuZ2V0dGVyKDApLmxlbmd0aDtjaHVua1NpemU9ZGF0YWxlbmd0aDtvdXQoXCJMYXp5RmlsZXMgb24gZ3ppcCBmb3JjZXMgZG93bmxvYWQgb2YgdGhlIHdob2xlIGZpbGUgd2hlbiBsZW5ndGggaXMgYWNjZXNzZWRcIil9dGhpcy5fbGVuZ3RoPWRhdGFsZW5ndGg7dGhpcy5fY2h1bmtTaXplPWNodW5rU2l6ZTt0aGlzLmxlbmd0aEtub3duPXRydWV9Z2V0IGxlbmd0aCgpe2lmKCF0aGlzLmxlbmd0aEtub3duKXt0aGlzLmNhY2hlTGVuZ3RoKCl9cmV0dXJuIHRoaXMuX2xlbmd0aH1nZXQgY2h1bmtTaXplKCl7aWYoIXRoaXMubGVuZ3RoS25vd24pe3RoaXMuY2FjaGVMZW5ndGgoKX1yZXR1cm4gdGhpcy5fY2h1bmtTaXplfX1pZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QhPVwidW5kZWZpbmVkXCIpe2lmKCFFTlZJUk9OTUVOVF9JU19XT1JLRVIpdGhyb3dcIkNhbm5vdCBkbyBzeW5jaHJvbm91cyBiaW5hcnkgWEhScyBvdXRzaWRlIHdlYndvcmtlcnMgaW4gbW9kZXJuIGJyb3dzZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2NcIjt2YXIgbGF6eUFycmF5PW5ldyBMYXp5VWludDhBcnJheTt2YXIgcHJvcGVydGllcz17aXNEZXZpY2U6ZmFsc2UsY29udGVudHM6bGF6eUFycmF5fX1lbHNle3ZhciBwcm9wZXJ0aWVzPXtpc0RldmljZTpmYWxzZSx1cmx9fXZhciBub2RlPUZTLmNyZWF0ZUZpbGUocGFyZW50LG5hbWUscHJvcGVydGllcyxjYW5SZWFkLGNhbldyaXRlKTtpZihwcm9wZXJ0aWVzLmNvbnRlbnRzKXtub2RlLmNvbnRlbnRzPXByb3BlcnRpZXMuY29udGVudHN9ZWxzZSBpZihwcm9wZXJ0aWVzLnVybCl7bm9kZS5jb250ZW50cz1udWxsO25vZGUudXJsPXByb3BlcnRpZXMudXJsfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG5vZGUse3VzZWRCeXRlczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGVudHMubGVuZ3RofX19KTt2YXIgc3RyZWFtX29wcz17fTt2YXIga2V5cz1PYmplY3Qua2V5cyhub2RlLnN0cmVhbV9vcHMpO2tleXMuZm9yRWFjaChrZXk9Pnt2YXIgZm49bm9kZS5zdHJlYW1fb3BzW2tleV07c3RyZWFtX29wc1trZXldPSguLi5hcmdzKT0+e0ZTLmZvcmNlTG9hZEZpbGUobm9kZSk7cmV0dXJuIGZuKC4uLmFyZ3MpfX0pO2Z1bmN0aW9uIHdyaXRlQ2h1bmtzKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbil7dmFyIGNvbnRlbnRzPXN0cmVhbS5ub2RlLmNvbnRlbnRzO2lmKHBvc2l0aW9uPj1jb250ZW50cy5sZW5ndGgpcmV0dXJuIDA7dmFyIHNpemU9TWF0aC5taW4oY29udGVudHMubGVuZ3RoLXBvc2l0aW9uLGxlbmd0aCk7aWYoY29udGVudHMuc2xpY2Upe2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe2J1ZmZlcltvZmZzZXQraV09Y29udGVudHNbcG9zaXRpb24raV19fWVsc2V7Zm9yKHZhciBpPTA7aTxzaXplO2krKyl7YnVmZmVyW29mZnNldCtpXT1jb250ZW50cy5nZXQocG9zaXRpb24raSl9fXJldHVybiBzaXplfXN0cmVhbV9vcHMucmVhZD0oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKT0+e0ZTLmZvcmNlTG9hZEZpbGUobm9kZSk7cmV0dXJuIHdyaXRlQ2h1bmtzKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbil9O3N0cmVhbV9vcHMubW1hcD0oc3RyZWFtLGxlbmd0aCxwb3NpdGlvbixwcm90LGZsYWdzKT0+e0ZTLmZvcmNlTG9hZEZpbGUobm9kZSk7dmFyIHB0cj1tbWFwQWxsb2MobGVuZ3RoKTtpZighcHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0OCl9d3JpdGVDaHVua3Moc3RyZWFtLEhFQVA4LHB0cixsZW5ndGgscG9zaXRpb24pO3JldHVybntwdHIsYWxsb2NhdGVkOnRydWV9fTtub2RlLnN0cmVhbV9vcHM9c3RyZWFtX29wcztyZXR1cm4gbm9kZX19O3ZhciBTWVNDQUxMUz17REVGQVVMVF9QT0xMTUFTSzo1LGNhbGN1bGF0ZUF0KGRpcmZkLHBhdGgsYWxsb3dFbXB0eSl7aWYoUEFUSC5pc0FicyhwYXRoKSl7cmV0dXJuIHBhdGh9dmFyIGRpcjtpZihkaXJmZD09PS0xMDApe2Rpcj1GUy5jd2QoKX1lbHNle3ZhciBkaXJzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGRpcmZkKTtkaXI9ZGlyc3RyZWFtLnBhdGh9aWYocGF0aC5sZW5ndGg9PTApe2lmKCFhbGxvd0VtcHR5KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9cmV0dXJuIGRpcn1yZXR1cm4gUEFUSC5qb2luMihkaXIscGF0aCl9LGRvU3RhdChmdW5jLHBhdGgsYnVmKXt2YXIgc3RhdD1mdW5jKHBhdGgpO0hFQVAzMltidWY+PjJdPXN0YXQuZGV2O0hFQVAzMltidWYrND4+Ml09c3RhdC5tb2RlO0hFQVBVMzJbYnVmKzg+PjJdPXN0YXQubmxpbms7SEVBUDMyW2J1ZisxMj4+Ml09c3RhdC51aWQ7SEVBUDMyW2J1ZisxNj4+Ml09c3RhdC5naWQ7SEVBUDMyW2J1ZisyMD4+Ml09c3RhdC5yZGV2O3RlbXBJNjQ9W3N0YXQuc2l6ZT4+PjAsKHRlbXBEb3VibGU9c3RhdC5zaXplLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/K01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW2J1ZisyND4+Ml09dGVtcEk2NFswXSxIRUFQMzJbYnVmKzI4Pj4yXT10ZW1wSTY0WzFdO0hFQVAzMltidWYrMzI+PjJdPTQwOTY7SEVBUDMyW2J1ZiszNj4+Ml09c3RhdC5ibG9ja3M7dmFyIGF0aW1lPXN0YXQuYXRpbWUuZ2V0VGltZSgpO3ZhciBtdGltZT1zdGF0Lm10aW1lLmdldFRpbWUoKTt2YXIgY3RpbWU9c3RhdC5jdGltZS5nZXRUaW1lKCk7dGVtcEk2ND1bTWF0aC5mbG9vcihhdGltZS8xZTMpPj4+MCwodGVtcERvdWJsZT1NYXRoLmZsb29yKGF0aW1lLzFlMyksK01hdGguYWJzKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8rTWF0aC5mbG9vcih0ZW1wRG91YmxlLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUtKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbYnVmKzQwPj4yXT10ZW1wSTY0WzBdLEhFQVAzMltidWYrNDQ+PjJdPXRlbXBJNjRbMV07SEVBUFUzMltidWYrNDg+PjJdPWF0aW1lJTFlMyoxZTMqMWUzO3RlbXBJNjQ9W01hdGguZmxvb3IobXRpbWUvMWUzKT4+PjAsKHRlbXBEb3VibGU9TWF0aC5mbG9vcihtdGltZS8xZTMpLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/K01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW2J1Zis1Nj4+Ml09dGVtcEk2NFswXSxIRUFQMzJbYnVmKzYwPj4yXT10ZW1wSTY0WzFdO0hFQVBVMzJbYnVmKzY0Pj4yXT1tdGltZSUxZTMqMWUzKjFlMzt0ZW1wSTY0PVtNYXRoLmZsb29yKGN0aW1lLzFlMyk+Pj4wLCh0ZW1wRG91YmxlPU1hdGguZmxvb3IoY3RpbWUvMWUzKSwrTWF0aC5hYnModGVtcERvdWJsZSk+PTE/dGVtcERvdWJsZT4wPytNYXRoLmZsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5Nik+Pj4wOn5+K01hdGguY2VpbCgodGVtcERvdWJsZS0rKH5+dGVtcERvdWJsZT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEhFQVAzMltidWYrNzI+PjJdPXRlbXBJNjRbMF0sSEVBUDMyW2J1Zis3Nj4+Ml09dGVtcEk2NFsxXTtIRUFQVTMyW2J1Zis4MD4+Ml09Y3RpbWUlMWUzKjFlMyoxZTM7dGVtcEk2ND1bc3RhdC5pbm8+Pj4wLCh0ZW1wRG91YmxlPXN0YXQuaW5vLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/K01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW2J1Zis4OD4+Ml09dGVtcEk2NFswXSxIRUFQMzJbYnVmKzkyPj4yXT10ZW1wSTY0WzFdO3JldHVybiAwfSxkb01zeW5jKGFkZHIsc3RyZWFtLGxlbixmbGFncyxvZmZzZXQpe2lmKCFGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQzKX1pZihmbGFncyYyKXtyZXR1cm4gMH12YXIgYnVmZmVyPUhFQVBVOC5zbGljZShhZGRyLGFkZHIrbGVuKTtGUy5tc3luYyhzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW4sZmxhZ3MpfSxnZXRTdHJlYW1Gcm9tRkQoZmQpe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtQ2hlY2tlZChmZCk7cmV0dXJuIHN0cmVhbX0sdmFyYXJnczp1bmRlZmluZWQsZ2V0U3RyKHB0cil7dmFyIHJldD1VVEY4VG9TdHJpbmcocHRyKTtyZXR1cm4gcmV0fX07ZnVuY3Rpb24gX19fc3lzY2FsbF9mY250bDY0KGZkLGNtZCx2YXJhcmdzKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBwcm94eVRvTWFpblRocmVhZCgzLDAsMSxmZCxjbWQsdmFyYXJncyk7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7c3dpdGNoKGNtZCl7Y2FzZSAwOnt2YXIgYXJnPXN5c2NhbGxHZXRWYXJhcmdJKCk7aWYoYXJnPDApe3JldHVybi0yOH13aGlsZShGUy5zdHJlYW1zW2FyZ10pe2FyZysrfXZhciBuZXdTdHJlYW07bmV3U3RyZWFtPUZTLmR1cFN0cmVhbShzdHJlYW0sYXJnKTtyZXR1cm4gbmV3U3RyZWFtLmZkfWNhc2UgMTpjYXNlIDI6cmV0dXJuIDA7Y2FzZSAzOnJldHVybiBzdHJlYW0uZmxhZ3M7Y2FzZSA0Ont2YXIgYXJnPXN5c2NhbGxHZXRWYXJhcmdJKCk7c3RyZWFtLmZsYWdzfD1hcmc7cmV0dXJuIDB9Y2FzZSAxMjp7dmFyIGFyZz1zeXNjYWxsR2V0VmFyYXJnUCgpO3ZhciBvZmZzZXQ9MDtIRUFQMTZbYXJnK29mZnNldD4+MV09MjtyZXR1cm4gMH1jYXNlIDEzOmNhc2UgMTQ6cmV0dXJuIDB9cmV0dXJuLTI4fWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09XCJ1bmRlZmluZWRcInx8IShlLm5hbWU9PT1cIkVycm5vRXJyb3JcIikpdGhyb3cgZTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fc3lzY2FsbF9pb2N0bChmZCxvcCx2YXJhcmdzKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBwcm94eVRvTWFpblRocmVhZCg0LDAsMSxmZCxvcCx2YXJhcmdzKTtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtzd2l0Y2gob3Ape2Nhc2UgMjE1MDk6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4gMH1jYXNlIDIxNTA1OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7aWYoc3RyZWFtLnR0eS5vcHMuaW9jdGxfdGNnZXRzKXt2YXIgdGVybWlvcz1zdHJlYW0udHR5Lm9wcy5pb2N0bF90Y2dldHMoc3RyZWFtKTt2YXIgYXJncD1zeXNjYWxsR2V0VmFyYXJnUCgpO0hFQVAzMlthcmdwPj4yXT10ZXJtaW9zLmNfaWZsYWd8fDA7SEVBUDMyW2FyZ3ArND4+Ml09dGVybWlvcy5jX29mbGFnfHwwO0hFQVAzMlthcmdwKzg+PjJdPXRlcm1pb3MuY19jZmxhZ3x8MDtIRUFQMzJbYXJncCsxMj4+Ml09dGVybWlvcy5jX2xmbGFnfHwwO2Zvcih2YXIgaT0wO2k8MzI7aSsrKXtIRUFQOFthcmdwK2krMTddPXRlcm1pb3MuY19jY1tpXXx8MH1yZXR1cm4gMH1yZXR1cm4gMH1jYXNlIDIxNTEwOmNhc2UgMjE1MTE6Y2FzZSAyMTUxMjp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybiAwfWNhc2UgMjE1MDY6Y2FzZSAyMTUwNzpjYXNlIDIxNTA4OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7aWYoc3RyZWFtLnR0eS5vcHMuaW9jdGxfdGNzZXRzKXt2YXIgYXJncD1zeXNjYWxsR2V0VmFyYXJnUCgpO3ZhciBjX2lmbGFnPUhFQVAzMlthcmdwPj4yXTt2YXIgY19vZmxhZz1IRUFQMzJbYXJncCs0Pj4yXTt2YXIgY19jZmxhZz1IRUFQMzJbYXJncCs4Pj4yXTt2YXIgY19sZmxhZz1IRUFQMzJbYXJncCsxMj4+Ml07dmFyIGNfY2M9W107Zm9yKHZhciBpPTA7aTwzMjtpKyspe2NfY2MucHVzaChIRUFQOFthcmdwK2krMTddKX1yZXR1cm4gc3RyZWFtLnR0eS5vcHMuaW9jdGxfdGNzZXRzKHN0cmVhbS50dHksb3Ase2NfaWZsYWcsY19vZmxhZyxjX2NmbGFnLGNfbGZsYWcsY19jY30pfXJldHVybiAwfWNhc2UgMjE1MTk6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTt2YXIgYXJncD1zeXNjYWxsR2V0VmFyYXJnUCgpO0hFQVAzMlthcmdwPj4yXT0wO3JldHVybiAwfWNhc2UgMjE1MjA6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4tMjh9Y2FzZSAyMTUzMTp7dmFyIGFyZ3A9c3lzY2FsbEdldFZhcmFyZ1AoKTtyZXR1cm4gRlMuaW9jdGwoc3RyZWFtLG9wLGFyZ3ApfWNhc2UgMjE1MjM6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtpZihzdHJlYW0udHR5Lm9wcy5pb2N0bF90aW9jZ3dpbnN6KXt2YXIgd2luc2l6ZT1zdHJlYW0udHR5Lm9wcy5pb2N0bF90aW9jZ3dpbnN6KHN0cmVhbS50dHkpO3ZhciBhcmdwPXN5c2NhbGxHZXRWYXJhcmdQKCk7SEVBUDE2W2FyZ3A+PjFdPXdpbnNpemVbMF07SEVBUDE2W2FyZ3ArMj4+MV09d2luc2l6ZVsxXX1yZXR1cm4gMH1jYXNlIDIxNTI0OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7cmV0dXJuIDB9Y2FzZSAyMTUxNTp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybiAwfWRlZmF1bHQ6cmV0dXJuLTI4fX1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZS5uYW1lPT09XCJFcnJub0Vycm9yXCIpKXRocm93IGU7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c2NhbGxfb3BlbmF0KGRpcmZkLHBhdGgsZmxhZ3MsdmFyYXJncyl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoNSwwLDEsZGlyZmQscGF0aCxmbGFncyx2YXJhcmdzKTtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3BhdGg9U1lTQ0FMTFMuZ2V0U3RyKHBhdGgpO3BhdGg9U1lTQ0FMTFMuY2FsY3VsYXRlQXQoZGlyZmQscGF0aCk7dmFyIG1vZGU9dmFyYXJncz9zeXNjYWxsR2V0VmFyYXJnSSgpOjA7cmV0dXJuIEZTLm9wZW4ocGF0aCxmbGFncyxtb2RlKS5mZH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZS5uYW1lPT09XCJFcnJub0Vycm9yXCIpKXRocm93IGU7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c2NhbGxfcm1kaXIocGF0aCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoNiwwLDEscGF0aCk7dHJ5e3BhdGg9U1lTQ0FMTFMuZ2V0U3RyKHBhdGgpO0ZTLnJtZGlyKHBhdGgpO3JldHVybiAwfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09XCJ1bmRlZmluZWRcInx8IShlLm5hbWU9PT1cIkVycm5vRXJyb3JcIikpdGhyb3cgZTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fc3lzY2FsbF91bmxpbmthdChkaXJmZCxwYXRoLGZsYWdzKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBwcm94eVRvTWFpblRocmVhZCg3LDAsMSxkaXJmZCxwYXRoLGZsYWdzKTt0cnl7cGF0aD1TWVNDQUxMUy5nZXRTdHIocGF0aCk7cGF0aD1TWVNDQUxMUy5jYWxjdWxhdGVBdChkaXJmZCxwYXRoKTtpZihmbGFncz09PTApe0ZTLnVubGluayhwYXRoKX1lbHNlIGlmKGZsYWdzPT09NTEyKXtGUy5ybWRpcihwYXRoKX1lbHNle2Fib3J0KFwiSW52YWxpZCBmbGFncyBwYXNzZWQgdG8gdW5saW5rYXRcIil9cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUubmFtZT09PVwiRXJybm9FcnJvclwiKSl0aHJvdyBlO3JldHVybi1lLmVycm5vfX12YXIgX19hYm9ydF9qcz0oKT0+e2Fib3J0KFwiXCIpfTt2YXIgc3RydWN0UmVnaXN0cmF0aW9ucz17fTt2YXIgcnVuRGVzdHJ1Y3RvcnM9ZGVzdHJ1Y3RvcnM9Pnt3aGlsZShkZXN0cnVjdG9ycy5sZW5ndGgpe3ZhciBwdHI9ZGVzdHJ1Y3RvcnMucG9wKCk7dmFyIGRlbD1kZXN0cnVjdG9ycy5wb3AoKTtkZWwocHRyKX19O2Z1bmN0aW9uIHJlYWRQb2ludGVyKHBvaW50ZXIpe3JldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKEhFQVBVMzJbcG9pbnRlcj4+Ml0pfXZhciBhd2FpdGluZ0RlcGVuZGVuY2llcz17fTt2YXIgcmVnaXN0ZXJlZFR5cGVzPXt9O3ZhciB0eXBlRGVwZW5kZW5jaWVzPXt9O3ZhciBJbnRlcm5hbEVycm9yO3ZhciB0aHJvd0ludGVybmFsRXJyb3I9bWVzc2FnZT0+e3Rocm93IG5ldyBJbnRlcm5hbEVycm9yKG1lc3NhZ2UpfTt2YXIgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQ9KG15VHlwZXMsZGVwZW5kZW50VHlwZXMsZ2V0VHlwZUNvbnZlcnRlcnMpPT57bXlUeXBlcy5mb3JFYWNoKHR5cGU9PnR5cGVEZXBlbmRlbmNpZXNbdHlwZV09ZGVwZW5kZW50VHlwZXMpO2Z1bmN0aW9uIG9uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpe3ZhciBteVR5cGVDb252ZXJ0ZXJzPWdldFR5cGVDb252ZXJ0ZXJzKHR5cGVDb252ZXJ0ZXJzKTtpZihteVR5cGVDb252ZXJ0ZXJzLmxlbmd0aCE9PW15VHlwZXMubGVuZ3RoKXt0aHJvd0ludGVybmFsRXJyb3IoXCJNaXNtYXRjaGVkIHR5cGUgY29udmVydGVyIGNvdW50XCIpfWZvcih2YXIgaT0wO2k8bXlUeXBlcy5sZW5ndGg7KytpKXtyZWdpc3RlclR5cGUobXlUeXBlc1tpXSxteVR5cGVDb252ZXJ0ZXJzW2ldKX19dmFyIHR5cGVDb252ZXJ0ZXJzPW5ldyBBcnJheShkZXBlbmRlbnRUeXBlcy5sZW5ndGgpO3ZhciB1bnJlZ2lzdGVyZWRUeXBlcz1bXTt2YXIgcmVnaXN0ZXJlZD0wO2RlcGVuZGVudFR5cGVzLmZvckVhY2goKGR0LGkpPT57aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KGR0KSl7dHlwZUNvbnZlcnRlcnNbaV09cmVnaXN0ZXJlZFR5cGVzW2R0XX1lbHNle3VucmVnaXN0ZXJlZFR5cGVzLnB1c2goZHQpO2lmKCFhd2FpdGluZ0RlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShkdCkpe2F3YWl0aW5nRGVwZW5kZW5jaWVzW2R0XT1bXX1hd2FpdGluZ0RlcGVuZGVuY2llc1tkdF0ucHVzaCgoKT0+e3R5cGVDb252ZXJ0ZXJzW2ldPXJlZ2lzdGVyZWRUeXBlc1tkdF07KytyZWdpc3RlcmVkO2lmKHJlZ2lzdGVyZWQ9PT11bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpe29uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpfX0pfX0pO2lmKDA9PT11bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpe29uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpfX07dmFyIF9fZW1iaW5kX2ZpbmFsaXplX3ZhbHVlX29iamVjdD1zdHJ1Y3RUeXBlPT57dmFyIHJlZz1zdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdO2RlbGV0ZSBzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdO3ZhciByYXdDb25zdHJ1Y3Rvcj1yZWcucmF3Q29uc3RydWN0b3I7dmFyIHJhd0Rlc3RydWN0b3I9cmVnLnJhd0Rlc3RydWN0b3I7dmFyIGZpZWxkUmVjb3Jkcz1yZWcuZmllbGRzO3ZhciBmaWVsZFR5cGVzPWZpZWxkUmVjb3Jkcy5tYXAoZmllbGQ9PmZpZWxkLmdldHRlclJldHVyblR5cGUpLmNvbmNhdChmaWVsZFJlY29yZHMubWFwKGZpZWxkPT5maWVsZC5zZXR0ZXJBcmd1bWVudFR5cGUpKTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbc3RydWN0VHlwZV0sZmllbGRUeXBlcyxmaWVsZFR5cGVzPT57dmFyIGZpZWxkcz17fTtmaWVsZFJlY29yZHMuZm9yRWFjaCgoZmllbGQsaSk9Pnt2YXIgZmllbGROYW1lPWZpZWxkLmZpZWxkTmFtZTt2YXIgZ2V0dGVyUmV0dXJuVHlwZT1maWVsZFR5cGVzW2ldO3ZhciBnZXR0ZXI9ZmllbGQuZ2V0dGVyO3ZhciBnZXR0ZXJDb250ZXh0PWZpZWxkLmdldHRlckNvbnRleHQ7dmFyIHNldHRlckFyZ3VtZW50VHlwZT1maWVsZFR5cGVzW2krZmllbGRSZWNvcmRzLmxlbmd0aF07dmFyIHNldHRlcj1maWVsZC5zZXR0ZXI7dmFyIHNldHRlckNvbnRleHQ9ZmllbGQuc2V0dGVyQ29udGV4dDtmaWVsZHNbZmllbGROYW1lXT17cmVhZDpwdHI9PmdldHRlclJldHVyblR5cGVbXCJmcm9tV2lyZVR5cGVcIl0oZ2V0dGVyKGdldHRlckNvbnRleHQscHRyKSksd3JpdGU6KHB0cixvKT0+e3ZhciBkZXN0cnVjdG9ycz1bXTtzZXR0ZXIoc2V0dGVyQ29udGV4dCxwdHIsc2V0dGVyQXJndW1lbnRUeXBlW1widG9XaXJlVHlwZVwiXShkZXN0cnVjdG9ycyxvKSk7cnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpfX19KTtyZXR1cm5be25hbWU6cmVnLm5hbWUsZnJvbVdpcmVUeXBlOnB0cj0+e3ZhciBydj17fTtmb3IodmFyIGkgaW4gZmllbGRzKXtydltpXT1maWVsZHNbaV0ucmVhZChwdHIpfXJhd0Rlc3RydWN0b3IocHRyKTtyZXR1cm4gcnZ9LHRvV2lyZVR5cGU6KGRlc3RydWN0b3JzLG8pPT57Zm9yKHZhciBmaWVsZE5hbWUgaW4gZmllbGRzKXtpZighKGZpZWxkTmFtZSBpbiBvKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihgTWlzc2luZyBmaWVsZDogXCIke2ZpZWxkTmFtZX1cImApfX12YXIgcHRyPXJhd0NvbnN0cnVjdG9yKCk7Zm9yKGZpZWxkTmFtZSBpbiBmaWVsZHMpe2ZpZWxkc1tmaWVsZE5hbWVdLndyaXRlKHB0cixvW2ZpZWxkTmFtZV0pfWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChyYXdEZXN0cnVjdG9yLHB0cil9cmV0dXJuIHB0cn0sYXJnUGFja0FkdmFuY2U6R2VuZXJpY1dpcmVUeXBlU2l6ZSxyZWFkVmFsdWVGcm9tUG9pbnRlcjpyZWFkUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246cmF3RGVzdHJ1Y3Rvcn1dfSl9O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQ9KHByaW1pdGl2ZVR5cGUsbmFtZSxzaXplLG1pblJhbmdlLG1heFJhbmdlKT0+e307dmFyIGVtYmluZF9pbml0X2NoYXJDb2Rlcz0oKT0+e3ZhciBjb2Rlcz1uZXcgQXJyYXkoMjU2KTtmb3IodmFyIGk9MDtpPDI1NjsrK2kpe2NvZGVzW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoaSl9ZW1iaW5kX2NoYXJDb2Rlcz1jb2Rlc307dmFyIGVtYmluZF9jaGFyQ29kZXM7dmFyIHJlYWRMYXRpbjFTdHJpbmc9cHRyPT57dmFyIHJldD1cIlwiO3ZhciBjPXB0cjt3aGlsZShIRUFQVThbY10pe3JldCs9ZW1iaW5kX2NoYXJDb2Rlc1tIRUFQVThbYysrXV19cmV0dXJuIHJldH07dmFyIEJpbmRpbmdFcnJvcjt2YXIgdGhyb3dCaW5kaW5nRXJyb3I9bWVzc2FnZT0+e3Rocm93IG5ldyBCaW5kaW5nRXJyb3IobWVzc2FnZSl9O2Z1bmN0aW9uIHNoYXJlZFJlZ2lzdGVyVHlwZShyYXdUeXBlLHJlZ2lzdGVyZWRJbnN0YW5jZSxvcHRpb25zPXt9KXt2YXIgbmFtZT1yZWdpc3RlcmVkSW5zdGFuY2UubmFtZTtpZighcmF3VHlwZSl7dGhyb3dCaW5kaW5nRXJyb3IoYHR5cGUgXCIke25hbWV9XCIgbXVzdCBoYXZlIGEgcG9zaXRpdmUgaW50ZWdlciB0eXBlaWQgcG9pbnRlcmApfWlmKHJlZ2lzdGVyZWRUeXBlcy5oYXNPd25Qcm9wZXJ0eShyYXdUeXBlKSl7aWYob3B0aW9ucy5pZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zKXtyZXR1cm59ZWxzZXt0aHJvd0JpbmRpbmdFcnJvcihgQ2Fubm90IHJlZ2lzdGVyIHR5cGUgJyR7bmFtZX0nIHR3aWNlYCl9fXJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXT1yZWdpc3RlcmVkSW5zdGFuY2U7ZGVsZXRlIHR5cGVEZXBlbmRlbmNpZXNbcmF3VHlwZV07aWYoYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpe3ZhciBjYWxsYmFja3M9YXdhaXRpbmdEZXBlbmRlbmNpZXNbcmF3VHlwZV07ZGVsZXRlIGF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2NhbGxiYWNrcy5mb3JFYWNoKGNiPT5jYigpKX19ZnVuY3Rpb24gcmVnaXN0ZXJUeXBlKHJhd1R5cGUscmVnaXN0ZXJlZEluc3RhbmNlLG9wdGlvbnM9e30pe3JldHVybiBzaGFyZWRSZWdpc3RlclR5cGUocmF3VHlwZSxyZWdpc3RlcmVkSW5zdGFuY2Usb3B0aW9ucyl9dmFyIEdlbmVyaWNXaXJlVHlwZVNpemU9ODt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfYm9vbD0ocmF3VHlwZSxuYW1lLHRydWVWYWx1ZSxmYWxzZVZhbHVlKT0+e25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZSxmcm9tV2lyZVR5cGU6ZnVuY3Rpb24od3Qpe3JldHVybiEhd3R9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsbyl7cmV0dXJuIG8/dHJ1ZVZhbHVlOmZhbHNlVmFsdWV9LGFyZ1BhY2tBZHZhbmNlOkdlbmVyaWNXaXJlVHlwZVNpemUscmVhZFZhbHVlRnJvbVBvaW50ZXI6ZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUFU4W3BvaW50ZXJdKX0sZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX07dmFyIHNoYWxsb3dDb3B5SW50ZXJuYWxQb2ludGVyPW89Pih7Y291bnQ6by5jb3VudCxkZWxldGVTY2hlZHVsZWQ6by5kZWxldGVTY2hlZHVsZWQscHJlc2VydmVQb2ludGVyT25EZWxldGU6by5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSxwdHI6by5wdHIscHRyVHlwZTpvLnB0clR5cGUsc21hcnRQdHI6by5zbWFydFB0cixzbWFydFB0clR5cGU6by5zbWFydFB0clR5cGV9KTt2YXIgdGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkPW9iaj0+e2Z1bmN0aW9uIGdldEluc3RhbmNlVHlwZU5hbWUoaGFuZGxlKXtyZXR1cm4gaGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLm5hbWV9dGhyb3dCaW5kaW5nRXJyb3IoZ2V0SW5zdGFuY2VUeXBlTmFtZShvYmopK1wiIGluc3RhbmNlIGFscmVhZHkgZGVsZXRlZFwiKX07dmFyIGZpbmFsaXphdGlvblJlZ2lzdHJ5PWZhbHNlO3ZhciBkZXRhY2hGaW5hbGl6ZXI9aGFuZGxlPT57fTt2YXIgcnVuRGVzdHJ1Y3Rvcj0kJD0+e2lmKCQkLnNtYXJ0UHRyKXskJC5zbWFydFB0clR5cGUucmF3RGVzdHJ1Y3RvcigkJC5zbWFydFB0cil9ZWxzZXskJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5yYXdEZXN0cnVjdG9yKCQkLnB0cil9fTt2YXIgcmVsZWFzZUNsYXNzSGFuZGxlPSQkPT57JCQuY291bnQudmFsdWUtPTE7dmFyIHRvRGVsZXRlPTA9PT0kJC5jb3VudC52YWx1ZTtpZih0b0RlbGV0ZSl7cnVuRGVzdHJ1Y3RvcigkJCl9fTt2YXIgZG93bmNhc3RQb2ludGVyPShwdHIscHRyQ2xhc3MsZGVzaXJlZENsYXNzKT0+e2lmKHB0ckNsYXNzPT09ZGVzaXJlZENsYXNzKXtyZXR1cm4gcHRyfWlmKHVuZGVmaW5lZD09PWRlc2lyZWRDbGFzcy5iYXNlQ2xhc3Mpe3JldHVybiBudWxsfXZhciBydj1kb3duY2FzdFBvaW50ZXIocHRyLHB0ckNsYXNzLGRlc2lyZWRDbGFzcy5iYXNlQ2xhc3MpO2lmKHJ2PT09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIGRlc2lyZWRDbGFzcy5kb3duY2FzdChydil9O3ZhciByZWdpc3RlcmVkUG9pbnRlcnM9e307dmFyIHJlZ2lzdGVyZWRJbnN0YW5jZXM9e307dmFyIGdldEJhc2VzdFBvaW50ZXI9KGNsYXNzXyxwdHIpPT57aWYocHRyPT09dW5kZWZpbmVkKXt0aHJvd0JpbmRpbmdFcnJvcihcInB0ciBzaG91bGQgbm90IGJlIHVuZGVmaW5lZFwiKX13aGlsZShjbGFzc18uYmFzZUNsYXNzKXtwdHI9Y2xhc3NfLnVwY2FzdChwdHIpO2NsYXNzXz1jbGFzc18uYmFzZUNsYXNzfXJldHVybiBwdHJ9O3ZhciBnZXRJbmhlcml0ZWRJbnN0YW5jZT0oY2xhc3NfLHB0cik9PntwdHI9Z2V0QmFzZXN0UG9pbnRlcihjbGFzc18scHRyKTtyZXR1cm4gcmVnaXN0ZXJlZEluc3RhbmNlc1twdHJdfTt2YXIgbWFrZUNsYXNzSGFuZGxlPShwcm90b3R5cGUscmVjb3JkKT0+e2lmKCFyZWNvcmQucHRyVHlwZXx8IXJlY29yZC5wdHIpe3Rocm93SW50ZXJuYWxFcnJvcihcIm1ha2VDbGFzc0hhbmRsZSByZXF1aXJlcyBwdHIgYW5kIHB0clR5cGVcIil9dmFyIGhhc1NtYXJ0UHRyVHlwZT0hIXJlY29yZC5zbWFydFB0clR5cGU7dmFyIGhhc1NtYXJ0UHRyPSEhcmVjb3JkLnNtYXJ0UHRyO2lmKGhhc1NtYXJ0UHRyVHlwZSE9PWhhc1NtYXJ0UHRyKXt0aHJvd0ludGVybmFsRXJyb3IoXCJCb3RoIHNtYXJ0UHRyVHlwZSBhbmQgc21hcnRQdHIgbXVzdCBiZSBzcGVjaWZpZWRcIil9cmVjb3JkLmNvdW50PXt2YWx1ZToxfTtyZXR1cm4gYXR0YWNoRmluYWxpemVyKE9iamVjdC5jcmVhdGUocHJvdG90eXBlLHskJDp7dmFsdWU6cmVjb3JkLHdyaXRhYmxlOnRydWV9fSkpfTtmdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGUocHRyKXt2YXIgcmF3UG9pbnRlcj10aGlzLmdldFBvaW50ZWUocHRyKTtpZighcmF3UG9pbnRlcil7dGhpcy5kZXN0cnVjdG9yKHB0cik7cmV0dXJuIG51bGx9dmFyIHJlZ2lzdGVyZWRJbnN0YW5jZT1nZXRJbmhlcml0ZWRJbnN0YW5jZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcyxyYXdQb2ludGVyKTtpZih1bmRlZmluZWQhPT1yZWdpc3RlcmVkSW5zdGFuY2Upe2lmKDA9PT1yZWdpc3RlcmVkSW5zdGFuY2UuJCQuY291bnQudmFsdWUpe3JlZ2lzdGVyZWRJbnN0YW5jZS4kJC5wdHI9cmF3UG9pbnRlcjtyZWdpc3RlcmVkSW5zdGFuY2UuJCQuc21hcnRQdHI9cHRyO3JldHVybiByZWdpc3RlcmVkSW5zdGFuY2VbXCJjbG9uZVwiXSgpfWVsc2V7dmFyIHJ2PXJlZ2lzdGVyZWRJbnN0YW5jZVtcImNsb25lXCJdKCk7dGhpcy5kZXN0cnVjdG9yKHB0cik7cmV0dXJuIHJ2fX1mdW5jdGlvbiBtYWtlRGVmYXVsdEhhbmRsZSgpe2lmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodGhpcy5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dGhpcy5wb2ludGVlVHlwZSxwdHI6cmF3UG9pbnRlcixzbWFydFB0clR5cGU6dGhpcyxzbWFydFB0cjpwdHJ9KX1lbHNle3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodGhpcy5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dGhpcyxwdHJ9KX19dmFyIGFjdHVhbFR5cGU9dGhpcy5yZWdpc3RlcmVkQ2xhc3MuZ2V0QWN0dWFsVHlwZShyYXdQb2ludGVyKTt2YXIgcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQ9cmVnaXN0ZXJlZFBvaW50ZXJzW2FjdHVhbFR5cGVdO2lmKCFyZWdpc3RlcmVkUG9pbnRlclJlY29yZCl7cmV0dXJuIG1ha2VEZWZhdWx0SGFuZGxlLmNhbGwodGhpcyl9dmFyIHRvVHlwZTtpZih0aGlzLmlzQ29uc3Qpe3RvVHlwZT1yZWdpc3RlcmVkUG9pbnRlclJlY29yZC5jb25zdFBvaW50ZXJUeXBlfWVsc2V7dG9UeXBlPXJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkLnBvaW50ZXJUeXBlfXZhciBkcD1kb3duY2FzdFBvaW50ZXIocmF3UG9pbnRlcix0aGlzLnJlZ2lzdGVyZWRDbGFzcyx0b1R5cGUucmVnaXN0ZXJlZENsYXNzKTtpZihkcD09PW51bGwpe3JldHVybiBtYWtlRGVmYXVsdEhhbmRsZS5jYWxsKHRoaXMpfWlmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodG9UeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0b1R5cGUscHRyOmRwLHNtYXJ0UHRyVHlwZTp0aGlzLHNtYXJ0UHRyOnB0cn0pfWVsc2V7cmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0b1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLHtwdHJUeXBlOnRvVHlwZSxwdHI6ZHB9KX19dmFyIGF0dGFjaEZpbmFsaXplcj1oYW5kbGU9PntpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5KXthdHRhY2hGaW5hbGl6ZXI9aGFuZGxlPT5oYW5kbGU7cmV0dXJuIGhhbmRsZX1maW5hbGl6YXRpb25SZWdpc3RyeT1uZXcgRmluYWxpemF0aW9uUmVnaXN0cnkoaW5mbz0+e3JlbGVhc2VDbGFzc0hhbmRsZShpbmZvLiQkKX0pO2F0dGFjaEZpbmFsaXplcj1oYW5kbGU9Pnt2YXIgJCQ9aGFuZGxlLiQkO3ZhciBoYXNTbWFydFB0cj0hISQkLnNtYXJ0UHRyO2lmKGhhc1NtYXJ0UHRyKXt2YXIgaW5mbz17JCR9O2ZpbmFsaXphdGlvblJlZ2lzdHJ5LnJlZ2lzdGVyKGhhbmRsZSxpbmZvLGhhbmRsZSl9cmV0dXJuIGhhbmRsZX07ZGV0YWNoRmluYWxpemVyPWhhbmRsZT0+ZmluYWxpemF0aW9uUmVnaXN0cnkudW5yZWdpc3RlcihoYW5kbGUpO3JldHVybiBhdHRhY2hGaW5hbGl6ZXIoaGFuZGxlKX07dmFyIGRlbGV0aW9uUXVldWU9W107dmFyIGZsdXNoUGVuZGluZ0RlbGV0ZXM9KCk9Pnt3aGlsZShkZWxldGlvblF1ZXVlLmxlbmd0aCl7dmFyIG9iaj1kZWxldGlvblF1ZXVlLnBvcCgpO29iai4kJC5kZWxldGVTY2hlZHVsZWQ9ZmFsc2U7b2JqW1wiZGVsZXRlXCJdKCl9fTt2YXIgZGVsYXlGdW5jdGlvbjt2YXIgaW5pdF9DbGFzc0hhbmRsZT0oKT0+e09iamVjdC5hc3NpZ24oQ2xhc3NIYW5kbGUucHJvdG90eXBlLHtpc0FsaWFzT2Yob3RoZXIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIENsYXNzSGFuZGxlKSl7cmV0dXJuIGZhbHNlfWlmKCEob3RoZXIgaW5zdGFuY2VvZiBDbGFzc0hhbmRsZSkpe3JldHVybiBmYWxzZX12YXIgbGVmdENsYXNzPXRoaXMuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIGxlZnQ9dGhpcy4kJC5wdHI7b3RoZXIuJCQ9b3RoZXIuJCQ7dmFyIHJpZ2h0Q2xhc3M9b3RoZXIuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIHJpZ2h0PW90aGVyLiQkLnB0cjt3aGlsZShsZWZ0Q2xhc3MuYmFzZUNsYXNzKXtsZWZ0PWxlZnRDbGFzcy51cGNhc3QobGVmdCk7bGVmdENsYXNzPWxlZnRDbGFzcy5iYXNlQ2xhc3N9d2hpbGUocmlnaHRDbGFzcy5iYXNlQ2xhc3Mpe3JpZ2h0PXJpZ2h0Q2xhc3MudXBjYXN0KHJpZ2h0KTtyaWdodENsYXNzPXJpZ2h0Q2xhc3MuYmFzZUNsYXNzfXJldHVybiBsZWZ0Q2xhc3M9PT1yaWdodENsYXNzJiZsZWZ0PT09cmlnaHR9LGNsb25lKCl7aWYoIXRoaXMuJCQucHRyKXt0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyl9aWYodGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhpcy4kJC5jb3VudC52YWx1ZSs9MTtyZXR1cm4gdGhpc31lbHNle3ZhciBjbG9uZT1hdHRhY2hGaW5hbGl6ZXIoT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykseyQkOnt2YWx1ZTpzaGFsbG93Q29weUludGVybmFsUG9pbnRlcih0aGlzLiQkKX19KSk7Y2xvbmUuJCQuY291bnQudmFsdWUrPTE7Y2xvbmUuJCQuZGVsZXRlU2NoZWR1bGVkPWZhbHNlO3JldHVybiBjbG9uZX19LGRlbGV0ZSgpe2lmKCF0aGlzLiQkLnB0cil7dGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpfWlmKHRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkJiYhdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uXCIpfWRldGFjaEZpbmFsaXplcih0aGlzKTtyZWxlYXNlQ2xhc3NIYW5kbGUodGhpcy4kJCk7aWYoIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3RoaXMuJCQuc21hcnRQdHI9dW5kZWZpbmVkO3RoaXMuJCQucHRyPXVuZGVmaW5lZH19LGlzRGVsZXRlZCgpe3JldHVybiF0aGlzLiQkLnB0cn0sZGVsZXRlTGF0ZXIoKXtpZighdGhpcy4kJC5wdHIpe3Rocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZCh0aGlzKX1pZih0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCYmIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3Rocm93QmluZGluZ0Vycm9yKFwiT2JqZWN0IGFscmVhZHkgc2NoZWR1bGVkIGZvciBkZWxldGlvblwiKX1kZWxldGlvblF1ZXVlLnB1c2godGhpcyk7aWYoZGVsZXRpb25RdWV1ZS5sZW5ndGg9PT0xJiZkZWxheUZ1bmN0aW9uKXtkZWxheUZ1bmN0aW9uKGZsdXNoUGVuZGluZ0RlbGV0ZXMpfXRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkPXRydWU7cmV0dXJuIHRoaXN9fSl9O2Z1bmN0aW9uIENsYXNzSGFuZGxlKCl7fXZhciBjcmVhdGVOYW1lZEZ1bmN0aW9uPShuYW1lLGJvZHkpPT5PYmplY3QuZGVmaW5lUHJvcGVydHkoYm9keSxcIm5hbWVcIix7dmFsdWU6bmFtZX0pO3ZhciBlbnN1cmVPdmVybG9hZFRhYmxlPShwcm90byxtZXRob2ROYW1lLGh1bWFuTmFtZSk9PntpZih1bmRlZmluZWQ9PT1wcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKXt2YXIgcHJldkZ1bmM9cHJvdG9bbWV0aG9kTmFtZV07cHJvdG9bbWV0aG9kTmFtZV09ZnVuY3Rpb24oLi4uYXJncyl7aWYoIXByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUuaGFzT3duUHJvcGVydHkoYXJncy5sZW5ndGgpKXt0aHJvd0JpbmRpbmdFcnJvcihgRnVuY3Rpb24gJyR7aHVtYW5OYW1lfScgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzICgke2FyZ3MubGVuZ3RofSkgLSBleHBlY3RzIG9uZSBvZiAoJHtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlfSkhYCl9cmV0dXJuIHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJncy5sZW5ndGhdLmFwcGx5KHRoaXMsYXJncyl9O3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGU9W107cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVtwcmV2RnVuYy5hcmdDb3VudF09cHJldkZ1bmN9fTt2YXIgZXhwb3NlUHVibGljU3ltYm9sPShuYW1lLHZhbHVlLG51bUFyZ3VtZW50cyk9PntpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe2lmKHVuZGVmaW5lZD09PW51bUFyZ3VtZW50c3x8dW5kZWZpbmVkIT09TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUmJnVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c10pe3Rocm93QmluZGluZ0Vycm9yKGBDYW5ub3QgcmVnaXN0ZXIgcHVibGljIG5hbWUgJyR7bmFtZX0nIHR3aWNlYCl9ZW5zdXJlT3ZlcmxvYWRUYWJsZShNb2R1bGUsbmFtZSxuYW1lKTtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobnVtQXJndW1lbnRzKSl7dGhyb3dCaW5kaW5nRXJyb3IoYENhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgKCR7bnVtQXJndW1lbnRzfSkhYCl9TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGVbbnVtQXJndW1lbnRzXT12YWx1ZX1lbHNle01vZHVsZVtuYW1lXT12YWx1ZTtpZih1bmRlZmluZWQhPT1udW1Bcmd1bWVudHMpe01vZHVsZVtuYW1lXS5udW1Bcmd1bWVudHM9bnVtQXJndW1lbnRzfX19O3ZhciBjaGFyXzA9NDg7dmFyIGNoYXJfOT01Nzt2YXIgbWFrZUxlZ2FsRnVuY3Rpb25OYW1lPW5hbWU9PntuYW1lPW5hbWUucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLFwiJFwiKTt2YXIgZj1uYW1lLmNoYXJDb2RlQXQoMCk7aWYoZj49Y2hhcl8wJiZmPD1jaGFyXzkpe3JldHVybmBfJHtuYW1lfWB9cmV0dXJuIG5hbWV9O2Z1bmN0aW9uIFJlZ2lzdGVyZWRDbGFzcyhuYW1lLGNvbnN0cnVjdG9yLGluc3RhbmNlUHJvdG90eXBlLHJhd0Rlc3RydWN0b3IsYmFzZUNsYXNzLGdldEFjdHVhbFR5cGUsdXBjYXN0LGRvd25jYXN0KXt0aGlzLm5hbWU9bmFtZTt0aGlzLmNvbnN0cnVjdG9yPWNvbnN0cnVjdG9yO3RoaXMuaW5zdGFuY2VQcm90b3R5cGU9aW5zdGFuY2VQcm90b3R5cGU7dGhpcy5yYXdEZXN0cnVjdG9yPXJhd0Rlc3RydWN0b3I7dGhpcy5iYXNlQ2xhc3M9YmFzZUNsYXNzO3RoaXMuZ2V0QWN0dWFsVHlwZT1nZXRBY3R1YWxUeXBlO3RoaXMudXBjYXN0PXVwY2FzdDt0aGlzLmRvd25jYXN0PWRvd25jYXN0O3RoaXMucHVyZVZpcnR1YWxGdW5jdGlvbnM9W119dmFyIHVwY2FzdFBvaW50ZXI9KHB0cixwdHJDbGFzcyxkZXNpcmVkQ2xhc3MpPT57d2hpbGUocHRyQ2xhc3MhPT1kZXNpcmVkQ2xhc3Mpe2lmKCFwdHJDbGFzcy51cGNhc3Qpe3Rocm93QmluZGluZ0Vycm9yKGBFeHBlY3RlZCBudWxsIG9yIGluc3RhbmNlIG9mICR7ZGVzaXJlZENsYXNzLm5hbWV9LCBnb3QgYW4gaW5zdGFuY2Ugb2YgJHtwdHJDbGFzcy5uYW1lfWApfXB0cj1wdHJDbGFzcy51cGNhc3QocHRyKTtwdHJDbGFzcz1wdHJDbGFzcy5iYXNlQ2xhc3N9cmV0dXJuIHB0cn07ZnVuY3Rpb24gY29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsaGFuZGxlKXtpZihoYW5kbGU9PT1udWxsKXtpZih0aGlzLmlzUmVmZXJlbmNlKXt0aHJvd0JpbmRpbmdFcnJvcihgbnVsbCBpcyBub3QgYSB2YWxpZCAke3RoaXMubmFtZX1gKX1yZXR1cm4gMH1pZighaGFuZGxlLiQkKXt0aHJvd0JpbmRpbmdFcnJvcihgQ2Fubm90IHBhc3MgXCIke2VtYmluZFJlcHIoaGFuZGxlKX1cIiBhcyBhICR7dGhpcy5uYW1lfWApfWlmKCFoYW5kbGUuJCQucHRyKXt0aHJvd0JpbmRpbmdFcnJvcihgQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgJHt0aGlzLm5hbWV9YCl9dmFyIGhhbmRsZUNsYXNzPWhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgcHRyPXVwY2FzdFBvaW50ZXIoaGFuZGxlLiQkLnB0cixoYW5kbGVDbGFzcyx0aGlzLnJlZ2lzdGVyZWRDbGFzcyk7cmV0dXJuIHB0cn1mdW5jdGlvbiBnZW5lcmljUG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsaGFuZGxlKXt2YXIgcHRyO2lmKGhhbmRsZT09PW51bGwpe2lmKHRoaXMuaXNSZWZlcmVuY2Upe3Rocm93QmluZGluZ0Vycm9yKGBudWxsIGlzIG5vdCBhIHZhbGlkICR7dGhpcy5uYW1lfWApfWlmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3B0cj10aGlzLnJhd0NvbnN0cnVjdG9yKCk7aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvcixwdHIpfXJldHVybiBwdHJ9ZWxzZXtyZXR1cm4gMH19aWYoIWhhbmRsZXx8IWhhbmRsZS4kJCl7dGhyb3dCaW5kaW5nRXJyb3IoYENhbm5vdCBwYXNzIFwiJHtlbWJpbmRSZXByKGhhbmRsZSl9XCIgYXMgYSAke3RoaXMubmFtZX1gKX1pZighaGFuZGxlLiQkLnB0cil7dGhyb3dCaW5kaW5nRXJyb3IoYENhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlICR7dGhpcy5uYW1lfWApfWlmKCF0aGlzLmlzQ29uc3QmJmhhbmRsZS4kJC5wdHJUeXBlLmlzQ29uc3Qpe3Rocm93QmluZGluZ0Vycm9yKGBDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlICR7aGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT9oYW5kbGUuJCQuc21hcnRQdHJUeXBlLm5hbWU6aGFuZGxlLiQkLnB0clR5cGUubmFtZX0gdG8gcGFyYW1ldGVyIHR5cGUgJHt0aGlzLm5hbWV9YCl9dmFyIGhhbmRsZUNsYXNzPWhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcztwdHI9dXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLGhhbmRsZUNsYXNzLHRoaXMucmVnaXN0ZXJlZENsYXNzKTtpZih0aGlzLmlzU21hcnRQb2ludGVyKXtpZih1bmRlZmluZWQ9PT1oYW5kbGUuJCQuc21hcnRQdHIpe3Rocm93QmluZGluZ0Vycm9yKFwiUGFzc2luZyByYXcgcG9pbnRlciB0byBzbWFydCBwb2ludGVyIGlzIGlsbGVnYWxcIil9c3dpdGNoKHRoaXMuc2hhcmluZ1BvbGljeSl7Y2FzZSAwOmlmKGhhbmRsZS4kJC5zbWFydFB0clR5cGU9PT10aGlzKXtwdHI9aGFuZGxlLiQkLnNtYXJ0UHRyfWVsc2V7dGhyb3dCaW5kaW5nRXJyb3IoYENhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgJHtoYW5kbGUuJCQuc21hcnRQdHJUeXBlP2hhbmRsZS4kJC5zbWFydFB0clR5cGUubmFtZTpoYW5kbGUuJCQucHRyVHlwZS5uYW1lfSB0byBwYXJhbWV0ZXIgdHlwZSAke3RoaXMubmFtZX1gKX1icmVhaztjYXNlIDE6cHRyPWhhbmRsZS4kJC5zbWFydFB0cjticmVhaztjYXNlIDI6aWYoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT09PXRoaXMpe3B0cj1oYW5kbGUuJCQuc21hcnRQdHJ9ZWxzZXt2YXIgY2xvbmVkSGFuZGxlPWhhbmRsZVtcImNsb25lXCJdKCk7cHRyPXRoaXMucmF3U2hhcmUocHRyLEVtdmFsLnRvSGFuZGxlKCgpPT5jbG9uZWRIYW5kbGVbXCJkZWxldGVcIl0oKSkpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaCh0aGlzLnJhd0Rlc3RydWN0b3IscHRyKX19YnJlYWs7ZGVmYXVsdDp0aHJvd0JpbmRpbmdFcnJvcihcIlVuc3VwcG9ydGluZyBzaGFyaW5nIHBvbGljeVwiKX19cmV0dXJuIHB0cn1mdW5jdGlvbiBub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycyxoYW5kbGUpe2lmKGhhbmRsZT09PW51bGwpe2lmKHRoaXMuaXNSZWZlcmVuY2Upe3Rocm93QmluZGluZ0Vycm9yKGBudWxsIGlzIG5vdCBhIHZhbGlkICR7dGhpcy5uYW1lfWApfXJldHVybiAwfWlmKCFoYW5kbGUuJCQpe3Rocm93QmluZGluZ0Vycm9yKGBDYW5ub3QgcGFzcyBcIiR7ZW1iaW5kUmVwcihoYW5kbGUpfVwiIGFzIGEgJHt0aGlzLm5hbWV9YCl9aWYoIWhhbmRsZS4kJC5wdHIpe3Rocm93QmluZGluZ0Vycm9yKGBDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSAke3RoaXMubmFtZX1gKX1pZihoYW5kbGUuJCQucHRyVHlwZS5pc0NvbnN0KXt0aHJvd0JpbmRpbmdFcnJvcihgQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSAke2hhbmRsZS4kJC5wdHJUeXBlLm5hbWV9IHRvIHBhcmFtZXRlciB0eXBlICR7dGhpcy5uYW1lfWApfXZhciBoYW5kbGVDbGFzcz1oYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIHB0cj11cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsaGFuZGxlQ2xhc3MsdGhpcy5yZWdpc3RlcmVkQ2xhc3MpO3JldHVybiBwdHJ9dmFyIGluaXRfUmVnaXN0ZXJlZFBvaW50ZXI9KCk9PntPYmplY3QuYXNzaWduKFJlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZSx7Z2V0UG9pbnRlZShwdHIpe2lmKHRoaXMucmF3R2V0UG9pbnRlZSl7cHRyPXRoaXMucmF3R2V0UG9pbnRlZShwdHIpfXJldHVybiBwdHJ9LGRlc3RydWN0b3IocHRyKXt0aGlzLnJhd0Rlc3RydWN0b3I/LihwdHIpfSxhcmdQYWNrQWR2YW5jZTpHZW5lcmljV2lyZVR5cGVTaXplLHJlYWRWYWx1ZUZyb21Qb2ludGVyOnJlYWRQb2ludGVyLGZyb21XaXJlVHlwZTpSZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGV9KX07ZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSxyZWdpc3RlcmVkQ2xhc3MsaXNSZWZlcmVuY2UsaXNDb25zdCxpc1NtYXJ0UG9pbnRlcixwb2ludGVlVHlwZSxzaGFyaW5nUG9saWN5LHJhd0dldFBvaW50ZWUscmF3Q29uc3RydWN0b3IscmF3U2hhcmUscmF3RGVzdHJ1Y3Rvcil7dGhpcy5uYW1lPW5hbWU7dGhpcy5yZWdpc3RlcmVkQ2xhc3M9cmVnaXN0ZXJlZENsYXNzO3RoaXMuaXNSZWZlcmVuY2U9aXNSZWZlcmVuY2U7dGhpcy5pc0NvbnN0PWlzQ29uc3Q7dGhpcy5pc1NtYXJ0UG9pbnRlcj1pc1NtYXJ0UG9pbnRlcjt0aGlzLnBvaW50ZWVUeXBlPXBvaW50ZWVUeXBlO3RoaXMuc2hhcmluZ1BvbGljeT1zaGFyaW5nUG9saWN5O3RoaXMucmF3R2V0UG9pbnRlZT1yYXdHZXRQb2ludGVlO3RoaXMucmF3Q29uc3RydWN0b3I9cmF3Q29uc3RydWN0b3I7dGhpcy5yYXdTaGFyZT1yYXdTaGFyZTt0aGlzLnJhd0Rlc3RydWN0b3I9cmF3RGVzdHJ1Y3RvcjtpZighaXNTbWFydFBvaW50ZXImJnJlZ2lzdGVyZWRDbGFzcy5iYXNlQ2xhc3M9PT11bmRlZmluZWQpe2lmKGlzQ29uc3Qpe3RoaXNbXCJ0b1dpcmVUeXBlXCJdPWNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlO3RoaXMuZGVzdHJ1Y3RvckZ1bmN0aW9uPW51bGx9ZWxzZXt0aGlzW1widG9XaXJlVHlwZVwiXT1ub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZTt0aGlzLmRlc3RydWN0b3JGdW5jdGlvbj1udWxsfX1lbHNle3RoaXNbXCJ0b1dpcmVUeXBlXCJdPWdlbmVyaWNQb2ludGVyVG9XaXJlVHlwZX19dmFyIHJlcGxhY2VQdWJsaWNTeW1ib2w9KG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKT0+e2lmKCFNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe3Rocm93SW50ZXJuYWxFcnJvcihcIlJlcGxhY2luZyBub25leGlzdGVudCBwdWJsaWMgc3ltYm9sXCIpfWlmKHVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlJiZ1bmRlZmluZWQhPT1udW1Bcmd1bWVudHMpe01vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c109dmFsdWV9ZWxzZXtNb2R1bGVbbmFtZV09dmFsdWU7TW9kdWxlW25hbWVdLmFyZ0NvdW50PW51bUFyZ3VtZW50c319O3ZhciBkeW5DYWxsTGVnYWN5PShzaWcscHRyLGFyZ3MpPT57c2lnPXNpZy5yZXBsYWNlKC9wL2csXCJpXCIpO3ZhciBmPU1vZHVsZVtcImR5bkNhbGxfXCIrc2lnXTtyZXR1cm4gZihwdHIsLi4uYXJncyl9O3ZhciBkeW5DYWxsPShzaWcscHRyLGFyZ3M9W10pPT57aWYoc2lnLmluY2x1ZGVzKFwialwiKSl7cmV0dXJuIGR5bkNhbGxMZWdhY3koc2lnLHB0cixhcmdzKX12YXIgcnRuPWdldFdhc21UYWJsZUVudHJ5KHB0cikoLi4uYXJncyk7cmV0dXJuIHJ0bn07dmFyIGdldER5bkNhbGxlcj0oc2lnLHB0cik9PiguLi5hcmdzKT0+ZHluQ2FsbChzaWcscHRyLGFyZ3MpO3ZhciBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbj0oc2lnbmF0dXJlLHJhd0Z1bmN0aW9uKT0+e3NpZ25hdHVyZT1yZWFkTGF0aW4xU3RyaW5nKHNpZ25hdHVyZSk7ZnVuY3Rpb24gbWFrZUR5bkNhbGxlcigpe2lmKHNpZ25hdHVyZS5pbmNsdWRlcyhcImpcIikpe3JldHVybiBnZXREeW5DYWxsZXIoc2lnbmF0dXJlLHJhd0Z1bmN0aW9uKX1yZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkocmF3RnVuY3Rpb24pfXZhciBmcD1tYWtlRHluQ2FsbGVyKCk7aWYodHlwZW9mIGZwIT1cImZ1bmN0aW9uXCIpe3Rocm93QmluZGluZ0Vycm9yKGB1bmtub3duIGZ1bmN0aW9uIHBvaW50ZXIgd2l0aCBzaWduYXR1cmUgJHtzaWduYXR1cmV9OiAke3Jhd0Z1bmN0aW9ufWApfXJldHVybiBmcH07dmFyIGV4dGVuZEVycm9yPShiYXNlRXJyb3JUeXBlLGVycm9yTmFtZSk9Pnt2YXIgZXJyb3JDbGFzcz1jcmVhdGVOYW1lZEZ1bmN0aW9uKGVycm9yTmFtZSxmdW5jdGlvbihtZXNzYWdlKXt0aGlzLm5hbWU9ZXJyb3JOYW1lO3RoaXMubWVzc2FnZT1tZXNzYWdlO3ZhciBzdGFjaz1uZXcgRXJyb3IobWVzc2FnZSkuc3RhY2s7aWYoc3RhY2shPT11bmRlZmluZWQpe3RoaXMuc3RhY2s9dGhpcy50b1N0cmluZygpK1wiXFxuXCIrc3RhY2sucmVwbGFjZSgvXkVycm9yKDpbXlxcbl0qKT9cXG4vLFwiXCIpfX0pO2Vycm9yQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYmFzZUVycm9yVHlwZS5wcm90b3R5cGUpO2Vycm9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWVycm9yQ2xhc3M7ZXJyb3JDbGFzcy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLm1lc3NhZ2U9PT11bmRlZmluZWQpe3JldHVybiB0aGlzLm5hbWV9ZWxzZXtyZXR1cm5gJHt0aGlzLm5hbWV9OiAke3RoaXMubWVzc2FnZX1gfX07cmV0dXJuIGVycm9yQ2xhc3N9O3ZhciBVbmJvdW5kVHlwZUVycm9yO3ZhciBnZXRUeXBlTmFtZT10eXBlPT57dmFyIHB0cj1fX19nZXRUeXBlTmFtZSh0eXBlKTt2YXIgcnY9cmVhZExhdGluMVN0cmluZyhwdHIpO19mcmVlKHB0cik7cmV0dXJuIHJ2fTt2YXIgdGhyb3dVbmJvdW5kVHlwZUVycm9yPShtZXNzYWdlLHR5cGVzKT0+e3ZhciB1bmJvdW5kVHlwZXM9W107dmFyIHNlZW49e307ZnVuY3Rpb24gdmlzaXQodHlwZSl7aWYoc2Vlblt0eXBlXSl7cmV0dXJufWlmKHJlZ2lzdGVyZWRUeXBlc1t0eXBlXSl7cmV0dXJufWlmKHR5cGVEZXBlbmRlbmNpZXNbdHlwZV0pe3R5cGVEZXBlbmRlbmNpZXNbdHlwZV0uZm9yRWFjaCh2aXNpdCk7cmV0dXJufXVuYm91bmRUeXBlcy5wdXNoKHR5cGUpO3NlZW5bdHlwZV09dHJ1ZX10eXBlcy5mb3JFYWNoKHZpc2l0KTt0aHJvdyBuZXcgVW5ib3VuZFR5cGVFcnJvcihgJHttZXNzYWdlfTogYCt1bmJvdW5kVHlwZXMubWFwKGdldFR5cGVOYW1lKS5qb2luKFtcIiwgXCJdKSl9O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcz0ocmF3VHlwZSxyYXdQb2ludGVyVHlwZSxyYXdDb25zdFBvaW50ZXJUeXBlLGJhc2VDbGFzc1Jhd1R5cGUsZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSxnZXRBY3R1YWxUeXBlLHVwY2FzdFNpZ25hdHVyZSx1cGNhc3QsZG93bmNhc3RTaWduYXR1cmUsZG93bmNhc3QsbmFtZSxkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3IpPT57bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO2dldEFjdHVhbFR5cGU9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSxnZXRBY3R1YWxUeXBlKTt1cGNhc3QmJj1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbih1cGNhc3RTaWduYXR1cmUsdXBjYXN0KTtkb3duY2FzdCYmPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGRvd25jYXN0U2lnbmF0dXJlLGRvd25jYXN0KTtyYXdEZXN0cnVjdG9yPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGRlc3RydWN0b3JTaWduYXR1cmUscmF3RGVzdHJ1Y3Rvcik7dmFyIGxlZ2FsRnVuY3Rpb25OYW1lPW1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTtleHBvc2VQdWJsaWNTeW1ib2wobGVnYWxGdW5jdGlvbk5hbWUsZnVuY3Rpb24oKXt0aHJvd1VuYm91bmRUeXBlRXJyb3IoYENhbm5vdCBjb25zdHJ1Y3QgJHtuYW1lfSBkdWUgdG8gdW5ib3VuZCB0eXBlc2AsW2Jhc2VDbGFzc1Jhd1R5cGVdKX0pO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtyYXdUeXBlLHJhd1BvaW50ZXJUeXBlLHJhd0NvbnN0UG9pbnRlclR5cGVdLGJhc2VDbGFzc1Jhd1R5cGU/W2Jhc2VDbGFzc1Jhd1R5cGVdOltdLGJhc2U9PntiYXNlPWJhc2VbMF07dmFyIGJhc2VDbGFzczt2YXIgYmFzZVByb3RvdHlwZTtpZihiYXNlQ2xhc3NSYXdUeXBlKXtiYXNlQ2xhc3M9YmFzZS5yZWdpc3RlcmVkQ2xhc3M7YmFzZVByb3RvdHlwZT1iYXNlQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGV9ZWxzZXtiYXNlUHJvdG90eXBlPUNsYXNzSGFuZGxlLnByb3RvdHlwZX12YXIgY29uc3RydWN0b3I9Y3JlYXRlTmFtZWRGdW5jdGlvbihuYW1lLGZ1bmN0aW9uKC4uLmFyZ3Mpe2lmKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSE9PWluc3RhbmNlUHJvdG90eXBlKXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKFwiVXNlICduZXcnIHRvIGNvbnN0cnVjdCBcIituYW1lKX1pZih1bmRlZmluZWQ9PT1yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihuYW1lK1wiIGhhcyBubyBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yXCIpfXZhciBib2R5PXJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ3MubGVuZ3RoXTtpZih1bmRlZmluZWQ9PT1ib2R5KXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKGBUcmllZCB0byBpbnZva2UgY3RvciBvZiAke25hbWV9IHdpdGggaW52YWxpZCBudW1iZXIgb2YgcGFyYW1ldGVycyAoJHthcmdzLmxlbmd0aH0pIC0gZXhwZWN0ZWQgKCR7T2JqZWN0LmtleXMocmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpLnRvU3RyaW5nKCl9KSBwYXJhbWV0ZXJzIGluc3RlYWQhYCl9cmV0dXJuIGJvZHkuYXBwbHkodGhpcyxhcmdzKX0pO3ZhciBpbnN0YW5jZVByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGJhc2VQcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpjb25zdHJ1Y3Rvcn19KTtjb25zdHJ1Y3Rvci5wcm90b3R5cGU9aW5zdGFuY2VQcm90b3R5cGU7dmFyIHJlZ2lzdGVyZWRDbGFzcz1uZXcgUmVnaXN0ZXJlZENsYXNzKG5hbWUsY29uc3RydWN0b3IsaW5zdGFuY2VQcm90b3R5cGUscmF3RGVzdHJ1Y3RvcixiYXNlQ2xhc3MsZ2V0QWN0dWFsVHlwZSx1cGNhc3QsZG93bmNhc3QpO2lmKHJlZ2lzdGVyZWRDbGFzcy5iYXNlQ2xhc3Mpe3JlZ2lzdGVyZWRDbGFzcy5iYXNlQ2xhc3MuX19kZXJpdmVkQ2xhc3Nlcz8/PVtdO3JlZ2lzdGVyZWRDbGFzcy5iYXNlQ2xhc3MuX19kZXJpdmVkQ2xhc3Nlcy5wdXNoKHJlZ2lzdGVyZWRDbGFzcyl9dmFyIHJlZmVyZW5jZUNvbnZlcnRlcj1uZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSxyZWdpc3RlcmVkQ2xhc3MsdHJ1ZSxmYWxzZSxmYWxzZSk7dmFyIHBvaW50ZXJDb252ZXJ0ZXI9bmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUrXCIqXCIscmVnaXN0ZXJlZENsYXNzLGZhbHNlLGZhbHNlLGZhbHNlKTt2YXIgY29uc3RQb2ludGVyQ29udmVydGVyPW5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lK1wiIGNvbnN0KlwiLHJlZ2lzdGVyZWRDbGFzcyxmYWxzZSx0cnVlLGZhbHNlKTtyZWdpc3RlcmVkUG9pbnRlcnNbcmF3VHlwZV09e3BvaW50ZXJUeXBlOnBvaW50ZXJDb252ZXJ0ZXIsY29uc3RQb2ludGVyVHlwZTpjb25zdFBvaW50ZXJDb252ZXJ0ZXJ9O3JlcGxhY2VQdWJsaWNTeW1ib2wobGVnYWxGdW5jdGlvbk5hbWUsY29uc3RydWN0b3IpO3JldHVybltyZWZlcmVuY2VDb252ZXJ0ZXIscG9pbnRlckNvbnZlcnRlcixjb25zdFBvaW50ZXJDb252ZXJ0ZXJdfSl9O3ZhciBoZWFwMzJWZWN0b3JUb0FycmF5PShjb3VudCxmaXJzdEVsZW1lbnQpPT57dmFyIGFycmF5PVtdO2Zvcih2YXIgaT0wO2k8Y291bnQ7aSsrKXthcnJheS5wdXNoKEhFQVBVMzJbZmlyc3RFbGVtZW50K2kqND4+Ml0pfXJldHVybiBhcnJheX07ZnVuY3Rpb24gdXNlc0Rlc3RydWN0b3JTdGFjayhhcmdUeXBlcyl7Zm9yKHZhciBpPTE7aTxhcmdUeXBlcy5sZW5ndGg7KytpKXtpZihhcmdUeXBlc1tpXSE9PW51bGwmJmFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbj09PXVuZGVmaW5lZCl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX1mdW5jdGlvbiBuZXdGdW5jKGNvbnN0cnVjdG9yLGFyZ3VtZW50TGlzdCl7aWYoIShjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihgbmV3XyBjYWxsZWQgd2l0aCBjb25zdHJ1Y3RvciB0eXBlICR7dHlwZW9mIGNvbnN0cnVjdG9yfSB3aGljaCBpcyBub3QgYSBmdW5jdGlvbmApfXZhciBkdW1teT1jcmVhdGVOYW1lZEZ1bmN0aW9uKGNvbnN0cnVjdG9yLm5hbWV8fFwidW5rbm93bkZ1bmN0aW9uTmFtZVwiLGZ1bmN0aW9uKCl7fSk7ZHVtbXkucHJvdG90eXBlPWNvbnN0cnVjdG9yLnByb3RvdHlwZTt2YXIgb2JqPW5ldyBkdW1teTt2YXIgcj1jb25zdHJ1Y3Rvci5hcHBseShvYmosYXJndW1lbnRMaXN0KTtyZXR1cm4gciBpbnN0YW5jZW9mIE9iamVjdD9yOm9ian1mdW5jdGlvbiBjcmVhdGVKc0ludm9rZXIoYXJnVHlwZXMsaXNDbGFzc01ldGhvZEZ1bmMscmV0dXJucyxpc0FzeW5jKXt2YXIgbmVlZHNEZXN0cnVjdG9yU3RhY2s9dXNlc0Rlc3RydWN0b3JTdGFjayhhcmdUeXBlcyk7dmFyIGFyZ0NvdW50PWFyZ1R5cGVzLmxlbmd0aC0yO3ZhciBhcmdzTGlzdD1bXTt2YXIgYXJnc0xpc3RXaXJlZD1bXCJmblwiXTtpZihpc0NsYXNzTWV0aG9kRnVuYyl7YXJnc0xpc3RXaXJlZC5wdXNoKFwidGhpc1dpcmVkXCIpfWZvcih2YXIgaT0wO2k8YXJnQ291bnQ7KytpKXthcmdzTGlzdC5wdXNoKGBhcmcke2l9YCk7YXJnc0xpc3RXaXJlZC5wdXNoKGBhcmcke2l9V2lyZWRgKX1hcmdzTGlzdD1hcmdzTGlzdC5qb2luKFwiLFwiKTthcmdzTGlzdFdpcmVkPWFyZ3NMaXN0V2lyZWQuam9pbihcIixcIik7dmFyIGludm9rZXJGbkJvZHk9YHJldHVybiBmdW5jdGlvbiAoJHthcmdzTGlzdH0pIHtcXG5gO2lmKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKXtpbnZva2VyRm5Cb2R5Kz1cInZhciBkZXN0cnVjdG9ycyA9IFtdO1xcblwifXZhciBkdG9yU3RhY2s9bmVlZHNEZXN0cnVjdG9yU3RhY2s/XCJkZXN0cnVjdG9yc1wiOlwibnVsbFwiO3ZhciBhcmdzMT1bXCJodW1hbk5hbWVcIixcInRocm93QmluZGluZ0Vycm9yXCIsXCJpbnZva2VyXCIsXCJmblwiLFwicnVuRGVzdHJ1Y3RvcnNcIixcInJldFR5cGVcIixcImNsYXNzUGFyYW1cIl07aWYoaXNDbGFzc01ldGhvZEZ1bmMpe2ludm9rZXJGbkJvZHkrPWB2YXIgdGhpc1dpcmVkID0gY2xhc3NQYXJhbVsndG9XaXJlVHlwZSddKCR7ZHRvclN0YWNrfSwgdGhpcyk7XFxuYH1mb3IodmFyIGk9MDtpPGFyZ0NvdW50OysraSl7aW52b2tlckZuQm9keSs9YHZhciBhcmcke2l9V2lyZWQgPSBhcmdUeXBlJHtpfVsndG9XaXJlVHlwZSddKCR7ZHRvclN0YWNrfSwgYXJnJHtpfSk7XFxuYDthcmdzMS5wdXNoKGBhcmdUeXBlJHtpfWApfWludm9rZXJGbkJvZHkrPShyZXR1cm5zfHxpc0FzeW5jP1widmFyIHJ2ID0gXCI6XCJcIikrYGludm9rZXIoJHthcmdzTGlzdFdpcmVkfSk7XFxuYDtpZihuZWVkc0Rlc3RydWN0b3JTdGFjayl7aW52b2tlckZuQm9keSs9XCJydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7XFxuXCJ9ZWxzZXtmb3IodmFyIGk9aXNDbGFzc01ldGhvZEZ1bmM/MToyO2k8YXJnVHlwZXMubGVuZ3RoOysraSl7dmFyIHBhcmFtTmFtZT1pPT09MT9cInRoaXNXaXJlZFwiOlwiYXJnXCIrKGktMikrXCJXaXJlZFwiO2lmKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbiE9PW51bGwpe2ludm9rZXJGbkJvZHkrPWAke3BhcmFtTmFtZX1fZHRvcigke3BhcmFtTmFtZX0pO1xcbmA7YXJnczEucHVzaChgJHtwYXJhbU5hbWV9X2R0b3JgKX19fWlmKHJldHVybnMpe2ludm9rZXJGbkJvZHkrPVwidmFyIHJldCA9IHJldFR5cGVbJ2Zyb21XaXJlVHlwZSddKHJ2KTtcXG5cIitcInJldHVybiByZXQ7XFxuXCJ9ZWxzZXt9aW52b2tlckZuQm9keSs9XCJ9XFxuXCI7cmV0dXJuW2FyZ3MxLGludm9rZXJGbkJvZHldfWZ1bmN0aW9uIGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyxpc0FzeW5jKXt2YXIgYXJnQ291bnQ9YXJnVHlwZXMubGVuZ3RoO2lmKGFyZ0NvdW50PDIpe3Rocm93QmluZGluZ0Vycm9yKFwiYXJnVHlwZXMgYXJyYXkgc2l6ZSBtaXNtYXRjaCEgTXVzdCBhdCBsZWFzdCBnZXQgcmV0dXJuIHZhbHVlIGFuZCAndGhpcycgdHlwZXMhXCIpfXZhciBpc0NsYXNzTWV0aG9kRnVuYz1hcmdUeXBlc1sxXSE9PW51bGwmJmNsYXNzVHlwZSE9PW51bGw7dmFyIG5lZWRzRGVzdHJ1Y3RvclN0YWNrPXVzZXNEZXN0cnVjdG9yU3RhY2soYXJnVHlwZXMpO3ZhciByZXR1cm5zPWFyZ1R5cGVzWzBdLm5hbWUhPT1cInZvaWRcIjt2YXIgY2xvc3VyZUFyZ3M9W2h1bWFuTmFtZSx0aHJvd0JpbmRpbmdFcnJvcixjcHBJbnZva2VyRnVuYyxjcHBUYXJnZXRGdW5jLHJ1bkRlc3RydWN0b3JzLGFyZ1R5cGVzWzBdLGFyZ1R5cGVzWzFdXTtmb3IodmFyIGk9MDtpPGFyZ0NvdW50LTI7KytpKXtjbG9zdXJlQXJncy5wdXNoKGFyZ1R5cGVzW2krMl0pfWlmKCFuZWVkc0Rlc3RydWN0b3JTdGFjayl7Zm9yKHZhciBpPWlzQ2xhc3NNZXRob2RGdW5jPzE6MjtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe2lmKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbiE9PW51bGwpe2Nsb3N1cmVBcmdzLnB1c2goYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uKX19fWxldFthcmdzLGludm9rZXJGbkJvZHldPWNyZWF0ZUpzSW52b2tlcihhcmdUeXBlcyxpc0NsYXNzTWV0aG9kRnVuYyxyZXR1cm5zLGlzQXN5bmMpO2FyZ3MucHVzaChpbnZva2VyRm5Cb2R5KTt2YXIgaW52b2tlckZuPW5ld0Z1bmMoRnVuY3Rpb24sYXJncykoLi4uY2xvc3VyZUFyZ3MpO3JldHVybiBjcmVhdGVOYW1lZEZ1bmN0aW9uKGh1bWFuTmFtZSxpbnZva2VyRm4pfXZhciBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3Rvcj0ocmF3Q2xhc3NUeXBlLGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcixpbnZva2VyU2lnbmF0dXJlLGludm9rZXIscmF3Q29uc3RydWN0b3IpPT57dmFyIHJhd0FyZ1R5cGVzPWhlYXAzMlZlY3RvclRvQXJyYXkoYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyKTtpbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGludm9rZXJTaWduYXR1cmUsaW52b2tlcik7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3Jhd0NsYXNzVHlwZV0sY2xhc3NUeXBlPT57Y2xhc3NUeXBlPWNsYXNzVHlwZVswXTt2YXIgaHVtYW5OYW1lPWBjb25zdHJ1Y3RvciAke2NsYXNzVHlwZS5uYW1lfWA7aWYodW5kZWZpbmVkPT09Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KXtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHk9W119aWYodW5kZWZpbmVkIT09Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50LTFdKXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKGBDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgY29uc3RydWN0b3JzIHdpdGggaWRlbnRpY2FsIG51bWJlciBvZiBwYXJhbWV0ZXJzICgke2FyZ0NvdW50LTF9KSBmb3IgY2xhc3MgJyR7Y2xhc3NUeXBlLm5hbWV9JyEgT3ZlcmxvYWQgcmVzb2x1dGlvbiBpcyBjdXJyZW50bHkgb25seSBwZXJmb3JtZWQgdXNpbmcgdGhlIHBhcmFtZXRlciBjb3VudCwgbm90IGFjdHVhbCB0eXBlIGluZm8hYCl9Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50LTFdPSgpPT57dGhyb3dVbmJvdW5kVHlwZUVycm9yKGBDYW5ub3QgY29uc3RydWN0ICR7Y2xhc3NUeXBlLm5hbWV9IGR1ZSB0byB1bmJvdW5kIHR5cGVzYCxyYXdBcmdUeXBlcyl9O3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLHJhd0FyZ1R5cGVzLGFyZ1R5cGVzPT57YXJnVHlwZXMuc3BsaWNlKDEsMCxudWxsKTtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQtMV09Y3JhZnRJbnZva2VyRnVuY3Rpb24oaHVtYW5OYW1lLGFyZ1R5cGVzLG51bGwsaW52b2tlcixyYXdDb25zdHJ1Y3Rvcik7cmV0dXJuW119KTtyZXR1cm5bXX0pfTt2YXIgZ2V0RnVuY3Rpb25OYW1lPXNpZ25hdHVyZT0+e3NpZ25hdHVyZT1zaWduYXR1cmUudHJpbSgpO2NvbnN0IGFyZ3NJbmRleD1zaWduYXR1cmUuaW5kZXhPZihcIihcIik7aWYoYXJnc0luZGV4IT09LTEpe3JldHVybiBzaWduYXR1cmUuc3Vic3RyKDAsYXJnc0luZGV4KX1lbHNle3JldHVybiBzaWduYXR1cmV9fTt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb249KHJhd0NsYXNzVHlwZSxtZXRob2ROYW1lLGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcixpbnZva2VyU2lnbmF0dXJlLHJhd0ludm9rZXIsY29udGV4dCxpc1B1cmVWaXJ0dWFsLGlzQXN5bmMsaXNOb25udWxsUmV0dXJuKT0+e3ZhciByYXdBcmdUeXBlcz1oZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcik7bWV0aG9kTmFtZT1yZWFkTGF0aW4xU3RyaW5nKG1ldGhvZE5hbWUpO21ldGhvZE5hbWU9Z2V0RnVuY3Rpb25OYW1lKG1ldGhvZE5hbWUpO3Jhd0ludm9rZXI9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oaW52b2tlclNpZ25hdHVyZSxyYXdJbnZva2VyKTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxbcmF3Q2xhc3NUeXBlXSxjbGFzc1R5cGU9PntjbGFzc1R5cGU9Y2xhc3NUeXBlWzBdO3ZhciBodW1hbk5hbWU9YCR7Y2xhc3NUeXBlLm5hbWV9LiR7bWV0aG9kTmFtZX1gO2lmKG1ldGhvZE5hbWUuc3RhcnRzV2l0aChcIkBAXCIpKXttZXRob2ROYW1lPVN5bWJvbFttZXRob2ROYW1lLnN1YnN0cmluZygyKV19aWYoaXNQdXJlVmlydHVhbCl7Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5wdXJlVmlydHVhbEZ1bmN0aW9ucy5wdXNoKG1ldGhvZE5hbWUpfWZ1bmN0aW9uIHVuYm91bmRUeXBlc0hhbmRsZXIoKXt0aHJvd1VuYm91bmRUeXBlRXJyb3IoYENhbm5vdCBjYWxsICR7aHVtYW5OYW1lfSBkdWUgdG8gdW5ib3VuZCB0eXBlc2AscmF3QXJnVHlwZXMpfXZhciBwcm90bz1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlO3ZhciBtZXRob2Q9cHJvdG9bbWV0aG9kTmFtZV07aWYodW5kZWZpbmVkPT09bWV0aG9kfHx1bmRlZmluZWQ9PT1tZXRob2Qub3ZlcmxvYWRUYWJsZSYmbWV0aG9kLmNsYXNzTmFtZSE9PWNsYXNzVHlwZS5uYW1lJiZtZXRob2QuYXJnQ291bnQ9PT1hcmdDb3VudC0yKXt1bmJvdW5kVHlwZXNIYW5kbGVyLmFyZ0NvdW50PWFyZ0NvdW50LTI7dW5ib3VuZFR5cGVzSGFuZGxlci5jbGFzc05hbWU9Y2xhc3NUeXBlLm5hbWU7cHJvdG9bbWV0aG9kTmFtZV09dW5ib3VuZFR5cGVzSGFuZGxlcn1lbHNle2Vuc3VyZU92ZXJsb2FkVGFibGUocHJvdG8sbWV0aG9kTmFtZSxodW1hbk5hbWUpO3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJnQ291bnQtMl09dW5ib3VuZFR5cGVzSGFuZGxlcn13aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxyYXdBcmdUeXBlcyxhcmdUeXBlcz0+e3ZhciBtZW1iZXJGdW5jdGlvbj1jcmFmdEludm9rZXJGdW5jdGlvbihodW1hbk5hbWUsYXJnVHlwZXMsY2xhc3NUeXBlLHJhd0ludm9rZXIsY29udGV4dCxpc0FzeW5jKTtpZih1bmRlZmluZWQ9PT1wcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKXttZW1iZXJGdW5jdGlvbi5hcmdDb3VudD1hcmdDb3VudC0yO3Byb3RvW21ldGhvZE5hbWVdPW1lbWJlckZ1bmN0aW9ufWVsc2V7cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmdDb3VudC0yXT1tZW1iZXJGdW5jdGlvbn1yZXR1cm5bXX0pO3JldHVybltdfSl9O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudD0obmFtZSx0eXBlLHZhbHVlKT0+e25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxbdHlwZV0sdHlwZT0+e3R5cGU9dHlwZVswXTtNb2R1bGVbbmFtZV09dHlwZVtcImZyb21XaXJlVHlwZVwiXSh2YWx1ZSk7cmV0dXJuW119KX07dmFyIGVtdmFsX2ZyZWVsaXN0PVtdO3ZhciBlbXZhbF9oYW5kbGVzPVtdO3ZhciBfX2VtdmFsX2RlY3JlZj1oYW5kbGU9PntpZihoYW5kbGU+OSYmMD09PS0tZW12YWxfaGFuZGxlc1toYW5kbGUrMV0pe2VtdmFsX2hhbmRsZXNbaGFuZGxlXT11bmRlZmluZWQ7ZW12YWxfZnJlZWxpc3QucHVzaChoYW5kbGUpfX07dmFyIGNvdW50X2VtdmFsX2hhbmRsZXM9KCk9PmVtdmFsX2hhbmRsZXMubGVuZ3RoLzItNS1lbXZhbF9mcmVlbGlzdC5sZW5ndGg7dmFyIGluaXRfZW12YWw9KCk9PntlbXZhbF9oYW5kbGVzLnB1c2goMCwxLHVuZGVmaW5lZCwxLG51bGwsMSx0cnVlLDEsZmFsc2UsMSk7TW9kdWxlW1wiY291bnRfZW12YWxfaGFuZGxlc1wiXT1jb3VudF9lbXZhbF9oYW5kbGVzfTt2YXIgRW12YWw9e3RvVmFsdWU6aGFuZGxlPT57aWYoIWhhbmRsZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSBcIitoYW5kbGUpfXJldHVybiBlbXZhbF9oYW5kbGVzW2hhbmRsZV19LHRvSGFuZGxlOnZhbHVlPT57c3dpdGNoKHZhbHVlKXtjYXNlIHVuZGVmaW5lZDpyZXR1cm4gMjtjYXNlIG51bGw6cmV0dXJuIDQ7Y2FzZSB0cnVlOnJldHVybiA2O2Nhc2UgZmFsc2U6cmV0dXJuIDg7ZGVmYXVsdDp7Y29uc3QgaGFuZGxlPWVtdmFsX2ZyZWVsaXN0LnBvcCgpfHxlbXZhbF9oYW5kbGVzLmxlbmd0aDtlbXZhbF9oYW5kbGVzW2hhbmRsZV09dmFsdWU7ZW12YWxfaGFuZGxlc1toYW5kbGUrMV09MTtyZXR1cm4gaGFuZGxlfX19fTt2YXIgRW1WYWxUeXBlPXtuYW1lOlwiZW1zY3JpcHRlbjo6dmFsXCIsZnJvbVdpcmVUeXBlOmhhbmRsZT0+e3ZhciBydj1FbXZhbC50b1ZhbHVlKGhhbmRsZSk7X19lbXZhbF9kZWNyZWYoaGFuZGxlKTtyZXR1cm4gcnZ9LHRvV2lyZVR5cGU6KGRlc3RydWN0b3JzLHZhbHVlKT0+RW12YWwudG9IYW5kbGUodmFsdWUpLGFyZ1BhY2tBZHZhbmNlOkdlbmVyaWNXaXJlVHlwZVNpemUscmVhZFZhbHVlRnJvbVBvaW50ZXI6cmVhZFBvaW50ZXIsZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbD1yYXdUeXBlPT5yZWdpc3RlclR5cGUocmF3VHlwZSxFbVZhbFR5cGUpO3ZhciBlbWJpbmRSZXByPXY9PntpZih2PT09bnVsbCl7cmV0dXJuXCJudWxsXCJ9dmFyIHQ9dHlwZW9mIHY7aWYodD09PVwib2JqZWN0XCJ8fHQ9PT1cImFycmF5XCJ8fHQ9PT1cImZ1bmN0aW9uXCIpe3JldHVybiB2LnRvU3RyaW5nKCl9ZWxzZXtyZXR1cm5cIlwiK3Z9fTt2YXIgZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcj0obmFtZSx3aWR0aCk9Pntzd2l0Y2god2lkdGgpe2Nhc2UgNDpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUEYzMltwb2ludGVyPj4yXSl9O2Nhc2UgODpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUEY2NFtwb2ludGVyPj4zXSl9O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBmbG9hdCB3aWR0aCAoJHt3aWR0aH0pOiAke25hbWV9YCl9fTt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfZmxvYXQ9KHJhd1R5cGUsbmFtZSxzaXplKT0+e25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZSxmcm9tV2lyZVR5cGU6dmFsdWU9PnZhbHVlLHRvV2lyZVR5cGU6KGRlc3RydWN0b3JzLHZhbHVlKT0+dmFsdWUsYXJnUGFja0FkdmFuY2U6R2VuZXJpY1dpcmVUeXBlU2l6ZSxyZWFkVmFsdWVGcm9tUG9pbnRlcjpmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2l6ZSksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX07dmFyIGludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcj0obmFtZSx3aWR0aCxzaWduZWQpPT57c3dpdGNoKHdpZHRoKXtjYXNlIDE6cmV0dXJuIHNpZ25lZD9wb2ludGVyPT5IRUFQOFtwb2ludGVyXTpwb2ludGVyPT5IRUFQVThbcG9pbnRlcl07Y2FzZSAyOnJldHVybiBzaWduZWQ/cG9pbnRlcj0+SEVBUDE2W3BvaW50ZXI+PjFdOnBvaW50ZXI9PkhFQVBVMTZbcG9pbnRlcj4+MV07Y2FzZSA0OnJldHVybiBzaWduZWQ/cG9pbnRlcj0+SEVBUDMyW3BvaW50ZXI+PjJdOnBvaW50ZXI9PkhFQVBVMzJbcG9pbnRlcj4+Ml07ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnZhbGlkIGludGVnZXIgd2lkdGggKCR7d2lkdGh9KTogJHtuYW1lfWApfX07dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXI9KHByaW1pdGl2ZVR5cGUsbmFtZSxzaXplLG1pblJhbmdlLG1heFJhbmdlKT0+e25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtpZihtYXhSYW5nZT09PS0xKXttYXhSYW5nZT00Mjk0OTY3Mjk1fXZhciBmcm9tV2lyZVR5cGU9dmFsdWU9PnZhbHVlO2lmKG1pblJhbmdlPT09MCl7dmFyIGJpdHNoaWZ0PTMyLTgqc2l6ZTtmcm9tV2lyZVR5cGU9dmFsdWU9PnZhbHVlPDxiaXRzaGlmdD4+PmJpdHNoaWZ0fXZhciBpc1Vuc2lnbmVkVHlwZT1uYW1lLmluY2x1ZGVzKFwidW5zaWduZWRcIik7dmFyIGNoZWNrQXNzZXJ0aW9ucz0odmFsdWUsdG9UeXBlTmFtZSk9Pnt9O3ZhciB0b1dpcmVUeXBlO2lmKGlzVW5zaWduZWRUeXBlKXt0b1dpcmVUeXBlPWZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtjaGVja0Fzc2VydGlvbnModmFsdWUsdGhpcy5uYW1lKTtyZXR1cm4gdmFsdWU+Pj4wfX1lbHNle3RvV2lyZVR5cGU9ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2NoZWNrQXNzZXJ0aW9ucyh2YWx1ZSx0aGlzLm5hbWUpO3JldHVybiB2YWx1ZX19cmVnaXN0ZXJUeXBlKHByaW1pdGl2ZVR5cGUse25hbWUsZnJvbVdpcmVUeXBlLHRvV2lyZVR5cGUsYXJnUGFja0FkdmFuY2U6R2VuZXJpY1dpcmVUeXBlU2l6ZSxyZWFkVmFsdWVGcm9tUG9pbnRlcjppbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaXplLG1pblJhbmdlIT09MCksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX07dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3PShyYXdUeXBlLGRhdGFUeXBlSW5kZXgsbmFtZSk9Pnt2YXIgdHlwZU1hcHBpbmc9W0ludDhBcnJheSxVaW50OEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5XTt2YXIgVEE9dHlwZU1hcHBpbmdbZGF0YVR5cGVJbmRleF07ZnVuY3Rpb24gZGVjb2RlTWVtb3J5VmlldyhoYW5kbGUpe3ZhciBzaXplPUhFQVBVMzJbaGFuZGxlPj4yXTt2YXIgZGF0YT1IRUFQVTMyW2hhbmRsZSs0Pj4yXTtyZXR1cm4gbmV3IFRBKEhFQVA4LmJ1ZmZlcixkYXRhLHNpemUpfW5hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZSxmcm9tV2lyZVR5cGU6ZGVjb2RlTWVtb3J5VmlldyxhcmdQYWNrQWR2YW5jZTpHZW5lcmljV2lyZVR5cGVTaXplLHJlYWRWYWx1ZUZyb21Qb2ludGVyOmRlY29kZU1lbW9yeVZpZXd9LHtpZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zOnRydWV9KX07dmFyIEVtVmFsT3B0aW9uYWxUeXBlPU9iamVjdC5hc3NpZ24oe29wdGlvbmFsOnRydWV9LEVtVmFsVHlwZSk7dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX29wdGlvbmFsPShyYXdPcHRpb25hbFR5cGUscmF3VHlwZSk9PntyZWdpc3RlclR5cGUocmF3T3B0aW9uYWxUeXBlLEVtVmFsT3B0aW9uYWxUeXBlKX07dmFyIHN0cmluZ1RvVVRGOD0oc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpPT5zdHJpbmdUb1VURjhBcnJheShzdHIsSEVBUFU4LG91dFB0cixtYXhCeXRlc1RvV3JpdGUpO3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nPShyYXdUeXBlLG5hbWUpPT57bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBzdGRTdHJpbmdJc1VURjg9bmFtZT09PVwic3RkOjpzdHJpbmdcIjtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZSxmcm9tV2lyZVR5cGUodmFsdWUpe3ZhciBsZW5ndGg9SEVBUFUzMlt2YWx1ZT4+Ml07dmFyIHBheWxvYWQ9dmFsdWUrNDt2YXIgc3RyO2lmKHN0ZFN0cmluZ0lzVVRGOCl7dmFyIGRlY29kZVN0YXJ0UHRyPXBheWxvYWQ7Zm9yKHZhciBpPTA7aTw9bGVuZ3RoOysraSl7dmFyIGN1cnJlbnRCeXRlUHRyPXBheWxvYWQraTtpZihpPT1sZW5ndGh8fEhFQVBVOFtjdXJyZW50Qnl0ZVB0cl09PTApe3ZhciBtYXhSZWFkPWN1cnJlbnRCeXRlUHRyLWRlY29kZVN0YXJ0UHRyO3ZhciBzdHJpbmdTZWdtZW50PVVURjhUb1N0cmluZyhkZWNvZGVTdGFydFB0cixtYXhSZWFkKTtpZihzdHI9PT11bmRlZmluZWQpe3N0cj1zdHJpbmdTZWdtZW50fWVsc2V7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDApO3N0cis9c3RyaW5nU2VnbWVudH1kZWNvZGVTdGFydFB0cj1jdXJyZW50Qnl0ZVB0cisxfX19ZWxzZXt2YXIgYT1uZXcgQXJyYXkobGVuZ3RoKTtmb3IodmFyIGk9MDtpPGxlbmd0aDsrK2kpe2FbaV09U3RyaW5nLmZyb21DaGFyQ29kZShIRUFQVThbcGF5bG9hZCtpXSl9c3RyPWEuam9pbihcIlwiKX1fZnJlZSh2YWx1ZSk7cmV0dXJuIHN0cn0sdG9XaXJlVHlwZShkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7dmFsdWU9bmV3IFVpbnQ4QXJyYXkodmFsdWUpfXZhciBsZW5ndGg7dmFyIHZhbHVlSXNPZlR5cGVTdHJpbmc9dHlwZW9mIHZhbHVlPT1cInN0cmluZ1wiO2lmKCEodmFsdWVJc09mVHlwZVN0cmluZ3x8dmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHx2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5fHx2YWx1ZSBpbnN0YW5jZW9mIEludDhBcnJheSkpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBzdGQ6OnN0cmluZ1wiKX1pZihzdGRTdHJpbmdJc1VURjgmJnZhbHVlSXNPZlR5cGVTdHJpbmcpe2xlbmd0aD1sZW5ndGhCeXRlc1VURjgodmFsdWUpfWVsc2V7bGVuZ3RoPXZhbHVlLmxlbmd0aH12YXIgYmFzZT1fbWFsbG9jKDQrbGVuZ3RoKzEpO3ZhciBwdHI9YmFzZSs0O0hFQVBVMzJbYmFzZT4+Ml09bGVuZ3RoO2lmKHN0ZFN0cmluZ0lzVVRGOCYmdmFsdWVJc09mVHlwZVN0cmluZyl7c3RyaW5nVG9VVEY4KHZhbHVlLHB0cixsZW5ndGgrMSl9ZWxzZXtpZih2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtmb3IodmFyIGk9MDtpPGxlbmd0aDsrK2kpe3ZhciBjaGFyQ29kZT12YWx1ZS5jaGFyQ29kZUF0KGkpO2lmKGNoYXJDb2RlPjI1NSl7X2ZyZWUocHRyKTt0aHJvd0JpbmRpbmdFcnJvcihcIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0c1wiKX1IRUFQVThbcHRyK2ldPWNoYXJDb2RlfX1lbHNle2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7SEVBUFU4W3B0citpXT12YWx1ZVtpXX19fWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxiYXNlKX1yZXR1cm4gYmFzZX0sYXJnUGFja0FkdmFuY2U6R2VuZXJpY1dpcmVUeXBlU2l6ZSxyZWFkVmFsdWVGcm9tUG9pbnRlcjpyZWFkUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfTt2YXIgVVRGMTZEZWNvZGVyPXR5cGVvZiBUZXh0RGVjb2RlciE9XCJ1bmRlZmluZWRcIj9uZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTp1bmRlZmluZWQ7dmFyIFVURjE2VG9TdHJpbmc9KHB0cixtYXhCeXRlc1RvUmVhZCk9Pnt2YXIgZW5kUHRyPXB0cjt2YXIgaWR4PWVuZFB0cj4+MTt2YXIgbWF4SWR4PWlkeCttYXhCeXRlc1RvUmVhZC8yO3doaWxlKCEoaWR4Pj1tYXhJZHgpJiZIRUFQVTE2W2lkeF0pKytpZHg7ZW5kUHRyPWlkeDw8MTtpZihlbmRQdHItcHRyPjMyJiZVVEYxNkRlY29kZXIpcmV0dXJuIFVURjE2RGVjb2Rlci5kZWNvZGUoSEVBUFU4LnNsaWNlKHB0cixlbmRQdHIpKTt2YXIgc3RyPVwiXCI7Zm9yKHZhciBpPTA7IShpPj1tYXhCeXRlc1RvUmVhZC8yKTsrK2kpe3ZhciBjb2RlVW5pdD1IRUFQMTZbcHRyK2kqMj4+MV07aWYoY29kZVVuaXQ9PTApYnJlYWs7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVVbml0KX1yZXR1cm4gc3RyfTt2YXIgc3RyaW5nVG9VVEYxNj0oc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpPT57bWF4Qnl0ZXNUb1dyaXRlPz89MjE0NzQ4MzY0NztpZihtYXhCeXRlc1RvV3JpdGU8MilyZXR1cm4gMDttYXhCeXRlc1RvV3JpdGUtPTI7dmFyIHN0YXJ0UHRyPW91dFB0cjt2YXIgbnVtQ2hhcnNUb1dyaXRlPW1heEJ5dGVzVG9Xcml0ZTxzdHIubGVuZ3RoKjI/bWF4Qnl0ZXNUb1dyaXRlLzI6c3RyLmxlbmd0aDtmb3IodmFyIGk9MDtpPG51bUNoYXJzVG9Xcml0ZTsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtIRUFQMTZbb3V0UHRyPj4xXT1jb2RlVW5pdDtvdXRQdHIrPTJ9SEVBUDE2W291dFB0cj4+MV09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfTt2YXIgbGVuZ3RoQnl0ZXNVVEYxNj1zdHI9PnN0ci5sZW5ndGgqMjt2YXIgVVRGMzJUb1N0cmluZz0ocHRyLG1heEJ5dGVzVG9SZWFkKT0+e3ZhciBpPTA7dmFyIHN0cj1cIlwiO3doaWxlKCEoaT49bWF4Qnl0ZXNUb1JlYWQvNCkpe3ZhciB1dGYzMj1IRUFQMzJbcHRyK2kqND4+Ml07aWYodXRmMzI9PTApYnJlYWs7KytpO2lmKHV0ZjMyPj02NTUzNil7dmFyIGNoPXV0ZjMyLTY1NTM2O3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxjaD4+MTAsNTYzMjB8Y2gmMTAyMyl9ZWxzZXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodXRmMzIpfX1yZXR1cm4gc3RyfTt2YXIgc3RyaW5nVG9VVEYzMj0oc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpPT57bWF4Qnl0ZXNUb1dyaXRlPz89MjE0NzQ4MzY0NztpZihtYXhCeXRlc1RvV3JpdGU8NClyZXR1cm4gMDt2YXIgc3RhcnRQdHI9b3V0UHRyO3ZhciBlbmRQdHI9c3RhcnRQdHIrbWF4Qnl0ZXNUb1dyaXRlLTQ7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKXt2YXIgdHJhaWxTdXJyb2dhdGU9c3RyLmNoYXJDb2RlQXQoKytpKTtjb2RlVW5pdD02NTUzNisoKGNvZGVVbml0JjEwMjMpPDwxMCl8dHJhaWxTdXJyb2dhdGUmMTAyM31IRUFQMzJbb3V0UHRyPj4yXT1jb2RlVW5pdDtvdXRQdHIrPTQ7aWYob3V0UHRyKzQ+ZW5kUHRyKWJyZWFrfUhFQVAzMltvdXRQdHI+PjJdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn07dmFyIGxlbmd0aEJ5dGVzVVRGMzI9c3RyPT57dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtpZihjb2RlVW5pdD49NTUyOTYmJmNvZGVVbml0PD01NzM0MykrK2k7bGVuKz00fXJldHVybiBsZW59O3ZhciBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZz0ocmF3VHlwZSxjaGFyU2l6ZSxuYW1lKT0+e25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTt2YXIgZGVjb2RlU3RyaW5nLGVuY29kZVN0cmluZyxyZWFkQ2hhckF0LGxlbmd0aEJ5dGVzVVRGO2lmKGNoYXJTaXplPT09Mil7ZGVjb2RlU3RyaW5nPVVURjE2VG9TdHJpbmc7ZW5jb2RlU3RyaW5nPXN0cmluZ1RvVVRGMTY7bGVuZ3RoQnl0ZXNVVEY9bGVuZ3RoQnl0ZXNVVEYxNjtyZWFkQ2hhckF0PXBvaW50ZXI9PkhFQVBVMTZbcG9pbnRlcj4+MV19ZWxzZSBpZihjaGFyU2l6ZT09PTQpe2RlY29kZVN0cmluZz1VVEYzMlRvU3RyaW5nO2VuY29kZVN0cmluZz1zdHJpbmdUb1VURjMyO2xlbmd0aEJ5dGVzVVRGPWxlbmd0aEJ5dGVzVVRGMzI7cmVhZENoYXJBdD1wb2ludGVyPT5IRUFQVTMyW3BvaW50ZXI+PjJdfXJlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lLGZyb21XaXJlVHlwZTp2YWx1ZT0+e3ZhciBsZW5ndGg9SEVBUFUzMlt2YWx1ZT4+Ml07dmFyIHN0cjt2YXIgZGVjb2RlU3RhcnRQdHI9dmFsdWUrNDtmb3IodmFyIGk9MDtpPD1sZW5ndGg7KytpKXt2YXIgY3VycmVudEJ5dGVQdHI9dmFsdWUrNCtpKmNoYXJTaXplO2lmKGk9PWxlbmd0aHx8cmVhZENoYXJBdChjdXJyZW50Qnl0ZVB0cik9PTApe3ZhciBtYXhSZWFkQnl0ZXM9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9ZGVjb2RlU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWRCeXRlcyk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrY2hhclNpemV9fV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSx0b1dpcmVUeXBlOihkZXN0cnVjdG9ycyx2YWx1ZSk9PntpZighKHR5cGVvZiB2YWx1ZT09XCJzdHJpbmdcIikpe3Rocm93QmluZGluZ0Vycm9yKGBDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSAke25hbWV9YCl9dmFyIGxlbmd0aD1sZW5ndGhCeXRlc1VURih2YWx1ZSk7dmFyIHB0cj1fbWFsbG9jKDQrbGVuZ3RoK2NoYXJTaXplKTtIRUFQVTMyW3B0cj4+Ml09bGVuZ3RoL2NoYXJTaXplO2VuY29kZVN0cmluZyh2YWx1ZSxwdHIrNCxsZW5ndGgrY2hhclNpemUpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LGFyZ1BhY2tBZHZhbmNlOkdlbmVyaWNXaXJlVHlwZVNpemUscmVhZFZhbHVlRnJvbVBvaW50ZXI6cmVhZFBvaW50ZXIsZGVzdHJ1Y3RvckZ1bmN0aW9uKHB0cil7X2ZyZWUocHRyKX19KX07dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdD0ocmF3VHlwZSxuYW1lLGNvbnN0cnVjdG9yU2lnbmF0dXJlLHJhd0NvbnN0cnVjdG9yLGRlc3RydWN0b3JTaWduYXR1cmUscmF3RGVzdHJ1Y3Rvcik9PntzdHJ1Y3RSZWdpc3RyYXRpb25zW3Jhd1R5cGVdPXtuYW1lOnJlYWRMYXRpbjFTdHJpbmcobmFtZSkscmF3Q29uc3RydWN0b3I6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oY29uc3RydWN0b3JTaWduYXR1cmUscmF3Q29uc3RydWN0b3IpLHJhd0Rlc3RydWN0b3I6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKSxmaWVsZHM6W119fTt2YXIgX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkPShzdHJ1Y3RUeXBlLGZpZWxkTmFtZSxnZXR0ZXJSZXR1cm5UeXBlLGdldHRlclNpZ25hdHVyZSxnZXR0ZXIsZ2V0dGVyQ29udGV4dCxzZXR0ZXJBcmd1bWVudFR5cGUsc2V0dGVyU2lnbmF0dXJlLHNldHRlcixzZXR0ZXJDb250ZXh0KT0+e3N0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV0uZmllbGRzLnB1c2goe2ZpZWxkTmFtZTpyZWFkTGF0aW4xU3RyaW5nKGZpZWxkTmFtZSksZ2V0dGVyUmV0dXJuVHlwZSxnZXR0ZXI6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0dGVyU2lnbmF0dXJlLGdldHRlciksZ2V0dGVyQ29udGV4dCxzZXR0ZXJBcmd1bWVudFR5cGUsc2V0dGVyOmVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNldHRlclNpZ25hdHVyZSxzZXR0ZXIpLHNldHRlckNvbnRleHR9KX07dmFyIF9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQ9KHJhd1R5cGUsbmFtZSk9PntuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse2lzVm9pZDp0cnVlLG5hbWUsYXJnUGFja0FkdmFuY2U6MCxmcm9tV2lyZVR5cGU6KCk9PnVuZGVmaW5lZCx0b1dpcmVUeXBlOihkZXN0cnVjdG9ycyxvKT0+dW5kZWZpbmVkfSl9O3ZhciBfX2Vtc2NyaXB0ZW5faW5pdF9tYWluX3RocmVhZF9qcz10Yj0+e19fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCh0YiwhRU5WSVJPTk1FTlRfSVNfV09SS0VSLDEsIUVOVklST05NRU5UX0lTX1dFQiw2NTUzNixmYWxzZSk7UFRocmVhZC50aHJlYWRJbml0VExTKCl9O3ZhciBtYXliZUV4aXQ9KCk9PntpZigha2VlcFJ1bnRpbWVBbGl2ZSgpKXt0cnl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQoRVhJVFNUQVRVUyk7ZWxzZSBfZXhpdChFWElUU1RBVFVTKX1jYXRjaChlKXtoYW5kbGVFeGNlcHRpb24oZSl9fX07dmFyIGNhbGxVc2VyQ2FsbGJhY2s9ZnVuYz0+e2lmKEFCT1JUKXtyZXR1cm59dHJ5e2Z1bmMoKTttYXliZUV4aXQoKX1jYXRjaChlKXtoYW5kbGVFeGNlcHRpb24oZSl9fTt2YXIgX19lbXNjcmlwdGVuX3RocmVhZF9tYWlsYm94X2F3YWl0PXB0aHJlYWRfcHRyPT57aWYodHlwZW9mIEF0b21pY3Mud2FpdEFzeW5jPT09XCJmdW5jdGlvblwiKXt2YXIgd2FpdD1BdG9taWNzLndhaXRBc3luYyhIRUFQMzIscHRocmVhZF9wdHI+PjIscHRocmVhZF9wdHIpO3dhaXQudmFsdWUudGhlbihjaGVja01haWxib3gpO3ZhciB3YWl0aW5nQXN5bmM9cHRocmVhZF9wdHIrMTI4O0F0b21pY3Muc3RvcmUoSEVBUDMyLHdhaXRpbmdBc3luYz4+MiwxKX19O3ZhciBjaGVja01haWxib3g9KCk9Pnt2YXIgcHRocmVhZF9wdHI9X3B0aHJlYWRfc2VsZigpO2lmKHB0aHJlYWRfcHRyKXtfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXQocHRocmVhZF9wdHIpO2NhbGxVc2VyQ2FsbGJhY2soX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3gpfX07dmFyIF9fZW1zY3JpcHRlbl9ub3RpZnlfbWFpbGJveF9wb3N0bWVzc2FnZT0odGFyZ2V0VGhyZWFkLGN1cnJUaHJlYWRJZCk9PntpZih0YXJnZXRUaHJlYWQ9PWN1cnJUaHJlYWRJZCl7c2V0VGltZW91dChjaGVja01haWxib3gpfWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCl7cG9zdE1lc3NhZ2Uoe3RhcmdldFRocmVhZCxjbWQ6XCJjaGVja01haWxib3hcIn0pfWVsc2V7dmFyIHdvcmtlcj1QVGhyZWFkLnB0aHJlYWRzW3RhcmdldFRocmVhZF07aWYoIXdvcmtlcil7cmV0dXJufXdvcmtlci5wb3N0TWVzc2FnZSh7Y21kOlwiY2hlY2tNYWlsYm94XCJ9KX19O3ZhciBwcm94aWVkSlNDYWxsQXJncz1bXTt2YXIgX19lbXNjcmlwdGVuX3JlY2VpdmVfb25fbWFpbl90aHJlYWRfanM9KGZ1bmNJbmRleCxlbUFzbUFkZHIsY2FsbGluZ1RocmVhZCxudW1DYWxsQXJncyxhcmdzKT0+e3Byb3hpZWRKU0NhbGxBcmdzLmxlbmd0aD1udW1DYWxsQXJnczt2YXIgYj1hcmdzPj4zO2Zvcih2YXIgaT0wO2k8bnVtQ2FsbEFyZ3M7aSsrKXtwcm94aWVkSlNDYWxsQXJnc1tpXT1IRUFQRjY0W2IraV19dmFyIGZ1bmM9ZW1Bc21BZGRyP0FTTV9DT05TVFNbZW1Bc21BZGRyXTpwcm94aWVkRnVuY3Rpb25UYWJsZVtmdW5jSW5kZXhdO1BUaHJlYWQuY3VycmVudFByb3hpZWRPcGVyYXRpb25DYWxsZXJUaHJlYWQ9Y2FsbGluZ1RocmVhZDt2YXIgcnRuPWZ1bmMoLi4ucHJveGllZEpTQ2FsbEFyZ3MpO1BUaHJlYWQuY3VycmVudFByb3hpZWRPcGVyYXRpb25DYWxsZXJUaHJlYWQ9MDtyZXR1cm4gcnRufTt2YXIgX19lbXNjcmlwdGVuX3RocmVhZF9jbGVhbnVwPXRocmVhZD0+e2lmKCFFTlZJUk9OTUVOVF9JU19QVEhSRUFEKWNsZWFudXBUaHJlYWQodGhyZWFkKTtlbHNlIHBvc3RNZXNzYWdlKHtjbWQ6XCJjbGVhbnVwVGhyZWFkXCIsdGhyZWFkfSl9O3ZhciBfX2Vtc2NyaXB0ZW5fdGhyZWFkX3NldF9zdHJvbmdyZWY9dGhyZWFkPT57fTt2YXIgX19lbXNjcmlwdGVuX3Rocm93X2xvbmdqbXA9KCk9Pnt0aHJvdyBJbmZpbml0eX07dmFyIHJlcXVpcmVSZWdpc3RlcmVkVHlwZT0ocmF3VHlwZSxodW1hbk5hbWUpPT57dmFyIGltcGw9cmVnaXN0ZXJlZFR5cGVzW3Jhd1R5cGVdO2lmKHVuZGVmaW5lZD09PWltcGwpe3Rocm93QmluZGluZ0Vycm9yKGAke2h1bWFuTmFtZX0gaGFzIHVua25vd24gdHlwZSAke2dldFR5cGVOYW1lKHJhd1R5cGUpfWApfXJldHVybiBpbXBsfTt2YXIgZW12YWxfcmV0dXJuVmFsdWU9KHJldHVyblR5cGUsZGVzdHJ1Y3RvcnNSZWYsaGFuZGxlKT0+e3ZhciBkZXN0cnVjdG9ycz1bXTt2YXIgcmVzdWx0PXJldHVyblR5cGVbXCJ0b1dpcmVUeXBlXCJdKGRlc3RydWN0b3JzLGhhbmRsZSk7aWYoZGVzdHJ1Y3RvcnMubGVuZ3RoKXtIRUFQVTMyW2Rlc3RydWN0b3JzUmVmPj4yXT1FbXZhbC50b0hhbmRsZShkZXN0cnVjdG9ycyl9cmV0dXJuIHJlc3VsdH07dmFyIF9fZW12YWxfYXM9KGhhbmRsZSxyZXR1cm5UeXBlLGRlc3RydWN0b3JzUmVmKT0+e2hhbmRsZT1FbXZhbC50b1ZhbHVlKGhhbmRsZSk7cmV0dXJuVHlwZT1yZXF1aXJlUmVnaXN0ZXJlZFR5cGUocmV0dXJuVHlwZSxcImVtdmFsOjphc1wiKTtyZXR1cm4gZW12YWxfcmV0dXJuVmFsdWUocmV0dXJuVHlwZSxkZXN0cnVjdG9yc1JlZixoYW5kbGUpfTt2YXIgZW12YWxfc3ltYm9scz17fTt2YXIgZ2V0U3RyaW5nT3JTeW1ib2w9YWRkcmVzcz0+e3ZhciBzeW1ib2w9ZW12YWxfc3ltYm9sc1thZGRyZXNzXTtpZihzeW1ib2w9PT11bmRlZmluZWQpe3JldHVybiByZWFkTGF0aW4xU3RyaW5nKGFkZHJlc3MpfXJldHVybiBzeW1ib2x9O3ZhciBlbXZhbF9tZXRob2RDYWxsZXJzPVtdO3ZhciBfX2VtdmFsX2NhbGxfbWV0aG9kPShjYWxsZXIsb2JqSGFuZGxlLG1ldGhvZE5hbWUsZGVzdHJ1Y3RvcnNSZWYsYXJncyk9PntjYWxsZXI9ZW12YWxfbWV0aG9kQ2FsbGVyc1tjYWxsZXJdO29iakhhbmRsZT1FbXZhbC50b1ZhbHVlKG9iakhhbmRsZSk7bWV0aG9kTmFtZT1nZXRTdHJpbmdPclN5bWJvbChtZXRob2ROYW1lKTtyZXR1cm4gY2FsbGVyKG9iakhhbmRsZSxvYmpIYW5kbGVbbWV0aG9kTmFtZV0sZGVzdHJ1Y3RvcnNSZWYsYXJncyl9O3ZhciBlbXZhbF9hZGRNZXRob2RDYWxsZXI9Y2FsbGVyPT57dmFyIGlkPWVtdmFsX21ldGhvZENhbGxlcnMubGVuZ3RoO2VtdmFsX21ldGhvZENhbGxlcnMucHVzaChjYWxsZXIpO3JldHVybiBpZH07dmFyIGVtdmFsX2xvb2t1cFR5cGVzPShhcmdDb3VudCxhcmdUeXBlcyk9Pnt2YXIgYT1uZXcgQXJyYXkoYXJnQ291bnQpO2Zvcih2YXIgaT0wO2k8YXJnQ291bnQ7KytpKXthW2ldPXJlcXVpcmVSZWdpc3RlcmVkVHlwZShIRUFQVTMyW2FyZ1R5cGVzK2kqND4+Ml0sXCJwYXJhbWV0ZXIgXCIraSl9cmV0dXJuIGF9O3ZhciByZWZsZWN0Q29uc3RydWN0PVJlZmxlY3QuY29uc3RydWN0O3ZhciBfX2VtdmFsX2dldF9tZXRob2RfY2FsbGVyPShhcmdDb3VudCxhcmdUeXBlcyxraW5kKT0+e3ZhciB0eXBlcz1lbXZhbF9sb29rdXBUeXBlcyhhcmdDb3VudCxhcmdUeXBlcyk7dmFyIHJldFR5cGU9dHlwZXMuc2hpZnQoKTthcmdDb3VudC0tO3ZhciBmdW5jdGlvbkJvZHk9YHJldHVybiBmdW5jdGlvbiAob2JqLCBmdW5jLCBkZXN0cnVjdG9yc1JlZiwgYXJncykge1xcbmA7dmFyIG9mZnNldD0wO3ZhciBhcmdzTGlzdD1bXTtpZihraW5kPT09MCl7YXJnc0xpc3QucHVzaChcIm9ialwiKX12YXIgcGFyYW1zPVtcInJldFR5cGVcIl07dmFyIGFyZ3M9W3JldFR5cGVdO2Zvcih2YXIgaT0wO2k8YXJnQ291bnQ7KytpKXthcmdzTGlzdC5wdXNoKFwiYXJnXCIraSk7cGFyYW1zLnB1c2goXCJhcmdUeXBlXCIraSk7YXJncy5wdXNoKHR5cGVzW2ldKTtmdW5jdGlvbkJvZHkrPWAgIHZhciBhcmcke2l9ID0gYXJnVHlwZSR7aX0ucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJncyR7b2Zmc2V0P1wiK1wiK29mZnNldDpcIlwifSk7XFxuYDtvZmZzZXQrPXR5cGVzW2ldLmFyZ1BhY2tBZHZhbmNlfXZhciBpbnZva2VyPWtpbmQ9PT0xP1wibmV3IGZ1bmNcIjpcImZ1bmMuY2FsbFwiO2Z1bmN0aW9uQm9keSs9YCAgdmFyIHJ2ID0gJHtpbnZva2VyfSgke2FyZ3NMaXN0LmpvaW4oXCIsIFwiKX0pO1xcbmA7aWYoIXJldFR5cGUuaXNWb2lkKXtwYXJhbXMucHVzaChcImVtdmFsX3JldHVyblZhbHVlXCIpO2FyZ3MucHVzaChlbXZhbF9yZXR1cm5WYWx1ZSk7ZnVuY3Rpb25Cb2R5Kz1cIiAgcmV0dXJuIGVtdmFsX3JldHVyblZhbHVlKHJldFR5cGUsIGRlc3RydWN0b3JzUmVmLCBydik7XFxuXCJ9ZnVuY3Rpb25Cb2R5Kz1cIn07XFxuXCI7cGFyYW1zLnB1c2goZnVuY3Rpb25Cb2R5KTt2YXIgaW52b2tlckZ1bmN0aW9uPW5ld0Z1bmMoRnVuY3Rpb24scGFyYW1zKSguLi5hcmdzKTt2YXIgZnVuY3Rpb25OYW1lPWBtZXRob2RDYWxsZXI8KCR7dHlwZXMubWFwKHQ9PnQubmFtZSkuam9pbihcIiwgXCIpfSkgPT4gJHtyZXRUeXBlLm5hbWV9PmA7cmV0dXJuIGVtdmFsX2FkZE1ldGhvZENhbGxlcihjcmVhdGVOYW1lZEZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSxpbnZva2VyRnVuY3Rpb24pKX07dmFyIF9fZW12YWxfZ2V0X3Byb3BlcnR5PShoYW5kbGUsa2V5KT0+e2hhbmRsZT1FbXZhbC50b1ZhbHVlKGhhbmRsZSk7a2V5PUVtdmFsLnRvVmFsdWUoa2V5KTtyZXR1cm4gRW12YWwudG9IYW5kbGUoaGFuZGxlW2tleV0pfTt2YXIgX19lbXZhbF9pbmNyZWY9aGFuZGxlPT57aWYoaGFuZGxlPjkpe2VtdmFsX2hhbmRsZXNbaGFuZGxlKzFdKz0xfX07dmFyIF9fZW12YWxfbmV3X2FycmF5PSgpPT5FbXZhbC50b0hhbmRsZShbXSk7dmFyIF9fZW12YWxfbmV3X2NzdHJpbmc9dj0+RW12YWwudG9IYW5kbGUoZ2V0U3RyaW5nT3JTeW1ib2wodikpO3ZhciBfX2VtdmFsX25ld19vYmplY3Q9KCk9PkVtdmFsLnRvSGFuZGxlKHt9KTt2YXIgX19lbXZhbF9ydW5fZGVzdHJ1Y3RvcnM9aGFuZGxlPT57dmFyIGRlc3RydWN0b3JzPUVtdmFsLnRvVmFsdWUoaGFuZGxlKTtydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7X19lbXZhbF9kZWNyZWYoaGFuZGxlKX07dmFyIF9fZW12YWxfc2V0X3Byb3BlcnR5PShoYW5kbGUsa2V5LHZhbHVlKT0+e2hhbmRsZT1FbXZhbC50b1ZhbHVlKGhhbmRsZSk7a2V5PUVtdmFsLnRvVmFsdWUoa2V5KTt2YWx1ZT1FbXZhbC50b1ZhbHVlKHZhbHVlKTtoYW5kbGVba2V5XT12YWx1ZX07dmFyIF9fZW12YWxfdGFrZV92YWx1ZT0odHlwZSxhcmcpPT57dHlwZT1yZXF1aXJlUmVnaXN0ZXJlZFR5cGUodHlwZSxcIl9lbXZhbF90YWtlX3ZhbHVlXCIpO3ZhciB2PXR5cGVbXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiXShhcmcpO3JldHVybiBFbXZhbC50b0hhbmRsZSh2KX07dmFyIGlzTGVhcFllYXI9eWVhcj0+eWVhciU0PT09MCYmKHllYXIlMTAwIT09MHx8eWVhciU0MDA9PT0wKTt2YXIgTU9OVEhfREFZU19MRUFQX0NVTVVMQVRJVkU9WzAsMzEsNjAsOTEsMTIxLDE1MiwxODIsMjEzLDI0NCwyNzQsMzA1LDMzNV07dmFyIE1PTlRIX0RBWVNfUkVHVUxBUl9DVU1VTEFUSVZFPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdO3ZhciB5ZGF5RnJvbURhdGU9ZGF0ZT0+e3ZhciBsZWFwPWlzTGVhcFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTt2YXIgbW9udGhEYXlzQ3VtdWxhdGl2ZT1sZWFwP01PTlRIX0RBWVNfTEVBUF9DVU1VTEFUSVZFOk1PTlRIX0RBWVNfUkVHVUxBUl9DVU1VTEFUSVZFO3ZhciB5ZGF5PW1vbnRoRGF5c0N1bXVsYXRpdmVbZGF0ZS5nZXRNb250aCgpXStkYXRlLmdldERhdGUoKS0xO3JldHVybiB5ZGF5fTtmdW5jdGlvbiBfX2xvY2FsdGltZV9qcyh0aW1lX2xvdyx0aW1lX2hpZ2gsdG1QdHIpe3ZhciB0aW1lPWNvbnZlcnRJMzJQYWlyVG9JNTNDaGVja2VkKHRpbWVfbG93LHRpbWVfaGlnaCk7dmFyIGRhdGU9bmV3IERhdGUodGltZSoxZTMpO0hFQVAzMlt0bVB0cj4+Ml09ZGF0ZS5nZXRTZWNvbmRzKCk7SEVBUDMyW3RtUHRyKzQ+PjJdPWRhdGUuZ2V0TWludXRlcygpO0hFQVAzMlt0bVB0cis4Pj4yXT1kYXRlLmdldEhvdXJzKCk7SEVBUDMyW3RtUHRyKzEyPj4yXT1kYXRlLmdldERhdGUoKTtIRUFQMzJbdG1QdHIrMTY+PjJdPWRhdGUuZ2V0TW9udGgoKTtIRUFQMzJbdG1QdHIrMjA+PjJdPWRhdGUuZ2V0RnVsbFllYXIoKS0xOTAwO0hFQVAzMlt0bVB0cisyND4+Ml09ZGF0ZS5nZXREYXkoKTt2YXIgeWRheT15ZGF5RnJvbURhdGUoZGF0ZSl8MDtIRUFQMzJbdG1QdHIrMjg+PjJdPXlkYXk7SEVBUDMyW3RtUHRyKzM2Pj4yXT0tKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MCk7dmFyIHN0YXJ0PW5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwwLDEpO3ZhciBzdW1tZXJPZmZzZXQ9bmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLDYsMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgd2ludGVyT2Zmc2V0PXN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGRzdD0oc3VtbWVyT2Zmc2V0IT13aW50ZXJPZmZzZXQmJmRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKT09TWF0aC5taW4od2ludGVyT2Zmc2V0LHN1bW1lck9mZnNldCkpfDA7SEVBUDMyW3RtUHRyKzMyPj4yXT1kc3R9dmFyIF9fdHpzZXRfanM9KHRpbWV6b25lLGRheWxpZ2h0LHN0ZF9uYW1lLGRzdF9uYW1lKT0+e3ZhciBjdXJyZW50WWVhcj0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCk7dmFyIHdpbnRlcj1uZXcgRGF0ZShjdXJyZW50WWVhciwwLDEpO3ZhciBzdW1tZXI9bmV3IERhdGUoY3VycmVudFllYXIsNiwxKTt2YXIgd2ludGVyT2Zmc2V0PXdpbnRlci5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBzdW1tZXJPZmZzZXQ9c3VtbWVyLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHN0ZFRpbWV6b25lT2Zmc2V0PU1hdGgubWF4KHdpbnRlck9mZnNldCxzdW1tZXJPZmZzZXQpO0hFQVBVMzJbdGltZXpvbmU+PjJdPXN0ZFRpbWV6b25lT2Zmc2V0KjYwO0hFQVAzMltkYXlsaWdodD4+Ml09TnVtYmVyKHdpbnRlck9mZnNldCE9c3VtbWVyT2Zmc2V0KTt2YXIgZXh0cmFjdFpvbmU9dGltZXpvbmVPZmZzZXQ9Pnt2YXIgc2lnbj10aW1lem9uZU9mZnNldD49MD9cIi1cIjpcIitcIjt2YXIgYWJzT2Zmc2V0PU1hdGguYWJzKHRpbWV6b25lT2Zmc2V0KTt2YXIgaG91cnM9U3RyaW5nKE1hdGguZmxvb3IoYWJzT2Zmc2V0LzYwKSkucGFkU3RhcnQoMixcIjBcIik7dmFyIG1pbnV0ZXM9U3RyaW5nKGFic09mZnNldCU2MCkucGFkU3RhcnQoMixcIjBcIik7cmV0dXJuYFVUQyR7c2lnbn0ke2hvdXJzfSR7bWludXRlc31gfTt2YXIgd2ludGVyTmFtZT1leHRyYWN0Wm9uZSh3aW50ZXJPZmZzZXQpO3ZhciBzdW1tZXJOYW1lPWV4dHJhY3Rab25lKHN1bW1lck9mZnNldCk7aWYoc3VtbWVyT2Zmc2V0PHdpbnRlck9mZnNldCl7c3RyaW5nVG9VVEY4KHdpbnRlck5hbWUsc3RkX25hbWUsMTcpO3N0cmluZ1RvVVRGOChzdW1tZXJOYW1lLGRzdF9uYW1lLDE3KX1lbHNle3N0cmluZ1RvVVRGOCh3aW50ZXJOYW1lLGRzdF9uYW1lLDE3KTtzdHJpbmdUb1VURjgoc3VtbWVyTmFtZSxzdGRfbmFtZSwxNyl9fTt2YXIgcmVhZEVtQXNtQXJnc0FycmF5PVtdO3ZhciByZWFkRW1Bc21BcmdzPShzaWdQdHIsYnVmKT0+e3JlYWRFbUFzbUFyZ3NBcnJheS5sZW5ndGg9MDt2YXIgY2g7d2hpbGUoY2g9SEVBUFU4W3NpZ1B0cisrXSl7dmFyIHdpZGU9Y2ghPTEwNTt3aWRlJj1jaCE9MTEyO2J1Zis9d2lkZSYmYnVmJTg/NDowO3JlYWRFbUFzbUFyZ3NBcnJheS5wdXNoKGNoPT0xMTI/SEVBUFUzMltidWY+PjJdOmNoPT0xMDU/SEVBUDMyW2J1Zj4+Ml06SEVBUEY2NFtidWY+PjNdKTtidWYrPXdpZGU/ODo0fXJldHVybiByZWFkRW1Bc21BcmdzQXJyYXl9O3ZhciBydW5FbUFzbUZ1bmN0aW9uPShjb2RlLHNpZ1B0cixhcmdidWYpPT57dmFyIGFyZ3M9cmVhZEVtQXNtQXJncyhzaWdQdHIsYXJnYnVmKTtyZXR1cm4gQVNNX0NPTlNUU1tjb2RlXSguLi5hcmdzKX07dmFyIF9lbXNjcmlwdGVuX2FzbV9jb25zdF9pbnQ9KGNvZGUsc2lnUHRyLGFyZ2J1Zik9PnJ1bkVtQXNtRnVuY3Rpb24oY29kZSxzaWdQdHIsYXJnYnVmKTt2YXIgd2Fybk9uY2U9dGV4dD0+e3dhcm5PbmNlLnNob3dufHw9e307aWYoIXdhcm5PbmNlLnNob3duW3RleHRdKXt3YXJuT25jZS5zaG93blt0ZXh0XT0xO2Vycih0ZXh0KX19O3ZhciBfZW1zY3JpcHRlbl9jaGVja19ibG9ja2luZ19hbGxvd2VkPSgpPT57fTt2YXIgX2Vtc2NyaXB0ZW5fY29uc29sZV9lcnJvcj1zdHI9Pntjb25zb2xlLmVycm9yKFVURjhUb1N0cmluZyhzdHIpKX07dmFyIF9lbXNjcmlwdGVuX2NvbnNvbGVfd2Fybj1zdHI9Pntjb25zb2xlLndhcm4oVVRGOFRvU3RyaW5nKHN0cikpfTt2YXIgX2Vtc2NyaXB0ZW5fZGF0ZV9ub3c9KCk9PkRhdGUubm93KCk7dmFyIHJ1bnRpbWVLZWVwYWxpdmVQdXNoPSgpPT57cnVudGltZUtlZXBhbGl2ZUNvdW50ZXIrPTF9O3ZhciBfZW1zY3JpcHRlbl9leGl0X3dpdGhfbGl2ZV9ydW50aW1lPSgpPT57cnVudGltZUtlZXBhbGl2ZVB1c2goKTt0aHJvd1widW53aW5kXCJ9O3ZhciBnZXRIZWFwTWF4PSgpPT5IRUFQVTgubGVuZ3RoO3ZhciBfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXg9KCk9PmdldEhlYXBNYXgoKTt2YXIgX2Vtc2NyaXB0ZW5fZ2V0X25vdz0oKT0+cGVyZm9ybWFuY2UudGltZU9yaWdpbitwZXJmb3JtYW5jZS5ub3coKTt2YXIgX2Vtc2NyaXB0ZW5fbnVtX2xvZ2ljYWxfY29yZXM9KCk9Pm5hdmlnYXRvcltcImhhcmR3YXJlQ29uY3VycmVuY3lcIl07dmFyIGFib3J0T25DYW5ub3RHcm93TWVtb3J5PXJlcXVlc3RlZFNpemU9PnthYm9ydChcIk9PTVwiKX07dmFyIF9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwPXJlcXVlc3RlZFNpemU9Pnt2YXIgb2xkU2l6ZT1IRUFQVTgubGVuZ3RoO3JlcXVlc3RlZFNpemU+Pj49MDthYm9ydE9uQ2Fubm90R3Jvd01lbW9yeShyZXF1ZXN0ZWRTaXplKX07dmFyIEVOVj17fTt2YXIgZ2V0RXhlY3V0YWJsZU5hbWU9KCk9PnRoaXNQcm9ncmFtfHxcIi4vdGhpcy5wcm9ncmFtXCI7dmFyIGdldEVudlN0cmluZ3M9KCk9PntpZighZ2V0RW52U3RyaW5ncy5zdHJpbmdzKXt2YXIgbGFuZz0odHlwZW9mIG5hdmlnYXRvcj09XCJvYmplY3RcIiYmbmF2aWdhdG9yLmxhbmd1YWdlcyYmbmF2aWdhdG9yLmxhbmd1YWdlc1swXXx8XCJDXCIpLnJlcGxhY2UoXCItXCIsXCJfXCIpK1wiLlVURi04XCI7dmFyIGVudj17VVNFUjpcIndlYl91c2VyXCIsTE9HTkFNRTpcIndlYl91c2VyXCIsUEFUSDpcIi9cIixQV0Q6XCIvXCIsSE9NRTpcIi9ob21lL3dlYl91c2VyXCIsTEFORzpsYW5nLF86Z2V0RXhlY3V0YWJsZU5hbWUoKX07Zm9yKHZhciB4IGluIEVOVil7aWYoRU5WW3hdPT09dW5kZWZpbmVkKWRlbGV0ZSBlbnZbeF07ZWxzZSBlbnZbeF09RU5WW3hdfXZhciBzdHJpbmdzPVtdO2Zvcih2YXIgeCBpbiBlbnYpe3N0cmluZ3MucHVzaChgJHt4fT0ke2Vudlt4XX1gKX1nZXRFbnZTdHJpbmdzLnN0cmluZ3M9c3RyaW5nc31yZXR1cm4gZ2V0RW52U3RyaW5ncy5zdHJpbmdzfTt2YXIgc3RyaW5nVG9Bc2NpaT0oc3RyLGJ1ZmZlcik9Pntmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXtIRUFQOFtidWZmZXIrK109c3RyLmNoYXJDb2RlQXQoaSl9SEVBUDhbYnVmZmVyXT0wfTt2YXIgX2Vudmlyb25fZ2V0PWZ1bmN0aW9uKF9fZW52aXJvbixlbnZpcm9uX2J1Zil7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoOCwwLDEsX19lbnZpcm9uLGVudmlyb25fYnVmKTt2YXIgYnVmU2l6ZT0wO2dldEVudlN0cmluZ3MoKS5mb3JFYWNoKChzdHJpbmcsaSk9Pnt2YXIgcHRyPWVudmlyb25fYnVmK2J1ZlNpemU7SEVBUFUzMltfX2Vudmlyb24raSo0Pj4yXT1wdHI7c3RyaW5nVG9Bc2NpaShzdHJpbmcscHRyKTtidWZTaXplKz1zdHJpbmcubGVuZ3RoKzF9KTtyZXR1cm4gMH07dmFyIF9lbnZpcm9uX3NpemVzX2dldD1mdW5jdGlvbihwZW52aXJvbl9jb3VudCxwZW52aXJvbl9idWZfc2l6ZSl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoOSwwLDEscGVudmlyb25fY291bnQscGVudmlyb25fYnVmX3NpemUpO3ZhciBzdHJpbmdzPWdldEVudlN0cmluZ3MoKTtIRUFQVTMyW3BlbnZpcm9uX2NvdW50Pj4yXT1zdHJpbmdzLmxlbmd0aDt2YXIgYnVmU2l6ZT0wO3N0cmluZ3MuZm9yRWFjaChzdHJpbmc9PmJ1ZlNpemUrPXN0cmluZy5sZW5ndGgrMSk7SEVBUFUzMltwZW52aXJvbl9idWZfc2l6ZT4+Ml09YnVmU2l6ZTtyZXR1cm4gMH07ZnVuY3Rpb24gX2ZkX2Nsb3NlKGZkKXtpZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXJldHVybiBwcm94eVRvTWFpblRocmVhZCgxMCwwLDEsZmQpO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7RlMuY2xvc2Uoc3RyZWFtKTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZS5uYW1lPT09XCJFcnJub0Vycm9yXCIpKXRocm93IGU7cmV0dXJuIGUuZXJybm99fXZhciBkb1JlYWR2PShzdHJlYW0saW92LGlvdmNudCxvZmZzZXQpPT57dmFyIHJldD0wO2Zvcih2YXIgaT0wO2k8aW92Y250O2krKyl7dmFyIHB0cj1IRUFQVTMyW2lvdj4+Ml07dmFyIGxlbj1IRUFQVTMyW2lvdis0Pj4yXTtpb3YrPTg7dmFyIGN1cnI9RlMucmVhZChzdHJlYW0sSEVBUDgscHRyLGxlbixvZmZzZXQpO2lmKGN1cnI8MClyZXR1cm4tMTtyZXQrPWN1cnI7aWYoY3VycjxsZW4pYnJlYWs7aWYodHlwZW9mIG9mZnNldCE9XCJ1bmRlZmluZWRcIil7b2Zmc2V0Kz1jdXJyfX1yZXR1cm4gcmV0fTtmdW5jdGlvbiBfZmRfcmVhZChmZCxpb3YsaW92Y250LHBudW0pe2lmKEVOVklST05NRU5UX0lTX1BUSFJFQUQpcmV0dXJuIHByb3h5VG9NYWluVGhyZWFkKDExLDAsMSxmZCxpb3YsaW92Y250LHBudW0pO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7dmFyIG51bT1kb1JlYWR2KHN0cmVhbSxpb3YsaW92Y250KTtIRUFQVTMyW3BudW0+PjJdPW51bTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZS5uYW1lPT09XCJFcnJub0Vycm9yXCIpKXRocm93IGU7cmV0dXJuIGUuZXJybm99fWZ1bmN0aW9uIF9mZF9zZWVrKGZkLG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gsd2hlbmNlLG5ld09mZnNldCl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoMTIsMCwxLGZkLG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gsd2hlbmNlLG5ld09mZnNldCk7dmFyIG9mZnNldD1jb252ZXJ0STMyUGFpclRvSTUzQ2hlY2tlZChvZmZzZXRfbG93LG9mZnNldF9oaWdoKTt0cnl7aWYoaXNOYU4ob2Zmc2V0KSlyZXR1cm4gNjE7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO0ZTLmxsc2VlayhzdHJlYW0sb2Zmc2V0LHdoZW5jZSk7dGVtcEk2ND1bc3RyZWFtLnBvc2l0aW9uPj4+MCwodGVtcERvdWJsZT1zdHJlYW0ucG9zaXRpb24sK01hdGguYWJzKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8rTWF0aC5mbG9vcih0ZW1wRG91YmxlLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUtKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbbmV3T2Zmc2V0Pj4yXT10ZW1wSTY0WzBdLEhFQVAzMltuZXdPZmZzZXQrND4+Ml09dGVtcEk2NFsxXTtpZihzdHJlYW0uZ2V0ZGVudHMmJm9mZnNldD09PTAmJndoZW5jZT09PTApc3RyZWFtLmdldGRlbnRzPW51bGw7cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUubmFtZT09PVwiRXJybm9FcnJvclwiKSl0aHJvdyBlO3JldHVybiBlLmVycm5vfX12YXIgZG9Xcml0ZXY9KHN0cmVhbSxpb3YsaW92Y250LG9mZnNldCk9Pnt2YXIgcmV0PTA7Zm9yKHZhciBpPTA7aTxpb3ZjbnQ7aSsrKXt2YXIgcHRyPUhFQVBVMzJbaW92Pj4yXTt2YXIgbGVuPUhFQVBVMzJbaW92KzQ+PjJdO2lvdis9ODt2YXIgY3Vycj1GUy53cml0ZShzdHJlYW0sSEVBUDgscHRyLGxlbixvZmZzZXQpO2lmKGN1cnI8MClyZXR1cm4tMTtyZXQrPWN1cnI7aWYoY3VycjxsZW4pe2JyZWFrfWlmKHR5cGVvZiBvZmZzZXQhPVwidW5kZWZpbmVkXCIpe29mZnNldCs9Y3Vycn19cmV0dXJuIHJldH07ZnVuY3Rpb24gX2ZkX3dyaXRlKGZkLGlvdixpb3ZjbnQscG51bSl7aWYoRU5WSVJPTk1FTlRfSVNfUFRIUkVBRClyZXR1cm4gcHJveHlUb01haW5UaHJlYWQoMTMsMCwxLGZkLGlvdixpb3ZjbnQscG51bSk7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTt2YXIgbnVtPWRvV3JpdGV2KHN0cmVhbSxpb3YsaW92Y250KTtIRUFQVTMyW3BudW0+PjJdPW51bTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZS5uYW1lPT09XCJFcnJub0Vycm9yXCIpKXRocm93IGU7cmV0dXJuIGUuZXJybm99fVBUaHJlYWQuaW5pdCgpO0ZTLmNyZWF0ZVByZWxvYWRlZEZpbGU9RlNfY3JlYXRlUHJlbG9hZGVkRmlsZTtGUy5zdGF0aWNJbml0KCk7SW50ZXJuYWxFcnJvcj1Nb2R1bGVbXCJJbnRlcm5hbEVycm9yXCJdPWNsYXNzIEludGVybmFsRXJyb3IgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihtZXNzYWdlKXtzdXBlcihtZXNzYWdlKTt0aGlzLm5hbWU9XCJJbnRlcm5hbEVycm9yXCJ9fTtlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKTtCaW5kaW5nRXJyb3I9TW9kdWxlW1wiQmluZGluZ0Vycm9yXCJdPWNsYXNzIEJpbmRpbmdFcnJvciBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKG1lc3NhZ2Upe3N1cGVyKG1lc3NhZ2UpO3RoaXMubmFtZT1cIkJpbmRpbmdFcnJvclwifX07aW5pdF9DbGFzc0hhbmRsZSgpO2luaXRfUmVnaXN0ZXJlZFBvaW50ZXIoKTtVbmJvdW5kVHlwZUVycm9yPU1vZHVsZVtcIlVuYm91bmRUeXBlRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJVbmJvdW5kVHlwZUVycm9yXCIpO2luaXRfZW12YWwoKTt2YXIgcHJveGllZEZ1bmN0aW9uVGFibGU9W19wcm9jX2V4aXQsZXhpdE9uTWFpblRocmVhZCxwdGhyZWFkQ3JlYXRlUHJveGllZCxfX19zeXNjYWxsX2ZjbnRsNjQsX19fc3lzY2FsbF9pb2N0bCxfX19zeXNjYWxsX29wZW5hdCxfX19zeXNjYWxsX3JtZGlyLF9fX3N5c2NhbGxfdW5saW5rYXQsX2Vudmlyb25fZ2V0LF9lbnZpcm9uX3NpemVzX2dldCxfZmRfY2xvc2UsX2ZkX3JlYWQsX2ZkX3NlZWssX2ZkX3dyaXRlXTt2YXIgd2FzbUltcG9ydHM7ZnVuY3Rpb24gYXNzaWduV2FzbUltcG9ydHMoKXt3YXNtSW1wb3J0cz17bmE6X19fYXNzZXJ0X2ZhaWwsZjpfX19jeGFfdGhyb3csUDpfX19wdGhyZWFkX2NyZWF0ZV9qcyx0Ol9fX3N5c2NhbGxfZmNudGw2NCxZOl9fX3N5c2NhbGxfaW9jdGwsWjpfX19zeXNjYWxsX29wZW5hdCxMOl9fX3N5c2NhbGxfcm1kaXIsTTpfX19zeXNjYWxsX3VubGlua2F0LGFhOl9fYWJvcnRfanMsbWE6X19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0LEY6X19lbWJpbmRfcmVnaXN0ZXJfYmlnaW50LGNhOl9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wsazpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcyxqOl9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yLGI6X19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24seTpfX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudCxiYTpfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbCx3Ol9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0LGU6X19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcixjOl9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3LHA6X19lbWJpbmRfcmVnaXN0ZXJfb3B0aW9uYWwsdjpfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nLG06X19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcsa2E6X19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0LGphOl9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZCxkYTpfX2VtYmluZF9yZWdpc3Rlcl92b2lkLFU6X19lbXNjcmlwdGVuX2luaXRfbWFpbl90aHJlYWRfanMsSTpfX2Vtc2NyaXB0ZW5fbm90aWZ5X21haWxib3hfcG9zdG1lc3NhZ2UsUjpfX2Vtc2NyaXB0ZW5fcmVjZWl2ZV9vbl9tYWluX3RocmVhZF9qcyxOOl9fZW1zY3JpcHRlbl90aHJlYWRfY2xlYW51cCxUOl9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdCwkOl9fZW1zY3JpcHRlbl90aHJlYWRfc2V0X3N0cm9uZ3JlZixHOl9fZW1zY3JpcHRlbl90aHJvd19sb25nam1wLGhhOl9fZW12YWxfYXMsbzpfX2VtdmFsX2NhbGxfbWV0aG9kLG9hOl9fZW12YWxfZGVjcmVmLG46X19lbXZhbF9nZXRfbWV0aG9kX2NhbGxlcixpYTpfX2VtdmFsX2dldF9wcm9wZXJ0eSxlYTpfX2VtdmFsX2luY3JlZixwYTpfX2VtdmFsX25ld19hcnJheSxnYTpfX2VtdmFsX25ld19jc3RyaW5nLHFhOl9fZW12YWxfbmV3X29iamVjdCxmYTpfX2VtdmFsX3J1bl9kZXN0cnVjdG9ycyxxOl9fZW12YWxfc2V0X3Byb3BlcnR5LGc6X19lbXZhbF90YWtlX3ZhbHVlLEM6X19sb2NhbHRpbWVfanMsUzpfX3R6c2V0X2pzLHo6X2Vtc2NyaXB0ZW5fYXNtX2NvbnN0X2ludCxROl9lbXNjcmlwdGVuX2NoZWNrX2Jsb2NraW5nX2FsbG93ZWQscmE6X2Vtc2NyaXB0ZW5fY29uc29sZV9lcnJvcixsYTpfZW1zY3JpcHRlbl9jb25zb2xlX3dhcm4sdTpfZW1zY3JpcHRlbl9kYXRlX25vdyxfOl9lbXNjcmlwdGVuX2V4aXRfd2l0aF9saXZlX3J1bnRpbWUsSjpfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgsaDpfZW1zY3JpcHRlbl9nZXRfbm93LEs6X2Vtc2NyaXB0ZW5fbnVtX2xvZ2ljYWxfY29yZXMsSDpfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCxWOl9lbnZpcm9uX2dldCxXOl9lbnZpcm9uX3NpemVzX2dldCxkOl9leGl0LHI6X2ZkX2Nsb3NlLFg6X2ZkX3JlYWQsRTpfZmRfc2VlayxzOl9mZF93cml0ZSx4Omludm9rZV9paSxCOmludm9rZV9paWksQTppbnZva2VfaWlpaSxpOmludm9rZV92aSxEOmludm9rZV92aWksTzppbnZva2VfdmlpaSxsOmludm9rZV92aWlpaSxhOndhc21NZW1vcnl9fXZhciB3YXNtRXhwb3J0cz1jcmVhdGVXYXNtKCk7dmFyIF9fX3dhc21fY2FsbF9jdG9ycz0oKT0+KF9fX3dhc21fY2FsbF9jdG9ycz13YXNtRXhwb3J0c1tcInNhXCJdKSgpO3ZhciBfbWFsbG9jPWEwPT4oX21hbGxvYz13YXNtRXhwb3J0c1tcInRhXCJdKShhMCk7dmFyIF9mcmVlPWEwPT4oX2ZyZWU9d2FzbUV4cG9ydHNbXCJ1YVwiXSkoYTApO3ZhciBfcHRocmVhZF9zZWxmPSgpPT4oX3B0aHJlYWRfc2VsZj13YXNtRXhwb3J0c1tcIndhXCJdKSgpO3ZhciBfX19nZXRUeXBlTmFtZT1hMD0+KF9fX2dldFR5cGVOYW1lPXdhc21FeHBvcnRzW1wieGFcIl0pKGEwKTt2YXIgX19lbWJpbmRfaW5pdGlhbGl6ZV9iaW5kaW5ncz0oKT0+KF9fZW1iaW5kX2luaXRpYWxpemVfYmluZGluZ3M9d2FzbUV4cG9ydHNbXCJ5YVwiXSkoKTt2YXIgX19lbXNjcmlwdGVuX3Rsc19pbml0PSgpPT4oX19lbXNjcmlwdGVuX3Rsc19pbml0PXdhc21FeHBvcnRzW1wiemFcIl0pKCk7dmFyIF9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdD0oYTAsYTEsYTIsYTMsYTQsYTUpPT4oX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PXdhc21FeHBvcnRzW1wiQWFcIl0pKGEwLGExLGEyLGEzLGE0LGE1KTt2YXIgX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkPSgpPT4oX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkPXdhc21FeHBvcnRzW1wiQmFcIl0pKCk7dmFyIF9fZW1zY3JpcHRlbl9ydW5fb25fbWFpbl90aHJlYWRfanM9KGEwLGExLGEyLGEzLGE0KT0+KF9fZW1zY3JpcHRlbl9ydW5fb25fbWFpbl90aHJlYWRfanM9d2FzbUV4cG9ydHNbXCJDYVwiXSkoYTAsYTEsYTIsYTMsYTQpO3ZhciBfX2Vtc2NyaXB0ZW5fdGhyZWFkX2ZyZWVfZGF0YT1hMD0+KF9fZW1zY3JpcHRlbl90aHJlYWRfZnJlZV9kYXRhPXdhc21FeHBvcnRzW1wiRGFcIl0pKGEwKTt2YXIgX19lbXNjcmlwdGVuX3RocmVhZF9leGl0PWEwPT4oX19lbXNjcmlwdGVuX3RocmVhZF9leGl0PXdhc21FeHBvcnRzW1wiRWFcIl0pKGEwKTt2YXIgX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3g9KCk9PihfX2Vtc2NyaXB0ZW5fY2hlY2tfbWFpbGJveD13YXNtRXhwb3J0c1tcIkZhXCJdKSgpO3ZhciBfc2V0VGhyZXc9KGEwLGExKT0+KF9zZXRUaHJldz13YXNtRXhwb3J0c1tcIkdhXCJdKShhMCxhMSk7dmFyIF9lbXNjcmlwdGVuX3N0YWNrX3NldF9saW1pdHM9KGEwLGExKT0+KF9lbXNjcmlwdGVuX3N0YWNrX3NldF9saW1pdHM9d2FzbUV4cG9ydHNbXCJIYVwiXSkoYTAsYTEpO3ZhciBfX2Vtc2NyaXB0ZW5fc3RhY2tfcmVzdG9yZT1hMD0+KF9fZW1zY3JpcHRlbl9zdGFja19yZXN0b3JlPXdhc21FeHBvcnRzW1wiSWFcIl0pKGEwKTt2YXIgX19lbXNjcmlwdGVuX3N0YWNrX2FsbG9jPWEwPT4oX19lbXNjcmlwdGVuX3N0YWNrX2FsbG9jPXdhc21FeHBvcnRzW1wiSmFcIl0pKGEwKTt2YXIgX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2N1cnJlbnQ9KCk9PihfZW1zY3JpcHRlbl9zdGFja19nZXRfY3VycmVudD13YXNtRXhwb3J0c1tcIkthXCJdKSgpO3ZhciBkeW5DYWxsX2ppamk9TW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdPShhMCxhMSxhMixhMyxhNCk9PihkeW5DYWxsX2ppamk9TW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdPXdhc21FeHBvcnRzW1wiTGFcIl0pKGEwLGExLGEyLGEzLGE0KTt2YXIgZHluQ2FsbF92aWlqaWk9TW9kdWxlW1wiZHluQ2FsbF92aWlqaWlcIl09KGEwLGExLGEyLGEzLGE0LGE1LGE2KT0+KGR5bkNhbGxfdmlpamlpPU1vZHVsZVtcImR5bkNhbGxfdmlpamlpXCJdPXdhc21FeHBvcnRzW1wiTWFcIl0pKGEwLGExLGEyLGEzLGE0LGE1LGE2KTt2YXIgZHluQ2FsbF9paWlpaWo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl09KGEwLGExLGEyLGEzLGE0LGE1LGE2KT0+KGR5bkNhbGxfaWlpaWlqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlqXCJdPXdhc21FeHBvcnRzW1wiTmFcIl0pKGEwLGExLGEyLGEzLGE0LGE1LGE2KTt2YXIgZHluQ2FsbF9paWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlqalwiXT0oYTAsYTEsYTIsYTMsYTQsYTUsYTYsYTcsYTgpPT4oZHluQ2FsbF9paWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlqalwiXT13YXNtRXhwb3J0c1tcIk9hXCJdKShhMCxhMSxhMixhMyxhNCxhNSxhNixhNyxhOCk7dmFyIGR5bkNhbGxfaWlpaWlpamo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWlqalwiXT0oYTAsYTEsYTIsYTMsYTQsYTUsYTYsYTcsYTgsYTkpPT4oZHluQ2FsbF9paWlpaWlqaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWpqXCJdPXdhc21FeHBvcnRzW1wiUGFcIl0pKGEwLGExLGEyLGEzLGE0LGE1LGE2LGE3LGE4LGE5KTtmdW5jdGlvbiBpbnZva2VfaWkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aShpbmRleCxhMSl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCl0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpaWkoaW5kZXgsYTEsYTIsYTMsYTQpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7Z2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLGEyLGEzLGE0KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzApdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaWkoaW5kZXgsYTEsYTIsYTMpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7Z2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLGEyLGEzKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzApdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaShpbmRleCxhMSxhMil7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsYTIpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCl0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsYTIpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCl0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpaShpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLGEyLGEzKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzApdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19TW9kdWxlW1wiRlNcIl09RlM7dmFyIGNhbGxlZFJ1bjt2YXIgY2FsbGVkUHJlcnVuO2RlcGVuZGVuY2llc0Z1bGZpbGxlZD1mdW5jdGlvbiBydW5DYWxsZXIoKXtpZighY2FsbGVkUnVuKXJ1bigpO2lmKCFjYWxsZWRSdW4pZGVwZW5kZW5jaWVzRnVsZmlsbGVkPXJ1bkNhbGxlcn07ZnVuY3Rpb24gcnVuKCl7aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1pZihFTlZJUk9OTUVOVF9JU19QVEhSRUFEKXtyZWFkeVByb21pc2VSZXNvbHZlKE1vZHVsZSk7aW5pdFJ1bnRpbWUoKTtzdGFydFdvcmtlcihNb2R1bGUpO3JldHVybn1pZighY2FsbGVkUHJlcnVuKXtjYWxsZWRQcmVydW49MTtwcmVSdW4oKTtpZihydW5EZXBlbmRlbmNpZXM+MCl7cmV0dXJufX1mdW5jdGlvbiBkb1J1bigpe2lmKGNhbGxlZFJ1bilyZXR1cm47Y2FsbGVkUnVuPTE7TW9kdWxlW1wiY2FsbGVkUnVuXCJdPTE7aWYoQUJPUlQpcmV0dXJuO2luaXRSdW50aW1lKCk7cmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpO01vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdPy4oKTtwb3N0UnVuKCl9aWYoTW9kdWxlW1wic2V0U3RhdHVzXCJdKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJSdW5uaW5nLi4uXCIpO3NldFRpbWVvdXQoKCk9PntzZXRUaW1lb3V0KCgpPT5Nb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIiksMSk7ZG9SdW4oKX0sMSl9ZWxzZXtkb1J1bigpfX1pZihNb2R1bGVbXCJwcmVJbml0XCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicHJlSW5pdFwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZUluaXRcIl09W01vZHVsZVtcInByZUluaXRcIl1dO3doaWxlKE1vZHVsZVtcInByZUluaXRcIl0ubGVuZ3RoPjApe01vZHVsZVtcInByZUluaXRcIl0ucG9wKCkoKX19cnVuKCk7bW9kdWxlUnRuPXJlYWR5UHJvbWlzZTtcblxuXG4gIHJldHVybiBtb2R1bGVSdG47XG59XG4pO1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IE1vZHVsZTtcbnZhciBpc1B0aHJlYWQgPSBnbG9iYWxUaGlzLnNlbGY/Lm5hbWU/LnN0YXJ0c1dpdGgoJ2VtLXB0aHJlYWQnKTtcbi8vIFdoZW4gcnVubmluZyBhcyBhIHB0aHJlYWQsIGNvbnN0cnVjdCBhIG5ldyBpbnN0YW5jZSBvbiBzdGFydHVwXG5pc1B0aHJlYWQgJiYgTW9kdWxlKCk7XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAobiwgdCwgZSwgciwgbywgYSwgYykge1xuICB0cnkge1xuICAgIHZhciBpID0gblthXShjKSxcbiAgICAgIHUgPSBpLnZhbHVlO1xuICB9IGNhdGNoIChuKSB7XG4gICAgcmV0dXJuIHZvaWQgZShuKTtcbiAgfVxuICBpLmRvbmUgPyB0KHUpIDogUHJvbWlzZS5yZXNvbHZlKHUpLnRoZW4ociwgbyk7XG59XG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHQgPSB0aGlzLFxuICAgICAgZSA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIsIG8pIHtcbiAgICAgIHZhciBhID0gbi5hcHBseSh0LCBlKTtcbiAgICAgIGZ1bmN0aW9uIF9uZXh0KG4pIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCBuKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhuKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChhLCByLCBvLCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIG4pO1xuICAgICAgfVxuICAgICAgX25leHQodm9pZCAwKTtcbiAgICB9KTtcbiAgfTtcbn1cbmV4cG9ydCB7IF9hc3luY1RvR2VuZXJhdG9yIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikge1xuICBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG59XG5leHBvcnQgeyBfY2xhc3NDYWxsQ2hlY2sgYXMgZGVmYXVsdCB9OyIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGU7XG59XG5leHBvcnQgeyBfY3JlYXRlQ2xhc3MgYXMgZGVmYXVsdCB9OyIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7XG4gIHJldHVybiAociA9IHRvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwge1xuICAgIHZhbHVlOiB0LFxuICAgIGVudW1lcmFibGU6ICEwLFxuICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgd3JpdGFibGU6ICEwXG4gIH0pIDogZVtyXSA9IHQsIGU7XG59XG5leHBvcnQgeyBfZGVmaW5lUHJvcGVydHkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuZnVuY3Rpb24gdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmV4cG9ydCB7IHRvUHJpbWl0aXZlIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCB0b1ByaW1pdGl2ZSBmcm9tIFwiLi90b1ByaW1pdGl2ZS5qc1wiO1xuZnVuY3Rpb24gdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5leHBvcnQgeyB0b1Byb3BlcnR5S2V5IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZXhwb3J0IHsgX3R5cGVvZiBhcyBkZWZhdWx0IH07IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xuZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7IC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL0xJQ0VOU0UgKi9cbiAgbW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgICByZXR1cm4gZTtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICB2YXIgdCxcbiAgICBlID0ge30sXG4gICAgciA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgbiA9IHIuaGFzT3duUHJvcGVydHksXG4gICAgbyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAodCwgZSwgcikge1xuICAgICAgdFtlXSA9IHIudmFsdWU7XG4gICAgfSxcbiAgICBpID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxcbiAgICBhID0gaS5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICBjID0gaS5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsXG4gICAgdSA9IGkudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG4gIGZ1bmN0aW9uIGRlZmluZSh0LCBlLCByKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBlLCB7XG4gICAgICB2YWx1ZTogcixcbiAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgIHdyaXRhYmxlOiAhMFxuICAgIH0pLCB0W2VdO1xuICB9XG4gIHRyeSB7XG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAodCkge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZSh0LCBlLCByKSB7XG4gICAgICByZXR1cm4gdFtlXSA9IHI7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB3cmFwKHQsIGUsIHIsIG4pIHtcbiAgICB2YXIgaSA9IGUgJiYgZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBlIDogR2VuZXJhdG9yLFxuICAgICAgYSA9IE9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLFxuICAgICAgYyA9IG5ldyBDb250ZXh0KG4gfHwgW10pO1xuICAgIHJldHVybiBvKGEsIFwiX2ludm9rZVwiLCB7XG4gICAgICB2YWx1ZTogbWFrZUludm9rZU1ldGhvZCh0LCByLCBjKVxuICAgIH0pLCBhO1xuICB9XG4gIGZ1bmN0aW9uIHRyeUNhdGNoKHQsIGUsIHIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiB0LmNhbGwoZSwgcilcbiAgICAgIH07XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ0aHJvd1wiLFxuICAgICAgICBhcmc6IHRcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGUud3JhcCA9IHdyYXA7XG4gIHZhciBoID0gXCJzdXNwZW5kZWRTdGFydFwiLFxuICAgIGwgPSBcInN1c3BlbmRlZFlpZWxkXCIsXG4gICAgZiA9IFwiZXhlY3V0aW5nXCIsXG4gICAgcyA9IFwiY29tcGxldGVkXCIsXG4gICAgeSA9IHt9O1xuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cbiAgdmFyIHAgPSB7fTtcbiAgZGVmaW5lKHAsIGEsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHZhciBkID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIHYgPSBkICYmIGQoZCh2YWx1ZXMoW10pKSk7XG4gIHYgJiYgdiAhPT0gciAmJiBuLmNhbGwodiwgYSkgJiYgKHAgPSB2KTtcbiAgdmFyIGcgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwKTtcbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHQpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgZGVmaW5lKHQsIGUsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UoZSwgdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UociwgbywgaSwgYSkge1xuICAgICAgdmFyIGMgPSB0cnlDYXRjaCh0W3JdLCB0LCBvKTtcbiAgICAgIGlmIChcInRocm93XCIgIT09IGMudHlwZSkge1xuICAgICAgICB2YXIgdSA9IGMuYXJnLFxuICAgICAgICAgIGggPSB1LnZhbHVlO1xuICAgICAgICByZXR1cm4gaCAmJiBcIm9iamVjdFwiID09IF90eXBlb2YoaCkgJiYgbi5jYWxsKGgsIFwiX19hd2FpdFwiKSA/IGUucmVzb2x2ZShoLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHQsIGksIGEpO1xuICAgICAgICB9LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGludm9rZShcInRocm93XCIsIHQsIGksIGEpO1xuICAgICAgICB9KSA6IGUucmVzb2x2ZShoKS50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdS52YWx1ZSA9IHQsIGkodSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIHQsIGksIGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGEoYy5hcmcpO1xuICAgIH1cbiAgICB2YXIgcjtcbiAgICBvKHRoaXMsIFwiX2ludm9rZVwiLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCwgbikge1xuICAgICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IGUoZnVuY3Rpb24gKGUsIHIpIHtcbiAgICAgICAgICAgIGludm9rZSh0LCBuLCBlLCByKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gciA9IHIgPyByLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChlLCByLCBuKSB7XG4gICAgdmFyIG8gPSBoO1xuICAgIHJldHVybiBmdW5jdGlvbiAoaSwgYSkge1xuICAgICAgaWYgKG8gPT09IGYpIHRocm93IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIGlmIChvID09PSBzKSB7XG4gICAgICAgIGlmIChcInRocm93XCIgPT09IGkpIHRocm93IGE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHQsXG4gICAgICAgICAgZG9uZTogITBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZvciAobi5tZXRob2QgPSBpLCBuLmFyZyA9IGE7Oykge1xuICAgICAgICB2YXIgYyA9IG4uZGVsZWdhdGU7XG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgdmFyIHUgPSBtYXliZUludm9rZURlbGVnYXRlKGMsIG4pO1xuICAgICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgICBpZiAodSA9PT0geSkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gdTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwibmV4dFwiID09PSBuLm1ldGhvZCkgbi5zZW50ID0gbi5fc2VudCA9IG4uYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gbi5tZXRob2QpIHtcbiAgICAgICAgICBpZiAobyA9PT0gaCkgdGhyb3cgbyA9IHMsIG4uYXJnO1xuICAgICAgICAgIG4uZGlzcGF0Y2hFeGNlcHRpb24obi5hcmcpO1xuICAgICAgICB9IGVsc2UgXCJyZXR1cm5cIiA9PT0gbi5tZXRob2QgJiYgbi5hYnJ1cHQoXCJyZXR1cm5cIiwgbi5hcmcpO1xuICAgICAgICBvID0gZjtcbiAgICAgICAgdmFyIHAgPSB0cnlDYXRjaChlLCByLCBuKTtcbiAgICAgICAgaWYgKFwibm9ybWFsXCIgPT09IHAudHlwZSkge1xuICAgICAgICAgIGlmIChvID0gbi5kb25lID8gcyA6IGwsIHAuYXJnID09PSB5KSBjb250aW51ZTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHAuYXJnLFxuICAgICAgICAgICAgZG9uZTogbi5kb25lXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcInRocm93XCIgPT09IHAudHlwZSAmJiAobyA9IHMsIG4ubWV0aG9kID0gXCJ0aHJvd1wiLCBuLmFyZyA9IHAuYXJnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZSwgcikge1xuICAgIHZhciBuID0gci5tZXRob2QsXG4gICAgICBvID0gZS5pdGVyYXRvcltuXTtcbiAgICBpZiAobyA9PT0gdCkgcmV0dXJuIHIuZGVsZWdhdGUgPSBudWxsLCBcInRocm93XCIgPT09IG4gJiYgZS5pdGVyYXRvcltcInJldHVyblwiXSAmJiAoci5tZXRob2QgPSBcInJldHVyblwiLCByLmFyZyA9IHQsIG1heWJlSW52b2tlRGVsZWdhdGUoZSwgciksIFwidGhyb3dcIiA9PT0gci5tZXRob2QpIHx8IFwicmV0dXJuXCIgIT09IG4gJiYgKHIubWV0aG9kID0gXCJ0aHJvd1wiLCByLmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICdcIiArIG4gKyBcIicgbWV0aG9kXCIpKSwgeTtcbiAgICB2YXIgaSA9IHRyeUNhdGNoKG8sIGUuaXRlcmF0b3IsIHIuYXJnKTtcbiAgICBpZiAoXCJ0aHJvd1wiID09PSBpLnR5cGUpIHJldHVybiByLm1ldGhvZCA9IFwidGhyb3dcIiwgci5hcmcgPSBpLmFyZywgci5kZWxlZ2F0ZSA9IG51bGwsIHk7XG4gICAgdmFyIGEgPSBpLmFyZztcbiAgICByZXR1cm4gYSA/IGEuZG9uZSA/IChyW2UucmVzdWx0TmFtZV0gPSBhLnZhbHVlLCByLm5leHQgPSBlLm5leHRMb2MsIFwicmV0dXJuXCIgIT09IHIubWV0aG9kICYmIChyLm1ldGhvZCA9IFwibmV4dFwiLCByLmFyZyA9IHQpLCByLmRlbGVnYXRlID0gbnVsbCwgeSkgOiBhIDogKHIubWV0aG9kID0gXCJ0aHJvd1wiLCByLmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpO1xuICB9XG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeSh0KSB7XG4gICAgdmFyIGUgPSB7XG4gICAgICB0cnlMb2M6IHRbMF1cbiAgICB9O1xuICAgIDEgaW4gdCAmJiAoZS5jYXRjaExvYyA9IHRbMV0pLCAyIGluIHQgJiYgKGUuZmluYWxseUxvYyA9IHRbMl0sIGUuYWZ0ZXJMb2MgPSB0WzNdKSwgdGhpcy50cnlFbnRyaWVzLnB1c2goZSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeSh0KSB7XG4gICAgdmFyIGUgPSB0LmNvbXBsZXRpb24gfHwge307XG4gICAgZS50eXBlID0gXCJub3JtYWxcIiwgZGVsZXRlIGUuYXJnLCB0LmNvbXBsZXRpb24gPSBlO1xuICB9XG4gIGZ1bmN0aW9uIENvbnRleHQodCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV0sIHQuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpLCB0aGlzLnJlc2V0KCEwKTtcbiAgfVxuICBmdW5jdGlvbiB2YWx1ZXMoZSkge1xuICAgIGlmIChlIHx8IFwiXCIgPT09IGUpIHtcbiAgICAgIHZhciByID0gZVthXTtcbiAgICAgIGlmIChyKSByZXR1cm4gci5jYWxsKGUpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5uZXh0KSByZXR1cm4gZTtcbiAgICAgIGlmICghaXNOYU4oZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBvID0gLTEsXG4gICAgICAgICAgaSA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICBmb3IgKDsgKytvIDwgZS5sZW5ndGg7KSBpZiAobi5jYWxsKGUsIG8pKSByZXR1cm4gbmV4dC52YWx1ZSA9IGVbb10sIG5leHQuZG9uZSA9ICExLCBuZXh0O1xuICAgICAgICAgICAgcmV0dXJuIG5leHQudmFsdWUgPSB0LCBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaS5uZXh0ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihfdHlwZW9mKGUpICsgXCIgaXMgbm90IGl0ZXJhYmxlXCIpO1xuICB9XG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgbyhnLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgICB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgY29uZmlndXJhYmxlOiAhMFxuICB9KSwgbyhHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCB7XG4gICAgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLFxuICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgfSksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB1LCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCBlLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAodCkge1xuICAgIHZhciBlID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ICYmIHQuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhZSAmJiAoZSA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoZS5kaXNwbGF5TmFtZSB8fCBlLm5hbWUpKTtcbiAgfSwgZS5tYXJrID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHQsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSA6ICh0Ll9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUodCwgdSwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShnKSwgdDtcbiAgfSwgZS5hd3JhcCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fYXdhaXQ6IHRcbiAgICB9O1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGMsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGUuYXN5bmMgPSBmdW5jdGlvbiAodCwgciwgbiwgbywgaSkge1xuICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9IFByb21pc2UpO1xuICAgIHZhciBhID0gbmV3IEFzeW5jSXRlcmF0b3Iod3JhcCh0LCByLCBuLCBvKSwgaSk7XG4gICAgcmV0dXJuIGUuaXNHZW5lcmF0b3JGdW5jdGlvbihyKSA/IGEgOiBhLm5leHQoKS50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5kb25lID8gdC52YWx1ZSA6IGEubmV4dCgpO1xuICAgIH0pO1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoZyksIGRlZmluZShnLCB1LCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKGcsIGEsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGRlZmluZShnLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIGUua2V5cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGUgPSBPYmplY3QodCksXG4gICAgICByID0gW107XG4gICAgZm9yICh2YXIgbiBpbiBlKSByLnB1c2gobik7XG4gICAgcmV0dXJuIHIucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgZm9yICg7IHIubGVuZ3RoOykge1xuICAgICAgICB2YXIgdCA9IHIucG9wKCk7XG4gICAgICAgIGlmICh0IGluIGUpIHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgfTtcbiAgfSwgZS52YWx1ZXMgPSB2YWx1ZXMsIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldChlKSB7XG4gICAgICBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB0LCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIWUpIGZvciAodmFyIHIgaW4gdGhpcykgXCJ0XCIgPT09IHIuY2hhckF0KDApICYmIG4uY2FsbCh0aGlzLCByKSAmJiAhaXNOYU4oK3Iuc2xpY2UoMSkpICYmICh0aGlzW3JdID0gdCk7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy5kb25lID0gITA7XG4gICAgICB2YXIgdCA9IHRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gdC50eXBlKSB0aHJvdyB0LmFyZztcbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZSkge1xuICAgICAgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZTtcbiAgICAgIHZhciByID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShuLCBvKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgPSBcInRocm93XCIsIGEuYXJnID0gZSwgci5uZXh0ID0gbiwgbyAmJiAoci5tZXRob2QgPSBcIm5leHRcIiwgci5hcmcgPSB0KSwgISFvO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbyA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBvID49IDA7IC0tbykge1xuICAgICAgICB2YXIgaSA9IHRoaXMudHJ5RW50cmllc1tvXSxcbiAgICAgICAgICBhID0gaS5jb21wbGV0aW9uO1xuICAgICAgICBpZiAoXCJyb290XCIgPT09IGkudHJ5TG9jKSByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICBpZiAoaS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGMgPSBuLmNhbGwoaSwgXCJjYXRjaExvY1wiKSxcbiAgICAgICAgICAgIHUgPSBuLmNhbGwoaSwgXCJmaW5hbGx5TG9jXCIpO1xuICAgICAgICAgIGlmIChjICYmIHUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF1KSB0aHJvdyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShpLmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodCwgZSkge1xuICAgICAgZm9yICh2YXIgciA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyByID49IDA7IC0tcikge1xuICAgICAgICB2YXIgbyA9IHRoaXMudHJ5RW50cmllc1tyXTtcbiAgICAgICAgaWYgKG8udHJ5TG9jIDw9IHRoaXMucHJldiAmJiBuLmNhbGwobywgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IG8uZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBpID0gbztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaSAmJiAoXCJicmVha1wiID09PSB0IHx8IFwiY29udGludWVcIiA9PT0gdCkgJiYgaS50cnlMb2MgPD0gZSAmJiBlIDw9IGkuZmluYWxseUxvYyAmJiAoaSA9IG51bGwpO1xuICAgICAgdmFyIGEgPSBpID8gaS5jb21wbGV0aW9uIDoge307XG4gICAgICByZXR1cm4gYS50eXBlID0gdCwgYS5hcmcgPSBlLCBpID8gKHRoaXMubWV0aG9kID0gXCJuZXh0XCIsIHRoaXMubmV4dCA9IGkuZmluYWxseUxvYywgeSkgOiB0aGlzLmNvbXBsZXRlKGEpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHQsIGUpIHtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHQudHlwZSkgdGhyb3cgdC5hcmc7XG4gICAgICByZXR1cm4gXCJicmVha1wiID09PSB0LnR5cGUgfHwgXCJjb250aW51ZVwiID09PSB0LnR5cGUgPyB0aGlzLm5leHQgPSB0LmFyZyA6IFwicmV0dXJuXCIgPT09IHQudHlwZSA/ICh0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHQuYXJnLCB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCIsIHRoaXMubmV4dCA9IFwiZW5kXCIpIDogXCJub3JtYWxcIiA9PT0gdC50eXBlICYmIGUgJiYgKHRoaXMubmV4dCA9IGUpLCB5O1xuICAgIH0sXG4gICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2godCkge1xuICAgICAgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkge1xuICAgICAgICB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTtcbiAgICAgICAgaWYgKHIuZmluYWxseUxvYyA9PT0gdCkgcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLCByLmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShyKSwgeTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKHQpIHtcbiAgICAgIGZvciAodmFyIGUgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgZSA+PSAwOyAtLWUpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnRyeUVudHJpZXNbZV07XG4gICAgICAgIGlmIChyLnRyeUxvYyA9PT0gdCkge1xuICAgICAgICAgIHZhciBuID0gci5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IG4udHlwZSkge1xuICAgICAgICAgICAgdmFyIG8gPSBuLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkocik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoZSwgciwgbikge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHIsXG4gICAgICAgIG5leHRMb2M6IG5cbiAgICAgIH0sIFwibmV4dFwiID09PSB0aGlzLm1ldGhvZCAmJiAodGhpcy5hcmcgPSB0KSwgeTtcbiAgICB9XG4gIH0sIGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgX3R5cGVvZihvKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIi8vIFRPRE8oQmFiZWwgOCk6IFJlbW92ZSB0aGlzIGZpbGUuXG5cbnZhciBydW50aW1lID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvcmVnZW5lcmF0b3JSdW50aW1lXCIpKCk7XG5tb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG5cbi8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vcGFja2FnZXMvcnVudGltZS9ydW50aW1lLmpzI0w3MzY9XG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgaHR0cEFkYXB0ZXIgZnJvbSAnLi9odHRwLmpzJztcbmltcG9ydCB4aHJBZGFwdGVyIGZyb20gJy4veGhyLmpzJztcbmltcG9ydCBmZXRjaEFkYXB0ZXIgZnJvbSAnLi9mZXRjaC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXIsXG4gIGZldGNoOiBmZXRjaEFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikgfHwgYWRhcHRlciA9PT0gbnVsbCB8fCBhZGFwdGVyID09PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgY29tcG9zZVNpZ25hbHMgZnJvbSBcIi4uL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanNcIjtcbmltcG9ydCB7dHJhY2tTdHJlYW19IGZyb20gXCIuLi9oZWxwZXJzL3RyYWNrU3RyZWFtLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IHtwcm9ncmVzc0V2ZW50UmVkdWNlciwgcHJvZ3Jlc3NFdmVudERlY29yYXRvciwgYXN5bmNEZWNvcmF0b3J9IGZyb20gXCIuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzXCI7XG5pbXBvcnQgcmVzb2x2ZUNvbmZpZyBmcm9tIFwiLi4vaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzXCI7XG5pbXBvcnQgc2V0dGxlIGZyb20gXCIuLi9jb3JlL3NldHRsZS5qc1wiO1xuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCB0ZXN0ID0gKGZuLCAuLi5hcmdzKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZm4oLi4uYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmIHRlc3QoKCkgPT4ge1xuICBsZXQgZHVwbGV4QWNjZXNzZWQgPSBmYWxzZTtcblxuICBjb25zdCBoYXNDb250ZW50VHlwZSA9IG5ldyBSZXF1ZXN0KHBsYXRmb3JtLm9yaWdpbiwge1xuICAgIGJvZHk6IG5ldyBSZWFkYWJsZVN0cmVhbSgpLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGdldCBkdXBsZXgoKSB7XG4gICAgICBkdXBsZXhBY2Nlc3NlZCA9IHRydWU7XG4gICAgICByZXR1cm4gJ2hhbGYnO1xuICAgIH0sXG4gIH0pLmhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKTtcblxuICByZXR1cm4gZHVwbGV4QWNjZXNzZWQgJiYgIWhhc0NvbnRlbnRUeXBlO1xufSk7XG5cbmNvbnN0IERFRkFVTFRfQ0hVTktfU0laRSA9IDY0ICogMTAyNDtcblxuY29uc3Qgc3VwcG9ydHNSZXNwb25zZVN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiZcbiAgdGVzdCgoKSA9PiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSkpO1xuXG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgc3RyZWFtOiBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmICgocmVzKSA9PiByZXMuYm9keSlcbn07XG5cbmlzRmV0Y2hTdXBwb3J0ZWQgJiYgKCgocmVzKSA9PiB7XG4gIFsndGV4dCcsICdhcnJheUJ1ZmZlcicsICdibG9iJywgJ2Zvcm1EYXRhJywgJ3N0cmVhbSddLmZvckVhY2godHlwZSA9PiB7XG4gICAgIXJlc29sdmVyc1t0eXBlXSAmJiAocmVzb2x2ZXJzW3R5cGVdID0gdXRpbHMuaXNGdW5jdGlvbihyZXNbdHlwZV0pID8gKHJlcykgPT4gcmVzW3R5cGVdKCkgOlxuICAgICAgKF8sIGNvbmZpZykgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgUmVzcG9uc2UgdHlwZSAnJHt0eXBlfScgaXMgbm90IHN1cHBvcnRlZGAsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JULCBjb25maWcpO1xuICAgICAgfSlcbiAgfSk7XG59KShuZXcgUmVzcG9uc2UpKTtcblxuY29uc3QgZ2V0Qm9keUxlbmd0aCA9IGFzeW5jIChib2R5KSA9PiB7XG4gIGlmIChib2R5ID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQmxvYihib2R5KSkge1xuICAgIHJldHVybiBib2R5LnNpemU7XG4gIH1cblxuICBpZih1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGJvZHkpKSB7XG4gICAgY29uc3QgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keSxcbiAgICB9KTtcbiAgICByZXR1cm4gKGF3YWl0IF9yZXF1ZXN0LmFycmF5QnVmZmVyKCkpLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc0FycmF5QnVmZmVyVmlldyhib2R5KSB8fCB1dGlscy5pc0FycmF5QnVmZmVyKGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IGNvbXBvc2VkU2lnbmFsID0gY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW4gJiYgY2FuY2VsVG9rZW4udG9BYm9ydFNpZ25hbCgpXSwgdGltZW91dCk7XG5cbiAgbGV0IHJlcXVlc3Q7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmUgPSBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSAmJiAoKCkgPT4ge1xuICAgICAgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IHByb2dyZXNzRXZlbnREZWNvcmF0b3IoXG4gICAgICAgICAgcmVxdWVzdENvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoYXN5bmNEZWNvcmF0b3Iob25VcGxvYWRQcm9ncmVzcykpXG4gICAgICAgICk7XG5cbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgb25Qcm9ncmVzcywgZmx1c2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNTdHJpbmcod2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgd2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ29taXQnO1xuICAgIH1cblxuICAgIC8vIENsb3VkZmxhcmUgV29ya2VycyB0aHJvd3Mgd2hlbiBjcmVkZW50aWFscyBhcmUgZGVmaW5lZFxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2xvdWRmbGFyZS93b3JrZXJkL2lzc3Vlcy85MDJcbiAgICBjb25zdCBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID0gXCJjcmVkZW50aWFsc1wiIGluIFJlcXVlc3QucHJvdG90eXBlO1xuICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICAgIHNpZ25hbDogY29tcG9zZWRTaWduYWwsXG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5ub3JtYWxpemUoKS50b0pTT04oKSxcbiAgICAgIGJvZHk6IGRhdGEsXG4gICAgICBkdXBsZXg6IFwiaGFsZlwiLFxuICAgICAgY3JlZGVudGlhbHM6IGlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQgPyB3aXRoQ3JlZGVudGlhbHMgOiB1bmRlZmluZWRcbiAgICB9KTtcblxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xuXG4gICAgY29uc3QgaXNTdHJlYW1SZXNwb25zZSA9IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKHJlc3BvbnNlVHlwZSA9PT0gJ3N0cmVhbScgfHwgcmVzcG9uc2VUeXBlID09PSAncmVzcG9uc2UnKTtcblxuICAgIGlmIChzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChvbkRvd25sb2FkUHJvZ3Jlc3MgfHwgKGlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUpKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICBjb25zdCBbb25Qcm9ncmVzcywgZmx1c2hdID0gb25Eb3dubG9hZFByb2dyZXNzICYmIHByb2dyZXNzRXZlbnREZWNvcmF0b3IoXG4gICAgICAgIHJlc3BvbnNlQ29udGVudExlbmd0aCxcbiAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoYXN5bmNEZWNvcmF0b3Iob25Eb3dubG9hZFByb2dyZXNzKSwgdHJ1ZSlcbiAgICAgICkgfHwgW107XG5cbiAgICAgIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFxuICAgICAgICB0cmFja1N0cmVhbShyZXNwb25zZS5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsICgpID0+IHtcbiAgICAgICAgICBmbHVzaCAmJiBmbHVzaCgpO1xuICAgICAgICAgIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSB8fCAndGV4dCc7XG5cbiAgICBsZXQgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzb2x2ZXJzW3V0aWxzLmZpbmRLZXkocmVzb2x2ZXJzLCByZXNwb25zZVR5cGUpIHx8ICd0ZXh0J10ocmVzcG9uc2UsIGNvbmZpZyk7XG5cbiAgICAhaXNTdHJlYW1SZXNwb25zZSAmJiB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBoZWFkZXJzOiBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKSxcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfSlcbiAgICB9KVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuXG4gICAgaWYgKGVyciAmJiBlcnIubmFtZSA9PT0gJ1R5cGVFcnJvcicgJiYgL2ZldGNoL2kudGVzdChlcnIubWVzc2FnZSkpIHtcbiAgICAgIHRocm93IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSxcbiAgICAgICAge1xuICAgICAgICAgIGNhdXNlOiBlcnIuY2F1c2UgfHwgZXJyXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZXJyLCBlcnIgJiYgZXJyLmNvZGUsIGNvbmZpZywgcmVxdWVzdCk7XG4gIH1cbn0pO1xuXG5cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgcGFyc2VQcm90b2NvbCBmcm9tICcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IHtwcm9ncmVzc0V2ZW50UmVkdWNlcn0gZnJvbSAnLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyc7XG5pbXBvcnQgcmVzb2x2ZUNvbmZpZyBmcm9tIFwiLi4vaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzXCI7XG5cbmNvbnN0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCAmJiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY29uc3QgX2NvbmZpZyA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBfY29uZmlnLmRhdGE7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShfY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCBvblVwbG9hZFByb2dyZXNzLCBvbkRvd25sb2FkUHJvZ3Jlc3N9ID0gX2NvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBsZXQgdXBsb2FkVGhyb3R0bGVkLCBkb3dubG9hZFRocm90dGxlZDtcbiAgICBsZXQgZmx1c2hVcGxvYWQsIGZsdXNoRG93bmxvYWQ7XG5cbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgZmx1c2hVcGxvYWQgJiYgZmx1c2hVcGxvYWQoKTsgLy8gZmx1c2ggZXZlbnRzXG4gICAgICBmbHVzaERvd25sb2FkICYmIGZsdXNoRG93bmxvYWQoKTsgLy8gZmx1c2ggZXZlbnRzXG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcblxuICAgICAgX2NvbmZpZy5zaWduYWwgJiYgX2NvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxdWVzdC5vcGVuKF9jb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIF9jb25maWcudXJsLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gX2NvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBfY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gX2NvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChfY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFfY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBfY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKG9uRG93bmxvYWRQcm9ncmVzcykge1xuICAgICAgKFtkb3dubG9hZFRocm90dGxlZCwgZmx1c2hEb3dubG9hZF0gPSBwcm9ncmVzc0V2ZW50UmVkdWNlcihvbkRvd25sb2FkUHJvZ3Jlc3MsIHRydWUpKTtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBkb3dubG9hZFRocm90dGxlZCk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAob25VcGxvYWRQcm9ncmVzcyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgKFt1cGxvYWRUaHJvdHRsZWQsIGZsdXNoVXBsb2FkXSA9IHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uVXBsb2FkUHJvZ3Jlc3MpKTtcblxuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCB1cGxvYWRUaHJvdHRsZWQpO1xuXG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgZmx1c2hVcGxvYWQpO1xuICAgIH1cblxuICAgIGlmIChfY29uZmlnLmNhbmNlbFRva2VuIHx8IF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbiAmJiBfY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChfY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBfY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogX2NvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woX2NvbmZpZy51cmwpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIHBsYXRmb3JtLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICB0b0Fib3J0U2lnbmFsKCkge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBjb25zdCBhYm9ydCA9IChlcnIpID0+IHtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdWJzY3JpYmUoYWJvcnQpO1xuXG4gICAgY29udHJvbGxlci5zaWduYWwudW5zdWJzY3JpYmUgPSAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIHJldHVybiBjb250cm9sbGVyLnNpZ25hbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXkgPSB7fTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgICAgLy8gbWF0Y2ggd2l0aG91dCB0aGUgMiB0b3Agc3RhY2sgbGluZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaWdub3JlIHRoZSBjYXNlIHdoZXJlIFwic3RhY2tcIiBpcyBhbiB1bi13cml0YWJsZSBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLmFsbG93QWJzb2x1dGVVcmxzXG4gICAgaWYgKGNvbmZpZy5hbGxvd0Fic29sdXRlVXJscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkbyBub3RoaW5nXG4gICAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLmFsbG93QWJzb2x1dGVVcmxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbmZpZy5hbGxvd0Fic29sdXRlVXJscyA9IHRoaXMuZGVmYXVsdHMuYWxsb3dBYnNvbHV0ZVVybHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZy5hbGxvd0Fic29sdXRlVXJscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMoY29uZmlnLCB7XG4gICAgICBiYXNlVXJsOiB2YWxpZGF0b3JzLnNwZWxsaW5nKCdiYXNlVVJMJyksXG4gICAgICB3aXRoWHNyZlRva2VuOiB2YWxpZGF0b3JzLnNwZWxsaW5nKCd3aXRoWFNSRlRva2VuJylcbiAgICB9LCB0cnVlKTtcblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCwgY29uZmlnLmFsbG93QWJzb2x1dGVVcmxzKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICBpZiAocmVzcG9uc2UpIHtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXMgPyByZXNwb25zZS5zdGF0dXMgOiBudWxsO1xuICB9XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuY29uc3QgaXNWYWxpZEhlYWRlck5hbWUgPSAoc3RyKSA9PiAvXlstX2EtekEtWjAtOV5gfH4sISMkJSYnKisuXSskLy50ZXN0KHN0ci50cmltKCkpO1xuXG5mdW5jdGlvbiBtYXRjaEhlYWRlclZhbHVlKGNvbnRleHQsIHZhbHVlLCBoZWFkZXIsIGZpbHRlciwgaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsdGVyKSAhPT0gLTE7XG4gIH1cblxuICBpZiAodXRpbHMuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBsSGVhZGVyKTtcblxuICAgICAgaWYoIWtleSB8fCBzZWxmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBfcmV3cml0ZSA9PT0gdHJ1ZSB8fCAoX3Jld3JpdGUgPT09IHVuZGVmaW5lZCAmJiBzZWxmW2tleV0gIT09IGZhbHNlKSkge1xuICAgICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IChoZWFkZXJzLCBfcmV3cml0ZSkgPT5cbiAgICAgIHV0aWxzLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKVxuICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNIZWFkZXJzKGhlYWRlcikpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlci5lbnRyaWVzKCkpIHtcbiAgICAgICAgc2V0SGVhZGVyKHZhbHVlLCBrZXksIHJld3JpdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscy5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCwgYWxsb3dBYnNvbHV0ZVVybHMpIHtcbiAgbGV0IGlzUmVsYXRpdmVVcmwgPSAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpO1xuICBpZiAoYmFzZVVSTCAmJiBpc1JlbGF0aXZlVXJsIHx8IGFsbG93QWJzb2x1dGVVcmxzID09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgcHJvcCwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIHByb3AgLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBwcm9wICwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBwcm9wICwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhYU1JGVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiICwgcHJvcCkgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSxwcm9wLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9BeGlvc0Vycm9yLmpzJztcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCcsICdmZXRjaCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICByZXR1cm4gaGFzSlNPTkNvbnRlbnRUeXBlID8gSlNPTi5zdHJpbmdpZnkoZm9ybURhdGFUb0pTT04oZGF0YSkpIDogZGF0YTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmICh1dGlscy5pc1Jlc3BvbnNlKGRhdGEpIHx8IHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmICgoZm9yY2VkSlNPTlBhcnNpbmcgJiYgIXRoaXMucmVzcG9uc2VUeXBlKSB8fCBKU09OUmVxdWVzdGVkKSkge1xuICAgICAgY29uc3Qgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgICAgY29uc3Qgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJyxcbiAgICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgKG1ldGhvZCkgPT4ge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuOC4zXCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7PyhvYmplY3R8RnVuY3Rpb24pfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHNlcmlhbGl6ZTogb3B0aW9uc1xuICAgIH07XG4gIH0gXG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSBcIi4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gKHNpZ25hbHMgPSBzaWduYWxzID8gc2lnbmFscy5maWx0ZXIoQm9vbGVhbikgOiBbXSk7XG5cbiAgaWYgKHRpbWVvdXQgfHwgbGVuZ3RoKSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgYWJvcnRlZDtcblxuICAgIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoIWFib3J0ZWQpIHtcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGNvbnN0IGVyciA9IHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yID8gcmVhc29uIDogdGhpcy5yZWFzb247XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyIGluc3RhbmNlb2YgQXhpb3NFcnJvciA/IGVyciA6IG5ldyBDYW5jZWxlZEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgb25hYm9ydChuZXcgQXhpb3NFcnJvcihgdGltZW91dCAke3RpbWVvdXR9IG9mIG1zIGV4Y2VlZGVkYCwgQXhpb3NFcnJvci5FVElNRURPVVQpKVxuICAgIH0sIHRpbWVvdXQpXG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIGlmIChzaWduYWxzKSB7XG4gICAgICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnVuc3Vic2NyaWJlID8gc2lnbmFsLnVuc3Vic2NyaWJlKG9uYWJvcnQpIDogc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaWduYWxzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaWduYWxzLmZvckVhY2goKHNpZ25hbCkgPT4gc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkpO1xuXG4gICAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gICAgc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdXRpbHMuYXNhcCh1bnN1YnNjcmliZSk7XG5cbiAgICByZXR1cm4gc2lnbmFsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2VTaWduYWxzO1xuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAge1xuICAgIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgY29uc3QgY29va2llID0gW25hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcblxuICAgICAgdXRpbHMuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhwYXRoKSAmJiBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKGRvbWFpbikgJiYgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcblxuICAgICAgc2VjdXJlID09PSB0cnVlICYmIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcblxuICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgfSxcblxuICAgIHJlYWQobmFtZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgOlxuXG4gIC8vIE5vbi1zdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAge1xuICAgIHdyaXRlKCkge30sXG4gICAgcmVhZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlKCkge31cbiAgfTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nIGxpa2UgYGZvb1t4XVt5XVt6XWAgYW5kIHJldHVybnMgYW4gYXJyYXkgbGlrZSBgWydmb28nLCAneCcsICd5JywgJ3onXVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzLlxuICovXG5mdW5jdGlvbiBwYXJzZVByb3BQYXRoKG5hbWUpIHtcbiAgLy8gZm9vW3hdW3ldW3pdXG4gIC8vIGZvby54LnkuelxuICAvLyBmb28teC15LXpcbiAgLy8gZm9vIHggeSB6XG4gIHJldHVybiB1dGlscy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoWzBdID09PSAnW10nID8gJycgOiBtYXRjaFsxXSB8fCBtYXRjaFswXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY29udmVydCB0byBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhbmQgdmFsdWVzIGFzIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb09iamVjdChhcnIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBsZXQgaTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGxldCBrZXk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgb2JqW2tleV0gPSBhcnJba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgRm9ybURhdGEgb2JqZWN0IGFuZCByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgVGhlIEZvcm1EYXRhIG9iamVjdCB0byBjb252ZXJ0IHRvIEpTT04uXG4gKlxuICogQHJldHVybnMge09iamVjdDxzdHJpbmcsIGFueT4gfCBudWxsfSBUaGUgY29udmVydGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZm9ybURhdGFUb0pTT04oZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgbGV0IG5hbWUgPSBwYXRoW2luZGV4KytdO1xuXG4gICAgaWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IGlzTnVtZXJpY0tleSA9IE51bWJlci5pc0Zpbml0ZSgrbmFtZSk7XG4gICAgY29uc3QgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzLmhhc093blByb3AodGFyZ2V0LCBuYW1lKSkge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSBbdGFyZ2V0W25hbWVdLCB2YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRbbmFtZV0gfHwgIXV0aWxzLmlzT2JqZWN0KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0W25hbWVdLCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0ICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZm9ybURhdGEpICYmIHV0aWxzLmlzRnVuY3Rpb24oZm9ybURhdGEuZW50cmllcykpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1EYXRhVG9KU09OO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgPyAoKG9yaWdpbiwgaXNNU0lFKSA9PiAodXJsKSA9PiB7XG4gIHVybCA9IG5ldyBVUkwodXJsLCBwbGF0Zm9ybS5vcmlnaW4pO1xuXG4gIHJldHVybiAoXG4gICAgb3JpZ2luLnByb3RvY29sID09PSB1cmwucHJvdG9jb2wgJiZcbiAgICBvcmlnaW4uaG9zdCA9PT0gdXJsLmhvc3QgJiZcbiAgICAoaXNNU0lFIHx8IG9yaWdpbi5wb3J0ID09PSB1cmwucG9ydClcbiAgKTtcbn0pKFxuICBuZXcgVVJMKHBsYXRmb3JtLm9yaWdpbiksXG4gIHBsYXRmb3JtLm5hdmlnYXRvciAmJiAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KHBsYXRmb3JtLm5hdmlnYXRvci51c2VyQWdlbnQpXG4pIDogKCkgPT4gdHJ1ZTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsImltcG9ydCBzcGVlZG9tZXRlciBmcm9tIFwiLi9zcGVlZG9tZXRlci5qc1wiO1xuaW1wb3J0IHRocm90dGxlIGZyb20gXCIuL3Rocm90dGxlLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50UmVkdWNlciA9IChsaXN0ZW5lciwgaXNEb3dubG9hZFN0cmVhbSwgZnJlcSA9IDMpID0+IHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gdGhyb3R0bGUoZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZSxcbiAgICAgIGxlbmd0aENvbXB1dGFibGU6IHRvdGFsICE9IG51bGwsXG4gICAgICBbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ106IHRydWVcbiAgICB9O1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH0sIGZyZXEpO1xufVxuXG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NFdmVudERlY29yYXRvciA9ICh0b3RhbCwgdGhyb3R0bGVkKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuXG4gIHJldHVybiBbKGxvYWRlZCkgPT4gdGhyb3R0bGVkWzBdKHtcbiAgICBsZW5ndGhDb21wdXRhYmxlLFxuICAgIHRvdGFsLFxuICAgIGxvYWRlZFxuICB9KSwgdGhyb3R0bGVkWzFdXTtcbn1cblxuZXhwb3J0IGNvbnN0IGFzeW5jRGVjb3JhdG9yID0gKGZuKSA9PiAoLi4uYXJncykgPT4gdXRpbHMuYXNhcCgoKSA9PiBmbiguLi5hcmdzKSk7XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gXCIuL2lzVVJMU2FtZU9yaWdpbi5qc1wiO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSBcIi4vY29va2llcy5qc1wiO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSBcIi4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qc1wiO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gXCIuLi9jb3JlL21lcmdlQ29uZmlnLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gXCIuL2J1aWxkVVJMLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChjb25maWcpID0+IHtcbiAgY29uc3QgbmV3Q29uZmlnID0gbWVyZ2VDb25maWcoe30sIGNvbmZpZyk7XG5cbiAgbGV0IHtkYXRhLCB3aXRoWFNSRlRva2VuLCB4c3JmSGVhZGVyTmFtZSwgeHNyZkNvb2tpZU5hbWUsIGhlYWRlcnMsIGF1dGh9ID0gbmV3Q29uZmlnO1xuXG4gIG5ld0NvbmZpZy5oZWFkZXJzID0gaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGhlYWRlcnMpO1xuXG4gIG5ld0NvbmZpZy51cmwgPSBidWlsZFVSTChidWlsZEZ1bGxQYXRoKG5ld0NvbmZpZy5iYXNlVVJMLCBuZXdDb25maWcudXJsLCBuZXdDb25maWcuYWxsb3dBYnNvbHV0ZVVybHMpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiLyoqXG4gKiBUaHJvdHRsZSBkZWNvcmF0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCBmcmVxKSB7XG4gIGxldCB0aW1lc3RhbXAgPSAwO1xuICBsZXQgdGhyZXNob2xkID0gMTAwMCAvIGZyZXE7XG4gIGxldCBsYXN0QXJncztcbiAgbGV0IHRpbWVyO1xuXG4gIGNvbnN0IGludm9rZSA9IChhcmdzLCBub3cgPSBEYXRlLm5vdygpKSA9PiB7XG4gICAgdGltZXN0YW1wID0gbm93O1xuICAgIGxhc3RBcmdzID0gbnVsbDtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgfVxuICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9XG5cbiAgY29uc3QgdGhyb3R0bGVkID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHBhc3NlZCA9IG5vdyAtIHRpbWVzdGFtcDtcbiAgICBpZiAoIHBhc3NlZCA+PSB0aHJlc2hvbGQpIHtcbiAgICAgIGludm9rZShhcmdzLCBub3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0QXJncyA9IGFyZ3M7XG4gICAgICBpZiAoIXRpbWVyKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGludm9rZShsYXN0QXJncylcbiAgICAgICAgfSwgdGhyZXNob2xkIC0gcGFzc2VkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBmbHVzaCA9ICgpID0+IGxhc3RBcmdzICYmIGludm9rZShsYXN0QXJncyk7XG5cbiAgcmV0dXJuIFt0aHJvdHRsZWQsIGZsdXNoXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGhyb3R0bGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuLy8gdGVtcG9yYXJ5IGhvdGZpeCB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzIHVudGlsIEF4aW9zVVJMU2VhcmNoUGFyYW1zIGlzIHJlZmFjdG9yZWRcbmltcG9ydCBQbGF0Zm9ybUZvcm1EYXRhIGZyb20gJy4uL3BsYXRmb3JtL25vZGUvY2xhc3Nlcy9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdGhpbmcgaXMgYSBhcnJheSBvciBqcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRoaW5nIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSB2aXNpdGVkLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Zpc2l0YWJsZSh0aGluZykge1xuICByZXR1cm4gdXRpbHMuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMuaXNBcnJheSh0aGluZyk7XG59XG5cbi8qKlxuICogSXQgcmVtb3ZlcyB0aGUgYnJhY2tldHMgZnJvbSB0aGUgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IHdpdGhvdXQgdGhlIGJyYWNrZXRzLlxuICovXG5mdW5jdGlvbiByZW1vdmVCcmFja2V0cyhrZXkpIHtcbiAgcmV0dXJuIHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5O1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGF0aCwgYSBrZXksIGFuZCBhIGJvb2xlYW4sIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY3VycmVudCBvYmplY3QgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3RzIC0gSWYgdHJ1ZSwgdGhlIGtleSB3aWxsIGJlIHJlbmRlcmVkIHdpdGggZG90cyBpbnN0ZWFkIG9mIGJyYWNrZXRzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbi8qKlxuICogSWYgdGhlIGFycmF5IGlzIGFuIGFycmF5IGFuZCBub25lIG9mIGl0cyBlbGVtZW50cyBhcmUgdmlzaXRhYmxlLCB0aGVuIGl0J3MgYSBmbGF0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscy50b0ZsYXRPYmplY3QodXRpbHMsIHt9LCBudWxsLCBmdW5jdGlvbiBmaWx0ZXIocHJvcCkge1xuICByZXR1cm4gL15pc1tBLVpdLy50ZXN0KHByb3ApO1xufSk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmlzaXRvcl1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWV0YVRva2VucyA9IHRydWVdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRvdHMgPSBmYWxzZV1cbiAqIEBwYXJhbSB7P0Jvb2xlYW59IFtvcHRpb25zLmluZGV4ZXMgPSBmYWxzZV1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG4vKipcbiAqIEl0IGNvbnZlcnRzIGFuIG9iamVjdCBpbnRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gZm9ybSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIC0gVGhlIEZvcm1EYXRhIG9iamVjdCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKFBsYXRmb3JtRm9ybURhdGEgfHwgRm9ybURhdGEpKCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIG9wdGlvbnMgPSB1dGlscy50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgIG1ldGFUb2tlbnM6IHRydWUsXG4gICAgZG90czogZmFsc2UsXG4gICAgaW5kZXhlczogZmFsc2VcbiAgfSwgZmFsc2UsIGZ1bmN0aW9uIGRlZmluZWQob3B0aW9uLCBzb3VyY2UpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgICByZXR1cm4gIXV0aWxzLmlzVW5kZWZpbmVkKHNvdXJjZVtvcHRpb25dKTtcbiAgfSk7XG5cbiAgY29uc3QgbWV0YVRva2VucyA9IG9wdGlvbnMubWV0YVRva2VucztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGNvbnN0IHZpc2l0b3IgPSBvcHRpb25zLnZpc2l0b3IgfHwgZGVmYXVsdFZpc2l0b3I7XG4gIGNvbnN0IGRvdHMgPSBvcHRpb25zLmRvdHM7XG4gIGNvbnN0IGluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XG4gIGNvbnN0IF9CbG9iID0gb3B0aW9ucy5CbG9iIHx8IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iO1xuICBjb25zdCB1c2VCbG9iID0gX0Jsb2IgJiYgdXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShmb3JtRGF0YSk7XG5cbiAgaWYgKCF1dGlscy5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlQmxvYiAmJiB1dGlscy5pc0Jsb2IodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVzZUJsb2IgJiYgdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB2aXNpdG9yLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfE51bWJlcj59IHBhdGhcbiAgICogQHRoaXMge0Zvcm1EYXRhfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgdG8gdmlzaXQgdGhlIGVhY2ggcHJvcCBvZiB0aGUgdmFsdWUgcmVjdXJzaXZlbHlcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmF1bHRWaXNpdG9yKHZhbHVlLCBrZXksIHBhdGgpIHtcbiAgICBsZXQgYXJyID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgJiYgIXBhdGggJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IG1ldGFUb2tlbnMgPyBrZXkgOiBrZXkuc2xpY2UoMCwgLTIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAodXRpbHMuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAoKHV0aWxzLmlzRmlsZUxpc3QodmFsdWUpIHx8IHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiBmb3JtRGF0YS5hcHBlbmQoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgICAgIGluZGV4ZXMgPT09IHRydWUgPyByZW5kZXJLZXkoW2tleV0sIGluZGV4LCBkb3RzKSA6IChpbmRleGVzID09PSBudWxsID8ga2V5IDoga2V5ICsgJ1tdJyksXG4gICAgICAgICAgICBjb252ZXJ0VmFsdWUoZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNWaXNpdGFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3JtRGF0YS5hcHBlbmQocmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cyksIGNvbnZlcnRWYWx1ZSh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc3RhY2sgPSBbXTtcblxuICBjb25zdCBleHBvc2VkSGVscGVycyA9IE9iamVjdC5hc3NpZ24ocHJlZGljYXRlcywge1xuICAgIGRlZmF1bHRWaXNpdG9yLFxuICAgIGNvbnZlcnRWYWx1ZSxcbiAgICBpc1Zpc2l0YWJsZVxuICB9KTtcblxuICBmdW5jdGlvbiBidWlsZCh2YWx1ZSwgcGF0aCkge1xuICAgIGlmICh1dGlscy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcblxuICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhdGguam9pbignLicpKTtcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuICAgIHV0aWxzLmZvckVhY2godmFsdWUsIGZ1bmN0aW9uIGVhY2goZWwsIGtleSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIHZpc2l0b3IuY2FsbChcbiAgICAgICAgZm9ybURhdGEsIGVsLCB1dGlscy5pc1N0cmluZyhrZXkpID8ga2V5LnRyaW0oKSA6IGtleSwgcGF0aCwgZXhwb3NlZEhlbHBlcnNcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgYnVpbGQoZWwsIHBhdGggPyBwYXRoLmNvbmNhdChrZXkpIDogW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Gb3JtRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiXG5leHBvcnQgY29uc3Qgc3RyZWFtQ2h1bmsgPSBmdW5jdGlvbiogKGNodW5rLCBjaHVua1NpemUpIHtcbiAgbGV0IGxlbiA9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgaWYgKCFjaHVua1NpemUgfHwgbGVuIDwgY2h1bmtTaXplKSB7XG4gICAgeWllbGQgY2h1bms7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBlbmQ7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIGVuZCA9IHBvcyArIGNodW5rU2l6ZTtcbiAgICB5aWVsZCBjaHVuay5zbGljZShwb3MsIGVuZCk7XG4gICAgcG9zID0gZW5kO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZWFkQnl0ZXMgPSBhc3luYyBmdW5jdGlvbiogKGl0ZXJhYmxlLCBjaHVua1NpemUpIHtcbiAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiByZWFkU3RyZWFtKGl0ZXJhYmxlKSkge1xuICAgIHlpZWxkKiBzdHJlYW1DaHVuayhjaHVuaywgY2h1bmtTaXplKTtcbiAgfVxufVxuXG5jb25zdCByZWFkU3RyZWFtID0gYXN5bmMgZnVuY3Rpb24qIChzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICB5aWVsZCogc3RyZWFtO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgdHJ5IHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IHJlYWRlci5jYW5jZWwoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdHJhY2tTdHJlYW0gPSAoc3RyZWFtLCBjaHVua1NpemUsIG9uUHJvZ3Jlc3MsIG9uRmluaXNoKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplKTtcblxuICBsZXQgYnl0ZXMgPSAwO1xuICBsZXQgZG9uZTtcbiAgbGV0IF9vbkZpbmlzaCA9IChlKSA9PiB7XG4gICAgaWYgKCFkb25lKSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIG9uRmluaXNoICYmIG9uRmluaXNoKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgX29uRmluaXNoKCk7XG4gICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob25Qcm9ncmVzcykge1xuICAgICAgICAgIGxldCBsb2FkZWRCeXRlcyA9IGJ5dGVzICs9IGxlbjtcbiAgICAgICAgICBvblByb2dyZXNzKGxvYWRlZEJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfb25GaW5pc2goZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2FuY2VsKHJlYXNvbikge1xuICAgICAgX29uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG52YWxpZGF0b3JzLnNwZWxsaW5nID0gZnVuY3Rpb24gc3BlbGxpbmcoY29ycmVjdFNwZWxsaW5nKSB7XG4gIHJldHVybiAodmFsdWUsIG9wdCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGAke29wdH0gaXMgbGlrZWx5IGEgbWlzc3BlbGxpbmcgb2YgJHtjb3JyZWN0U3BlbGxpbmd9YCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiBudWxsXG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCJjb25zdCBoYXNCcm93c2VyRW52ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuY29uc3QgX25hdmlnYXRvciA9IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvciB8fCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSBoYXNCcm93c2VyRW52ICYmXG4gICghX25hdmlnYXRvciB8fCBbJ1JlYWN0TmF0aXZlJywgJ05hdGl2ZVNjcmlwdCcsICdOUyddLmluZGV4T2YoX25hdmlnYXRvci5wcm9kdWN0KSA8IDApO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5jb25zdCBvcmlnaW4gPSBoYXNCcm93c2VyRW52ICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IHtcbiAgaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIF9uYXZpZ2F0b3IgYXMgbmF2aWdhdG9yLFxuICBvcmlnaW5cbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tICcuL25vZGUvaW5kZXguanMnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi9jb21tb24vdXRpbHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC4uLnV0aWxzLFxuICAuLi5wbGF0Zm9ybVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG4vLyBvcmlnaW5hbCBjb2RlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGlnaXRhbEJyYWluSlMvQXhpb3NQcm9taXNlL2Jsb2IvMTZkZWFiMTM3MTBlYzA5Nzc5OTIyMTMxZjNmYTU5NTQzMjBmODNhYi9saWIvdXRpbHMuanMjTDExLUwzNFxuXG5jb25zdCBfc2V0SW1tZWRpYXRlID0gKChzZXRJbW1lZGlhdGVTdXBwb3J0ZWQsIHBvc3RNZXNzYWdlU3VwcG9ydGVkKSA9PiB7XG4gIGlmIChzZXRJbW1lZGlhdGVTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlO1xuICB9XG5cbiAgcmV0dXJuIHBvc3RNZXNzYWdlU3VwcG9ydGVkID8gKCh0b2tlbiwgY2FsbGJhY2tzKSA9PiB7XG4gICAgX2dsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoe3NvdXJjZSwgZGF0YX0pID0+IHtcbiAgICAgIGlmIChzb3VyY2UgPT09IF9nbG9iYWwgJiYgZGF0YSA9PT0gdG9rZW4pIHtcbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCAmJiBjYWxsYmFja3Muc2hpZnQoKSgpO1xuICAgICAgfVxuICAgIH0sIGZhbHNlKTtcblxuICAgIHJldHVybiAoY2IpID0+IHtcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGNiKTtcbiAgICAgIF9nbG9iYWwucG9zdE1lc3NhZ2UodG9rZW4sIFwiKlwiKTtcbiAgICB9XG4gIH0pKGBheGlvc0Ake01hdGgucmFuZG9tKCl9YCwgW10pIDogKGNiKSA9PiBzZXRUaW1lb3V0KGNiKTtcbn0pKFxuICB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nLFxuICBpc0Z1bmN0aW9uKF9nbG9iYWwucG9zdE1lc3NhZ2UpXG4pO1xuXG5jb25zdCBhc2FwID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrICE9PSAndW5kZWZpbmVkJyA/XG4gIHF1ZXVlTWljcm90YXNrLmJpbmQoX2dsb2JhbCkgOiAoIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5leHRUaWNrIHx8IF9zZXRJbW1lZGlhdGUpO1xuXG4vLyAqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlLFxuICBzZXRJbW1lZGlhdGU6IF9zZXRJbW1lZGlhdGUsXG4gIGFzYXBcbn07XG4iLCIvKlxuICogIEFSQ29udHJvbGxlck5GVF90ZC50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cbmltcG9ydCB7XG4gIElORlRNYXJrZXJJbmZvLFxuICBJSW1hZ2VPYmosXG4gIElORlRNYXJrZXIsXG59IGZyb20gXCIuL2Fic3RyYWN0aW9ucy9Db21tb25JbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBJQVJUb29sa2l0TkZUIH0gZnJvbSBcIi4vYWJzdHJhY3Rpb25zL0lBUlRvb2xraXRORlRcIjtcbmltcG9ydCB7IEFSVG9vbGtpdE5GVCB9IGZyb20gXCIuL0FSVG9vbGtpdE5GVF90ZFwiO1xuaW1wb3J0IHsgQWJzdHJhY3RBUkNvbnRyb2xsZXJORlQgfSBmcm9tIFwiLi9hYnN0cmFjdGlvbnMvQWJzdHJhY3RBUkNvbnRyb2xsZXJORlRcIjtcblxuZXhwb3J0IGNsYXNzIEFSQ29udHJvbGxlck5GVCBpbXBsZW1lbnRzIEFic3RyYWN0QVJDb250cm9sbGVyTkZUIHtcbiAgLy8gcHJpdmF0ZSBkZWNsYXJhdGlvbnNcbiAgcHJpdmF0ZSBpZDogbnVtYmVyO1xuICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfY2FtZXJhUGFyYW06IHN0cmluZztcbiAgcHJpdmF0ZSBjYW1lcmFJZDogbnVtYmVyO1xuXG4gIHByaXZhdGUgYXJ0b29sa2l0TkZUOiBJQVJUb29sa2l0TkZUO1xuICBwcml2YXRlIEZTOiBhbnk7XG4gIHByaXZhdGUgU3RyaW5nTGlzdDogYW55O1xuXG4gIHByaXZhdGUgbGlzdGVuZXJzOiBvYmplY3Q7XG4gIHByaXZhdGUgbmZ0TWFya2VyczogSU5GVE1hcmtlcltdO1xuXG4gIHByaXZhdGUgdHJhbnNmb3JtX21hdDogRmxvYXQ2NEFycmF5O1xuICBwcml2YXRlIHRyYW5zZm9ybUdMX1JIOiBGbG9hdDY0QXJyYXk7XG4gIHByaXZhdGUgY2FtZXJhX21hdDogRmxvYXQ2NEFycmF5O1xuXG4gIHByaXZhdGUgdmlkZW9XaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIHZpZGVvSGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgdmlkZW9TaXplOiBudW1iZXI7XG4gIHByaXZhdGUgZnJhbWVzaXplOiBudW1iZXI7XG4gIHByaXZhdGUgdmlkZW9MdW1hOiBVaW50OEFycmF5O1xuICBwcml2YXRlIGdyYXlzY2FsZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgZ3JheXNjYWxlU291cmNlOiBVaW50OEFycmF5O1xuICBwcml2YXRlIHZpZGVvTHVtYUludGVybmFsOiBib29sZWFuOyAvLyBBZGRlZCB2aWRlb0x1bWFJbnRlcm5hbFxuXG4gIHByaXZhdGUgbmZ0TWFya2VyRm91bmQ6IGJvb2xlYW47IC8vID0gZmFsc2VcbiAgcHJpdmF0ZSBuZnRNYXJrZXJGb3VuZFRpbWU6IG51bWJlcjtcbiAgcHJpdmF0ZSBuZnRNYXJrZXJDb3VudDogbnVtYmVyOyAvLyA9IDBcbiAgcHJpdmF0ZSBkZWZhdWx0TWFya2VyV2lkdGg6IG51bWJlcjtcblxuICBwcml2YXRlIF9id3BvaW50ZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIEFSQ29udHJvbGxlck5GVCBkZWZhdWx0IGNvbnN0cnVjdG9yLiBJdCBoYXMgbm8gcGFyYW1zIChzZWUgYWJvdmUpLlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBpbml0aWFsaXplZDpcbiAgICogaWQsIHdpZHRoLCBoZWlnaHQsIGNhbWVyYVBhcmFtLCBjYW1lcmFJZCxcbiAgICogY2FtZXJhTG9hZGVkLCBhcnRvb2xraXRORlQsIGxpc3RlbmVycywgbmZ0TWFya2VycywgdHJhbnNmb3JtX21hdCxcbiAgICogdHJhbnNmb3JtR0xfUkgsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCB2aWRlb1NpemUsXG4gICAqIHZpZGVvTHVtYSwgZnJhbWVzaXplLCBjYW1lcmFfbWF0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoKTtcbiAgLyoqXG4gICAqIFRoZSBBUkNvbnRyb2xsZXJORlQgZGVmYXVsdCBjb25zdHJ1Y3Rvci4gSXQgaGFzIDIgcGFyYW1zIChzZWUgYWJvdmUpLlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBpbml0aWFsaXplZDpcbiAgICogaWQsIHdpZHRoLCBoZWlnaHQsIGNhbWVyYVBhcmFtLCBjYW1lcmFJZCxcbiAgICogY2FtZXJhTG9hZGVkLCBhcnRvb2xraXRORlQsIGxpc3RlbmVycywgbmZ0TWFya2VycywgdHJhbnNmb3JtX21hdCxcbiAgICogdHJhbnNmb3JtR0xfUkgsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCB2aWRlb1NpemUsXG4gICAqIHZpZGVvTHVtYSwgZnJhbWVzaXplLCBjYW1lcmFfbWF0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKi9cbiAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpO1xuICAvKipcbiAgICogVGhlIEFSQ29udHJvbGxlck5GVCBjb25zdHJ1Y3Rvci4gSXQgaGFzIDQgcGFyYW1zIChzZWUgYWJvdmUpLlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBpbml0aWFsaXplZDpcbiAgICogaWQsIHdpZHRoLCBoZWlnaHQsIGNhbWVyYVBhcmFtLCBjYW1lcmFJZCxcbiAgICogY2FtZXJhTG9hZGVkLCBhcnRvb2xraXRORlQsIGxpc3RlbmVycywgbmZ0TWFya2VycywgdHJhbnNmb3JtX21hdCxcbiAgICogdHJhbnNmb3JtR0xfUkgsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCB2aWRlb1NpemUsXG4gICAqIGZyYW1lc2l6ZSwgY2FtZXJhX21hdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbWVyYVBhcmFtXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW50ZXJuYWxMdW1hXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIGNhbWVyYVBhcmFtOiBzdHJpbmcsXG4gICAgaW50ZXJuYWxMdW1hOiBib29sZWFuLFxuICApO1xuICBjb25zdHJ1Y3RvcihcbiAgICB3aWR0aD86IG51bWJlcixcbiAgICBoZWlnaHQ/OiBudW1iZXIsXG4gICAgY2FtZXJhUGFyYW0/OiBzdHJpbmcsXG4gICAgaW50ZXJuYWxMdW1hPzogYm9vbGVhbixcbiAgKSB7XG4gICAgLy8gbm8gcG9pbnQgaW4gaW5pdGlhbGl6aW5nIGEgbWVtYmVyIGFzIFwidW5kZWZpbmVkXCJcbiAgICAvLyByZXBsYWNlZCBpdCB3aXRoIC0xXG4gICAgdGhpcy5pZCA9IC0xO1xuXG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvLyB0aGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIEFSQ2FtZXJhUGFyYW1cbiAgICB0aGlzLl9jYW1lcmFQYXJhbSA9IGNhbWVyYVBhcmFtO1xuICAgIHRoaXMuY2FtZXJhSWQgPSAtMTtcblxuICAgIC8vIHRvb2xraXQgaW5zdGFuY2VcbiAgICB0aGlzLmFydG9vbGtpdE5GVDtcblxuICAgIC8vIHRvIHJlZ2lzdGVyIG9ic2VydmVycyBhcyBldmVudCBsaXN0ZW5lcnNcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuXG4gICAgdGhpcy5uZnRNYXJrZXJzID0gW107XG5cbiAgICB0aGlzLnRyYW5zZm9ybV9tYXQgPSBuZXcgRmxvYXQ2NEFycmF5KDE2KTtcbiAgICB0aGlzLnRyYW5zZm9ybUdMX1JIID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG5cbiAgICB0aGlzLnZpZGVvV2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLnZpZGVvSGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMudmlkZW9TaXplID0gdGhpcy52aWRlb1dpZHRoICogdGhpcy52aWRlb0hlaWdodDtcblxuICAgIHRoaXMuZnJhbWVzaXplID0gbnVsbDtcbiAgICB0aGlzLnZpZGVvTHVtYSA9IG51bGw7XG4gICAgdGhpcy52aWRlb0x1bWFJbnRlcm5hbCA9IGludGVybmFsTHVtYTsgLy8gSW5pdGlhbGl6ZSB2aWRlb0x1bWFJbnRlcm5hbFxuICAgIHRoaXMuZ3JheXNjYWxlRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2FtZXJhX21hdCA9IG51bGw7XG5cbiAgICAvLyB0aGlzIGlzIHRvIHdvcmthcm91bmQgdGhlIGludHJvZHVjdGlvbiBvZiBcInNlbGZcIiB2YXJpYWJsZVxuICAgIHRoaXMubmZ0TWFya2VyRm91bmQgPSBmYWxzZTtcbiAgICB0aGlzLm5mdE1hcmtlckZvdW5kVGltZSA9IDA7XG4gICAgdGhpcy5uZnRNYXJrZXJDb3VudCA9IDA7XG5cbiAgICB0aGlzLl9id3BvaW50ZXIgPSBudWxsO1xuICAgIHRoaXMuZGVmYXVsdE1hcmtlcldpZHRoID0gMTtcbiAgfVxuXG4gIC8qKiBUaGUgc3RhdGljIG1ldGhvZCAqKmluaXRXaXRoRGltZW5zaW9ucyoqIGlzIHRoZSBzdGFydCBvZiB5b3VyIGFwcC5cbiAgICogIERlZmluZSBpdCB3aXRoIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSB2aWRlbyBzdHJlYW1cbiAgICogIGFuZCB0aGUgY2FtZXJhIHBhcmFtZXRlciBmaWxlIHBhdGguIEl0IHJldHVybiBhIFByb21pc2Ugd2l0aCB0aGUgQVJDb250cm9sbGVyTkZUIG9iamVjdC5cbiAgICogIFVzZSBhIHRoZW5hYmxlIHRvIGxvYWQgdGhlIE5GVCBtYXJrZXIgYW5kIGFsbCB0aGUgY29kZSBzdHVmZi5cbiAgICogIEV4YW1wbGU6XG4gICAqICBgYGBqc1xuICAgKiAgICBpbXBvcnQgQVJDb250cm9sbGVyTkZUIGZyb20gJ0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQnXG4gICAqICAgIEFSQ29udHJvbGxlck5GVC5pbml0V2l0aERpbWVuc2lvbnMoNjQwLCA0ODAsIFwiY2FtZXJhX3BhcmEuZGF0XCIsIHRydWUpLnRoZW4oXG4gICAqICAgIChuZnQpID0+IHtcbiAgICogICAgICBuZnQubG9hZE5GVE1hcmtlcigpO1xuICAgKiAgICAgIC8vIG90aGVyIGNvZGUuLi5cbiAgICogICAgfSlcbiAgICogIGBgYFxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FtZXJhUGFyYW1cbiAgICogQHBhcmFtIHtib29sZWFufSBpbnRlcm5hbEx1bWFcbiAgICogQHJldHVybiB7UHJvbWlzZTxBUkNvbnRyb2xsZXJORlQ+fSB0aGlzXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaW5pdFdpdGhEaW1lbnNpb25zKFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgY2FtZXJhUGFyYW06IHN0cmluZyxcbiAgICBpbnRlcm5hbEx1bWE6IGJvb2xlYW4sXG4gICk6IFByb21pc2U8QVJDb250cm9sbGVyTkZUPiB7XG4gICAgLy8gZGlyZWN0bHkgaW5pdCB3aXRoIGdpdmVuIHdpZHRoIC8gaGVpZ2h0XG4gICAgY29uc3QgYXJDb250cm9sbGVyTkZUID0gbmV3IEFSQ29udHJvbGxlck5GVChcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgY2FtZXJhUGFyYW0sXG4gICAgICBpbnRlcm5hbEx1bWEsXG4gICAgKTtcbiAgICByZXR1cm4gYXdhaXQgYXJDb250cm9sbGVyTkZULl9pbml0aWFsaXplKCk7XG4gIH1cblxuICAvKiogVGhlIHN0YXRpYyBtZXRob2QgKippbml0V2l0aEltYWdlKiogaXMgdGhlIHN0YXJ0IG9mIHlvdXIgYXBwLlxuICAgKiAgRGVmaW5lIGl0IHdpdGggYW4gSFRNTCBlbGVtZW50IGxpa2UgYSB2aWRlbyBvciBhIHN0YXRpYyBJbWFnZVxuICAgKiAgYW5kIHRoZSBjYW1lcmEgcGFyYW1ldGVyIGZpbGUgcGF0aC4gQXMgd2l0aCAqKmluaXRXaXRoRGltZW5zaW9ucyoqIGl0IHJldHVybiBhIFByb21pc2VcbiAgICogIHdpdGggdGhlIEFSQ29udHJvbGxlck5GVCBvYmplY3QuXG4gICAqICBVc2UgYSB0aGVuYWJsZSB0byBsb2FkIHRoZSBORlQgbWFya2VyIGFuZCBhbGwgdGhlIGNvZGUgc3R1ZmYuXG4gICAqICBFeGFtcGxlOlxuICAgKiAgYGBganNcbiAgICogICAgaW1wb3J0IEFSQ29udHJvbGxlck5GVCBmcm9tICdAd2ViYXJraXQvanNhcnRvb2xraXQtbmZ0J1xuICAgKiAgICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWFnZScpXG4gICAqICAgIEFSQ29udHJvbGxlck5GVC5pbml0V2l0aEltYWdlKGltYWdlLCBcImNhbWVyYV9wYXJhLmRhdFwiLCB0cnVlKS50aGVuKFxuICAgKiAgICAobmZ0KSA9PiB7XG4gICAqICAgICAgbmZ0LmxvYWRORlRNYXJrZXIoKTtcbiAgICogICAgICAvLyBvdGhlciBjb2RlLi4uXG4gICAqICAgIH0pXG4gICAqICBgYGBcbiAgICogQHBhcmFtIHtpbWFnZX0gaW1hZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbWVyYVBhcmFtXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW50ZXJuYWxMdW1hXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QVJDb250cm9sbGVyTkZUPn0gdGhpc1xuICAgKi9cbiAgc3RhdGljIGFzeW5jIGluaXRXaXRoSW1hZ2UoXG4gICAgaW1hZ2U6IElJbWFnZU9iaixcbiAgICBjYW1lcmFQYXJhbTogc3RyaW5nLFxuICAgIGludGVybmFsTHVtYTogYm9vbGVhbixcbiAgKTogUHJvbWlzZTxBUkNvbnRyb2xsZXJORlQ+IHtcbiAgICBjb25zdCB3aWR0aCA9IGltYWdlLnZpZGVvV2lkdGggfHwgaW1hZ2Uud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gaW1hZ2UudmlkZW9IZWlnaHQgfHwgaW1hZ2UuaGVpZ2h0O1xuICAgIGNvbnN0IGFyQ29udHJvbGxlck5GVCA9IG5ldyBBUkNvbnRyb2xsZXJORlQoXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGNhbWVyYVBhcmFtLFxuICAgICAgaW50ZXJuYWxMdW1hLFxuICAgICk7XG4gICAgcmV0dXJuIGF3YWl0IGFyQ29udHJvbGxlck5GVC5faW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgLyoqIFRoZSBzdGF0aWMgbWV0aG9kICoqY3VzdG9tSW5pdCoqIGlzIHRoZSBzdGFydCBvZiB5b3VyIGFwcC5cbiAgICogIFRoaXMgbWV0aG9kIGlzIG9ubHkgZm9yIGFkdmFuY2VkIHVzZXJzLlxuICAgKiAgRGVmaW5lIGl0IHdpdGggdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIHZpZGVvIHN0cmVhbSxcbiAgICogIHRoZSBjYW1lcmEgcGFyYW1ldGVyIGZpbGUgcGF0aCBhbmQgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZXJlIHlvdSBkZWZpbmUgY3VzdG9tIGJlaGF2aW91cnMuXG4gICAqICBBcyB3aXRoICoqaW5pdFdpdGhEaW1lbnNpb25zKiogaXQgcmV0dXJuIGEgUHJvbWlzZVxuICAgKiAgd2l0aCB0aGUgQVJDb250cm9sbGVyTkZUIG9iamVjdC5cbiAgICogIFVzZSBhIHRoZW5hYmxlIHRvIGxvYWQgdGhlIE5GVCBtYXJrZXIgYW5kIGFsbCB0aGUgY29kZSBzdHVmZi5cbiAgICogIEV4YW1wbGU6XG4gICAqICBgYGBqc1xuICAgKiAgICBpbXBvcnQgQVJDb250cm9sbGVyTkZUIGZyb20gJ0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQnXG4gICAqICAgIEFSQ29udHJvbGxlck5GVC5jdXN0b21Jbml0KFxuICAgKiAgICA2NDAsXG4gICAqICAgIDQ4MCxcbiAgICogICAgXCJjYW1lcmFfcGFyYS5kYXRcIixcbiAgICogICAgdHJ1ZSxcbiAgICogICAgZnVuY3Rpb24oKSB7IC8vIHlvdXIgY29kZSBoZXJlIH1cbiAgICogICAgKS50aGVuKFxuICAgKiAgICAobmZ0KSA9PiB7XG4gICAqICAgICAgbmZ0LmxvYWRORlRNYXJrZXIoKTtcbiAgICogICAgICAvLyBvdGhlciBjb2RlLi4uXG4gICAqICAgIH0pXG4gICAqICBgYGBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbWVyYVBhcmFtXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW50ZXJuYWxMdW1hXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QVJDb250cm9sbGVyTkZUPn0gdGhpc1xuICAgKi9cbiAgc3RhdGljIGFzeW5jIGN1c3RvbUluaXQoXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBjYW1lcmFQYXJhbTogc3RyaW5nLFxuICAgIGludGVybmFsTHVtYTogYm9vbGVhbixcbiAgICBjYWxsYmFjazogKCkgPT4gdm9pZCxcbiAgKTogUHJvbWlzZTxBUkNvbnRyb2xsZXJORlQ+IHtcbiAgICBjb25zdCBhckNvbnRyb2xsZXJORlQgPSBuZXcgQVJDb250cm9sbGVyTkZUKFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBjYW1lcmFQYXJhbSxcbiAgICAgIGludGVybmFsTHVtYSxcbiAgICApO1xuICAgIGNhbGxiYWNrKCk7XG4gICAgcmV0dXJuIGF3YWl0IGFyQ29udHJvbGxlck5GVC5faW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgLy8gZ2V0dGVycyBhbmQgc2V0dGVyc1xuICBzZXQgd2lkdGgod2lkdGg6IG51bWJlcikge1xuICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gIH1cblxuICBnZXQgd2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICB9XG5cbiAgc2V0IGhlaWdodChoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIHNldCBjYW1lcmFQYXJhbShjYW1lcmFQYXJhbTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY2FtZXJhUGFyYW0gPSBjYW1lcmFQYXJhbTtcbiAgfVxuXG4gIGdldCBjYW1lcmFQYXJhbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FtZXJhUGFyYW07XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBvbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IG1ldGhvZCBpbnNpZGUgQVJDb250cm9sbGVyTkZULiBJdCBkZXRlY3QgdGhlIG1hcmtlclxuICAgKiBhbmQgZGlzcGF0Y2ggaW50ZXJuYWxseSB3aXRoIHRoZSBnZXRORlRNYXJrZXIgZXZlbnQgbGlzdGVuZXIgdGhlIE5GVE1hcmtlckluZm9cbiAgICogc3RydWN0IG9iamVjdCBvZiB0aGUgdHJhY2tlZCBORlQgTWFya2Vycy5cbiAgICogQHBhcmFtIHtpbWFnZX0gaW1hZ2UgZGF0YVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcHJvY2VzcyhpbWFnZTogSUltYWdlT2JqKTogdm9pZCB7XG4gICAgdGhpcy5fY29weUltYWdlVG9IZWFwKGltYWdlKTtcblxuICAgIGxldCBrLCBvOiBJTkZUTWFya2VyO1xuXG4gICAgLy8gZ2V0IE5GVCBtYXJrZXJzXG4gICAgZm9yIChrIGluIHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vycykge1xuICAgICAgbyA9IHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1trXTtcbiAgICAgIG8uaW5QcmV2aW91cyA9IG8uaW5DdXJyZW50O1xuICAgICAgby5pbkN1cnJlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBkZXRlY3QgTkZUIG1hcmtlcnNcbiAgICBsZXQgbmZ0TWFya2VyQ291bnQgPSB0aGlzLm5mdE1hcmtlckNvdW50O1xuICAgIHRoaXMuZGV0ZWN0TkZUTWFya2VyKCk7XG5cbiAgICAvLyBpbiBtc1xuICAgIGNvbnN0IE1BUktFUl9MT1NUX1RJTUUgPSAyMDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5mdE1hcmtlckNvdW50OyBpKyspIHtcbiAgICAgIGxldCBuZnRNYXJrZXJJbmZvOiBJQVJUb29sa2l0TkZUW1wiTkZUTWFya2VySW5mb1wiXSA9IHRoaXMuZ2V0TkZUTWFya2VyKGkpO1xuXG4gICAgICBsZXQgbWFya2VyVHlwZSA9IEFSVG9vbGtpdE5GVC5ORlRfTUFSS0VSO1xuXG4gICAgICBpZiAobmZ0TWFya2VySW5mby5mb3VuZCkge1xuICAgICAgICB0aGlzLm5mdE1hcmtlckZvdW5kID0gPGJvb2xlYW4+KDx1bmtub3duPmkpO1xuICAgICAgICB0aGlzLm5mdE1hcmtlckZvdW5kVGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgICAgbGV0IHZpc2libGU6IElORlRNYXJrZXIgPSB0aGlzLnRyYWNrTkZUTWFya2VySWQoaSk7XG4gICAgICAgIHZpc2libGUubWF0cml4LnNldChuZnRNYXJrZXJJbmZvLnBvc2UpO1xuICAgICAgICB2aXNpYmxlLmluQ3VycmVudCA9IHRydWU7XG4gICAgICAgIHRoaXMudHJhbnNNYXRUb0dMTWF0KHZpc2libGUubWF0cml4LCB0aGlzLnRyYW5zZm9ybV9tYXQpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUdMX1JIID0gdGhpcy5hcmdsQ2FtZXJhVmlld1JIZih0aGlzLnRyYW5zZm9ybV9tYXQpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIG5hbWU6IFwiZ2V0TkZUTWFya2VyXCIsXG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgdHlwZTogbWFya2VyVHlwZSxcbiAgICAgICAgICAgIG1hcmtlcjogbmZ0TWFya2VySW5mbyxcbiAgICAgICAgICAgIG1hdHJpeDogdGhpcy50cmFuc2Zvcm1fbWF0LFxuICAgICAgICAgICAgbWF0cml4R0xfUkg6IHRoaXMudHJhbnNmb3JtR0xfUkgsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubmZ0TWFya2VyRm91bmQgPT09IDxib29sZWFuPig8dW5rbm93bj5pKSkge1xuICAgICAgICAvLyBmb3Igbm93IHRoaXMgbWFya2VyIGZvdW5kL2xvc3QgZXZlbnRzIGhhbmRsaW5nIGlzIGZvciBvbmUgbWFya2VyIGF0IGEgdGltZVxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubmZ0TWFya2VyRm91bmRUaW1lID4gTUFSS0VSX0xPU1RfVElNRSkge1xuICAgICAgICAgIHRoaXMubmZ0TWFya2VyRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgbmFtZTogXCJsb3N0TkZUTWFya2VyXCIsXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICB0eXBlOiBtYXJrZXJUeXBlLFxuICAgICAgICAgICAgICBtYXJrZXI6IG5mdE1hcmtlckluZm8sXG4gICAgICAgICAgICAgIG1hdHJpeDogdGhpcy50cmFuc2Zvcm1fbWF0LFxuICAgICAgICAgICAgICBtYXRyaXhHTF9SSDogdGhpcy50cmFuc2Zvcm1HTF9SSCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0cyB0aGUgTkZUIG1hcmtlcnMgaW4gdGhlIHByb2Nlc3MoKSBmdW5jdGlvbixcbiAgICogd2l0aCB0aGUgZ2l2ZW4gdHJhY2tlZCBpZC5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZGV0ZWN0TkZUTWFya2VyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmRldGVjdE5GVE1hcmtlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGdpdmVuIE5GVCBtYXJrZXIgSUQgdG8gdGhlIGluZGV4IG9mIHRyYWNrZWQgSURzLlxuICAgKiBTZXRzIHRoZSBtYXJrZXJXaWR0aCBmb3IgdGhlIHBhdHRlcm4gbWFya2VyIHRvIG1hcmtlcldpZHRoLlxuICAgKiBVc2VkIGJ5IHByb2Nlc3MoKSB0byBpbXBsZW1lbnQgY29udGludW91cyB0cmFja2luZyxcbiAgICoga2VlcGluZyB0cmFjayBvZiB0aGUgbWFya2VyJ3MgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAqIGFuZCBjdXN0b21pemFibGUgbWFya2VyIHdpZHRocy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIElEIG9mIHRoZSBORlQgbWFya2VyIHRvIHRyYWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFya2VyV2lkdGggVGhlIHdpZHRoIG9mIHRoZSBtYXJrZXIgdG8gdHJhY2suXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG1hcmtlciB0cmFja2luZyBvYmplY3QuXG4gICAqL1xuICB0cmFja05GVE1hcmtlcklkKGlkOiBudW1iZXIsIG1hcmtlcldpZHRoPzogbnVtYmVyKTogSU5GVE1hcmtlciB7XG4gICAgbGV0IG9iajogSU5GVE1hcmtlciA9IHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1tpZF07XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1tpZF0gPSBvYmogPSB7XG4gICAgICAgIGluUHJldmlvdXM6IGZhbHNlLFxuICAgICAgICBpbkN1cnJlbnQ6IGZhbHNlLFxuICAgICAgICBtYXRyaXg6IG5ldyBGbG9hdDY0QXJyYXkoMTIpLFxuICAgICAgICBtYXRyaXhHTF9SSDogbmV3IEZsb2F0NjRBcnJheSgxMiksXG4gICAgICAgIG1hcmtlcldpZHRoOiBtYXJrZXJXaWR0aCB8fCB0aGlzLmRlZmF1bHRNYXJrZXJXaWR0aCxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtYXJrZXJXaWR0aCkge1xuICAgICAgb2JqLm1hcmtlcldpZHRoID0gbWFya2VyV2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICAvLyBtYXJrZXIgZGV0ZWN0aW9uIHJvdXRpbmVzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogR2V0IHRoZSBORlQgbWFya2VyIGluZm8gc3RydWN0IGZvciB0aGUgZ2l2ZW4gTkZUIG1hcmtlciBpbmRleCBpbiBkZXRlY3RlZCBtYXJrZXJzLlxuICAgKiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIHRoZSBnbG9iYWwgYXJ0b29sa2l0TkZULk5GVE1hcmtlckluZm8gb2JqZWN0IGFuZCB3aWxsIGJlIG92ZXJ3cml0dGVuXG4gICAqIGJ5IHN1YnNlcXVlbnQgY2FsbHMuXG4gICAqIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vIG1hcmtlciB3YXMgZm91bmQuXG4gICAqIEEgbWFya2VySW5kZXggb2YgLTEgaXMgdXNlZCB0byBhY2Nlc3MgdGhlIGdsb2JhbCBjdXN0b20gbWFya2VyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFya2VySW5kZXggVGhlIGluZGV4IG9mIHRoZSBORlQgbWFya2VyIHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBORlRNYXJrZXJJbmZvIHN0cnVjdC5cbiAgICovXG4gIGdldE5GVE1hcmtlcihtYXJrZXJJbmRleDogbnVtYmVyKTogSU5GVE1hcmtlckluZm8ge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRORlRNYXJrZXIobWFya2VySW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqICoqR2V0TkZURGF0YSoqIHdpbGwgcmV0dXJuIHRoZSB3aWR0aC4gaGVpZ2h0IGFuZCBkcGkgb2YgdGhlIE5GVCBtYXJrZXIuXG4gICAqIEBwYXJhbSBpZCB0aGUgaW50ZXJuYWwgaWQgKHRoaXMuaWQpXG4gICAqIEBwYXJhbSBpbmRleCB0aGUgaW5kZXggb2YgdGhlIE5GVCBtYXJrZXIsIGluIGNhc2UgeW91IGhhdmUgbXVsdGkgTkZUIG1hcmtlcnMuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBnZXRORlREYXRhKGluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0TkZURGF0YShpbmRleCk7XG4gIH1cblxuICAvLyBldmVudCBoYW5kbGluZ1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIG9uIHRoaXMgQVJDb250cm9sbGVyTkZUIGZvciB0aGUgbmFtZWQgZXZlbnQsIGNhbGxpbmcgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqIHdoZW5ldmVyIHRoYXQgZXZlbnQgaXMgZGlzcGF0Y2hlZC5cbiAgICogUG9zc2libGUgZXZlbnRzIGFyZTpcbiAgICogLSBnZXRORlRNYXJrZXIgLSBkaXNwYXRjaGVkIHdoZW5ldmVyIHByb2Nlc3MoKSBmaW5kcyBhIE5GVCBtYXJrZXJcbiAgICogLSBsb3N0TkZUTWFya2VyIC0gZGlzcGF0Y2hlZCB3aGVuZXZlciBwcm9jZXNzKCkgbG9zdCBhIHZpc2libGUgTkZUIG1hcmtlclxuICAgKiAtIGxvYWQgLSBkaXNwYXRjaGVkIHdoZW4gdGhlIEFSQ29udHJvbGxlck5GVCBpcyByZWFkeSB0byB1c2UgKHVzZWZ1bCBpZiBwYXNzaW5nIGluIGEgY2FtZXJhIFVSTCBpbiB0aGUgY29uc3RydWN0b3IpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiB0by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGFuIGV2ZW50IHdpdGggdGhlIGdpdmVuIG5hbWUgaXMgZGlzcGF0Y2hlZC5cbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIobmFtZTogc3RyaW5nLCBjYWxsYmFjazogb2JqZWN0KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXSkge1xuICAgICAgdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIG5hbWVkIGV2ZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBldmVudCB0byBzdG9wIGxpc3RlbmluZyB0by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlIGZyb20gdGhlIGxpc3RlbmVycyBvZiB0aGUgbmFtZWQgZXZlbnQuXG4gICAqL1xuICByZW1vdmVFdmVudExpc3RlbmVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IG9iamVjdCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXSkge1xuICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIHRoZSBnaXZlbiBldmVudCB0byBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgb24gZXZlbnQubmFtZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IHRvIGRpc3BhdGNoLlxuICAgKi9cbiAgZGlzcGF0Y2hFdmVudChldmVudDogeyBuYW1lOiBzdHJpbmc7IHRhcmdldDogYW55OyBkYXRhPzogb2JqZWN0IH0pOiB2b2lkIHtcbiAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbZXZlbnQubmFtZV07XG4gICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGRlYnVnIHN0dWZmXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIGZvciBkZWJ1Z2dpbmcgQVIgZGV0ZWN0aW9uLlxuICAgKi9cbiAgZGVidWdTZXR1cCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldERlYnVnTW9kZSh0cnVlKTtcbiAgICB0aGlzLl9id3BvaW50ZXIgPSB0aGlzLmdldFByb2Nlc3NpbmdJbWFnZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBnaXZlbiAzeDQgbWFya2VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbiB0aGUgMTItZWxlbWVudCB0cmFuc01hdCBhcnJheVxuICAgKiBpbnRvIGEgNHg0IFdlYkdMIG1hdHJpeCBhbmQgd3JpdGVzIHRoZSByZXN1bHQgaW50byB0aGUgMTYtZWxlbWVudCBnbE1hdCBhcnJheS5cbiAgICogSWYgc2NhbGUgcGFyYW1ldGVyIGlzIGdpdmVuLCBzY2FsZXMgdGhlIHRyYW5zZm9ybSBvZiB0aGUgZ2xNYXQgYnkgdGhlIHNjYWxlIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IHRyYW5zTWF0IFRoZSAzeDQgbWFya2VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IGdsTWF0IFRoZSA0eDQgR0wgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgVGhlIHNjYWxlIGZvciB0aGUgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJuIHtGbG9hdDY0QXJyYXl9IHRoZSBtb2RpZmllZCBtYXRyaXhcbiAgICovXG4gIHRyYW5zTWF0VG9HTE1hdChcbiAgICB0cmFuc01hdDogRmxvYXQ2NEFycmF5LFxuICAgIGdsTWF0OiBGbG9hdDY0QXJyYXksXG4gICAgc2NhbGU/OiBudW1iZXIsXG4gICk6IEZsb2F0NjRBcnJheSB7XG4gICAgaWYgKGdsTWF0ID09IHVuZGVmaW5lZCkge1xuICAgICAgZ2xNYXQgPSBuZXcgRmxvYXQ2NEFycmF5KDE2KTtcbiAgICB9XG5cbiAgICBnbE1hdFswICsgMCAqIDRdID0gdHJhbnNNYXRbMF07IC8vIFIxQzFcbiAgICBnbE1hdFswICsgMSAqIDRdID0gdHJhbnNNYXRbMV07IC8vIFIxQzJcbiAgICBnbE1hdFswICsgMiAqIDRdID0gdHJhbnNNYXRbMl07XG4gICAgZ2xNYXRbMCArIDMgKiA0XSA9IHRyYW5zTWF0WzNdO1xuICAgIGdsTWF0WzEgKyAwICogNF0gPSB0cmFuc01hdFs0XTsgLy8gUjJcbiAgICBnbE1hdFsxICsgMSAqIDRdID0gdHJhbnNNYXRbNV07XG4gICAgZ2xNYXRbMSArIDIgKiA0XSA9IHRyYW5zTWF0WzZdO1xuICAgIGdsTWF0WzEgKyAzICogNF0gPSB0cmFuc01hdFs3XTtcbiAgICBnbE1hdFsyICsgMCAqIDRdID0gdHJhbnNNYXRbOF07IC8vIFIzXG4gICAgZ2xNYXRbMiArIDEgKiA0XSA9IHRyYW5zTWF0WzldO1xuICAgIGdsTWF0WzIgKyAyICogNF0gPSB0cmFuc01hdFsxMF07XG4gICAgZ2xNYXRbMiArIDMgKiA0XSA9IHRyYW5zTWF0WzExXTtcbiAgICBnbE1hdFszICsgMCAqIDRdID0gMC4wO1xuICAgIGdsTWF0WzMgKyAxICogNF0gPSAwLjA7XG4gICAgZ2xNYXRbMyArIDIgKiA0XSA9IDAuMDtcbiAgICBnbE1hdFszICsgMyAqIDRdID0gMS4wO1xuXG4gICAgaWYgKHNjYWxlICE9IHVuZGVmaW5lZCAmJiBzY2FsZSAhPT0gMC4wKSB7XG4gICAgICBnbE1hdFsxMl0gKj0gc2NhbGU7XG4gICAgICBnbE1hdFsxM10gKj0gc2NhbGU7XG4gICAgICBnbE1hdFsxNF0gKj0gc2NhbGU7XG4gICAgfVxuICAgIHJldHVybiBnbE1hdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gNHg0IG9wZW5HTCBtYXRyaXggaW4gdGhlIDE2LWVsZW1lbnQgdHJhbnNNYXQgYXJyYXlcbiAgICogaW50byBhIDR4NCBPcGVuR0wgUmlnaHQtSGFuZC1WaWV3IG1hdHJpeCBhbmQgd3JpdGVzIHRoZSByZXN1bHQgaW50byB0aGUgMTYtZWxlbWVudCBnbE1hdCBhcnJheS5cbiAgICogSWYgc2NhbGUgcGFyYW1ldGVyIGlzIGdpdmVuLCBzY2FsZXMgdGhlIHRyYW5zZm9ybSBvZiB0aGUgZ2xNYXQgYnkgdGhlIHNjYWxlIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IGdsTWF0cml4IFRoZSA0eDQgbWFya2VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IFtnbFJoTWF0cml4XSBUaGUgNHg0IEdMIHJpZ2h0IGhhbmQgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NjYWxlXSBUaGUgc2NhbGUgZm9yIHRoZSB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm4ge0Zsb2F0NjRBcnJheX0gdGhlIG1vZGlmaWVkIGdsIG1hdHJpeFxuICAgKi9cbiAgYXJnbENhbWVyYVZpZXdSSGYoXG4gICAgZ2xNYXRyaXg6IEZsb2F0NjRBcnJheSxcbiAgICBnbFJoTWF0cml4PzogRmxvYXQ2NEFycmF5LFxuICAgIHNjYWxlPzogbnVtYmVyLFxuICApOiBGbG9hdDY0QXJyYXkge1xuICAgIGxldCBtX21vZGVsdmlldztcbiAgICBpZiAoZ2xSaE1hdHJpeCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1fbW9kZWx2aWV3ID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1fbW9kZWx2aWV3ID0gZ2xSaE1hdHJpeDtcbiAgICB9XG5cbiAgICAvLyB4XG4gICAgbV9tb2RlbHZpZXdbMF0gPSBnbE1hdHJpeFswXTtcbiAgICBtX21vZGVsdmlld1s0XSA9IGdsTWF0cml4WzRdO1xuICAgIG1fbW9kZWx2aWV3WzhdID0gZ2xNYXRyaXhbOF07XG4gICAgbV9tb2RlbHZpZXdbMTJdID0gZ2xNYXRyaXhbMTJdO1xuICAgIC8vIHlcbiAgICBtX21vZGVsdmlld1sxXSA9IC1nbE1hdHJpeFsxXTtcbiAgICBtX21vZGVsdmlld1s1XSA9IC1nbE1hdHJpeFs1XTtcbiAgICBtX21vZGVsdmlld1s5XSA9IC1nbE1hdHJpeFs5XTtcbiAgICBtX21vZGVsdmlld1sxM10gPSAtZ2xNYXRyaXhbMTNdO1xuICAgIC8vIHpcbiAgICBtX21vZGVsdmlld1syXSA9IC1nbE1hdHJpeFsyXTtcbiAgICBtX21vZGVsdmlld1s2XSA9IC1nbE1hdHJpeFs2XTtcbiAgICBtX21vZGVsdmlld1sxMF0gPSAtZ2xNYXRyaXhbMTBdO1xuICAgIG1fbW9kZWx2aWV3WzE0XSA9IC1nbE1hdHJpeFsxNF07XG5cbiAgICAvLyAwIDAgMCAxXG4gICAgbV9tb2RlbHZpZXdbM10gPSAwO1xuICAgIG1fbW9kZWx2aWV3WzddID0gMDtcbiAgICBtX21vZGVsdmlld1sxMV0gPSAwO1xuICAgIG1fbW9kZWx2aWV3WzE1XSA9IDE7XG5cbiAgICBpZiAoc2NhbGUgIT0gdW5kZWZpbmVkICYmIHNjYWxlICE9PSAwLjApIHtcbiAgICAgIG1fbW9kZWx2aWV3WzEyXSAqPSBzY2FsZTtcbiAgICAgIG1fbW9kZWx2aWV3WzEzXSAqPSBzY2FsZTtcbiAgICAgIG1fbW9kZWx2aWV3WzE0XSAqPSBzY2FsZTtcbiAgICB9XG5cbiAgICBnbFJoTWF0cml4ID0gbV9tb2RlbHZpZXc7XG5cbiAgICByZXR1cm4gZ2xSaE1hdHJpeDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAxNi1lbGVtZW50IFdlYkdMIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB1c2VkIGJ5IEFSQ29udHJvbGxlck5GVC5wcm9jZXNzIHRvXG4gICAqIHBhc3MgbWFya2VyIFdlYkdMIG1hdHJpY2VzIHRvIGV2ZW50IGxpc3RlbmVycy5cbiAgICogVW5pcXVlIHRvIGVhY2ggQVJDb250cm9sbGVyTkZULlxuICAgKiBAcmV0dXJuIHtGbG9hdDY0QXJyYXl9IFRoZSAxNi1lbGVtZW50IFdlYkdMIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB1c2VkIGJ5IHRoZSBBUkNvbnRyb2xsZXJORlQuXG4gICAqL1xuICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCgpOiBGbG9hdDY0QXJyYXkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybV9tYXQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJvamVjdGlvbiBtYXRyaXggY29tcHV0ZWQgZnJvbSBjYW1lcmEgcGFyYW1ldGVycyBmb3IgdGhlIEFSQ29udHJvbGxlck5GVC5cbiAgICogQHJldHVybiB7RmxvYXQ2NEFycmF5fSBUaGUgMTYtZWxlbWVudCBXZWJHTCBjYW1lcmEgbWF0cml4IGZvciB0aGUgQVJDb250cm9sbGVyTkZUIGNhbWVyYSBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgZ2V0Q2FtZXJhTWF0cml4KCk6IEZsb2F0NjRBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuY2FtZXJhX21hdDtcbiAgfVxuXG4gIC8vIFNldHRlciAvIEdldHRlciBQcm94aWVzXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGRlYnVnIG1vZGUgaW4gdGhlIHRyYWNrZXIuIFdoZW4gZW5hYmxlZCwgYSBibGFjayBhbmQgd2hpdGUgZGVidWdcbiAgICogaW1hZ2UgaXMgZ2VuZXJhdGVkIGR1cmluZyBtYXJrZXIgZGV0ZWN0aW9uLiBUaGUgZGVidWcgaW1hZ2UgaXMgdXNlZnVsIGZvciB2aXN1YWxpc2luZ1xuICAgKiB0aGUgYmluYXJpemF0aW9uIHByb2Nlc3MgYW5kIGNob29zaW5nIGEgdGhyZXNob2xkIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG1vZGUgdHJ1ZSB0byBlbmFibGUgZGVidWcgbW9kZSwgZmFsc2UgdG8gZGlzYWJsZSBkZWJ1ZyBtb2RlXG4gICAqIEBzZWUgZ2V0RGVidWdNb2RlKClcbiAgICovXG4gIHNldERlYnVnTW9kZShtb2RlOiBib29sZWFuKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0RGVidWdNb2RlKG1vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBkZWJ1ZyBtb2RlIGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIHdoZW4gZGVidWcgbW9kZSBpcyBlbmFibGVkLCBmYWxzZSB3aGVuIGRlYnVnIG1vZGUgaXMgZGlzYWJsZWRcbiAgICogQHNlZSAgc2V0RGVidWdNb2RlKClcbiAgICovXG4gIGdldERlYnVnTW9kZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0RGVidWdNb2RlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRW1zY3JpcHRlbiBIRUFQIG9mZnNldCB0byB0aGUgZGVidWcgcHJvY2Vzc2luZyBpbWFnZSB1c2VkIGJ5IEFSVG9vbEtpdC5cbiAgICogQHJldHVybiB7bnVtYmVyfSBIRUFQIG9mZnNldCB0byB0aGUgZGVidWcgcHJvY2Vzc2luZyBpbWFnZS5cbiAgICovXG4gIGdldFByb2Nlc3NpbmdJbWFnZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRQcm9jZXNzaW5nSW1hZ2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsb2dnaW5nIGxldmVsIHRvIHVzZSBieSBBUlRvb2xLaXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtb2RlIHR5cGUgZm9yIHRoZSBsb2cgbGV2ZWwuXG4gICAqL1xuICBzZXRMb2dMZXZlbChtb2RlOiBib29sZWFuKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0TG9nTGV2ZWwobW9kZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbG9nZ2luZyBsZXZlbCB1c2VkIGJ5IEFSVG9vbEtpdC5cbiAgICogQHJldHVybiB7bnVtYmVyfSByZXR1cm4gdGhlIGxvZyBsZXZlbCBpbiB1c2UuXG4gICAqL1xuICBnZXRMb2dMZXZlbCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRMb2dMZXZlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBuZWFyIHBsYW5lIG9mIHRoZSBjYW1lcmEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmVcbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgc2V0UHJvamVjdGlvbk5lYXJQbGFuZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldFByb2plY3Rpb25OZWFyUGxhbmUodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIG9mIHRoZSBuZWFyIHBsYW5lIG9mIHRoZSBjYW1lcmEgd2l0aCB0aGUgZ2l2ZSBpZC5cbiAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmUuXG4gICAqL1xuICBnZXRQcm9qZWN0aW9uTmVhclBsYW5lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFByb2plY3Rpb25OZWFyUGxhbmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZmFyIHBsYW5lIG9mIHRoZSBjYW1lcmEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgdmFsdWUgb2YgdGhlIGZhciBwbGFuZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgKHZvaWQpXG4gICAqL1xuICBzZXRQcm9qZWN0aW9uRmFyUGxhbmUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRQcm9qZWN0aW9uRmFyUGxhbmUodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIG9mIHRoZSBmYXIgcGxhbmUgb2YgdGhlIGNhbWVyYSB3aXRoIHRoZSBnaXZlIGlkLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSB2YWx1ZSBvZiB0aGUgZmFyIHBsYW5lLlxuICAgKi9cbiAgZ2V0UHJvamVjdGlvbkZhclBsYW5lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFByb2plY3Rpb25GYXJQbGFuZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGFiZWxpbmcgdGhyZXNob2xkIG1vZGUgKGF1dG8vbWFudWFsKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vZGUgQW4gaW50ZWdlciBzcGVjaWZ5aW5nIHRoZSBtb2RlLiBPbmUgb2Y6XG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTCxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19NRURJQU4sXG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVSxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRSxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19CUkFDS0VUSU5HXG4gICAqL1xuICBzZXRUaHJlc2hvbGRNb2RlKG1vZGU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldFRocmVzaG9sZE1vZGUobW9kZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCB0aHJlc2hvbGQgbW9kZSB1c2VkIGZvciBpbWFnZSBiaW5hcml6YXRpb24uXG4gICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgdGhyZXNob2xkIG1vZGVcbiAgICogQHNlZSBnZXRWaWRlb1RocmVzaG9sZE1vZGUoKVxuICAgKi9cbiAgZ2V0VGhyZXNob2xkTW9kZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRUaHJlc2hvbGRNb2RlKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBsYWJlbGluZyB0aHJlc2hvbGQuXG4gICAqIFRoaXMgZnVuY3Rpb24gZm9yY2VzIHNldHMgdGhlIHRocmVzaG9sZCB2YWx1ZS5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgQVJfREVGQVVMVF9MQUJFTElOR19USFJFU0ggd2hpY2ggaXMgMTAwLlxuICAgKiBUaGUgY3VycmVudCB0aHJlc2hvbGQgbW9kZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhpcyBjYWxsLlxuICAgKiBUeXBpY2FsbHksIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIGxhYmVsaW5nIHRocmVzaG9sZCBtb2RlXG4gICAqIGlzIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTC5cbiAgICogVGhlIHRocmVzaG9sZCB2YWx1ZSBpcyBub3QgcmVsZXZhbnQgaWYgdGhyZXNob2xkIG1vZGUgaXNcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRS5cbiAgICogQmFja2dyb3VuZDogVGhlIGxhYmVsaW5nIHRocmVzaG9sZCBpcyB0aGUgdmFsdWUgd2hpY2hcbiAgICogdGhlIEFSIGxpYnJhcnkgdXNlcyB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gYmxhY2sgYW5kIHdoaXRlXG4gICAqIHBvcnRpb25zIG9mIGFuIEFSVG9vbEtpdCBtYXJrZXIuIFNpbmNlIHRoZSBhY3R1YWwgYnJpZ2h0bmVzcyxcbiAgICogY29udHJhc3QsIGFuZCBnYW1tYSBvZiBpbmNvbWluZyBpbWFnZXMgY2FuIHZhcnkgc2lnbmZpY2FudGx5XG4gICAqIGJldHdlZW4gZGlmZmVyZW50IGNhbWVyYXMgYW5kIGxpZ2h0aW5nIGNvbmRpdGlvbnMsIHRoaXNcbiAgICogdmFsdWUgdHlwaWNhbGx5IG5lZWRzIHRvIGJlIGFkanVzdGVkIGR5bmFtaWNhbGx5IHRvIGFcbiAgICogc3VpdGFibGUgbWlkcG9pbnQgYmV0d2VlbiB0aGUgb2JzZXJ2ZWQgdmFsdWVzIGZvciBibGFja1xuICAgKiBhbmQgd2hpdGUgcG9ydGlvbnMgb2YgdGhlIG1hcmtlcnMgaW4gdGhlIGltYWdlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGhyZXNob2xkIEFuIGludGVnZXIgaW4gdGhlIHJhbmdlIFswLDI1NV0gKGluY2x1c2l2ZSkuXG4gICAqL1xuICBzZXRUaHJlc2hvbGQodGhyZXNob2xkOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRUaHJlc2hvbGQodGhyZXNob2xkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgbGFiZWxpbmcgdGhyZXNob2xkLlxuICAgKiBUaGlzIGZ1bmN0aW9uIHF1ZXJpZXMgdGhlIGN1cnJlbnQgbGFiZWxpbmcgdGhyZXNob2xkLiBGb3IsXG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fTUVESUFOLCBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX09UU1UsXG4gICAqIGFuZCBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0JSQUNLRVRJTkdcbiAgICogdGhlIHRocmVzaG9sZCB2YWx1ZSBpcyBvbmx5IHZhbGlkIHVudGlsIHRoZSBuZXh0IGF1dG8tdXBkYXRlLlxuICAgKiBUaGUgY3VycmVudCB0aHJlc2hvbGQgbW9kZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhpcyBjYWxsLlxuICAgKiBUaGUgdGhyZXNob2xkIHZhbHVlIGlzIG5vdCByZWxldmFudCBpZiB0aHJlc2hvbGQgbW9kZSBpc1xuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IHRocmVzaG9sZCB2YWx1ZS5cbiAgICovXG4gIGdldFRocmVzaG9sZCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRUaHJlc2hvbGQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBhbiBORlQgbWFya2VyIGZyb20gdGhlIGdpdmVuIFVSTCBvciBkYXRhIHN0cmluZy5cbiAgICogVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzIGFuZCByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIG1hcmtlciBJRHMuXG4gICAqXG4gICAqIEV4YW1wbGUgdXNhZ2U6XG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IEFSQ29udHJvbGxlck5GVCBmcm9tICdAd2ViYXJraXQvanNhcnRvb2xraXQtbmZ0JztcbiAgICpcbiAgICogY29uc3QgYXJDb250cm9sbGVyID0gYXdhaXQgQVJDb250cm9sbGVyTkZULmluaXRXaXRoRGltZW5zaW9ucyg2NDAsIDQ4MCwgXCJjYW1lcmFfcGFyYS5kYXRcIik7XG4gICAqIGFyQ29udHJvbGxlci5sb2FkTkZUTWFya2VyKFwicGF0aC90by9tYXJrZXIuZGF0XCIsIChpZCkgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKFwiTWFya2VyIGxvYWRlZCB3aXRoIElEOlwiLCBpZCk7XG4gICAqIH0sIChlcnIpID0+IHtcbiAgICogICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGxvYWQgbWFya2VyOlwiLCBlcnIpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxPckRhdGEgLSBUaGUgVVJMIG9yIGRhdGEgc3RyaW5nIG9mIHRoZSBORlQgbWFya2VyIHRvIGxvYWQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uU3VjY2VzcyAtIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgbWFya2VyIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuIFJlY2VpdmVzIHRoZSBtYXJrZXIgSUQgYXMgYW4gYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uRXJyb3IgLSBDYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3IgbG9hZGluZyB0aGUgbWFya2VyLiBSZWNlaXZlcyB0aGUgZXJyb3IgY29kZSBhcyBhbiBhcmd1bWVudC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXJbXT59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIG1hcmtlciBJRHMuXG4gICAqL1xuICBhc3luYyBsb2FkTkZUTWFya2VyKFxuICAgIHVybE9yRGF0YTogc3RyaW5nLFxuICAgIG9uU3VjY2VzczogKGlkczogbnVtYmVyKSA9PiB2b2lkLFxuICAgIG9uRXJyb3I6IChlcnI6IG51bWJlcikgPT4gdm9pZCxcbiAgKTogUHJvbWlzZTxudW1iZXJbXT4ge1xuICAgIGxldCBuZnQgPSBhd2FpdCB0aGlzLmFydG9vbGtpdE5GVC5hZGRORlRNYXJrZXJzKFxuICAgICAgW3VybE9yRGF0YV0sXG4gICAgICAoaWRzOiBudW1iZXJbXSkgPT4ge1xuICAgICAgICB0aGlzLm5mdE1hcmtlckNvdW50ICs9IGlkcy5sZW5ndGg7XG4gICAgICAgIG9uU3VjY2VzcyhpZHNbMF0pO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3IsXG4gICAgKTtcbiAgICByZXR1cm4gbmZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGFuIGFycmF5IG9mIE5GVCBtYXJrZXJzIGZyb20gdGhlIGdpdmVuIFVSTHMgb3IgZGF0YSBzdHJpbmdzLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMgYW5kIHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgbWFya2VyIElEcy5cbiAgICpcbiAgICogRXhhbXBsZSB1c2FnZTpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgQVJDb250cm9sbGVyTkZUIGZyb20gJ0B3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQnO1xuICAgKlxuICAgKiBjb25zdCBhckNvbnRyb2xsZXIgPSBhd2FpdCBBUkNvbnRyb2xsZXJORlQuaW5pdFdpdGhEaW1lbnNpb25zKDY0MCwgNDgwLCBcImNhbWVyYV9wYXJhLmRhdFwiKTtcbiAgICogYXJDb250cm9sbGVyLmxvYWRORlRNYXJrZXJzKFtcInBhdGgvdG8vbWFya2VyMS5kYXRcIiwgXCJwYXRoL3RvL21hcmtlcjIuZGF0XCJdLCAoaWRzKSA9PiB7XG4gICAqICAgY29uc29sZS5sb2coXCJNYXJrZXJzIGxvYWRlZCB3aXRoIElEczpcIiwgaWRzKTtcbiAgICogfSwgKGVycikgPT4ge1xuICAgKiAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBtYXJrZXJzOlwiLCBlcnIpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gdXJsT3JEYXRhIC0gVGhlIGFycmF5IG9mIFVSTHMgb3IgZGF0YSBzdHJpbmdzIG9mIHRoZSBORlQgbWFya2VycyB0byBsb2FkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblN1Y2Nlc3MgLSBDYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIG1hcmtlcnMgYXJlIHN1Y2Nlc3NmdWxseSBsb2FkZWQuIFJlY2VpdmVzIGFuIGFycmF5IG9mIG1hcmtlciBJRHMgYXMgYW4gYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uRXJyb3IgLSBDYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3IgbG9hZGluZyB0aGUgbWFya2Vycy4gUmVjZWl2ZXMgdGhlIGVycm9yIGNvZGUgYXMgYW4gYXJndW1lbnQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyW10+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBtYXJrZXIgSURzLlxuICAgKi9cbiAgYXN5bmMgbG9hZE5GVE1hcmtlcnMoXG4gICAgdXJsT3JEYXRhOiBBcnJheTxzdHJpbmc+LFxuICAgIG9uU3VjY2VzczogKGlkczogbnVtYmVyW10pID0+IHZvaWQsXG4gICAgb25FcnJvcjogKGVycjogbnVtYmVyKSA9PiB2b2lkLFxuICApOiBQcm9taXNlPG51bWJlcltdPiB7XG4gICAgbGV0IG5mdCA9IGF3YWl0IHRoaXMuYXJ0b29sa2l0TkZULmFkZE5GVE1hcmtlcnMoXG4gICAgICB1cmxPckRhdGEsXG4gICAgICAoaWRzOiBudW1iZXJbXSkgPT4ge1xuICAgICAgICB0aGlzLm5mdE1hcmtlckNvdW50ICs9IGlkcy5sZW5ndGg7XG4gICAgICAgIG9uU3VjY2VzcyhpZHMpO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3IsXG4gICAgKTtcbiAgICByZXR1cm4gbmZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaW1hZ2UgcHJvY2Vzc2luZyBtb2RlLlxuICAgKiBXaGVuIHRoZSBpbWFnZSBwcm9jZXNzaW5nIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBhbGwgcGl4ZWxzIGluIGVhY2ggaW5jb21pbmcgaW1hZ2VcbiAgICogdG8gbG9jYXRlIG1hcmtlcnMuIFdoZW4gdGhlIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GSUVMRF9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBwaXhlbHMgaW4gb25seSBldmVyeSBzZWNvbmQgcGl4ZWwgcm93IGFuZFxuICAgKiBjb2x1bW4uIFRoaXMgaXMgdXNlZnVsIGJvdGggZm9yIGhhbmRsaW5nIGltYWdlcyBmcm9tIGludGVybGFjZWRcbiAgICogdmlkZW8gc291cmNlcyAod2hlcmUgYWx0ZXJuYXRlIGxpbmVzIGFyZSBhc3NlbWJsZWQgZnJvbSBhbHRlcm5hdGVcbiAgICogZmllbGRzIGFuZCB0aHVzIGhhdmUgb25lIGZpZWxkIHRpbWUtZGlmZmVyZW5jZSwgcmVzdWx0aW5nIGluIGFcbiAgICogXCJjb21iXCIgZWZmZWN0KSBzdWNoIGFzIERpZ2l0YWwgVmlkZW8gY2FtZXJhcy5cbiAgICogVGhlIGVmZmVjdGl2ZSByZWR1Y3Rpb24gYnkgNzUlIGluIHRoZSBwaXhlbHMgcHJvY2Vzc2VkIGFsc29cbiAgICogaGFzIHV0aWxpdHkgaW4gYWNjZWxlcmF0aW5nIHRyYWNraW5nIGJ5IGVmZmVjdGl2ZWx5IHJlZHVjaW5nXG4gICAqIHRoZSBpbWFnZSBzaXplIHRvIG9uZSBxdWFydGVyIHNpemUsIGF0IHRoZSBjb3N0IG9mIHBvc2UgYWNjdXJhY2N5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbW9kZVxuICAgKiBPcHRpb25zIGZvciB0aGlzIGZpZWxkIGFyZTpcbiAgICogQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRVxuICAgKiBBUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFXG4gICAqIFRoZSBkZWZhdWx0IG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRS5cbiAgICovXG4gIHNldEltYWdlUHJvY01vZGUobW9kZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0SW1hZ2VQcm9jTW9kZShtb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGltYWdlIHByb2Nlc3NpbmcgbW9kZS5cbiAgICogU2VlIGFyU2V0SW1hZ2VQcm9jTW9kZSgpIGZvciBhIGNvbXBsZXRlIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IGltYWdlIHByb2Nlc3NpbmcgbW9kZS5cbiAgICovXG4gIGdldEltYWdlUHJvY01vZGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0SW1hZ2VQcm9jTW9kZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VzdG9tIGdyYXkgZGF0YSAodmlkZW9MdW1hKSBpbiBjYXNlIHlvdSB3YW50IHRvIGFkZCBhZGRpdGlvbmFsXG4gICAqIHRyYXNuZm9ybWF0aW9uIHRvIGdyYXkgZGF0YTogZm9yIGV4YW1wbGUgZ2F1c3NpYW5ibHVyIG9yIGJveGJsdXJcbiAgICogd2l0aCBleHRlcm5hbCBsaWJzLlxuICAgKiBAcGFyYW0gZGF0YSBVaW50OEFycmF5XG4gICAqL1xuICBzZXRHcmF5RGF0YShkYXRhOiBVaW50OEFycmF5KSB7XG4gICAgdGhpcy5ncmF5c2NhbGVFbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLmdyYXlzY2FsZVNvdXJjZSA9IGRhdGE7XG4gIH1cblxuICAvLyBwcml2YXRlIGFjY2Vzc29yc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgYnkgQVJDb250cm9sbGVyTkZULCBpdCBwZXJtaXQgdG8gYWRkIG1ldGhvZHMgdG8gdGhpcy5cbiAgICogQHJldHVybiB7YW55fSBBUkNvbnRyb2xsZXJORlRcbiAgICovXG4gIHByaXZhdGUgY29udmVydGVyKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpbml0IHRoZSBBUkNvbnRyb2xsZXJORlQgd2l0aCB0aGUgbmVjZXNzYXJ5IHBhcm1ldGVycyBhbmQgdmFyaWFibGVzLlxuICAgKiBEb24ndCBjYWxsIGRpcmVjdGx5IHRoaXMgYnV0IGluc3RlYWQgaW5zdGFudGlhdGUgYSBuZXcgQVJDb250cm9sbGVyTkZULlxuICAgKiBAcmV0dXJuIHtBUkNvbnRyb2xsZXJORlR9IFRoZSBpbml0aWFsaXplZCBBUkNvbnRyb2xsZXJORlQgaW5zdGFuY2VcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2luaXRpYWxpemUoKSB7XG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgdG9vbGtpdFxuICAgIHRoaXMuYXJ0b29sa2l0TkZUID0gYXdhaXQgbmV3IEFSVG9vbGtpdE5GVCgpLmluaXQoKTtcblxuICAgIHRoaXMuRlMgPSB0aGlzLmFydG9vbGtpdE5GVC5GUztcbiAgICB0aGlzLlN0cmluZ0xpc3QgPSB0aGlzLmFydG9vbGtpdE5GVC5TdHJpbmdMaXN0O1xuXG4gICAgY29uc29sZS5sb2coXCJbQVJDb250cm9sbGVyTkZUXVwiLCBcIkFSVG9vbGtpdE5GVCBpbml0aWFsaXplZFwiKTtcblxuICAgIC8vIGxvYWQgdGhlIGNhbWVyYVxuICAgIHRoaXMuY2FtZXJhSWQgPSBhd2FpdCB0aGlzLmFydG9vbGtpdE5GVC5sb2FkQ2FtZXJhKHRoaXMuY2FtZXJhUGFyYW0pO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgXCJbQVJDb250cm9sbGVyTkZUXVwiLFxuICAgICAgXCJDYW1lcmEgcGFyYW1zIGxvYWRlZCB3aXRoIElEXCIsXG4gICAgICB0aGlzLmNhbWVyYUlkLFxuICAgICk7XG5cbiAgICAvLyBzZXR1cFxuICAgIHRoaXMuaWQgPSB0aGlzLmFydG9vbGtpdE5GVC5zZXR1cCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5jYW1lcmFJZCk7XG4gICAgY29uc29sZS5sb2coXCJbQVJDb250cm9sbGVyTkZUXVwiLCBcIkdvdCBJRCBmcm9tIHNldHVwXCIsIHRoaXMuaWQpO1xuXG4gICAgdGhpcy5faW5pdE5GVCgpO1xuXG4gICAgdGhpcy5mcmFtZXNpemUgPSB0aGlzLl93aWR0aCAqIHRoaXMuX2hlaWdodDtcblxuICAgIHRoaXMudmlkZW9MdW1hID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5mcmFtZXNpemUpO1xuXG4gICAgdGhpcy5jYW1lcmFfbWF0ID0gdGhpcy5hcnRvb2xraXRORlQuZ2V0Q2FtZXJhTGVucygpO1xuXG4gICAgdGhpcy5zZXRQcm9qZWN0aW9uTmVhclBsYW5lKDAuMSk7XG4gICAgdGhpcy5zZXRQcm9qZWN0aW9uRmFyUGxhbmUoMTAwMCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIG5hbWU6IFwibG9hZFwiLFxuICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICB9KTtcbiAgICB9LCAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIG5lY2Vzc2FyeSBrcG0gaGFuZGxlIGZvciBORlQgYW5kIHRoZSBzZXR0aW5ncyBmb3IgdGhlIENQVS5cbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgcHJpdmF0ZSBfaW5pdE5GVCgpIHtcbiAgICB0aGlzLmFydG9vbGtpdE5GVC5zZXR1cEFSMigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcHkgdGhlIEltYWdlIGRhdGEgdG8gdGhlIEhFQVAgZm9yIHRoZSBkZWJ1Z1NldHVwIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgKHZvaWQpXG4gICAqL1xuICBwcml2YXRlIF9jb3B5SW1hZ2VUb0hlYXAoc291cmNlSW1hZ2U6IElJbWFnZU9iaikge1xuICAgIGlmICghc291cmNlSW1hZ2UpIHtcbiAgICAgIC8vIGRlZmF1bHQgdG8gcHJlbG9hZGVkIGltYWdlXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IG5vIHByb3ZpZGVkIGltYWdlRGF0YSB0byBBUkNvbnRyb2xsZXJORlRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdGhpcyBpcyBvZiB0eXBlIFVpbnQ4Q2xhbXBlZEFycmF5OlxuICAgIC8vIFRoZSBVaW50OENsYW1wZWRBcnJheSB0eXBlZCBhcnJheSByZXByZXNlbnRzIGFuIGFycmF5IG9mIDgtYml0IHVuc2lnbmVkXG4gICAgLy8gaW50ZWdlcnMgY2xhbXBlZCB0byAwLTI1NVxuICAgIC8vIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvVWludDhDbGFtcGVkQXJyYXlcbiAgICBsZXQgZGF0YTogVWludDhDbGFtcGVkQXJyYXk7XG5cbiAgICBpZiAoc291cmNlSW1hZ2UuZGF0YSkge1xuICAgICAgLy8gZGlyZWN0bHkgdXNlIHNvdXJjZSBpbWFnZVxuICAgICAgZGF0YSA9IHNvdXJjZUltYWdlLmRhdGE7XG4gICAgfVxuXG4gICAgLy8gSGVyZSB3ZSBoYXZlIGFjY2VzcyB0byB0aGUgdW5tb2RpZmllZCB2aWRlbyBpbWFnZS4gV2Ugbm93IG5lZWQgdG8gYWRkIHRoZSB2aWRlb0x1bWEgY2hhbmVsIHRvIGJlIGFibGUgdG8gc2VydmUgdGhlIHVuZGVybHlpbmcgQVJUSyBBUElcbiAgICBpZiAodGhpcy52aWRlb0x1bWEgJiYgIXRoaXMudmlkZW9MdW1hSW50ZXJuYWwpIHtcbiAgICAgIGlmICh0aGlzLmdyYXlzY2FsZUVuYWJsZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHEgPSAwO1xuXG4gICAgICAgIC8vIENyZWF0ZSBsdW1hIGZyb20gdmlkZW8gZGF0YSBhc3N1bWluZyBQaXhlbGZvcm1hdCBBUl9QSVhFTF9GT1JNQVRfUkdCQVxuICAgICAgICAvLyBzZWUgKEFSVG9vbEtpdEpTLmNwcCBMOiA0MylcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCB0aGlzLnZpZGVvU2l6ZTsgcCsrKSB7XG4gICAgICAgICAgbGV0IHIgPSBkYXRhW3EgKyAwXSxcbiAgICAgICAgICAgIGcgPSBkYXRhW3EgKyAxXSxcbiAgICAgICAgICAgIGIgPSBkYXRhW3EgKyAyXTtcbiAgICAgICAgICAvLyBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81OTYyNDEvNTg0MzY0MlxuICAgICAgICAgIHRoaXMudmlkZW9MdW1hW3BdID0gKHIgKyByICsgciArIGIgKyBnICsgZyArIGcgKyBnKSA+PiAzO1xuICAgICAgICAgIHEgKz0gNDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmdyYXlzY2FsZUVuYWJsZWQgPT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnZpZGVvTHVtYSA9IHRoaXMuZ3JheXNjYWxlU291cmNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZGVvTHVtYSkge1xuICAgICAgdGhpcy5hcnRvb2xraXRORlQucGFzc1ZpZGVvRGF0YShcbiAgICAgICAgZGF0YSxcbiAgICAgICAgdGhpcy52aWRlb0x1bWEsXG4gICAgICAgIHRoaXMudmlkZW9MdW1hSW50ZXJuYWwsXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCIvKlxuICogIEFSVG9vbGtpdE5GVF90ZC50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cbmltcG9ydCB7IGluaXRBUlRvb2xraXRORlQgfSBmcm9tIFwiLi9mYWN0b3J5RnVuY3Rpb25zL2luaXRBUlRvb2xraXRORlRfdGRcIjtcbmltcG9ydCB7IElBUlRvb2xraXRORlQgfSBmcm9tIFwiLi9hYnN0cmFjdGlvbnMvSUFSVG9vbGtpdE5GVFwiO1xuaW1wb3J0IHsgSU5GVE1hcmtlckluZm8gfSBmcm9tIFwiLi9hYnN0cmFjdGlvbnMvQ29tbW9uSW50ZXJmYWNlc1wiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuL1V0aWxzXCI7XG5pbXBvcnQgcGFja2FnZUpzb24gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuY29uc3QgeyB2ZXJzaW9uIH0gPSBwYWNrYWdlSnNvbjtcblxuY29uc3QgVU5LTk9XTl9NQVJLRVIgPSAtMTtcbmNvbnN0IE5GVF9NQVJLRVIgPSAwO1xuXG5leHBvcnQgY2xhc3MgQVJUb29sa2l0TkZUIGltcGxlbWVudHMgSUFSVG9vbGtpdE5GVCB7XG4gIC8qKlxuICAgKiBzdGF0aWMgcHJvcGVydGllc1xuICAgKi9cbiAgc3RhdGljIGdldCBVTktOT1dOX01BUktFUigpIHtcbiAgICByZXR1cm4gVU5LTk9XTl9NQVJLRVI7XG4gIH1cbiAgc3RhdGljIGdldCBORlRfTUFSS0VSKCkge1xuICAgIHJldHVybiBORlRfTUFSS0VSO1xuICB9XG5cbiAgLyogZXJyb3JzICovXG4gIHN0YXRpYyBFUlJPUl9NQVJLRVJfSU5ERVhfT1VUX09GX0JPVU5EUzogbnVtYmVyO1xuXG4gIC8qIGFyRGVidWcgKi9cbiAgc3RhdGljIEFSX0RFQlVHX0RJU0FCTEU6IG51bWJlcjtcbiAgc3RhdGljIEFSX0RFQlVHX0VOQUJMRTogbnVtYmVyO1xuICBzdGF0aWMgQVJfREVGQVVMVF9ERUJVR19NT0RFOiBudW1iZXI7XG5cbiAgLyogZm9yIGFybGFiZWxpbmdUaHJlc2ggKi9cbiAgc3RhdGljIEFSX0RFRkFVTFRfTEFCRUxJTkdfVEhSRVNIOiBudW1iZXI7XG5cbiAgLyogZm9yIGFySW1hZ2VQcm9jTW9kZSAqL1xuICBzdGF0aWMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRTogbnVtYmVyO1xuICBzdGF0aWMgQVJfSU1BR0VfUFJPQ19GSUVMRF9JTUFHRTogbnVtYmVyO1xuICBzdGF0aWMgQVJfREVGQVVMVF9JTUFHRV9QUk9DX01PREU6IG51bWJlcjtcblxuICAvKiBmb3IgYXJHZXRUcmFuc01hdCAqL1xuICBzdGF0aWMgQVJfTUFYX0xPT1BfQ09VTlQ6IG51bWJlcjtcbiAgc3RhdGljIEFSX0xPT1BfQlJFQUtfVEhSRVNIOiBudW1iZXI7XG5cbiAgLyogRW51bXMgKi9cbiAgc3RhdGljIEFSX0xPR19MRVZFTF9ERUJVRzogbnVtYmVyO1xuICBzdGF0aWMgQVJfTE9HX0xFVkVMX0lORk86IG51bWJlcjtcbiAgc3RhdGljIEFSX0xPR19MRVZFTF9XQVJOOiBudW1iZXI7XG4gIHN0YXRpYyBBUl9MT0dfTEVWRUxfRVJST1I6IG51bWJlcjtcbiAgc3RhdGljIEFSX0xPR19MRVZFTF9SRUxfSU5GTzogbnVtYmVyO1xuXG4gIHN0YXRpYyBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9NQU5VQUw6IG51bWJlcjtcbiAgc3RhdGljIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fTUVESUFOOiBudW1iZXI7XG4gIHN0YXRpYyBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX09UU1U6IG51bWJlcjtcbiAgc3RhdGljIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fQURBUFRJVkU6IG51bWJlcjtcblxuICBzdGF0aWMgQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX05PTkU6IG51bWJlcjtcbiAgc3RhdGljIEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QQVRURVJOX0VYVFJBQ1RJT046IG51bWJlcjtcbiAgc3RhdGljIEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9HRU5FUklDOiBudW1iZXI7XG4gIHN0YXRpYyBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQ09OVFJBU1Q6IG51bWJlcjtcbiAgc3RhdGljIEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9CQVJDT0RFX05PVF9GT1VORDogbnVtYmVyO1xuICBzdGF0aWMgQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0JBUkNPREVfRURDX0ZBSUw6IG51bWJlcjtcbiAgc3RhdGljIEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9DT05GSURFTkNFOiBudW1iZXI7XG4gIHN0YXRpYyBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUE9TRV9FUlJPUjogbnVtYmVyO1xuICBzdGF0aWMgQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX1BPU0VfRVJST1JfTVVMVEk6IG51bWJlcjtcbiAgc3RhdGljIEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9IRVVSSVNUSUNfVFJPVUJMRVNPTUVfTUFUUklYX0NPREVTOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBpbnN0YW5jZTogYW55O1xuICBwcml2YXRlIG1hcmtlck5GVENvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgY2FtZXJhQ291bnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSB2ZXJzaW9uOiBzdHJpbmc7XG5cbiAgcHVibGljIE5GVE1hcmtlckluZm86IHtcbiAgICBlcnJvcjogbnVtYmVyO1xuICAgIGZvdW5kOiBudW1iZXI7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBwb3NlOiBGbG9hdDY0QXJyYXk7XG4gIH07XG5cbiAgcHVibGljIEZTOiBhbnk7XG4gIHB1YmxpYyBTdHJpbmdMaXN0OiBhbnk7XG4gIHB1YmxpYyBuZnRNYXJrZXJzOiBhbnk7XG5cbiAgLy8gY29uc3RydWN0aW9uXG4gIC8qKlxuICAgKiBUaGUgQVJUb29sa2l0TkZUIGNvbnN0cnVjdG9yLiBJdCBoYXMgbm8gYXJndW1lbnRzLlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBpbml0aWFsaXplZDpcbiAgICogLSBpbnN0YW5jZVxuICAgKiAtIG1hcmtlck5GVENvdW50XG4gICAqIC0gY2FtZXJhQ291bnRcbiAgICogLSB2ZXJzaW9uXG4gICAqIEEgbWVzc2FnZSBpcyBkaXNwbGF5ZWQgaW4gdGhlIGJyb3dzZXIgY29uc29sZSBkdXJpbmcgdGhlIGludGl0aWFsaXphdGlvbiwgZm9yIGV4YW1wbGU6XG4gICAqIFwiQVJUb29sa2l0TkZUIDEuNS4wXCJcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIHJlZmVyZW5jZSB0byBXQVNNIG1vZHVsZVxuICAgIHRoaXMuaW5zdGFuY2U7XG4gICAgdGhpcy5tYXJrZXJORlRDb3VudCA9IDA7XG4gICAgdGhpcy5jYW1lcmFDb3VudCA9IDA7XG4gICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBjb25zb2xlLmluZm8oXCJBUlRvb2xraXRORlQgXCIsIHRoaXMudmVyc2lvbik7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBpbml0aWFsaXphdGlvblxuICAvKipcbiAgICogSW5pdCB0aGUgY2xhc3MgaW5qZWN0aW5nIHRoZSBXYXNtIE1vZHVsZSwgbGluayB0aGUgaW5zdGFuY2VkIG1ldGhvZHMgYW5kXG4gICAqIGNyZWF0ZSBhIGdsb2JhbCBhcnRvb2xraXRORlQgdmFyaWFibGUuXG4gICAqIEByZXR1cm4ge29iamVjdH0gdGhlIHRoaXMgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgaW5pdCgpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGF3YWl0IGluaXRBUlRvb2xraXRORlQoKTtcbiAgICB0aGlzLmluc3RhbmNlID0gbmV3IGluc3RhbmNlLkFSVG9vbEtpdE5GVCgpO1xuXG4gICAgdGhpcy5GUyA9IGluc3RhbmNlLkZTO1xuICAgIHRoaXMuU3RyaW5nTGlzdCA9IGluc3RhbmNlLlN0cmluZ0xpc3Q7XG4gICAgdGhpcy5uZnRNYXJrZXJzID0gaW5zdGFuY2UubmZ0TWFya2VycztcblxuICAgIEFSVG9vbGtpdE5GVC5FUlJPUl9NQVJLRVJfSU5ERVhfT1VUX09GX0JPVU5EUyA9XG4gICAgICBpbnN0YW5jZS5FUlJPUl9NQVJLRVJfSU5ERVhfT1VUX09GX0JPVU5EUztcbiAgICBBUlRvb2xraXRORlQuQVJfREVCVUdfRElTQUJMRSA9IGluc3RhbmNlLkFSX0RFQlVHX0RJU0FCTEU7XG4gICAgQVJUb29sa2l0TkZULkFSX0RFQlVHX0VOQUJMRSA9IGluc3RhbmNlLkFSX0RFQlVHX0VOQUJMRTtcbiAgICBBUlRvb2xraXRORlQuQVJfREVGQVVMVF9ERUJVR19NT0RFID0gaW5zdGFuY2UuQVJfREVGQVVMVF9ERUJVR19NT0RFO1xuXG4gICAgLyogZm9yIGFybGFiZWxpbmdUaHJlc2ggKi9cbiAgICBBUlRvb2xraXRORlQuQVJfREVGQVVMVF9MQUJFTElOR19USFJFU0ggPVxuICAgICAgaW5zdGFuY2UuQVJfREVGQVVMVF9MQUJFTElOR19USFJFU0g7XG5cbiAgICAvKiBmb3IgYXJJbWFnZVByb2NNb2RlICovXG4gICAgQVJUb29sa2l0TkZULkFSX0lNQUdFX1BST0NfRlJBTUVfSU1BR0UgPSBpbnN0YW5jZS5BUl9JTUFHRV9QUk9DX0ZSQU1FX0lNQUdFO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFID0gaW5zdGFuY2UuQVJfSU1BR0VfUFJPQ19GSUVMRF9JTUFHRTtcbiAgICBBUlRvb2xraXRORlQuQVJfREVGQVVMVF9JTUFHRV9QUk9DX01PREUgPVxuICAgICAgaW5zdGFuY2UuQVJfREVGQVVMVF9JTUFHRV9QUk9DX01PREU7XG5cbiAgICAvKiBmb3IgYXJHZXRUcmFuc01hdCAqL1xuICAgIEFSVG9vbGtpdE5GVC5BUl9NQVhfTE9PUF9DT1VOVCA9IGluc3RhbmNlLkFSX01BWF9MT09QX0NPVU5UO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9MT09QX0JSRUFLX1RIUkVTSCA9IGluc3RhbmNlLkFSX0xPT1BfQlJFQUtfVEhSRVNIO1xuXG4gICAgLyogRW51bXMgKi9cbiAgICBBUlRvb2xraXRORlQuQVJfTE9HX0xFVkVMX0RFQlVHID0gaW5zdGFuY2UuQVJfTE9HX0xFVkVMX0RFQlVHO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9MT0dfTEVWRUxfSU5GTyA9IGluc3RhbmNlLkFSX0xPR19MRVZFTF9JTkZPO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9MT0dfTEVWRUxfV0FSTiA9IGluc3RhbmNlLkFSX0xPR19MRVZFTF9XQVJOO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9MT0dfTEVWRUxfRVJST1IgPSBpbnN0YW5jZS5BUl9MT0dfTEVWRUxfRVJST1I7XG4gICAgQVJUb29sa2l0TkZULkFSX0xPR19MRVZFTF9SRUxfSU5GTyA9IGluc3RhbmNlLkFSX0xPR19MRVZFTF9SRUxfSU5GTztcblxuICAgIEFSVG9vbGtpdE5GVC5BUl9MQUJFTElOR19USFJFU0hfTU9ERV9NQU5VQUwgPVxuICAgICAgaW5zdGFuY2UuQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfTUFOVUFMO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTiA9XG4gICAgICBpbnN0YW5jZS5BUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTjtcbiAgICBBUlRvb2xraXRORlQuQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19PVFNVID1cbiAgICAgIGluc3RhbmNlLkFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVTtcbiAgICBBUlRvb2xraXRORlQuQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRSA9XG4gICAgICBpbnN0YW5jZS5BUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFO1xuXG4gICAgQVJUb29sa2l0TkZULkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9OT05FID1cbiAgICAgIGluc3RhbmNlLkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9OT05FO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUEFUVEVSTl9FWFRSQUNUSU9OID1cbiAgICAgIGluc3RhbmNlLkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QQVRURVJOX0VYVFJBQ1RJT047XG4gICAgQVJUb29sa2l0TkZULkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9HRU5FUklDID1cbiAgICAgIGluc3RhbmNlLkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9HRU5FUklDO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQ09OVFJBU1QgPVxuICAgICAgaW5zdGFuY2UuQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0NPTlRSQVNUO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQkFSQ09ERV9OT1RfRk9VTkQgPVxuICAgICAgaW5zdGFuY2UuQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0JBUkNPREVfTk9UX0ZPVU5EO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQkFSQ09ERV9FRENfRkFJTCA9XG4gICAgICBpbnN0YW5jZS5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQkFSQ09ERV9FRENfRkFJTDtcbiAgICBBUlRvb2xraXRORlQuQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0NPTkZJREVOQ0UgPVxuICAgICAgaW5zdGFuY2UuQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0NPTkZJREVOQ0U7XG4gICAgQVJUb29sa2l0TkZULkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QT1NFX0VSUk9SID1cbiAgICAgIGluc3RhbmNlLkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QT1NFX0VSUk9SO1xuICAgIEFSVG9vbGtpdE5GVC5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUE9TRV9FUlJPUl9NVUxUSSA9XG4gICAgICBpbnN0YW5jZS5BUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUE9TRV9FUlJPUl9NVUxUSTtcbiAgICBBUlRvb2xraXRORlQuQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX0hFVVJJU1RJQ19UUk9VQkxFU09NRV9NQVRSSVhfQ09ERVMgPVxuICAgICAgaW5zdGFuY2UuQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX0hFVVJJU1RJQ19UUk9VQkxFU09NRV9NQVRSSVhfQ09ERVM7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBzZXR1cCh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgY2FtZXJhSWQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2Uuc2V0dXAod2lkdGgsIGhlaWdodCwgY2FtZXJhSWQpO1xuICB9XG5cbiAgcHVibGljIHRlYXJkb3duKCk6IHZvaWQge1xuICAgIHRoaXMuaW5zdGFuY2UudGVhcmRvd24oKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXR1cEFSMigpOiB2b2lkIHtcbiAgICB0aGlzLmluc3RhbmNlLnNldHVwQVIyKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0RGVidWdNb2RlKG1vZGU6IGJvb2xlYW4pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnNldERlYnVnTW9kZShtb2RlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWJ1Z01vZGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZ2V0RGVidWdNb2RlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UHJvY2Vzc2luZ0ltYWdlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZ2V0UHJvY2Vzc2luZ0ltYWdlKCk7XG4gIH1cblxuICBwdWJsaWMgZGV0ZWN0TkZUTWFya2VyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZGV0ZWN0TkZUTWFya2VyKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TkZUTWFya2VyKG1hcmtlckluZGV4OiBudW1iZXIpOiBJTkZUTWFya2VySW5mbyB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZ2V0TkZUTWFya2VyKG1hcmtlckluZGV4KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRORlREYXRhKGluZGV4OiBudW1iZXIpOiBvYmplY3Qge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLmdldE5GVERhdGEoaW5kZXgpO1xuICB9XG5cbiAgcHVibGljIHNldExvZ0xldmVsKG1vZGU6IGJvb2xlYW4pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnNldExvZ0xldmVsKG1vZGUpO1xuICB9XG4gIHB1YmxpYyBnZXRMb2dMZXZlbCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLmdldExvZ0xldmVsKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0UHJvamVjdGlvbk5lYXJQbGFuZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5pbnN0YW5jZS5zZXRQcm9qZWN0aW9uTmVhclBsYW5lKHZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQcm9qZWN0aW9uTmVhclBsYW5lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZ2V0UHJvamVjdGlvbk5lYXJQbGFuZSgpO1xuICB9XG5cbiAgcHVibGljIHNldFByb2plY3Rpb25GYXJQbGFuZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5pbnN0YW5jZS5zZXRQcm9qZWN0aW9uRmFyUGxhbmUodmFsdWUpO1xuICB9XG5cbiAgcHVibGljIGdldFByb2plY3Rpb25GYXJQbGFuZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLmdldFByb2plY3Rpb25GYXJQbGFuZSgpO1xuICB9XG5cbiAgcHVibGljIHNldFRocmVzaG9sZE1vZGUobW9kZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5zZXRUaHJlc2hvbGRNb2RlKG1vZGUpO1xuICB9XG5cbiAgcHVibGljIGdldFRocmVzaG9sZE1vZGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5nZXRUaHJlc2hvbGRNb2RlKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0VGhyZXNob2xkKHRocmVzaG9sZDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5zZXRUaHJlc2hvbGQodGhyZXNob2xkKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUaHJlc2hvbGQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5nZXRUaHJlc2hvbGQoKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRJbWFnZVByb2NNb2RlKG1vZGU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2Uuc2V0SW1hZ2VQcm9jTW9kZShtb2RlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJbWFnZVByb2NNb2RlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZ2V0SW1hZ2VQcm9jTW9kZSgpO1xuICB9XG5cbiAgcHVibGljIGdldENhbWVyYUxlbnMoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5nZXRDYW1lcmFMZW5zKCk7XG4gIH1cblxuICBwdWJsaWMgcGFzc1ZpZGVvRGF0YShcbiAgICB2aWRlb0ZyYW1lOiBVaW50OENsYW1wZWRBcnJheSxcbiAgICB2aWRlb0x1bWE6IFVpbnQ4QXJyYXksXG4gICAgbHVtYUludGVybmFsOiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmluc3RhbmNlLnBhc3NWaWRlb0RhdGEodmlkZW9GcmFtZSwgdmlkZW9MdW1hLCBsdW1hSW50ZXJuYWwpO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHB1YmxpYyBhY2Nlc3NvcnNcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBMb2FkIHRoZSBjYW1lcmEsIHRoaXMgaXMgYW4gaW1wb3J0YW50IGFuZCByZXF1aXJlZCBzdGVwLCBJbnRlcm5hbGx5IGZpbGxcbiAgICogdGhlIEFSUGFyYW0gc3RydWN0LlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl8c3RyaW5nfSB1cmxPckRhdGE6IHRoZSBjYW1lcmEgcGFyYW1ldGVyLCB1c3VhbGx5IGEgcGF0aCB0byBhIC5kYXQgZmlsZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59IGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbnVtYmVyLCB0aGUgaW50ZXJuYWwgaWQuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbG9hZENhbWVyYSh1cmxPckRhdGE6IFVpbnQ4QXJyYXkgfCBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHRhcmdldCA9IFwiL2NhbWVyYV9wYXJhbV9cIiArIHRoaXMuY2FtZXJhQ291bnQrKztcblxuICAgIGxldCBkYXRhOiBVaW50OEFycmF5O1xuXG4gICAgaWYgKHVybE9yRGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIC8vIGFzc3VtZSBwcmVsb2FkZWQgY2FtZXJhIHBhcmFtc1xuICAgICAgZGF0YSA9IHVybE9yRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmV0Y2ggZGF0YSB2aWEgSFRUUFxuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IFV0aWxzLmZldGNoUmVtb3RlRGF0YSh1cmxPckRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gbG9hZENhbWVyYSBmdW5jdGlvbjogXCIsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBVdGlscy5fc3RvcmVEYXRhRmlsZShkYXRhLCB0YXJnZXQsIHRoaXMpO1xuXG4gICAgLy8gcmV0dXJuIHRoZSBpbnRlcm5hbCBtYXJrZXIgSURcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5fbG9hZENhbWVyYSh0YXJnZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgdGhlIE5GVCBNYXJrZXJzICguZnNldCwgLmlzZXQgYW5kIC5mc2V0MykgaW4gdGhlIGNvZGUsIE11c3QgYmUgcHJvdmlkZWRcbiAgICogdGhlIHVybCBvZiB0aGUgZmlsZSB3aXRob3V0IHRoZSBleHRlbnNpb24uIElmIGZhaWxzIHRvIGxvYWQgaXQgcmFpc2UgYW4gZXJyb3IuXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gdXJscyAgYXJyYXkgb2YgdXJscyBvZiB0aGUgZGVzY3JpcHRvcnMgZmlsZXMgd2l0aG91dCBleHRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIHJldHJpZXZlIHRoZSBpZHMuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uRXJyb3IyIHRoZSBlcnJvciBjYWxsYmFjay5cbiAgICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gYW4gYXJyYXkgb2YgaWRzLlxuICAgKi9cbiAgcHVibGljIGFkZE5GVE1hcmtlcnMoXG4gICAgdXJsczogQXJyYXk8c3RyaW5nIHwgQXJyYXk8c3RyaW5nPj4sXG4gICAgY2FsbGJhY2s6IChmaWxlbmFtZTogbnVtYmVyW10pID0+IHZvaWQsXG4gICAgb25FcnJvcjI6IChlcnJvck51bWJlcjogbnVtYmVyKSA9PiB2b2lkLFxuICApOiBBcnJheTxudW1iZXI+IHtcbiAgICBjb25zdCBwcmVmaXhlczogYW55ID0gW107XG4gICAgbGV0IHBlbmRpbmcgPSB1cmxzLmxlbmd0aCAqIDM7XG4gICAgY29uc3Qgb25TdWNjZXNzID0gKGZpbGVuYW1lOiBVaW50OEFycmF5KSA9PiB7XG4gICAgICBwZW5kaW5nIC09IDE7XG4gICAgICBpZiAocGVuZGluZyA9PT0gMCkge1xuICAgICAgICBjb25zdCB2ZWMgPSBuZXcgdGhpcy5TdHJpbmdMaXN0KCk7XG4gICAgICAgIGNvbnN0IG1hcmtlcklkcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmVjLnB1c2hfYmFjayhwcmVmaXhlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5pbnN0YW5jZS5fYWRkTkZUTWFya2Vycyh2ZWMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldC5zaXplKCk7IGkrKykge1xuICAgICAgICAgIG1hcmtlcklkcy5wdXNoKHJldC5nZXQoaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJhZGQgbmZ0IG1hcmtlciBpZHM6IFwiLCBtYXJrZXJJZHMpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKG1hcmtlcklkcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvbkVycm9yID0gKGZpbGVuYW1lOiBzdHJpbmcsIGVycm9yTnVtYmVyPzogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBsb2FkOiBcIiwgZmlsZW5hbWUpO1xuICAgICAgb25FcnJvcjIoZXJyb3JOdW1iZXIpO1xuICAgIH07XG5cbiAgICBjb25zdCBsb2FkWkZUID0gKHByZWZpeDogYW55KSA9PiB7XG4gICAgICBjb25zdCBtYXJrZXJfbnVtID0gcHJlZml4LnN1YnN0cmluZygxMSk7XG4gICAgICBjb25zdCBwcmVmaXhUZW1wID0gXCIvdGVtcE1hcmtlck5GVF9cIiArIG1hcmtlcl9udW07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5pbnN0YW5jZS5fZGVjb21wcmVzc1pGVChwcmVmaXgsIHByZWZpeFRlbXApO1xuXG4gICAgICBsZXQgY29udGVudElzZXRVaW50OCA9IHRoaXMuRlMucmVhZEZpbGUocHJlZml4VGVtcCArIFwiLmlzZXRcIik7XG4gICAgICBsZXQgY29udGVudEZzZXRVaW50OCA9IHRoaXMuRlMucmVhZEZpbGUocHJlZml4VGVtcCArIFwiLmZzZXRcIik7XG4gICAgICBsZXQgY29udGVudEZzZXQzVWludDggPSB0aGlzLkZTLnJlYWRGaWxlKHByZWZpeFRlbXAgKyBcIi5mc2V0M1wiKTtcblxuICAgICAgdGhpcy5GUy51bmxpbmsocHJlZml4VGVtcCArIFwiLmlzZXRcIik7XG4gICAgICB0aGlzLkZTLnVubGluayhwcmVmaXhUZW1wICsgXCIuZnNldFwiKTtcbiAgICAgIHRoaXMuRlMudW5saW5rKHByZWZpeFRlbXAgKyBcIi5mc2V0M1wiKTtcblxuICAgICAgbGV0IGhleFN0cklzZXQgPSBVdGlscy5VaW50OEFycmF5VG9TdHIoY29udGVudElzZXRVaW50OCk7XG4gICAgICBsZXQgaGV4U3RyRnNldCA9IFV0aWxzLlVpbnQ4QXJyYXlUb1N0cihjb250ZW50RnNldFVpbnQ4KTtcbiAgICAgIGxldCBoZXhTdHJGc2V0MyA9IFV0aWxzLlVpbnQ4QXJyYXlUb1N0cihjb250ZW50RnNldDNVaW50OCk7XG5cbiAgICAgIGxldCBjb250ZW50SXNldCA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICBoZXhTdHJJc2V0Lm1hdGNoKC8uezEsMn0vZykubWFwKChieXRlKSA9PiBwYXJzZUludChieXRlLCAxNikpLFxuICAgICAgKTtcbiAgICAgIGxldCBjb250ZW50RnNldCA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICBoZXhTdHJGc2V0Lm1hdGNoKC8uezEsMn0vZykubWFwKChieXRlKSA9PiBwYXJzZUludChieXRlLCAxNikpLFxuICAgICAgKTtcbiAgICAgIGxldCBjb250ZW50RnNldDMgPSBuZXcgVWludDhBcnJheShcbiAgICAgICAgaGV4U3RyRnNldDMubWF0Y2goLy57MSwyfS9nKS5tYXAoKGJ5dGUpID0+IHBhcnNlSW50KGJ5dGUsIDE2KSksXG4gICAgICApO1xuXG4gICAgICBVdGlscy5fc3RvcmVEYXRhRmlsZShjb250ZW50RnNldCwgcHJlZml4ICsgXCIuZnNldFwiLCB0aGlzKTtcbiAgICAgIFV0aWxzLl9zdG9yZURhdGFGaWxlKGNvbnRlbnRJc2V0LCBwcmVmaXggKyBcIi5pc2V0XCIsIHRoaXMpO1xuICAgICAgVXRpbHMuX3N0b3JlRGF0YUZpbGUoY29udGVudEZzZXQzLCBwcmVmaXggKyBcIi5mc2V0M1wiLCB0aGlzKTtcbiAgICAgIG9uU3VjY2Vzcyhjb250ZW50RnNldCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uU3VjY2Vzc1pGVCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvYWRaRlQoYXJndW1lbnRzWzFdKTtcbiAgICAgIC8vb25TdWNjZXNzKGNvbnRlbnRGc2V0KTtcbiAgICB9O1xuXG4gICAgbGV0IElkczogQXJyYXk8bnVtYmVyPiA9IFtdO1xuXG4gICAgdXJscy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcHJlZml4ID0gXCIvbWFya2VyTkZUX1wiICsgdGhpcy5tYXJrZXJORlRDb3VudDtcbiAgICAgIHByZWZpeGVzLnB1c2gocHJlZml4KTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JFYWNoKCh1cmwpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHByZWZpeCArIFwiLlwiICsgdXJsLnNwbGl0KFwiLlwiKS5wb3AoKTtcblxuICAgICAgICAgIHRoaXMuYWpheChcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgICAgb25TdWNjZXNzLmJpbmQoZmlsZW5hbWUpLFxuICAgICAgICAgICAgb25FcnJvci5iaW5kKGZpbGVuYW1lKSxcbiAgICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1hcmtlck5GVENvdW50ICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmaWxlbmFtZTEgPSBwcmVmaXggKyBcIi5mc2V0XCI7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lMiA9IHByZWZpeCArIFwiLmlzZXRcIjtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUzID0gcHJlZml4ICsgXCIuZnNldDNcIjtcbiAgICAgICAgY29uc3QgZmlsZW5hbWU0ID0gcHJlZml4ICsgXCIuemZ0XCI7XG5cbiAgICAgICAgbGV0IHR5cGUgPSBVdGlscy5jaGVja1pGVChlbGVtZW50ICsgXCIuemZ0XCIpO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHBlbmRpbmcgLT0gMjtcbiAgICAgICAgICB0aGlzLmFqYXgoXG4gICAgICAgICAgICBlbGVtZW50ICsgXCIuemZ0XCIsXG4gICAgICAgICAgICBmaWxlbmFtZTQsXG4gICAgICAgICAgICBvblN1Y2Nlc3NaRlQuYmluZChmaWxlbmFtZTQpLFxuICAgICAgICAgICAgb25FcnJvci5iaW5kKGZpbGVuYW1lNCksXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFqYXgoXG4gICAgICAgICAgICBlbGVtZW50ICsgXCIuZnNldFwiLFxuICAgICAgICAgICAgZmlsZW5hbWUxLFxuICAgICAgICAgICAgb25TdWNjZXNzLmJpbmQoZmlsZW5hbWUxKSxcbiAgICAgICAgICAgIG9uRXJyb3IuYmluZChmaWxlbmFtZTEpLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5hamF4KFxuICAgICAgICAgICAgZWxlbWVudCArIFwiLmlzZXRcIixcbiAgICAgICAgICAgIGZpbGVuYW1lMixcbiAgICAgICAgICAgIG9uU3VjY2Vzcy5iaW5kKGZpbGVuYW1lMiksXG4gICAgICAgICAgICBvbkVycm9yLmJpbmQoZmlsZW5hbWUyKSxcbiAgICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuYWpheChcbiAgICAgICAgICAgIGVsZW1lbnQgKyBcIi5mc2V0M1wiLFxuICAgICAgICAgICAgZmlsZW5hbWUzLFxuICAgICAgICAgICAgb25TdWNjZXNzLmJpbmQoZmlsZW5hbWUzKSxcbiAgICAgICAgICAgIG9uRXJyb3IuYmluZChmaWxlbmFtZTMpLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcmtlck5GVENvdW50ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIElkcy5wdXNoKGluZGV4KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBJZHM7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBpbXBsZW1lbnRhdGlvblxuXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgYnkgdGhlIGFkZE5GVE1hcmtlcnMgbWV0aG9kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdXJsIG9mIHRoZSBtYXJrZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgdGhlIHRhcmdldCBvZiB0aGUgbWFya2VyLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBjYWxsYmFjayB0byBnZXQgdGhlIGJpbmFyeSBkYXRhLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBlcnJvckNhbGxiYWNrIHRoZSBlcnJvciBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB0aGUgcHJlZml4IGZvciB0aGUgbWFya2VyLlxuICAgKi9cbiAgcHJpdmF0ZSBhamF4KFxuICAgIHVybDogc3RyaW5nLFxuICAgIHRhcmdldDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAoYnl0ZUFycmF5OiBVaW50OEFycmF5KSA9PiB2b2lkLFxuICAgIGVycm9yQ2FsbGJhY2s6ICh1cmw6IHN0cmluZywgbWVzc2FnZTogbnVtYmVyKSA9PiB2b2lkLFxuICAgIHByZWZpeDogc3RyaW5nLFxuICApIHtcbiAgICBjb25zdCBvUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgb1JlcS5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgb1JlcS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7IC8vIGJsb2IgYXJyYXlidWZmZXJcbiAgICBjb25zdCB3cml0ZUJ5dGVBcnJheVRvRlMgPSAoXG4gICAgICB0YXJnZXQ6IHN0cmluZyxcbiAgICAgIGJ5dGVBcnJheTogVWludDhBcnJheSxcbiAgICAgIGNhbGxiYWNrOiAoYnl0ZUFycmF5OiBVaW50OEFycmF5LCBwcmVmaXg6IHN0cmluZykgPT4gdm9pZCxcbiAgICAgIHByZWZpeDogc3RyaW5nLFxuICAgICkgPT4ge1xuICAgICAgVXRpbHMuX3N0b3JlRGF0YUZpbGUoYnl0ZUFycmF5LCB0YXJnZXQsIHRoaXMpO1xuICAgICAgY2FsbGJhY2soYnl0ZUFycmF5LCBwcmVmaXgpO1xuICAgIH07XG5cbiAgICBvUmVxLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBvUmVxLnJlc3BvbnNlO1xuICAgICAgICBjb25zdCBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgICAgIHdyaXRlQnl0ZUFycmF5VG9GUyh0YXJnZXQsIGJ5dGVBcnJheSwgY2FsbGJhY2ssIHByZWZpeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvckNhbGxiYWNrKHVybCwgdGhpcy5zdGF0dXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBvUmVxLnNlbmQoKTtcbiAgfVxufVxuIiwiLypcbiAqICBVdGlscy50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cbmltcG9ydCBheGlvcywgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcbiAgc3RhdGljIGFzeW5jIGZldGNoUmVtb3RlRGF0YSh1cmw6IHN0cmluZyk6IFByb21pc2U8VWludDhBcnJheT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZTogQXhpb3NSZXNwb25zZTxhbnk+ID0gYXdhaXQgYXhpb3MuZ2V0KHVybCwge1xuICAgICAgICByZXNwb25zZVR5cGU6IFwiYXJyYXlidWZmZXJcIixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3BvbnNlLmRhdGEpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBVdGlscy5mZXRjaFJlbW90ZURhdGE6IFwiLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZldGNoUmVtb3RlRGF0YUNhbGxiYWNrKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiBhbnksXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCBheGlvc1xuICAgICAgICAuZ2V0KHVybCwgeyByZXNwb25zZVR5cGU6IFwiYXJyYXlidWZmZXJcIiB9KVxuICAgICAgICAudGhlbigocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBVdGlscy5mZXRjaFJlbW90ZURhdGFDYWxsYmFjazogXCIsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc3RyaW5nMlVpbnQ4RGF0YShzdHJpbmc6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShzdHJpbmcubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgc3RhdGljIFVpbnQ4QXJyYXlUb1N0cihhcnJheTogYW55KTogc3RyaW5nIHtcbiAgICBsZXQgb3V0LCBpLCBsZW4sIGM7XG4gICAgbGV0IGNoYXIyLCBjaGFyMztcblxuICAgIG91dCA9IFwiXCI7XG4gICAgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjID0gYXJyYXlbaSsrXTtcbiAgICAgIHN3aXRjaCAoYyA+PiA0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICBjYXNlIDU6XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIC8vIDB4eHh4eHh4XG4gICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTI6XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgLy8gMTEweCB4eHh4ICAgMTB4eCB4eHh4XG4gICAgICAgICAgY2hhcjIgPSBhcnJheVtpKytdO1xuICAgICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MWYpIDw8IDYpIHwgKGNoYXIyICYgMHgzZikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIC8vIDExMTAgeHh4eCAgMTB4eCB4eHh4ICAxMHh4IHh4eHhcbiAgICAgICAgICBjaGFyMiA9IGFycmF5W2krK107XG4gICAgICAgICAgY2hhcjMgPSBhcnJheVtpKytdO1xuICAgICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICAgKChjICYgMHgwZikgPDwgMTIpIHwgKChjaGFyMiAmIDB4M2YpIDw8IDYpIHwgKChjaGFyMyAmIDB4M2YpIDw8IDApLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHN0YXRpYyBjaGVja1pGVCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgdXJsLCBmYWxzZSk7IC8vIGBmYWxzZWAgbWFrZXMgdGhlIHJlcXVlc3Qgc3luY2hyb25vdXNcbiAgICByZXF1ZXN0LnNlbmQobnVsbCk7XG5cbiAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU3RvcmVzIGRhdGEgaW4gdGhlIEVtc2NyaXB0ZW4gZmlsZXN5c3RlbS5cbiAgICogTm90ZTogRlMgaXMgcHJvdmlkZWQgYnkgZW1zY3JpcHRlbiBhbmQgdmFsaWQgZGF0YSBtdXN0IGJlIGluIGJpbmFyeSBmb3JtYXQgZW5jb2RlZCBhcyBVaW50OEFycmF5XG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YSAtIFRoZSBiaW5hcnkgZGF0YSB0byBzdG9yZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCAtIFRoZSB0YXJnZXQgZmlsZSBwYXRoIGluIHRoZSBFbXNjcmlwdGVuIGZpbGVzeXN0ZW0uXG4gICAqIEBwYXJhbSB7YW55fSBpbnN0YW5jZSAtIFRoZSBpbnN0YW5jZSBvZiB0aGUgY2xhc3MgY29udGFpbmluZyB0aGUgRlMgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIF9zdG9yZURhdGFGaWxlKGRhdGE6IFVpbnQ4QXJyYXksIHRhcmdldDogc3RyaW5nLCBpbnN0YW5jZTogYW55KSB7XG4gICAgaW5zdGFuY2UuRlMud3JpdGVGaWxlKHRhcmdldCwgZGF0YSwge1xuICAgICAgZW5jb2Rpbmc6IFwiYmluYXJ5XCIsXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qXG4gKiAgaW5pdEFSVG9vbGtpdE5GVF90ZC50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cblxuaW1wb3J0IEFSVG9vbGtpdE5GVCBmcm9tIFwiLi4vLi4vYnVpbGQvYXJ0b29sa2l0TkZUX0VTNl93YXNtX3RkXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdEFSVG9vbGtpdE5GVCgpIHtcbiAgcmV0dXJuIGF3YWl0IEFSVG9vbGtpdE5GVCgpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8qXG4gKiAgaW5kZXhfdGQudHNcbiAqICBKU0FSVG9vbEtpdE5GVFxuICpcbiAqICBUaGlzIGZpbGUgaXMgcGFydCBvZiBKU0FSVG9vbEtpdE5GVCAtIFdlYkFSS2l0LlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqICBhbG9uZyB3aXRoIEpTQVJUb29sS2l0TkZULiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqICBBcyBhIHNwZWNpYWwgZXhjZXB0aW9uLCB0aGUgY29weXJpZ2h0IGhvbGRlcnMgb2YgdGhpcyBsaWJyYXJ5IGdpdmUgeW91XG4gKiAgcGVybWlzc2lvbiB0byBsaW5rIHRoaXMgbGlicmFyeSB3aXRoIGluZGVwZW5kZW50IG1vZHVsZXMgdG8gcHJvZHVjZSBhblxuICogIGV4ZWN1dGFibGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGxpY2Vuc2UgdGVybXMgb2YgdGhlc2UgaW5kZXBlbmRlbnQgbW9kdWxlcywgYW5kIHRvXG4gKiAgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgcmVzdWx0aW5nIGV4ZWN1dGFibGUgdW5kZXIgdGVybXMgb2YgeW91ciBjaG9pY2UsXG4gKiAgcHJvdmlkZWQgdGhhdCB5b3UgYWxzbyBtZWV0LCBmb3IgZWFjaCBsaW5rZWQgaW5kZXBlbmRlbnQgbW9kdWxlLCB0aGUgdGVybXMgYW5kXG4gKiAgY29uZGl0aW9ucyBvZiB0aGUgbGljZW5zZSBvZiB0aGF0IG1vZHVsZS4gQW4gaW5kZXBlbmRlbnQgbW9kdWxlIGlzIGEgbW9kdWxlXG4gKiAgd2hpY2ggaXMgbmVpdGhlciBkZXJpdmVkIGZyb20gbm9yIGJhc2VkIG9uIHRoaXMgbGlicmFyeS4gSWYgeW91IG1vZGlmeSB0aGlzXG4gKiAgbGlicmFyeSwgeW91IG1heSBleHRlbmQgdGhpcyBleGNlcHRpb24gdG8geW91ciB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LCBidXQgeW91XG4gKiAgYXJlIG5vdCBvYmxpZ2F0ZWQgdG8gZG8gc28uIElmIHlvdSBkbyBub3Qgd2lzaCB0byBkbyBzbywgZGVsZXRlIHRoaXMgZXhjZXB0aW9uXG4gKiAgc3RhdGVtZW50IGZyb20geW91ciB2ZXJzaW9uLlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBXZWJBUktpdC5cbiAqXG4gKiAgQXV0aG9yKHMpOiBXYWx0ZXIgUGVyZGFuIEBrYWx3YWx0IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWx3YWx0XG4gKlxuICovXG5pbXBvcnQgeyBBUlRvb2xraXRORlQgfSBmcm9tIFwiLi9BUlRvb2xraXRORlRfdGRcIjtcbmltcG9ydCB7IEFSQ29udHJvbGxlck5GVCB9IGZyb20gXCIuL0FSQ29udHJvbGxlck5GVF90ZFwiO1xuXG5leHBvcnQgeyBBUlRvb2xraXRORlQsIEFSQ29udHJvbGxlck5GVCB9O1xuIl0sIm5hbWVzIjpbIkFSVG9vbGtpdE5GVCIsIkFSQ29udHJvbGxlck5GVCIsIndpZHRoIiwiaGVpZ2h0IiwiY2FtZXJhUGFyYW0iLCJpbnRlcm5hbEx1bWEiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJpZCIsIl93aWR0aCIsIl9oZWlnaHQiLCJfY2FtZXJhUGFyYW0iLCJjYW1lcmFJZCIsImFydG9vbGtpdE5GVCIsImxpc3RlbmVycyIsIm5mdE1hcmtlcnMiLCJ0cmFuc2Zvcm1fbWF0IiwiRmxvYXQ2NEFycmF5IiwidHJhbnNmb3JtR0xfUkgiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJ2aWRlb1NpemUiLCJmcmFtZXNpemUiLCJ2aWRlb0x1bWEiLCJ2aWRlb0x1bWFJbnRlcm5hbCIsImdyYXlzY2FsZUVuYWJsZWQiLCJjYW1lcmFfbWF0IiwibmZ0TWFya2VyRm91bmQiLCJuZnRNYXJrZXJGb3VuZFRpbWUiLCJuZnRNYXJrZXJDb3VudCIsIl9id3BvaW50ZXIiLCJkZWZhdWx0TWFya2VyV2lkdGgiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsInByb2Nlc3MiLCJpbWFnZSIsIl9jb3B5SW1hZ2VUb0hlYXAiLCJrIiwibyIsImNvbnZlcnRlciIsImluUHJldmlvdXMiLCJpbkN1cnJlbnQiLCJkZXRlY3RORlRNYXJrZXIiLCJNQVJLRVJfTE9TVF9USU1FIiwiaSIsIm5mdE1hcmtlckluZm8iLCJnZXRORlRNYXJrZXIiLCJtYXJrZXJUeXBlIiwiTkZUX01BUktFUiIsImZvdW5kIiwiRGF0ZSIsIm5vdyIsInZpc2libGUiLCJ0cmFja05GVE1hcmtlcklkIiwibWF0cml4IiwicG9zZSIsInRyYW5zTWF0VG9HTE1hdCIsImFyZ2xDYW1lcmFWaWV3UkhmIiwiZGlzcGF0Y2hFdmVudCIsIm5hbWUiLCJ0YXJnZXQiLCJkYXRhIiwiaW5kZXgiLCJ0eXBlIiwibWFya2VyIiwibWF0cml4R0xfUkgiLCJtYXJrZXJXaWR0aCIsIm9iaiIsIm1hcmtlckluZGV4IiwiZ2V0TkZURGF0YSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWxsYmFjayIsInB1c2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5kZXhPZiIsInNwbGljZSIsImV2ZW50IiwibGVuZ3RoIiwiY2FsbCIsImRlYnVnU2V0dXAiLCJzZXREZWJ1Z01vZGUiLCJnZXRQcm9jZXNzaW5nSW1hZ2UiLCJ0cmFuc01hdCIsImdsTWF0Iiwic2NhbGUiLCJ1bmRlZmluZWQiLCJnbE1hdHJpeCIsImdsUmhNYXRyaXgiLCJtX21vZGVsdmlldyIsImdldFRyYW5zZm9ybWF0aW9uTWF0cml4IiwiZ2V0Q2FtZXJhTWF0cml4IiwibW9kZSIsImdldERlYnVnTW9kZSIsInNldExvZ0xldmVsIiwiZ2V0TG9nTGV2ZWwiLCJzZXRQcm9qZWN0aW9uTmVhclBsYW5lIiwiZ2V0UHJvamVjdGlvbk5lYXJQbGFuZSIsInNldFByb2plY3Rpb25GYXJQbGFuZSIsImdldFByb2plY3Rpb25GYXJQbGFuZSIsInNldFRocmVzaG9sZE1vZGUiLCJnZXRUaHJlc2hvbGRNb2RlIiwic2V0VGhyZXNob2xkIiwidGhyZXNob2xkIiwiZ2V0VGhyZXNob2xkIiwiX2xvYWRORlRNYXJrZXIiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsInVybE9yRGF0YSIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJfdGhpcyIsIm5mdCIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJhZGRORlRNYXJrZXJzIiwiaWRzIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJsb2FkTkZUTWFya2VyIiwiX3giLCJfeDIiLCJfeDMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9sb2FkTkZUTWFya2VycyIsIl9jYWxsZWUyIiwiX3RoaXMyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwibG9hZE5GVE1hcmtlcnMiLCJfeDQiLCJfeDUiLCJfeDYiLCJzZXRJbWFnZVByb2NNb2RlIiwiZ2V0SW1hZ2VQcm9jTW9kZSIsInNldEdyYXlEYXRhIiwiZ3JheXNjYWxlU291cmNlIiwiX2luaXRpYWxpemUyIiwiX2NhbGxlZTMiLCJfdGhpczMiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJpbml0IiwiRlMiLCJTdHJpbmdMaXN0IiwiY29uc29sZSIsImxvZyIsImxvYWRDYW1lcmEiLCJzZXR1cCIsIl9pbml0TkZUIiwiVWludDhBcnJheSIsImdldENhbWVyYUxlbnMiLCJzZXRUaW1lb3V0IiwiX2luaXRpYWxpemUiLCJzZXR1cEFSMiIsInNvdXJjZUltYWdlIiwiZXJyb3IiLCJxIiwicCIsInIiLCJnIiwiYiIsInBhc3NWaWRlb0RhdGEiLCJfaW5pdFdpdGhEaW1lbnNpb25zIiwiX2NhbGxlZTQiLCJhckNvbnRyb2xsZXJORlQiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJpbml0V2l0aERpbWVuc2lvbnMiLCJfeDciLCJfeDgiLCJfeDkiLCJfeDEwIiwiX2luaXRXaXRoSW1hZ2UiLCJfY2FsbGVlNSIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NSIsImluaXRXaXRoSW1hZ2UiLCJfeDExIiwiX3gxMiIsIl94MTMiLCJfY3VzdG9tSW5pdCIsIl9jYWxsZWU2IiwiX2NhbGxlZTYkIiwiX2NvbnRleHQ2IiwiY3VzdG9tSW5pdCIsIl94MTQiLCJfeDE1IiwiX3gxNiIsIl94MTciLCJfeDE4IiwiaW5pdEFSVG9vbGtpdE5GVCIsIlV0aWxzIiwicGFja2FnZUpzb24iLCJ2ZXJzaW9uIiwiVU5LTk9XTl9NQVJLRVIiLCJpbnN0YW5jZSIsIm1hcmtlck5GVENvdW50IiwiY2FtZXJhQ291bnQiLCJpbmZvIiwiX2luaXQiLCJBUlRvb2xLaXRORlQiLCJFUlJPUl9NQVJLRVJfSU5ERVhfT1VUX09GX0JPVU5EUyIsIkFSX0RFQlVHX0RJU0FCTEUiLCJBUl9ERUJVR19FTkFCTEUiLCJBUl9ERUZBVUxUX0RFQlVHX01PREUiLCJBUl9ERUZBVUxUX0xBQkVMSU5HX1RIUkVTSCIsIkFSX0lNQUdFX1BST0NfRlJBTUVfSU1BR0UiLCJBUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFIiwiQVJfREVGQVVMVF9JTUFHRV9QUk9DX01PREUiLCJBUl9NQVhfTE9PUF9DT1VOVCIsIkFSX0xPT1BfQlJFQUtfVEhSRVNIIiwiQVJfTE9HX0xFVkVMX0RFQlVHIiwiQVJfTE9HX0xFVkVMX0lORk8iLCJBUl9MT0dfTEVWRUxfV0FSTiIsIkFSX0xPR19MRVZFTF9FUlJPUiIsIkFSX0xPR19MRVZFTF9SRUxfSU5GTyIsIkFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTCIsIkFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fTUVESUFOIiwiQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19PVFNVIiwiQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRSIsIkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9OT05FIiwiQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX1BBVFRFUk5fRVhUUkFDVElPTiIsIkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9HRU5FUklDIiwiQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0NPTlRSQVNUIiwiQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0JBUkNPREVfTk9UX0ZPVU5EIiwiQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0JBUkNPREVfRURDX0ZBSUwiLCJBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQ09ORklERU5DRSIsIkFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QT1NFX0VSUk9SIiwiQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX1BPU0VfRVJST1JfTVVMVEkiLCJBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfSEVVUklTVElDX1RST1VCTEVTT01FX01BVFJJWF9DT0RFUyIsInRlYXJkb3duIiwidmlkZW9GcmFtZSIsImx1bWFJbnRlcm5hbCIsIl9sb2FkQ2FtZXJhIiwiZmV0Y2hSZW1vdGVEYXRhIiwidDAiLCJFcnJvciIsIl9zdG9yZURhdGFGaWxlIiwidXJscyIsIm9uRXJyb3IyIiwicHJlZml4ZXMiLCJwZW5kaW5nIiwiZmlsZW5hbWUiLCJ2ZWMiLCJtYXJrZXJJZHMiLCJwdXNoX2JhY2siLCJyZXQiLCJfYWRkTkZUTWFya2VycyIsInNpemUiLCJlcnJvck51bWJlciIsImxvYWRaRlQiLCJwcmVmaXgiLCJtYXJrZXJfbnVtIiwic3Vic3RyaW5nIiwicHJlZml4VGVtcCIsInJlc3BvbnNlIiwiX2RlY29tcHJlc3NaRlQiLCJjb250ZW50SXNldFVpbnQ4IiwicmVhZEZpbGUiLCJjb250ZW50RnNldFVpbnQ4IiwiY29udGVudEZzZXQzVWludDgiLCJ1bmxpbmsiLCJoZXhTdHJJc2V0IiwiVWludDhBcnJheVRvU3RyIiwiaGV4U3RyRnNldCIsImhleFN0ckZzZXQzIiwiY29udGVudElzZXQiLCJtYXRjaCIsIm1hcCIsImJ5dGUiLCJwYXJzZUludCIsImNvbnRlbnRGc2V0IiwiY29udGVudEZzZXQzIiwib25TdWNjZXNzWkZUIiwiSWRzIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJBcnJheSIsImlzQXJyYXkiLCJ1cmwiLCJzcGxpdCIsInBvcCIsImFqYXgiLCJiaW5kIiwiZmlsZW5hbWUxIiwiZmlsZW5hbWUyIiwiZmlsZW5hbWUzIiwiZmlsZW5hbWU0IiwiY2hlY2taRlQiLCJlcnJvckNhbGxiYWNrIiwib1JlcSIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsIndyaXRlQnl0ZUFycmF5VG9GUyIsImJ5dGVBcnJheSIsIm9ubG9hZCIsInN0YXR1cyIsImFycmF5QnVmZmVyIiwic2VuZCIsImF4aW9zIiwiX2ZldGNoUmVtb3RlRGF0YSIsIl9mZXRjaFJlbW90ZURhdGFDYWxsYmFjayIsInRoZW4iLCJmZXRjaFJlbW90ZURhdGFDYWxsYmFjayIsInN0cmluZzJVaW50OERhdGEiLCJzdHJpbmciLCJjaGFyQ29kZUF0IiwiYXJyYXkiLCJvdXQiLCJsZW4iLCJjIiwiY2hhcjIiLCJjaGFyMyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJlcXVlc3QiLCJ3cml0ZUZpbGUiLCJlbmNvZGluZyIsImRlZmF1bHQiLCJfaW5pdEFSVG9vbGtpdE5GVCJdLCJzb3VyY2VSb290IjoiIn0=